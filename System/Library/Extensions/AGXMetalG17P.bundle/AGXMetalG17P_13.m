uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  float32x4_t v5;
  uint64_t v6;
  unsigned char *v7;
  unsigned int v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  uint64_t *v28;
  char *v29;
  unsigned char *v30;
  int v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  BOOL v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  int v44;
  int v45;
  long long *v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t result;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unsigned char *v63;
  unsigned char *v64;
  long long *v65;
  uint64_t *v66;
  void *v67;
  char *v68;
  unsigned char *v69;
  int v70;
  unsigned int v71;
  char v72;
  long long *v73;
  _OWORD *v74;
  uint64_t v75;
  long long v76;
  void *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned char v81[1032];
  uint64_t v82;

  v2 = 0;
  v82 = *MEMORY[0x263EF8340];
  v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    v8 = *v4;
    if (v8 == 127)
    {
      v9 = *(_OWORD *)(v3 + 16);
      v10 = *(_OWORD *)(v3 + 32);
      v11 = *(_OWORD *)(v3 + 48);
      v12 = *(_OWORD *)(v3 + 80);
      v13 = *(_OWORD *)(v3 + 96);
      v14 = *(_OWORD *)(v3 + 112);
      v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      v6 = 128;
    }
    else if (v8 == 3)
    {
      v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      v6 = 4;
    }
    else if (*v4)
    {
      v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      v6 = 0;
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    v18 = 8 * *(unsigned int *)(a1 + 76);
    v19 = &v81[v17 + v18];
    v20 = *(void *)(a1 + 56);
    v21 = *(void *)(a1 + 64);
    v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      v23 = 1;
    }
    else {
      v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      v24 = &v81[v17 + v18];
      v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        v26 = 0;
        v27 = &v81[v17 + v18];
        v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v29 = (char *)(v20 + v21 * v26);
          v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            v32 = v27;
            v33 = v28;
            v34 = v23 & 0x7FFFFFFF8;
            do
            {
              v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v31 = 0;
          }
          v36 = v31 + 1;
          do
          {
            v37 = *v29++;
            *v30++ = v37;
            v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      v61 = 0;
      v62 = v23 & 0x7FFFFFFE0;
      v63 = &v81[v17 + v18];
      v64 = &v81[v17 + 16 + v18];
      v65 = (long long *)(v20 + 16);
      v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        v68 = (char *)(v20 + v21 * v61);
        v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          v73 = v65;
          v74 = v64;
          v75 = v23 & 0x7FFFFFFE0;
          do
          {
            v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            v77 = v67;
            v78 = v66;
            v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          v70 = 0;
        }
        v71 = v70 + 1;
        do
        {
          v72 = *v68++;
          *v69++ = v72;
          v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        v65 = (long long *)((char *)v65 + v21);
        v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (i = 0; i != v16; ++i)
    {
      v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  v41 = 0;
  v42 = *(_OWORD **)(a1 + 40);
  v43 = *(char **)(a1 + 48);
  v44 = *(unsigned __int8 *)(a1 + 88);
  v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      result = 4;
    }
    else {
      result = result;
    }
    if (v58) {
      v60 = result == 0;
    }
    else {
      v60 = 1;
    }
    if (v60)
    {
      v55 = 0;
    }
    else
    {
      v46 = (long long *)&v81[512 * v56 + 32 * v57];
      v47 = *v46;
      v48 = v46[1];
      v49 = v46[8];
      v50 = v46[9];
      v51 = v46[16];
      v52 = v46[17];
      v46 += 24;
      v53 = *v46;
      v54 = v46[1];
      *v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        v27 = &v62[v17 + v18];
        v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v29 = (char *)(v20 + v21 * v26);
          v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            v32 = v27;
            v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      v44 = &v62[v17 + v18];
      v45 = &v62[v17 + 16 + v18];
      v46 = (long long *)(v20 + 16);
      v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        v49 = (char *)(v20 + v21 * v42);
        v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          v54 = v46;
          v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            v58 = i;
            v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        v46 = (long long *)((char *)v46 + v21);
        v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    v58 = &v76[v13 + v14];
    v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(uint16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v76[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v78 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v78.val[0];
      v7[12] = (int64x2_t)v78.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
  long long v15 = &v76[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v19 > 7)
  {
    if (!v19 || (v19 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v38 = 0;
        do
        {
          v15[v38] = *(unsigned char *)(v16 + v38);
          ++v38;
        }
        while (v18 > v38);
        v15 += 64;
        v16 += v17;
      }
      goto LABEL_39;
    }
    unint64_t v22 = &v76[v13 + v14];
    uint64_t v23 = v19 & 0x3FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v24 = 0;
      uint64_t v25 = &v76[v13 + v14];
      uint64_t v26 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        v27 = (char *)(v16 + v17 * v24);
        v28 = &v15[64 * v24];
        if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
        {
          v28 += v23;
          v30 = v25;
          int v31 = v26;
          uint64_t v32 = v19 & 0x3FFFFFFF8;
          do
          {
            uint64_t v33 = *v31++;
            *v30++ = v33;
            v32 -= 8;
          }
          while (v32);
          if (v19 == v23) {
            goto LABEL_25;
          }
          v27 += v23;
          int v29 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        unsigned int v34 = v29 + 1;
        do
        {
          char v35 = *v27++;
          *v28++ = v35;
          BOOL v36 = v18 > v34++;
        }
        while (v36);
LABEL_25:
        ++v24;
        uint64_t v26 = (uint64_t *)((char *)v26 + v17);
        v25 += 64;
        if (v24 == v12) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v19 & 0x3FFFFFFE0;
    unint64_t v58 = &v76[v13 + v14];
    uint64_t v59 = &v76[v13 + 16 + v14];
    unint64_t v60 = (long long *)(v16 + 16);
    uint64_t v61 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
    float64x2x2_t v62 = &v58[v19 & 0x3FFFFFFE0];
    while (1)
    {
      uint64_t v63 = (char *)(v16 + v17 * v56);
      v64 = &v15[64 * v56];
      if ((unint64_t)(&v22[64 * v56] - v63) >= 0x20)
      {
        v68 = v60;
        v69 = v59;
        uint64_t v70 = v19 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v19 == v57) {
          goto LABEL_54;
        }
        if ((v19 & 0x18) != 0)
        {
          v64 += v23;
          v72 = v62;
          v73 = v61;
          unint64_t v74 = v23 - (v19 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *v72++ = v75;
            v74 -= 8;
          }
          while (v74);
          if (v19 == v23) {
            goto LABEL_54;
          }
          v63 += v23;
          int v65 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v36 = v18 > v66++;
      }
      while (v36);
LABEL_54:
      ++v56;
      v59 += 64;
      unint64_t v60 = (long long *)((char *)v60 + v17);
      uint64_t v61 = (uint64_t *)((char *)v61 + v17);
      v62 += 8;
      if (v56 == v12) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v12; ++j)
  {
    uint64_t v21 = 0;
    do
    {
      v15[v21] = *(unsigned char *)(v16 + v21);
      ++v21;
    }
    while (v18 > v21);
    v15 += 64;
    v16 += v17;
  }
LABEL_39:
  uint64_t v39 = 0;
  uint64_t v40 = *(int64x2_t **)(a1 + 40);
  uint64_t v41 = *(char **)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39 + 1];
    uint64_t v52 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v39];
    unsigned int v53 = (v42 - 4 * v52) & ~((v42 - 4 * (int)v52) >> 31);
    if (v53 >= 4) {
      unsigned int v53 = 4;
    }
    LODWORD(result) = (v43 - 4 * v51) & ~((v43 - 4 * (int)v51) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v53) {
      BOOL v55 = result == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (v55)
    {
      char v50 = 0;
    }
    else
    {
      v44 = (int64x2_t *)&v76[256 * v51 + 16 * v52];
      int64x2_t v45 = v44[4];
      int64x2_t v46 = vzip1q_s64(*v44, v45);
      int64x2_t v47 = vzip2q_s64(*v44, v45);
      int64x2_t v48 = v44[8];
      int64x2_t v49 = v44[12];
      *uint64_t v40 = v46;
      v40[1] = v47;
      v40[2] = vzip1q_s64(v48, v49);
      v40[3] = vzip2q_s64(v48, v49);
      v40 += 4;
      char v50 = 63;
    }
    *v41++ = v50;
    v39 += 2;
  }
  while (v39 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  v4 = *(unsigned char **)(a1 + 48);
  do
  {
    v7 = (int64x2_t *)&v60[256
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v62 = vld2q_f64(v11);
      int64x2_t *v7 = vzip1q_s64(*(int64x2_t *)v3, v10);
      v7[4] = vzip2q_s64(v9, v10);
      v7[8] = (int64x2_t)v62.val[0];
      v7[12] = (int64x2_t)v62.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      int64x2_t *v7 = (int64x2_t)v5;
      v7[4] = (int64x2_t)v5;
      v7[8] = (int64x2_t)v5;
      v7[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v7, 64, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7->i64[0] = 0;
      v7->i64[1] = 0;
      v7[4].i64[0] = 0;
      v7[4].i64[1] = 0;
      v7[8].i64[0] = 0;
      v7[8].i64[1] = 0;
      v7[12].i64[0] = 0;
      v7[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v13 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v14 = 4 * *(unsigned int *)(a1 + 76);
    long long v15 = &v60[v13 + v14];
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64);
    unint64_t v18 = 4 * *(unsigned int *)(a1 + 84);
    if (v18 <= 1) {
      unint64_t v19 = 1;
    }
    else {
      unint64_t v19 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v19 <= 7)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v21 = 0;
        do
        {
          v15[v21] = *(unsigned char *)(v16 + v21);
          ++v21;
        }
        while (v18 > v21);
        v15 += 64;
        v16 += v17;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v19 && !((v19 - 1) >> 32))
    {
      unint64_t v22 = &v60[v13 + v14];
      uint64_t v23 = v19 & 0x3FFFFFFF8;
      if (v19 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v13 + v14];
        uint64_t v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          v27 = (char *)(v16 + v17 * v24);
          v28 = &v15[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            v30 = v25;
            int v31 = v26;
            uint64_t v32 = v19 & 0x3FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v19 == v23) {
              goto LABEL_25;
            }
            v27 += v23;
            int v29 = v19 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v18 > v34++;
          }
          while (v36);
LABEL_25:
          ++v24;
          uint64_t v26 = (uint64_t *)((char *)v26 + v17);
          v25 += 64;
          if (v24 == v12) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v19 & 0x3FFFFFFE0;
      int v42 = &v60[v13 + v14];
      int v43 = &v60[v13 + 16 + v14];
      v44 = (long long *)(v16 + 16);
      int64x2_t v45 = (uint64_t *)(v16 + (v19 & 0x3FFFFFFE0));
      for (uint64_t j = &v42[v19 & 0x3FFFFFFE0]; ; j += 8)
      {
        int64x2_t v47 = (char *)(v16 + v17 * v40);
        int64x2_t v48 = &v15[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          uint64_t v52 = v44;
          unsigned int v53 = v43;
          uint64_t v54 = v19 & 0x3FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v19 == v41) {
            goto LABEL_41;
          }
          if ((v19 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = j;
            uint64_t v57 = v45;
            unint64_t v58 = v23 - (v19 & 0x3FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v19 == v23) {
              goto LABEL_41;
            }
            v47 += v23;
            int v49 = v19 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v19 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v18 > v50++;
        }
        while (v36);
LABEL_41:
        ++v40;
        v43 += 64;
        v44 = (long long *)((char *)v44 + v17);
        int64x2_t v45 = (uint64_t *)((char *)v45 + v17);
        if (v40 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v12; ++k)
    {
      uint64_t v38 = 0;
      do
      {
        v15[v38] = *(unsigned char *)(v16 + v38);
        ++v38;
      }
      while (v18 > v38);
      v15 += 64;
      v16 += v17;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v77, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    int16x8_t v5 = (char *)v77 + v3 + v4;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 256;
        v6 += v7;
      }
      goto LABEL_14;
    }
    int v42 = (char *)v77 + v3 + v4;
    uint64_t v43 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v44 = 0;
      int64x2_t v45 = (char *)v77 + v3 + v4;
      int64x2_t v46 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v47 = (char *)(v6 + v7 * v44);
        int64x2_t v48 = &v5[256 * v44];
        if ((unint64_t)(&v42[256 * v44] - v47) > 0x1F)
        {
          v48 += v43;
          unsigned int v50 = v45;
          char v51 = v46;
          uint64_t v52 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v9 == v43) {
            goto LABEL_30;
          }
          v47 += v43;
          int v49 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v54 = v49 + 1;
        do
        {
          char v55 = *v47++;
          *v48++ = v55;
          BOOL v56 = v8 > v54++;
        }
        while (v56);
LABEL_30:
        ++v44;
        int64x2_t v46 = (uint64_t *)((char *)v46 + v7);
        v45 += 256;
        if (v44 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v57 = 0;
    uint64_t v58 = v9 & 0xFFFFFFFE0;
    uint64_t v59 = (char *)v77 + v3 + v4;
    unint64_t v60 = (char *)&v77[1] + v3 + v4;
    uint64_t v61 = (long long *)(v6 + 16);
    float64x2x2_t v62 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    uint64_t v63 = &v59[v9 & 0xFFFFFFFE0];
    do
    {
      v64 = (char *)(v6 + v7 * v57);
      int v65 = &v5[256 * v57];
      if ((unint64_t)(&v42[256 * v57] - v64) >= 0x20)
      {
        char v67 = v61;
        v68 = v60;
        uint64_t v69 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v70 = *v67;
          *(v68 - 1) = *(v67 - 1);
          _OWORD *v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 32;
        }
        while (v69);
        if (v9 == v58) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v65 += v43;
          long long v71 = v63;
          v72 = v62;
          unint64_t v73 = v43 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v74 = *v72++;
            *(void *)long long v71 = v74;
            v71 += 8;
            v73 -= 8;
          }
          while (v73);
          if (v9 == v43) {
            goto LABEL_41;
          }
          v64 += v43;
          int v66 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v64 += v58;
          v65 += v58;
          int v66 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v66 = 0;
      }
      unsigned int v75 = v66 + 1;
      do
      {
        char v76 = *v64++;
        *v65++ = v76;
        BOOL v56 = v8 > v75++;
      }
      while (v56);
LABEL_41:
      ++v57;
      v60 += 256;
      uint64_t v61 = (long long *)((char *)v61 + v7);
      float64x2x2_t v62 = (uint64_t *)((char *)v62 + v7);
      v63 += 256;
    }
    while (v57 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  long long v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v13 + 1];
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v13];
    unsigned int v39 = (v16 - 4 * v38) & ~((v16 - 4 * (int)v38) >> 31);
    if (v39 >= 4) {
      unsigned int v39 = 4;
    }
    LODWORD(result) = (v17 - 4 * v37) & ~((v17 - 4 * (int)v37) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v39) {
      BOOL v41 = result == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      char v36 = 0;
    }
    else
    {
      unint64_t v18 = &v77[64 * v37 + 4 * v38];
      long long v19 = *v18;
      long long v20 = v18[1];
      long long v21 = v18[16];
      long long v22 = v18[17];
      long long v23 = v18[2];
      long long v24 = v18[3];
      long long v25 = v18[18];
      long long v26 = v18[32];
      long long v27 = v18[33];
      long long v28 = v18[34];
      long long v29 = v18[35];
      long long v30 = v18[19];
      v18 += 48;
      long long v31 = *v18;
      long long v32 = v18[1];
      long long v33 = v18[2];
      long long v34 = v18[3];
      *uint64_t v14 = v19;
      v14[1] = v20;
      v14[2] = v21;
      v14[3] = v22;
      v14[4] = v23;
      v14[5] = v24;
      v14[6] = v25;
      v14[7] = v30;
      v14[8] = v26;
      v14[9] = v27;
      v14[10] = v31;
      v14[11] = v32;
      char v35 = v14 + 12;
      v14 += 16;
      char v36 = -1;
      *char v35 = v28;
      v35[1] = v29;
      v35[2] = v33;
      v35[3] = v34;
    }
    *v15++ = v36;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v47, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v47 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int v16 = (char *)v47 + v5 + v6;
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      long long v19 = (char *)v47 + v5 + v6;
      long long v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v21 = (char *)(v8 + v9 * v18);
        long long v22 = &v7[256 * v18];
        if ((unint64_t)(&v16[256 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          long long v24 = v19;
          long long v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        long long v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 256;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    long long v33 = (char *)v47 + v5 + v6;
    long long v34 = (char *)&v47[1] + v5 + v6;
    uint64_t v35 = v8 + 16;
    char v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 256)
    {
      uint64_t v38 = (char *)(v8 + v9 * v31);
      uint64_t v2 = &v7[256 * v31];
      if ((unint64_t)(&v16[256 * v31] - v38) >= 0x20)
      {
        uint64_t v3 = v35;
        uint64_t v40 = v34;
        uint64_t v41 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *(_OWORD *)v3;
          *(v40 - 1) = *(_OWORD *)(v3 - 16);
          *uint64_t v40 = v42;
          v40 += 2;
          v3 += 32;
          v41 -= 32;
        }
        while (v41);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v2 += v17;
          uint64_t v3 = (uint64_t)i;
          uint64_t v43 = v36;
          unint64_t v44 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v45 = *v43++;
            *(void *)uint64_t v3 = v45;
            v3 += 8;
            v44 -= 8;
          }
          while (v44);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v39 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v2 += v32;
          int v39 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      LODWORD(v3) = v39 + 1;
      do
      {
        char v46 = *v38++;
        *v2++ = v46;
        BOOL v30 = v10 > v3;
        uint64_t v3 = (v3 + 1);
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 256;
      v35 += v9;
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 256;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v77, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v4 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v5 = (char *)v77 + v3 + v4;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 16 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 256;
        v6 += v7;
      }
      goto LABEL_14;
    }
    long long v42 = (char *)v77 + v3 + v4;
    uint64_t v43 = v9 & 0xFFFFFFFF0;
    if (v9 < 0x20)
    {
      uint64_t v44 = 0;
      uint64_t v45 = (char *)v77 + v3 + v4;
      char v46 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v47 = (char *)(v6 + v7 * v44);
        uint64_t v48 = &v5[256 * v44];
        if ((unint64_t)(&v42[256 * v44] - v47) > 0x1F)
        {
          v48 += v43;
          unsigned int v50 = v45;
          char v51 = v46;
          uint64_t v52 = v9 & 0xFFFFFFFF0;
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v9 == v43) {
            goto LABEL_30;
          }
          v47 += v43;
          int v49 = v9 & 0xFFFFFFF0;
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v54 = v49 + 1;
        do
        {
          char v55 = *v47++;
          *v48++ = v55;
          BOOL v56 = v8 > v54++;
        }
        while (v56);
LABEL_30:
        ++v44;
        char v46 = (uint64_t *)((char *)v46 + v7);
        v45 += 256;
        if (v44 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v57 = 0;
    uint64_t v58 = v9 & 0xFFFFFFFE0;
    uint64_t v59 = (char *)v77 + v3 + v4;
    unint64_t v60 = (char *)&v77[1] + v3 + v4;
    uint64_t v61 = (long long *)(v6 + 16);
    float64x2x2_t v62 = (uint64_t *)(v6 + (v9 & 0xFFFFFFFE0));
    uint64_t v63 = &v59[v9 & 0xFFFFFFFE0];
    do
    {
      v64 = (char *)(v6 + v7 * v57);
      int v65 = &v5[256 * v57];
      if ((unint64_t)(&v42[256 * v57] - v64) >= 0x20)
      {
        char v67 = v61;
        v68 = v60;
        uint64_t v69 = v9 & 0xFFFFFFFE0;
        do
        {
          long long v70 = *v67;
          *(v68 - 1) = *(v67 - 1);
          _OWORD *v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 32;
        }
        while (v69);
        if (v9 == v58) {
          goto LABEL_41;
        }
        if ((v9 & 0x10) != 0)
        {
          v65 += v43;
          long long v71 = v63;
          v72 = v62;
          unint64_t v73 = v43 - (v9 & 0xFFFFFFFE0);
          do
          {
            uint64_t v74 = *v72++;
            *(void *)long long v71 = v74;
            v71 += 8;
            v73 -= 8;
          }
          while (v73);
          if (v9 == v43) {
            goto LABEL_41;
          }
          v64 += v43;
          int v66 = v9 & 0xFFFFFFF0;
        }
        else
        {
          v64 += v58;
          v65 += v58;
          int v66 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v66 = 0;
      }
      unsigned int v75 = v66 + 1;
      do
      {
        char v76 = *v64++;
        *v65++ = v76;
        BOOL v56 = v8 > v75++;
      }
      while (v56);
LABEL_41:
      ++v57;
      v60 += 256;
      uint64_t v61 = (long long *)((char *)v61 + v7);
      float64x2x2_t v62 = (uint64_t *)((char *)v62 + v7);
      v63 += 256;
    }
    while (v57 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  long long v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v13 + 1];
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v13];
    unsigned int v39 = (v16 - 4 * v38) & ~((v16 - 4 * (int)v38) >> 31);
    if (v39 >= 4) {
      unsigned int v39 = 4;
    }
    LODWORD(result) = (v17 - 4 * v37) & ~((v17 - 4 * (int)v37) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v39) {
      BOOL v41 = result == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      char v36 = 0;
    }
    else
    {
      uint64_t v18 = &v77[64 * v37 + 4 * v38];
      long long v19 = *v18;
      long long v20 = v18[1];
      long long v21 = v18[16];
      long long v22 = v18[17];
      long long v23 = v18[2];
      long long v24 = v18[3];
      long long v25 = v18[18];
      long long v26 = v18[32];
      long long v27 = v18[33];
      long long v28 = v18[34];
      long long v29 = v18[35];
      long long v30 = v18[19];
      v18 += 48;
      long long v31 = *v18;
      long long v32 = v18[1];
      long long v33 = v18[2];
      long long v34 = v18[3];
      *uint64_t v14 = v19;
      v14[1] = v20;
      v14[2] = v21;
      v14[3] = v22;
      v14[4] = v23;
      v14[5] = v24;
      v14[6] = v25;
      v14[7] = v30;
      v14[8] = v26;
      v14[9] = v27;
      v14[10] = v31;
      v14[11] = v32;
      uint64_t v35 = v14 + 12;
      v14 += 16;
      char v36 = -1;
      *uint64_t v35 = v28;
      v35[1] = v29;
      v35[2] = v33;
      v35[3] = v34;
    }
    *v15++ = v36;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v47, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v47 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int v16 = (char *)v47 + v5 + v6;
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      long long v19 = (char *)v47 + v5 + v6;
      long long v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v21 = (char *)(v8 + v9 * v18);
        long long v22 = &v7[256 * v18];
        if ((unint64_t)(&v16[256 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          long long v24 = v19;
          long long v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        long long v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 256;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    long long v33 = (char *)v47 + v5 + v6;
    long long v34 = (char *)&v47[1] + v5 + v6;
    uint64_t v35 = v8 + 16;
    char v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 256)
    {
      uint64_t v38 = (char *)(v8 + v9 * v31);
      uint64_t v2 = &v7[256 * v31];
      if ((unint64_t)(&v16[256 * v31] - v38) >= 0x20)
      {
        uint64_t v3 = v35;
        uint64_t v40 = v34;
        uint64_t v41 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v42 = *(_OWORD *)v3;
          *(v40 - 1) = *(_OWORD *)(v3 - 16);
          *uint64_t v40 = v42;
          v40 += 2;
          v3 += 32;
          v41 -= 32;
        }
        while (v41);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v2 += v17;
          uint64_t v3 = (uint64_t)i;
          uint64_t v43 = v36;
          unint64_t v44 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v45 = *v43++;
            *(void *)uint64_t v3 = v45;
            v3 += 8;
            v44 -= 8;
          }
          while (v44);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v39 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v2 += v32;
          int v39 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      LODWORD(v3) = v39 + 1;
      do
      {
        char v46 = *v38++;
        *v2++ = v46;
        BOOL v30 = v10 > v3;
        uint64_t v3 = (v3 + 1);
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 256;
      v35 += v9;
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 256;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v47, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), (uint64_t)v2, v3);
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[64
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                           + 4
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 96);
      float64x2_t v13 = *(float64x2_t *)(v3 + 112);
      float64x2_t v14 = *(float64x2_t *)(v3 + 64);
      float64x2_t v15 = *(float64x2_t *)(v3 + 80);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 192);
      float64x2_t v19 = *(float64x2_t *)(v3 + 208);
      float64x2_t v20 = *(float64x2_t *)(v3 + 160);
      float64x2_t v21 = *(float64x2_t *)(v3 + 176);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      float64x2_t *v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v14;
      v7[3] = v15;
      v7[16] = v10;
      v7[17] = v11;
      v7[18] = v12;
      v7[19] = v13;
      v7[32] = v16;
      v7[33] = v17;
      v7[34] = v18;
      v7[35] = v19;
      uint64_t v6 = 256;
      v7[48] = v20;
      v7[49] = v21;
      v7[50] = v22;
      v7[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      float64x2_t *v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[32] = v5;
      v7[33] = v5;
      v7[34] = v5;
      v7[35] = v5;
      v7[48] = v5;
      v7[49] = v5;
      v7[50] = v5;
      v7[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      float64x2_t *v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[32] = 0u;
      v7[33] = 0u;
      v7[34] = 0u;
      v7[35] = 0u;
      v7[48] = 0u;
      v7[49] = 0u;
      v7[50] = 0u;
      v7[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 16 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = (char *)v70 + v25 + v26;
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 16 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = (char *)v70 + v25 + v26;
      uint64_t v33 = v31 & 0xFFFFFFFF0;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        uint64_t v35 = (char *)v70 + v25 + v26;
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          uint64_t v38 = &v27[256 * v34];
          if ((unint64_t)(&v32[256 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            uint64_t v40 = v35;
            uint64_t v41 = v36;
            uint64_t v42 = v31 & 0xFFFFFFFF0;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 256;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0xFFFFFFFE0;
      uint64_t v52 = (char *)v70 + v25 + v26;
      uint64_t v53 = (char *)&v70[1] + v25 + v26;
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0xFFFFFFFE0));
      for (uint64_t i = &v52[v31 & 0xFFFFFFFE0]; ; i += 256)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[256 * v50];
        if ((unint64_t)(&v32[256 * v50] - v57) >= 0x20)
        {
          unint64_t v60 = v54;
          uint64_t v61 = v53;
          uint64_t v62 = v31 & 0xFFFFFFFE0;
          do
          {
            long long v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *uint64_t v61 = v63;
            v61 += 2;
            v60 += 2;
            v62 -= 32;
          }
          while (v62);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x10) != 0)
          {
            v58 += v33;
            v64 = i;
            int v65 = v55;
            unint64_t v66 = v33 - (v31 & 0xFFFFFFFE0);
            do
            {
              uint64_t v67 = *v65++;
              *(void *)v64 = v67;
              v64 += 8;
              v66 -= 8;
            }
            while (v66);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF0;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v68 = v59 + 1;
        do
        {
          char v69 = *v57++;
          *v58++ = v69;
          BOOL v46 = v30 > v68++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 256;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[1024
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                           + 64
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 96);
      float64x2_t v13 = *(float64x2_t *)(v3 + 112);
      float64x2_t v14 = *(float64x2_t *)(v3 + 64);
      float64x2_t v15 = *(float64x2_t *)(v3 + 80);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 192);
      float64x2_t v19 = *(float64x2_t *)(v3 + 208);
      float64x2_t v20 = *(float64x2_t *)(v3 + 160);
      float64x2_t v21 = *(float64x2_t *)(v3 + 176);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      float64x2_t *v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v14;
      v7[3] = v15;
      v7[16] = v10;
      v7[17] = v11;
      v7[18] = v12;
      v7[19] = v13;
      v7[32] = v16;
      v7[33] = v17;
      v7[34] = v18;
      v7[35] = v19;
      uint64_t v6 = 256;
      v7[48] = v20;
      v7[49] = v21;
      v7[50] = v22;
      v7[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      float64x2_t *v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[32] = v5;
      v7[33] = v5;
      v7[34] = v5;
      v7[35] = v5;
      v7[48] = v5;
      v7[49] = v5;
      v7[50] = v5;
      v7[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      float64x2_t *v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[32] = 0u;
      v7[33] = 0u;
      v7[34] = 0u;
      v7[35] = 0u;
      v7[48] = 0u;
      v7[49] = 0u;
      v7[50] = 0u;
      v7[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 16 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = &v70[v25 + v26];
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 16 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = &v70[v25 + v26];
      uint64_t v33 = v31 & 0xFFFFFFFF0;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        uint64_t v35 = &v70[v25 + v26];
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          uint64_t v38 = &v27[256 * v34];
          if ((unint64_t)(&v32[256 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            uint64_t v40 = v35;
            uint64_t v41 = v36;
            uint64_t v42 = v31 & 0xFFFFFFFF0;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 256;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v70, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0xFFFFFFFE0;
      uint64_t v52 = &v70[v25 + v26];
      uint64_t v53 = &v70[v25 + 16 + v26];
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0xFFFFFFFE0));
      for (uint64_t i = &v52[v31 & 0xFFFFFFFE0]; ; i += 32)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[256 * v50];
        if ((unint64_t)(&v32[256 * v50] - v57) >= 0x20)
        {
          unint64_t v60 = v54;
          uint64_t v61 = v53;
          uint64_t v62 = v31 & 0xFFFFFFFE0;
          do
          {
            long long v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *uint64_t v61 = v63;
            v61 += 2;
            v60 += 2;
            v62 -= 32;
          }
          while (v62);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x10) != 0)
          {
            v58 += v33;
            v64 = i;
            int v65 = v55;
            unint64_t v66 = v33 - (v31 & 0xFFFFFFFE0);
            do
            {
              uint64_t v67 = *v65++;
              *v64++ = v67;
              v66 -= 8;
            }
            while (v66);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF0;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v68 = v59 + 1;
        do
        {
          char v69 = *v57++;
          *v58++ = v69;
          BOOL v46 = v30 > v68++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 256;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v70, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v70, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[64
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                           + 4
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 96);
      float64x2_t v13 = *(float64x2_t *)(v3 + 112);
      float64x2_t v14 = *(float64x2_t *)(v3 + 64);
      float64x2_t v15 = *(float64x2_t *)(v3 + 80);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 192);
      float64x2_t v19 = *(float64x2_t *)(v3 + 208);
      float64x2_t v20 = *(float64x2_t *)(v3 + 160);
      float64x2_t v21 = *(float64x2_t *)(v3 + 176);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      float64x2_t *v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v14;
      v7[3] = v15;
      v7[16] = v10;
      v7[17] = v11;
      v7[18] = v12;
      v7[19] = v13;
      v7[32] = v16;
      v7[33] = v17;
      v7[34] = v18;
      v7[35] = v19;
      uint64_t v6 = 256;
      v7[48] = v20;
      v7[49] = v21;
      v7[50] = v22;
      v7[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      float64x2_t *v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[32] = v5;
      v7[33] = v5;
      v7[34] = v5;
      v7[35] = v5;
      v7[48] = v5;
      v7[49] = v5;
      v7[50] = v5;
      v7[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      float64x2_t *v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[32] = 0u;
      v7[33] = 0u;
      v7[34] = 0u;
      v7[35] = 0u;
      v7[48] = 0u;
      v7[49] = 0u;
      v7[50] = 0u;
      v7[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 16 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = (char *)v70 + v25 + v26;
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 16 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = (char *)v70 + v25 + v26;
      uint64_t v33 = v31 & 0xFFFFFFFF0;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        uint64_t v35 = (char *)v70 + v25 + v26;
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          uint64_t v38 = &v27[256 * v34];
          if ((unint64_t)(&v32[256 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            uint64_t v40 = v35;
            uint64_t v41 = v36;
            uint64_t v42 = v31 & 0xFFFFFFFF0;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 256;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0xFFFFFFFE0;
      uint64_t v52 = (char *)v70 + v25 + v26;
      uint64_t v53 = (char *)&v70[1] + v25 + v26;
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0xFFFFFFFE0));
      for (uint64_t i = &v52[v31 & 0xFFFFFFFE0]; ; i += 256)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[256 * v50];
        if ((unint64_t)(&v32[256 * v50] - v57) >= 0x20)
        {
          unint64_t v60 = v54;
          uint64_t v61 = v53;
          uint64_t v62 = v31 & 0xFFFFFFFE0;
          do
          {
            long long v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *uint64_t v61 = v63;
            v61 += 2;
            v60 += 2;
            v62 -= 32;
          }
          while (v62);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x10) != 0)
          {
            v58 += v33;
            v64 = i;
            int v65 = v55;
            unint64_t v66 = v33 - (v31 & 0xFFFFFFFE0);
            do
            {
              uint64_t v67 = *v65++;
              *(void *)v64 = v67;
              v64 += 8;
              v66 -= 8;
            }
            while (v66);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF0;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v68 = v59 + 1;
        do
        {
          char v69 = *v57++;
          *v58++ = v69;
          BOOL v46 = v30 > v68++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 256;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, 256, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = (float64x2_t *)&v70[1024
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                           + 64
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      float64x2_t v9 = *(float64x2_t *)(v3 + 16);
      float64x2_t v10 = *(float64x2_t *)(v3 + 32);
      float64x2_t v11 = *(float64x2_t *)(v3 + 48);
      float64x2_t v12 = *(float64x2_t *)(v3 + 96);
      float64x2_t v13 = *(float64x2_t *)(v3 + 112);
      float64x2_t v14 = *(float64x2_t *)(v3 + 64);
      float64x2_t v15 = *(float64x2_t *)(v3 + 80);
      float64x2_t v16 = *(float64x2_t *)(v3 + 128);
      float64x2_t v17 = *(float64x2_t *)(v3 + 144);
      float64x2_t v18 = *(float64x2_t *)(v3 + 192);
      float64x2_t v19 = *(float64x2_t *)(v3 + 208);
      float64x2_t v20 = *(float64x2_t *)(v3 + 160);
      float64x2_t v21 = *(float64x2_t *)(v3 + 176);
      float64x2_t v22 = *(float64x2_t *)(v3 + 224);
      float64x2_t v23 = *(float64x2_t *)(v3 + 240);
      float64x2_t *v7 = *(float64x2_t *)v3;
      v7[1] = v9;
      v7[2] = v14;
      v7[3] = v15;
      v7[16] = v10;
      v7[17] = v11;
      v7[18] = v12;
      v7[19] = v13;
      v7[32] = v16;
      v7[33] = v17;
      v7[34] = v18;
      v7[35] = v19;
      uint64_t v6 = 256;
      v7[48] = v20;
      v7[49] = v21;
      v7[50] = v22;
      v7[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      float64x2_t *v7 = v5;
      v7[1] = v5;
      v7[2] = v5;
      v7[3] = v5;
      v7[16] = v5;
      v7[17] = v5;
      v7[18] = v5;
      v7[19] = v5;
      v7[32] = v5;
      v7[33] = v5;
      v7[34] = v5;
      v7[35] = v5;
      v7[48] = v5;
      v7[49] = v5;
      v7[50] = v5;
      v7[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v7, 256, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      v7[2] = 0u;
      v7[3] = 0u;
      float64x2_t *v7 = 0u;
      v7[1] = 0u;
      v7[16] = 0u;
      v7[17] = 0u;
      v7[18] = 0u;
      v7[19] = 0u;
      v7[32] = 0u;
      v7[33] = 0u;
      v7[34] = 0u;
      v7[35] = 0u;
      v7[48] = 0u;
      v7[49] = 0u;
      v7[50] = 0u;
      v7[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v25 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v26 = 16 * *(unsigned int *)(a1 + 76);
    uint64_t v27 = &v70[v25 + v26];
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v30 = 16 * *(unsigned int *)(a1 + 84);
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v31 && !((v31 - 1) >> 32))
    {
      uint64_t v32 = &v70[v25 + v26];
      uint64_t v33 = v31 & 0xFFFFFFFF0;
      if (v31 < 0x20)
      {
        uint64_t v34 = 0;
        uint64_t v35 = &v70[v25 + v26];
        char v36 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v37 = (char *)(v28 + v29 * v34);
          uint64_t v38 = &v27[256 * v34];
          if ((unint64_t)(&v32[256 * v34] - v37) > 0x1F)
          {
            v38 += v33;
            uint64_t v40 = v35;
            uint64_t v41 = v36;
            uint64_t v42 = v31 & 0xFFFFFFFF0;
            do
            {
              uint64_t v43 = *v41++;
              *v40++ = v43;
              v42 -= 8;
            }
            while (v42);
            if (v31 == v33) {
              goto LABEL_19;
            }
            v37 += v33;
            int v39 = v31 & 0xFFFFFFF0;
          }
          else
          {
            int v39 = 0;
          }
          unsigned int v44 = v39 + 1;
          do
          {
            char v45 = *v37++;
            *v38++ = v45;
            BOOL v46 = v30 > v44++;
          }
          while (v46);
LABEL_19:
          ++v34;
          char v36 = (uint64_t *)((char *)v36 + v29);
          v35 += 256;
          if (v34 == v24) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v70, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v51 = v31 & 0xFFFFFFFE0;
      uint64_t v52 = &v70[v25 + v26];
      uint64_t v53 = &v70[v25 + 16 + v26];
      unsigned int v54 = (long long *)(v28 + 16);
      char v55 = (uint64_t *)(v28 + (v31 & 0xFFFFFFFE0));
      for (uint64_t i = &v52[v31 & 0xFFFFFFFE0]; ; i += 32)
      {
        uint64_t v57 = (char *)(v28 + v29 * v50);
        uint64_t v58 = &v27[256 * v50];
        if ((unint64_t)(&v32[256 * v50] - v57) >= 0x20)
        {
          unint64_t v60 = v54;
          uint64_t v61 = v53;
          uint64_t v62 = v31 & 0xFFFFFFFE0;
          do
          {
            long long v63 = *v60;
            *(v61 - 1) = *(v60 - 1);
            *uint64_t v61 = v63;
            v61 += 2;
            v60 += 2;
            v62 -= 32;
          }
          while (v62);
          if (v31 == v51) {
            goto LABEL_35;
          }
          if ((v31 & 0x10) != 0)
          {
            v58 += v33;
            v64 = i;
            int v65 = v55;
            unint64_t v66 = v33 - (v31 & 0xFFFFFFFE0);
            do
            {
              uint64_t v67 = *v65++;
              *v64++ = v67;
              v66 -= 8;
            }
            while (v66);
            if (v31 == v33) {
              goto LABEL_35;
            }
            v57 += v33;
            int v59 = v31 & 0xFFFFFFF0;
          }
          else
          {
            v57 += v51;
            v58 += v51;
            int v59 = v31 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v59 = 0;
        }
        unsigned int v68 = v59 + 1;
        do
        {
          char v69 = *v57++;
          *v58++ = v69;
          BOOL v46 = v30 > v68++;
        }
        while (v46);
LABEL_35:
        ++v50;
        v53 += 256;
        unsigned int v54 = (long long *)((char *)v54 + v29);
        char v55 = (uint64_t *)((char *)v55 + v29);
        if (v50 == v24) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v70, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v24; ++j)
    {
      uint64_t v48 = 0;
      do
      {
        v27[v48] = *(unsigned char *)(v28 + v48);
        ++v48;
      }
      while (v30 > v48);
      v27 += 256;
      v28 += v29;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v70, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = &v54[0].i8[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = &v54[0].i8[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = &v54[0].i8[v6 + v7];
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *(void *)uint64_t v27 = v30;
            v27 += 8;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[0].i8[v6 + v7];
    uint64_t v37 = &v54[1].i8[v6 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 64)
    {
      uint64_t v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        int64x2_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *((_OWORD *)v47 - 1) = *(v46 - 1);
          *(_OWORD *)int64x2_t v47 = v49;
          v47 += 32;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)uint64_t v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = &v54[v6 + v7];
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      uint64_t v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        int64x2_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = &v54[0].i8[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = &v54[0].i8[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = &v54[0].i8[v6 + v7];
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *(void *)uint64_t v27 = v30;
            v27 += 8;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[0].i8[v6 + v7];
    uint64_t v37 = &v54[1].i8[v6 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 64)
    {
      uint64_t v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        int64x2_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *((_OWORD *)v47 - 1) = *(v46 - 1);
          *(_OWORD *)int64x2_t v47 = v49;
          v47 += 32;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)uint64_t v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v54, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unsigned int v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    float64x2_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      float64x2_t v22 = &v54[v6 + v7];
      float64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        unint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          uint64_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        float64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      uint64_t v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        BOOL v46 = v38;
        int64x2_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v54, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v78, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v6 = (char *)v78 + v4 + v5;
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v10) {
      BOOL v11 = (v10 - 1) >> 32 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v6[v13] = *(unsigned char *)(v7 + v13);
          ++v13;
        }
        while (v9 > v13);
        v6 += 256;
        v7 += v8;
      }
      goto LABEL_14;
    }
    int v43 = (char *)v78 + v4 + v5;
    uint64_t v44 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v45 = 0;
      BOOL v46 = (char *)v78 + v4 + v5;
      int64x2_t v47 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v48 = (char *)(v7 + v8 * v45);
        long long v49 = &v6[256 * v45];
        if ((unint64_t)(&v43[256 * v45] - v48) > 0x1F)
        {
          v49 += v44;
          uint64_t v51 = v46;
          unint64_t v52 = v47;
          uint64_t v53 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v10 == v44) {
            goto LABEL_30;
          }
          v48 += v44;
          int v50 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v55 = v50 + 1;
        do
        {
          char v56 = *v48++;
          *v49++ = v56;
          BOOL v57 = v9 > v55++;
        }
        while (v57);
LABEL_30:
        ++v45;
        int64x2_t v47 = (uint64_t *)((char *)v47 + v8);
        v46 += 256;
        if (v45 == v3) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v10 & 0xFFFFFFFE0;
    unint64_t v60 = (char *)v78 + v4 + v5;
    uint64_t v61 = (char *)&v78[1] + v4 + v5;
    uint64_t v62 = (long long *)(v7 + 16);
    long long v63 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    v64 = &v60[v10 & 0xFFFFFFFE0];
    do
    {
      int v65 = (char *)(v7 + v8 * v58);
      unint64_t v66 = &v6[256 * v58];
      if ((unint64_t)(&v43[256 * v58] - v65) >= 0x20)
      {
        unsigned int v68 = v62;
        char v69 = v61;
        uint64_t v70 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v10 == v59) {
          goto LABEL_41;
        }
        if ((v10 & 0x10) != 0)
        {
          v66 += v44;
          v72 = v64;
          unint64_t v73 = v63;
          unint64_t v74 = v44 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *(void *)v72 = v75;
            v72 += 8;
            v74 -= 8;
          }
          while (v74);
          if (v10 == v44) {
            goto LABEL_41;
          }
          v65 += v44;
          int v67 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v76 = v67 + 1;
      do
      {
        char v77 = *v65++;
        *v66++ = v77;
        BOOL v57 = v9 > v76++;
      }
      while (v57);
LABEL_41:
      ++v58;
      v61 += 256;
      uint64_t v62 = (long long *)((char *)v62 + v8);
      long long v63 = (uint64_t *)((char *)v63 + v8);
      v64 += 256;
    }
    while (v58 != v3);
  }
LABEL_14:
  uint64_t v14 = 0;
  BOOL v15 = *(float64x2_t **)(a1 + 40);
  float64x2_t v16 = *(char **)(a1 + 48);
  int v17 = *(unsigned __int8 *)(a1 + 88);
  int v18 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v14 + 1];
    uint64_t v39 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v14];
    unsigned int v40 = (v17 - 4 * v39) & ~((v17 - 4 * (int)v39) >> 31);
    if (v40 >= 4) {
      unsigned int v40 = 4;
    }
    LODWORD(result) = (v18 - 4 * v38) & ~((v18 - 4 * (int)v38) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v40) {
      BOOL v42 = result == 0;
    }
    else {
      BOOL v42 = 1;
    }
    if (v42)
    {
      char v37 = 0;
    }
    else
    {
      float64x2_t v19 = &v78[64 * v38 + 4 * v39];
      float64x2_t v20 = *v19;
      float64x2_t v21 = v19[1];
      float64x2_t v22 = v19[16];
      float64x2_t v23 = v19[17];
      float64x2_t v24 = v19[2];
      float64x2_t v25 = v19[3];
      float64x2_t v26 = v19[18];
      float64x2_t v27 = v19[32];
      float64x2_t v28 = v19[33];
      float64x2_t v29 = v19[34];
      float64x2_t v30 = v19[35];
      float64x2_t v31 = v19[19];
      v19 += 48;
      float64x2_t v32 = *v19;
      float64x2_t v33 = v19[1];
      float64x2_t v34 = v19[2];
      float64x2_t v35 = v19[3];
      *BOOL v15 = v20;
      v15[1] = v21;
      v15[2] = v22;
      v15[3] = v23;
      v15[4] = v24;
      v15[5] = v25;
      v15[6] = v26;
      v15[7] = v31;
      v15[8] = v27;
      v15[9] = v28;
      v15[10] = v32;
      v15[11] = v33;
      char v36 = v15 + 12;
      v15 += 16;
      char v37 = -1;
      *char v36 = v29;
      v36[1] = v30;
      v36[2] = v34;
      v36[3] = v35;
    }
    *v16++ = v37;
    v14 += 2;
  }
  while (v14 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      int v18 = (char *)v50 + v4 + v5;
      float64x2_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v20 = (char *)(v7 + v8 * v17);
        float64x2_t v21 = &v6[256 * v17];
        if ((unint64_t)(&v15[256 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          float64x2_t v23 = v18;
          float64x2_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        float64x2_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 256;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    float64x2_t v33 = (char *)&v50[1] + v4 + v5;
    float64x2_t v34 = (long long *)(v7 + 16);
    float64x2_t v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 256)
    {
      char v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[256 * v30];
      if ((unint64_t)(&v15[256 * v30] - v37) >= 0x20)
      {
        unsigned int v40 = v34;
        uint64_t v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          _OWORD *v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          uint64_t v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *(void *)uint64_t v44 = v47;
            v44 += 8;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 256;
      float64x2_t v34 = (long long *)((char *)v34 + v8);
      float64x2_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v78, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v6 = (char *)v78 + v4 + v5;
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v10) {
      BOOL v11 = (v10 - 1) >> 32 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v6[v13] = *(unsigned char *)(v7 + v13);
          ++v13;
        }
        while (v9 > v13);
        v6 += 256;
        v7 += v8;
      }
      goto LABEL_14;
    }
    long long v43 = (char *)v78 + v4 + v5;
    uint64_t v44 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v45 = 0;
      unint64_t v46 = (char *)v78 + v4 + v5;
      uint64_t v47 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v48 = (char *)(v7 + v8 * v45);
        char v49 = &v6[256 * v45];
        if ((unint64_t)(&v43[256 * v45] - v48) > 0x1F)
        {
          v49 += v44;
          uint64_t v51 = v46;
          unint64_t v52 = v47;
          uint64_t v53 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v10 == v44) {
            goto LABEL_30;
          }
          v48 += v44;
          int v50 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v55 = v50 + 1;
        do
        {
          char v56 = *v48++;
          *v49++ = v56;
          BOOL v57 = v9 > v55++;
        }
        while (v57);
LABEL_30:
        ++v45;
        uint64_t v47 = (uint64_t *)((char *)v47 + v8);
        v46 += 256;
        if (v45 == v3) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v10 & 0xFFFFFFFE0;
    unint64_t v60 = (char *)v78 + v4 + v5;
    uint64_t v61 = (char *)&v78[1] + v4 + v5;
    uint64_t v62 = (long long *)(v7 + 16);
    long long v63 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    v64 = &v60[v10 & 0xFFFFFFFE0];
    do
    {
      int v65 = (char *)(v7 + v8 * v58);
      unint64_t v66 = &v6[256 * v58];
      if ((unint64_t)(&v43[256 * v58] - v65) >= 0x20)
      {
        unsigned int v68 = v62;
        char v69 = v61;
        uint64_t v70 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v71 = *v68;
          *(v69 - 1) = *(v68 - 1);
          _OWORD *v69 = v71;
          v69 += 2;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v10 == v59) {
          goto LABEL_41;
        }
        if ((v10 & 0x10) != 0)
        {
          v66 += v44;
          v72 = v64;
          unint64_t v73 = v63;
          unint64_t v74 = v44 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *(void *)v72 = v75;
            v72 += 8;
            v74 -= 8;
          }
          while (v74);
          if (v10 == v44) {
            goto LABEL_41;
          }
          v65 += v44;
          int v67 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v76 = v67 + 1;
      do
      {
        char v77 = *v65++;
        *v66++ = v77;
        BOOL v57 = v9 > v76++;
      }
      while (v57);
LABEL_41:
      ++v58;
      v61 += 256;
      uint64_t v62 = (long long *)((char *)v62 + v8);
      long long v63 = (uint64_t *)((char *)v63 + v8);
      v64 += 256;
    }
    while (v58 != v3);
  }
LABEL_14:
  uint64_t v14 = 0;
  BOOL v15 = *(float64x2_t **)(a1 + 40);
  uint64_t v16 = *(char **)(a1 + 48);
  int v17 = *(unsigned __int8 *)(a1 + 88);
  int v18 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v14 + 1];
    uint64_t v39 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v14];
    unsigned int v40 = (v17 - 4 * v39) & ~((v17 - 4 * (int)v39) >> 31);
    if (v40 >= 4) {
      unsigned int v40 = 4;
    }
    LODWORD(result) = (v18 - 4 * v38) & ~((v18 - 4 * (int)v38) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v40) {
      BOOL v42 = result == 0;
    }
    else {
      BOOL v42 = 1;
    }
    if (v42)
    {
      char v37 = 0;
    }
    else
    {
      float64x2_t v19 = &v78[64 * v38 + 4 * v39];
      float64x2_t v20 = *v19;
      float64x2_t v21 = v19[1];
      float64x2_t v22 = v19[16];
      float64x2_t v23 = v19[17];
      float64x2_t v24 = v19[2];
      float64x2_t v25 = v19[3];
      float64x2_t v26 = v19[18];
      float64x2_t v27 = v19[32];
      float64x2_t v28 = v19[33];
      float64x2_t v29 = v19[34];
      float64x2_t v30 = v19[35];
      float64x2_t v31 = v19[19];
      v19 += 48;
      float64x2_t v32 = *v19;
      float64x2_t v33 = v19[1];
      float64x2_t v34 = v19[2];
      float64x2_t v35 = v19[3];
      *BOOL v15 = v20;
      v15[1] = v21;
      v15[2] = v22;
      v15[3] = v23;
      v15[4] = v24;
      v15[5] = v25;
      v15[6] = v26;
      v15[7] = v31;
      v15[8] = v27;
      v15[9] = v28;
      v15[10] = v32;
      v15[11] = v33;
      char v36 = v15 + 12;
      v15 += 16;
      char v37 = -1;
      *char v36 = v29;
      v36[1] = v30;
      v36[2] = v34;
      v36[3] = v35;
    }
    *v16++ = v37;
    v14 += 2;
  }
  while (v14 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
  unint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      int v18 = (char *)v50 + v4 + v5;
      float64x2_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v20 = (char *)(v7 + v8 * v17);
        float64x2_t v21 = &v6[256 * v17];
        if ((unint64_t)(&v15[256 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          float64x2_t v23 = v18;
          float64x2_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        float64x2_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 256;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    float64x2_t v33 = (char *)&v50[1] + v4 + v5;
    float64x2_t v34 = (long long *)(v7 + 16);
    float64x2_t v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 256)
    {
      char v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[256 * v30];
      if ((unint64_t)(&v15[256 * v30] - v37) >= 0x20)
      {
        unsigned int v40 = v34;
        uint64_t v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          _OWORD *v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          uint64_t v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *(void *)uint64_t v44 = v47;
            v44 += 8;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 256;
      float64x2_t v34 = (long long *)((char *)v34 + v8);
      float64x2_t v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v51 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = (char *)v51 + v5 + v6;
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      float64x2_t v19 = (char *)v51 + v5 + v6;
      float64x2_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          float64x2_t v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        float64x2_t v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    float64x2_t v33 = (char *)v51 + v5 + v6;
    float64x2_t v34 = (char *)&v51[1] + v5 + v6;
    float64x2_t v35 = (long long *)(v8 + 16);
    char v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v38 = (char *)(v8 + v9 * v31);
      int v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        long long v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v44 += 2;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = i;
          unsigned int v48 = v36;
          unint64_t v49 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v10 > v41++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      float64x2_t v35 = (long long *)((char *)v35 + v9);
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v51[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[v5 + v6];
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      float64x2_t v19 = &v51[v5 + v6];
      float64x2_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          float64x2_t v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        float64x2_t v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    float64x2_t v33 = &v51[v5 + v6];
    float64x2_t v34 = &v51[v5 + 16 + v6];
    float64x2_t v35 = (long long *)(v8 + 16);
    char v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v38 = (char *)(v8 + v9 * v31);
      int v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        long long v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v44 += 2;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = i;
          unsigned int v48 = v36;
          unint64_t v49 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *v47++ = v50;
            v49 -= 8;
          }
          while (v49);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v10 > v41++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      float64x2_t v35 = (long long *)((char *)v35 + v9);
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v51 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = (char *)v51 + v5 + v6;
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      float64x2_t v19 = (char *)v51 + v5 + v6;
      float64x2_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          float64x2_t v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        float64x2_t v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    float64x2_t v33 = (char *)v51 + v5 + v6;
    float64x2_t v34 = (char *)&v51[1] + v5 + v6;
    float64x2_t v35 = (long long *)(v8 + 16);
    char v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v38 = (char *)(v8 + v9 * v31);
      int v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        long long v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v44 += 2;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = i;
          unsigned int v48 = v36;
          unint64_t v49 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)uint64_t v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v10 > v41++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      float64x2_t v35 = (long long *)((char *)v35 + v9);
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v51, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v6 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v51[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[v5 + v6];
    uint64_t v17 = v11 & 0x7FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      float64x2_t v19 = &v51[v5 + v6];
      float64x2_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v21 = (char *)(v8 + v9 * v18);
        int v22 = &v7[128 * v18];
        if ((unint64_t)(&v16[128 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          float64x2_t v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0x7FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        float64x2_t v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 128;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0x7FFFFFFE0;
    float64x2_t v33 = &v51[v5 + v6];
    float64x2_t v34 = &v51[v5 + 16 + v6];
    float64x2_t v35 = (long long *)(v8 + 16);
    char v36 = (uint64_t *)(v8 + (v11 & 0x7FFFFFFE0));
    for (uint64_t i = &v33[v11 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v38 = (char *)(v8 + v9 * v31);
      int v39 = &v7[128 * v31];
      if ((unint64_t)(&v16[128 * v31] - v38) >= 0x20)
      {
        long long v43 = v35;
        uint64_t v44 = v34;
        uint64_t v45 = v11 & 0x7FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          _OWORD *v44 = v46;
          v44 += 2;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x18) != 0)
        {
          v39 += v17;
          uint64_t v47 = i;
          unsigned int v48 = v36;
          unint64_t v49 = v17 - (v11 & 0x7FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *v47++ = v50;
            v49 -= 8;
          }
          while (v49);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v10 > v41++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 128;
      float64x2_t v35 = (long long *)((char *)v35 + v9);
      char v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 128;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 128, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    float64x2_t v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      float64x2_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        uint64_t v27 = &v81[v17 + v18];
        unsigned int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          char v29 = (char *)(v20 + v21 * v26);
          BOOL v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            uint64_t v32 = v27;
            float64x2_t v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          unsigned int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      long long v63 = &v81[v17 + v18];
      v64 = &v81[v17 + 16 + v18];
      int v65 = (long long *)(v20 + 16);
      unint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        unsigned int v68 = (char *)(v20 + v21 * v61);
        char v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          unint64_t v73 = v65;
          unint64_t v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unint64_t v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            char v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        int v65 = (long long *)((char *)v65 + v21);
        unint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  char v42 = *(_OWORD **)(a1 + 40);
  long long v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      long long v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *char v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    float64x2_t v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      float64x2_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        uint64_t v27 = &v62[v17 + v18];
        unsigned int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          char v29 = (char *)(v20 + v21 * v26);
          BOOL v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            uint64_t v32 = v27;
            float64x2_t v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          unsigned int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v62, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      long long v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            uint64_t v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        long long v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v62, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v62, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    float64x2_t v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      float64x2_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        uint64_t v27 = &v81[v17 + v18];
        unsigned int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          char v29 = (char *)(v20 + v21 * v26);
          BOOL v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            uint64_t v32 = v27;
            float64x2_t v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          unsigned int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      uint64_t v63 = &v81[v17 + v18];
      v64 = &v81[v17 + 16 + v18];
      int v65 = (long long *)(v20 + 16);
      unint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        unsigned int v68 = (char *)(v20 + v21 * v61);
        char v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          unint64_t v73 = v65;
          unint64_t v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unint64_t v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            char v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        int v65 = (long long *)((char *)v65 + v21);
        unint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  uint64_t v42 = *(_OWORD **)(a1 + 40);
  uint64_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      long long v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *uint64_t v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    float64x2_t v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      float64x2_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        uint64_t v27 = &v62[v17 + v18];
        unsigned int v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          char v29 = (char *)(v20 + v21 * v26);
          BOOL v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            uint64_t v32 = v27;
            float64x2_t v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          unsigned int v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v62, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      long long v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            uint64_t v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        long long v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v62, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)v62, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v7 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v8 = 4 * *(unsigned int *)(a1 + 76);
  long long v9 = &v55[0].i8[v7 + v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 64;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    uint64_t v20 = &v55[0].i8[v7 + v8];
    uint64_t v21 = v13 & 0x3FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      unint64_t v23 = &v55[0].i8[v7 + v8];
      float64x2_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[64 * v22];
        if ((unint64_t)(&v20[64 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          char v29 = v24;
          uint64_t v30 = v13 & 0x3FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *(void *)unsigned int v28 = v31;
            v28 += 8;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        float64x2_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 64;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x3FFFFFFE0;
    char v37 = &v55[0].i8[v7 + v8];
    BOOL v38 = &v55[1].i8[v7 + v8];
    int v39 = (long long *)(v10 + 16);
    uint64_t v40 = (uint64_t *)(v10 + (v13 & 0x3FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x3FFFFFFE0]; ; j += 64)
    {
      uint64_t v42 = (char *)(v10 + v11 * v35);
      uint64_t v43 = &v9[64 * v35];
      if ((unint64_t)(&v20[64 * v35] - v42) >= 0x20)
      {
        long long v47 = v39;
        long long v48 = v38;
        uint64_t v49 = v13 & 0x3FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *((_OWORD *)v48 - 1) = *(v47 - 1);
          *(_OWORD *)long long v48 = v50;
          v48 += 32;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          int v51 = j;
          unsigned int v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x3FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *(void *)int v51 = v54;
            v51 += 8;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 64;
      int v39 = (long long *)((char *)v39 + v11);
      uint64_t v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 64;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v62, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  unint64_t v15 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v16 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v17 = &v62[v15 + v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = 4 * *(unsigned int *)(a1 + 84);
  if (v20 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v21 <= 7)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v23 = 0;
      do
      {
        v17[v23] = *(unsigned char *)(v18 + v23);
        ++v23;
      }
      while (v20 > v23);
      v17 += 64;
      v18 += v19;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  if (v21) {
    BOOL v24 = (v21 - 1) >> 32 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  if (v24)
  {
    unsigned int v28 = &v62[v15 + v16];
    uint64_t v29 = v21 & 0x3FFFFFFF8;
    if (v21 < 0x20)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v62[v15 + v16];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v33 = (char *)(v18 + v19 * v30);
        BOOL v34 = &v17[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          char v37 = v32;
          uint64_t v38 = v21 & 0x3FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)&long long v6 = v39;
            *v36++ = v39;
            v38 -= 8;
          }
          while (v38);
          if (v21 == v29) {
            goto LABEL_23;
          }
          v33 += v29;
          int v35 = v21 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v20 > v40++;
        }
        while (v42);
LABEL_23:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v19);
        v31 += 64;
        if (v30 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v21 & 0x3FFFFFFE0;
    unsigned int v45 = &v62[v15 + v16];
    char v46 = &v62[v15 + 16 + v16];
    long long v47 = (long long *)(v18 + 16);
    long long v48 = (uint64_t *)(v18 + (v21 & 0x3FFFFFFE0));
    for (uint64_t j = &v45[v21 & 0x3FFFFFFE0]; ; j += 8)
    {
      long long v50 = (char *)(v18 + v19 * v43);
      int v51 = &v17[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        char v55 = v47;
        uint64_t v56 = v46;
        uint64_t v57 = v21 & 0x3FFFFFFE0;
        do
        {
          long long v6 = *(v55 - 1);
          long long v7 = *v55;
          *(v56 - 1) = v6;
          *uint64_t v56 = v7;
          v56 += 2;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v21 == v44) {
          goto LABEL_34;
        }
        if ((v21 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v58 = j;
          uint64_t v59 = v48;
          unint64_t v60 = v29 - (v21 & 0x3FFFFFFE0);
          do
          {
            uint64_t v61 = *v59++;
            *(void *)&long long v6 = v61;
            *v58++ = v61;
            v60 -= 8;
          }
          while (v60);
          if (v21 == v29) {
            goto LABEL_34;
          }
          v50 += v29;
          int v52 = v21 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v21 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v20 > v53++;
      }
      while (v42);
LABEL_34:
      ++v43;
      v46 += 64;
      long long v47 = (long long *)((char *)v47 + v19);
      long long v48 = (uint64_t *)((char *)v48 + v19);
      if (v43 == v14) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  for (uint64_t k = 0; k != v14; ++k)
  {
    uint64_t v26 = 0;
    do
    {
      v17[v26] = *(unsigned char *)(v18 + v26);
      ++v26;
    }
    while (v20 > v26);
    v17 += 64;
    v18 += v19;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v7 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v8 = 4 * *(unsigned int *)(a1 + 76);
  double v9 = &v55[0].i8[v7 + v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 64;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    unint64_t v20 = &v55[0].i8[v7 + v8];
    uint64_t v21 = v13 & 0x3FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      uint64_t v23 = &v55[0].i8[v7 + v8];
      BOOL v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[64 * v22];
        if ((unint64_t)(&v20[64 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          uint64_t v29 = v24;
          uint64_t v30 = v13 & 0x3FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *(void *)unsigned int v28 = v31;
            v28 += 8;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        BOOL v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 64;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x3FFFFFFE0;
    char v37 = &v55[0].i8[v7 + v8];
    uint64_t v38 = &v55[1].i8[v7 + v8];
    uint64_t v39 = (long long *)(v10 + 16);
    unsigned int v40 = (uint64_t *)(v10 + (v13 & 0x3FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v42 = (char *)(v10 + v11 * v35);
      uint64_t v43 = &v9[64 * v35];
      if ((unint64_t)(&v20[64 * v35] - v42) >= 0x20)
      {
        long long v47 = v39;
        long long v48 = v38;
        uint64_t v49 = v13 & 0x3FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *((_OWORD *)v48 - 1) = *(v47 - 1);
          *(_OWORD *)long long v48 = v50;
          v48 += 32;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          int v51 = j;
          int v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x3FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *(void *)int v51 = v54;
            v51 += 8;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 64;
      uint64_t v39 = (long long *)((char *)v39 + v11);
      unsigned int v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 64;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v55, 64, *(int64x2_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v62, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  unint64_t v15 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v16 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v17 = &v62[v15 + v16];
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = 4 * *(unsigned int *)(a1 + 84);
  if (v20 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v21 <= 7)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v23 = 0;
      do
      {
        v17[v23] = *(unsigned char *)(v18 + v23);
        ++v23;
      }
      while (v20 > v23);
      v17 += 64;
      v18 += v19;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
  }
  if (v21) {
    BOOL v24 = (v21 - 1) >> 32 == 0;
  }
  else {
    BOOL v24 = 0;
  }
  if (v24)
  {
    unsigned int v28 = &v62[v15 + v16];
    uint64_t v29 = v21 & 0x3FFFFFFF8;
    if (v21 < 0x20)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v62[v15 + v16];
      unsigned int v32 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v33 = (char *)(v18 + v19 * v30);
        BOOL v34 = &v17[64 * v30];
        if ((unint64_t)(&v28[64 * v30] - v33) > 0x1F)
        {
          v34 += v29;
          uint64_t v36 = v31;
          char v37 = v32;
          uint64_t v38 = v21 & 0x3FFFFFFF8;
          do
          {
            uint64_t v39 = *v37++;
            *(void *)&long long v6 = v39;
            *v36++ = v39;
            v38 -= 8;
          }
          while (v38);
          if (v21 == v29) {
            goto LABEL_23;
          }
          v33 += v29;
          int v35 = v21 & 0xFFFFFFF8;
        }
        else
        {
          int v35 = 0;
        }
        unsigned int v40 = v35 + 1;
        do
        {
          char v41 = *v33++;
          *v34++ = v41;
          BOOL v42 = v20 > v40++;
        }
        while (v42);
LABEL_23:
        ++v30;
        unsigned int v32 = (uint64_t *)((char *)v32 + v19);
        v31 += 64;
        if (v30 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
        }
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = v21 & 0x3FFFFFFE0;
    unsigned int v45 = &v62[v15 + v16];
    char v46 = &v62[v15 + 16 + v16];
    long long v47 = (long long *)(v18 + 16);
    long long v48 = (uint64_t *)(v18 + (v21 & 0x3FFFFFFE0));
    for (uint64_t j = &v45[v21 & 0x3FFFFFFE0]; ; j += 8)
    {
      long long v50 = (char *)(v18 + v19 * v43);
      int v51 = &v17[64 * v43];
      if ((unint64_t)(&v28[64 * v43] - v50) >= 0x20)
      {
        char v55 = v47;
        uint64_t v56 = v46;
        uint64_t v57 = v21 & 0x3FFFFFFE0;
        do
        {
          long long v6 = *(v55 - 1);
          long long v7 = *v55;
          *(v56 - 1) = v6;
          *uint64_t v56 = v7;
          v56 += 2;
          v55 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v21 == v44) {
          goto LABEL_34;
        }
        if ((v21 & 0x18) != 0)
        {
          v51 += v29;
          unsigned int v58 = j;
          uint64_t v59 = v48;
          unint64_t v60 = v29 - (v21 & 0x3FFFFFFE0);
          do
          {
            uint64_t v61 = *v59++;
            *(void *)&long long v6 = v61;
            *v58++ = v61;
            v60 -= 8;
          }
          while (v60);
          if (v21 == v29) {
            goto LABEL_34;
          }
          v50 += v29;
          int v52 = v21 & 0xFFFFFFF8;
        }
        else
        {
          v50 += v44;
          v51 += v44;
          int v52 = v21 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v53 = v52 + 1;
      do
      {
        char v54 = *v50++;
        *v51++ = v54;
        BOOL v42 = v20 > v53++;
      }
      while (v42);
LABEL_34:
      ++v43;
      v46 += 64;
      long long v47 = (long long *)((char *)v47 + v19);
      long long v48 = (uint64_t *)((char *)v48 + v19);
      if (v43 == v14) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
  for (uint64_t k = 0; k != v14; ++k)
  {
    uint64_t v26 = 0;
    do
    {
      v17[v26] = *(unsigned char *)(v18 + v26);
      ++v26;
    }
    while (v20 > v26);
    v17 += 64;
    v18 += v19;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(double *)&v6, *(double *)&v7, v8, v9, v10, v11, v12, v13);
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  float32x4_t v5 = (char *)v49 + v3 + v4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = (char *)v49 + v3 + v4;
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unint64_t v17 = (char *)v49 + v3 + v4;
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    uint64_t v31 = (char *)v49 + v3 + v4;
    unsigned int v32 = (char *)&v49[1] + v3 + v4;
    char v33 = (long long *)(v6 + 16);
    BOOL v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      char v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *BOOL v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unsigned int v45 = i;
          char v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unsigned int v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      char v33 = (long long *)((char *)v33 + v7);
      BOOL v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  float32x4_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unint64_t v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    uint64_t v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    char v33 = (long long *)(v6 + 16);
    BOOL v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      char v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *BOOL v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unsigned int v45 = i;
          char v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *v45++ = v48;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      char v33 = (long long *)((char *)v33 + v7);
      BOOL v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  float32x4_t v5 = (char *)v49 + v3 + v4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = (char *)v49 + v3 + v4;
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unint64_t v17 = (char *)v49 + v3 + v4;
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    uint64_t v31 = (char *)v49 + v3 + v4;
    unsigned int v32 = (char *)&v49[1] + v3 + v4;
    char v33 = (long long *)(v6 + 16);
    BOOL v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      char v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *BOOL v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unsigned int v45 = i;
          char v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)unsigned int v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      char v33 = (long long *)((char *)v33 + v7);
      BOOL v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v49, 128, *(_OWORD **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  float32x4_t v5 = &v49[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = &v49[v3 + v4];
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      unint64_t v17 = &v49[v3 + v4];
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v19 = (char *)(v6 + v7 * v16);
        unint64_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          uint64_t v22 = v17;
          uint64_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    uint64_t v31 = &v49[v3 + v4];
    unsigned int v32 = &v49[v3 + 16 + v4];
    char v33 = (long long *)(v6 + 16);
    BOOL v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v36 = (char *)(v6 + v7 * v29);
      char v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        char v41 = v33;
        BOOL v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *BOOL v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          unsigned int v45 = i;
          char v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *v45++ = v48;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      char v33 = (long long *)((char *)v33 + v7);
      BOOL v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v81[v17 + v18];
        BOOL v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          BOOL v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      uint64_t v63 = &v81[v17 + v18];
      v64 = &v81[v17 + 16 + v18];
      int v65 = (long long *)(v20 + 16);
      unint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        unsigned int v68 = (char *)(v20 + v21 * v61);
        char v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          unint64_t v73 = v65;
          unint64_t v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unint64_t v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            char v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        int v65 = (long long *)((char *)v65 + v21);
        unint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  BOOL v42 = *(_OWORD **)(a1 + 40);
  uint64_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      char v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *BOOL v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v62[v17 + v18];
        BOOL v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          BOOL v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      char v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            uint64_t v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        char v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v81[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v19 = &v81[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v81[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v81[v17 + v18];
        BOOL v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          BOOL v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v61 = 0;
      uint64_t v62 = v23 & 0x7FFFFFFE0;
      uint64_t v63 = &v81[v17 + v18];
      v64 = &v81[v17 + 16 + v18];
      int v65 = (long long *)(v20 + 16);
      unint64_t v66 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      int v67 = &v63[v23 & 0x7FFFFFFE0];
      while (1)
      {
        unsigned int v68 = (char *)(v20 + v21 * v61);
        char v69 = &v19[128 * v61];
        if ((unint64_t)(&v24[128 * v61] - v68) >= 0x20)
        {
          unint64_t v73 = v65;
          unint64_t v74 = v64;
          uint64_t v75 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *unint64_t v74 = v76;
            v74 += 2;
            v73 += 2;
            v75 -= 32;
          }
          while (v75);
          if (v23 == v62) {
            goto LABEL_48;
          }
          if ((v23 & 0x18) != 0)
          {
            v69 += v25;
            char v77 = v67;
            uint64_t v78 = v66;
            unint64_t v79 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v80 = *v78++;
              *v77++ = v80;
              v79 -= 8;
            }
            while (v79);
            if (v23 == v25) {
              goto LABEL_48;
            }
            v68 += v25;
            int v70 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v68 += v62;
            v69 += v62;
            int v70 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v70 = 0;
        }
        unsigned int v71 = v70 + 1;
        do
        {
          char v72 = *v68++;
          *v69++ = v72;
          BOOL v38 = v22 > v71++;
        }
        while (v38);
LABEL_48:
        ++v61;
        v64 += 128;
        int v65 = (long long *)((char *)v65 + v21);
        unint64_t v66 = (uint64_t *)((char *)v66 + v21);
        v67 += 16;
        if (v61 == v16) {
          goto LABEL_33;
        }
      }
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
LABEL_33:
  uint64_t v41 = 0;
  uint64_t v42 = *(_OWORD **)(a1 + 40);
  uint64_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v56 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41 + 1];
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v41];
    unsigned int v58 = (v44 - 4 * v57) & ~((v44 - 4 * (int)v57) >> 31);
    if (v58 >= 4) {
      unsigned int v58 = 4;
    }
    LODWORD(result) = (v45 - 4 * v56) & ~((v45 - 4 * (int)v56) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v58) {
      BOOL v60 = result == 0;
    }
    else {
      BOOL v60 = 1;
    }
    if (v60)
    {
      char v55 = 0;
    }
    else
    {
      char v46 = (long long *)&v81[512 * v56 + 32 * v57];
      long long v47 = *v46;
      long long v48 = v46[1];
      long long v49 = v46[8];
      long long v50 = v46[9];
      long long v51 = v46[16];
      long long v52 = v46[17];
      v46 += 24;
      long long v53 = *v46;
      long long v54 = v46[1];
      *uint64_t v42 = v47;
      v42[1] = v49;
      v42[2] = v48;
      v42[3] = v50;
      v42[4] = v51;
      v42[5] = v53;
      v42[6] = v52;
      v42[7] = v54;
      v42 += 8;
      char v55 = 127;
    }
    *v43++ = v55;
    v41 += 2;
  }
  while (v41 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v7 = &v62[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 8) = v9;
      *((_OWORD *)v7 + 9) = v11;
      *((_OWORD *)v7 + 16) = v15;
      *((_OWORD *)v7 + 17) = v13;
      *((_OWORD *)v7 + 24) = v12;
      *((_OWORD *)v7 + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t v7 = v5;
      *((float32x4_t *)v7 + 1) = v5;
      *((float32x4_t *)v7 + 8) = v5;
      *((float32x4_t *)v7 + 9) = v5;
      *((float32x4_t *)v7 + 16) = v5;
      *((float32x4_t *)v7 + 17) = v5;
      *((float32x4_t *)v7 + 24) = v5;
      *((float32x4_t *)v7 + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v7, 128, v3, v8);
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 16) = 0u;
      *((_OWORD *)v7 + 17) = 0u;
      *((_OWORD *)v7 + 24) = 0u;
      *((_OWORD *)v7 + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v18 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v19 = &v62[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v24 = &v62[v17 + v18];
      uint64_t v25 = v23 & 0x7FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v26 = 0;
        char v27 = &v62[v17 + v18];
        BOOL v28 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v29 = (char *)(v20 + v21 * v26);
          uint64_t v30 = &v19[128 * v26];
          if ((unint64_t)(&v24[128 * v26] - v29) > 0x1F)
          {
            v30 += v25;
            unsigned int v32 = v27;
            char v33 = v28;
            uint64_t v34 = v23 & 0x7FFFFFFF8;
            do
            {
              uint64_t v35 = *v33++;
              *v32++ = v35;
              v34 -= 8;
            }
            while (v34);
            if (v23 == v25) {
              goto LABEL_19;
            }
            v29 += v25;
            int v31 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v31 = 0;
          }
          unsigned int v36 = v31 + 1;
          do
          {
            char v37 = *v29++;
            *v30++ = v37;
            BOOL v38 = v22 > v36++;
          }
          while (v38);
LABEL_19:
          ++v26;
          BOOL v28 = (uint64_t *)((char *)v28 + v21);
          v27 += 128;
          if (v26 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v42 = 0;
      uint64_t v43 = v23 & 0x7FFFFFFE0;
      int v44 = &v62[v17 + v18];
      int v45 = &v62[v17 + 16 + v18];
      char v46 = (long long *)(v20 + 16);
      long long v47 = (uint64_t *)(v20 + (v23 & 0x7FFFFFFE0));
      for (uint64_t i = &v44[v23 & 0x7FFFFFFE0]; ; i += 16)
      {
        long long v49 = (char *)(v20 + v21 * v42);
        long long v50 = &v19[128 * v42];
        if ((unint64_t)(&v24[128 * v42] - v49) >= 0x20)
        {
          long long v54 = v46;
          char v55 = v45;
          uint64_t v56 = v23 & 0x7FFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v23 == v43) {
            goto LABEL_35;
          }
          if ((v23 & 0x18) != 0)
          {
            v50 += v25;
            unsigned int v58 = i;
            uint64_t v59 = v47;
            unint64_t v60 = v25 - (v23 & 0x7FFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v23 == v25) {
              goto LABEL_35;
            }
            v49 += v25;
            int v51 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v49 += v43;
            v50 += v43;
            int v51 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v51 = 0;
        }
        unsigned int v52 = v51 + 1;
        do
        {
          char v53 = *v49++;
          *v50++ = v53;
          BOOL v38 = v22 > v52++;
        }
        while (v38);
LABEL_35:
        ++v42;
        v45 += 128;
        char v46 = (long long *)((char *)v46 + v21);
        long long v47 = (uint64_t *)((char *)v47 + v21);
        if (v42 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t j = 0; j != v16; ++j)
    {
      uint64_t v40 = 0;
      do
      {
        v19[v40] = *(unsigned char *)(v20 + v40);
        ++v40;
      }
      while (v22 > v40);
      v19 += 128;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(int8x8_t **)(a1 + 40);
  unsigned int v8 = *(unsigned char **)(a1 + 48);
  do
  {
    long long v14 = (int32x2_t *)&v74[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6 + 1]
                          + 8
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6]];
    unsigned int v15 = *v8;
    if (v15 == 96)
    {
      a2 = *(int32x4_t *)v7->i8;
      *(int8x8_t *)a2.i8 = vdup_lane_s8(*v7, 0);
      *long long v14 = *(int32x2_t *)a2.i8;
      v14[4] = *(int32x2_t *)a2.i8;
      v14[8] = *(int32x2_t *)a2.i8;
      v14[12] = *(int32x2_t *)a2.i8;
      uint64_t v13 = 1;
    }
    else if (v15 == 31)
    {
      int32x2_t v9 = (int32x2_t)*v7;
      int32x2_t v10 = (int32x2_t)v7[1];
      int32x2_t v11 = (int32x2_t)v7[2];
      int32x2_t v12 = (int32x2_t)v7[3];
      *long long v14 = vzip1_s32((int32x2_t)*v7, v10);
      v14[4] = vzip2_s32(v9, v10);
      v14[8] = vzip1_s32(v11, v12);
      v14[12] = vzip2_s32(v11, v12);
      uint64_t v13 = 32;
    }
    else if (*v8)
    {
      uint64_t v13 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v14, 32, (uint64_t)v7, v15);
    }
    else
    {
      uint64_t v13 = 0;
      *long long v14 = 0;
      v14[4] = 0;
      v14[8] = 0;
      v14[12] = 0;
    }
    uint64_t v7 = (int8x8_t *)((char *)v7 + v13);
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (!v16 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v17 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v18 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v19 = &v74[v17 + v18];
  uint64_t v20 = *(int32x4_t **)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  unint64_t v22 = 2 * *(unsigned int *)(a1 + 84);
  if (v22 <= 1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v23 > 7)
  {
    if (!v23 || (v23 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        uint64_t v42 = 0;
        do
        {
          v19[v42] = v20->i8[v42];
          ++v42;
        }
        while (v22 > v42);
        v19 += 32;
        uint64_t v20 = (int32x4_t *)((char *)v20 + v21);
      }
      goto LABEL_39;
    }
    uint64_t v26 = &v74[v17 + v18];
    uint64_t v27 = v23 & 0x1FFFFFFF8;
    if (v23 < 0x20)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v74[v17 + v18];
      uint64_t v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v31 = &v20->i8[v21 * v28];
        unsigned int v32 = &v19[32 * v28];
        if ((unint64_t)(&v26[32 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          uint64_t v34 = v29;
          uint64_t v35 = v30;
          uint64_t v36 = v23 & 0x1FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v23 == v27) {
            goto LABEL_25;
          }
          v31 += v27;
          int v33 = v23 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v22 > v38++;
        }
        while (v40);
LABEL_25:
        ++v28;
        uint64_t v30 = (uint64_t *)((char *)v30 + v21);
        v29 += 32;
        if (v28 == v16) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v55 = 0;
    uint64_t v56 = v23 & 0x1FFFFFFE0;
    long long v57 = &v74[v17 + v18];
    unsigned int v58 = (__n128 *)&v74[v17 + 16 + v18];
    uint64_t v59 = v20 + 1;
    unint64_t v60 = (uint64_t *)((char *)v20->i64 + (v23 & 0x1FFFFFFE0));
    uint64_t v61 = &v57[v23 & 0x1FFFFFFE0];
    while (1)
    {
      uint64_t v62 = &v20->i8[v21 * v55];
      uint64_t v63 = &v19[32 * v55];
      if ((unint64_t)(&v26[32 * v55] - v62) >= 0x20)
      {
        int v67 = v59;
        unsigned int v68 = v58;
        uint64_t v69 = v23 & 0x1FFFFFFE0;
        do
        {
          a2 = v67[-1];
          a3 = *v67;
          v68[-1] = (__n128)a2;
          __n128 *v68 = (__n128)a3;
          v68 += 2;
          v67 += 2;
          v69 -= 32;
        }
        while (v69);
        if (v23 == v56) {
          goto LABEL_54;
        }
        if ((v23 & 0x18) != 0)
        {
          v63 += v27;
          int v70 = v61;
          unsigned int v71 = v60;
          unint64_t v72 = v27 - (v23 & 0x1FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *v70++ = v73;
            v72 -= 8;
          }
          while (v72);
          if (v23 == v27) {
            goto LABEL_54;
          }
          v62 += v27;
          int v64 = v23 & 0xFFFFFFF8;
        }
        else
        {
          v62 += v56;
          v63 += v56;
          int v64 = v23 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v64 = 0;
      }
      unsigned int v65 = v64 + 1;
      do
      {
        char v66 = *v62++;
        *v63++ = v66;
        BOOL v40 = v22 > v65++;
      }
      while (v40);
LABEL_54:
      ++v55;
      v58 += 2;
      uint64_t v59 = (int32x4_t *)((char *)v59 + v21);
      unint64_t v60 = (uint64_t *)((char *)v60 + v21);
      v61 += 4;
      if (v55 == v16) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v16; ++j)
  {
    uint64_t v25 = 0;
    do
    {
      v19[v25] = v20->i8[v25];
      ++v25;
    }
    while (v22 > v25);
    v19 += 32;
    uint64_t v20 = (int32x4_t *)((char *)v20 + v21);
  }
LABEL_39:
  uint64_t v43 = 0;
  int v44 = *(__n128 **)(a1 + 40);
  int v45 = *(char **)(a1 + 48);
  int v46 = *(unsigned __int8 *)(a1 + 88);
  int v47 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v50 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v43 + 1];
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v43];
    unsigned int v52 = (v46 - 4 * v51) & ~((v46 - 4 * (int)v51) >> 31);
    if (v52 >= 4) {
      unsigned int v52 = 4;
    }
    LODWORD(result) = (v47 - 4 * v50) & ~((v47 - 4 * (int)v50) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v52) {
      BOOL v54 = result == 0;
    }
    else {
      BOOL v54 = 1;
    }
    if (v54)
    {
      char v49 = 0;
    }
    else
    {
      long long v48 = (unint64_t *)&v74[128 * v50 + 8 * v51];
      a2.i64[0] = *v48;
      a3.i64[0] = v48[4];
      a4.i64[0] = v48[8];
      a5.i64[0] = v48[12];
      a2 = vzip1q_s32(a2, a3);
      a3 = vzip1q_s32(a4, a5);
      __n128 *v44 = (__n128)a2;
      v44[1] = (__n128)a3;
      v44 += 2;
      char v49 = 31;
    }
    *v45++ = v49;
    v43 += 2;
  }
  while (v43 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, int32x2_t a4, int32x2_t a5)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned int v8 = *(unsigned char **)(a1 + 48);
  do
  {
    int32x2_t v11 = (int32x2_t *)&v60[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6 + 1]
                          + 8
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6]];
    unsigned int v12 = *v8;
    if (v12 == 96)
    {
      a2.n128_u64[0] = (unint64_t)vdup_lane_s8(*(int8x8_t *)v7, 0);
      *int32x2_t v11 = (int32x2_t)a2.n128_u64[0];
      v11[4] = (int32x2_t)a2.n128_u64[0];
      v11[8] = (int32x2_t)a2.n128_u64[0];
      v11[12] = (int32x2_t)a2.n128_u64[0];
      uint64_t v10 = 1;
    }
    else if (v12 == 31)
    {
      int32x2_t v9 = *(int32x2_t *)v7;
      a3.n128_u64[0] = *(void *)(v7 + 8);
      a4 = *(int32x2_t *)(v7 + 16);
      a5 = *(int32x2_t *)(v7 + 24);
      *int32x2_t v11 = vzip1_s32(*(int32x2_t *)v7, (int32x2_t)a3.n128_u64[0]);
      v11[4] = vzip2_s32(v9, (int32x2_t)a3.n128_u64[0]);
      v11[8] = vzip1_s32(a4, a5);
      a2.n128_u64[0] = (unint64_t)vzip2_s32(a4, a5);
      v11[12] = (int32x2_t)a2.n128_u64[0];
      uint64_t v10 = 32;
    }
    else if (*v8)
    {
      uint64_t v10 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v11, 32, v7, v12);
    }
    else
    {
      uint64_t v10 = 0;
      *int32x2_t v11 = 0;
      v11[4] = 0;
      v11[8] = 0;
      v11[12] = 0;
    }
    v7 += v10;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v60[v14 + v15];
    uint64_t v17 = *(__n128 **)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = v17->n128_u8[v22];
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        uint64_t v17 = (__n128 *)((char *)v17 + v18);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      unint64_t v23 = &v60[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t *)&v60[v14 + v15];
        uint64_t v27 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v28 = (char *)v17 + v18 * v25;
          uint64_t v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            int v31 = v26;
            unsigned int v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              unint64_t v34 = *v32++;
              a2.n128_u64[0] = v34;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (unint64_t *)((char *)v27 + v18);
          v26 += 4;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      uint64_t v43 = &v60[v14 + v15];
      int v44 = (__n128 *)&v60[v14 + 16 + v15];
      int v45 = v17 + 1;
      int v46 = (unint64_t *)((char *)v17->n128_u64 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        long long v48 = (char *)v17 + v18 * v41;
        char v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          char v53 = v45;
          BOOL v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            a2 = v53[-1];
            a3 = *v53;
            v54[-1] = a2;
            __n128 *v54 = a3;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            uint64_t v56 = j;
            long long v57 = v46;
            unint64_t v58 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              unint64_t v59 = *v57++;
              a2.n128_u64[0] = v59;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 2;
        int v45 = (__n128 *)((char *)v45 + v18);
        int v46 = (unint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = v17->n128_u8[v39];
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      uint64_t v17 = (__n128 *)((char *)v17 + v18);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(int8x8_t **)(a1 + 40);
  unsigned int v8 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v14 = (int32x2_t *)&v74[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6 + 1]
                          + 8
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6]];
    unsigned int v15 = *v8;
    if (v15 == 96)
    {
      a2 = *(int32x4_t *)v7->i8;
      *(int8x8_t *)a2.i8 = vdup_lane_s8(*v7, 0);
      *uint64_t v14 = *(int32x2_t *)a2.i8;
      v14[4] = *(int32x2_t *)a2.i8;
      v14[8] = *(int32x2_t *)a2.i8;
      v14[12] = *(int32x2_t *)a2.i8;
      uint64_t v13 = 1;
    }
    else if (v15 == 31)
    {
      int32x2_t v9 = (int32x2_t)*v7;
      int32x2_t v10 = (int32x2_t)v7[1];
      int32x2_t v11 = (int32x2_t)v7[2];
      int32x2_t v12 = (int32x2_t)v7[3];
      *uint64_t v14 = vzip1_s32((int32x2_t)*v7, v10);
      v14[4] = vzip2_s32(v9, v10);
      v14[8] = vzip1_s32(v11, v12);
      v14[12] = vzip2_s32(v11, v12);
      uint64_t v13 = 32;
    }
    else if (*v8)
    {
      uint64_t v13 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v14, 32, (uint64_t)v7, v15);
    }
    else
    {
      uint64_t v13 = 0;
      *uint64_t v14 = 0;
      v14[4] = 0;
      v14[8] = 0;
      v14[12] = 0;
    }
    uint64_t v7 = (int8x8_t *)((char *)v7 + v13);
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (!v16 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v17 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v18 = 2 * *(unsigned int *)(a1 + 76);
  unint64_t v19 = &v74[v17 + v18];
  unint64_t v20 = *(int32x4_t **)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  unint64_t v22 = 2 * *(unsigned int *)(a1 + 84);
  if (v22 <= 1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v23 > 7)
  {
    if (!v23 || (v23 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        uint64_t v42 = 0;
        do
        {
          v19[v42] = v20->i8[v42];
          ++v42;
        }
        while (v22 > v42);
        v19 += 32;
        unint64_t v20 = (int32x4_t *)((char *)v20 + v21);
      }
      goto LABEL_39;
    }
    uint64_t v26 = &v74[v17 + v18];
    uint64_t v27 = v23 & 0x1FFFFFFF8;
    if (v23 < 0x20)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v74[v17 + v18];
      int v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int v31 = &v20->i8[v21 * v28];
        unsigned int v32 = &v19[32 * v28];
        if ((unint64_t)(&v26[32 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          unint64_t v34 = v29;
          unsigned int v35 = v30;
          uint64_t v36 = v23 & 0x1FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v23 == v27) {
            goto LABEL_25;
          }
          v31 += v27;
          int v33 = v23 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v22 > v38++;
        }
        while (v40);
LABEL_25:
        ++v28;
        int v30 = (uint64_t *)((char *)v30 + v21);
        v29 += 32;
        if (v28 == v16) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v55 = 0;
    uint64_t v56 = v23 & 0x1FFFFFFE0;
    long long v57 = &v74[v17 + v18];
    unint64_t v58 = (__n128 *)&v74[v17 + 16 + v18];
    unint64_t v59 = v20 + 1;
    unint64_t v60 = (uint64_t *)((char *)v20->i64 + (v23 & 0x1FFFFFFE0));
    uint64_t v61 = &v57[v23 & 0x1FFFFFFE0];
    while (1)
    {
      uint64_t v62 = &v20->i8[v21 * v55];
      uint64_t v63 = &v19[32 * v55];
      if ((unint64_t)(&v26[32 * v55] - v62) >= 0x20)
      {
        int v67 = v59;
        unsigned int v68 = v58;
        uint64_t v69 = v23 & 0x1FFFFFFE0;
        do
        {
          a2 = v67[-1];
          a3 = *v67;
          v68[-1] = (__n128)a2;
          __n128 *v68 = (__n128)a3;
          v68 += 2;
          v67 += 2;
          v69 -= 32;
        }
        while (v69);
        if (v23 == v56) {
          goto LABEL_54;
        }
        if ((v23 & 0x18) != 0)
        {
          v63 += v27;
          int v70 = v61;
          unsigned int v71 = v60;
          unint64_t v72 = v27 - (v23 & 0x1FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *v70++ = v73;
            v72 -= 8;
          }
          while (v72);
          if (v23 == v27) {
            goto LABEL_54;
          }
          v62 += v27;
          int v64 = v23 & 0xFFFFFFF8;
        }
        else
        {
          v62 += v56;
          v63 += v56;
          int v64 = v23 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v64 = 0;
      }
      unsigned int v65 = v64 + 1;
      do
      {
        char v66 = *v62++;
        *v63++ = v66;
        BOOL v40 = v22 > v65++;
      }
      while (v40);
LABEL_54:
      ++v55;
      v58 += 2;
      unint64_t v59 = (int32x4_t *)((char *)v59 + v21);
      unint64_t v60 = (uint64_t *)((char *)v60 + v21);
      v61 += 4;
      if (v55 == v16) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v16; ++j)
  {
    uint64_t v25 = 0;
    do
    {
      v19[v25] = v20->i8[v25];
      ++v25;
    }
    while (v22 > v25);
    v19 += 32;
    unint64_t v20 = (int32x4_t *)((char *)v20 + v21);
  }
LABEL_39:
  uint64_t v43 = 0;
  int v44 = *(__n128 **)(a1 + 40);
  int v45 = *(char **)(a1 + 48);
  int v46 = *(unsigned __int8 *)(a1 + 88);
  int v47 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v50 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v43 + 1];
    uint64_t v51 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v43];
    unsigned int v52 = (v46 - 4 * v51) & ~((v46 - 4 * (int)v51) >> 31);
    if (v52 >= 4) {
      unsigned int v52 = 4;
    }
    LODWORD(result) = (v47 - 4 * v50) & ~((v47 - 4 * (int)v50) >> 31);
    if (result >= 4) {
      uint64_t result = 4;
    }
    else {
      uint64_t result = result;
    }
    if (v52) {
      BOOL v54 = result == 0;
    }
    else {
      BOOL v54 = 1;
    }
    if (v54)
    {
      char v49 = 0;
    }
    else
    {
      long long v48 = (unint64_t *)&v74[128 * v50 + 8 * v51];
      a2.i64[0] = *v48;
      a3.i64[0] = v48[4];
      a4.i64[0] = v48[8];
      a5.i64[0] = v48[12];
      a2 = vzip1q_s32(a2, a3);
      a3 = vzip1q_s32(a4, a5);
      __n128 *v44 = (__n128)a2;
      v44[1] = (__n128)a3;
      v44 += 2;
      char v49 = 31;
    }
    *v45++ = v49;
    v43 += 2;
  }
  while (v43 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, int32x2_t a4, int32x2_t a5)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned int v8 = *(unsigned char **)(a1 + 48);
  do
  {
    int32x2_t v11 = (int32x2_t *)&v60[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6 + 1]
                          + 8
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6]];
    unsigned int v12 = *v8;
    if (v12 == 96)
    {
      a2.n128_u64[0] = (unint64_t)vdup_lane_s8(*(int8x8_t *)v7, 0);
      *int32x2_t v11 = (int32x2_t)a2.n128_u64[0];
      v11[4] = (int32x2_t)a2.n128_u64[0];
      v11[8] = (int32x2_t)a2.n128_u64[0];
      v11[12] = (int32x2_t)a2.n128_u64[0];
      uint64_t v10 = 1;
    }
    else if (v12 == 31)
    {
      int32x2_t v9 = *(int32x2_t *)v7;
      a3.n128_u64[0] = *(void *)(v7 + 8);
      a4 = *(int32x2_t *)(v7 + 16);
      a5 = *(int32x2_t *)(v7 + 24);
      *int32x2_t v11 = vzip1_s32(*(int32x2_t *)v7, (int32x2_t)a3.n128_u64[0]);
      v11[4] = vzip2_s32(v9, (int32x2_t)a3.n128_u64[0]);
      v11[8] = vzip1_s32(a4, a5);
      a2.n128_u64[0] = (unint64_t)vzip2_s32(a4, a5);
      v11[12] = (int32x2_t)a2.n128_u64[0];
      uint64_t v10 = 32;
    }
    else if (*v8)
    {
      uint64_t v10 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v11, 32, v7, v12);
    }
    else
    {
      uint64_t v10 = 0;
      *int32x2_t v11 = 0;
      v11[4] = 0;
      v11[8] = 0;
      v11[12] = 0;
    }
    v7 += v10;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v16 = &v60[v14 + v15];
    uint64_t v17 = *(__n128 **)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = v17->n128_u8[v22];
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        uint64_t v17 = (__n128 *)((char *)v17 + v18);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      unint64_t v23 = &v60[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t *)&v60[v14 + v15];
        uint64_t v27 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v28 = (char *)v17 + v18 * v25;
          uint64_t v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            int v31 = v26;
            unsigned int v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              unint64_t v34 = *v32++;
              a2.n128_u64[0] = v34;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          uint64_t v27 = (unint64_t *)((char *)v27 + v18);
          v26 += 4;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      uint64_t v43 = &v60[v14 + v15];
      int v44 = (__n128 *)&v60[v14 + 16 + v15];
      int v45 = v17 + 1;
      int v46 = (unint64_t *)((char *)v17->n128_u64 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        long long v48 = (char *)v17 + v18 * v41;
        char v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          char v53 = v45;
          BOOL v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            a2 = v53[-1];
            a3 = *v53;
            v54[-1] = a2;
            __n128 *v54 = a3;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            uint64_t v56 = j;
            long long v57 = v46;
            unint64_t v58 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              unint64_t v59 = *v57++;
              a2.n128_u64[0] = v59;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 2;
        int v45 = (__n128 *)((char *)v45 + v18);
        int v46 = (unint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = v17->n128_u8[v39];
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      uint64_t v17 = (__n128 *)((char *)v17 + v18);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v60, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, (int8x8_t)a5);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(v1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v30, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(v1 + 80);
  if (!v3 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v30, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  unint64_t v5 = (unint64_t)*(unsigned int *)(v1 + 76) << 6;
  uint64_t v6 = &v30[v4 + v5];
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  unint64_t v9 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(v1 + 84) << 6;
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v30[v4 + v5];
    uint64_t v17 = v10 & 0x3FFFFFFFC0;
    uint64_t v18 = &v30[v4 + 16 + v5];
    unint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      unint64_t v20 = (char *)(v7 + v8 * v15);
      uint64_t v21 = &v6[512 * v15];
      if ((unint64_t)(&v16[512 * v15] - v20) >= 0x20)
      {
        unint64_t v23 = v19;
        uint64_t v24 = v18;
        uint64_t v25 = v10 & 0x3FFFFFFFC0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          _OWORD *v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFC0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 512;
      unint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v30, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 512;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v30, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(const double **)(a1 + 40);
  unint64_t v5 = *(unsigned char **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v8 = (float64x2_t *)&v37[512
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                           + 128
                           * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v9 = *v5;
    if (*v5)
    {
      if (v9 < 0xF0)
      {
        if (v9 == 7)
        {
          float64x2_t v10 = vld1q_dup_f64(v3);
          *uint64_t v8 = v10;
          v8[1] = v10;
          v8[2] = v10;
          v8[3] = v10;
          v8[4] = v10;
          v8[5] = v10;
          v8[6] = v10;
          v8[7] = v10;
          v8[16] = v10;
          v8[17] = v10;
          v8[18] = v10;
          v8[19] = v10;
          v8[20] = v10;
          v8[21] = v10;
          v8[22] = v10;
          v8[23] = v10;
          uint64_t v7 = 8;
        }
        else
        {
          uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v8, 256, (uint64_t)v3, v9);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)v8, 256, (unint64_t)v3, v9, v6);
        uint64_t v7 = 128;
      }
    }
    else
    {
      uint64_t v7 = 0;
      v8[6] = 0u;
      v8[7] = 0u;
      v8[4] = 0u;
      v8[5] = 0u;
      v8[2] = 0u;
      v8[3] = 0u;
      *uint64_t v8 = 0u;
      v8[1] = 0u;
      v8[16] = 0u;
      v8[17] = 0u;
      v8[18] = 0u;
      v8[19] = 0u;
      v8[20] = 0u;
      v8[21] = 0u;
      v8[22] = 0u;
      v8[23] = 0u;
    }
    uint64_t v3 = (const double *)((char *)v3 + v7);
    ++v5;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v12 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
    uint64_t v13 = 32 * *(unsigned int *)(a1 + 76);
    uint64_t v14 = &v37[v12 + v13];
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    unint64_t v17 = 32 * *(unsigned int *)(a1 + 84);
    if (v17 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = 32 * *(unsigned int *)(a1 + 84);
    }
    if (v18)
    {
      unint64_t v19 = (unint64_t)(v18 - 1) >> 32;
      if (!v19)
      {
        unint64_t v20 = &v37[v12 + v13];
        uint64_t v21 = v18 & 0x1FFFFFFFE0;
        int v22 = &v37[v12 + 16 + v13];
        unint64_t v23 = (long long *)(v15 + 16);
        while (1)
        {
          uint64_t v24 = (char *)(v15 + v16 * v19);
          uint64_t v25 = &v14[256 * v19];
          if ((unint64_t)(&v20[256 * v19] - v24) >= 0x20)
          {
            unsigned int v27 = v23;
            char v28 = v22;
            uint64_t v29 = v18 & 0x1FFFFFFFE0;
            do
            {
              long long v30 = *v27;
              *(v28 - 1) = *(v27 - 1);
              _OWORD *v28 = v30;
              v28 += 2;
              v27 += 2;
              v29 -= 32;
            }
            while (v29);
            if (v18 == v21) {
              goto LABEL_18;
            }
            v24 += v21;
            v25 += v21;
            int v26 = v18 & 0xFFFFFFE0;
          }
          else
          {
            int v26 = 0;
          }
          unsigned int v31 = v26 + 1;
          do
          {
            char v32 = *v24++;
            *v25++ = v32;
          }
          while (v17 > v31++);
LABEL_18:
          ++v19;
          v22 += 256;
          unint64_t v23 = (long long *)((char *)v23 + v16);
          if (v19 == v11) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v37, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
          }
        }
      }
    }
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v35 = 0;
      do
      {
        v14[v35] = *(unsigned char *)(v15 + v35);
        ++v35;
      }
      while (v17 > v35);
      v14 += 256;
      v15 += v16;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v37, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int16x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned char **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(v7 + 208) + 52);
  do
  {
    uint64_t v11 = (__n128 *)&v60[128
                       * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v5 + 1]
                       + 32
                       * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v5]];
    unsigned int v12 = *v8;
    if (*v8)
    {
      if (v12 < 0xF0)
      {
        if (v12 == 63)
        {
          a2 = *(int16x8_t *)v6;
          a3 = *(__n128 *)(v6 + 16);
          a4 = *(__n128 *)(v6 + 32);
          __n128 v13 = *(__n128 *)(v6 + 48);
          *uint64_t v11 = *(__n128 *)v6;
          v11[1] = a4;
          v11[4] = a3;
          v11[5] = v13;
          uint64_t v10 = 64;
        }
        else if (v12 == 1)
        {
          a2 = vld1q_dup_s16((const __int16 *)v6);
          *uint64_t v11 = (__n128)a2;
          v11[1] = (__n128)a2;
          v11[4] = (__n128)a2;
          v11[5] = (__n128)a2;
          uint64_t v10 = 2;
        }
        else
        {
          uint64_t v10 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)v11, 64, v6, v12, *(int8x8_t *)a2.i8, a3.n128_f64[0], (int8x8_t)a4.n128_u64[0]);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v11, 64, v6, v12, v9);
        uint64_t v10 = 32;
      }
    }
    else
    {
      uint64_t v10 = 0;
      a2.i64[0] = 0;
      *uint64_t v11 = 0u;
      v11[1] = 0u;
      v11[4] = 0u;
      v11[5] = 0u;
    }
    v6 += v10;
    ++v8;
    v5 += 2;
  }
  while (v5 != 16);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v15 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v16 = 8 * *(unsigned int *)(a1 + 76);
    unint64_t v17 = &v60[v15 + v16];
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 64);
    unint64_t v20 = 8 * *(unsigned int *)(a1 + 84);
    if (v20 <= 1) {
      unint64_t v21 = 1;
    }
    else {
      unint64_t v21 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v21 && !((v21 - 1) >> 32))
    {
      int v22 = &v60[v15 + v16];
      uint64_t v23 = v21 & 0x7FFFFFFF8;
      if (v21 < 0x20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = &v60[v15 + v16];
        int v26 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v27 = (char *)(v18 + v19 * v24);
          char v28 = &v17[64 * v24];
          if ((unint64_t)(&v22[64 * v24] - v27) > 0x1F)
          {
            v28 += v23;
            long long v30 = v25;
            unsigned int v31 = v26;
            uint64_t v32 = v21 & 0x7FFFFFFF8;
            do
            {
              uint64_t v33 = *v31++;
              *v30++ = v33;
              v32 -= 8;
            }
            while (v32);
            if (v21 == v23) {
              goto LABEL_21;
            }
            v27 += v23;
            int v29 = v21 & 0xFFFFFFF8;
          }
          else
          {
            int v29 = 0;
          }
          unsigned int v34 = v29 + 1;
          do
          {
            char v35 = *v27++;
            *v28++ = v35;
            BOOL v36 = v20 > v34++;
          }
          while (v36);
LABEL_21:
          ++v24;
          int v26 = (uint64_t *)((char *)v26 + v19);
          v25 += 64;
          if (v24 == v14) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v60, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
          }
        }
      }
      uint64_t v40 = 0;
      uint64_t v41 = v21 & 0x7FFFFFFE0;
      uint64_t v42 = &v60[v15 + v16];
      uint64_t v43 = &v60[v15 + 16 + v16];
      int v44 = (long long *)(v18 + 16);
      int v45 = (uint64_t *)(v18 + (v21 & 0x7FFFFFFE0));
      for (uint64_t i = &v42[v21 & 0x7FFFFFFE0]; ; i += 8)
      {
        int v47 = (char *)(v18 + v19 * v40);
        long long v48 = &v17[64 * v40];
        if ((unint64_t)(&v22[64 * v40] - v47) >= 0x20)
        {
          char v52 = v44;
          char v53 = v43;
          uint64_t v54 = v21 & 0x7FFFFFFE0;
          do
          {
            long long v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *char v53 = v55;
            v53 += 2;
            v52 += 2;
            v54 -= 32;
          }
          while (v54);
          if (v21 == v41) {
            goto LABEL_37;
          }
          if ((v21 & 0x18) != 0)
          {
            v48 += v23;
            uint64_t v56 = i;
            long long v57 = v45;
            unint64_t v58 = v23 - (v21 & 0x7FFFFFFE0);
            do
            {
              uint64_t v59 = *v57++;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v21 == v23) {
              goto LABEL_37;
            }
            v47 += v23;
            int v49 = v21 & 0xFFFFFFF8;
          }
          else
          {
            v47 += v41;
            v48 += v41;
            int v49 = v21 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v50 = v49 + 1;
        do
        {
          char v51 = *v47++;
          *v48++ = v51;
          BOOL v36 = v20 > v50++;
        }
        while (v36);
LABEL_37:
        ++v40;
        v43 += 64;
        int v44 = (long long *)((char *)v44 + v19);
        int v45 = (uint64_t *)((char *)v45 + v19);
        if (v40 == v14) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v60, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
        }
      }
    }
    for (uint64_t j = 0; j != v14; ++j)
    {
      uint64_t v38 = 0;
      do
      {
        v17[v38] = *(unsigned char *)(v18 + v38);
        ++v38;
      }
      while (v20 > v38);
      v17 += 64;
      v18 += v19;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v60, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v31, *(const double **)(a1 + 40), *(unsigned char **)(a1 + 48), *(_DWORD *)(*(void *)(v3 + 208) + 52), a2);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v6 = 32 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v31[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (unint64_t)(v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = 0;
    unint64_t v17 = &v31[v5 + v6];
    uint64_t v18 = v11 & 0x1FFFFFFFE0;
    uint64_t v19 = &v31[v5 + 16 + v6];
    unint64_t v20 = (long long *)(v8 + 16);
    while (1)
    {
      unint64_t v21 = (char *)(v8 + v9 * v16);
      int v22 = &v7[256 * v16];
      if ((unint64_t)(&v17[256 * v16] - v21) >= 0x20)
      {
        uint64_t v24 = v20;
        uint64_t v25 = v19;
        uint64_t v26 = v11 & 0x1FFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *uint64_t v25 = v27;
          v25 += 2;
          v24 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v11 == v18) {
          goto LABEL_16;
        }
        v21 += v18;
        v22 += v18;
        int v23 = v11 & 0xFFFFFFE0;
      }
      else
      {
        int v23 = 0;
      }
      unsigned int v28 = v23 + 1;
      do
      {
        char v29 = *v21++;
        *v22++ = v29;
      }
      while (v10 > v28++);
LABEL_16:
      ++v16;
      v19 += 256;
      unint64_t v20 = (long long *)((char *)v20 + v9);
      if (v16 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
      }
    }
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 256;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v31, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  int v8 = *(_DWORD *)(*(void *)(v6 + 208) + 52);
  do
  {
    unint64_t v10 = (int32x4_t *)&v64[256
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v4 + 1]
                          + 64
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v4]];
    unsigned int v11 = *v7;
    if (*v7)
    {
      if (v11 < 0xF0)
      {
        if (v11 == 127)
        {
          a2 = *(int32x4_t *)v5;
          a3 = *(int32x4_t *)(v5 + 16);
          int32x4_t v12 = *(int32x4_t *)(v5 + 32);
          int32x4_t v13 = *(int32x4_t *)(v5 + 48);
          int32x4_t v14 = *(int32x4_t *)(v5 + 64);
          int32x4_t v15 = *(int32x4_t *)(v5 + 80);
          int32x4_t v16 = *(int32x4_t *)(v5 + 96);
          int32x4_t v17 = *(int32x4_t *)(v5 + 112);
          *unint64_t v10 = *(int32x4_t *)v5;
          v10[1] = a3;
          v10[2] = v14;
          v10[3] = v15;
          v10[8] = v12;
          v10[9] = v13;
          v10[10] = v16;
          v10[11] = v17;
          uint64_t v9 = 128;
        }
        else if (v11 == 3)
        {
          a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
          *unint64_t v10 = a2;
          v10[1] = a2;
          v10[2] = a2;
          v10[3] = a2;
          v10[8] = a2;
          v10[9] = a2;
          v10[10] = a2;
          v10[11] = a2;
          uint64_t v9 = 4;
        }
        else
        {
          uint64_t v9 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)v10, 128, v5, v11, a2, a3);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v10->i32, 128, v5, v11, v8);
        uint64_t v9 = 64;
      }
    }
    else
    {
      uint64_t v9 = 0;
      a2 = 0uLL;
      v10[2] = 0u;
      v10[3] = 0u;
      *unint64_t v10 = 0u;
      v10[1] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[10] = 0u;
      v10[11] = 0u;
    }
    v5 += v9;
    ++v7;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v20 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v21 = &v64[v19 + v20];
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 16 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      uint64_t v26 = &v64[v19 + v20];
      uint64_t v27 = v25 & 0xFFFFFFFF0;
      if (v25 < 0x20)
      {
        uint64_t v28 = 0;
        char v29 = &v64[v19 + v20];
        long long v30 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v31 = (char *)(v22 + v23 * v28);
          uint64_t v32 = &v21[128 * v28];
          if ((unint64_t)(&v26[128 * v28] - v31) > 0x1F)
          {
            v32 += v27;
            unsigned int v34 = v29;
            char v35 = v30;
            uint64_t v36 = v25 & 0xFFFFFFFF0;
            do
            {
              uint64_t v37 = *v35++;
              *v34++ = v37;
              v36 -= 8;
            }
            while (v36);
            if (v25 == v27) {
              goto LABEL_21;
            }
            v31 += v27;
            int v33 = v25 & 0xFFFFFFF0;
          }
          else
          {
            int v33 = 0;
          }
          unsigned int v38 = v33 + 1;
          do
          {
            char v39 = *v31++;
            *v32++ = v39;
            BOOL v40 = v24 > v38++;
          }
          while (v40);
LABEL_21:
          ++v28;
          long long v30 = (uint64_t *)((char *)v30 + v23);
          v29 += 128;
          if (v28 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
          }
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = v25 & 0xFFFFFFFE0;
      int v46 = &v64[v19 + v20];
      int v47 = &v64[v19 + 16 + v20];
      long long v48 = (long long *)(v22 + 16);
      int v49 = (uint64_t *)(v22 + (v25 & 0xFFFFFFFE0));
      for (uint64_t i = &v46[v25 & 0xFFFFFFFE0]; ; i += 16)
      {
        char v51 = (char *)(v22 + v23 * v44);
        char v52 = &v21[128 * v44];
        if ((unint64_t)(&v26[128 * v44] - v51) >= 0x20)
        {
          uint64_t v54 = v48;
          long long v55 = v47;
          uint64_t v56 = v25 & 0xFFFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v25 == v45) {
            goto LABEL_37;
          }
          if ((v25 & 0x10) != 0)
          {
            v52 += v27;
            unint64_t v58 = i;
            uint64_t v59 = v49;
            unint64_t v60 = v27 - (v25 & 0xFFFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v25 == v27) {
              goto LABEL_37;
            }
            v51 += v27;
            int v53 = v25 & 0xFFFFFFF0;
          }
          else
          {
            v51 += v45;
            v52 += v45;
            int v53 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v53 = 0;
        }
        unsigned int v62 = v53 + 1;
        do
        {
          char v63 = *v51++;
          *v52++ = v63;
          BOOL v40 = v24 > v62++;
        }
        while (v40);
LABEL_37:
        ++v44;
        v47 += 128;
        long long v48 = (long long *)((char *)v48 + v23);
        int v49 = (uint64_t *)((char *)v49 + v23);
        if (v44 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
        }
      }
    }
    for (uint64_t j = 0; j != v18; ++j)
    {
      uint64_t v42 = 0;
      do
      {
        v21[v42] = *(unsigned char *)(v22 + v42);
        ++v42;
      }
      while (v24 > v42);
      v21 += 128;
      v22 += v23;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    int32x4_t v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      unint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        unint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        unint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    uint64_t v32 = &v50[v4 + v5];
    int v33 = &v50[v4 + 16 + v5];
    unsigned int v34 = (long long *)(v7 + 16);
    char v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unsigned int v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        BOOL v40 = v34;
        uint64_t v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          _OWORD *v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          uint64_t v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *v44++ = v47;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      unsigned int v34 = (long long *)((char *)v34 + v8);
      char v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int16x8_t a2, __n128 a3, __n128 a4, __n128 a5, int16x4_t a6)
{
  uint64_t v7 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(__n128 **)(a1 + 40);
  unint64_t v10 = *(unsigned char **)(a1 + 48);
  int v11 = *(_DWORD *)(*(void *)(v9 + 208) + 52);
  do
  {
    uint64_t v13 = (__n128 *)&v60[128
                       * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v7 + 1]
                       + 32
                       * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v7]];
    unsigned int v14 = *v10;
    if (*v10)
    {
      if (v14 < 0xF0)
      {
        if (v14 == 63)
        {
          a2 = *(int16x8_t *)v8;
          a3 = v8[1];
          a4 = v8[2];
          a5 = v8[3];
          *uint64_t v13 = *v8;
          v13[1] = a4;
          v13[4] = a3;
          v13[5] = a5;
          uint64_t v12 = 64;
        }
        else if (v14 == 1)
        {
          a2 = vld1q_dup_s16((const __int16 *)v8);
          *uint64_t v13 = (__n128)a2;
          v13[1] = (__n128)a2;
          v13[4] = (__n128)a2;
          v13[5] = (__n128)a2;
          uint64_t v12 = 2;
        }
        else
        {
          uint64_t v12 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)v13, 64, (uint64_t)v8, v14, *(double *)a2.i64, a3.n128_f64[0], a4.n128_f64[0], (int8x8_t)a5.n128_u64[0]);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v13, 64, (uint64_t)v8, v14, v11);
        uint64_t v12 = 32;
      }
    }
    else
    {
      uint64_t v12 = 0;
      a2.i64[0] = 0;
      *uint64_t v13 = 0u;
      v13[1] = 0u;
      v13[4] = 0u;
      v13[5] = 0u;
    }
    uint64_t v8 = (__n128 *)((char *)v8 + v12);
    ++v10;
    v7 += 2;
  }
  while (v7 != 16);
  uint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v16 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v17 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v18 = &v60[v16 + v17];
    unint64_t v19 = *(__n128 **)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
    unint64_t v21 = 8 * *(unsigned int *)(a1 + 84);
    if (v21 <= 1) {
      unint64_t v22 = 1;
    }
    else {
      unint64_t v22 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v22 && !((v22 - 1) >> 32))
    {
      uint64_t v23 = &v60[v16 + v17];
      uint64_t v24 = v22 & 0x7FFFFFFF8;
      if (v22 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t *)&v60[v16 + v17];
        unsigned int v27 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          char v28 = (char *)v19 + v20 * v25;
          BOOL v29 = &v18[64 * v25];
          if ((unint64_t)(&v23[64 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            uint64_t v32 = v27;
            uint64_t v33 = v22 & 0x7FFFFFFF8;
            do
            {
              unint64_t v34 = *v32++;
              a2.i64[0] = v34;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v22 == v24) {
              goto LABEL_21;
            }
            v28 += v24;
            int v30 = v22 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v21 > v35++;
          }
          while (v37);
LABEL_21:
          ++v25;
          unsigned int v27 = (unint64_t *)((char *)v27 + v20);
          v26 += 8;
          if (v25 == v15) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v60, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), *(int16x4_t *)a2.i8, (int16x4_t)a3.n128_u64[0], a4.n128_f64[0], a5.n128_f64[0], a6);
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v22 & 0x7FFFFFFE0;
      long long v43 = &v60[v16 + v17];
      uint64_t v44 = (__n128 *)&v60[v16 + 16 + v17];
      uint64_t v45 = v19 + 1;
      unint64_t v46 = (unint64_t *)((char *)v19->n128_u64 + (v22 & 0x7FFFFFFE0));
      for (uint64_t i = (unint64_t *)&v43[v22 & 0x7FFFFFFE0]; ; i += 8)
      {
        unsigned int v48 = (char *)v19 + v20 * v41;
        char v49 = &v18[64 * v41];
        if ((unint64_t)(&v23[64 * v41] - v48) >= 0x20)
        {
          int v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v22 & 0x7FFFFFFE0;
          do
          {
            a2 = (int16x8_t)v53[-1];
            a3 = *v53;
            v54[-1] = (__n128)a2;
            __n128 *v54 = a3;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v22 == v42) {
            goto LABEL_37;
          }
          if ((v22 & 0x18) != 0)
          {
            v49 += v24;
            uint64_t v56 = i;
            long long v57 = v46;
            unint64_t v58 = v24 - (v22 & 0x7FFFFFFE0);
            do
            {
              unint64_t v59 = *v57++;
              a2.i64[0] = v59;
              *v56++ = v59;
              v58 -= 8;
            }
            while (v58);
            if (v22 == v24) {
              goto LABEL_37;
            }
            v48 += v24;
            int v50 = v22 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v22 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v21 > v51++;
        }
        while (v37);
LABEL_37:
        ++v41;
        v44 += 4;
        uint64_t v45 = (__n128 *)((char *)v45 + v20);
        unint64_t v46 = (unint64_t *)((char *)v46 + v20);
        if (v41 == v15) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v60, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), *(int16x4_t *)a2.i8, (int16x4_t)a3.n128_u64[0], a4.n128_f64[0], a5.n128_f64[0], a6);
        }
      }
    }
    for (uint64_t j = 0; j != v15; ++j)
    {
      uint64_t v39 = 0;
      do
      {
        v18[v39] = v19->n128_u8[v39];
        ++v39;
      }
      while (v21 > v39);
      v18 += 64;
      unint64_t v19 = (__n128 *)((char *)v19 + v20);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v60, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), *(int16x4_t *)a2.i8, (int16x4_t)a3.n128_u64[0], a4.n128_f64[0], a5.n128_f64[0], a6);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v8 = &v64[256
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
            + 64
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v9 = *v5;
    if (*v5)
    {
      if (v9 < 0xF0)
      {
        if (v9 == 127)
        {
          long long v11 = *(_OWORD *)(v3 + 16);
          long long v12 = *(_OWORD *)(v3 + 32);
          long long v13 = *(_OWORD *)(v3 + 48);
          long long v14 = *(_OWORD *)(v3 + 64);
          long long v15 = *(_OWORD *)(v3 + 80);
          long long v16 = *(_OWORD *)(v3 + 96);
          long long v17 = *(_OWORD *)(v3 + 112);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v3;
          *((_OWORD *)v8 + 1) = v11;
          *((_OWORD *)v8 + 2) = v14;
          *((_OWORD *)v8 + 3) = v15;
          *((_OWORD *)v8 + 8) = v12;
          *((_OWORD *)v8 + 9) = v13;
          *((_OWORD *)v8 + 10) = v16;
          *((_OWORD *)v8 + 11) = v17;
          uint64_t v7 = 128;
        }
        else if (v9 == 3)
        {
          float32x4_t v10 = vld1q_dup_f32((const float *)v3);
          *(float32x4_t *)uint64_t v8 = v10;
          *((float32x4_t *)v8 + 1) = v10;
          *((float32x4_t *)v8 + 2) = v10;
          *((float32x4_t *)v8 + 3) = v10;
          *((float32x4_t *)v8 + 8) = v10;
          *((float32x4_t *)v8 + 9) = v10;
          *((float32x4_t *)v8 + 10) = v10;
          *((float32x4_t *)v8 + 11) = v10;
          uint64_t v7 = 4;
        }
        else
        {
          uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)v8, 128, v3, v9);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v8, 128, v3, v9, v6);
        uint64_t v7 = 64;
      }
    }
    else
    {
      uint64_t v7 = 0;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 9) = 0u;
      *((_OWORD *)v8 + 10) = 0u;
      *((_OWORD *)v8 + 11) = 0u;
    }
    v3 += v7;
    ++v5;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v20 = 16 * *(unsigned int *)(a1 + 76);
    unint64_t v21 = &v64[v19 + v20];
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 16 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 16 * *(unsigned int *)(a1 + 84);
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      uint64_t v26 = &v64[v19 + v20];
      uint64_t v27 = v25 & 0xFFFFFFFF0;
      if (v25 < 0x20)
      {
        uint64_t v28 = 0;
        BOOL v29 = &v64[v19 + v20];
        int v30 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v31 = (char *)(v22 + v23 * v28);
          uint64_t v32 = &v21[128 * v28];
          if ((unint64_t)(&v26[128 * v28] - v31) > 0x1F)
          {
            v32 += v27;
            unint64_t v34 = v29;
            unsigned int v35 = v30;
            uint64_t v36 = v25 & 0xFFFFFFFF0;
            do
            {
              uint64_t v37 = *v35++;
              *v34++ = v37;
              v36 -= 8;
            }
            while (v36);
            if (v25 == v27) {
              goto LABEL_21;
            }
            v31 += v27;
            int v33 = v25 & 0xFFFFFFF0;
          }
          else
          {
            int v33 = 0;
          }
          unsigned int v38 = v33 + 1;
          do
          {
            char v39 = *v31++;
            *v32++ = v39;
            BOOL v40 = v24 > v38++;
          }
          while (v40);
LABEL_21:
          ++v28;
          int v30 = (uint64_t *)((char *)v30 + v23);
          v29 += 128;
          if (v28 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
          }
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = v25 & 0xFFFFFFFE0;
      unint64_t v46 = &v64[v19 + v20];
      uint64_t v47 = &v64[v19 + 16 + v20];
      unsigned int v48 = (long long *)(v22 + 16);
      char v49 = (uint64_t *)(v22 + (v25 & 0xFFFFFFFE0));
      for (uint64_t i = &v46[v25 & 0xFFFFFFFE0]; ; i += 16)
      {
        unsigned int v51 = (char *)(v22 + v23 * v44);
        char v52 = &v21[128 * v44];
        if ((unint64_t)(&v26[128 * v44] - v51) >= 0x20)
        {
          uint64_t v54 = v48;
          uint64_t v55 = v47;
          uint64_t v56 = v25 & 0xFFFFFFFE0;
          do
          {
            long long v57 = *v54;
            *(v55 - 1) = *(v54 - 1);
            _OWORD *v55 = v57;
            v55 += 2;
            v54 += 2;
            v56 -= 32;
          }
          while (v56);
          if (v25 == v45) {
            goto LABEL_37;
          }
          if ((v25 & 0x10) != 0)
          {
            v52 += v27;
            unint64_t v58 = i;
            unint64_t v59 = v49;
            unint64_t v60 = v27 - (v25 & 0xFFFFFFFE0);
            do
            {
              uint64_t v61 = *v59++;
              *v58++ = v61;
              v60 -= 8;
            }
            while (v60);
            if (v25 == v27) {
              goto LABEL_37;
            }
            v51 += v27;
            int v53 = v25 & 0xFFFFFFF0;
          }
          else
          {
            v51 += v45;
            v52 += v45;
            int v53 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v53 = 0;
        }
        unsigned int v62 = v53 + 1;
        do
        {
          char v63 = *v51++;
          *v52++ = v63;
          BOOL v40 = v24 > v62++;
        }
        while (v40);
LABEL_37:
        ++v44;
        v47 += 128;
        unsigned int v48 = (long long *)((char *)v48 + v23);
        char v49 = (uint64_t *)((char *)v49 + v23);
        if (v44 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    for (uint64_t j = 0; j != v18; ++j)
    {
      uint64_t v42 = 0;
      do
      {
        v21[v42] = *(unsigned char *)(v22 + v42);
        ++v42;
      }
      while (v24 > v42);
      v21 += 128;
      v22 += v23;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
  int v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    long long v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      unint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        unint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        unint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    uint64_t v32 = &v50[v4 + v5];
    int v33 = &v50[v4 + 16 + v5];
    unint64_t v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unsigned int v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        BOOL v40 = v34;
        uint64_t v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          _OWORD *v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          uint64_t v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *v44++ = v47;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      unint64_t v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, int8x8_t a4, double a5, double a6, double a7, int8x8_t a8)
{
  uint64_t v9 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  long long v12 = *(unsigned char **)(a1 + 48);
  int v13 = *(_DWORD *)(*(void *)(v11 + 208) + 52);
  do
  {
    long long v15 = (__n128 *)&v64[64
                       * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v9 + 1]
                       + 16
                       * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v9]];
    unsigned int v16 = *v12;
    if (*v12)
    {
      if (v16 < 0xF0)
      {
        if (v16 == 31)
        {
          a2.n128_u64[0] = *(void *)v10;
          a3.n128_u64[0] = *(void *)(v10 + 8);
          a4 = *(int8x8_t *)(v10 + 16);
          a5 = *(double *)(v10 + 24);
          v15->n128_u64[0] = *(void *)v10;
          v15->n128_f64[1] = *(double *)&a4;
          v15[2].n128_u64[0] = a3.n128_u64[0];
          v15[2].n128_f64[1] = a5;
          uint64_t v14 = 32;
        }
        else if (v16 == 96)
        {
          a2 = (__n128)vld1q_dup_s8((const char *)v10);
          *long long v15 = a2;
          v15[2] = a2;
          uint64_t v14 = 1;
        }
        else
        {
          uint64_t v14 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v15, 32, v10, v16);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v15, 32, v10, v16, v13);
        uint64_t v14 = 16;
      }
    }
    else
    {
      uint64_t v14 = 0;
      v15->n128_u64[0] = 0;
      v15->n128_u64[1] = 0;
      v15[2].n128_u64[0] = 0;
      v15[2].n128_u64[1] = 0;
    }
    v10 += v14;
    ++v12;
    v9 += 2;
  }
  while (v9 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v18 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v19 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v20 = &v64[v18 + v19];
    unint64_t v21 = *(__n128 **)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
    if (v23 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v24 <= 7)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v26 = 0;
        do
        {
          v20[v26] = v21->n128_u8[v26];
          ++v26;
        }
        while (v23 > v26);
        v20 += 32;
        unint64_t v21 = (__n128 *)((char *)v21 + v22);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), (int8x8_t)a2.n128_u64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
    }
    if (v24 && !((v24 - 1) >> 32))
    {
      unsigned int v27 = &v64[v18 + v19];
      uint64_t v28 = v24 & 0x3FFFFFFF8;
      if (v24 < 0x20)
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t *)&v64[v18 + v19];
        uint64_t v31 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v32 = (char *)v21 + v22 * v29;
          int v33 = &v20[32 * v29];
          if ((unint64_t)(&v27[32 * v29] - v32) > 0x1F)
          {
            v33 += v28;
            unsigned int v35 = v30;
            uint64_t v36 = v31;
            uint64_t v37 = v24 & 0x3FFFFFFF8;
            do
            {
              unint64_t v38 = *v36++;
              a2.n128_u64[0] = v38;
              *v35++ = v38;
              v37 -= 8;
            }
            while (v37);
            if (v24 == v28) {
              goto LABEL_27;
            }
            v32 += v28;
            int v34 = v24 & 0xFFFFFFF8;
          }
          else
          {
            int v34 = 0;
          }
          unsigned int v39 = v34 + 1;
          do
          {
            char v40 = *v32++;
            *v33++ = v40;
            BOOL v41 = v23 > v39++;
          }
          while (v41);
LABEL_27:
          ++v29;
          uint64_t v31 = (unint64_t *)((char *)v31 + v22);
          v30 += 4;
          if (v29 == v17) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), (int8x8_t)a2.n128_u64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
          }
        }
      }
      uint64_t v45 = 0;
      uint64_t v46 = v24 & 0x3FFFFFFE0;
      uint64_t v47 = &v64[v18 + v19];
      unsigned int v48 = (__n128 *)&v64[v18 + 16 + v19];
      char v49 = v21 + 1;
      int v50 = (unint64_t *)((char *)v21->n128_u64 + (v24 & 0x3FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v47[v24 & 0x3FFFFFFE0]; ; j += 4)
      {
        char v52 = (char *)v21 + v22 * v45;
        int v53 = &v20[32 * v45];
        if ((unint64_t)(&v27[32 * v45] - v52) >= 0x20)
        {
          long long v57 = v49;
          unint64_t v58 = v48;
          uint64_t v59 = v24 & 0x3FFFFFFE0;
          do
          {
            a2 = v57[-1];
            a3 = *v57;
            v58[-1] = a2;
            __n128 *v58 = a3;
            v58 += 2;
            v57 += 2;
            v59 -= 32;
          }
          while (v59);
          if (v24 == v46) {
            goto LABEL_43;
          }
          if ((v24 & 0x18) != 0)
          {
            v53 += v28;
            unint64_t v60 = j;
            uint64_t v61 = v50;
            unint64_t v62 = v28 - (v24 & 0x3FFFFFFE0);
            do
            {
              unint64_t v63 = *v61++;
              a2.n128_u64[0] = v63;
              *v60++ = v63;
              v62 -= 8;
            }
            while (v62);
            if (v24 == v28) {
              goto LABEL_43;
            }
            v52 += v28;
            int v54 = v24 & 0xFFFFFFF8;
          }
          else
          {
            v52 += v46;
            v53 += v46;
            int v54 = v24 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v54 = 0;
        }
        unsigned int v55 = v54 + 1;
        do
        {
          char v56 = *v52++;
          *v53++ = v56;
          BOOL v41 = v23 > v55++;
        }
        while (v41);
LABEL_43:
        ++v45;
        v48 += 2;
        char v49 = (__n128 *)((char *)v49 + v22);
        int v50 = (unint64_t *)((char *)v50 + v22);
        if (v45 == v17) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), (int8x8_t)a2.n128_u64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
        }
      }
    }
    for (uint64_t k = 0; k != v17; ++k)
    {
      uint64_t v43 = 0;
      do
      {
        v20[v43] = v21->n128_u8[v43];
        ++v43;
      }
      while (v23 > v43);
      v20 += 32;
      unint64_t v21 = (__n128 *)((char *)v21 + v22);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), (int8x8_t)a2.n128_u64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(v1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v30, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(v1 + 80);
  if (!v3 || !*(_DWORD *)(v1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v30, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(v1 + 72) << 9;
  uint64_t v5 = 32 * *(unsigned int *)(v1 + 76);
  int v6 = &v30[v4 + v5];
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  unint64_t v9 = 32 * *(unsigned int *)(v1 + 84);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 32 * *(unsigned int *)(v1 + 84);
  }
  if (v10) {
    BOOL v11 = (unint64_t)(v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    unsigned int v16 = &v30[v4 + v5];
    uint64_t v17 = v10 & 0x1FFFFFFFE0;
    uint64_t v18 = &v30[v4 + 16 + v5];
    uint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      uint64_t v20 = (char *)(v7 + v8 * v15);
      unint64_t v21 = &v6[512 * v15];
      if ((unint64_t)(&v16[512 * v15] - v20) >= 0x20)
      {
        unint64_t v23 = v19;
        unint64_t v24 = v18;
        uint64_t v25 = v10 & 0x1FFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          _OWORD *v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFE0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 512;
      uint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v30, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 512;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v30, 512, *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(const double **)(a1 + 40), *(unsigned char **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
  int v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        unint64_t v21 = &v6[256 * v17];
        if ((unint64_t)(&v15[256 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          unint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 256;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    uint64_t v32 = &v50[v4 + v5];
    int v33 = &v50[v4 + 16 + v5];
    int v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 32)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unint64_t v38 = &v6[256 * v30];
      if ((unint64_t)(&v15[256 * v30] - v37) >= 0x20)
      {
        char v40 = v34;
        BOOL v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          _OWORD *v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          uint64_t v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *v44++ = v47;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 256;
      int v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v5 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned char **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(v7 + 208) + 52);
  do
  {
    BOOL v11 = (__n128 *)&v64[256
                       * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v5 + 1]
                       + 16
                       * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v5]];
    unsigned int v12 = *v8;
    if (*v8)
    {
      if (v12 < 0xF0)
      {
        if (v12 == 63)
        {
          int64x2_t v13 = *(int64x2_t *)v6;
          a3 = *(int64x2_t *)(v6 + 16);
          uint64_t v14 = (const double *)(v6 + 32);
          *(float64x2x2_t *)a4.n128_u64 = vld2q_f64(v14);
          *(int64x2_t *)BOOL v11 = vzip1q_s64(*(int64x2_t *)v6, a3);
          a2 = (__n128)vzip2q_s64(v13, a3);
          v11[4] = a2;
          v11[8] = a4;
          v11[12] = v15;
          uint64_t v10 = 64;
        }
        else if (v12 == 1)
        {
          a2 = (__n128)vld1q_dup_s16((const __int16 *)v6);
          *BOOL v11 = a2;
          v11[4] = a2;
          v11[8] = a2;
          v11[12] = a2;
          uint64_t v10 = 2;
        }
        else
        {
          uint64_t v10 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int64x2_t *)v11, 64, v6, v12, (int8x8_t)a2.n128_u64[0], *(double *)a3.i64, (int8x8_t)a4.n128_u64[0]);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__int16 *)v11, 64, v6, v12, v9);
        uint64_t v10 = 32;
      }
    }
    else
    {
      uint64_t v10 = 0;
      v11->n128_u64[0] = 0;
      v11->n128_u64[1] = 0;
      v11[4].n128_u64[0] = 0;
      v11[4].n128_u64[1] = 0;
      v11[8].n128_u64[0] = 0;
      v11[8].n128_u64[1] = 0;
      v11[12].n128_u64[0] = 0;
      v11[12].n128_u64[1] = 0;
    }
    v6 += v10;
    ++v8;
    v5 += 2;
  }
  while (v5 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v18 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v19 = &v64[v17 + v18];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    unint64_t v22 = 4 * *(unsigned int *)(a1 + 84);
    if (v22 <= 1) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v23 <= 7)
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        uint64_t v25 = 0;
        do
        {
          v19[v25] = *(unsigned char *)(v20 + v25);
          ++v25;
        }
        while (v22 > v25);
        v19 += 64;
        v20 += v21;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
    }
    if (v23 && !((v23 - 1) >> 32))
    {
      uint64_t v26 = &v64[v17 + v18];
      uint64_t v27 = v23 & 0x3FFFFFFF8;
      if (v23 < 0x20)
      {
        uint64_t v28 = 0;
        BOOL v29 = &v64[v17 + v18];
        uint64_t v30 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v31 = (char *)(v20 + v21 * v28);
          uint64_t v32 = &v19[64 * v28];
          if ((unint64_t)(&v26[64 * v28] - v31) > 0x1F)
          {
            v32 += v27;
            int v34 = v29;
            unsigned int v35 = v30;
            uint64_t v36 = v23 & 0x3FFFFFFF8;
            do
            {
              uint64_t v37 = *v35++;
              *v34++ = v37;
              v36 -= 8;
            }
            while (v36);
            if (v23 == v27) {
              goto LABEL_27;
            }
            v31 += v27;
            int v33 = v23 & 0xFFFFFFF8;
          }
          else
          {
            int v33 = 0;
          }
          unsigned int v38 = v33 + 1;
          do
          {
            char v39 = *v31++;
            *v32++ = v39;
            BOOL v40 = v22 > v38++;
          }
          while (v40);
LABEL_27:
          ++v28;
          uint64_t v30 = (uint64_t *)((char *)v30 + v21);
          v29 += 64;
          if (v28 == v16) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
          }
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = v23 & 0x3FFFFFFE0;
      unint64_t v46 = &v64[v17 + v18];
      uint64_t v47 = &v64[v17 + 16 + v18];
      unsigned int v48 = (long long *)(v20 + 16);
      char v49 = (uint64_t *)(v20 + (v23 & 0x3FFFFFFE0));
      for (uint64_t j = &v46[v23 & 0x3FFFFFFE0]; ; j += 8)
      {
        uint64_t v51 = (char *)(v20 + v21 * v44);
        char v52 = &v19[64 * v44];
        if ((unint64_t)(&v26[64 * v44] - v51) >= 0x20)
        {
          char v56 = v48;
          long long v57 = v47;
          uint64_t v58 = v23 & 0x3FFFFFFE0;
          do
          {
            long long v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *long long v57 = v59;
            v57 += 2;
            v56 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v23 == v45) {
            goto LABEL_43;
          }
          if ((v23 & 0x18) != 0)
          {
            v52 += v27;
            unint64_t v60 = j;
            uint64_t v61 = v49;
            unint64_t v62 = v27 - (v23 & 0x3FFFFFFE0);
            do
            {
              uint64_t v63 = *v61++;
              *v60++ = v63;
              v62 -= 8;
            }
            while (v62);
            if (v23 == v27) {
              goto LABEL_43;
            }
            v51 += v27;
            int v53 = v23 & 0xFFFFFFF8;
          }
          else
          {
            v51 += v45;
            v52 += v45;
            int v53 = v23 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v53 = 0;
        }
        unsigned int v54 = v53 + 1;
        do
        {
          char v55 = *v51++;
          *v52++ = v55;
          BOOL v40 = v22 > v54++;
        }
        while (v40);
LABEL_43:
        ++v44;
        v47 += 64;
        unsigned int v48 = (long long *)((char *)v48 + v21);
        char v49 = (uint64_t *)((char *)v49 + v21);
        if (v44 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
        }
      }
    }
    for (uint64_t k = 0; k != v16; ++k)
    {
      uint64_t v42 = 0;
      do
      {
        v19[v42] = *(unsigned char *)(v20 + v42);
        ++v42;
      }
      while (v22 > v42);
      v19 += 64;
      v20 += v21;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v7 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock(v51, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v3 + 208) + 52), a2);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v6 = 16 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = (char *)v51 + v5 + v6;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v11) {
    BOOL v12 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = (char *)v51 + v5 + v6;
    uint64_t v17 = v11 & 0xFFFFFFFF0;
    if (v11 < 0x20)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (char *)v51 + v5 + v6;
      uint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v21 = (char *)(v8 + v9 * v18);
        unint64_t v22 = &v7[256 * v18];
        if ((unint64_t)(&v16[256 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          unint64_t v24 = v19;
          uint64_t v25 = v20;
          uint64_t v26 = v11 & 0xFFFFFFFF0;
          do
          {
            uint64_t v27 = *v25++;
            *v24++ = v27;
            v26 -= 8;
          }
          while (v26);
          if (v11 == v17) {
            goto LABEL_17;
          }
          v21 += v17;
          int v23 = v11 & 0xFFFFFFF0;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v10 > v28++;
        }
        while (v30);
LABEL_17:
        ++v18;
        uint64_t v20 = (uint64_t *)((char *)v20 + v9);
        v19 += 256;
        if (v18 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v11 & 0xFFFFFFFE0;
    int v33 = (char *)v51 + v5 + v6;
    int v34 = (char *)&v51[1] + v5 + v6;
    unsigned int v35 = (long long *)(v8 + 16);
    uint64_t v36 = (uint64_t *)(v8 + (v11 & 0xFFFFFFFE0));
    for (uint64_t i = &v33[v11 & 0xFFFFFFFE0]; ; i += 256)
    {
      unsigned int v38 = (char *)(v8 + v9 * v31);
      char v39 = &v7[256 * v31];
      if ((unint64_t)(&v16[256 * v31] - v38) >= 0x20)
      {
        BOOL v41 = v35;
        uint64_t v42 = v34;
        uint64_t v43 = v11 & 0xFFFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *uint64_t v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v11 == v32) {
          goto LABEL_28;
        }
        if ((v11 & 0x10) != 0)
        {
          v39 += v17;
          uint64_t v45 = i;
          unint64_t v46 = v36;
          unint64_t v47 = v17 - (v11 & 0xFFFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)uint64_t v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v11 == v17) {
            goto LABEL_28;
          }
          v38 += v17;
          int v40 = v11 & 0xFFFFFFF0;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v49 = v40 + 1;
      do
      {
        char v50 = *v38++;
        *v39++ = v50;
        BOOL v30 = v10 > v49++;
      }
      while (v30);
LABEL_28:
      ++v31;
      v34 += 256;
      unsigned int v35 = (long long *)((char *)v35 + v9);
      uint64_t v36 = (uint64_t *)((char *)v36 + v9);
      if (v31 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v4; ++j)
  {
    uint64_t v14 = 0;
    do
    {
      v7[v14] = *(unsigned char *)(v8 + v14);
      ++v14;
    }
    while (v10 > v14);
    v7 += 256;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v51, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v3 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  int v8 = *(_DWORD *)(*(void *)(v6 + 208) + 52);
  do
  {
    unint64_t v10 = &v64[512
             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v4 + 1]
             + 32
             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v4]];
    unsigned int v11 = *v7;
    if (*v7)
    {
      if (v11 < 0xF0)
      {
        if (v11 == 127)
        {
          a2 = *(int32x4_t *)v5;
          a3 = *(int32x4_t *)(v5 + 16);
          long long v12 = *(_OWORD *)(v5 + 32);
          long long v13 = *(_OWORD *)(v5 + 48);
          long long v14 = *(_OWORD *)(v5 + 80);
          long long v15 = *(_OWORD *)(v5 + 96);
          long long v16 = *(_OWORD *)(v5 + 112);
          long long v17 = *(_OWORD *)(v5 + 64);
          *(_OWORD *)unint64_t v10 = *(_OWORD *)v5;
          *((_OWORD *)v10 + 1) = v12;
          *((int32x4_t *)v10 + 8) = a3;
          *((_OWORD *)v10 + 9) = v13;
          *((_OWORD *)v10 + 16) = v17;
          *((_OWORD *)v10 + 17) = v15;
          *((_OWORD *)v10 + 24) = v14;
          *((_OWORD *)v10 + 25) = v16;
          uint64_t v9 = 128;
        }
        else if (v11 == 3)
        {
          a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
          *(int32x4_t *)unint64_t v10 = a2;
          *((int32x4_t *)v10 + 1) = a2;
          *((int32x4_t *)v10 + 8) = a2;
          *((int32x4_t *)v10 + 9) = a2;
          *((int32x4_t *)v10 + 16) = a2;
          *((int32x4_t *)v10 + 17) = a2;
          *((int32x4_t *)v10 + 24) = a2;
          *((int32x4_t *)v10 + 25) = a2;
          uint64_t v9 = 4;
        }
        else
        {
          uint64_t v9 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)v10, 128, v5, v11, a2, a3);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)v10, 128, v5, v11, v8);
        uint64_t v9 = 64;
      }
    }
    else
    {
      uint64_t v9 = 0;
      a2 = 0uLL;
      *(_OWORD *)unint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 8) = 0u;
      *((_OWORD *)v10 + 9) = 0u;
      *((_OWORD *)v10 + 16) = 0u;
      *((_OWORD *)v10 + 17) = 0u;
      *((_OWORD *)v10 + 24) = 0u;
      *((_OWORD *)v10 + 25) = 0u;
    }
    v5 += v9;
    ++v7;
    v4 += 2;
  }
  while (v4 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v20 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v21 = &v64[v19 + v20];
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 8 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      uint64_t v26 = &v64[v19 + v20];
      uint64_t v27 = v25 & 0x7FFFFFFF8;
      if (v25 < 0x20)
      {
        uint64_t v28 = 0;
        char v29 = &v64[v19 + v20];
        BOOL v30 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v31 = (char *)(v22 + v23 * v28);
          uint64_t v32 = &v21[128 * v28];
          if ((unint64_t)(&v26[128 * v28] - v31) > 0x1F)
          {
            v32 += v27;
            int v34 = v29;
            unsigned int v35 = v30;
            uint64_t v36 = v25 & 0x7FFFFFFF8;
            do
            {
              uint64_t v37 = *v35++;
              *v34++ = v37;
              v36 -= 8;
            }
            while (v36);
            if (v25 == v27) {
              goto LABEL_21;
            }
            v31 += v27;
            int v33 = v25 & 0xFFFFFFF8;
          }
          else
          {
            int v33 = 0;
          }
          unsigned int v38 = v33 + 1;
          do
          {
            char v39 = *v31++;
            *v32++ = v39;
            BOOL v40 = v24 > v38++;
          }
          while (v40);
LABEL_21:
          ++v28;
          BOOL v30 = (uint64_t *)((char *)v30 + v23);
          v29 += 128;
          if (v28 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
          }
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = v25 & 0x7FFFFFFE0;
      unint64_t v46 = &v64[v19 + v20];
      unint64_t v47 = &v64[v19 + 16 + v20];
      uint64_t v48 = (long long *)(v22 + 16);
      unsigned int v49 = (uint64_t *)(v22 + (v25 & 0x7FFFFFFE0));
      for (uint64_t i = &v46[v25 & 0x7FFFFFFE0]; ; i += 16)
      {
        uint64_t v51 = (char *)(v22 + v23 * v44);
        uint64_t v52 = &v21[128 * v44];
        if ((unint64_t)(&v26[128 * v44] - v51) >= 0x20)
        {
          char v56 = v48;
          long long v57 = v47;
          uint64_t v58 = v25 & 0x7FFFFFFE0;
          do
          {
            long long v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *long long v57 = v59;
            v57 += 2;
            v56 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v25 == v45) {
            goto LABEL_37;
          }
          if ((v25 & 0x18) != 0)
          {
            v52 += v27;
            unint64_t v60 = i;
            uint64_t v61 = v49;
            unint64_t v62 = v27 - (v25 & 0x7FFFFFFE0);
            do
            {
              uint64_t v63 = *v61++;
              *v60++ = v63;
              v62 -= 8;
            }
            while (v62);
            if (v25 == v27) {
              goto LABEL_37;
            }
            v51 += v27;
            int v53 = v25 & 0xFFFFFFF8;
          }
          else
          {
            v51 += v45;
            v52 += v45;
            int v53 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v53 = 0;
        }
        unsigned int v54 = v53 + 1;
        do
        {
          char v55 = *v51++;
          *v52++ = v55;
          BOOL v40 = v24 > v54++;
        }
        while (v40);
LABEL_37:
        ++v44;
        v47 += 128;
        uint64_t v48 = (long long *)((char *)v48 + v23);
        unsigned int v49 = (uint64_t *)((char *)v49 + v23);
        if (v44 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
        }
      }
    }
    for (uint64_t j = 0; j != v18; ++j)
    {
      uint64_t v42 = 0;
      do
      {
        v21[v42] = *(unsigned char *)(v22 + v42);
        ++v42;
      }
      while (v24 > v42);
      v21 += 128;
      v22 += v23;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    long long v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      unint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        unint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    uint64_t v32 = &v50[v4 + v5];
    int v33 = &v50[v4 + 16 + v5];
    int v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unsigned int v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        uint64_t v42 = v34;
        uint64_t v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *uint64_t v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          unint64_t v46 = i;
          unint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *v46++ = v49;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      int v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v7 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v10 = *(unsigned char **)(a1 + 48);
  int v11 = *(_DWORD *)(*(void *)(v9 + 208) + 52);
  do
  {
    uint64_t v13 = (__n128 *)&v64[256
                       * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v7 + 1]
                       + 16
                       * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v7]];
    unsigned int v14 = *v10;
    if (*v10)
    {
      if (v14 < 0xF0)
      {
        if (v14 == 63)
        {
          int64x2_t v15 = *(int64x2_t *)v8;
          a3 = *(int64x2_t *)(v8 + 16);
          uint64_t v16 = (const double *)(v8 + 32);
          *(float64x2x2_t *)a4.n128_u64 = vld2q_f64(v16);
          a6 = (__n128)vzip1q_s64(*(int64x2_t *)v8, a3);
          *uint64_t v13 = a6;
          a2 = (__n128)vzip2q_s64(v15, a3);
          v13[4] = a2;
          v13[8] = a4;
          v13[12] = a5;
          uint64_t v12 = 64;
        }
        else if (v14 == 1)
        {
          a2 = (__n128)vld1q_dup_s16((const __int16 *)v8);
          *uint64_t v13 = a2;
          v13[4] = a2;
          v13[8] = a2;
          v13[12] = a2;
          uint64_t v12 = 2;
        }
        else
        {
          uint64_t v12 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int64x2_t *)v13, 64, v8, v14, a2.n128_f64[0], *(double *)a3.i64, a4.n128_f64[0], (int8x8_t)a5.n128_u64[0]);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__int16 *)v13, 64, v8, v14, v11);
        uint64_t v12 = 32;
      }
    }
    else
    {
      uint64_t v12 = 0;
      v13->n128_u64[0] = 0;
      v13->n128_u64[1] = 0;
      v13[4].n128_u64[0] = 0;
      v13[4].n128_u64[1] = 0;
      v13[8].n128_u64[0] = 0;
      v13[8].n128_u64[1] = 0;
      v13[12].n128_u64[0] = 0;
      v13[12].n128_u64[1] = 0;
    }
    v8 += v12;
    ++v10;
    v7 += 2;
  }
  while (v7 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v18 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v19 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v20 = &v64[v18 + v19];
    uint64_t v21 = *(int64x2_t **)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    unint64_t v23 = 4 * *(unsigned int *)(a1 + 84);
    if (v23 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v24 <= 7)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v26 = 0;
        do
        {
          v20[v26] = v21->i8[v26];
          ++v26;
        }
        while (v23 > v26);
        v20 += 64;
        uint64_t v21 = (int64x2_t *)((char *)v21 + v22);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, a4.n128_f64[0], a5.n128_f64[0], (int16x4_t)a6.n128_u64[0]);
    }
    if (v24 && !((v24 - 1) >> 32))
    {
      unsigned int v27 = &v64[v18 + v19];
      uint64_t v28 = v24 & 0x3FFFFFFF8;
      if (v24 < 0x20)
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t *)&v64[v18 + v19];
        uint64_t v31 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v32 = &v21->i8[v22 * v29];
          int v33 = &v20[64 * v29];
          if ((unint64_t)(&v27[64 * v29] - v32) > 0x1F)
          {
            v33 += v28;
            unsigned int v35 = v30;
            uint64_t v36 = v31;
            uint64_t v37 = v24 & 0x3FFFFFFF8;
            do
            {
              unint64_t v38 = *v36++;
              a2.n128_u64[0] = v38;
              *v35++ = v38;
              v37 -= 8;
            }
            while (v37);
            if (v24 == v28) {
              goto LABEL_27;
            }
            v32 += v28;
            int v34 = v24 & 0xFFFFFFF8;
          }
          else
          {
            int v34 = 0;
          }
          unsigned int v39 = v34 + 1;
          do
          {
            char v40 = *v32++;
            *v33++ = v40;
            BOOL v41 = v23 > v39++;
          }
          while (v41);
LABEL_27:
          ++v29;
          uint64_t v31 = (unint64_t *)((char *)v31 + v22);
          v30 += 8;
          if (v29 == v17) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, a4.n128_f64[0], a5.n128_f64[0], (int16x4_t)a6.n128_u64[0]);
          }
        }
      }
      uint64_t v45 = 0;
      uint64_t v46 = v24 & 0x3FFFFFFE0;
      unint64_t v47 = &v64[v18 + v19];
      unint64_t v48 = (__n128 *)&v64[v18 + 16 + v19];
      uint64_t v49 = v21 + 1;
      char v50 = (unint64_t *)((char *)v21->u64 + (v24 & 0x3FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v47[v24 & 0x3FFFFFFE0]; ; j += 8)
      {
        uint64_t v52 = &v21->i8[v22 * v45];
        int v53 = &v20[64 * v45];
        if ((unint64_t)(&v27[64 * v45] - v52) >= 0x20)
        {
          long long v57 = v49;
          uint64_t v58 = v48;
          uint64_t v59 = v24 & 0x3FFFFFFE0;
          do
          {
            a2 = (__n128)v57[-1];
            a3 = *v57;
            v58[-1] = a2;
            __n128 *v58 = (__n128)a3;
            v58 += 2;
            v57 += 2;
            v59 -= 32;
          }
          while (v59);
          if (v24 == v46) {
            goto LABEL_43;
          }
          if ((v24 & 0x18) != 0)
          {
            v53 += v28;
            unint64_t v60 = j;
            uint64_t v61 = v50;
            unint64_t v62 = v28 - (v24 & 0x3FFFFFFE0);
            do
            {
              unint64_t v63 = *v61++;
              a2.n128_u64[0] = v63;
              *v60++ = v63;
              v62 -= 8;
            }
            while (v62);
            if (v24 == v28) {
              goto LABEL_43;
            }
            v52 += v28;
            int v54 = v24 & 0xFFFFFFF8;
          }
          else
          {
            v52 += v46;
            v53 += v46;
            int v54 = v24 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v54 = 0;
        }
        unsigned int v55 = v54 + 1;
        do
        {
          char v56 = *v52++;
          *v53++ = v56;
          BOOL v41 = v23 > v55++;
        }
        while (v41);
LABEL_43:
        ++v45;
        v48 += 4;
        uint64_t v49 = (int64x2_t *)((char *)v49 + v22);
        char v50 = (unint64_t *)((char *)v50 + v22);
        if (v45 == v17) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, a4.n128_f64[0], a5.n128_f64[0], (int16x4_t)a6.n128_u64[0]);
        }
      }
    }
    for (uint64_t k = 0; k != v17; ++k)
    {
      uint64_t v43 = 0;
      do
      {
        v20[v43] = v21->i8[v43];
        ++v43;
      }
      while (v23 > v43);
      v20 += 64;
      uint64_t v21 = (int64x2_t *)((char *)v21 + v22);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v64, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v9 + 208) + 52), a2.n128_f64[0], *(double *)a3.i64, a4.n128_f64[0], a5.n128_f64[0], (int16x4_t)a6.n128_u64[0]);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v8 = &v64[512
            * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
            + 32
            * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v9 = *v5;
    if (*v5)
    {
      if (v9 < 0xF0)
      {
        if (v9 == 127)
        {
          long long v11 = *(_OWORD *)(v3 + 16);
          long long v12 = *(_OWORD *)(v3 + 32);
          long long v13 = *(_OWORD *)(v3 + 48);
          long long v14 = *(_OWORD *)(v3 + 80);
          long long v15 = *(_OWORD *)(v3 + 96);
          long long v16 = *(_OWORD *)(v3 + 112);
          long long v17 = *(_OWORD *)(v3 + 64);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v3;
          *((_OWORD *)v8 + 1) = v12;
          *((_OWORD *)v8 + 8) = v11;
          *((_OWORD *)v8 + 9) = v13;
          *((_OWORD *)v8 + 16) = v17;
          *((_OWORD *)v8 + 17) = v15;
          *((_OWORD *)v8 + 24) = v14;
          *((_OWORD *)v8 + 25) = v16;
          uint64_t v7 = 128;
        }
        else if (v9 == 3)
        {
          float32x4_t v10 = vld1q_dup_f32((const float *)v3);
          *(float32x4_t *)uint64_t v8 = v10;
          *((float32x4_t *)v8 + 1) = v10;
          *((float32x4_t *)v8 + 8) = v10;
          *((float32x4_t *)v8 + 9) = v10;
          *((float32x4_t *)v8 + 16) = v10;
          *((float32x4_t *)v8 + 17) = v10;
          *((float32x4_t *)v8 + 24) = v10;
          *((float32x4_t *)v8 + 25) = v10;
          uint64_t v7 = 4;
        }
        else
        {
          uint64_t v7 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)v8, 128, v3, v9);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v8, 128, v3, v9, v6);
        uint64_t v7 = 64;
      }
    }
    else
    {
      uint64_t v7 = 0;
      *(_OWORD *)uint64_t v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 9) = 0u;
      *((_OWORD *)v8 + 16) = 0u;
      *((_OWORD *)v8 + 17) = 0u;
      *((_OWORD *)v8 + 24) = 0u;
      *((_OWORD *)v8 + 25) = 0u;
    }
    v3 += v7;
    ++v5;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v20 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v21 = &v64[v19 + v20];
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 8 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      uint64_t v26 = &v64[v19 + v20];
      uint64_t v27 = v25 & 0x7FFFFFFF8;
      if (v25 < 0x20)
      {
        uint64_t v28 = 0;
        uint64_t v29 = &v64[v19 + v20];
        uint64_t v30 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          uint64_t v31 = (char *)(v22 + v23 * v28);
          uint64_t v32 = &v21[128 * v28];
          if ((unint64_t)(&v26[128 * v28] - v31) > 0x1F)
          {
            v32 += v27;
            int v34 = v29;
            unsigned int v35 = v30;
            uint64_t v36 = v25 & 0x7FFFFFFF8;
            do
            {
              uint64_t v37 = *v35++;
              *v34++ = v37;
              v36 -= 8;
            }
            while (v36);
            if (v25 == v27) {
              goto LABEL_21;
            }
            v31 += v27;
            int v33 = v25 & 0xFFFFFFF8;
          }
          else
          {
            int v33 = 0;
          }
          unsigned int v38 = v33 + 1;
          do
          {
            char v39 = *v31++;
            *v32++ = v39;
            BOOL v40 = v24 > v38++;
          }
          while (v40);
LABEL_21:
          ++v28;
          uint64_t v30 = (uint64_t *)((char *)v30 + v23);
          v29 += 128;
          if (v28 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
          }
        }
      }
      uint64_t v44 = 0;
      uint64_t v45 = v25 & 0x7FFFFFFE0;
      uint64_t v46 = &v64[v19 + v20];
      unint64_t v47 = &v64[v19 + 16 + v20];
      unint64_t v48 = (long long *)(v22 + 16);
      uint64_t v49 = (uint64_t *)(v22 + (v25 & 0x7FFFFFFE0));
      for (uint64_t i = &v46[v25 & 0x7FFFFFFE0]; ; i += 16)
      {
        uint64_t v51 = (char *)(v22 + v23 * v44);
        uint64_t v52 = &v21[128 * v44];
        if ((unint64_t)(&v26[128 * v44] - v51) >= 0x20)
        {
          char v56 = v48;
          long long v57 = v47;
          uint64_t v58 = v25 & 0x7FFFFFFE0;
          do
          {
            long long v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *long long v57 = v59;
            v57 += 2;
            v56 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v25 == v45) {
            goto LABEL_37;
          }
          if ((v25 & 0x18) != 0)
          {
            v52 += v27;
            unint64_t v60 = i;
            uint64_t v61 = v49;
            unint64_t v62 = v27 - (v25 & 0x7FFFFFFE0);
            do
            {
              uint64_t v63 = *v61++;
              *v60++ = v63;
              v62 -= 8;
            }
            while (v62);
            if (v25 == v27) {
              goto LABEL_37;
            }
            v51 += v27;
            int v53 = v25 & 0xFFFFFFF8;
          }
          else
          {
            v51 += v45;
            v52 += v45;
            int v53 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v53 = 0;
        }
        unsigned int v54 = v53 + 1;
        do
        {
          char v55 = *v51++;
          *v52++ = v55;
          BOOL v40 = v24 > v54++;
        }
        while (v40);
LABEL_37:
        ++v44;
        v47 += 128;
        unint64_t v48 = (long long *)((char *)v48 + v23);
        uint64_t v49 = (uint64_t *)((char *)v49 + v23);
        if (v44 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    for (uint64_t j = 0; j != v18; ++j)
    {
      uint64_t v42 = 0;
      do
      {
        v21[v42] = *(unsigned char *)(v22 + v42);
        ++v42;
      }
      while (v24 > v42);
      v21 += 128;
      v22 += v23;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v64, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  int v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    long long v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      unint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        unint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    uint64_t v32 = &v50[v4 + v5];
    int v33 = &v50[v4 + 16 + v5];
    int v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unsigned int v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        uint64_t v42 = v34;
        uint64_t v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *uint64_t v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          uint64_t v46 = i;
          unint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *v46++ = v49;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      int v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, int32x2_t a4, double a5, double a6, double a7, int8x8_t a8)
{
  uint64_t v9 = 0;
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  long long v12 = *(unsigned char **)(a1 + 48);
  int v13 = *(_DWORD *)(*(void *)(v11 + 208) + 52);
  do
  {
    long long v15 = (int32x2_t *)&v65[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v9 + 1]
                          + 8
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v9]];
    unsigned int v16 = *v12;
    if (*v12)
    {
      if (v16 < 0xF0)
      {
        if (v16 == 31)
        {
          int32x2_t v17 = *(int32x2_t *)v10;
          a3.n128_u64[0] = *(void *)(v10 + 8);
          a4 = *(int32x2_t *)(v10 + 16);
          a5 = *(double *)(v10 + 24);
          a6 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)v10, (int32x2_t)a3.n128_u64[0]));
          *(double *)long long v15 = a6;
          v15[4] = vzip2_s32(v17, (int32x2_t)a3.n128_u64[0]);
          v15[8] = vzip1_s32(a4, *(int32x2_t *)&a5);
          a2.n128_u64[0] = (unint64_t)vzip2_s32(a4, *(int32x2_t *)&a5);
          v15[12] = (int32x2_t)a2.n128_u64[0];
          uint64_t v14 = 32;
        }
        else if (v16 == 96)
        {
          a2.n128_u64[0] = (unint64_t)vdup_lane_s8(*(int8x8_t *)v10, 0);
          *long long v15 = (int32x2_t)a2.n128_u64[0];
          v15[4] = (int32x2_t)a2.n128_u64[0];
          v15[8] = (int32x2_t)a2.n128_u64[0];
          v15[12] = (int32x2_t)a2.n128_u64[0];
          uint64_t v14 = 1;
        }
        else
        {
          uint64_t v14 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v15, 32, v10, v16);
        }
      }
      else
      {
        a2.n128_u64[0] = (unint64_t)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v15, 32, v10, v16, v13);
        uint64_t v14 = 16;
      }
    }
    else
    {
      uint64_t v14 = 0;
      *long long v15 = 0;
      v15[4] = 0;
      v15[8] = 0;
      v15[12] = 0;
    }
    v10 += v14;
    ++v12;
    v9 += 2;
  }
  while (v9 != 16);
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v19 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
    uint64_t v21 = &v65[v19 + v20];
    int v22 = *(__n128 **)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v24 = 2 * *(unsigned int *)(a1 + 84);
    if (v24 <= 1) {
      unint64_t v25 = 1;
    }
    else {
      unint64_t v25 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v25 <= 7)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v27 = 0;
        do
        {
          v21[v27] = v22->n128_u8[v27];
          ++v27;
        }
        while (v24 > v27);
        v21 += 32;
        int v22 = (__n128 *)((char *)v22 + v23);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v65, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
    }
    if (v25 && !((v25 - 1) >> 32))
    {
      char v28 = &v65[v19 + v20];
      uint64_t v29 = v25 & 0x1FFFFFFF8;
      if (v25 < 0x20)
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t *)&v65[v19 + v20];
        uint64_t v32 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          int v33 = (char *)v22 + v23 * v30;
          int v34 = &v21[32 * v30];
          if ((unint64_t)(&v28[32 * v30] - v33) > 0x1F)
          {
            v34 += v29;
            uint64_t v36 = v31;
            uint64_t v37 = v32;
            uint64_t v38 = v25 & 0x1FFFFFFF8;
            do
            {
              unint64_t v39 = *v37++;
              a2.n128_u64[0] = v39;
              *v36++ = v39;
              v38 -= 8;
            }
            while (v38);
            if (v25 == v29) {
              goto LABEL_27;
            }
            v33 += v29;
            int v35 = v25 & 0xFFFFFFF8;
          }
          else
          {
            int v35 = 0;
          }
          unsigned int v40 = v35 + 1;
          do
          {
            char v41 = *v33++;
            *v34++ = v41;
            BOOL v42 = v24 > v40++;
          }
          while (v42);
LABEL_27:
          ++v30;
          uint64_t v32 = (unint64_t *)((char *)v32 + v23);
          v31 += 4;
          if (v30 == v18) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v65, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
          }
        }
      }
      uint64_t v46 = 0;
      uint64_t v47 = v25 & 0x1FFFFFFE0;
      unint64_t v48 = &v65[v19 + v20];
      uint64_t v49 = (__n128 *)&v65[v19 + 16 + v20];
      char v50 = v22 + 1;
      uint64_t v51 = (unint64_t *)((char *)v22->n128_u64 + (v25 & 0x1FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v48[v25 & 0x1FFFFFFE0]; ; j += 4)
      {
        int v53 = (char *)v22 + v23 * v46;
        unsigned int v54 = &v21[32 * v46];
        if ((unint64_t)(&v28[32 * v46] - v53) >= 0x20)
        {
          uint64_t v58 = v50;
          long long v59 = v49;
          uint64_t v60 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v58[-1];
            a3 = *v58;
            v59[-1] = a2;
            __n128 *v59 = a3;
            v59 += 2;
            v58 += 2;
            v60 -= 32;
          }
          while (v60);
          if (v25 == v47) {
            goto LABEL_43;
          }
          if ((v25 & 0x18) != 0)
          {
            v54 += v29;
            uint64_t v61 = j;
            unint64_t v62 = v51;
            unint64_t v63 = v29 - (v25 & 0x1FFFFFFE0);
            do
            {
              unint64_t v64 = *v62++;
              a2.n128_u64[0] = v64;
              *v61++ = v64;
              v63 -= 8;
            }
            while (v63);
            if (v25 == v29) {
              goto LABEL_43;
            }
            v53 += v29;
            int v55 = v25 & 0xFFFFFFF8;
          }
          else
          {
            v53 += v47;
            v54 += v47;
            int v55 = v25 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v55 = 0;
        }
        unsigned int v56 = v55 + 1;
        do
        {
          char v57 = *v53++;
          *v54++ = v57;
          BOOL v42 = v24 > v56++;
        }
        while (v42);
LABEL_43:
        ++v46;
        v49 += 2;
        char v50 = (__n128 *)((char *)v50 + v23);
        uint64_t v51 = (unint64_t *)((char *)v51 + v23);
        if (v46 == v18) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v65, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
        }
      }
    }
    for (uint64_t k = 0; k != v18; ++k)
    {
      uint64_t v44 = 0;
      do
      {
        v21[v44] = v22->n128_u8[v44];
        ++v44;
      }
      while (v24 > v44);
      v21 += 32;
      int v22 = (__n128 *)((char *)v22 + v23);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v65, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v11 + 208) + 52), a2.n128_f64[0], a3.n128_f64[0], (int8x8_t)a4, a5, a6, a7, a8);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressMacroblock(v30, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v30, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 32 * *(unsigned int *)(a1 + 76);
  int v6 = &v30[0].i8[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 32 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 32 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (unint64_t)(v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = 0;
    unsigned int v16 = &v30[0].i8[v4 + v5];
    uint64_t v17 = v10 & 0x1FFFFFFFE0;
    uint64_t v18 = &v30[1].i8[v4 + v5];
    uint64_t v19 = (long long *)(v7 + 16);
    while (1)
    {
      uint64_t v20 = (char *)(v7 + v8 * v15);
      uint64_t v21 = &v6[256 * v15];
      if ((unint64_t)(&v16[256 * v15] - v20) >= 0x20)
      {
        uint64_t v23 = v19;
        unint64_t v24 = v18;
        uint64_t v25 = v10 & 0x1FFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *((_OWORD *)v24 - 1) = *(v23 - 1);
          *(_OWORD *)unint64_t v24 = v26;
          v24 += 32;
          v23 += 2;
          v25 -= 32;
        }
        while (v25);
        if (v10 == v17) {
          goto LABEL_16;
        }
        v20 += v17;
        v21 += v17;
        int v22 = v10 & 0xFFFFFFE0;
      }
      else
      {
        int v22 = 0;
      }
      unsigned int v27 = v22 + 1;
      do
      {
        char v28 = *v20++;
        *v21++ = v28;
      }
      while (v9 > v27++);
LABEL_16:
      ++v15;
      v18 += 256;
      uint64_t v19 = (long long *)((char *)v19 + v8);
      if (v15 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v30, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v30, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 8;
  uint64_t v5 = 16 * *(unsigned int *)(a1 + 76);
  int v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 16 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 16 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0xFFFFFFFF0;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (char *)v50 + v4 + v5;
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[256 * v17];
        if ((unint64_t)(&v15[256 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          uint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0xFFFFFFFF0;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF0;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 256;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0xFFFFFFFE0;
    uint64_t v32 = (char *)v50 + v4 + v5;
    int v33 = (char *)&v50[1] + v4 + v5;
    int v34 = (long long *)(v7 + 16);
    int v35 = (uint64_t *)(v7 + (v10 & 0xFFFFFFFE0));
    for (uint64_t i = &v32[v10 & 0xFFFFFFFE0]; ; i += 256)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[256 * v30];
      if ((unint64_t)(&v15[256 * v30] - v37) >= 0x20)
      {
        unsigned int v40 = v34;
        char v41 = v33;
        uint64_t v42 = v10 & 0xFFFFFFFE0;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          _OWORD *v41 = v43;
          v41 += 2;
          v40 += 2;
          v42 -= 32;
        }
        while (v42);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x10) != 0)
        {
          v38 += v16;
          uint64_t v44 = i;
          long long v45 = v35;
          unint64_t v46 = v16 - (v10 & 0xFFFFFFFE0);
          do
          {
            uint64_t v47 = *v45++;
            *(void *)uint64_t v44 = v47;
            v44 += 8;
            v46 -= 8;
          }
          while (v46);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF0;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v48 = v39 + 1;
      do
      {
        char v49 = *v37++;
        *v38++ = v49;
        BOOL v29 = v9 > v48++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 256;
      int v34 = (long long *)((char *)v34 + v8);
      int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 256;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 256, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    uint64_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      int v22 = &v54[v6 + v7];
      uint64_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v24 = (char *)(v9 + v10 * v21);
        uint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          unsigned int v27 = v22;
          char v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        uint64_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    uint64_t v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      char v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        unint64_t v46 = v38;
        uint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          char v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    uint64_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      int v22 = &v54[v6 + v7];
      uint64_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v24 = (char *)(v9 + v10 * v21);
        uint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          unsigned int v27 = v22;
          char v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        uint64_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    uint64_t v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      char v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        unint64_t v46 = v38;
        uint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          char v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    uint64_t v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      int v22 = &v54[v6 + v7];
      uint64_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v24 = (char *)(v9 + v10 * v21);
        uint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          unsigned int v27 = v22;
          char v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        uint64_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    uint64_t v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    uint64_t v38 = (long long *)(v9 + 16);
    int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      char v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        unint64_t v46 = v38;
        uint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          char v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v76, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v6 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v7 = &v76[0].i8[v5 + v6];
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
    if (v10 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v11 <= 7)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v7[v13] = *(unsigned char *)(v8 + v13);
          ++v13;
        }
        while (v10 > v13);
        v7 += 64;
        v8 += v9;
      }
      goto LABEL_20;
    }
    if (v11) {
      BOOL v14 = (v11 - 1) >> 32 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14)
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        uint64_t v16 = 0;
        do
        {
          v7[v16] = *(unsigned char *)(v8 + v16);
          ++v16;
        }
        while (v10 > v16);
        v7 += 64;
        v8 += v9;
      }
      goto LABEL_20;
    }
    char v41 = &v76[0].i8[v5 + v6];
    uint64_t v42 = v11 & 0x3FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v43 = 0;
      unsigned int v44 = &v76[0].i8[v5 + v6];
      char v45 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v46 = (char *)(v8 + v9 * v43);
        uint64_t v47 = &v7[64 * v43];
        if ((unint64_t)(&v41[64 * v43] - v46) > 0x1F)
        {
          v47 += v42;
          long long v49 = v44;
          char v50 = v45;
          uint64_t v51 = v11 & 0x3FFFFFFF8;
          do
          {
            uint64_t v52 = *v50++;
            *(void *)long long v49 = v52;
            v49 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v11 == v42) {
            goto LABEL_36;
          }
          v46 += v42;
          int v48 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v48 = 0;
        }
        unsigned int v53 = v48 + 1;
        do
        {
          char v54 = *v46++;
          *v47++ = v54;
          BOOL v55 = v10 > v53++;
        }
        while (v55);
LABEL_36:
        ++v43;
        char v45 = (uint64_t *)((char *)v45 + v9);
        v44 += 64;
        if (v43 == v4) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v11 & 0x3FFFFFFE0;
    uint64_t v58 = &v76[0].i8[v5 + v6];
    long long v59 = &v76[1].i8[v5 + v6];
    uint64_t v60 = (long long *)(v8 + 16);
    uint64_t v61 = (uint64_t *)(v8 + (v11 & 0x3FFFFFFE0));
    unint64_t v62 = &v58[v11 & 0x3FFFFFFE0];
    do
    {
      unint64_t v63 = (char *)(v8 + v9 * v56);
      unint64_t v64 = &v7[64 * v56];
      if ((unint64_t)(&v41[64 * v56] - v63) >= 0x20)
      {
        unsigned int v68 = v60;
        uint64_t v69 = v59;
        uint64_t v70 = v11 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *((_OWORD *)v69 - 1) = *(v68 - 1);
          *(_OWORD *)uint64_t v69 = v71;
          v69 += 32;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v11 == v57) {
          goto LABEL_47;
        }
        if ((v11 & 0x18) != 0)
        {
          v64 += v42;
          unint64_t v72 = v62;
          uint64_t v73 = v61;
          unint64_t v74 = v42 - (v11 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *(void *)unint64_t v72 = v75;
            v72 += 8;
            v74 -= 8;
          }
          while (v74);
          if (v11 == v42) {
            goto LABEL_47;
          }
          v63 += v42;
          int v65 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v55 = v10 > v66++;
      }
      while (v55);
LABEL_47:
      ++v56;
      v59 += 64;
      uint64_t v60 = (long long *)((char *)v60 + v9);
      uint64_t v61 = (uint64_t *)((char *)v61 + v9);
      v62 += 64;
    }
    while (v56 != v4);
  }
LABEL_20:
  uint64_t v17 = 0;
  uint64_t v18 = *(int64x2_t **)(a1 + 40);
  uint64_t v19 = *(char **)(a1 + 48);
  int v20 = *(unsigned __int8 *)(a1 + 88);
  int v21 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v36 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v17 + 1];
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v17];
    LODWORD(result) = (v20 - 8 * v37) & ~((v20 - 8 * (int)v37) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v39 = (v21 - 4 * v36) & ~((v21 - 4 * (int)v36) >> 31);
    if (v39 >= 4) {
      unsigned int v39 = 4;
    }
    if (result) {
      BOOL v40 = v39 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (v40)
    {
      char v35 = 0;
    }
    else
    {
      int v22 = &v76[16 * v36 + 2 * v37];
      int64x2_t v23 = v22[1];
      int64x2_t v24 = v22[4];
      int64x2_t v25 = v22[5];
      int64x2_t v26 = vzip1q_s64(*v22, v24);
      int64x2_t v27 = vzip2q_s64(*v22, v24);
      int64x2_t v28 = vzip1q_s64(v23, v25);
      int64x2_t v29 = vzip2q_s64(v23, v25);
      int64x2_t v30 = v22[8];
      int64x2_t v31 = v22[9];
      v22 += 12;
      int64x2_t v32 = v22[1];
      int64x2_t v33 = vzip1q_s64(v30, *v22);
      int64x2_t v34 = vzip2q_s64(v30, *v22);
      *uint64_t v18 = v26;
      v18[1] = v27;
      v18[2] = v33;
      v18[3] = v34;
      v18[4] = v28;
      v18[5] = v29;
      v18[6] = vzip1q_s64(v31, v32);
      v18[7] = vzip2q_s64(v31, v32);
      v18 += 8;
      char v35 = 127;
    }
    *v19++ = v35;
    v17 += 2;
  }
  while (v17 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v53, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v6 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v53[0].i8[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v11 <= 7)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v13 = 0;
      do
      {
        v7[v13] = *(unsigned char *)(v8 + v13);
        ++v13;
      }
      while (v10 > v13);
      v7 += 64;
      v8 += v9;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v11) {
    BOOL v14 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v18 = &v53[0].i8[v5 + v6];
    uint64_t v19 = v11 & 0x3FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v20 = 0;
      int v21 = &v53[0].i8[v5 + v6];
      int v22 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v23 = (char *)(v8 + v9 * v20);
        int64x2_t v24 = &v7[64 * v20];
        if ((unint64_t)(&v18[64 * v20] - v23) > 0x1F)
        {
          v24 += v19;
          int64x2_t v26 = v21;
          int64x2_t v27 = v22;
          uint64_t v28 = v11 & 0x3FFFFFFF8;
          do
          {
            uint64_t v29 = *v27++;
            *(void *)int64x2_t v26 = v29;
            v26 += 8;
            v28 -= 8;
          }
          while (v28);
          if (v11 == v19) {
            goto LABEL_23;
          }
          v23 += v19;
          int v25 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v25 = 0;
        }
        unsigned int v30 = v25 + 1;
        do
        {
          char v31 = *v23++;
          *v24++ = v31;
          BOOL v32 = v10 > v30++;
        }
        while (v32);
LABEL_23:
        ++v20;
        int v22 = (uint64_t *)((char *)v22 + v9);
        v21 += 64;
        if (v20 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v33 = 0;
    uint64_t v34 = v11 & 0x3FFFFFFE0;
    char v35 = &v53[0].i8[v5 + v6];
    uint64_t v36 = &v53[1].i8[v5 + v6];
    uint64_t v37 = (long long *)(v8 + 16);
    uint64_t v38 = (uint64_t *)(v8 + (v11 & 0x3FFFFFFE0));
    for (uint64_t j = &v35[v11 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v40 = (char *)(v8 + v9 * v33);
      char v41 = &v7[64 * v33];
      if ((unint64_t)(&v18[64 * v33] - v40) >= 0x20)
      {
        char v45 = v37;
        unint64_t v46 = v36;
        uint64_t v47 = v11 & 0x3FFFFFFE0;
        do
        {
          long long v48 = *v45;
          *((_OWORD *)v46 - 1) = *(v45 - 1);
          *(_OWORD *)unint64_t v46 = v48;
          v46 += 32;
          v45 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v11 == v34) {
          goto LABEL_34;
        }
        if ((v11 & 0x18) != 0)
        {
          v41 += v19;
          long long v49 = j;
          char v50 = v38;
          unint64_t v51 = v19 - (v11 & 0x3FFFFFFE0);
          do
          {
            uint64_t v52 = *v50++;
            *(void *)long long v49 = v52;
            v49 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v11 == v19) {
            goto LABEL_34;
          }
          v40 += v19;
          int v42 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v40 += v34;
          v41 += v34;
          int v42 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v42 = 0;
      }
      unsigned int v43 = v42 + 1;
      do
      {
        char v44 = *v40++;
        *v41++ = v44;
        BOOL v32 = v10 > v43++;
      }
      while (v32);
LABEL_34:
      ++v33;
      v36 += 64;
      uint64_t v37 = (long long *)((char *)v37 + v9);
      uint64_t v38 = (uint64_t *)((char *)v38 + v9);
      if (v33 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v4; ++k)
  {
    uint64_t v16 = 0;
    do
    {
      v7[v16] = *(unsigned char *)(v8 + v16);
      ++v16;
    }
    while (v10 > v16);
    v7 += 64;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = (char *)v54 + v6 + v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    uint64_t v19 = (char *)v54 + v6 + v7;
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      int v22 = (char *)v54 + v6 + v7;
      int64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v24 = (char *)(v9 + v10 * v21);
        int v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          int64x2_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        int64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    uint64_t v36 = (char *)v54 + v6 + v7;
    uint64_t v37 = (char *)&v54[1] + v6 + v7;
    uint64_t v38 = (long long *)(v9 + 16);
    unsigned int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 64)
    {
      char v41 = (char *)(v9 + v10 * v34);
      int v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        unint64_t v46 = v38;
        uint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          char v50 = j;
          unint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)char v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      unsigned int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = (char *)v54 + v6 + v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    uint64_t v19 = (char *)v54 + v6 + v7;
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      int v22 = (char *)v54 + v6 + v7;
      int64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v24 = (char *)(v9 + v10 * v21);
        int v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          int64x2_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        int64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    uint64_t v36 = (char *)v54 + v6 + v7;
    uint64_t v37 = (char *)&v54[1] + v6 + v7;
    uint64_t v38 = (long long *)(v9 + 16);
    unsigned int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 64)
    {
      char v41 = (char *)(v9 + v10 * v34);
      int v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        unint64_t v46 = v38;
        uint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          char v50 = j;
          unint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)char v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      unsigned int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v8 = (char *)v54 + v6 + v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    uint64_t v19 = (char *)v54 + v6 + v7;
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      int v22 = (char *)v54 + v6 + v7;
      int64x2_t v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v24 = (char *)(v9 + v10 * v21);
        int v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          int64x2_t v27 = v22;
          uint64_t v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        int64x2_t v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    uint64_t v36 = (char *)v54 + v6 + v7;
    uint64_t v37 = (char *)&v54[1] + v6 + v7;
    uint64_t v38 = (long long *)(v9 + 16);
    unsigned int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 64)
    {
      char v41 = (char *)(v9 + v10 * v34);
      int v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        unint64_t v46 = v38;
        uint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          char v50 = j;
          unint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *(void *)char v50 = v53;
            v50 += 8;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      uint64_t v38 = (long long *)((char *)v38 + v10);
      unsigned int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v76, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v6 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v7 = &v76[0].i8[v5 + v6];
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
    if (v10 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v11 <= 7)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v7[v13] = *(unsigned char *)(v8 + v13);
          ++v13;
        }
        while (v10 > v13);
        v7 += 64;
        v8 += v9;
      }
      goto LABEL_20;
    }
    if (v11) {
      BOOL v14 = (v11 - 1) >> 32 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14)
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        uint64_t v16 = 0;
        do
        {
          v7[v16] = *(unsigned char *)(v8 + v16);
          ++v16;
        }
        while (v10 > v16);
        v7 += 64;
        v8 += v9;
      }
      goto LABEL_20;
    }
    char v41 = &v76[0].i8[v5 + v6];
    uint64_t v42 = v11 & 0x3FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v43 = 0;
      unsigned int v44 = &v76[0].i8[v5 + v6];
      char v45 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v46 = (char *)(v8 + v9 * v43);
        uint64_t v47 = &v7[64 * v43];
        if ((unint64_t)(&v41[64 * v43] - v46) > 0x1F)
        {
          v47 += v42;
          long long v49 = v44;
          char v50 = v45;
          uint64_t v51 = v11 & 0x3FFFFFFF8;
          do
          {
            uint64_t v52 = *v50++;
            *(void *)long long v49 = v52;
            v49 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v11 == v42) {
            goto LABEL_36;
          }
          v46 += v42;
          int v48 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v48 = 0;
        }
        unsigned int v53 = v48 + 1;
        do
        {
          char v54 = *v46++;
          *v47++ = v54;
          BOOL v55 = v10 > v53++;
        }
        while (v55);
LABEL_36:
        ++v43;
        char v45 = (uint64_t *)((char *)v45 + v9);
        v44 += 64;
        if (v43 == v4) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v11 & 0x3FFFFFFE0;
    uint64_t v58 = &v76[0].i8[v5 + v6];
    long long v59 = &v76[1].i8[v5 + v6];
    uint64_t v60 = (long long *)(v8 + 16);
    uint64_t v61 = (uint64_t *)(v8 + (v11 & 0x3FFFFFFE0));
    unint64_t v62 = &v58[v11 & 0x3FFFFFFE0];
    do
    {
      unint64_t v63 = (char *)(v8 + v9 * v56);
      unint64_t v64 = &v7[64 * v56];
      if ((unint64_t)(&v41[64 * v56] - v63) >= 0x20)
      {
        unsigned int v68 = v60;
        uint64_t v69 = v59;
        uint64_t v70 = v11 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *((_OWORD *)v69 - 1) = *(v68 - 1);
          *(_OWORD *)uint64_t v69 = v71;
          v69 += 32;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v11 == v57) {
          goto LABEL_47;
        }
        if ((v11 & 0x18) != 0)
        {
          v64 += v42;
          unint64_t v72 = v62;
          uint64_t v73 = v61;
          unint64_t v74 = v42 - (v11 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *(void *)unint64_t v72 = v75;
            v72 += 8;
            v74 -= 8;
          }
          while (v74);
          if (v11 == v42) {
            goto LABEL_47;
          }
          v63 += v42;
          int v65 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v55 = v10 > v66++;
      }
      while (v55);
LABEL_47:
      ++v56;
      v59 += 64;
      uint64_t v60 = (long long *)((char *)v60 + v9);
      uint64_t v61 = (uint64_t *)((char *)v61 + v9);
      v62 += 64;
    }
    while (v56 != v4);
  }
LABEL_20:
  uint64_t v17 = 0;
  uint64_t v18 = *(int64x2_t **)(a1 + 40);
  uint64_t v19 = *(char **)(a1 + 48);
  int v20 = *(unsigned __int8 *)(a1 + 88);
  int v21 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v36 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v17 + 1];
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v17];
    LODWORD(result) = (v20 - 8 * v37) & ~((v20 - 8 * (int)v37) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v39 = (v21 - 4 * v36) & ~((v21 - 4 * (int)v36) >> 31);
    if (v39 >= 4) {
      unsigned int v39 = 4;
    }
    if (result) {
      BOOL v40 = v39 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (v40)
    {
      char v35 = 0;
    }
    else
    {
      int v22 = &v76[16 * v36 + 2 * v37];
      int64x2_t v23 = v22[1];
      int64x2_t v24 = v22[4];
      int64x2_t v25 = v22[5];
      int64x2_t v26 = vzip1q_s64(*v22, v24);
      int64x2_t v27 = vzip2q_s64(*v22, v24);
      int64x2_t v28 = vzip1q_s64(v23, v25);
      int64x2_t v29 = vzip2q_s64(v23, v25);
      int64x2_t v30 = v22[8];
      int64x2_t v31 = v22[9];
      v22 += 12;
      int64x2_t v32 = v22[1];
      int64x2_t v33 = vzip1q_s64(v30, *v22);
      int64x2_t v34 = vzip2q_s64(v30, *v22);
      *uint64_t v18 = v26;
      v18[1] = v27;
      v18[2] = v33;
      v18[3] = v34;
      v18[4] = v28;
      v18[5] = v29;
      v18[6] = vzip1q_s64(v31, v32);
      v18[7] = vzip2q_s64(v31, v32);
      v18 += 8;
      char v35 = 127;
    }
    *v19++ = v35;
    v17 += 2;
  }
  while (v17 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v53, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v6 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v53[0].i8[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v11 <= 7)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v13 = 0;
      do
      {
        v7[v13] = *(unsigned char *)(v8 + v13);
        ++v13;
      }
      while (v10 > v13);
      v7 += 64;
      v8 += v9;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v11) {
    BOOL v14 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v18 = &v53[0].i8[v5 + v6];
    uint64_t v19 = v11 & 0x3FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v20 = 0;
      int v21 = &v53[0].i8[v5 + v6];
      int v22 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v23 = (char *)(v8 + v9 * v20);
        int64x2_t v24 = &v7[64 * v20];
        if ((unint64_t)(&v18[64 * v20] - v23) > 0x1F)
        {
          v24 += v19;
          int64x2_t v26 = v21;
          int64x2_t v27 = v22;
          uint64_t v28 = v11 & 0x3FFFFFFF8;
          do
          {
            uint64_t v29 = *v27++;
            *(void *)int64x2_t v26 = v29;
            v26 += 8;
            v28 -= 8;
          }
          while (v28);
          if (v11 == v19) {
            goto LABEL_23;
          }
          v23 += v19;
          int v25 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v25 = 0;
        }
        unsigned int v30 = v25 + 1;
        do
        {
          char v31 = *v23++;
          *v24++ = v31;
          BOOL v32 = v10 > v30++;
        }
        while (v32);
LABEL_23:
        ++v20;
        int v22 = (uint64_t *)((char *)v22 + v9);
        v21 += 64;
        if (v20 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v33 = 0;
    uint64_t v34 = v11 & 0x3FFFFFFE0;
    char v35 = &v53[0].i8[v5 + v6];
    uint64_t v36 = &v53[1].i8[v5 + v6];
    uint64_t v37 = (long long *)(v8 + 16);
    uint64_t v38 = (uint64_t *)(v8 + (v11 & 0x3FFFFFFE0));
    for (uint64_t j = &v35[v11 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v40 = (char *)(v8 + v9 * v33);
      char v41 = &v7[64 * v33];
      if ((unint64_t)(&v18[64 * v33] - v40) >= 0x20)
      {
        char v45 = v37;
        unint64_t v46 = v36;
        uint64_t v47 = v11 & 0x3FFFFFFE0;
        do
        {
          long long v48 = *v45;
          *((_OWORD *)v46 - 1) = *(v45 - 1);
          *(_OWORD *)unint64_t v46 = v48;
          v46 += 32;
          v45 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v11 == v34) {
          goto LABEL_34;
        }
        if ((v11 & 0x18) != 0)
        {
          v41 += v19;
          long long v49 = j;
          char v50 = v38;
          unint64_t v51 = v19 - (v11 & 0x3FFFFFFE0);
          do
          {
            uint64_t v52 = *v50++;
            *(void *)long long v49 = v52;
            v49 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v11 == v19) {
            goto LABEL_34;
          }
          v40 += v19;
          int v42 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v40 += v34;
          v41 += v34;
          int v42 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v42 = 0;
      }
      unsigned int v43 = v42 + 1;
      do
      {
        char v44 = *v40++;
        *v41++ = v44;
        BOOL v32 = v10 > v43++;
      }
      while (v32);
LABEL_34:
      ++v33;
      v36 += 64;
      uint64_t v37 = (long long *)((char *)v37 + v9);
      uint64_t v38 = (uint64_t *)((char *)v38 + v9);
      if (v33 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v4; ++k)
  {
    uint64_t v16 = 0;
    do
    {
      v7[v16] = *(unsigned char *)(v8 + v16);
      ++v16;
    }
    while (v10 > v16);
    v7 += 64;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(int16x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        int v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          int64x2_t v23 = v18;
          int64x2_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    BOOL v32 = &v50[v4 + v5];
    uint64_t v33 = &v50[v4 + 16 + v5];
    uint64_t v34 = (long long *)(v7 + 16);
    char v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        int v42 = v34;
        unsigned int v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *unsigned int v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          unint64_t v46 = i;
          uint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *v46++ = v49;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      uint64_t v34 = (long long *)((char *)v34 + v8);
      char v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        int v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          int64x2_t v23 = v18;
          int64x2_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    BOOL v32 = &v50[v4 + v5];
    uint64_t v33 = &v50[v4 + 16 + v5];
    uint64_t v34 = (long long *)(v7 + 16);
    char v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        int v42 = v34;
        unsigned int v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *unsigned int v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          unint64_t v46 = i;
          uint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *v46++ = v49;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      uint64_t v34 = (long long *)((char *)v34 + v8);
      char v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = &v50[v4 + v5];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    BOOL v15 = &v50[v4 + v5];
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v50[v4 + v5];
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v20 = (char *)(v7 + v8 * v17);
        int v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          int64x2_t v23 = v18;
          int64x2_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    BOOL v32 = &v50[v4 + v5];
    uint64_t v33 = &v50[v4 + 16 + v5];
    uint64_t v34 = (long long *)(v7 + 16);
    char v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 16)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      uint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        int v42 = v34;
        unsigned int v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *unsigned int v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          unint64_t v46 = i;
          uint64_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *v46++ = v49;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      uint64_t v34 = (long long *)((char *)v34 + v8);
      char v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v77, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v5 = (char *)v77 + v3 + v4;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    int v42 = (char *)v77 + v3 + v4;
    uint64_t v43 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v44 = 0;
      long long v45 = (char *)v77 + v3 + v4;
      unint64_t v46 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v47 = (char *)(v6 + v7 * v44);
        unint64_t v48 = &v5[128 * v44];
        if ((unint64_t)(&v42[128 * v44] - v47) > 0x1F)
        {
          v48 += v43;
          char v50 = v45;
          uint64_t v51 = v46;
          uint64_t v52 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v9 == v43) {
            goto LABEL_30;
          }
          v47 += v43;
          int v49 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v54 = v49 + 1;
        do
        {
          char v55 = *v47++;
          *v48++ = v55;
          BOOL v56 = v8 > v54++;
        }
        while (v56);
LABEL_30:
        ++v44;
        unint64_t v46 = (uint64_t *)((char *)v46 + v7);
        v45 += 128;
        if (v44 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v57 = 0;
    uint64_t v58 = v9 & 0x7FFFFFFE0;
    long long v59 = (char *)v77 + v3 + v4;
    uint64_t v60 = (char *)&v77[1] + v3 + v4;
    uint64_t v61 = (long long *)(v6 + 16);
    unint64_t v62 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    unint64_t v63 = &v59[v9 & 0x7FFFFFFE0];
    do
    {
      unint64_t v64 = (char *)(v6 + v7 * v57);
      int v65 = &v5[128 * v57];
      if ((unint64_t)(&v42[128 * v57] - v64) >= 0x20)
      {
        uint64_t v69 = v61;
        uint64_t v70 = v60;
        uint64_t v71 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v72 = *v69;
          *(v70 - 1) = *(v69 - 1);
          *uint64_t v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 32;
        }
        while (v71);
        if (v9 == v58) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v65 += v43;
          uint64_t v73 = v63;
          unint64_t v74 = v62;
          unint64_t v75 = v43 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v76 = *v74++;
            *(void *)uint64_t v73 = v76;
            v73 += 8;
            v75 -= 8;
          }
          while (v75);
          if (v9 == v43) {
            goto LABEL_41;
          }
          v64 += v43;
          int v66 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v64 += v58;
          v65 += v58;
          int v66 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v66 = 0;
      }
      unsigned int v67 = v66 + 1;
      do
      {
        char v68 = *v64++;
        *v65++ = v68;
        BOOL v56 = v8 > v67++;
      }
      while (v56);
LABEL_41:
      ++v57;
      v60 += 128;
      uint64_t v61 = (long long *)((char *)v61 + v7);
      unint64_t v62 = (uint64_t *)((char *)v62 + v7);
      v63 += 128;
    }
    while (v57 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  BOOL v14 = *(float64x2_t **)(a1 + 40);
  BOOL v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v13 + 1];
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 8 * v38) & ~((v16 - 8 * (int)v38) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v40 = (v17 - 4 * v37) & ~((v17 - 4 * (int)v37) >> 31);
    if (v40 >= 4) {
      unsigned int v40 = 4;
    }
    if (result) {
      BOOL v41 = v40 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      char v36 = 0;
    }
    else
    {
      uint64_t v18 = &v77[32 * v37 + 4 * v38];
      float64x2_t v19 = v18[2];
      float64x2_t v20 = v18[10];
      float64x2_t v21 = v18[3];
      float64x2_t v22 = v18[11];
      float64x2_t v23 = *v18;
      float64x2_t v24 = v18[8];
      float64x2_t v25 = v18[1];
      float64x2_t v26 = v18[16];
      float64x2_t v27 = v18[17];
      float64x2_t v28 = v18[18];
      float64x2_t v29 = v18[19];
      float64x2_t v30 = v18[9];
      v18 += 24;
      float64x2_t v31 = v18[1];
      float64x2_t v32 = v18[2];
      float64x2_t v33 = v18[3];
      float64x2_t v34 = *v18;
      *BOOL v14 = v23;
      v14[1] = v24;
      v14[2] = v25;
      v14[3] = v30;
      v14[4] = v26;
      v14[5] = v34;
      v14[6] = v27;
      v14[7] = v31;
      v14[8] = v19;
      v14[9] = v20;
      v14[10] = v21;
      v14[11] = v22;
      char v35 = v14 + 12;
      v14 += 16;
      char v36 = -1;
      *char v35 = v28;
      v35[1] = v32;
      v35[2] = v29;
      v35[3] = v33;
    }
    *v15++ = v36;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v5 = (char *)v49 + v3 + v4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    BOOL v14 = (char *)v49 + v3 + v4;
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = (char *)v49 + v3 + v4;
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v19 = (char *)(v6 + v7 * v16);
        float64x2_t v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          float64x2_t v22 = v17;
          float64x2_t v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    float64x2_t v31 = (char *)v49 + v3 + v4;
    float64x2_t v32 = (char *)&v49[1] + v3 + v4;
    float64x2_t v33 = (long long *)(v6 + 16);
    float64x2_t v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 128)
    {
      char v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        BOOL v41 = v33;
        int v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *int v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          long long v45 = i;
          unint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)long long v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      float64x2_t v33 = (long long *)((char *)v33 + v7);
      float64x2_t v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v60, *(int32x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v6 + 208) + 52), a2, a3, a4, a5);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
  }
  uint64_t v13 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v14 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v15 = &v60[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 2 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v19 <= 7)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      uint64_t v21 = 0;
      do
      {
        v15[v21] = *(unsigned char *)(v16 + v21);
        ++v21;
      }
      while (v18 > v21);
      v15 += 32;
      v16 += v17;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
  }
  if (v19) {
    BOOL v22 = (v19 - 1) >> 32 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    unsigned int v26 = &v60[v13 + v14];
    uint64_t v27 = v19 & 0x1FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v60[v13 + v14];
      uint64_t v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v31 = (char *)(v16 + v17 * v28);
        float64x2_t v32 = &v15[32 * v28];
        if ((unint64_t)(&v26[32 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          float64x2_t v34 = v29;
          char v35 = v30;
          uint64_t v36 = v19 & 0x1FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *(void *)&long long v7 = v37;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v19 == v27) {
            goto LABEL_23;
          }
          v31 += v27;
          int v33 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v18 > v38++;
        }
        while (v40);
LABEL_23:
        ++v28;
        uint64_t v30 = (uint64_t *)((char *)v30 + v17);
        v29 += 32;
        if (v28 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
        }
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = v19 & 0x1FFFFFFE0;
    uint64_t v43 = &v60[v13 + v14];
    long long v44 = &v60[v13 + 16 + v14];
    long long v45 = (long long *)(v16 + 16);
    unint64_t v46 = (uint64_t *)(v16 + (v19 & 0x1FFFFFFE0));
    for (uint64_t j = &v43[v19 & 0x1FFFFFFE0]; ; j += 4)
    {
      uint64_t v48 = (char *)(v16 + v17 * v41);
      int v49 = &v15[32 * v41];
      if ((unint64_t)(&v26[32 * v41] - v48) >= 0x20)
      {
        uint64_t v53 = v45;
        unsigned int v54 = v44;
        uint64_t v55 = v19 & 0x1FFFFFFE0;
        do
        {
          long long v7 = *(v53 - 1);
          long long v8 = *v53;
          *(v54 - 1) = v7;
          _OWORD *v54 = v8;
          v54 += 2;
          v53 += 2;
          v55 -= 32;
        }
        while (v55);
        if (v19 == v42) {
          goto LABEL_34;
        }
        if ((v19 & 0x18) != 0)
        {
          v49 += v27;
          BOOL v56 = j;
          uint64_t v57 = v46;
          unint64_t v58 = v27 - (v19 & 0x1FFFFFFE0);
          do
          {
            uint64_t v59 = *v57++;
            *(void *)&long long v7 = v59;
            *v56++ = v59;
            v58 -= 8;
          }
          while (v58);
          if (v19 == v27) {
            goto LABEL_34;
          }
          v48 += v27;
          int v50 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v48 += v42;
          v49 += v42;
          int v50 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v50 = 0;
      }
      unsigned int v51 = v50 + 1;
      do
      {
        char v52 = *v48++;
        *v49++ = v52;
        BOOL v40 = v18 > v51++;
      }
      while (v40);
LABEL_34:
      ++v41;
      v44 += 32;
      long long v45 = (long long *)((char *)v45 + v17);
      unint64_t v46 = (uint64_t *)((char *)v46 + v17);
      if (v41 == v12) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
      }
    }
  }
  for (uint64_t k = 0; k != v12; ++k)
  {
    uint64_t v24 = 0;
    do
    {
      v15[v24] = *(unsigned char *)(v16 + v24);
      ++v24;
    }
    while (v18 > v24);
    v15 += 32;
    v16 += v17;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v60, *(int32x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v6 + 208) + 52), a2, a3, a4, a5);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
  }
  uint64_t v13 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v14 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v15 = &v60[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 2 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v19 <= 7)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      uint64_t v21 = 0;
      do
      {
        v15[v21] = *(unsigned char *)(v16 + v21);
        ++v21;
      }
      while (v18 > v21);
      v15 += 32;
      v16 += v17;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
  }
  if (v19) {
    BOOL v22 = (v19 - 1) >> 32 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    unsigned int v26 = &v60[v13 + v14];
    uint64_t v27 = v19 & 0x1FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v60[v13 + v14];
      uint64_t v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v31 = (char *)(v16 + v17 * v28);
        float64x2_t v32 = &v15[32 * v28];
        if ((unint64_t)(&v26[32 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          float64x2_t v34 = v29;
          char v35 = v30;
          uint64_t v36 = v19 & 0x1FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *(void *)&long long v7 = v37;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v19 == v27) {
            goto LABEL_23;
          }
          v31 += v27;
          int v33 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v18 > v38++;
        }
        while (v40);
LABEL_23:
        ++v28;
        uint64_t v30 = (uint64_t *)((char *)v30 + v17);
        v29 += 32;
        if (v28 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
        }
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = v19 & 0x1FFFFFFE0;
    uint64_t v43 = &v60[v13 + v14];
    long long v44 = &v60[v13 + 16 + v14];
    long long v45 = (long long *)(v16 + 16);
    unint64_t v46 = (uint64_t *)(v16 + (v19 & 0x1FFFFFFE0));
    for (uint64_t j = &v43[v19 & 0x1FFFFFFE0]; ; j += 4)
    {
      uint64_t v48 = (char *)(v16 + v17 * v41);
      int v49 = &v15[32 * v41];
      if ((unint64_t)(&v26[32 * v41] - v48) >= 0x20)
      {
        uint64_t v53 = v45;
        unsigned int v54 = v44;
        uint64_t v55 = v19 & 0x1FFFFFFE0;
        do
        {
          long long v7 = *(v53 - 1);
          long long v8 = *v53;
          *(v54 - 1) = v7;
          _OWORD *v54 = v8;
          v54 += 2;
          v53 += 2;
          v55 -= 32;
        }
        while (v55);
        if (v19 == v42) {
          goto LABEL_34;
        }
        if ((v19 & 0x18) != 0)
        {
          v49 += v27;
          BOOL v56 = j;
          uint64_t v57 = v46;
          unint64_t v58 = v27 - (v19 & 0x1FFFFFFE0);
          do
          {
            uint64_t v59 = *v57++;
            *(void *)&long long v7 = v59;
            *v56++ = v59;
            v58 -= 8;
          }
          while (v58);
          if (v19 == v27) {
            goto LABEL_34;
          }
          v48 += v27;
          int v50 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v48 += v42;
          v49 += v42;
          int v50 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v50 = 0;
      }
      unsigned int v51 = v50 + 1;
      do
      {
        char v52 = *v48++;
        *v49++ = v52;
        BOOL v40 = v18 > v51++;
      }
      while (v40);
LABEL_34:
      ++v41;
      v44 += 32;
      long long v45 = (long long *)((char *)v45 + v17);
      unint64_t v46 = (uint64_t *)((char *)v46 + v17);
      if (v41 == v12) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
      }
    }
  }
  for (uint64_t k = 0; k != v12; ++k)
  {
    uint64_t v24 = 0;
    do
    {
      v15[v24] = *(unsigned char *)(v16 + v24);
      ++v24;
    }
    while (v18 > v24);
    v15 += 32;
    v16 += v17;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v60, *(int32x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v6 + 208) + 52), a2, a3, a4, a5);
  uint64_t v12 = *(unsigned int *)(a1 + 80);
  if (!v12 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
  }
  uint64_t v13 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v14 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v15 = &v60[v13 + v14];
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  unint64_t v18 = 2 * *(unsigned int *)(a1 + 84);
  if (v18 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v19 <= 7)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      uint64_t v21 = 0;
      do
      {
        v15[v21] = *(unsigned char *)(v16 + v21);
        ++v21;
      }
      while (v18 > v21);
      v15 += 32;
      v16 += v17;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
  }
  if (v19) {
    BOOL v22 = (v19 - 1) >> 32 == 0;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22)
  {
    unsigned int v26 = &v60[v13 + v14];
    uint64_t v27 = v19 & 0x1FFFFFFF8;
    if (v19 < 0x20)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v60[v13 + v14];
      uint64_t v30 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        float64x2_t v31 = (char *)(v16 + v17 * v28);
        float64x2_t v32 = &v15[32 * v28];
        if ((unint64_t)(&v26[32 * v28] - v31) > 0x1F)
        {
          v32 += v27;
          float64x2_t v34 = v29;
          char v35 = v30;
          uint64_t v36 = v19 & 0x1FFFFFFF8;
          do
          {
            uint64_t v37 = *v35++;
            *(void *)&long long v7 = v37;
            *v34++ = v37;
            v36 -= 8;
          }
          while (v36);
          if (v19 == v27) {
            goto LABEL_23;
          }
          v31 += v27;
          int v33 = v19 & 0xFFFFFFF8;
        }
        else
        {
          int v33 = 0;
        }
        unsigned int v38 = v33 + 1;
        do
        {
          char v39 = *v31++;
          *v32++ = v39;
          BOOL v40 = v18 > v38++;
        }
        while (v40);
LABEL_23:
        ++v28;
        uint64_t v30 = (uint64_t *)((char *)v30 + v17);
        v29 += 32;
        if (v28 == v12) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
        }
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = v19 & 0x1FFFFFFE0;
    uint64_t v43 = &v60[v13 + v14];
    long long v44 = &v60[v13 + 16 + v14];
    long long v45 = (long long *)(v16 + 16);
    unint64_t v46 = (uint64_t *)(v16 + (v19 & 0x1FFFFFFE0));
    for (uint64_t j = &v43[v19 & 0x1FFFFFFE0]; ; j += 4)
    {
      uint64_t v48 = (char *)(v16 + v17 * v41);
      int v49 = &v15[32 * v41];
      if ((unint64_t)(&v26[32 * v41] - v48) >= 0x20)
      {
        uint64_t v53 = v45;
        unsigned int v54 = v44;
        uint64_t v55 = v19 & 0x1FFFFFFE0;
        do
        {
          long long v7 = *(v53 - 1);
          long long v8 = *v53;
          *(v54 - 1) = v7;
          _OWORD *v54 = v8;
          v54 += 2;
          v53 += 2;
          v55 -= 32;
        }
        while (v55);
        if (v19 == v42) {
          goto LABEL_34;
        }
        if ((v19 & 0x18) != 0)
        {
          v49 += v27;
          BOOL v56 = j;
          uint64_t v57 = v46;
          unint64_t v58 = v27 - (v19 & 0x1FFFFFFE0);
          do
          {
            uint64_t v59 = *v57++;
            *(void *)&long long v7 = v59;
            *v56++ = v59;
            v58 -= 8;
          }
          while (v58);
          if (v19 == v27) {
            goto LABEL_34;
          }
          v48 += v27;
          int v50 = v19 & 0xFFFFFFF8;
        }
        else
        {
          v48 += v42;
          v49 += v42;
          int v50 = v19 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v50 = 0;
      }
      unsigned int v51 = v50 + 1;
      do
      {
        char v52 = *v48++;
        *v49++ = v52;
        BOOL v40 = v18 > v51++;
      }
      while (v40);
LABEL_34:
      ++v41;
      v44 += 32;
      long long v45 = (long long *)((char *)v45 + v17);
      unint64_t v46 = (uint64_t *)((char *)v46 + v17);
      if (v41 == v12) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
      }
    }
  }
  for (uint64_t k = 0; k != v12; ++k)
  {
    uint64_t v24 = 0;
    do
    {
      v15[v24] = *(unsigned char *)(v16 + v24);
      ++v24;
    }
    while (v18 > v24);
    v15 += 32;
    v16 += v17;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v60, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v6 + 208) + 52), *(double *)&v7, *(double *)&v8, v9, v10, v11);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  long long v8 = *(unsigned char **)(a1 + 48);
  do
  {
    double v10 = (int32x4_t *)&v78[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v6 + 1]
                          + 16
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v6]];
    unsigned int v11 = *v8;
    if (v11 == 63)
    {
      int32x4_t v12 = *(int32x4_t *)v7;
      a3 = *(int32x4_t *)(v7 + 16);
      a4 = *(int32x4_t *)(v7 + 32);
      a5 = *(int32x4_t *)(v7 + 48);
      *double v10 = vuzp1q_s32(*(int32x4_t *)v7, a4);
      v10[2] = vuzp2q_s32(v12, a4);
      v10[4] = vuzp1q_s32(a3, a5);
      a2 = vuzp2q_s32(a3, a5);
      v10[6] = a2;
      uint64_t v9 = 64;
    }
    else if (v11 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v7);
      *double v10 = a2;
      v10[2] = a2;
      v10[4] = a2;
      v10[6] = a2;
      uint64_t v9 = 2;
    }
    else if (*v8)
    {
      uint64_t v9 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v10, 32, v7, v11, *(double *)a2.i64, *(double *)a3.i64, *(double *)a4.i64, *(int8x8_t *)a5.i8);
    }
    else
    {
      uint64_t v9 = 0;
      v10->i64[0] = 0;
      v10->i64[1] = 0;
      v10[2].i64[0] = 0;
      v10[2].i64[1] = 0;
      v10[4].i64[0] = 0;
      v10[4].i64[1] = 0;
      v10[6].i64[0] = 0;
      v10[6].i64[1] = 0;
    }
    v7 += v9;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  uint64_t v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    float64x2_t v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      unsigned int v26 = &v78[v14 + v15];
      uint64_t v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v28 = (char *)(v17 + v18 * v25);
        uint64_t v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          float64x2_t v31 = v26;
          float64x2_t v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        uint64_t v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    uint64_t v61 = &v78[v14 + 16 + v15];
    unint64_t v62 = (long long *)(v17 + 16);
    unint64_t v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unint64_t v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      int v65 = (char *)(v17 + v18 * v58);
      int v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        uint64_t v70 = v62;
        uint64_t v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unint64_t v74 = v64;
          unint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      unint64_t v62 = (long long *)((char *)v62 + v18);
      unint64_t v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      long long v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, double a7, double a8, int16x4_t a9)
{
  uint64_t v10 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 40);
  int32x4_t v12 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v14 = (int32x4_t *)&v64[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v10 + 1]
                          + 16
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v10]];
    unsigned int v15 = *v12;
    if (v15 == 63)
    {
      int32x4_t v16 = *(int32x4_t *)v11;
      a3 = *(int32x4_t *)(v11 + 16);
      a4 = *(int32x4_t *)(v11 + 32);
      a5 = *(int32x4_t *)(v11 + 48);
      a6 = vuzp1q_s32(*(int32x4_t *)v11, a4);
      *uint64_t v14 = a6;
      v14[2] = vuzp2q_s32(v16, a4);
      v14[4] = vuzp1q_s32(a3, a5);
      a2 = (__n128)vuzp2q_s32(a3, a5);
      v14[6] = (int32x4_t)a2;
      uint64_t v13 = 64;
    }
    else if (v15 == 1)
    {
      a2 = (__n128)vld1q_dup_s16((const __int16 *)v11);
      *uint64_t v14 = (int32x4_t)a2;
      v14[2] = (int32x4_t)a2;
      v14[4] = (int32x4_t)a2;
      v14[6] = (int32x4_t)a2;
      uint64_t v13 = 2;
    }
    else if (*v12)
    {
      uint64_t v13 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v14, 32, v11, v15, a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(int8x8_t *)a5.i8);
    }
    else
    {
      uint64_t v13 = 0;
      v14->i64[0] = 0;
      v14->i64[1] = 0;
      v14[2].i64[0] = 0;
      v14[2].i64[1] = 0;
      v14[4].i64[0] = 0;
      v14[4].i64[1] = 0;
      v14[6].i64[0] = 0;
      v14[6].i64[1] = 0;
    }
    v11 += v13;
    ++v12;
    v10 += 2;
  }
  while (v10 != 16);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v18 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v19 = 2 * *(unsigned int *)(a1 + 76);
    unint64_t v20 = &v64[v18 + v19];
    uint64_t v21 = *(int32x4_t **)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    unint64_t v23 = 2 * *(unsigned int *)(a1 + 84);
    if (v23 <= 1) {
      unint64_t v24 = 1;
    }
    else {
      unint64_t v24 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v24 <= 7)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v26 = 0;
        do
        {
          v20[v26] = v21->i8[v26];
          ++v26;
        }
        while (v23 > v26);
        v20 += 32;
        uint64_t v21 = (int32x4_t *)((char *)v21 + v22);
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v64, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9);
    }
    if (v24 && !((v24 - 1) >> 32))
    {
      uint64_t v27 = &v64[v18 + v19];
      uint64_t v28 = v24 & 0x1FFFFFFF8;
      if (v24 < 0x20)
      {
        uint64_t v29 = 0;
        int v30 = (unint64_t *)&v64[v18 + v19];
        float64x2_t v31 = *(unint64_t **)(a1 + 56);
        while (1)
        {
          float64x2_t v32 = &v21->i8[v22 * v29];
          uint64_t v33 = &v20[32 * v29];
          if ((unint64_t)(&v27[32 * v29] - v32) > 0x1F)
          {
            v33 += v28;
            unsigned int v35 = v30;
            char v36 = v31;
            uint64_t v37 = v24 & 0x1FFFFFFF8;
            do
            {
              unint64_t v38 = *v36++;
              a2.n128_u64[0] = v38;
              *v35++ = v38;
              v37 -= 8;
            }
            while (v37);
            if (v24 == v28) {
              goto LABEL_25;
            }
            v32 += v28;
            int v34 = v24 & 0xFFFFFFF8;
          }
          else
          {
            int v34 = 0;
          }
          unsigned int v39 = v34 + 1;
          do
          {
            char v40 = *v32++;
            *v33++ = v40;
            BOOL v41 = v23 > v39++;
          }
          while (v41);
LABEL_25:
          ++v29;
          float64x2_t v31 = (unint64_t *)((char *)v31 + v22);
          v30 += 4;
          if (v29 == v17) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v64, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9);
          }
        }
      }
      uint64_t v45 = 0;
      uint64_t v46 = v24 & 0x1FFFFFFE0;
      int32x4_t v47 = &v64[v18 + v19];
      int32x4_t v48 = (__n128 *)&v64[v18 + 16 + v19];
      float32x2x2_t v49 = v21 + 1;
      int32x4_t v50 = (unint64_t *)((char *)v21->u64 + (v24 & 0x1FFFFFFE0));
      for (uint64_t j = (unint64_t *)&v47[v24 & 0x1FFFFFFE0]; ; j += 4)
      {
        char v52 = &v21->i8[v22 * v45];
        uint64_t v53 = &v20[32 * v45];
        if ((unint64_t)(&v27[32 * v45] - v52) >= 0x20)
        {
          BOOL v57 = v49;
          uint64_t v58 = v48;
          uint64_t v59 = v24 & 0x1FFFFFFE0;
          do
          {
            a2 = (__n128)v57[-1];
            a3 = *v57;
            v58[-1] = a2;
            __n128 *v58 = (__n128)a3;
            v58 += 2;
            v57 += 2;
            v59 -= 32;
          }
          while (v59);
          if (v24 == v46) {
            goto LABEL_41;
          }
          if ((v24 & 0x18) != 0)
          {
            v53 += v28;
            uint64_t v60 = j;
            uint64_t v61 = v50;
            unint64_t v62 = v28 - (v24 & 0x1FFFFFFE0);
            do
            {
              unint64_t v63 = *v61++;
              a2.n128_u64[0] = v63;
              *v60++ = v63;
              v62 -= 8;
            }
            while (v62);
            if (v24 == v28) {
              goto LABEL_41;
            }
            v52 += v28;
            int v54 = v24 & 0xFFFFFFF8;
          }
          else
          {
            v52 += v46;
            v53 += v46;
            int v54 = v24 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v54 = 0;
        }
        unsigned int v55 = v54 + 1;
        do
        {
          char v56 = *v52++;
          *v53++ = v56;
          BOOL v41 = v23 > v55++;
        }
        while (v41);
LABEL_41:
        ++v45;
        v48 += 2;
        float32x2x2_t v49 = (int32x4_t *)((char *)v49 + v22);
        int32x4_t v50 = (unint64_t *)((char *)v50 + v22);
        if (v45 == v17) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v64, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9);
        }
      }
    }
    for (uint64_t k = 0; k != v17; ++k)
    {
      uint64_t v43 = 0;
      do
      {
        v20[v43] = v21->i8[v43];
        ++v43;
      }
      while (v23 > v43);
      v20 += 32;
      uint64_t v21 = (int32x4_t *)((char *)v21 + v22);
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v64, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], *(double *)a3.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unsigned int v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (char *)v50 + v4 + v5;
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          unint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    uint64_t v33 = (char *)&v50[1] + v4 + v5;
    int v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        uint64_t v42 = v34;
        uint64_t v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *uint64_t v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          uint64_t v46 = i;
          int32x4_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *(void *)uint64_t v46 = v49;
            v46 += 8;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      int v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unsigned int v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (char *)v50 + v4 + v5;
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          unint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    uint64_t v33 = (char *)&v50[1] + v4 + v5;
    int v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        uint64_t v42 = v34;
        uint64_t v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *uint64_t v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          uint64_t v46 = i;
          int32x4_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *(void *)uint64_t v46 = v49;
            v46 += 8;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      int v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v50, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v5 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v50 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v10) {
    BOOL v11 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unsigned int v15 = (char *)v50 + v4 + v5;
    uint64_t v16 = v10 & 0x7FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (char *)v50 + v4 + v5;
      uint64_t v19 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unint64_t v20 = (char *)(v7 + v8 * v17);
        uint64_t v21 = &v6[128 * v17];
        if ((unint64_t)(&v15[128 * v17] - v20) > 0x1F)
        {
          v21 += v16;
          unint64_t v23 = v18;
          unint64_t v24 = v19;
          uint64_t v25 = v10 & 0x7FFFFFFF8;
          do
          {
            uint64_t v26 = *v24++;
            *v23++ = v26;
            v25 -= 8;
          }
          while (v25);
          if (v10 == v16) {
            goto LABEL_17;
          }
          v20 += v16;
          int v22 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v22 = 0;
        }
        unsigned int v27 = v22 + 1;
        do
        {
          char v28 = *v20++;
          *v21++ = v28;
          BOOL v29 = v9 > v27++;
        }
        while (v29);
LABEL_17:
        ++v17;
        uint64_t v19 = (uint64_t *)((char *)v19 + v8);
        v18 += 128;
        if (v17 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = v10 & 0x7FFFFFFE0;
    float64x2_t v32 = (char *)v50 + v4 + v5;
    uint64_t v33 = (char *)&v50[1] + v4 + v5;
    int v34 = (long long *)(v7 + 16);
    unsigned int v35 = (uint64_t *)(v7 + (v10 & 0x7FFFFFFE0));
    for (uint64_t i = &v32[v10 & 0x7FFFFFFE0]; ; i += 128)
    {
      uint64_t v37 = (char *)(v7 + v8 * v30);
      unint64_t v38 = &v6[128 * v30];
      if ((unint64_t)(&v15[128 * v30] - v37) >= 0x20)
      {
        uint64_t v42 = v34;
        uint64_t v43 = v33;
        uint64_t v44 = v10 & 0x7FFFFFFE0;
        do
        {
          long long v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *uint64_t v43 = v45;
          v43 += 2;
          v42 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v10 == v31) {
          goto LABEL_28;
        }
        if ((v10 & 0x18) != 0)
        {
          v38 += v16;
          uint64_t v46 = i;
          int32x4_t v47 = v35;
          unint64_t v48 = v16 - (v10 & 0x7FFFFFFE0);
          do
          {
            uint64_t v49 = *v47++;
            *(void *)uint64_t v46 = v49;
            v46 += 8;
            v48 -= 8;
          }
          while (v48);
          if (v10 == v16) {
            goto LABEL_28;
          }
          v37 += v16;
          int v39 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v37 += v31;
          v38 += v31;
          int v39 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v39 = 0;
      }
      unsigned int v40 = v39 + 1;
      do
      {
        char v41 = *v37++;
        *v38++ = v41;
        BOOL v29 = v9 > v40++;
      }
      while (v29);
LABEL_28:
      ++v30;
      v33 += 128;
      int v34 = (long long *)((char *)v34 + v8);
      unsigned int v35 = (uint64_t *)((char *)v35 + v8);
      if (v30 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t j = 0; j != v3; ++j)
  {
    uint64_t v13 = 0;
    do
    {
      v6[v13] = *(unsigned char *)(v7 + v13);
      ++v13;
    }
    while (v9 > v13);
    v6 += 128;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v50, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v77, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
    uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
    uint64_t v5 = (char *)v77 + v3 + v4;
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
    }
    if (v9) {
      BOOL v10 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v12 = 0;
        do
        {
          v5[v12] = *(unsigned char *)(v6 + v12);
          ++v12;
        }
        while (v8 > v12);
        v5 += 128;
        v6 += v7;
      }
      goto LABEL_14;
    }
    uint64_t v42 = (char *)v77 + v3 + v4;
    uint64_t v43 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v44 = 0;
      long long v45 = (char *)v77 + v3 + v4;
      uint64_t v46 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int32x4_t v47 = (char *)(v6 + v7 * v44);
        unint64_t v48 = &v5[128 * v44];
        if ((unint64_t)(&v42[128 * v44] - v47) > 0x1F)
        {
          v48 += v43;
          int32x4_t v50 = v45;
          uint64_t v51 = v46;
          uint64_t v52 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v9 == v43) {
            goto LABEL_30;
          }
          v47 += v43;
          int v49 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v49 = 0;
        }
        unsigned int v54 = v49 + 1;
        do
        {
          char v55 = *v47++;
          *v48++ = v55;
          BOOL v56 = v8 > v54++;
        }
        while (v56);
LABEL_30:
        ++v44;
        uint64_t v46 = (uint64_t *)((char *)v46 + v7);
        v45 += 128;
        if (v44 == v2) {
          goto LABEL_14;
        }
      }
    }
    uint64_t v57 = 0;
    uint64_t v58 = v9 & 0x7FFFFFFE0;
    uint64_t v59 = (char *)v77 + v3 + v4;
    uint64_t v60 = (char *)&v77[1] + v3 + v4;
    uint64_t v61 = (long long *)(v6 + 16);
    unint64_t v62 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    unint64_t v63 = &v59[v9 & 0x7FFFFFFE0];
    do
    {
      unint64_t v64 = (char *)(v6 + v7 * v57);
      uint64_t v65 = &v5[128 * v57];
      if ((unint64_t)(&v42[128 * v57] - v64) >= 0x20)
      {
        char v69 = v61;
        uint64_t v70 = v60;
        uint64_t v71 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v72 = *v69;
          *(v70 - 1) = *(v69 - 1);
          *uint64_t v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 32;
        }
        while (v71);
        if (v9 == v58) {
          goto LABEL_41;
        }
        if ((v9 & 0x18) != 0)
        {
          v65 += v43;
          long long v73 = v63;
          unint64_t v74 = v62;
          unint64_t v75 = v43 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v76 = *v74++;
            *(void *)long long v73 = v76;
            v73 += 8;
            v75 -= 8;
          }
          while (v75);
          if (v9 == v43) {
            goto LABEL_41;
          }
          v64 += v43;
          int v66 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v64 += v58;
          v65 += v58;
          int v66 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v66 = 0;
      }
      unsigned int v67 = v66 + 1;
      do
      {
        char v68 = *v64++;
        *v65++ = v68;
        BOOL v56 = v8 > v67++;
      }
      while (v56);
LABEL_41:
      ++v57;
      v60 += 128;
      uint64_t v61 = (long long *)((char *)v61 + v7);
      unint64_t v62 = (uint64_t *)((char *)v62 + v7);
      v63 += 128;
    }
    while (v57 != v2);
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v14 = *(_OWORD **)(a1 + 40);
  unsigned int v15 = *(char **)(a1 + 48);
  int v16 = *(unsigned __int8 *)(a1 + 88);
  int v17 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v13 + 1];
    uint64_t v38 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v13];
    LODWORD(result) = (v16 - 8 * v38) & ~((v16 - 8 * (int)v38) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v40 = (v17 - 4 * v37) & ~((v17 - 4 * (int)v37) >> 31);
    if (v40 >= 4) {
      unsigned int v40 = 4;
    }
    if (result) {
      BOOL v41 = v40 == 0;
    }
    else {
      BOOL v41 = 1;
    }
    if (v41)
    {
      char v36 = 0;
    }
    else
    {
      uint64_t v18 = &v77[32 * v37 + 4 * v38];
      long long v19 = v18[2];
      long long v20 = v18[10];
      long long v21 = v18[3];
      long long v22 = v18[11];
      long long v23 = *v18;
      long long v24 = v18[8];
      long long v25 = v18[1];
      long long v26 = v18[16];
      long long v27 = v18[17];
      long long v28 = v18[18];
      long long v29 = v18[19];
      long long v30 = v18[9];
      v18 += 24;
      long long v31 = v18[1];
      long long v32 = v18[2];
      long long v33 = v18[3];
      long long v34 = *v18;
      *uint64_t v14 = v23;
      v14[1] = v24;
      v14[2] = v25;
      v14[3] = v30;
      v14[4] = v26;
      v14[5] = v34;
      v14[6] = v27;
      v14[7] = v31;
      v14[8] = v19;
      v14[9] = v20;
      v14[10] = v21;
      v14[11] = v22;
      unsigned int v35 = v14 + 12;
      v14 += 16;
      char v36 = -1;
      *unsigned int v35 = v28;
      v35[1] = v32;
      v35[2] = v29;
      v35[3] = v33;
    }
    *v15++ = v36;
    v13 += 2;
  }
  while (v13 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v49, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 7;
  uint64_t v4 = 8 * *(unsigned int *)(a1 + 76);
  uint64_t v5 = (char *)v49 + v3 + v4;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 8 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 8 * *(unsigned int *)(a1 + 84);
  }
  if (v9) {
    BOOL v10 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v14 = (char *)v49 + v3 + v4;
    uint64_t v15 = v9 & 0x7FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v16 = 0;
      int v17 = (char *)v49 + v3 + v4;
      uint64_t v18 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v19 = (char *)(v6 + v7 * v16);
        long long v20 = &v5[128 * v16];
        if ((unint64_t)(&v14[128 * v16] - v19) > 0x1F)
        {
          v20 += v15;
          long long v22 = v17;
          long long v23 = v18;
          uint64_t v24 = v9 & 0x7FFFFFFF8;
          do
          {
            uint64_t v25 = *v23++;
            *v22++ = v25;
            v24 -= 8;
          }
          while (v24);
          if (v9 == v15) {
            goto LABEL_17;
          }
          v19 += v15;
          int v21 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v21 = 0;
        }
        unsigned int v26 = v21 + 1;
        do
        {
          char v27 = *v19++;
          *v20++ = v27;
          BOOL v28 = v8 > v26++;
        }
        while (v28);
LABEL_17:
        ++v16;
        uint64_t v18 = (uint64_t *)((char *)v18 + v7);
        v17 += 128;
        if (v16 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = v9 & 0x7FFFFFFE0;
    long long v31 = (char *)v49 + v3 + v4;
    long long v32 = (char *)&v49[1] + v3 + v4;
    long long v33 = (long long *)(v6 + 16);
    long long v34 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFE0));
    for (uint64_t i = &v31[v9 & 0x7FFFFFFE0]; ; i += 128)
    {
      char v36 = (char *)(v6 + v7 * v29);
      uint64_t v37 = &v5[128 * v29];
      if ((unint64_t)(&v14[128 * v29] - v36) >= 0x20)
      {
        BOOL v41 = v33;
        uint64_t v42 = v32;
        uint64_t v43 = v9 & 0x7FFFFFFE0;
        do
        {
          long long v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *uint64_t v42 = v44;
          v42 += 2;
          v41 += 2;
          v43 -= 32;
        }
        while (v43);
        if (v9 == v30) {
          goto LABEL_28;
        }
        if ((v9 & 0x18) != 0)
        {
          v37 += v15;
          long long v45 = i;
          uint64_t v46 = v34;
          unint64_t v47 = v15 - (v9 & 0x7FFFFFFE0);
          do
          {
            uint64_t v48 = *v46++;
            *(void *)long long v45 = v48;
            v45 += 8;
            v47 -= 8;
          }
          while (v47);
          if (v9 == v15) {
            goto LABEL_28;
          }
          v36 += v15;
          int v38 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v36 += v30;
          v37 += v30;
          int v38 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v38 = 0;
      }
      unsigned int v39 = v38 + 1;
      do
      {
        char v40 = *v36++;
        *v37++ = v40;
        BOOL v28 = v8 > v39++;
      }
      while (v28);
LABEL_28:
      ++v29;
      v32 += 128;
      long long v33 = (long long *)((char *)v33 + v7);
      long long v34 = (uint64_t *)((char *)v34 + v7);
      if (v29 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t j = 0; j != v2; ++j)
  {
    uint64_t v12 = 0;
    do
    {
      v5[v12] = *(unsigned char *)(v6 + v12);
      ++v12;
    }
    while (v8 > v12);
    v5 += 128;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v49, 128, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    long long v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      long long v22 = &v54[v6 + v7];
      long long v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        uint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          char v27 = v22;
          BOOL v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        long long v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    int v38 = (long long *)(v9 + 16);
    unsigned int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        uint64_t v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      int v38 = (long long *)((char *)v38 + v10);
      unsigned int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    long long v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      long long v22 = &v54[v6 + v7];
      long long v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        uint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          char v27 = v22;
          BOOL v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        long long v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    int v38 = (long long *)(v9 + 16);
    unsigned int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        uint64_t v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      int v38 = (long long *)((char *)v38 + v10);
      unsigned int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v54, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v4 + 208) + 52), a2, a3);
  uint64_t v5 = *(unsigned int *)(a1 + 80);
  if (!v5 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v7 = 4 * *(unsigned int *)(a1 + 76);
  unint64_t v8 = &v54[v6 + v7];
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  if (v11 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v12 <= 7)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = 0;
      do
      {
        v8[v14] = *(unsigned char *)(v9 + v14);
        ++v14;
      }
      while (v11 > v14);
      v8 += 64;
      v9 += v10;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
  }
  if (v12) {
    BOOL v15 = (v12 - 1) >> 32 == 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    long long v19 = &v54[v6 + v7];
    uint64_t v20 = v12 & 0x3FFFFFFF8;
    if (v12 < 0x20)
    {
      uint64_t v21 = 0;
      long long v22 = &v54[v6 + v7];
      long long v23 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v24 = (char *)(v9 + v10 * v21);
        uint64_t v25 = &v8[64 * v21];
        if ((unint64_t)(&v19[64 * v21] - v24) > 0x1F)
        {
          v25 += v20;
          char v27 = v22;
          BOOL v28 = v23;
          uint64_t v29 = v12 & 0x3FFFFFFF8;
          do
          {
            uint64_t v30 = *v28++;
            *v27++ = v30;
            v29 -= 8;
          }
          while (v29);
          if (v12 == v20) {
            goto LABEL_23;
          }
          v24 += v20;
          int v26 = v12 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        unsigned int v31 = v26 + 1;
        do
        {
          char v32 = *v24++;
          *v25++ = v32;
          BOOL v33 = v11 > v31++;
        }
        while (v33);
LABEL_23:
        ++v21;
        long long v23 = (uint64_t *)((char *)v23 + v10);
        v22 += 64;
        if (v21 == v5) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
        }
      }
    }
    uint64_t v34 = 0;
    uint64_t v35 = v12 & 0x3FFFFFFE0;
    char v36 = &v54[v6 + v7];
    uint64_t v37 = &v54[v6 + 16 + v7];
    int v38 = (long long *)(v9 + 16);
    unsigned int v39 = (uint64_t *)(v9 + (v12 & 0x3FFFFFFE0));
    for (uint64_t j = &v36[v12 & 0x3FFFFFFE0]; ; j += 8)
    {
      BOOL v41 = (char *)(v9 + v10 * v34);
      uint64_t v42 = &v8[64 * v34];
      if ((unint64_t)(&v19[64 * v34] - v41) >= 0x20)
      {
        uint64_t v46 = v38;
        unint64_t v47 = v37;
        uint64_t v48 = v12 & 0x3FFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if (v12 == v35) {
          goto LABEL_34;
        }
        if ((v12 & 0x18) != 0)
        {
          v42 += v20;
          uint64_t v50 = j;
          uint64_t v51 = v39;
          unint64_t v52 = v20 - (v12 & 0x3FFFFFFE0);
          do
          {
            uint64_t v53 = *v51++;
            *v50++ = v53;
            v52 -= 8;
          }
          while (v52);
          if (v12 == v20) {
            goto LABEL_34;
          }
          v41 += v20;
          int v43 = v12 & 0xFFFFFFF8;
        }
        else
        {
          v41 += v35;
          v42 += v35;
          int v43 = v12 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v43 = 0;
      }
      unsigned int v44 = v43 + 1;
      do
      {
        char v45 = *v41++;
        *v42++ = v45;
        BOOL v33 = v11 > v44++;
      }
      while (v33);
LABEL_34:
      ++v34;
      v37 += 64;
      int v38 = (long long *)((char *)v38 + v10);
      unsigned int v39 = (uint64_t *)((char *)v39 + v10);
      if (v34 == v5) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v5; ++k)
  {
    uint64_t v17 = 0;
    do
    {
      v8[v17] = *(unsigned char *)(v9 + v17);
      ++v17;
    }
    while (v11 > v17);
    v8 += 64;
    v9 += v10;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v54, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v4 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v76, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v6 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v7 = &v76[0].i8[v5 + v6];
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
    if (v10 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v11 <= 7)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v13 = 0;
        do
        {
          v7[v13] = *(unsigned char *)(v8 + v13);
          ++v13;
        }
        while (v10 > v13);
        v7 += 64;
        v8 += v9;
      }
      goto LABEL_20;
    }
    if (v11) {
      BOOL v14 = (v11 - 1) >> 32 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14)
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        uint64_t v16 = 0;
        do
        {
          v7[v16] = *(unsigned char *)(v8 + v16);
          ++v16;
        }
        while (v10 > v16);
        v7 += 64;
        v8 += v9;
      }
      goto LABEL_20;
    }
    BOOL v41 = &v76[0].i8[v5 + v6];
    uint64_t v42 = v11 & 0x3FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v43 = 0;
      unsigned int v44 = &v76[0].i8[v5 + v6];
      char v45 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        uint64_t v46 = (char *)(v8 + v9 * v43);
        unint64_t v47 = &v7[64 * v43];
        if ((unint64_t)(&v41[64 * v43] - v46) > 0x1F)
        {
          v47 += v42;
          long long v49 = v44;
          uint64_t v50 = v45;
          uint64_t v51 = v11 & 0x3FFFFFFF8;
          do
          {
            uint64_t v52 = *v50++;
            *(void *)long long v49 = v52;
            v49 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v11 == v42) {
            goto LABEL_36;
          }
          v46 += v42;
          int v48 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v48 = 0;
        }
        unsigned int v53 = v48 + 1;
        do
        {
          char v54 = *v46++;
          *v47++ = v54;
          BOOL v55 = v10 > v53++;
        }
        while (v55);
LABEL_36:
        ++v43;
        char v45 = (uint64_t *)((char *)v45 + v9);
        v44 += 64;
        if (v43 == v4) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = v11 & 0x3FFFFFFE0;
    uint64_t v58 = &v76[0].i8[v5 + v6];
    uint64_t v59 = &v76[1].i8[v5 + v6];
    uint64_t v60 = (long long *)(v8 + 16);
    uint64_t v61 = (uint64_t *)(v8 + (v11 & 0x3FFFFFFE0));
    unint64_t v62 = &v58[v11 & 0x3FFFFFFE0];
    do
    {
      unint64_t v63 = (char *)(v8 + v9 * v56);
      unint64_t v64 = &v7[64 * v56];
      if ((unint64_t)(&v41[64 * v56] - v63) >= 0x20)
      {
        char v68 = v60;
        char v69 = v59;
        uint64_t v70 = v11 & 0x3FFFFFFE0;
        do
        {
          long long v71 = *v68;
          *((_OWORD *)v69 - 1) = *(v68 - 1);
          *(_OWORD *)char v69 = v71;
          v69 += 32;
          v68 += 2;
          v70 -= 32;
        }
        while (v70);
        if (v11 == v57) {
          goto LABEL_47;
        }
        if ((v11 & 0x18) != 0)
        {
          v64 += v42;
          long long v72 = v62;
          long long v73 = v61;
          unint64_t v74 = v42 - (v11 & 0x3FFFFFFE0);
          do
          {
            uint64_t v75 = *v73++;
            *(void *)long long v72 = v75;
            v72 += 8;
            v74 -= 8;
          }
          while (v74);
          if (v11 == v42) {
            goto LABEL_47;
          }
          v63 += v42;
          int v65 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v63 += v57;
          v64 += v57;
          int v65 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v65 = 0;
      }
      unsigned int v66 = v65 + 1;
      do
      {
        char v67 = *v63++;
        *v64++ = v67;
        BOOL v55 = v10 > v66++;
      }
      while (v55);
LABEL_47:
      ++v56;
      v59 += 64;
      uint64_t v60 = (long long *)((char *)v60 + v9);
      uint64_t v61 = (uint64_t *)((char *)v61 + v9);
      v62 += 64;
    }
    while (v56 != v4);
  }
LABEL_20:
  uint64_t v17 = 0;
  uint64_t v18 = *(int64x2_t **)(a1 + 40);
  long long v19 = *(char **)(a1 + 48);
  int v20 = *(unsigned __int8 *)(a1 + 88);
  int v21 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v36 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v17 + 1];
    uint64_t v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v17];
    LODWORD(result) = (v20 - 8 * v37) & ~((v20 - 8 * (int)v37) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v39 = (v21 - 4 * v36) & ~((v21 - 4 * (int)v36) >> 31);
    if (v39 >= 4) {
      unsigned int v39 = 4;
    }
    if (result) {
      BOOL v40 = v39 == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (v40)
    {
      char v35 = 0;
    }
    else
    {
      long long v22 = &v76[16 * v36 + 2 * v37];
      int64x2_t v23 = v22[1];
      int64x2_t v24 = v22[4];
      int64x2_t v25 = v22[5];
      int64x2_t v26 = vzip1q_s64(*v22, v24);
      int64x2_t v27 = vzip2q_s64(*v22, v24);
      int64x2_t v28 = vzip1q_s64(v23, v25);
      int64x2_t v29 = vzip2q_s64(v23, v25);
      int64x2_t v30 = v22[8];
      int64x2_t v31 = v22[9];
      v22 += 12;
      int64x2_t v32 = v22[1];
      int64x2_t v33 = vzip1q_s64(v30, *v22);
      int64x2_t v34 = vzip2q_s64(v30, *v22);
      *uint64_t v18 = v26;
      v18[1] = v27;
      v18[2] = v33;
      v18[3] = v34;
      v18[4] = v28;
      v18[5] = v29;
      v18[6] = vzip1q_s64(v31, v32);
      v18[7] = vzip2q_s64(v31, v32);
      v18 += 8;
      char v35 = 127;
    }
    *v19++ = v35;
    v17 += 2;
  }
  while (v17 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v53, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  uint64_t v4 = *(unsigned int *)(a1 + 80);
  if (!v4 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v5 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v6 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v7 = &v53[0].i8[v5 + v6];
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  if (v10 <= 1) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v11 <= 7)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v13 = 0;
      do
      {
        v7[v13] = *(unsigned char *)(v8 + v13);
        ++v13;
      }
      while (v10 > v13);
      v7 += 64;
      v8 += v9;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v11) {
    BOOL v14 = (v11 - 1) >> 32 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v18 = &v53[0].i8[v5 + v6];
    uint64_t v19 = v11 & 0x3FFFFFFF8;
    if (v11 < 0x20)
    {
      uint64_t v20 = 0;
      int v21 = &v53[0].i8[v5 + v6];
      long long v22 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v23 = (char *)(v8 + v9 * v20);
        int64x2_t v24 = &v7[64 * v20];
        if ((unint64_t)(&v18[64 * v20] - v23) > 0x1F)
        {
          v24 += v19;
          int64x2_t v26 = v21;
          int64x2_t v27 = v22;
          uint64_t v28 = v11 & 0x3FFFFFFF8;
          do
          {
            uint64_t v29 = *v27++;
            *(void *)int64x2_t v26 = v29;
            v26 += 8;
            v28 -= 8;
          }
          while (v28);
          if (v11 == v19) {
            goto LABEL_23;
          }
          v23 += v19;
          int v25 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v25 = 0;
        }
        unsigned int v30 = v25 + 1;
        do
        {
          char v31 = *v23++;
          *v24++ = v31;
          BOOL v32 = v10 > v30++;
        }
        while (v32);
LABEL_23:
        ++v20;
        long long v22 = (uint64_t *)((char *)v22 + v9);
        v21 += 64;
        if (v20 == v4) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v33 = 0;
    uint64_t v34 = v11 & 0x3FFFFFFE0;
    char v35 = &v53[0].i8[v5 + v6];
    uint64_t v36 = &v53[1].i8[v5 + v6];
    uint64_t v37 = (long long *)(v8 + 16);
    int v38 = (uint64_t *)(v8 + (v11 & 0x3FFFFFFE0));
    for (uint64_t j = &v35[v11 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v40 = (char *)(v8 + v9 * v33);
      BOOL v41 = &v7[64 * v33];
      if ((unint64_t)(&v18[64 * v33] - v40) >= 0x20)
      {
        char v45 = v37;
        uint64_t v46 = v36;
        uint64_t v47 = v11 & 0x3FFFFFFE0;
        do
        {
          long long v48 = *v45;
          *((_OWORD *)v46 - 1) = *(v45 - 1);
          *(_OWORD *)uint64_t v46 = v48;
          v46 += 32;
          v45 += 2;
          v47 -= 32;
        }
        while (v47);
        if (v11 == v34) {
          goto LABEL_34;
        }
        if ((v11 & 0x18) != 0)
        {
          v41 += v19;
          long long v49 = j;
          uint64_t v50 = v38;
          unint64_t v51 = v19 - (v11 & 0x3FFFFFFE0);
          do
          {
            uint64_t v52 = *v50++;
            *(void *)long long v49 = v52;
            v49 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v11 == v19) {
            goto LABEL_34;
          }
          v40 += v19;
          int v42 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v40 += v34;
          v41 += v34;
          int v42 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v42 = 0;
      }
      unsigned int v43 = v42 + 1;
      do
      {
        char v44 = *v40++;
        *v41++ = v44;
        BOOL v32 = v10 > v43++;
      }
      while (v32);
LABEL_34:
      ++v33;
      v36 += 64;
      uint64_t v37 = (long long *)((char *)v37 + v9);
      int v38 = (uint64_t *)((char *)v38 + v9);
      if (v33 == v4) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v4; ++k)
  {
    uint64_t v16 = 0;
    do
    {
      v7[v16] = *(unsigned char *)(v8 + v16);
      ++v16;
    }
    while (v10 > v16);
    v7 += 64;
    v8 += v9;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v53, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)v52 + v4 + v5;
      int v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v22 = (char *)(v7 + v8 * v19);
        int64x2_t v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          int v25 = v20;
          int64x2_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        int v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    char v35 = (char *)&v52[1] + v4 + v5;
    uint64_t v36 = (long long *)(v7 + 16);
    uint64_t v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      unsigned int v39 = (char *)(v7 + v8 * v32);
      BOOL v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        char v44 = v36;
        char v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          _OWORD *v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = j;
          long long v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)long long v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      uint64_t v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)v52 + v4 + v5;
      int v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v22 = (char *)(v7 + v8 * v19);
        int64x2_t v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          int v25 = v20;
          int64x2_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        int v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    char v35 = (char *)&v52[1] + v4 + v5;
    uint64_t v36 = (long long *)(v7 + 16);
    uint64_t v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      unsigned int v39 = (char *)(v7 + v8 * v32);
      BOOL v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        char v44 = v36;
        char v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          _OWORD *v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = j;
          long long v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)long long v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      uint64_t v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)v52 + v4 + v5;
      int v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        long long v22 = (char *)(v7 + v8 * v19);
        int64x2_t v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          int v25 = v20;
          int64x2_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        int v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    char v35 = (char *)&v52[1] + v4 + v5;
    uint64_t v36 = (long long *)(v7 + 16);
    uint64_t v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      unsigned int v39 = (char *)(v7 + v8 * v32);
      BOOL v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        char v44 = v36;
        char v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          _OWORD *v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = j;
          long long v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)long long v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      uint64_t v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      unsigned int v42 = &v74[0].i8[v3 + v4];
      char v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v44 = (char *)(v6 + v7 * v41);
        char v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          long long v47 = v42;
          long long v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)long long v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        char v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    uint64_t v56 = &v74[0].i8[v3 + v4];
    uint64_t v57 = &v74[1].i8[v3 + v4];
    uint64_t v58 = (long long *)(v6 + 16);
    uint64_t v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    uint64_t v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      uint64_t v61 = (char *)(v6 + v7 * v54);
      unint64_t v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        unsigned int v66 = v58;
        char v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)char v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          uint64_t v70 = v60;
          long long v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      uint64_t v58 = (long long *)((char *)v58 + v7);
      uint64_t v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  uint64_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      uint64_t v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *uint64_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      uint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        uint64_t v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        char v43 = v35;
        char v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)char v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          long long v47 = j;
          long long v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)long long v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(void *)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)v52 + v4 + v5;
      int64x2_t v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v22 = (char *)(v7 + v8 * v19);
        int v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          int64x2_t v25 = v20;
          uint64_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        int64x2_t v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    uint64_t v35 = (char *)&v52[1] + v4 + v5;
    uint64_t v36 = (long long *)(v7 + 16);
    unsigned int v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      unsigned int v39 = (char *)(v7 + v8 * v32);
      int v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        char v44 = v36;
        uint64_t v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          _OWORD *v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = j;
          unint64_t v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)long long v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      unsigned int v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)v52 + v4 + v5;
      int64x2_t v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v22 = (char *)(v7 + v8 * v19);
        int v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          int64x2_t v25 = v20;
          uint64_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        int64x2_t v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    uint64_t v35 = (char *)&v52[1] + v4 + v5;
    uint64_t v36 = (long long *)(v7 + 16);
    unsigned int v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      unsigned int v39 = (char *)(v7 + v8 * v32);
      int v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        char v44 = v36;
        uint64_t v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          _OWORD *v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = j;
          unint64_t v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)long long v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      unsigned int v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v52, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if (!v3 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  unint64_t v4 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v5 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v6 = (char *)v52 + v4 + v5;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v10 <= 7)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v12 = 0;
      do
      {
        v6[v12] = *(unsigned char *)(v7 + v12);
        ++v12;
      }
      while (v9 > v12);
      v6 += 64;
      v7 += v8;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  }
  if (v10) {
    BOOL v13 = (v10 - 1) >> 32 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v17 = (char *)v52 + v4 + v5;
    uint64_t v18 = v10 & 0x3FFFFFFF8;
    if (v10 < 0x20)
    {
      uint64_t v19 = 0;
      uint64_t v20 = (char *)v52 + v4 + v5;
      int64x2_t v21 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v22 = (char *)(v7 + v8 * v19);
        int v23 = &v6[64 * v19];
        if ((unint64_t)(&v17[64 * v19] - v22) > 0x1F)
        {
          v23 += v18;
          int64x2_t v25 = v20;
          uint64_t v26 = v21;
          uint64_t v27 = v10 & 0x3FFFFFFF8;
          do
          {
            uint64_t v28 = *v26++;
            *v25++ = v28;
            v27 -= 8;
          }
          while (v27);
          if (v10 == v18) {
            goto LABEL_23;
          }
          v22 += v18;
          int v24 = v10 & 0xFFFFFFF8;
        }
        else
        {
          int v24 = 0;
        }
        unsigned int v29 = v24 + 1;
        do
        {
          char v30 = *v22++;
          *v23++ = v30;
          BOOL v31 = v9 > v29++;
        }
        while (v31);
LABEL_23:
        ++v19;
        int64x2_t v21 = (uint64_t *)((char *)v21 + v8);
        v20 += 64;
        if (v19 == v3) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
        }
      }
    }
    uint64_t v32 = 0;
    uint64_t v33 = v10 & 0x3FFFFFFE0;
    uint64_t v34 = (char *)v52 + v4 + v5;
    uint64_t v35 = (char *)&v52[1] + v4 + v5;
    uint64_t v36 = (long long *)(v7 + 16);
    unsigned int v37 = (uint64_t *)(v7 + (v10 & 0x3FFFFFFE0));
    for (uint64_t j = &v34[v10 & 0x3FFFFFFE0]; ; j += 64)
    {
      unsigned int v39 = (char *)(v7 + v8 * v32);
      int v40 = &v6[64 * v32];
      if ((unint64_t)(&v17[64 * v32] - v39) >= 0x20)
      {
        char v44 = v36;
        uint64_t v45 = v35;
        uint64_t v46 = v10 & 0x3FFFFFFE0;
        do
        {
          long long v47 = *v44;
          *(v45 - 1) = *(v44 - 1);
          _OWORD *v45 = v47;
          v45 += 2;
          v44 += 2;
          v46 -= 32;
        }
        while (v46);
        if (v10 == v33) {
          goto LABEL_34;
        }
        if ((v10 & 0x18) != 0)
        {
          v40 += v18;
          long long v48 = j;
          unint64_t v49 = v37;
          unint64_t v50 = v18 - (v10 & 0x3FFFFFFE0);
          do
          {
            uint64_t v51 = *v49++;
            *(void *)long long v48 = v51;
            v48 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v10 == v18) {
            goto LABEL_34;
          }
          v39 += v18;
          int v41 = v10 & 0xFFFFFFF8;
        }
        else
        {
          v39 += v33;
          v40 += v33;
          int v41 = v10 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v41 = 0;
      }
      unsigned int v42 = v41 + 1;
      do
      {
        char v43 = *v39++;
        *v40++ = v43;
        BOOL v31 = v9 > v42++;
      }
      while (v31);
LABEL_34:
      ++v32;
      v35 += 64;
      uint64_t v36 = (long long *)((char *)v36 + v8);
      unsigned int v37 = (uint64_t *)((char *)v37 + v8);
      if (v32 == v3) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v3; ++k)
  {
    uint64_t v15 = 0;
    do
    {
      v6[v15] = *(unsigned char *)(v7 + v15);
      ++v15;
    }
    while (v9 > v15);
    v6 += 64;
    v7 += v8;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((uint64_t)v52, 64, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v74, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
    uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
    uint64_t v5 = &v74[0].i8[v3 + v4];
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
    }
    if (v9 <= 7)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          v5[v11] = *(unsigned char *)(v6 + v11);
          ++v11;
        }
        while (v8 > v11);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    if (v9) {
      BOOL v12 = (v9 - 1) >> 32 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      for (uint64_t j = 0; j != v2; ++j)
      {
        uint64_t v14 = 0;
        do
        {
          v5[v14] = *(unsigned char *)(v6 + v14);
          ++v14;
        }
        while (v8 > v14);
        v5 += 64;
        v6 += v7;
      }
      goto LABEL_20;
    }
    unsigned int v39 = &v74[0].i8[v3 + v4];
    uint64_t v40 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v41 = 0;
      unsigned int v42 = &v74[0].i8[v3 + v4];
      char v43 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        char v44 = (char *)(v6 + v7 * v41);
        uint64_t v45 = &v5[64 * v41];
        if ((unint64_t)(&v39[64 * v41] - v44) > 0x1F)
        {
          v45 += v40;
          long long v47 = v42;
          long long v48 = v43;
          uint64_t v49 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v50 = *v48++;
            *(void *)long long v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v40) {
            goto LABEL_36;
          }
          v44 += v40;
          int v46 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v46 = 0;
        }
        unsigned int v51 = v46 + 1;
        do
        {
          char v52 = *v44++;
          *v45++ = v52;
          BOOL v53 = v8 > v51++;
        }
        while (v53);
LABEL_36:
        ++v41;
        char v43 = (uint64_t *)((char *)v43 + v7);
        v42 += 64;
        if (v41 == v2) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = v9 & 0x3FFFFFFE0;
    uint64_t v56 = &v74[0].i8[v3 + v4];
    uint64_t v57 = &v74[1].i8[v3 + v4];
    uint64_t v58 = (long long *)(v6 + 16);
    uint64_t v59 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    uint64_t v60 = &v56[v9 & 0x3FFFFFFE0];
    do
    {
      uint64_t v61 = (char *)(v6 + v7 * v54);
      unint64_t v62 = &v5[64 * v54];
      if ((unint64_t)(&v39[64 * v54] - v61) >= 0x20)
      {
        unsigned int v66 = v58;
        char v67 = v57;
        uint64_t v68 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)char v67 = v69;
          v67 += 32;
          v66 += 2;
          v68 -= 32;
        }
        while (v68);
        if (v9 == v55) {
          goto LABEL_47;
        }
        if ((v9 & 0x18) != 0)
        {
          v62 += v40;
          uint64_t v70 = v60;
          long long v71 = v59;
          unint64_t v72 = v40 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v73 = *v71++;
            *(void *)uint64_t v70 = v73;
            v70 += 8;
            v72 -= 8;
          }
          while (v72);
          if (v9 == v40) {
            goto LABEL_47;
          }
          v61 += v40;
          int v63 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v61 += v55;
          v62 += v55;
          int v63 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v63 = 0;
      }
      unsigned int v64 = v63 + 1;
      do
      {
        char v65 = *v61++;
        *v62++ = v65;
        BOOL v53 = v8 > v64++;
      }
      while (v53);
LABEL_47:
      ++v54;
      v57 += 64;
      uint64_t v58 = (long long *)((char *)v58 + v7);
      uint64_t v59 = (uint64_t *)((char *)v59 + v7);
      v60 += 64;
    }
    while (v54 != v2);
  }
LABEL_20:
  uint64_t v15 = 0;
  uint64_t v16 = *(int64x2_t **)(a1 + 40);
  uint64_t v17 = *(char **)(a1 + 48);
  int v18 = *(unsigned __int8 *)(a1 + 88);
  int v19 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v34 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v15 + 1];
    uint64_t v35 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v15];
    LODWORD(result) = (v18 - 8 * v35) & ~((v18 - 8 * (int)v35) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v37 = (v19 - 4 * v34) & ~((v19 - 4 * (int)v34) >> 31);
    if (v37 >= 4) {
      unsigned int v37 = 4;
    }
    if (result) {
      BOOL v38 = v37 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      char v33 = 0;
    }
    else
    {
      uint64_t v20 = &v74[16 * v34 + 2 * v35];
      int64x2_t v21 = v20[1];
      int64x2_t v22 = v20[4];
      int64x2_t v23 = v20[5];
      int64x2_t v24 = vzip1q_s64(*v20, v22);
      int64x2_t v25 = vzip2q_s64(*v20, v22);
      int64x2_t v26 = vzip1q_s64(v21, v23);
      int64x2_t v27 = vzip2q_s64(v21, v23);
      int64x2_t v28 = v20[8];
      int64x2_t v29 = v20[9];
      v20 += 12;
      int64x2_t v30 = v20[1];
      int64x2_t v31 = vzip1q_s64(v28, *v20);
      int64x2_t v32 = vzip2q_s64(v28, *v20);
      *uint64_t v16 = v24;
      v16[1] = v25;
      v16[2] = v31;
      v16[3] = v32;
      v16[4] = v26;
      v16[5] = v27;
      v16[6] = vzip1q_s64(v29, v30);
      v16[7] = vzip2q_s64(v29, v30);
      v16 += 8;
      char v33 = 127;
    }
    *v17++ = v33;
    v15 += 2;
  }
  while (v15 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v51, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (!v2 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 76);
  uint64_t v5 = &v51[0].i8[v3 + v4];
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = 4 * *(unsigned int *)(a1 + 84);
  if (v8 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = 4 * *(unsigned int *)(a1 + 84);
  }
  if (v9 <= 7)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v11 = 0;
      do
      {
        v5[v11] = *(unsigned char *)(v6 + v11);
        ++v11;
      }
      while (v8 > v11);
      v5 += 64;
      v6 += v7;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
  }
  if (v9) {
    BOOL v12 = (v9 - 1) >> 32 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    uint64_t v16 = &v51[0].i8[v3 + v4];
    uint64_t v17 = v9 & 0x3FFFFFFF8;
    if (v9 < 0x20)
    {
      uint64_t v18 = 0;
      int v19 = &v51[0].i8[v3 + v4];
      uint64_t v20 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v21 = (char *)(v6 + v7 * v18);
        int64x2_t v22 = &v5[64 * v18];
        if ((unint64_t)(&v16[64 * v18] - v21) > 0x1F)
        {
          v22 += v17;
          int64x2_t v24 = v19;
          int64x2_t v25 = v20;
          uint64_t v26 = v9 & 0x3FFFFFFF8;
          do
          {
            uint64_t v27 = *v25++;
            *(void *)int64x2_t v24 = v27;
            v24 += 8;
            v26 -= 8;
          }
          while (v26);
          if (v9 == v17) {
            goto LABEL_23;
          }
          v21 += v17;
          int v23 = v9 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        unsigned int v28 = v23 + 1;
        do
        {
          char v29 = *v21++;
          *v22++ = v29;
          BOOL v30 = v8 > v28++;
        }
        while (v30);
LABEL_23:
        ++v18;
        uint64_t v20 = (uint64_t *)((char *)v20 + v7);
        v19 += 64;
        if (v18 == v2) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = v9 & 0x3FFFFFFE0;
    char v33 = &v51[0].i8[v3 + v4];
    uint64_t v34 = &v51[1].i8[v3 + v4];
    uint64_t v35 = (long long *)(v6 + 16);
    uint64_t v36 = (uint64_t *)(v6 + (v9 & 0x3FFFFFFE0));
    for (uint64_t j = &v33[v9 & 0x3FFFFFFE0]; ; j += 64)
    {
      BOOL v38 = (char *)(v6 + v7 * v31);
      unsigned int v39 = &v5[64 * v31];
      if ((unint64_t)(&v16[64 * v31] - v38) >= 0x20)
      {
        char v43 = v35;
        char v44 = v34;
        uint64_t v45 = v9 & 0x3FFFFFFE0;
        do
        {
          long long v46 = *v43;
          *((_OWORD *)v44 - 1) = *(v43 - 1);
          *(_OWORD *)char v44 = v46;
          v44 += 32;
          v43 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v9 == v32) {
          goto LABEL_34;
        }
        if ((v9 & 0x18) != 0)
        {
          v39 += v17;
          long long v47 = j;
          long long v48 = v36;
          unint64_t v49 = v17 - (v9 & 0x3FFFFFFE0);
          do
          {
            uint64_t v50 = *v48++;
            *(void *)long long v47 = v50;
            v47 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v9 == v17) {
            goto LABEL_34;
          }
          v38 += v17;
          int v40 = v9 & 0xFFFFFFF8;
        }
        else
        {
          v38 += v32;
          v39 += v32;
          int v40 = v9 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v40 = 0;
      }
      unsigned int v41 = v40 + 1;
      do
      {
        char v42 = *v38++;
        *v39++ = v42;
        BOOL v30 = v8 > v41++;
      }
      while (v30);
LABEL_34:
      ++v31;
      v34 += 64;
      uint64_t v35 = (long long *)((char *)v35 + v7);
      uint64_t v36 = (uint64_t *)((char *)v36 + v7);
      if (v31 == v2) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
      }
    }
  }
  for (uint64_t k = 0; k != v2; ++k)
  {
    uint64_t v14 = 0;
    do
    {
      v5[v14] = *(unsigned char *)(v6 + v14);
      ++v14;
    }
    while (v8 > v14);
    v5 += 64;
    v6 += v7;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v51, 64, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, double a3, int8x8_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v5 + 208) + 52), a2, a3, a4);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
  }
  uint64_t v7 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 2 * *(unsigned int *)(a1 + 76);
  unint64_t v9 = &v55[v7 + v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    uint64_t v20 = &v55[v7 + v8];
    uint64_t v21 = v13 & 0x1FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      int v23 = &v55[v7 + v8];
      int64x2_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          char v29 = v24;
          uint64_t v30 = v13 & 0x1FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *v28++ = v31;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        int64x2_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x1FFFFFFE0;
    unsigned int v37 = &v55[v7 + v8];
    BOOL v38 = &v55[v7 + 16 + v8];
    unsigned int v39 = (long long *)(v10 + 16);
    int v40 = (uint64_t *)(v10 + (v13 & 0x1FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x1FFFFFFE0]; ; j += 4)
    {
      char v42 = (char *)(v10 + v11 * v35);
      char v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        long long v47 = v39;
        long long v48 = v38;
        uint64_t v49 = v13 & 0x1FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *long long v48 = v50;
          v48 += 2;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          unsigned int v51 = j;
          uint64_t v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x1FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      unsigned int v39 = (long long *)((char *)v39 + v11);
      int v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, double a3, int8x8_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v5 + 208) + 52), a2, a3, a4);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
  }
  uint64_t v7 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 2 * *(unsigned int *)(a1 + 76);
  unint64_t v9 = &v55[v7 + v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    uint64_t v20 = &v55[v7 + v8];
    uint64_t v21 = v13 & 0x1FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      int v23 = &v55[v7 + v8];
      int64x2_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          char v29 = v24;
          uint64_t v30 = v13 & 0x1FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *v28++ = v31;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        int64x2_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x1FFFFFFE0;
    unsigned int v37 = &v55[v7 + v8];
    BOOL v38 = &v55[v7 + 16 + v8];
    unsigned int v39 = (long long *)(v10 + 16);
    int v40 = (uint64_t *)(v10 + (v13 & 0x1FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x1FFFFFFE0]; ; j += 4)
    {
      char v42 = (char *)(v10 + v11 * v35);
      char v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        long long v47 = v39;
        long long v48 = v38;
        uint64_t v49 = v13 & 0x1FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *long long v48 = v50;
          v48 += 2;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          unsigned int v51 = j;
          uint64_t v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x1FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      unsigned int v39 = (long long *)((char *)v39 + v11);
      int v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, double a3, int8x8_t a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v55, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v5 + 208) + 52), a2, a3, a4);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6 || !*(_DWORD *)(a1 + 84)) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
  }
  uint64_t v7 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v8 = 2 * *(unsigned int *)(a1 + 76);
  unint64_t v9 = &v55[v7 + v8];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = 2 * *(unsigned int *)(a1 + 84);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v13 <= 7)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v15 = 0;
      do
      {
        v9[v15] = *(unsigned char *)(v10 + v15);
        ++v15;
      }
      while (v12 > v15);
      v9 += 32;
      v10 += v11;
    }
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
  }
  if (v13) {
    BOOL v16 = (v13 - 1) >> 32 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    uint64_t v20 = &v55[v7 + v8];
    uint64_t v21 = v13 & 0x1FFFFFFF8;
    if (v13 < 0x20)
    {
      uint64_t v22 = 0;
      int v23 = &v55[v7 + v8];
      int64x2_t v24 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        int64x2_t v25 = (char *)(v10 + v11 * v22);
        uint64_t v26 = &v9[32 * v22];
        if ((unint64_t)(&v20[32 * v22] - v25) > 0x1F)
        {
          v26 += v21;
          unsigned int v28 = v23;
          char v29 = v24;
          uint64_t v30 = v13 & 0x1FFFFFFF8;
          do
          {
            uint64_t v31 = *v29++;
            *v28++ = v31;
            v30 -= 8;
          }
          while (v30);
          if (v13 == v21) {
            goto LABEL_23;
          }
          v25 += v21;
          int v27 = v13 & 0xFFFFFFF8;
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v32 = v27 + 1;
        do
        {
          char v33 = *v25++;
          *v26++ = v33;
          BOOL v34 = v12 > v32++;
        }
        while (v34);
LABEL_23:
        ++v22;
        int64x2_t v24 = (uint64_t *)((char *)v24 + v11);
        v23 += 32;
        if (v22 == v6) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
        }
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = v13 & 0x1FFFFFFE0;
    unsigned int v37 = &v55[v7 + v8];
    BOOL v38 = &v55[v7 + 16 + v8];
    unsigned int v39 = (long long *)(v10 + 16);
    int v40 = (uint64_t *)(v10 + (v13 & 0x1FFFFFFE0));
    for (uint64_t j = &v37[v13 & 0x1FFFFFFE0]; ; j += 4)
    {
      char v42 = (char *)(v10 + v11 * v35);
      char v43 = &v9[32 * v35];
      if ((unint64_t)(&v20[32 * v35] - v42) >= 0x20)
      {
        long long v47 = v39;
        long long v48 = v38;
        uint64_t v49 = v13 & 0x1FFFFFFE0;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *long long v48 = v50;
          v48 += 2;
          v47 += 2;
          v49 -= 32;
        }
        while (v49);
        if (v13 == v36) {
          goto LABEL_34;
        }
        if ((v13 & 0x18) != 0)
        {
          v43 += v21;
          unsigned int v51 = j;
          uint64_t v52 = v40;
          unint64_t v53 = v21 - (v13 & 0x1FFFFFFE0);
          do
          {
            uint64_t v54 = *v52++;
            *v51++ = v54;
            v53 -= 8;
          }
          while (v53);
          if (v13 == v21) {
            goto LABEL_34;
          }
          v42 += v21;
          int v44 = v13 & 0xFFFFFFF8;
        }
        else
        {
          v42 += v36;
          v43 += v36;
          int v44 = v13 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v44 = 0;
      }
      unsigned int v45 = v44 + 1;
      do
      {
        char v46 = *v42++;
        *v43++ = v46;
        BOOL v34 = v12 > v45++;
      }
      while (v34);
LABEL_34:
      ++v35;
      v38 += 32;
      unsigned int v39 = (long long *)((char *)v39 + v11);
      int v40 = (uint64_t *)((char *)v40 + v11);
      if (v35 == v6) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
      }
    }
  }
  for (uint64_t k = 0; k != v6; ++k)
  {
    uint64_t v18 = 0;
    do
    {
      v9[v18] = *(unsigned char *)(v10 + v18);
      ++v18;
    }
    while (v12 > v18);
    v9 += 32;
    v10 += v11;
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v55, 32, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v5 + 208) + 52));
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  do
  {
    unint64_t v9 = (int32x4_t *)&v78[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5]];
    unsigned int v10 = *v7;
    if (v10 == 63)
    {
      int32x4_t v11 = *(int32x4_t *)v6;
      a3 = *(int32x4_t *)(v6 + 16);
      a4 = *(int32x4_t *)(v6 + 32);
      int32x4_t v12 = *(int32x4_t *)(v6 + 48);
      *unint64_t v9 = vuzp1q_s32(*(int32x4_t *)v6, a4);
      v9[2] = vuzp2q_s32(v11, a4);
      v9[4] = vuzp1q_s32(a3, v12);
      a2 = vuzp2q_s32(a3, v12);
      v9[6] = a2;
      uint64_t v8 = 64;
    }
    else if (v10 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v6);
      *unint64_t v9 = a2;
      v9[2] = a2;
      v9[4] = a2;
      v9[6] = a2;
      uint64_t v8 = 2;
    }
    else if (*v7)
    {
      uint64_t v8 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v9, 32, v6, v10, *(int8x8_t *)a2.i8, *(double *)a3.i64, *(int8x8_t *)a4.i8);
    }
    else
    {
      uint64_t v8 = 0;
      v9->i64[0] = 0;
      v9->i64[1] = 0;
      v9[2].i64[0] = 0;
      v9[2].i64[1] = 0;
      v9[4].i64[0] = 0;
      v9[4].i64[1] = 0;
      v9[6].i64[0] = 0;
      v9[6].i64[1] = 0;
    }
    v6 += v8;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13 || !*(_DWORD *)(a1 + 84)) {
    goto LABEL_39;
  }
  uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
  BOOL v16 = &v78[v14 + v15];
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
  if (v19 <= 1) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
  }
  if (v20 > 7)
  {
    if (!v20 || (v20 - 1) >> 32)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v39 = 0;
        do
        {
          v16[v39] = *(unsigned char *)(v17 + v39);
          ++v39;
        }
        while (v19 > v39);
        v16 += 32;
        v17 += v18;
      }
      goto LABEL_39;
    }
    int v23 = &v78[v14 + v15];
    uint64_t v24 = v20 & 0x1FFFFFFF8;
    if (v20 < 0x20)
    {
      uint64_t v25 = 0;
      uint64_t v26 = &v78[v14 + v15];
      int v27 = *(uint64_t **)(a1 + 56);
      while (1)
      {
        unsigned int v28 = (char *)(v17 + v18 * v25);
        char v29 = &v16[32 * v25];
        if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
        {
          v29 += v24;
          uint64_t v31 = v26;
          unsigned int v32 = v27;
          uint64_t v33 = v20 & 0x1FFFFFFF8;
          do
          {
            uint64_t v34 = *v32++;
            *v31++ = v34;
            v33 -= 8;
          }
          while (v33);
          if (v20 == v24) {
            goto LABEL_25;
          }
          v28 += v24;
          int v30 = v20 & 0xFFFFFFF8;
        }
        else
        {
          int v30 = 0;
        }
        unsigned int v35 = v30 + 1;
        do
        {
          char v36 = *v28++;
          *v29++ = v36;
          BOOL v37 = v19 > v35++;
        }
        while (v37);
LABEL_25:
        ++v25;
        int v27 = (uint64_t *)((char *)v27 + v18);
        v26 += 32;
        if (v25 == v13) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v58 = 0;
    uint64_t v59 = v20 & 0x1FFFFFFE0;
    uint64_t v60 = &v78[v14 + v15];
    uint64_t v61 = &v78[v14 + 16 + v15];
    unint64_t v62 = (long long *)(v17 + 16);
    int v63 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
    unsigned int v64 = &v60[v20 & 0x1FFFFFFE0];
    while (1)
    {
      char v65 = (char *)(v17 + v18 * v58);
      unsigned int v66 = &v16[32 * v58];
      if ((unint64_t)(&v23[32 * v58] - v65) >= 0x20)
      {
        uint64_t v70 = v62;
        long long v71 = v61;
        uint64_t v72 = v20 & 0x1FFFFFFE0;
        do
        {
          long long v73 = *v70;
          *(v71 - 1) = *(v70 - 1);
          *long long v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 32;
        }
        while (v72);
        if (v20 == v59) {
          goto LABEL_54;
        }
        if ((v20 & 0x18) != 0)
        {
          v66 += v24;
          unint64_t v74 = v64;
          uint64_t v75 = v63;
          unint64_t v76 = v24 - (v20 & 0x1FFFFFFE0);
          do
          {
            uint64_t v77 = *v75++;
            *v74++ = v77;
            v76 -= 8;
          }
          while (v76);
          if (v20 == v24) {
            goto LABEL_54;
          }
          v65 += v24;
          int v67 = v20 & 0xFFFFFFF8;
        }
        else
        {
          v65 += v59;
          v66 += v59;
          int v67 = v20 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v67 = 0;
      }
      unsigned int v68 = v67 + 1;
      do
      {
        char v69 = *v65++;
        *v66++ = v69;
        BOOL v37 = v19 > v68++;
      }
      while (v37);
LABEL_54:
      ++v58;
      v61 += 32;
      unint64_t v62 = (long long *)((char *)v62 + v18);
      int v63 = (uint64_t *)((char *)v63 + v18);
      v64 += 4;
      if (v58 == v13) {
        goto LABEL_39;
      }
    }
  }
  for (uint64_t j = 0; j != v13; ++j)
  {
    uint64_t v22 = 0;
    do
    {
      v16[v22] = *(unsigned char *)(v17 + v22);
      ++v22;
    }
    while (v19 > v22);
    v16 += 32;
    v17 += v18;
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  char v42 = *(char **)(a1 + 48);
  int v43 = *(unsigned __int8 *)(a1 + 88);
  int v44 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v53 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v40 + 1];
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v40];
    LODWORD(result) = (v43 - 8 * v54) & ~((v43 - 8 * (int)v54) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v56 = (v44 - 4 * v53) & ~((v44 - 4 * (int)v53) >> 31);
    if (v56 >= 4) {
      unsigned int v56 = 4;
    }
    if (result) {
      BOOL v57 = v56 == 0;
    }
    else {
      BOOL v57 = 1;
    }
    if (v57)
    {
      char v52 = 0;
    }
    else
    {
      unsigned int v45 = (int32x4_t *)&v78[128 * v53 + 16 * v54];
      float32x2x2_t v46 = (float32x2x2_t)*v45;
      int32x4_t v47 = v45[2];
      int32x4_t v48 = vzip2q_s32(*v45, v47);
      float32x2x2_t v49 = (float32x2x2_t)v45[4];
      int32x4_t v50 = v45[6];
      unsigned int v51 = (float *)v41;
      vst2_f32(v51, v46);
      v51 += 4;
      vst2_f32(v51, v49);
      *(int32x4_t *)(v41 + 32) = v48;
      *(int32x4_t *)(v41 + 48) = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 64;
      char v52 = 63;
    }
    *v42++ = v52;
    v40 += 2;
  }
  while (v40 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  do
  {
    unint64_t v9 = (int32x4_t *)&v61[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5 + 1]
                         + 16
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5]];
    unsigned int v10 = *v7;
    if (v10 == 63)
    {
      int32x4_t v11 = *(int32x4_t *)v6;
      a3 = *(int32x4_t *)(v6 + 16);
      a4 = *(int32x4_t *)(v6 + 32);
      int32x4_t v12 = *(int32x4_t *)(v6 + 48);
      *unint64_t v9 = vuzp1q_s32(*(int32x4_t *)v6, a4);
      v9[2] = vuzp2q_s32(v11, a4);
      v9[4] = vuzp1q_s32(a3, v12);
      a2 = vuzp2q_s32(a3, v12);
      v9[6] = a2;
      uint64_t v8 = 64;
    }
    else if (v10 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v6);
      *unint64_t v9 = a2;
      v9[2] = a2;
      v9[4] = a2;
      v9[6] = a2;
      uint64_t v8 = 2;
    }
    else if (*v7)
    {
      uint64_t v8 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v9, 32, v6, v10, *(int8x8_t *)a2.i8, *(double *)a3.i64, *(int8x8_t *)a4.i8);
    }
    else
    {
      uint64_t v8 = 0;
      v9->i64[0] = 0;
      v9->i64[1] = 0;
      v9[2].i64[0] = 0;
      v9[2].i64[1] = 0;
      v9[4].i64[0] = 0;
      v9[4].i64[1] = 0;
      v9[6].i64[0] = 0;
      v9[6].i64[1] = 0;
    }
    v6 += v8;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    uint64_t v14 = 32 * *(unsigned int *)(a1 + 72);
    uint64_t v15 = 2 * *(unsigned int *)(a1 + 76);
    BOOL v16 = &v61[v14 + v15];
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    unint64_t v19 = 2 * *(unsigned int *)(a1 + 84);
    if (v19 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 2 * *(unsigned int *)(a1 + 84);
    }
    if (v20 <= 7)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v22 = 0;
        do
        {
          v16[v22] = *(unsigned char *)(v17 + v22);
          ++v22;
        }
        while (v19 > v22);
        v16 += 32;
        v17 += v18;
      }
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
    }
    if (v20 && !((v20 - 1) >> 32))
    {
      int v23 = &v61[v14 + v15];
      uint64_t v24 = v20 & 0x1FFFFFFF8;
      if (v20 < 0x20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = &v61[v14 + v15];
        int v27 = *(uint64_t **)(a1 + 56);
        while (1)
        {
          unsigned int v28 = (char *)(v17 + v18 * v25);
          char v29 = &v16[32 * v25];
          if ((unint64_t)(&v23[32 * v25] - v28) > 0x1F)
          {
            v29 += v24;
            uint64_t v31 = v26;
            unsigned int v32 = v27;
            uint64_t v33 = v20 & 0x1FFFFFFF8;
            do
            {
              uint64_t v34 = *v32++;
              *v31++ = v34;
              v33 -= 8;
            }
            while (v33);
            if (v20 == v24) {
              goto LABEL_25;
            }
            v28 += v24;
            int v30 = v20 & 0xFFFFFFF8;
          }
          else
          {
            int v30 = 0;
          }
          unsigned int v35 = v30 + 1;
          do
          {
            char v36 = *v28++;
            *v29++ = v36;
            BOOL v37 = v19 > v35++;
          }
          while (v37);
LABEL_25:
          ++v25;
          int v27 = (uint64_t *)((char *)v27 + v18);
          v26 += 32;
          if (v25 == v13) {
            return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
          }
        }
      }
      uint64_t v41 = 0;
      uint64_t v42 = v20 & 0x1FFFFFFE0;
      int v43 = &v61[v14 + v15];
      int v44 = &v61[v14 + 16 + v15];
      unsigned int v45 = (long long *)(v17 + 16);
      float32x2x2_t v46 = (uint64_t *)(v17 + (v20 & 0x1FFFFFFE0));
      for (uint64_t j = &v43[v20 & 0x1FFFFFFE0]; ; j += 4)
      {
        int32x4_t v48 = (char *)(v17 + v18 * v41);
        float32x2x2_t v49 = &v16[32 * v41];
        if ((unint64_t)(&v23[32 * v41] - v48) >= 0x20)
        {
          uint64_t v53 = v45;
          uint64_t v54 = v44;
          uint64_t v55 = v20 & 0x1FFFFFFE0;
          do
          {
            long long v56 = *v53;
            *(v54 - 1) = *(v53 - 1);
            _OWORD *v54 = v56;
            v54 += 2;
            v53 += 2;
            v55 -= 32;
          }
          while (v55);
          if (v20 == v42) {
            goto LABEL_41;
          }
          if ((v20 & 0x18) != 0)
          {
            v49 += v24;
            BOOL v57 = j;
            uint64_t v58 = v46;
            unint64_t v59 = v24 - (v20 & 0x1FFFFFFE0);
            do
            {
              uint64_t v60 = *v58++;
              *v57++ = v60;
              v59 -= 8;
            }
            while (v59);
            if (v20 == v24) {
              goto LABEL_41;
            }
            v48 += v24;
            int v50 = v20 & 0xFFFFFFF8;
          }
          else
          {
            v48 += v42;
            v49 += v42;
            int v50 = v20 & 0xFFFFFFE0;
          }
        }
        else
        {
          int v50 = 0;
        }
        unsigned int v51 = v50 + 1;
        do
        {
          char v52 = *v48++;
          *v49++ = v52;
          BOOL v37 = v19 > v51++;
        }
        while (v37);
LABEL_41:
        ++v41;
        v44 += 32;
        unsigned int v45 = (long long *)((char *)v45 + v18);
        float32x2x2_t v46 = (uint64_t *)((char *)v46 + v18);
        if (v41 == v13) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
        }
      }
    }
    for (uint64_t k = 0; k != v13; ++k)
    {
      uint64_t v39 = 0;
      do
      {
        v16[v39] = *(unsigned char *)(v17 + v39);
        ++v39;
      }
      while (v19 > v39);
      v16 += 32;
      v17 += v18;
    }
  }
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v61, 32, *(int8x16_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89));
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v56, *(int16x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (!v10) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 84);
  if (!v11) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 76);
  uint64_t v13 = 16 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v11 > 7)
  {
    uint64_t v18 = &v56[v12 + v13];
    uint64_t v19 = v11 & 0xFFFFFFF8;
    if (v11 <= 0x1F)
    {
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = (char *)(v15 + v14 * v20);
        uint64_t v22 = &v18[16 * v20];
        if ((unint64_t)((char *)v22 - v21) > 0x1F)
        {
          *(void *)&long long v3 = *(void *)v21;
          *uint64_t v22 = *(void *)v21;
          if (v19 != 8)
          {
            *(void *)&long long v3 = *((void *)v21 + 1);
            v22[1] = v3;
            if (v19 != 16)
            {
              *(void *)&long long v3 = *((void *)v21 + 2);
              v22[2] = v3;
            }
          }
          if (v19 == v11) {
            goto LABEL_15;
          }
          uint64_t v22 = (void *)((char *)v22 + v19);
          v21 += v19;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        int v24 = v11 - v23;
        do
        {
          char v25 = *v21++;
          *(unsigned char *)uint64_t v22 = v25;
          uint64_t v22 = (void *)((char *)v22 + 1);
          --v24;
        }
        while (v24);
LABEL_15:
        if (++v20 == v10) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
        }
      }
    }
    uint64_t v26 = v11 & 0xFFFFFFE0;
    if (v26 == v11)
    {
      uint64_t v27 = 0;
      unsigned int v28 = &v56[v13 + 16 + v12];
      char v29 = (long long *)(v15 + 16);
      do
      {
        int v30 = (char *)(v15 + v14 * v27);
        uint64_t v31 = v29;
        unsigned int v32 = v28;
        uint64_t v33 = v11;
        if ((unint64_t)(&v18[16 * v27] - v30) >= 0x20)
        {
          do
          {
            long long v3 = *(v31 - 1);
            long long v4 = *v31;
            *(v32 - 1) = v3;
            _OWORD *v32 = v4;
            v32 += 2;
            v31 += 2;
            v33 -= 32;
          }
          while (v33);
        }
        else
        {
          uint64_t v34 = &v18[16 * v27];
          int v35 = v11;
          do
          {
            char v36 = *v30++;
            *v34++ = v36;
            --v35;
          }
          while (v35);
        }
        ++v27;
        v28 += 16;
        char v29 = (long long *)((char *)v29 + v14);
      }
      while (v27 != v10);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
    }
    uint64_t v37 = 0;
    BOOL v38 = &v56[v13 + v12];
    uint64_t v39 = &v56[v13 + 16 + v12];
    uint64_t v40 = (long long *)(v15 + 16);
    uint64_t v41 = (uint64_t *)(v15 + v26);
    for (uint64_t i = &v38[v26]; ; i += 2)
    {
      int v43 = (char *)(v15 + v14 * v37);
      int v44 = &v18[16 * v37];
      if ((unint64_t)(v44 - v43) >= 0x20)
      {
        float32x2x2_t v46 = v40;
        int32x4_t v47 = v39;
        uint64_t v48 = v11 & 0xFFFFFFE0;
        do
        {
          long long v3 = *(v46 - 1);
          long long v4 = *v46;
          *(v47 - 1) = v3;
          _OWORD *v47 = v4;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if ((v11 & 0x18) != 0)
        {
          v44 += v19;
          float32x2x2_t v49 = i;
          int v50 = v41;
          uint64_t v51 = v19 - v26;
          do
          {
            uint64_t v52 = *v50++;
            *(void *)&long long v3 = v52;
            *v49++ = v52;
            v51 -= 8;
          }
          while (v51);
          if (v19 == v11) {
            goto LABEL_36;
          }
          v43 += v19;
          int v45 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v43 += v26;
          v44 += v26;
          int v45 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v45 = 0;
      }
      int v53 = v11 - v45;
      do
      {
        char v54 = *v43++;
        *v44++ = v54;
        --v53;
      }
      while (v53);
LABEL_36:
      ++v37;
      v39 += 16;
      uint64_t v40 = (long long *)((char *)v40 + v14);
      uint64_t v41 = (uint64_t *)((char *)v41 + v14);
      if (v37 == v10) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
      }
    }
  }
  BOOL v16 = &v56[v13 + 3 + v12];
  uint64_t v17 = (unsigned char *)(v15 + 3);
  do
  {
    *(v16 - 3) = *(v17 - 3);
    if (v11 != 1)
    {
      *(v16 - 2) = *(v17 - 2);
      if (v11 != 2)
      {
        *(v16 - 1) = *(v17 - 1);
        if (v11 != 3)
        {
          *BOOL v16 = *v17;
          if (v11 != 4)
          {
            v16[1] = v17[1];
            if (v11 != 5)
            {
              v16[2] = v17[2];
              if (v11 != 6) {
                v16[3] = v17[3];
              }
            }
          }
        }
      }
    }
    v16 += 16;
    v17 += v14;
    --v10;
  }
  while (v10);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v56, *(int16x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (!v10) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 84);
  if (!v11) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 76);
  uint64_t v13 = 16 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v11 > 7)
  {
    uint64_t v18 = &v56[v12 + v13];
    uint64_t v19 = v11 & 0xFFFFFFF8;
    if (v11 <= 0x1F)
    {
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = (char *)(v15 + v14 * v20);
        uint64_t v22 = &v18[16 * v20];
        if ((unint64_t)((char *)v22 - v21) > 0x1F)
        {
          *(void *)&long long v3 = *(void *)v21;
          *uint64_t v22 = *(void *)v21;
          if (v19 != 8)
          {
            *(void *)&long long v3 = *((void *)v21 + 1);
            v22[1] = v3;
            if (v19 != 16)
            {
              *(void *)&long long v3 = *((void *)v21 + 2);
              v22[2] = v3;
            }
          }
          if (v19 == v11) {
            goto LABEL_15;
          }
          uint64_t v22 = (void *)((char *)v22 + v19);
          v21 += v19;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        int v24 = v11 - v23;
        do
        {
          char v25 = *v21++;
          *(unsigned char *)uint64_t v22 = v25;
          uint64_t v22 = (void *)((char *)v22 + 1);
          --v24;
        }
        while (v24);
LABEL_15:
        if (++v20 == v10) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
        }
      }
    }
    uint64_t v26 = v11 & 0xFFFFFFE0;
    if (v26 == v11)
    {
      uint64_t v27 = 0;
      unsigned int v28 = &v56[v13 + 16 + v12];
      char v29 = (long long *)(v15 + 16);
      do
      {
        int v30 = (char *)(v15 + v14 * v27);
        uint64_t v31 = v29;
        unsigned int v32 = v28;
        uint64_t v33 = v11;
        if ((unint64_t)(&v18[16 * v27] - v30) >= 0x20)
        {
          do
          {
            long long v3 = *(v31 - 1);
            long long v4 = *v31;
            *(v32 - 1) = v3;
            _OWORD *v32 = v4;
            v32 += 2;
            v31 += 2;
            v33 -= 32;
          }
          while (v33);
        }
        else
        {
          uint64_t v34 = &v18[16 * v27];
          int v35 = v11;
          do
          {
            char v36 = *v30++;
            *v34++ = v36;
            --v35;
          }
          while (v35);
        }
        ++v27;
        v28 += 16;
        char v29 = (long long *)((char *)v29 + v14);
      }
      while (v27 != v10);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
    }
    uint64_t v37 = 0;
    BOOL v38 = &v56[v13 + v12];
    uint64_t v39 = &v56[v13 + 16 + v12];
    uint64_t v40 = (long long *)(v15 + 16);
    uint64_t v41 = (uint64_t *)(v15 + v26);
    for (uint64_t i = &v38[v26]; ; i += 2)
    {
      int v43 = (char *)(v15 + v14 * v37);
      int v44 = &v18[16 * v37];
      if ((unint64_t)(v44 - v43) >= 0x20)
      {
        float32x2x2_t v46 = v40;
        int32x4_t v47 = v39;
        uint64_t v48 = v11 & 0xFFFFFFE0;
        do
        {
          long long v3 = *(v46 - 1);
          long long v4 = *v46;
          *(v47 - 1) = v3;
          _OWORD *v47 = v4;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if ((v11 & 0x18) != 0)
        {
          v44 += v19;
          float32x2x2_t v49 = i;
          int v50 = v41;
          uint64_t v51 = v19 - v26;
          do
          {
            uint64_t v52 = *v50++;
            *(void *)&long long v3 = v52;
            *v49++ = v52;
            v51 -= 8;
          }
          while (v51);
          if (v19 == v11) {
            goto LABEL_36;
          }
          v43 += v19;
          int v45 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v43 += v26;
          v44 += v26;
          int v45 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v45 = 0;
      }
      int v53 = v11 - v45;
      do
      {
        char v54 = *v43++;
        *v44++ = v54;
        --v53;
      }
      while (v53);
LABEL_36:
      ++v37;
      v39 += 16;
      uint64_t v40 = (long long *)((char *)v40 + v14);
      uint64_t v41 = (uint64_t *)((char *)v41 + v14);
      if (v37 == v10) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
      }
    }
  }
  BOOL v16 = &v56[v13 + 3 + v12];
  uint64_t v17 = (unsigned char *)(v15 + 3);
  do
  {
    *(v16 - 3) = *(v17 - 3);
    if (v11 != 1)
    {
      *(v16 - 2) = *(v17 - 2);
      if (v11 != 2)
      {
        *(v16 - 1) = *(v17 - 1);
        if (v11 != 3)
        {
          *BOOL v16 = *v17;
          if (v11 != 4)
          {
            v16[1] = v17[1];
            if (v11 != 5)
            {
              v16[2] = v17[2];
              if (v11 != 6) {
                v16[3] = v17[3];
              }
            }
          }
        }
      }
    }
    v16 += 16;
    v17 += v14;
    --v10;
  }
  while (v10);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v56, *(int16x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 208) + 52));
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (!v10) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 84);
  if (!v11) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 76);
  uint64_t v13 = 16 * *(unsigned int *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v11 > 7)
  {
    uint64_t v18 = &v56[v12 + v13];
    uint64_t v19 = v11 & 0xFFFFFFF8;
    if (v11 <= 0x1F)
    {
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = (char *)(v15 + v14 * v20);
        uint64_t v22 = &v18[16 * v20];
        if ((unint64_t)((char *)v22 - v21) > 0x1F)
        {
          *(void *)&long long v3 = *(void *)v21;
          *uint64_t v22 = *(void *)v21;
          if (v19 != 8)
          {
            *(void *)&long long v3 = *((void *)v21 + 1);
            v22[1] = v3;
            if (v19 != 16)
            {
              *(void *)&long long v3 = *((void *)v21 + 2);
              v22[2] = v3;
            }
          }
          if (v19 == v11) {
            goto LABEL_15;
          }
          uint64_t v22 = (void *)((char *)v22 + v19);
          v21 += v19;
          int v23 = v11 & 0xFFFFFFF8;
        }
        else
        {
          int v23 = 0;
        }
        int v24 = v11 - v23;
        do
        {
          char v25 = *v21++;
          *(unsigned char *)uint64_t v22 = v25;
          uint64_t v22 = (void *)((char *)v22 + 1);
          --v24;
        }
        while (v24);
LABEL_15:
        if (++v20 == v10) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
        }
      }
    }
    uint64_t v26 = v11 & 0xFFFFFFE0;
    if (v26 == v11)
    {
      uint64_t v27 = 0;
      unsigned int v28 = &v56[v13 + 16 + v12];
      char v29 = (long long *)(v15 + 16);
      do
      {
        int v30 = (char *)(v15 + v14 * v27);
        uint64_t v31 = v29;
        unsigned int v32 = v28;
        uint64_t v33 = v11;
        if ((unint64_t)(&v18[16 * v27] - v30) >= 0x20)
        {
          do
          {
            long long v3 = *(v31 - 1);
            long long v4 = *v31;
            *(v32 - 1) = v3;
            _OWORD *v32 = v4;
            v32 += 2;
            v31 += 2;
            v33 -= 32;
          }
          while (v33);
        }
        else
        {
          uint64_t v34 = &v18[16 * v27];
          int v35 = v11;
          do
          {
            char v36 = *v30++;
            *v34++ = v36;
            --v35;
          }
          while (v35);
        }
        ++v27;
        v28 += 16;
        char v29 = (long long *)((char *)v29 + v14);
      }
      while (v27 != v10);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
    }
    uint64_t v37 = 0;
    BOOL v38 = &v56[v13 + v12];
    uint64_t v39 = &v56[v13 + 16 + v12];
    uint64_t v40 = (long long *)(v15 + 16);
    uint64_t v41 = (uint64_t *)(v15 + v26);
    for (uint64_t i = &v38[v26]; ; i += 2)
    {
      int v43 = (char *)(v15 + v14 * v37);
      int v44 = &v18[16 * v37];
      if ((unint64_t)(v44 - v43) >= 0x20)
      {
        float32x2x2_t v46 = v40;
        int32x4_t v47 = v39;
        uint64_t v48 = v11 & 0xFFFFFFE0;
        do
        {
          long long v3 = *(v46 - 1);
          long long v4 = *v46;
          *(v47 - 1) = v3;
          _OWORD *v47 = v4;
          v47 += 2;
          v46 += 2;
          v48 -= 32;
        }
        while (v48);
        if ((v11 & 0x18) != 0)
        {
          v44 += v19;
          float32x2x2_t v49 = i;
          int v50 = v41;
          uint64_t v51 = v19 - v26;
          do
          {
            uint64_t v52 = *v50++;
            *(void *)&long long v3 = v52;
            *v49++ = v52;
            v51 -= 8;
          }
          while (v51);
          if (v19 == v11) {
            goto LABEL_36;
          }
          v43 += v19;
          int v45 = v11 & 0xFFFFFFF8;
        }
        else
        {
          v43 += v26;
          v44 += v26;
          int v45 = v11 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v45 = 0;
      }
      int v53 = v11 - v45;
      do
      {
        char v54 = *v43++;
        *v44++ = v54;
        --v53;
      }
      while (v53);
LABEL_36:
      ++v37;
      v39 += 16;
      uint64_t v40 = (long long *)((char *)v40 + v14);
      uint64_t v41 = (uint64_t *)((char *)v41 + v14);
      if (v37 == v10) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
      }
    }
  }
  BOOL v16 = &v56[v13 + 3 + v12];
  uint64_t v17 = (unsigned char *)(v15 + 3);
  do
  {
    *(v16 - 3) = *(v17 - 3);
    if (v11 != 1)
    {
      *(v16 - 2) = *(v17 - 2);
      if (v11 != 2)
      {
        *(v16 - 1) = *(v17 - 1);
        if (v11 != 3)
        {
          *BOOL v16 = *v17;
          if (v11 != 4)
          {
            v16[1] = v17[1];
            if (v11 != 5)
            {
              v16[2] = v17[2];
              if (v11 != 6) {
                v16[3] = v17[3];
              }
            }
          }
        }
      }
    }
    v16 += 16;
    v17 += v14;
    --v10;
  }
  while (v10);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v56, 16, *(void *)(a1 + 40), *(unsigned char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), *(_DWORD *)(*(void *)(v2 + 208) + 52), *(double *)&v3, *(double *)&v4, v5, v6, v7, v8, v9);
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v78 = *MEMORY[0x263EF8340];
  long long v3 = *(int8x8_t **)(a1 + 40);
  long long v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v10 = (int8x8_t *)&v77[64
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v2 + 1]
                         + 8
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t v10 = v12;
      v10[2] = v12;
      v10[4] = v12;
      v10[6] = v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int16x4_t v5 = (int16x4_t)*v3;
      int16x4_t v6 = (int16x4_t)v3[1];
      int16x4_t v7 = (int16x4_t)v3[2];
      int16x4_t v8 = (int16x4_t)v3[3];
      *uint64_t v10 = (int8x8_t)vuzp1_s16((int16x4_t)*v3, v7);
      v10[2] = (int8x8_t)vuzp2_s16(v5, v7);
      v10[4] = (int8x8_t)vuzp1_s16(v6, v8);
      v10[6] = (int8x8_t)vuzp2_s16(v6, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t v9 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v10, 16, (uint64_t)v3, v11);
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t v10 = 0;
      v10[2] = 0;
      v10[4] = 0;
      v10[6] = 0;
    }
    long long v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (!v13) {
    goto LABEL_59;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 84);
  if (!v14) {
    goto LABEL_59;
  }
  uint64_t v15 = *(unsigned int *)(a1 + 76);
  uint64_t v16 = 16 * *(unsigned int *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  if (v14 > 7)
  {
    uint64_t v21 = &v77[v15 + v16];
    uint64_t v22 = v14 & 0xFFFFFFF8;
    if (v14 <= 0x1F)
    {
      uint64_t v23 = 0;
      while (1)
      {
        int v24 = (char *)(v18 + v17 * v23);
        char v25 = &v21[16 * v23];
        if ((unint64_t)((char *)v25 - v24) > 0x1F)
        {
          *char v25 = *(void *)v24;
          if (v22 != 8)
          {
            v25[1] = *((void *)v24 + 1);
            if (v22 != 16) {
              v25[2] = *((void *)v24 + 2);
            }
          }
          if (v22 == v14) {
            goto LABEL_24;
          }
          char v25 = (void *)((char *)v25 + v22);
          v24 += v22;
          int v26 = v14 & 0xFFFFFFF8;
        }
        else
        {
          int v26 = 0;
        }
        int v27 = v14 - v26;
        do
        {
          char v28 = *v24++;
          *(unsigned char *)char v25 = v28;
          char v25 = (void *)((char *)v25 + 1);
          --v27;
        }
        while (v27);
LABEL_24:
        if (++v23 == v13) {
          goto LABEL_59;
        }
      }
    }
    uint64_t v29 = v14 & 0xFFFFFFE0;
    if (v29 == v14)
    {
      uint64_t v30 = 0;
      uint64_t v31 = &v77[v16 + 16 + v15];
      unsigned int v32 = (long long *)(v18 + 16);
      do
      {
        uint64_t v33 = (char *)(v18 + v17 * v30);
        uint64_t v34 = v32;
        int v35 = v31;
        uint64_t v36 = v14;
        if ((unint64_t)(&v21[16 * v30] - v33) >= 0x20)
        {
          do
          {
            long long v40 = *v34;
            *(v35 - 1) = *(v34 - 1);
            *int v35 = v40;
            v35 += 2;
            v34 += 2;
            v36 -= 32;
          }
          while (v36);
        }
        else
        {
          uint64_t v37 = &v21[16 * v30];
          int v38 = v14;
          do
          {
            char v39 = *v33++;
            *v37++ = v39;
            --v38;
          }
          while (v38);
        }
        ++v30;
        v31 += 16;
        unsigned int v32 = (long long *)((char *)v32 + v17);
      }
      while (v30 != v13);
      goto LABEL_59;
    }
    uint64_t v41 = 0;
    uint64_t v42 = &v77[v16 + v15];
    int v43 = &v77[v16 + 16 + v15];
    int v44 = (long long *)(v18 + 16);
    int v45 = (uint64_t *)(v18 + v29);
    float32x2x2_t v46 = &v42[v29];
    while (1)
    {
      int32x4_t v47 = (char *)(v18 + v17 * v41);
      uint64_t v48 = &v21[16 * v41];
      if ((unint64_t)(v48 - v47) >= 0x20)
      {
        int v50 = v44;
        uint64_t v51 = v43;
        uint64_t v52 = v14 & 0xFFFFFFE0;
        do
        {
          long long v53 = *v50;
          *(v51 - 1) = *(v50 - 1);
          *uint64_t v51 = v53;
          v51 += 2;
          v50 += 2;
          v52 -= 32;
        }
        while (v52);
        if ((v14 & 0x18) != 0)
        {
          v48 += v22;
          char v54 = v46;
          uint64_t v55 = v45;
          uint64_t v56 = v22 - v29;
          do
          {
            uint64_t v57 = *v55++;
            *v54++ = v57;
            v56 -= 8;
          }
          while (v56);
          if (v22 == v14) {
            goto LABEL_45;
          }
          v47 += v22;
          int v49 = v14 & 0xFFFFFFF8;
        }
        else
        {
          v47 += v29;
          v48 += v29;
          int v49 = v14 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v49 = 0;
      }
      int v58 = v14 - v49;
      do
      {
        char v59 = *v47++;
        *v48++ = v59;
        --v58;
      }
      while (v58);
LABEL_45:
      ++v41;
      v43 += 16;
      int v44 = (long long *)((char *)v44 + v17);
      int v45 = (uint64_t *)((char *)v45 + v17);
      v46 += 2;
      if (v41 == v13) {
        goto LABEL_59;
      }
    }
  }
  uint64_t v19 = &v77[v16 + 3 + v15];
  uint64_t v20 = (unsigned char *)(v18 + 3);
  do
  {
    *(v19 - 3) = *(v20 - 3);
    if (v14 != 1)
    {
      *(v19 - 2) = *(v20 - 2);
      if (v14 != 2)
      {
        *(v19 - 1) = *(v20 - 1);
        if (v14 != 3)
        {
          unsigned char *v19 = *v20;
          if (v14 != 4)
          {
            v19[1] = v20[1];
            if (v14 != 5)
            {
              v19[2] = v20[2];
              if (v14 != 6) {
                v19[3] = v20[3];
              }
            }
          }
        }
      }
    }
    v19 += 16;
    v20 += v17;
    --v13;
  }
  while (v13);
LABEL_59:
  uint64_t v60 = 0;
  uint64_t v61 = *(int16x4_t **)(a1 + 40);
  uint64_t v62 = *(char **)(a1 + 48);
  int v63 = *(unsigned __int8 *)(a1 + 88);
  int v64 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v72 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v60 + 1];
    uint64_t v73 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v60];
    LODWORD(result) = (v63 - 8 * v73) & ~((v63 - 8 * (int)v73) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v75 = (v64 - 4 * v72) & ~((v64 - 4 * (int)v72) >> 31);
    if (v75 >= 4) {
      unsigned int v75 = 4;
    }
    if (result) {
      BOOL v76 = v75 == 0;
    }
    else {
      BOOL v76 = 1;
    }
    if (v76)
    {
      char v71 = 0;
    }
    else
    {
      char v65 = (int16x4_t *)&v77[64 * v72 + 8 * v73];
      int16x4_t v66 = v65[2];
      int16x4_t v67 = vzip1_s16(*v65, v66);
      int16x4_t v68 = vzip2_s16(*v65, v66);
      int16x4_t v69 = v65[4];
      int16x4_t v70 = v65[6];
      *uint64_t v61 = v67;
      v61[1] = vzip1_s16(v69, v70);
      v61[2] = v68;
      v61[3] = vzip2_s16(v69, v70);
      v61 += 4;
      char v71 = 31;
    }
    *v62++ = v71;
    v60 += 2;
  }
  while (v60 != 16);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5, double a6, double a7, int8x8_t a8)
{
  uint64_t v9 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a1 + 40);
  unsigned int v11 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t v14 = (double *)&v62[64
                       * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v9 + 1]
                       + 8
                       * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v9]];
    unsigned int v15 = *v11;
    if (v15 == 96)
    {
      a2.n128_u64[0] = (unint64_t)vdup_lane_s8(*(int8x8_t *)v10, 0);
      *uint64_t v14 = a2.n128_f64[0];
      v14[2] = a2.n128_f64[0];
      v14[4] = a2.n128_f64[0];
      v14[6] = a2.n128_f64[0];
      uint64_t v13 = 1;
    }
    else if (v15 == 31)
    {
      int16x4_t v12 = *(int16x4_t *)v10;
      a3.n128_u64[0] = *(void *)(v10 + 8);
      a4 = *(double *)(v10 + 16);
      a5 = *(double *)(v10 + 24);
      a6 = COERCE_DOUBLE(vuzp1_s16(*(int16x4_t *)v10, *(int16x4_t *)&a4));
      *uint64_t v14 = a6;
      *((int16x4_t *)v14 + 2) = vuzp2_s16(v12, *(int16x4_t *)&a4);
      *((int16x4_t *)v14 + 4) = vuzp1_s16((int16x4_t)a3.n128_u64[0], *(int16x4_t *)&a5);
      a2.n128_u64[0] = (unint64_t)vuzp2_s16((int16x4_t)a3.n128_u64[0], *(int16x4_t *)&a5);
      v14[6] = a2.n128_f64[0];
      uint64_t v13 = 32;
    }
    else if (*v11)
    {
      uint64_t v13 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v14, 16, v10, v15);
    }
    else
    {
      uint64_t v13 = 0;
      *uint64_t v14 = 0.0;
      v14[2] = 0.0;
      v14[4] = 0.0;
      v14[6] = 0.0;
    }
    v10 += v13;
    ++v11;
    v9 += 2;
  }
  while (v9 != 16);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (!v16) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
  }
  uint64_t v17 = *(unsigned int *)(a1 + 84);
  if (!v17) {
    return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 76);
  uint64_t v19 = 16 * *(unsigned int *)(a1 + 72);
  uint64_t v21 = *(__n128 **)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  if (v17 > 7)
  {
    int v24 = &v62[v18 + v19];
    uint64_t v25 = v17 & 0xFFFFFFF8;
    if (v17 <= 0x1F)
    {
      uint64_t v26 = 0;
      while (1)
      {
        int v27 = (unint64_t *)((char *)v21->n128_u64 + v20 * v26);
        char v28 = (unint64_t *)&v24[16 * v26];
        if ((unint64_t)((char *)v28 - (char *)v27) > 0x1F)
        {
          a2.n128_u64[0] = *v27;
          unint64_t *v28 = *v27;
          if (v25 != 8)
          {
            a2.n128_u64[0] = v27[1];
            v28[1] = a2.n128_u64[0];
            if (v25 != 16)
            {
              a2.n128_u64[0] = v27[2];
              v28[2] = a2.n128_u64[0];
            }
          }
          if (v25 == v17) {
            goto LABEL_24;
          }
          char v28 = (unint64_t *)((char *)v28 + v25);
          int v27 = (unint64_t *)((char *)v27 + v25);
          int v29 = v17 & 0xFFFFFFF8;
        }
        else
        {
          int v29 = 0;
        }
        int v30 = v17 - v29;
        do
        {
          char v31 = *(unsigned char *)v27;
          int v27 = (unint64_t *)((char *)v27 + 1);
          *(unsigned char *)char v28 = v31;
          char v28 = (unint64_t *)((char *)v28 + 1);
          --v30;
        }
        while (v30);
LABEL_24:
        if (++v26 == v16) {
          return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
        }
      }
    }
    uint64_t v32 = v17 & 0xFFFFFFE0;
    if (v32 == v17)
    {
      uint64_t v33 = 0;
      uint64_t v34 = (__n128 *)&v62[v19 + 16 + v18];
      int v35 = v21 + 1;
      do
      {
        uint64_t v36 = (char *)v21 + v20 * v33;
        uint64_t v37 = v35;
        int v38 = v34;
        uint64_t v39 = v17;
        if ((unint64_t)(&v24[16 * v33] - v36) >= 0x20)
        {
          do
          {
            a2 = v37[-1];
            a3 = *v37;
            v38[-1] = a2;
            *int v38 = a3;
            v38 += 2;
            v37 += 2;
            v39 -= 32;
          }
          while (v39);
        }
        else
        {
          long long v40 = &v24[16 * v33];
          int v41 = v17;
          do
          {
            char v42 = *v36++;
            *v40++ = v42;
            --v41;
          }
          while (v41);
        }
        ++v33;
        ++v34;
        int v35 = (__n128 *)((char *)v35 + v20);
      }
      while (v33 != v16);
      return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
    }
    uint64_t v43 = 0;
    int v44 = &v62[v19 + v18];
    int v45 = (__n128 *)&v62[v19 + 16 + v18];
    float32x2x2_t v46 = v21 + 1;
    int32x4_t v47 = (unint64_t *)((char *)v21->n128_u64 + v32);
    for (uint64_t i = (unint64_t *)&v44[v32]; ; i += 2)
    {
      int v49 = (char *)v21 + v20 * v43;
      int v50 = &v24[16 * v43];
      if ((unint64_t)(v50 - v49) >= 0x20)
      {
        uint64_t v52 = v46;
        long long v53 = v45;
        uint64_t v54 = v17 & 0xFFFFFFE0;
        do
        {
          a2 = v52[-1];
          a3 = *v52;
          v53[-1] = a2;
          *long long v53 = a3;
          v53 += 2;
          v52 += 2;
          v54 -= 32;
        }
        while (v54);
        if ((v17 & 0x18) != 0)
        {
          v50 += v25;
          uint64_t v55 = i;
          uint64_t v56 = v47;
          uint64_t v57 = v25 - v32;
          do
          {
            unint64_t v58 = *v56++;
            a2.n128_u64[0] = v58;
            *v55++ = v58;
            v57 -= 8;
          }
          while (v57);
          if (v25 == v17) {
            goto LABEL_45;
          }
          v49 += v25;
          int v51 = v17 & 0xFFFFFFF8;
        }
        else
        {
          v49 += v32;
          v50 += v32;
          int v51 = v17 & 0xFFFFFFE0;
        }
      }
      else
      {
        int v51 = 0;
      }
      int v59 = v17 - v51;
      do
      {
        char v60 = *v49++;
        *v50++ = v60;
        --v59;
      }
      while (v59);
LABEL_45:
      ++v43;
      ++v45;
      float32x2x2_t v46 = (__n128 *)((char *)v46 + v20);
      int32x4_t v47 = (unint64_t *)((char *)v47 + v20);
      if (v43 == v16) {
        return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
      }
    }
  }
  uint64_t v22 = &v62[v19 + 3 + v18];
  uint64_t v23 = &v21->n128_u8[3];
  do
  {
    *(v22 - 3) = *(v23 - 3);
    if (v17 != 1)
    {
      *(v22 - 2) = *(v23 - 2);
      if (v17 != 2)
      {
        *(v22 - 1) = *(v23 - 1);
        if (v17 != 3)
        {
          *uint64_t v22 = *v23;
          if (v17 != 4)
          {
            v22[1] = v23[1];
            if (v17 != 5)
            {
              v22[2] = v23[2];
              if (v17 != 6) {
                v22[3] = v23[3];
              }
            }
          }
        }
      }
    }
    v22 += 16;
    v23 += v20;
    --v16;
  }
  while (v16);
  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v62, 16, *(int8x8_t **)(a1 + 40), *(char **)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(unsigned __int8 *)(a1 + 89), a2.n128_f64[0], a3.n128_f64[0], a4, a5, a6, a7, a8);
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v62[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 84);
    if (v18)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v21 = &v62[v19 + v20];
      uint64_t v22 = *(__n128 **)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = 2 * v18;
      if (v24 <= 1) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 7)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          uint64_t v27 = 0;
          do
          {
            v21[v27] = v22->n128_u8[v27];
            ++v27;
          }
          while (v24 > v27);
          v21 += 64;
          uint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      if (!v25 || (unint64_t v28 = (v25 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          uint64_t v50 = 0;
          do
          {
            v21[v50] = v22->n128_u8[v50];
            ++v50;
          }
          while (v24 > v50);
          v21 += 64;
          uint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      int v29 = &v62[v19 + v20];
      uint64_t v30 = v25 & 0x1FFFFFFE0;
      unint64_t result = v25 & 0x1FFFFFFF8;
      char v31 = (__n128 *)&v62[v19 + 16 + v20];
      uint64_t v32 = v22 + 1;
      uint64_t v33 = v21;
      uint64_t v34 = *(void *)(a1 + 56);
      do
      {
        int v35 = (char *)v22 + v23 * v28;
        uint64_t v36 = &v21[64 * v28];
        if ((unint64_t)(&v29[64 * v28] - v35) < 0x20)
        {
          int v37 = 0;
          goto LABEL_31;
        }
        if (v25 >= 0x20)
        {
          uint64_t v39 = v32;
          long long v40 = v31;
          uint64_t v41 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *long long v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
          if (v25 == v30) {
            goto LABEL_17;
          }
          uint64_t v38 = v25 & 0x1FFFFFFE0;
          if ((v25 & 0x18) == 0)
          {
            v35 += v30;
            v36 += v30;
            int v37 = v25 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        v36 += result;
        unint64_t v42 = v38 - (v25 & 0x1FFFFFFF8);
        uint64_t v43 = (unint64_t *)(v34 + v38);
        int v44 = (unint64_t *)&v33[v38];
        do
        {
          unint64_t v45 = *v43++;
          a2.n128_u64[0] = v45;
          *v44++ = v45;
          v42 += 8;
        }
        while (v42);
        if (v25 == result) {
          goto LABEL_17;
        }
        v35 += result;
        int v37 = v25 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v46 = v37 + 1;
        do
        {
          char v47 = *v35++;
          *v36++ = v47;
        }
        while (v24 > v46++);
LABEL_17:
        ++v28;
        v31 += 4;
        uint64_t v32 = (__n128 *)((char *)v32 + v23);
        v34 += v23;
        v33 += 64;
      }
      while (v28 != v17);
    }
  }
LABEL_38:
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(a1 + 40);
  long long v53 = *(unsigned char **)(a1 + 48);
  int v54 = *(unsigned __int8 *)(a1 + 88);
  int v55 = *(unsigned __int8 *)(a1 + 89);
  int v56 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51 + 1];
    uint64_t v58 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51];
    unsigned int v59 = (v54 - 8 * v58) & ~((v54 - 8 * (int)v58) >> 31);
    if (v59 >= 8) {
      unsigned int v59 = 8;
    }
    unsigned int v60 = (v55 - 4 * v57) & ~((v55 - 4 * (int)v57) >> 31);
    if (v60 >= 4) {
      unsigned int v60 = 4;
    }
    if (v59) {
      BOOL v61 = v60 == 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61)
    {
      *long long v53 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::compressSubblock(v52, v53, (int32x4_t *)&v62[256 * v57 + 16 * v58], 64, v59, v60, v56, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13, v14, v15, v16);
      v52 += result;
    }
    ++v53;
    v51 += 2;
  }
  while (v51 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v62[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 84);
    if (v18)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v21 = &v62[v19 + v20];
      uint64_t v22 = *(__n128 **)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = 2 * v18;
      if (v24 <= 1) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 7)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          uint64_t v27 = 0;
          do
          {
            v21[v27] = v22->n128_u8[v27];
            ++v27;
          }
          while (v24 > v27);
          v21 += 64;
          uint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      if (!v25 || (unint64_t v28 = (v25 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          uint64_t v50 = 0;
          do
          {
            v21[v50] = v22->n128_u8[v50];
            ++v50;
          }
          while (v24 > v50);
          v21 += 64;
          uint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      int v29 = &v62[v19 + v20];
      uint64_t v30 = v25 & 0x1FFFFFFE0;
      unint64_t result = v25 & 0x1FFFFFFF8;
      char v31 = (__n128 *)&v62[v19 + 16 + v20];
      uint64_t v32 = v22 + 1;
      uint64_t v33 = v21;
      uint64_t v34 = *(void *)(a1 + 56);
      do
      {
        int v35 = (char *)v22 + v23 * v28;
        uint64_t v36 = &v21[64 * v28];
        if ((unint64_t)(&v29[64 * v28] - v35) < 0x20)
        {
          int v37 = 0;
          goto LABEL_31;
        }
        if (v25 >= 0x20)
        {
          uint64_t v39 = v32;
          long long v40 = v31;
          uint64_t v41 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *long long v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
          if (v25 == v30) {
            goto LABEL_17;
          }
          uint64_t v38 = v25 & 0x1FFFFFFE0;
          if ((v25 & 0x18) == 0)
          {
            v35 += v30;
            v36 += v30;
            int v37 = v25 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        v36 += result;
        unint64_t v42 = v38 - (v25 & 0x1FFFFFFF8);
        uint64_t v43 = (unint64_t *)(v34 + v38);
        int v44 = (unint64_t *)&v33[v38];
        do
        {
          unint64_t v45 = *v43++;
          a2.n128_u64[0] = v45;
          *v44++ = v45;
          v42 += 8;
        }
        while (v42);
        if (v25 == result) {
          goto LABEL_17;
        }
        v35 += result;
        int v37 = v25 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v46 = v37 + 1;
        do
        {
          char v47 = *v35++;
          *v36++ = v47;
        }
        while (v24 > v46++);
LABEL_17:
        ++v28;
        v31 += 4;
        uint64_t v32 = (__n128 *)((char *)v32 + v23);
        v34 += v23;
        v33 += 64;
      }
      while (v28 != v17);
    }
  }
LABEL_38:
  uint64_t v51 = 0;
  unint64_t v52 = *(void *)(a1 + 40);
  long long v53 = *(unsigned char **)(a1 + 48);
  int v54 = *(unsigned __int8 *)(a1 + 88);
  int v55 = *(unsigned __int8 *)(a1 + 89);
  int v56 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51 + 1];
    uint64_t v58 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51];
    unsigned int v59 = (v54 - 8 * v58) & ~((v54 - 8 * (int)v58) >> 31);
    if (v59 >= 8) {
      unsigned int v59 = 8;
    }
    unsigned int v60 = (v55 - 4 * v57) & ~((v55 - 4 * (int)v57) >> 31);
    if (v60 >= 4) {
      unsigned int v60 = 4;
    }
    if (v59) {
      BOOL v61 = v60 == 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61)
    {
      *long long v53 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::compressSubblock(v52, v53, (int32x4_t *)&v62[256 * v57 + 16 * v58], 64, v59, v60, v56, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13, v14, v15, v16);
      v52 += result;
    }
    ++v53;
    v51 += 2;
  }
  while (v51 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v62[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 84);
    if (v18)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v21 = &v62[v19 + v20];
      uint64_t v22 = *(__n128 **)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = 2 * v18;
      if (v24 <= 1) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 7)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          uint64_t v27 = 0;
          do
          {
            v21[v27] = v22->n128_u8[v27];
            ++v27;
          }
          while (v24 > v27);
          v21 += 64;
          uint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      if (!v25 || (unint64_t v28 = (v25 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          uint64_t v50 = 0;
          do
          {
            v21[v50] = v22->n128_u8[v50];
            ++v50;
          }
          while (v24 > v50);
          v21 += 64;
          uint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      int v29 = &v62[v19 + v20];
      uint64_t v30 = v25 & 0x1FFFFFFE0;
      unint64_t result = v25 & 0x1FFFFFFF8;
      char v31 = (__n128 *)&v62[v19 + 16 + v20];
      uint64_t v32 = v22 + 1;
      uint64_t v33 = v21;
      uint64_t v34 = *(void *)(a1 + 56);
      do
      {
        int v35 = (char *)v22 + v23 * v28;
        uint64_t v36 = &v21[64 * v28];
        if ((unint64_t)(&v29[64 * v28] - v35) < 0x20)
        {
          int v37 = 0;
          goto LABEL_31;
        }
        if (v25 >= 0x20)
        {
          uint64_t v39 = v32;
          long long v40 = v31;
          uint64_t v41 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *long long v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
          if (v25 == v30) {
            goto LABEL_17;
          }
          uint64_t v38 = v25 & 0x1FFFFFFE0;
          if ((v25 & 0x18) == 0)
          {
            v35 += v30;
            v36 += v30;
            int v37 = v25 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        v36 += result;
        unint64_t v42 = v38 - (v25 & 0x1FFFFFFF8);
        uint64_t v43 = (unint64_t *)(v34 + v38);
        int v44 = (unint64_t *)&v33[v38];
        do
        {
          unint64_t v45 = *v43++;
          a2.n128_u64[0] = v45;
          *v44++ = v45;
          v42 += 8;
        }
        while (v42);
        if (v25 == result) {
          goto LABEL_17;
        }
        v35 += result;
        int v37 = v25 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v46 = v37 + 1;
        do
        {
          char v47 = *v35++;
          *v36++ = v47;
        }
        while (v24 > v46++);
LABEL_17:
        ++v28;
        v31 += 4;
        uint64_t v32 = (__n128 *)((char *)v32 + v23);
        v34 += v23;
        v33 += 64;
      }
      while (v28 != v17);
    }
  }
LABEL_38:
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(a1 + 40);
  long long v53 = *(unsigned char **)(a1 + 48);
  int v54 = *(unsigned __int8 *)(a1 + 88);
  int v55 = *(unsigned __int8 *)(a1 + 89);
  int v56 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51 + 1];
    uint64_t v58 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51];
    unsigned int v59 = (v54 - 8 * v58) & ~((v54 - 8 * (int)v58) >> 31);
    if (v59 >= 8) {
      unsigned int v59 = 8;
    }
    unsigned int v60 = (v55 - 4 * v57) & ~((v55 - 4 * (int)v57) >> 31);
    if (v60 >= 4) {
      unsigned int v60 = 4;
    }
    if (v59) {
      BOOL v61 = v60 == 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61)
    {
      *long long v53 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::compressSubblock(v52, v53, (int32x4_t *)&v62[256 * v57 + 16 * v58], 64, v59, v60, v56, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13, v14, v15, v16);
      v52 += result;
    }
    ++v53;
    v51 += 2;
  }
  while (v51 != 64);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    int16x4_t v7 = (int32x4_t *)((char *)v7
                     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v64[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5));
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 84);
    if (v11)
    {
      unint64_t v12 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v13 = 2 * *(unsigned int *)(a1 + 76);
      double v14 = &v64[v12 + v13];
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 64);
      unint64_t v17 = 2 * v11;
      if (v17 <= 1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 <= 7)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v20 = 0;
          do
          {
            v14[v20] = *(unsigned char *)(v15 + v20);
            ++v20;
          }
          while (v17 > v20);
          v14 += 64;
          v15 += v16;
        }
        goto LABEL_38;
      }
      if (!v18 || (unint64_t v21 = (v18 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          uint64_t v45 = 0;
          do
          {
            v14[v45] = *(unsigned char *)(v15 + v45);
            ++v45;
          }
          while (v17 > v45);
          v14 += 64;
          v15 += v16;
        }
        goto LABEL_38;
      }
      uint64_t v22 = &v64[v12 + v13];
      uint64_t v23 = v18 & 0x1FFFFFFE0;
      uint64_t v24 = v18 & 0x1FFFFFFF8;
      unint64_t v25 = &v64[v12 + 16 + v13];
      uint64_t v26 = (long long *)(v15 + 16);
      uint64_t v27 = v14;
      uint64_t v28 = *(void *)(a1 + 56);
      do
      {
        int v29 = (char *)(v15 + v16 * v21);
        uint64_t v30 = &v14[64 * v21];
        if ((unint64_t)(&v22[64 * v21] - v29) < 0x20)
        {
          int v31 = 0;
          goto LABEL_31;
        }
        if (v18 >= 0x20)
        {
          uint64_t v33 = v26;
          uint64_t v34 = v25;
          uint64_t v35 = v18 & 0x1FFFFFFE0;
          do
          {
            long long v36 = *v33;
            *(v34 - 1) = *(v33 - 1);
            *uint64_t v34 = v36;
            v34 += 2;
            v33 += 2;
            v35 -= 32;
          }
          while (v35);
          if (v18 == v23) {
            goto LABEL_17;
          }
          uint64_t v32 = v18 & 0x1FFFFFFE0;
          if ((v18 & 0x18) == 0)
          {
            v29 += v23;
            v30 += v23;
            int v31 = v18 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        v30 += v24;
        unint64_t v37 = v32 - (v18 & 0x1FFFFFFF8);
        uint64_t v38 = (uint64_t *)(v28 + v32);
        uint64_t v39 = &v27[v32];
        do
        {
          uint64_t v40 = *v38++;
          *v39++ = v40;
          v37 += 8;
        }
        while (v37);
        if (v18 == v24) {
          goto LABEL_17;
        }
        v29 += v24;
        int v31 = v18 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v41 = v31 + 1;
        do
        {
          char v42 = *v29++;
          *v30++ = v42;
        }
        while (v17 > v41++);
LABEL_17:
        ++v21;
        v25 += 64;
        uint64_t v26 = (long long *)((char *)v26 + v16);
        v28 += v16;
        v27 += 64;
      }
      while (v21 != v10);
    }
  }
LABEL_38:
  uint64_t v46 = 0;
  uint64_t v47 = *(void *)(a1 + 40);
  uint64_t v48 = *(char **)(a1 + 48);
  int v49 = *(unsigned __int8 *)(a1 + 88);
  int v50 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v59 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v46 + 1];
    uint64_t v60 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v46];
    LODWORD(result) = (v49 - 8 * v60) & ~((v49 - 8 * (int)v60) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v62 = (v50 - 4 * v59) & ~((v50 - 4 * (int)v59) >> 31);
    if (v62 >= 4) {
      unsigned int v62 = 4;
    }
    if (result) {
      BOOL v63 = v62 == 0;
    }
    else {
      BOOL v63 = 1;
    }
    if (v63)
    {
      char v58 = 0;
    }
    else
    {
      uint64_t v51 = (int32x4_t *)&v64[256 * v59 + 16 * v60];
      float32x2x2_t v52 = (float32x2x2_t)*v51;
      int32x4_t v53 = v51[4];
      int32x4_t v54 = vzip2q_s32(*v51, v53);
      float32x2x2_t v55 = (float32x2x2_t)v51[8];
      int32x4_t v56 = v51[12];
      uint64_t v57 = (float *)v47;
      vst2_f32(v57, v52);
      v57 += 4;
      vst2_f32(v57, v55);
      *(int32x4_t *)(v47 + 32) = v54;
      *(int32x4_t *)(v47 + 48) = vzip2q_s32((int32x4_t)v55, v56);
      v47 += 64;
      char v58 = 63;
    }
    *v48++ = v58;
    v46 += 2;
  }
  while (v46 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v59[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 84);
    if (v16)
    {
      unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v18 = 2 * *(unsigned int *)(a1 + 76);
      unint64_t v19 = &v59[v17 + v18];
      uint64_t v20 = *(__n128 **)(a1 + 56);
      uint64_t v21 = *(void *)(a1 + 64);
      unint64_t v22 = 2 * v16;
      if (v22 <= 1) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23 <= 7)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v25 = 0;
          do
          {
            v19[v25] = v20->n128_u8[v25];
            ++v25;
          }
          while (v22 > v25);
          v19 += 64;
          uint64_t v20 = (__n128 *)((char *)v20 + v21);
        }
        goto LABEL_38;
      }
      if (!v23 || (unint64_t v26 = (v23 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          uint64_t v48 = 0;
          do
          {
            v19[v48] = v20->n128_u8[v48];
            ++v48;
          }
          while (v22 > v48);
          v19 += 64;
          uint64_t v20 = (__n128 *)((char *)v20 + v21);
        }
        goto LABEL_38;
      }
      uint64_t v27 = &v59[v17 + v18];
      uint64_t v28 = v23 & 0x1FFFFFFE0;
      unint64_t result = v23 & 0x1FFFFFFF8;
      int v29 = (__n128 *)&v59[v17 + 16 + v18];
      uint64_t v30 = v20 + 1;
      int v31 = v19;
      uint64_t v32 = *(void *)(a1 + 56);
      do
      {
        uint64_t v33 = (char *)v20 + v21 * v26;
        uint64_t v34 = &v19[64 * v26];
        if ((unint64_t)(&v27[64 * v26] - v33) < 0x20)
        {
          int v35 = 0;
          goto LABEL_31;
        }
        if (v23 >= 0x20)
        {
          unint64_t v37 = v30;
          uint64_t v38 = v29;
          uint64_t v39 = v23 & 0x1FFFFFFE0;
          do
          {
            a2 = v37[-1];
            a3 = *v37;
            v38[-1] = a2;
            *uint64_t v38 = a3;
            v38 += 2;
            v37 += 2;
            v39 -= 32;
          }
          while (v39);
          if (v23 == v28) {
            goto LABEL_17;
          }
          uint64_t v36 = v23 & 0x1FFFFFFE0;
          if ((v23 & 0x18) == 0)
          {
            v33 += v28;
            v34 += v28;
            int v35 = v23 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        v34 += result;
        unint64_t v40 = v36 - (v23 & 0x1FFFFFFF8);
        unsigned int v41 = (unint64_t *)(v32 + v36);
        char v42 = (unint64_t *)&v31[v36];
        do
        {
          unint64_t v43 = *v41++;
          a2.n128_u64[0] = v43;
          *v42++ = v43;
          v40 += 8;
        }
        while (v40);
        if (v23 == result) {
          goto LABEL_17;
        }
        v33 += result;
        int v35 = v23 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v44 = v35 + 1;
        do
        {
          char v45 = *v33++;
          *v34++ = v45;
        }
        while (v22 > v44++);
LABEL_17:
        ++v26;
        v29 += 4;
        uint64_t v30 = (__n128 *)((char *)v30 + v21);
        v32 += v21;
        v31 += 64;
      }
      while (v26 != v15);
    }
  }
LABEL_38:
  uint64_t v49 = 0;
  unint64_t v50 = *(void *)(a1 + 40);
  uint64_t v51 = *(char **)(a1 + 48);
  int v52 = *(unsigned __int8 *)(a1 + 88);
  int v53 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v49 + 1];
    uint64_t v55 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v49];
    unsigned int v56 = (v52 - 8 * v55) & ~((v52 - 8 * (int)v55) >> 31);
    if (v56 >= 8) {
      unsigned int v56 = 8;
    }
    unsigned int v57 = (v53 - 4 * v54) & ~((v53 - 4 * (int)v54) >> 31);
    if (v57 >= 4) {
      unsigned int v57 = 4;
    }
    if (v56) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 1;
    }
    if (v58)
    {
      *uint64_t v51 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::compressSubblock(v50, v51, (int32x4_t *)&v59[256 * v54 + 16 * v55], 64, v56, v57, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v11, v12, v13, v14);
      v50 += result;
    }
    ++v51;
    v49 += 2;
  }
  while (v49 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v59[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 84);
    if (v15)
    {
      unint64_t v16 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v17 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v18 = &v59[v16 + v17];
      unint64_t v19 = *(__n128 **)(a1 + 56);
      uint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = 2 * v15;
      if (v21 <= 1) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22 <= 7)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          uint64_t v24 = 0;
          do
          {
            v18[v24] = v19->n128_u8[v24];
            ++v24;
          }
          while (v21 > v24);
          v18 += 64;
          unint64_t v19 = (__n128 *)((char *)v19 + v20);
        }
        goto LABEL_38;
      }
      if (!v22 || (unint64_t v25 = (v22 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          uint64_t v47 = 0;
          do
          {
            v18[v47] = v19->n128_u8[v47];
            ++v47;
          }
          while (v21 > v47);
          v18 += 64;
          unint64_t v19 = (__n128 *)((char *)v19 + v20);
        }
        goto LABEL_38;
      }
      unint64_t v26 = &v59[v16 + v17];
      uint64_t v27 = v22 & 0x1FFFFFFE0;
      unint64_t result = v22 & 0x1FFFFFFF8;
      uint64_t v28 = (__n128 *)&v59[v16 + 16 + v17];
      int v29 = v19 + 1;
      uint64_t v30 = v18;
      uint64_t v31 = *(void *)(a1 + 56);
      do
      {
        uint64_t v32 = (char *)v19 + v20 * v25;
        uint64_t v33 = &v18[64 * v25];
        if ((unint64_t)(&v26[64 * v25] - v32) < 0x20)
        {
          int v34 = 0;
          goto LABEL_31;
        }
        if (v22 >= 0x20)
        {
          uint64_t v36 = v29;
          unint64_t v37 = v28;
          uint64_t v38 = v22 & 0x1FFFFFFE0;
          do
          {
            a2 = v36[-1];
            a3 = *v36;
            v37[-1] = a2;
            *unint64_t v37 = a3;
            v37 += 2;
            v36 += 2;
            v38 -= 32;
          }
          while (v38);
          if (v22 == v27) {
            goto LABEL_17;
          }
          uint64_t v35 = v22 & 0x1FFFFFFE0;
          if ((v22 & 0x18) == 0)
          {
            v32 += v27;
            v33 += v27;
            int v34 = v22 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        v33 += result;
        unint64_t v39 = v35 - (v22 & 0x1FFFFFFF8);
        unint64_t v40 = (unint64_t *)(v31 + v35);
        unsigned int v41 = (unint64_t *)&v30[v35];
        do
        {
          unint64_t v42 = *v40++;
          a2.n128_u64[0] = v42;
          *v41++ = v42;
          v39 += 8;
        }
        while (v39);
        if (v22 == result) {
          goto LABEL_17;
        }
        v32 += result;
        int v34 = v22 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v43 = v34 + 1;
        do
        {
          char v44 = *v32++;
          *v33++ = v44;
        }
        while (v21 > v43++);
LABEL_17:
        ++v25;
        v28 += 4;
        int v29 = (__n128 *)((char *)v29 + v20);
        v31 += v20;
        v30 += 64;
      }
      while (v25 != v14);
    }
  }
LABEL_38:
  uint64_t v48 = 0;
  unint64_t v49 = *(void *)(a1 + 40);
  unint64_t v50 = *(unsigned char **)(a1 + 48);
  int v51 = *(unsigned __int8 *)(a1 + 88);
  int v52 = *(unsigned __int8 *)(a1 + 89);
  int v53 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v48 + 1];
    uint64_t v55 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v48];
    unsigned int v56 = (v51 - 8 * v55) & ~((v51 - 8 * (int)v55) >> 31);
    if (v56 >= 8) {
      unsigned int v56 = 8;
    }
    unsigned int v57 = (v52 - 4 * v54) & ~((v52 - 4 * (int)v54) >> 31);
    if (v57 >= 4) {
      unsigned int v57 = 4;
    }
    if (v56) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 1;
    }
    if (v58)
    {
      unsigned char *v50 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v49, v50, (int32x4_t *)&v59[256 * v54 + 16 * v55], 64, v56, v57, v53, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13);
      v49 += result;
    }
    ++v50;
    v48 += 2;
  }
  while (v48 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v59[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 84);
    if (v15)
    {
      unint64_t v16 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v17 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v18 = &v59[v16 + v17];
      unint64_t v19 = *(__n128 **)(a1 + 56);
      uint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = 2 * v15;
      if (v21 <= 1) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22 <= 7)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          uint64_t v24 = 0;
          do
          {
            v18[v24] = v19->n128_u8[v24];
            ++v24;
          }
          while (v21 > v24);
          v18 += 64;
          unint64_t v19 = (__n128 *)((char *)v19 + v20);
        }
        goto LABEL_38;
      }
      if (!v22 || (unint64_t v25 = (v22 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          uint64_t v47 = 0;
          do
          {
            v18[v47] = v19->n128_u8[v47];
            ++v47;
          }
          while (v21 > v47);
          v18 += 64;
          unint64_t v19 = (__n128 *)((char *)v19 + v20);
        }
        goto LABEL_38;
      }
      unint64_t v26 = &v59[v16 + v17];
      uint64_t v27 = v22 & 0x1FFFFFFE0;
      unint64_t result = v22 & 0x1FFFFFFF8;
      uint64_t v28 = (__n128 *)&v59[v16 + 16 + v17];
      int v29 = v19 + 1;
      uint64_t v30 = v18;
      uint64_t v31 = *(void *)(a1 + 56);
      do
      {
        uint64_t v32 = (char *)v19 + v20 * v25;
        uint64_t v33 = &v18[64 * v25];
        if ((unint64_t)(&v26[64 * v25] - v32) < 0x20)
        {
          int v34 = 0;
          goto LABEL_31;
        }
        if (v22 >= 0x20)
        {
          uint64_t v36 = v29;
          unint64_t v37 = v28;
          uint64_t v38 = v22 & 0x1FFFFFFE0;
          do
          {
            a2 = v36[-1];
            a3 = *v36;
            v37[-1] = a2;
            *unint64_t v37 = a3;
            v37 += 2;
            v36 += 2;
            v38 -= 32;
          }
          while (v38);
          if (v22 == v27) {
            goto LABEL_17;
          }
          uint64_t v35 = v22 & 0x1FFFFFFE0;
          if ((v22 & 0x18) == 0)
          {
            v32 += v27;
            v33 += v27;
            int v34 = v22 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        v33 += result;
        unint64_t v39 = v35 - (v22 & 0x1FFFFFFF8);
        unint64_t v40 = (unint64_t *)(v31 + v35);
        unsigned int v41 = (unint64_t *)&v30[v35];
        do
        {
          unint64_t v42 = *v40++;
          a2.n128_u64[0] = v42;
          *v41++ = v42;
          v39 += 8;
        }
        while (v39);
        if (v22 == result) {
          goto LABEL_17;
        }
        v32 += result;
        int v34 = v22 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v43 = v34 + 1;
        do
        {
          char v44 = *v32++;
          *v33++ = v44;
        }
        while (v21 > v43++);
LABEL_17:
        ++v25;
        v28 += 4;
        int v29 = (__n128 *)((char *)v29 + v20);
        v31 += v20;
        v30 += 64;
      }
      while (v25 != v14);
    }
  }
LABEL_38:
  uint64_t v48 = 0;
  uint64_t v49 = *(void *)(a1 + 40);
  unint64_t v50 = *(unsigned char **)(a1 + 48);
  int v51 = *(unsigned __int8 *)(a1 + 88);
  int v52 = *(unsigned __int8 *)(a1 + 89);
  int v53 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v48 + 1];
    uint64_t v55 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v48];
    unsigned int v56 = (v51 - 8 * v55) & ~((v51 - 8 * (int)v55) >> 31);
    if (v56 >= 8) {
      unsigned int v56 = 8;
    }
    unsigned int v57 = (v52 - 4 * v54) & ~((v52 - 4 * (int)v54) >> 31);
    if (v57 >= 4) {
      unsigned int v57 = 4;
    }
    if (v56) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 1;
    }
    if (v58)
    {
      unsigned char *v50 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v49, v50, (int32x4_t *)&v59[256 * v54 + 16 * v55], 64, v56, v57, v53, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13);
      v49 += result;
    }
    ++v50;
    v48 += 2;
  }
  while (v48 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v59[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 84);
    if (v15)
    {
      unint64_t v16 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v17 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v18 = &v59[v16 + v17];
      unint64_t v19 = *(__n128 **)(a1 + 56);
      uint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = 2 * v15;
      if (v21 <= 1) {
        unint64_t v22 = 1;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22 <= 7)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          uint64_t v24 = 0;
          do
          {
            v18[v24] = v19->n128_u8[v24];
            ++v24;
          }
          while (v21 > v24);
          v18 += 64;
          unint64_t v19 = (__n128 *)((char *)v19 + v20);
        }
        goto LABEL_38;
      }
      if (!v22 || (unint64_t v25 = (v22 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          uint64_t v47 = 0;
          do
          {
            v18[v47] = v19->n128_u8[v47];
            ++v47;
          }
          while (v21 > v47);
          v18 += 64;
          unint64_t v19 = (__n128 *)((char *)v19 + v20);
        }
        goto LABEL_38;
      }
      unint64_t v26 = &v59[v16 + v17];
      uint64_t v27 = v22 & 0x1FFFFFFE0;
      unint64_t result = v22 & 0x1FFFFFFF8;
      uint64_t v28 = (__n128 *)&v59[v16 + 16 + v17];
      int v29 = v19 + 1;
      uint64_t v30 = v18;
      uint64_t v31 = *(void *)(a1 + 56);
      do
      {
        uint64_t v32 = (char *)v19 + v20 * v25;
        uint64_t v33 = &v18[64 * v25];
        if ((unint64_t)(&v26[64 * v25] - v32) < 0x20)
        {
          int v34 = 0;
          goto LABEL_31;
        }
        if (v22 >= 0x20)
        {
          uint64_t v36 = v29;
          unint64_t v37 = v28;
          uint64_t v38 = v22 & 0x1FFFFFFE0;
          do
          {
            a2 = v36[-1];
            a3 = *v36;
            v37[-1] = a2;
            *unint64_t v37 = a3;
            v37 += 2;
            v36 += 2;
            v38 -= 32;
          }
          while (v38);
          if (v22 == v27) {
            goto LABEL_17;
          }
          uint64_t v35 = v22 & 0x1FFFFFFE0;
          if ((v22 & 0x18) == 0)
          {
            v32 += v27;
            v33 += v27;
            int v34 = v22 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        v33 += result;
        unint64_t v39 = v35 - (v22 & 0x1FFFFFFF8);
        unint64_t v40 = (unint64_t *)(v31 + v35);
        unsigned int v41 = (unint64_t *)&v30[v35];
        do
        {
          unint64_t v42 = *v40++;
          a2.n128_u64[0] = v42;
          *v41++ = v42;
          v39 += 8;
        }
        while (v39);
        if (v22 == result) {
          goto LABEL_17;
        }
        v32 += result;
        int v34 = v22 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v43 = v34 + 1;
        do
        {
          char v44 = *v32++;
          *v33++ = v44;
        }
        while (v21 > v43++);
LABEL_17:
        ++v25;
        v28 += 4;
        int v29 = (__n128 *)((char *)v29 + v20);
        v31 += v20;
        v30 += 64;
      }
      while (v25 != v14);
    }
  }
LABEL_38:
  uint64_t v48 = 0;
  uint64_t v49 = *(void *)(a1 + 40);
  unint64_t v50 = *(unsigned char **)(a1 + 48);
  int v51 = *(unsigned __int8 *)(a1 + 88);
  int v52 = *(unsigned __int8 *)(a1 + 89);
  int v53 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v48 + 1];
    uint64_t v55 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v48];
    unsigned int v56 = (v51 - 8 * v55) & ~((v51 - 8 * (int)v55) >> 31);
    if (v56 >= 8) {
      unsigned int v56 = 8;
    }
    unsigned int v57 = (v52 - 4 * v54) & ~((v52 - 4 * (int)v54) >> 31);
    if (v57 >= 4) {
      unsigned int v57 = 4;
    }
    if (v56) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 1;
    }
    if (v58)
    {
      unsigned char *v50 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v49, v50, (int32x4_t *)&v59[256 * v54 + 16 * v55], 64, v56, v57, v53, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13);
      v49 += result;
    }
    ++v50;
    v48 += 2;
  }
  while (v48 != 64);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v9 = *v8++;
    int16x4_t v7 = (int32x4_t *)((char *)v7
                     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v64[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5));
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 84);
    if (v11)
    {
      unint64_t v12 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v13 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v14 = &v64[v12 + v13];
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 64);
      unint64_t v17 = 2 * v11;
      if (v17 <= 1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 <= 7)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v20 = 0;
          do
          {
            v14[v20] = *(unsigned char *)(v15 + v20);
            ++v20;
          }
          while (v17 > v20);
          v14 += 64;
          v15 += v16;
        }
        goto LABEL_38;
      }
      if (!v18 || (unint64_t v21 = (v18 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          uint64_t v45 = 0;
          do
          {
            v14[v45] = *(unsigned char *)(v15 + v45);
            ++v45;
          }
          while (v17 > v45);
          v14 += 64;
          v15 += v16;
        }
        goto LABEL_38;
      }
      unint64_t v22 = &v64[v12 + v13];
      uint64_t v23 = v18 & 0x1FFFFFFE0;
      uint64_t v24 = v18 & 0x1FFFFFFF8;
      unint64_t v25 = &v64[v12 + 16 + v13];
      unint64_t v26 = (long long *)(v15 + 16);
      uint64_t v27 = v14;
      uint64_t v28 = *(void *)(a1 + 56);
      do
      {
        int v29 = (char *)(v15 + v16 * v21);
        uint64_t v30 = &v14[64 * v21];
        if ((unint64_t)(&v22[64 * v21] - v29) < 0x20)
        {
          int v31 = 0;
          goto LABEL_31;
        }
        if (v18 >= 0x20)
        {
          uint64_t v33 = v26;
          int v34 = v25;
          uint64_t v35 = v18 & 0x1FFFFFFE0;
          do
          {
            long long v36 = *v33;
            *(v34 - 1) = *(v33 - 1);
            *int v34 = v36;
            v34 += 2;
            v33 += 2;
            v35 -= 32;
          }
          while (v35);
          if (v18 == v23) {
            goto LABEL_17;
          }
          uint64_t v32 = v18 & 0x1FFFFFFE0;
          if ((v18 & 0x18) == 0)
          {
            v29 += v23;
            v30 += v23;
            int v31 = v18 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        v30 += v24;
        unint64_t v37 = v32 - (v18 & 0x1FFFFFFF8);
        uint64_t v38 = (uint64_t *)(v28 + v32);
        unint64_t v39 = &v27[v32];
        do
        {
          uint64_t v40 = *v38++;
          *v39++ = v40;
          v37 += 8;
        }
        while (v37);
        if (v18 == v24) {
          goto LABEL_17;
        }
        v29 += v24;
        int v31 = v18 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v41 = v31 + 1;
        do
        {
          char v42 = *v29++;
          *v30++ = v42;
        }
        while (v17 > v41++);
LABEL_17:
        ++v21;
        v25 += 64;
        unint64_t v26 = (long long *)((char *)v26 + v16);
        v28 += v16;
        v27 += 64;
      }
      while (v21 != v10);
    }
  }
LABEL_38:
  uint64_t v46 = 0;
  uint64_t v47 = *(void *)(a1 + 40);
  uint64_t v48 = *(char **)(a1 + 48);
  int v49 = *(unsigned __int8 *)(a1 + 88);
  int v50 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v59 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v46 + 1];
    uint64_t v60 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v46];
    LODWORD(result) = (v49 - 8 * v60) & ~((v49 - 8 * (int)v60) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v62 = (v50 - 4 * v59) & ~((v50 - 4 * (int)v59) >> 31);
    if (v62 >= 4) {
      unsigned int v62 = 4;
    }
    if (result) {
      BOOL v63 = v62 == 0;
    }
    else {
      BOOL v63 = 1;
    }
    if (v63)
    {
      char v58 = 0;
    }
    else
    {
      int v51 = (int32x4_t *)&v64[256 * v59 + 16 * v60];
      float32x2x2_t v52 = (float32x2x2_t)*v51;
      int32x4_t v53 = v51[4];
      int32x4_t v54 = vzip2q_s32(*v51, v53);
      float32x2x2_t v55 = (float32x2x2_t)v51[8];
      int32x4_t v56 = v51[12];
      unsigned int v57 = (float *)v47;
      vst2_f32(v57, v52);
      v57 += 4;
      vst2_f32(v57, v55);
      *(int32x4_t *)(v47 + 32) = v54;
      *(int32x4_t *)(v47 + 48) = vzip2q_s32((int32x4_t)v55, v56);
      v47 += 64;
      char v58 = 63;
    }
    *v48++ = v58;
    v46 += 2;
  }
  while (v46 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v9 = *v8++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v59[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 84);
    if (v16)
    {
      unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v18 = 2 * *(unsigned int *)(a1 + 76);
      unint64_t v19 = &v59[v17 + v18];
      uint64_t v20 = *(__n128 **)(a1 + 56);
      uint64_t v21 = *(void *)(a1 + 64);
      unint64_t v22 = 2 * v16;
      if (v22 <= 1) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23 <= 7)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v25 = 0;
          do
          {
            v19[v25] = v20->n128_u8[v25];
            ++v25;
          }
          while (v22 > v25);
          v19 += 64;
          uint64_t v20 = (__n128 *)((char *)v20 + v21);
        }
        goto LABEL_38;
      }
      if (!v23 || (unint64_t v26 = (v23 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          uint64_t v48 = 0;
          do
          {
            v19[v48] = v20->n128_u8[v48];
            ++v48;
          }
          while (v22 > v48);
          v19 += 64;
          uint64_t v20 = (__n128 *)((char *)v20 + v21);
        }
        goto LABEL_38;
      }
      uint64_t v27 = &v59[v17 + v18];
      uint64_t v28 = v23 & 0x1FFFFFFE0;
      unint64_t result = v23 & 0x1FFFFFFF8;
      int v29 = (__n128 *)&v59[v17 + 16 + v18];
      uint64_t v30 = v20 + 1;
      int v31 = v19;
      uint64_t v32 = *(void *)(a1 + 56);
      do
      {
        uint64_t v33 = (char *)v20 + v21 * v26;
        int v34 = &v19[64 * v26];
        if ((unint64_t)(&v27[64 * v26] - v33) < 0x20)
        {
          int v35 = 0;
          goto LABEL_31;
        }
        if (v23 >= 0x20)
        {
          unint64_t v37 = v30;
          uint64_t v38 = v29;
          uint64_t v39 = v23 & 0x1FFFFFFE0;
          do
          {
            a2 = v37[-1];
            a3 = *v37;
            v38[-1] = a2;
            *uint64_t v38 = a3;
            v38 += 2;
            v37 += 2;
            v39 -= 32;
          }
          while (v39);
          if (v23 == v28) {
            goto LABEL_17;
          }
          uint64_t v36 = v23 & 0x1FFFFFFE0;
          if ((v23 & 0x18) == 0)
          {
            v33 += v28;
            v34 += v28;
            int v35 = v23 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        v34 += result;
        unint64_t v40 = v36 - (v23 & 0x1FFFFFFF8);
        unsigned int v41 = (unint64_t *)(v32 + v36);
        char v42 = (unint64_t *)&v31[v36];
        do
        {
          unint64_t v43 = *v41++;
          a2.n128_u64[0] = v43;
          *v42++ = v43;
          v40 += 8;
        }
        while (v40);
        if (v23 == result) {
          goto LABEL_17;
        }
        v33 += result;
        int v35 = v23 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v44 = v35 + 1;
        do
        {
          char v45 = *v33++;
          *v34++ = v45;
        }
        while (v22 > v44++);
LABEL_17:
        ++v26;
        v29 += 4;
        uint64_t v30 = (__n128 *)((char *)v30 + v21);
        v32 += v21;
        v31 += 64;
      }
      while (v26 != v15);
    }
  }
LABEL_38:
  uint64_t v49 = 0;
  int v50 = *(int8x16_t **)(a1 + 40);
  int v51 = *(char **)(a1 + 48);
  int v52 = *(unsigned __int8 *)(a1 + 88);
  int v53 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v49 + 1];
    uint64_t v55 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v49];
    unsigned int v56 = (v52 - 8 * v55) & ~((v52 - 8 * (int)v55) >> 31);
    if (v56 >= 8) {
      unsigned int v56 = 8;
    }
    unsigned int v57 = (v53 - 4 * v54) & ~((v53 - 4 * (int)v54) >> 31);
    if (v57 >= 4) {
      unsigned int v57 = 4;
    }
    if (v56) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 1;
    }
    if (v58)
    {
      *int v51 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v50, v51, (int32x4_t *)&v59[256 * v54 + 16 * v55], 64, v56, v57, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v11, v12, v13, v14);
      int v50 = (int8x16_t *)((char *)v50 + result);
    }
    ++v51;
    v49 += 2;
  }
  while (v49 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  unsigned int v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v62[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 84);
    if (v18)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v21 = &v62[v19 + v20];
      unint64_t v22 = *(__n128 **)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = 2 * v18;
      if (v24 <= 1) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 7)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          uint64_t v27 = 0;
          do
          {
            v21[v27] = v22->n128_u8[v27];
            ++v27;
          }
          while (v24 > v27);
          v21 += 64;
          unint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      if (!v25 || (unint64_t v28 = (v25 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          uint64_t v50 = 0;
          do
          {
            v21[v50] = v22->n128_u8[v50];
            ++v50;
          }
          while (v24 > v50);
          v21 += 64;
          unint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      int v29 = &v62[v19 + v20];
      uint64_t v30 = v25 & 0x1FFFFFFE0;
      unint64_t result = v25 & 0x1FFFFFFF8;
      int v31 = (__n128 *)&v62[v19 + 16 + v20];
      uint64_t v32 = v22 + 1;
      uint64_t v33 = v21;
      uint64_t v34 = *(void *)(a1 + 56);
      do
      {
        int v35 = (char *)v22 + v23 * v28;
        uint64_t v36 = &v21[64 * v28];
        if ((unint64_t)(&v29[64 * v28] - v35) < 0x20)
        {
          int v37 = 0;
          goto LABEL_31;
        }
        if (v25 >= 0x20)
        {
          uint64_t v39 = v32;
          unint64_t v40 = v31;
          uint64_t v41 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *unint64_t v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
          if (v25 == v30) {
            goto LABEL_17;
          }
          uint64_t v38 = v25 & 0x1FFFFFFE0;
          if ((v25 & 0x18) == 0)
          {
            v35 += v30;
            v36 += v30;
            int v37 = v25 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        v36 += result;
        unint64_t v42 = v38 - (v25 & 0x1FFFFFFF8);
        unint64_t v43 = (unint64_t *)(v34 + v38);
        unsigned int v44 = (unint64_t *)&v33[v38];
        do
        {
          unint64_t v45 = *v43++;
          a2.n128_u64[0] = v45;
          *v44++ = v45;
          v42 += 8;
        }
        while (v42);
        if (v25 == result) {
          goto LABEL_17;
        }
        v35 += result;
        int v37 = v25 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v46 = v37 + 1;
        do
        {
          char v47 = *v35++;
          *v36++ = v47;
        }
        while (v24 > v46++);
LABEL_17:
        ++v28;
        v31 += 4;
        uint64_t v32 = (__n128 *)((char *)v32 + v23);
        v34 += v23;
        v33 += 64;
      }
      while (v28 != v17);
    }
  }
LABEL_38:
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(a1 + 40);
  int v53 = *(unsigned char **)(a1 + 48);
  int v54 = *(unsigned __int8 *)(a1 + 88);
  int v55 = *(unsigned __int8 *)(a1 + 89);
  int v56 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51 + 1];
    uint64_t v58 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51];
    unsigned int v59 = (v54 - 8 * v58) & ~((v54 - 8 * (int)v58) >> 31);
    if (v59 >= 8) {
      unsigned int v59 = 8;
    }
    unsigned int v60 = (v55 - 4 * v57) & ~((v55 - 4 * (int)v57) >> 31);
    if (v60 >= 4) {
      unsigned int v60 = 4;
    }
    if (v59) {
      BOOL v61 = v60 == 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61)
    {
      *int v53 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::compressSubblock(v52, v53, (int32x4_t *)&v62[256 * v57 + 16 * v58], 64, v59, v60, v56, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13, v14, v15, v16);
      v52 += result;
    }
    ++v53;
    v51 += 2;
  }
  while (v51 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  unsigned int v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v62[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 84);
    if (v18)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v21 = &v62[v19 + v20];
      unint64_t v22 = *(__n128 **)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = 2 * v18;
      if (v24 <= 1) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 7)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          uint64_t v27 = 0;
          do
          {
            v21[v27] = v22->n128_u8[v27];
            ++v27;
          }
          while (v24 > v27);
          v21 += 64;
          unint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      if (!v25 || (unint64_t v28 = (v25 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          uint64_t v50 = 0;
          do
          {
            v21[v50] = v22->n128_u8[v50];
            ++v50;
          }
          while (v24 > v50);
          v21 += 64;
          unint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      int v29 = &v62[v19 + v20];
      uint64_t v30 = v25 & 0x1FFFFFFE0;
      unint64_t result = v25 & 0x1FFFFFFF8;
      int v31 = (__n128 *)&v62[v19 + 16 + v20];
      uint64_t v32 = v22 + 1;
      uint64_t v33 = v21;
      uint64_t v34 = *(void *)(a1 + 56);
      do
      {
        int v35 = (char *)v22 + v23 * v28;
        uint64_t v36 = &v21[64 * v28];
        if ((unint64_t)(&v29[64 * v28] - v35) < 0x20)
        {
          int v37 = 0;
          goto LABEL_31;
        }
        if (v25 >= 0x20)
        {
          uint64_t v39 = v32;
          unint64_t v40 = v31;
          uint64_t v41 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *unint64_t v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
          if (v25 == v30) {
            goto LABEL_17;
          }
          uint64_t v38 = v25 & 0x1FFFFFFE0;
          if ((v25 & 0x18) == 0)
          {
            v35 += v30;
            v36 += v30;
            int v37 = v25 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        v36 += result;
        unint64_t v42 = v38 - (v25 & 0x1FFFFFFF8);
        unint64_t v43 = (unint64_t *)(v34 + v38);
        unsigned int v44 = (unint64_t *)&v33[v38];
        do
        {
          unint64_t v45 = *v43++;
          a2.n128_u64[0] = v45;
          *v44++ = v45;
          v42 += 8;
        }
        while (v42);
        if (v25 == result) {
          goto LABEL_17;
        }
        v35 += result;
        int v37 = v25 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v46 = v37 + 1;
        do
        {
          char v47 = *v35++;
          *v36++ = v47;
        }
        while (v24 > v46++);
LABEL_17:
        ++v28;
        v31 += 4;
        uint64_t v32 = (__n128 *)((char *)v32 + v23);
        v34 += v23;
        v33 += 64;
      }
      while (v28 != v17);
    }
  }
LABEL_38:
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(a1 + 40);
  int v53 = *(unsigned char **)(a1 + 48);
  int v54 = *(unsigned __int8 *)(a1 + 88);
  int v55 = *(unsigned __int8 *)(a1 + 89);
  int v56 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51 + 1];
    uint64_t v58 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51];
    unsigned int v59 = (v54 - 8 * v58) & ~((v54 - 8 * (int)v58) >> 31);
    if (v59 >= 8) {
      unsigned int v59 = 8;
    }
    unsigned int v60 = (v55 - 4 * v57) & ~((v55 - 4 * (int)v57) >> 31);
    if (v60 >= 4) {
      unsigned int v60 = 4;
    }
    if (v59) {
      BOOL v61 = v60 == 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61)
    {
      *int v53 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::compressSubblock(v52, v53, (int32x4_t *)&v62[256 * v57 + 16 * v58], 64, v59, v60, v56, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13, v14, v15, v16);
      v52 += result;
    }
    ++v53;
    v51 += 2;
  }
  while (v51 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 32);
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  unsigned int v9 = *(unsigned __int8 **)(a1 + 48);
  int v10 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    unsigned int v11 = *v9++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v62[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v11, v10, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(a1 + 84);
    if (v18)
    {
      unint64_t v19 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v20 = 2 * *(unsigned int *)(a1 + 76);
      uint64_t v21 = &v62[v19 + v20];
      unint64_t v22 = *(__n128 **)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      unint64_t v24 = 2 * v18;
      if (v24 <= 1) {
        unint64_t v25 = 1;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 7)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          uint64_t v27 = 0;
          do
          {
            v21[v27] = v22->n128_u8[v27];
            ++v27;
          }
          while (v24 > v27);
          v21 += 64;
          unint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      if (!v25 || (unint64_t v28 = (v25 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          uint64_t v50 = 0;
          do
          {
            v21[v50] = v22->n128_u8[v50];
            ++v50;
          }
          while (v24 > v50);
          v21 += 64;
          unint64_t v22 = (__n128 *)((char *)v22 + v23);
        }
        goto LABEL_38;
      }
      int v29 = &v62[v19 + v20];
      uint64_t v30 = v25 & 0x1FFFFFFE0;
      unint64_t result = v25 & 0x1FFFFFFF8;
      int v31 = (__n128 *)&v62[v19 + 16 + v20];
      uint64_t v32 = v22 + 1;
      uint64_t v33 = v21;
      uint64_t v34 = *(void *)(a1 + 56);
      do
      {
        int v35 = (char *)v22 + v23 * v28;
        uint64_t v36 = &v21[64 * v28];
        if ((unint64_t)(&v29[64 * v28] - v35) < 0x20)
        {
          int v37 = 0;
          goto LABEL_31;
        }
        if (v25 >= 0x20)
        {
          uint64_t v39 = v32;
          unint64_t v40 = v31;
          uint64_t v41 = v25 & 0x1FFFFFFE0;
          do
          {
            a2 = v39[-1];
            a3 = *v39;
            v40[-1] = a2;
            *unint64_t v40 = a3;
            v40 += 2;
            v39 += 2;
            v41 -= 32;
          }
          while (v41);
          if (v25 == v30) {
            goto LABEL_17;
          }
          uint64_t v38 = v25 & 0x1FFFFFFE0;
          if ((v25 & 0x18) == 0)
          {
            v35 += v30;
            v36 += v30;
            int v37 = v25 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        v36 += result;
        unint64_t v42 = v38 - (v25 & 0x1FFFFFFF8);
        unint64_t v43 = (unint64_t *)(v34 + v38);
        unsigned int v44 = (unint64_t *)&v33[v38];
        do
        {
          unint64_t v45 = *v43++;
          a2.n128_u64[0] = v45;
          *v44++ = v45;
          v42 += 8;
        }
        while (v42);
        if (v25 == result) {
          goto LABEL_17;
        }
        v35 += result;
        int v37 = v25 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v46 = v37 + 1;
        do
        {
          char v47 = *v35++;
          *v36++ = v47;
        }
        while (v24 > v46++);
LABEL_17:
        ++v28;
        v31 += 4;
        uint64_t v32 = (__n128 *)((char *)v32 + v23);
        v34 += v23;
        v33 += 64;
      }
      while (v28 != v17);
    }
  }
LABEL_38:
  uint64_t v51 = 0;
  unint64_t v52 = *(void *)(a1 + 40);
  int v53 = *(unsigned char **)(a1 + 48);
  int v54 = *(unsigned __int8 *)(a1 + 88);
  int v55 = *(unsigned __int8 *)(a1 + 89);
  int v56 = *(_DWORD *)(*(void *)(v8 + 208) + 52);
  do
  {
    uint64_t v57 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51 + 1];
    uint64_t v58 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v51];
    unsigned int v59 = (v54 - 8 * v58) & ~((v54 - 8 * (int)v58) >> 31);
    if (v59 >= 8) {
      unsigned int v59 = 8;
    }
    unsigned int v60 = (v55 - 4 * v57) & ~((v55 - 4 * (int)v57) >> 31);
    if (v60 >= 4) {
      unsigned int v60 = 4;
    }
    if (v59) {
      BOOL v61 = v60 == 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (v61)
    {
      *int v53 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::compressSubblock(v52, v53, (int32x4_t *)&v62[256 * v57 + 16 * v58], 64, v59, v60, v56, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v13, v14, v15, v16);
      v52 += result;
    }
    ++v53;
    v51 += 2;
  }
  while (v51 != 64);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    int16x4_t v7 = (int32x4_t *)((char *)v7
                     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v64[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5));
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 84);
    if (v11)
    {
      unint64_t v12 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v13 = 2 * *(unsigned int *)(a1 + 76);
      double v14 = &v64[v12 + v13];
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 64);
      unint64_t v17 = 2 * v11;
      if (v17 <= 1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 <= 7)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v20 = 0;
          do
          {
            v14[v20] = *(unsigned char *)(v15 + v20);
            ++v20;
          }
          while (v17 > v20);
          v14 += 64;
          v15 += v16;
        }
        goto LABEL_38;
      }
      if (!v18 || (unint64_t v21 = (v18 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          uint64_t v45 = 0;
          do
          {
            v14[v45] = *(unsigned char *)(v15 + v45);
            ++v45;
          }
          while (v17 > v45);
          v14 += 64;
          v15 += v16;
        }
        goto LABEL_38;
      }
      unint64_t v22 = &v64[v12 + v13];
      uint64_t v23 = v18 & 0x1FFFFFFE0;
      uint64_t v24 = v18 & 0x1FFFFFFF8;
      unint64_t v25 = &v64[v12 + 16 + v13];
      unint64_t v26 = (long long *)(v15 + 16);
      uint64_t v27 = v14;
      uint64_t v28 = *(void *)(a1 + 56);
      do
      {
        int v29 = (char *)(v15 + v16 * v21);
        uint64_t v30 = &v14[64 * v21];
        if ((unint64_t)(&v22[64 * v21] - v29) < 0x20)
        {
          int v31 = 0;
          goto LABEL_31;
        }
        if (v18 >= 0x20)
        {
          uint64_t v33 = v26;
          uint64_t v34 = v25;
          uint64_t v35 = v18 & 0x1FFFFFFE0;
          do
          {
            long long v36 = *v33;
            *(v34 - 1) = *(v33 - 1);
            *uint64_t v34 = v36;
            v34 += 2;
            v33 += 2;
            v35 -= 32;
          }
          while (v35);
          if (v18 == v23) {
            goto LABEL_17;
          }
          uint64_t v32 = v18 & 0x1FFFFFFE0;
          if ((v18 & 0x18) == 0)
          {
            v29 += v23;
            v30 += v23;
            int v31 = v18 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        v30 += v24;
        unint64_t v37 = v32 - (v18 & 0x1FFFFFFF8);
        uint64_t v38 = (uint64_t *)(v28 + v32);
        uint64_t v39 = &v27[v32];
        do
        {
          uint64_t v40 = *v38++;
          *v39++ = v40;
          v37 += 8;
        }
        while (v37);
        if (v18 == v24) {
          goto LABEL_17;
        }
        v29 += v24;
        int v31 = v18 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v41 = v31 + 1;
        do
        {
          char v42 = *v29++;
          *v30++ = v42;
        }
        while (v17 > v41++);
LABEL_17:
        ++v21;
        v25 += 64;
        unint64_t v26 = (long long *)((char *)v26 + v16);
        v28 += v16;
        v27 += 64;
      }
      while (v21 != v10);
    }
  }
LABEL_38:
  uint64_t v46 = 0;
  uint64_t v47 = *(void *)(a1 + 40);
  uint64_t v48 = *(char **)(a1 + 48);
  int v49 = *(unsigned __int8 *)(a1 + 88);
  int v50 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v59 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v46 + 1];
    uint64_t v60 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v46];
    LODWORD(result) = (v49 - 8 * v60) & ~((v49 - 8 * (int)v60) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v62 = (v50 - 4 * v59) & ~((v50 - 4 * (int)v59) >> 31);
    if (v62 >= 4) {
      unsigned int v62 = 4;
    }
    if (result) {
      BOOL v63 = v62 == 0;
    }
    else {
      BOOL v63 = 1;
    }
    if (v63)
    {
      char v58 = 0;
    }
    else
    {
      uint64_t v51 = (int32x4_t *)&v64[256 * v59 + 16 * v60];
      float32x2x2_t v52 = (float32x2x2_t)*v51;
      int32x4_t v53 = v51[4];
      int32x4_t v54 = vzip2q_s32(*v51, v53);
      float32x2x2_t v55 = (float32x2x2_t)v51[8];
      int32x4_t v56 = v51[12];
      uint64_t v57 = (float *)v47;
      vst2_f32(v57, v52);
      v57 += 4;
      vst2_f32(v57, v55);
      *(int32x4_t *)(v47 + 32) = v54;
      *(int32x4_t *)(v47 + 48) = vzip2q_s32((int32x4_t)v55, v56);
      v47 += 64;
      char v58 = 63;
    }
    *v48++ = v58;
    v46 += 2;
  }
  while (v46 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, __n128 a3, double a4, double a5)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v59[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2.n128_f64[0], a3.n128_f64[0], a4, *(int8x8_t *)&a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  uint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 84);
    if (v16)
    {
      unint64_t v17 = (unint64_t)*(unsigned int *)(a1 + 72) << 6;
      uint64_t v18 = 2 * *(unsigned int *)(a1 + 76);
      unint64_t v19 = &v59[v17 + v18];
      uint64_t v20 = *(__n128 **)(a1 + 56);
      uint64_t v21 = *(void *)(a1 + 64);
      unint64_t v22 = 2 * v16;
      if (v22 <= 1) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23 <= 7)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v25 = 0;
          do
          {
            v19[v25] = v20->n128_u8[v25];
            ++v25;
          }
          while (v22 > v25);
          v19 += 64;
          uint64_t v20 = (__n128 *)((char *)v20 + v21);
        }
        goto LABEL_38;
      }
      if (!v23 || (unint64_t v26 = (v23 - 1) >> 32) != 0)
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          uint64_t v48 = 0;
          do
          {
            v19[v48] = v20->n128_u8[v48];
            ++v48;
          }
          while (v22 > v48);
          v19 += 64;
          uint64_t v20 = (__n128 *)((char *)v20 + v21);
        }
        goto LABEL_38;
      }
      uint64_t v27 = &v59[v17 + v18];
      uint64_t v28 = v23 & 0x1FFFFFFE0;
      unint64_t result = v23 & 0x1FFFFFFF8;
      int v29 = (__n128 *)&v59[v17 + 16 + v18];
      uint64_t v30 = v20 + 1;
      int v31 = v19;
      uint64_t v32 = *(void *)(a1 + 56);
      do
      {
        uint64_t v33 = (char *)v20 + v21 * v26;
        uint64_t v34 = &v19[64 * v26];
        if ((unint64_t)(&v27[64 * v26] - v33) < 0x20)
        {
          int v35 = 0;
          goto LABEL_31;
        }
        if (v23 >= 0x20)
        {
          unint64_t v37 = v30;
          uint64_t v38 = v29;
          uint64_t v39 = v23 & 0x1FFFFFFE0;
          do
          {
            a2 = v37[-1];
            a3 = *v37;
            v38[-1] = a2;
            *uint64_t v38 = a3;
            v38 += 2;
            v37 += 2;
            v39 -= 32;
          }
          while (v39);
          if (v23 == v28) {
            goto LABEL_17;
          }
          uint64_t v36 = v23 & 0x1FFFFFFE0;
          if ((v23 & 0x18) == 0)
          {
            v33 += v28;
            v34 += v28;
            int v35 = v23 & 0xFFFFFFE0;
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        v34 += result;
        unint64_t v40 = v36 - (v23 & 0x1FFFFFFF8);
        unsigned int v41 = (unint64_t *)(v32 + v36);
        char v42 = (unint64_t *)&v31[v36];
        do
        {
          unint64_t v43 = *v41++;
          a2.n128_u64[0] = v43;
          *v42++ = v43;
          v40 += 8;
        }
        while (v40);
        if (v23 == result) {
          goto LABEL_17;
        }
        v33 += result;
        int v35 = v23 & 0xFFFFFFF8;
LABEL_31:
        unsigned int v44 = v35 + 1;
        do
        {
          char v45 = *v33++;
          *v34++ = v45;
        }
        while (v22 > v44++);
LABEL_17:
        ++v26;
        v29 += 4;
        uint64_t v30 = (__n128 *)((char *)v30 + v21);
        v32 += v21;
        v31 += 64;
      }
      while (v26 != v15);
    }
  }
LABEL_38:
  uint64_t v49 = 0;
  unint64_t v50 = *(void *)(a1 + 40);
  uint64_t v51 = *(char **)(a1 + 48);
  int v52 = *(unsigned __int8 *)(a1 + 88);
  int v53 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v54 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v49 + 1];
    uint64_t v55 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v49];
    unsigned int v56 = (v52 - 8 * v55) & ~((v52 - 8 * (int)v55) >> 31);
    if (v56 >= 8) {
      unsigned int v56 = 8;
    }
    unsigned int v57 = (v53 - 4 * v54) & ~((v53 - 4 * (int)v54) >> 31);
    if (v57 >= 4) {
      unsigned int v57 = 4;
    }
    if (v56) {
      BOOL v58 = v57 == 0;
    }
    else {
      BOOL v58 = 1;
    }
    if (v58)
    {
      *uint64_t v51 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::compressSubblock(v50, v51, (int32x4_t *)&v59[256 * v54 + 16 * v55], 64, v56, v57, a2.n128_f64[0], a3.n128_f64[0], a4, a5, v11, v12, v13, v14);
      v50 += result;
    }
    ++v51;
    v49 += 2;
  }
  while (v49 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v3 = *(int16x4_t **)(a1 + 40);
  int16x4_t v5 = *(unsigned __int8 **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    unsigned int v7 = *v5++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v54[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v7, v6);
    long long v3 = (int16x4_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (!v16) {
    goto LABEL_33;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 84);
  if (!v17) {
    goto LABEL_33;
  }
  unint64_t result = *(unsigned int *)(a1 + 76);
  uint64_t v18 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  if (v17 >= 8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &v54[result + v18];
    uint64_t v25 = v17 & 0xFFFFFFE0;
    uint64_t v26 = v17 & 0xFFFFFFF8;
    result += (unint64_t)&v54[v18 + 16];
    uint64_t v27 = (long long *)(v20 + 16);
    uint64_t v28 = v24;
    uint64_t v29 = *(void *)(a1 + 56);
    while (1)
    {
      uint64_t v30 = (char *)(v20 + v19 * v23);
      int v31 = &v24[32 * v23];
      if ((unint64_t)(v31 - v30) < 0x20)
      {
        int v32 = 0;
        goto LABEL_30;
      }
      if (v17 >= 0x20)
      {
        uint64_t v34 = v27;
        int v35 = (_OWORD *)result;
        uint64_t v36 = v17 & 0xFFFFFFE0;
        do
        {
          long long v9 = *(v34 - 1);
          long long v10 = *v34;
          *(v35 - 1) = v9;
          *int v35 = v10;
          v35 += 2;
          v34 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v25 == v17) {
          goto LABEL_16;
        }
        uint64_t v33 = v17 & 0xFFFFFFE0;
        if ((v17 & 0x18) == 0)
        {
          v30 += v25;
          v31 += v25;
          int v32 = v17 & 0xFFFFFFE0;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      v31 += v26;
      uint64_t v37 = v33 - (v17 & 0xFFFFFFF8);
      uint64_t v38 = (uint64_t *)(v29 + v33);
      uint64_t v39 = &v28[v33];
      do
      {
        uint64_t v40 = *v38++;
        *(void *)&long long v9 = v40;
        *v39++ = v40;
        v37 += 8;
      }
      while (v37);
      if (v26 == v17) {
        goto LABEL_16;
      }
      v30 += v26;
      int v32 = v17 & 0xFFFFFFF8;
LABEL_30:
      int v41 = v17 - v32;
      do
      {
        char v42 = *v30++;
        *v31++ = v42;
        --v41;
      }
      while (v41);
LABEL_16:
      ++v23;
      result += 32;
      uint64_t v27 = (long long *)((char *)v27 + v19);
      v29 += v19;
      v28 += 32;
      if (v23 == v16) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v21 = &v54[v18 + 3 + result];
  unint64_t v22 = (unsigned char *)(v20 + 3);
  do
  {
    *(v21 - 3) = *(v22 - 3);
    if (v17 != 1)
    {
      *(v21 - 2) = *(v22 - 2);
      if (v17 != 2)
      {
        *(v21 - 1) = *(v22 - 1);
        if (v17 != 3)
        {
          *uint64_t v21 = *v22;
          if (v17 != 4)
          {
            v21[1] = v22[1];
            if (v17 != 5)
            {
              v21[2] = v22[2];
              if (v17 != 6) {
                v21[3] = v22[3];
              }
            }
          }
        }
      }
    }
    v21 += 32;
    v22 += v19;
    --v16;
  }
  while (v16);
LABEL_33:
  uint64_t v43 = 0;
  unint64_t v44 = *(void *)(a1 + 40);
  char v45 = *(unsigned char **)(a1 + 48);
  int v46 = *(unsigned __int8 *)(a1 + 88);
  int v47 = *(unsigned __int8 *)(a1 + 89);
  int v48 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v49 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v43 + 1];
    uint64_t v50 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v43];
    unsigned int v51 = (v46 - 8 * v50) & ~((v46 - 8 * (int)v50) >> 31);
    if (v51 >= 8) {
      unsigned int v51 = 8;
    }
    unsigned int v52 = (v47 - 4 * v49) & ~((v47 - 4 * (int)v49) >> 31);
    if (v52 >= 4) {
      unsigned int v52 = 4;
    }
    if (v51) {
      BOOL v53 = v52 == 0;
    }
    else {
      BOOL v53 = 1;
    }
    if (v53)
    {
      unsigned char *v45 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v44, v45, (int16x4_t *)&v54[128 * v49 + 8 * v50], 32, v51, v52, v48, *(double *)&v9, *(double *)&v10, v11, v12, v13, v14, v15);
      v44 += result;
    }
    ++v45;
    v43 += 2;
  }
  while (v43 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v3 = *(int16x4_t **)(a1 + 40);
  int16x4_t v5 = *(unsigned __int8 **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    unsigned int v7 = *v5++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v54[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v7, v6);
    long long v3 = (int16x4_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (!v16) {
    goto LABEL_33;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 84);
  if (!v17) {
    goto LABEL_33;
  }
  unint64_t result = *(unsigned int *)(a1 + 76);
  uint64_t v18 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  if (v17 >= 8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &v54[result + v18];
    uint64_t v25 = v17 & 0xFFFFFFE0;
    uint64_t v26 = v17 & 0xFFFFFFF8;
    result += (unint64_t)&v54[v18 + 16];
    uint64_t v27 = (long long *)(v20 + 16);
    uint64_t v28 = v24;
    uint64_t v29 = *(void *)(a1 + 56);
    while (1)
    {
      uint64_t v30 = (char *)(v20 + v19 * v23);
      int v31 = &v24[32 * v23];
      if ((unint64_t)(v31 - v30) < 0x20)
      {
        int v32 = 0;
        goto LABEL_30;
      }
      if (v17 >= 0x20)
      {
        uint64_t v34 = v27;
        int v35 = (_OWORD *)result;
        uint64_t v36 = v17 & 0xFFFFFFE0;
        do
        {
          long long v9 = *(v34 - 1);
          long long v10 = *v34;
          *(v35 - 1) = v9;
          *int v35 = v10;
          v35 += 2;
          v34 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v25 == v17) {
          goto LABEL_16;
        }
        uint64_t v33 = v17 & 0xFFFFFFE0;
        if ((v17 & 0x18) == 0)
        {
          v30 += v25;
          v31 += v25;
          int v32 = v17 & 0xFFFFFFE0;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      v31 += v26;
      uint64_t v37 = v33 - (v17 & 0xFFFFFFF8);
      uint64_t v38 = (uint64_t *)(v29 + v33);
      uint64_t v39 = &v28[v33];
      do
      {
        uint64_t v40 = *v38++;
        *(void *)&long long v9 = v40;
        *v39++ = v40;
        v37 += 8;
      }
      while (v37);
      if (v26 == v17) {
        goto LABEL_16;
      }
      v30 += v26;
      int v32 = v17 & 0xFFFFFFF8;
LABEL_30:
      int v41 = v17 - v32;
      do
      {
        char v42 = *v30++;
        *v31++ = v42;
        --v41;
      }
      while (v41);
LABEL_16:
      ++v23;
      result += 32;
      uint64_t v27 = (long long *)((char *)v27 + v19);
      v29 += v19;
      v28 += 32;
      if (v23 == v16) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v21 = &v54[v18 + 3 + result];
  unint64_t v22 = (unsigned char *)(v20 + 3);
  do
  {
    *(v21 - 3) = *(v22 - 3);
    if (v17 != 1)
    {
      *(v21 - 2) = *(v22 - 2);
      if (v17 != 2)
      {
        *(v21 - 1) = *(v22 - 1);
        if (v17 != 3)
        {
          *uint64_t v21 = *v22;
          if (v17 != 4)
          {
            v21[1] = v22[1];
            if (v17 != 5)
            {
              v21[2] = v22[2];
              if (v17 != 6) {
                v21[3] = v22[3];
              }
            }
          }
        }
      }
    }
    v21 += 32;
    v22 += v19;
    --v16;
  }
  while (v16);
LABEL_33:
  uint64_t v43 = 0;
  uint64_t v44 = *(void *)(a1 + 40);
  char v45 = *(unsigned char **)(a1 + 48);
  int v46 = *(unsigned __int8 *)(a1 + 88);
  int v47 = *(unsigned __int8 *)(a1 + 89);
  int v48 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v49 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v43 + 1];
    uint64_t v50 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v43];
    unsigned int v51 = (v46 - 8 * v50) & ~((v46 - 8 * (int)v50) >> 31);
    if (v51 >= 8) {
      unsigned int v51 = 8;
    }
    unsigned int v52 = (v47 - 4 * v49) & ~((v47 - 4 * (int)v49) >> 31);
    if (v52 >= 4) {
      unsigned int v52 = 4;
    }
    if (v51) {
      BOOL v53 = v52 == 0;
    }
    else {
      BOOL v53 = 1;
    }
    if (v53)
    {
      unsigned char *v45 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v44, v45, (int16x4_t *)&v54[128 * v49 + 8 * v50], 32, v51, v52, v48, *(double *)&v9, *(double *)&v10, v11, v12, v13, v14, v15);
      v44 += result;
    }
    ++v45;
    v43 += 2;
  }
  while (v43 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v3 = *(int16x4_t **)(a1 + 40);
  int16x4_t v5 = *(unsigned __int8 **)(a1 + 48);
  int v6 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    unsigned int v7 = *v5++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v54[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v7, v6);
    long long v3 = (int16x4_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  uint64_t v16 = *(unsigned int *)(a1 + 80);
  if (!v16) {
    goto LABEL_33;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 84);
  if (!v17) {
    goto LABEL_33;
  }
  unint64_t result = *(unsigned int *)(a1 + 76);
  uint64_t v18 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  if (v17 >= 8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &v54[result + v18];
    uint64_t v25 = v17 & 0xFFFFFFE0;
    uint64_t v26 = v17 & 0xFFFFFFF8;
    result += (unint64_t)&v54[v18 + 16];
    uint64_t v27 = (long long *)(v20 + 16);
    uint64_t v28 = v24;
    uint64_t v29 = *(void *)(a1 + 56);
    while (1)
    {
      uint64_t v30 = (char *)(v20 + v19 * v23);
      int v31 = &v24[32 * v23];
      if ((unint64_t)(v31 - v30) < 0x20)
      {
        int v32 = 0;
        goto LABEL_30;
      }
      if (v17 >= 0x20)
      {
        uint64_t v34 = v27;
        int v35 = (_OWORD *)result;
        uint64_t v36 = v17 & 0xFFFFFFE0;
        do
        {
          long long v9 = *(v34 - 1);
          long long v10 = *v34;
          *(v35 - 1) = v9;
          *int v35 = v10;
          v35 += 2;
          v34 += 2;
          v36 -= 32;
        }
        while (v36);
        if (v25 == v17) {
          goto LABEL_16;
        }
        uint64_t v33 = v17 & 0xFFFFFFE0;
        if ((v17 & 0x18) == 0)
        {
          v30 += v25;
          v31 += v25;
          int v32 = v17 & 0xFFFFFFE0;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      v31 += v26;
      uint64_t v37 = v33 - (v17 & 0xFFFFFFF8);
      uint64_t v38 = (uint64_t *)(v29 + v33);
      uint64_t v39 = &v28[v33];
      do
      {
        uint64_t v40 = *v38++;
        *(void *)&long long v9 = v40;
        *v39++ = v40;
        v37 += 8;
      }
      while (v37);
      if (v26 == v17) {
        goto LABEL_16;
      }
      v30 += v26;
      int v32 = v17 & 0xFFFFFFF8;
LABEL_30:
      int v41 = v17 - v32;
      do
      {
        char v42 = *v30++;
        *v31++ = v42;
        --v41;
      }
      while (v41);
LABEL_16:
      ++v23;
      result += 32;
      uint64_t v27 = (long long *)((char *)v27 + v19);
      v29 += v19;
      v28 += 32;
      if (v23 == v16) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v21 = &v54[v18 + 3 + result];
  unint64_t v22 = (unsigned char *)(v20 + 3);
  do
  {
    *(v21 - 3) = *(v22 - 3);
    if (v17 != 1)
    {
      *(v21 - 2) = *(v22 - 2);
      if (v17 != 2)
      {
        *(v21 - 1) = *(v22 - 1);
        if (v17 != 3)
        {
          *uint64_t v21 = *v22;
          if (v17 != 4)
          {
            v21[1] = v22[1];
            if (v17 != 5)
            {
              v21[2] = v22[2];
              if (v17 != 6) {
                v21[3] = v22[3];
              }
            }
          }
        }
      }
    }
    v21 += 32;
    v22 += v19;
    --v16;
  }
  while (v16);
LABEL_33:
  uint64_t v43 = 0;
  uint64_t v44 = *(void *)(a1 + 40);
  char v45 = *(unsigned char **)(a1 + 48);
  int v46 = *(unsigned __int8 *)(a1 + 88);
  int v47 = *(unsigned __int8 *)(a1 + 89);
  int v48 = *(_DWORD *)(*(void *)(v4 + 208) + 52);
  do
  {
    uint64_t v49 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v43 + 1];
    uint64_t v50 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v43];
    unsigned int v51 = (v46 - 8 * v50) & ~((v46 - 8 * (int)v50) >> 31);
    if (v51 >= 8) {
      unsigned int v51 = 8;
    }
    unsigned int v52 = (v47 - 4 * v49) & ~((v47 - 4 * (int)v49) >> 31);
    if (v52 >= 4) {
      unsigned int v52 = 4;
    }
    if (v51) {
      BOOL v53 = v52 == 0;
    }
    else {
      BOOL v53 = 1;
    }
    if (v53)
    {
      unsigned char *v45 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v44, v45, (int16x4_t *)&v54[128 * v49 + 8 * v50], 32, v51, v52, v48, *(double *)&v9, *(double *)&v10, v11, v12, v13, v14, v15);
      v44 += result;
    }
    ++v45;
    v43 += 2;
  }
  while (v43 != 64);
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  long long v3 = *(int8x8_t **)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v5 = *v4++;
    long long v3 = (int8x8_t *)((char *)v3
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&v53[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v5));
    v2 += 2;
  }
  while (v2 != 64);
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (!v6) {
    goto LABEL_33;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 84);
  if (!v7) {
    goto LABEL_33;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 76);
  uint64_t v9 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v7 >= 8)
  {
    uint64_t v14 = 0;
    int8x8_t v15 = &v53[v8 + v9];
    uint64_t v16 = v7 & 0xFFFFFFE0;
    uint64_t v17 = v7 & 0xFFFFFFF8;
    uint64_t v18 = &v53[v9 + 16 + v8];
    uint64_t v19 = (long long *)(v11 + 16);
    uint64_t v20 = v15;
    uint64_t v21 = *(void *)(a1 + 56);
    while (1)
    {
      unint64_t v22 = (char *)(v11 + v10 * v14);
      uint64_t v23 = &v15[32 * v14];
      if ((unint64_t)(v23 - v22) < 0x20)
      {
        int v24 = 0;
        goto LABEL_30;
      }
      if (v7 >= 0x20)
      {
        uint64_t v26 = v19;
        uint64_t v27 = v18;
        uint64_t v28 = v7 & 0xFFFFFFE0;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          _OWORD *v27 = v29;
          v27 += 2;
          v26 += 2;
          v28 -= 32;
        }
        while (v28);
        if (v16 == v7) {
          goto LABEL_16;
        }
        uint64_t v25 = v7 & 0xFFFFFFE0;
        if ((v7 & 0x18) == 0)
        {
          v22 += v16;
          v23 += v16;
          int v24 = v7 & 0xFFFFFFE0;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      v23 += v17;
      uint64_t v30 = v25 - (v7 & 0xFFFFFFF8);
      int v31 = (uint64_t *)(v21 + v25);
      int v32 = &v20[v25];
      do
      {
        uint64_t v33 = *v31++;
        *v32++ = v33;
        v30 += 8;
      }
      while (v30);
      if (v17 == v7) {
        goto LABEL_16;
      }
      v22 += v17;
      int v24 = v7 & 0xFFFFFFF8;
LABEL_30:
      int v34 = v7 - v24;
      do
      {
        char v35 = *v22++;
        *v23++ = v35;
        --v34;
      }
      while (v34);
LABEL_16:
      ++v14;
      v18 += 32;
      uint64_t v19 = (long long *)((char *)v19 + v10);
      v21 += v10;
      v20 += 32;
      if (v14 == v6) {
        goto LABEL_33;
      }
    }
  }
  double v12 = &v53[v9 + 3 + v8];
  double v13 = (unsigned char *)(v11 + 3);
  do
  {
    *(v12 - 3) = *(v13 - 3);
    if (v7 != 1)
    {
      *(v12 - 2) = *(v13 - 2);
      if (v7 != 2)
      {
        *(v12 - 1) = *(v13 - 1);
        if (v7 != 3)
        {
          *double v12 = *v13;
          if (v7 != 4)
          {
            v12[1] = v13[1];
            if (v7 != 5)
            {
              v12[2] = v13[2];
              if (v7 != 6) {
                v12[3] = v13[3];
              }
            }
          }
        }
      }
    }
    v12 += 32;
    v13 += v10;
    --v6;
  }
  while (v6);
LABEL_33:
  uint64_t v36 = 0;
  uint64_t v37 = *(int16x4_t **)(a1 + 40);
  uint64_t v38 = *(char **)(a1 + 48);
  int v39 = *(unsigned __int8 *)(a1 + 88);
  int v40 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v48 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v36 + 1];
    uint64_t v49 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v36];
    LODWORD(result) = (v39 - 8 * v49) & ~((v39 - 8 * (int)v49) >> 31);
    if (result >= 8) {
      uint64_t result = 8;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v51 = (v40 - 4 * v48) & ~((v40 - 4 * (int)v48) >> 31);
    if (v51 >= 4) {
      unsigned int v51 = 4;
    }
    if (result) {
      BOOL v52 = v51 == 0;
    }
    else {
      BOOL v52 = 1;
    }
    if (v52)
    {
      char v47 = 0;
    }
    else
    {
      int v41 = (int16x4_t *)&v53[128 * v48 + 8 * v49];
      int16x4_t v42 = v41[4];
      int16x4_t v43 = vzip1_s16(*v41, v42);
      int16x4_t v44 = vzip2_s16(*v41, v42);
      int16x4_t v45 = v41[8];
      int16x4_t v46 = v41[12];
      *uint64_t v37 = v43;
      v37[1] = vzip1_s16(v45, v46);
      v37[2] = v44;
      v37[3] = vzip2_s16(v45, v46);
      v37 += 4;
      char v47 = 31;
    }
    *v38++ = v47;
    v36 += 2;
  }
  while (v36 != 64);
  return result;
}

unint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v52 = *MEMORY[0x263EF8340];
  long long v3 = *(int8x8_t **)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v5 = *v4++;
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&v51[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v5);
    long long v3 = (int8x8_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  uint64_t v14 = *(unsigned int *)(a1 + 80);
  if (!v14) {
    goto LABEL_33;
  }
  uint64_t v15 = *(unsigned int *)(a1 + 84);
  if (!v15) {
    goto LABEL_33;
  }
  unint64_t result = *(unsigned int *)(a1 + 76);
  uint64_t v16 = 32 * *(unsigned int *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  if (v15 >= 8)
  {
    uint64_t v21 = 0;
    unint64_t v22 = &v51[result + v16];
    uint64_t v23 = v15 & 0xFFFFFFE0;
    uint64_t v24 = v15 & 0xFFFFFFF8;
    result += (unint64_t)&v51[v16 + 16];
    uint64_t v25 = (long long *)(v18 + 16);
    uint64_t v26 = v22;
    uint64_t v27 = *(void *)(a1 + 56);
    while (1)
    {
      uint64_t v28 = (char *)(v18 + v17 * v21);
      long long v29 = &v22[32 * v21];
      if ((unint64_t)(v29 - v28) < 0x20)
      {
        int v30 = 0;
        goto LABEL_30;
      }
      if (v15 >= 0x20)
      {
        int v32 = v25;
        uint64_t v33 = (_OWORD *)result;
        uint64_t v34 = v15 & 0xFFFFFFE0;
        do
        {
          long long v7 = *(v32 - 1);
          long long v8 = *v32;
          *(v33 - 1) = v7;
          _OWORD *v33 = v8;
          v33 += 2;
          v32 += 2;
          v34 -= 32;
        }
        while (v34);
        if (v23 == v15) {
          goto LABEL_16;
        }
        uint64_t v31 = v15 & 0xFFFFFFE0;
        if ((v15 & 0x18) == 0)
        {
          v28 += v23;
          v29 += v23;
          int v30 = v15 & 0xFFFFFFE0;
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      v29 += v24;
      uint64_t v35 = v31 - (v15 & 0xFFFFFFF8);
      uint64_t v36 = (uint64_t *)(v27 + v31);
      uint64_t v37 = &v26[v31];
      do
      {
        uint64_t v38 = *v36++;
        *(void *)&long long v7 = v38;
        *v37++ = v38;
        v35 += 8;
      }
      while (v35);
      if (v24 == v15) {
        goto LABEL_16;
      }
      v28 += v24;
      int v30 = v15 & 0xFFFFFFF8;
LABEL_30:
      int v39 = v15 - v30;
      do
      {
        char v40 = *v28++;
        *v29++ = v40;
        --v39;
      }
      while (v39);
LABEL_16:
      ++v21;
      result += 32;
      uint64_t v25 = (long long *)((char *)v25 + v17);
      v27 += v17;
      v26 += 32;
      if (v21 == v14) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v19 = &v51[v16 + 3 + result];
  uint64_t v20 = (unsigned char *)(v18 + 3);
  do
  {
    *(v19 - 3) = *(v20 - 3);
    if (v15 != 1)
    {
      *(v19 - 2) = *(v20 - 2);
      if (v15 != 2)
      {
        *(v19 - 1) = *(v20 - 1);
        if (v15 != 3)
        {
          unsigned char *v19 = *v20;
          if (v15 != 4)
          {
            v19[1] = v20[1];
            if (v15 != 5)
            {
              v19[2] = v20[2];
              if (v15 != 6) {
                v19[3] = v20[3];
              }
            }
          }
        }
      }
    }
    v19 += 32;
    v20 += v17;
    --v14;
  }
  while (v14);
LABEL_33:
  uint64_t v41 = 0;
  int16x4_t v42 = *(int8x8_t **)(a1 + 40);
  int16x4_t v43 = *(char **)(a1 + 48);
  int v44 = *(unsigned __int8 *)(a1 + 88);
  int v45 = *(unsigned __int8 *)(a1 + 89);
  do
  {
    uint64_t v46 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v41 + 1];
    uint64_t v47 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v41];
    unsigned int v48 = (v44 - 8 * v47) & ~((v44 - 8 * (int)v47) >> 31);
    if (v48 >= 8) {
      unsigned int v48 = 8;
    }
    unsigned int v49 = (v45 - 4 * v46) & ~((v45 - 4 * (int)v46) >> 31);
    if (v49 >= 4) {
      unsigned int v49 = 4;
    }
    if (v48) {
      BOOL v50 = v49 == 0;
    }
    else {
      BOOL v50 = 1;
    }
    if (v50)
    {
      *int16x4_t v43 = 0;
    }
    else
    {
      unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v42, v43, (int16x4_t *)&v51[128 * v46 + 8 * v47], 32, v48, v49, *(double *)&v7, *(double *)&v8, v9, v10, v11, v12, v13);
      int16x4_t v42 = (int8x8_t *)((char *)v42 + result);
    }
    ++v43;
    v41 += 2;
  }
  while (v41 != 64);
  return result;
}

uint64_t agxsTwiddleAddressPVRTC2<true,(TwiddleOrder)1>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result && a2)
  {
    unint64_t v10 = (a9 + 7) >> 3;
    unsigned int v11 = (a10 + 3) >> 2;
    unint64_t v12 = ((a9 + 7) >> 4) * (unint64_t)v11;
    uint64_t v13 = 8 * v12;
    uint64_t v14 = 16 * v12;
    if (v10 > v11)
    {
      unint64_t v15 = v10 >> 1;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v15 = (a9 + 7) >> 3;
    }
    unint64_t v16 = 32 - __clz(v15 - 1);
    if (v15 < 2) {
      unint64_t v16 = 0;
    }
    unsigned int v17 = 32 - __clz(v11 - 1);
    if ((a10 + 3) >= 8) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = 0;
    }
    if (v18 < v16) {
      LOBYTE(v16) = v18;
    }
    unint64_t v19 = 8 * v15 * (unint64_t)v11;
    if (v19)
    {
      unint64_t v20 = 0;
      uint64_t v21 = 8 * ~(-1 << (2 * v16));
      uint64_t v22 = v21 & 0x2AAAAAAAAAAAAAA8;
      uint64_t v23 = v21 & 0x5555555555555555;
      uint64_t v24 = ~v21;
      do
      {
        *(void *)(result + (v20 & v24 | (2 * (v22 & v20)) | ((v23 & v20) >> 1))) = *(void *)(a2 + v20);
        v20 += 8;
      }
      while (v20 < v19);
      if (v10 > v11)
      {
        unint64_t v25 = 0;
        uint64_t v26 = a2 + v14;
        do
        {
          *(void *)(result + v13 + (v25 & v24 | (2 * (v22 & v25)) | ((v23 & v25) >> 1))) = *(void *)(v26 + v25);
          v25 += 8;
        }
        while (v25 < v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,8u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v240 = a9;
        v241 = v13;
        uint64_t v242 = v47;
        do
        {
          v243 = (_OWORD *)(result + ((v242 + v54) << 7));
          long long v244 = *v241;
          long long v245 = v241[1];
          long long v246 = v241[3];
          v243[2] = v241[2];
          v243[3] = v246;
          _OWORD *v243 = v244;
          v243[1] = v245;
          long long v247 = v241[4];
          long long v248 = v241[5];
          long long v249 = v241[7];
          v243[6] = v241[6];
          v243[7] = v249;
          v243[4] = v247;
          v243[5] = v248;
          uint64_t v242 = (v242 - v29) & v29;
          v241 += 8;
          --v240;
        }
        while (v240);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v275 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v278 = a8 >> v66;
    unsigned int v280 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v276 = a10 + a8;
    unsigned int v272 = (v69 - 1 + a10 + a8) >> v66;
    char v274 = v66;
    if (a8 >> v66 >= v272) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v294 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v280 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v288 = a7 >> v67;
    unsigned int v292 = (v77 + a9 + a7) >> v67;
    if (result >= v292) {
      return result;
    }
    unsigned int v271 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v290 = v77 & v294;
    int v267 = v76 & v276;
    uint64_t v269 = v76 & a8;
    unsigned int v85 = v278;
LABEL_89:
    unsigned int v86 = v85 << v274;
    unsigned int v87 = v85 - v278;
    int v286 = v85 * v271;
    unsigned int v282 = v85 + 1;
    BOOL v88 = v276 >= (v85 + 1) << v274;
    unsigned int v89 = v280;
    if (!v88) {
      unsigned int v89 = v267;
    }
    int v90 = v280 - v269;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v274;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v269;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v284 = (v92 + v91 - v269) * a11;
    unsigned int v94 = v288;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      int v98 = a9;
      if (v294 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      int v99 = 1 << v67;
      if (v294 < v97 << v67) {
        int v99 = v290;
      }
      unsigned int v100 = v96 >= v95 ? 0 : v84;
      int v101 = v96 >= v95 ? v99 : v98;
      if (v83 | v81) {
        break;
      }
      uint64_t v119 = 0;
      uint64_t v103 = 0;
      uint64_t v110 = 0;
      uint64_t v126 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v292)
      {
        unsigned int v85 = v282;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v282 == v272) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v102 = 0;
    uint64_t v103 = 0;
    int v104 = 1;
    BOOL v105 = v81 != 0;
    BOOL v106 = v83 != 0;
    unsigned int v107 = v81;
    unsigned int v108 = v83;
    do
    {
      --v107;
      if (v105) {
        v103 |= (unint64_t)(v104 & ~(-1 << v81)) << v102++;
      }
      else {
        unsigned int v107 = 0;
      }
      --v108;
      if (!v106) {
        unsigned int v108 = 0;
      }
      v104 *= 2;
      unsigned int v102 = (__PAIR64__(v102, v106) - 1) >> 32;
      BOOL v106 = v108 != 0;
      BOOL v105 = v107 != 0;
    }
    while (v108 | v107);
    int v109 = 0;
    uint64_t v110 = 0;
    int v111 = 1;
    BOOL v112 = v81 != 0;
    BOOL v113 = v83 != 0;
    unsigned int v114 = v81;
    unsigned int v115 = v83;
    do
    {
      int v116 = v112;
      if (v116) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      int v117 = v109 + v116;
      if (v113) {
        --v115;
      }
      else {
        unsigned int v115 = 0;
      }
      if (v113) {
        v110 |= (unint64_t)(v111 & ~(-1 << v83)) << v117++;
      }
      v111 *= 2;
      int v109 = v117 - 1;
      BOOL v113 = v115 != 0;
      BOOL v112 = v114 != 0;
    }
    while (v115 | v114);
    unsigned int v118 = 0;
    uint64_t v119 = 0;
    int v120 = 1;
    BOOL v121 = v81 != 0;
    BOOL v122 = v83 != 0;
    unsigned int v123 = v81;
    unsigned int v124 = v83;
    do
    {
      --v123;
      if (v121)
      {
        v119 |= (unint64_t)(v120 & v100) << v118;
        unsigned int v125 = v118 + 1;
      }
      else
      {
        unsigned int v123 = 0;
        unsigned int v125 = v118;
      }
      --v124;
      if (!v122) {
        unsigned int v124 = 0;
      }
      v120 *= 2;
      unsigned int v118 = (__PAIR64__(v125, v122) - 1) >> 32;
      BOOL v122 = v124 != 0;
      BOOL v121 = v123 != 0;
    }
    while (v124 | v123);
    LODWORD(result) = 0;
    uint64_t v126 = 0;
    int v127 = 1;
    BOOL v128 = v81 != 0;
    BOOL v129 = v83 != 0;
    unsigned int v130 = v81;
    unsigned int v131 = v83;
    do
    {
      --v130;
      int v132 = v128;
      if (!v132) {
        unsigned int v130 = 0;
      }
      int v133 = result + v132;
      --v131;
      if (v129) {
        v126 |= (unint64_t)(v127 & v92) << v133++;
      }
      else {
        unsigned int v131 = 0;
      }
      v127 *= 2;
      unint64_t result = (v133 - 1);
      BOOL v129 = v131 != 0;
      BOOL v128 = v130 != 0;
    }
    while (v131 | v130);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v101)
    {
      int v134 = 0;
      v135 = (long long *)((char *)&a2[8 * (v100 + ((v94 - v288) << v67) - v84)] + v284);
      uint64_t v136 = (v94 + v286) * a12[3] * *((unsigned __int8 *)a12 + 9) + v275;
      do
      {
        int v137 = v101;
        v138 = v135;
        uint64_t v139 = v119;
        do
        {
          v140 = (_OWORD *)(v136 + ((v139 + v126) << 7));
          long long v141 = *v138;
          long long v142 = v138[1];
          long long v143 = v138[3];
          v140[2] = v138[2];
          v140[3] = v143;
          _OWORD *v140 = v141;
          v140[1] = v142;
          long long v144 = v138[4];
          long long v145 = v138[5];
          long long v146 = v138[7];
          v140[6] = v138[6];
          v140[7] = v146;
          v140[4] = v144;
          v140[5] = v145;
          uint64_t v139 = (v139 - v103) & v103;
          v138 += 8;
          --v137;
        }
        while (v137);
        unint64_t result = v126 - v110;
        uint64_t v126 = (v126 - v110) & v110;
        v135 = (long long *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v297);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  v261 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v147 = a6 >> v20;
    unsigned int v148 = 1 << v21;
    unsigned int v149 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v149 = 0;
    }
    BOOL v150 = v148 >= a5;
    if (v148 < a5) {
      char v151 = v21 + v20 + v149;
    }
    else {
      char v151 = *((unsigned char *)a12 + 12);
    }
    if (v150) {
      LOBYTE(v152) = *((unsigned char *)a12 + 13);
    }
    else {
      int v152 = -v149;
    }
    if (!v147) {
      char v21 = v151;
    }
    char v255 = v21;
    if (v147) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v152;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v255 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v153 = v275;
  unsigned int v155 = a8;
  int v154 = a10;
  unsigned int v254 = v303;
  if (v303)
  {
    unsigned int v156 = 1 << v23;
    unsigned int v157 = v304;
    int v285 = v301;
    BOOL v281 = v301 != 0;
    int v283 = v302;
    BOOL v279 = v302 != 0;
    int v253 = 1 << v255;
    if (1 << v255 >= a5) {
      unsigned int v158 = a5;
    }
    else {
      unsigned int v158 = 1 << v255;
    }
    if (v156 >= a6) {
      unsigned int v159 = a6;
    }
    else {
      unsigned int v159 = 1 << v23;
    }
    unsigned int v160 = 32 - __clz(v158 - 1);
    if (v158 >= 2) {
      unsigned int v161 = v160;
    }
    else {
      unsigned int v161 = 0;
    }
    unsigned int v162 = 32 - __clz(v159 - 1);
    if (v159 < 2) {
      unsigned int v162 = 0;
    }
    BOOL v289 = v161 != 0;
    unsigned int v291 = v162;
    BOOL v287 = v162 != 0;
    if (v304)
    {
      unsigned int v163 = 0;
      int v164 = 0;
      unsigned int v252 = a7 >> v255;
      unsigned int v273 = a8 >> v23;
      int v296 = v305;
      int v293 = v302 | v301;
      unsigned int v251 = a9 + a7;
      int v250 = v298;
      int v165 = v300;
      int v295 = v299;
      int v268 = (v156 - 1) & a8;
      int v270 = (v156 - 1) & (a10 + a8);
      unsigned int v266 = v156 - v268;
      int v166 = ~(-1 << v161);
      int v264 = v300;
      int v265 = v291 | v161;
      unsigned int v277 = v161;
      int v257 = 1 << v23;
      char v258 = v23;
      do
      {
        int v256 = v164;
        int v167 = 0;
        int v168 = 0;
        unsigned int v169 = (v163 + v252) << v255;
        int v170 = a9;
        if (v251 >= (v163 + v252 + 1) << v255) {
          int v170 = v253 - ((v253 - 1) & a7);
        }
        int v171 = 1 << v255;
        if (v251 < (v163 + v252 + 1) << v255) {
          int v171 = (v253 - 1) & (a9 + a7);
        }
        int v172 = v250 + v163;
        int v173 = v163 << v255;
        if (v169 >= v19) {
          int v174 = v171;
        }
        else {
          int v174 = v170;
        }
        if (v169 >= v19) {
          int v175 = 0;
        }
        else {
          int v175 = (v253 - 1) & a7;
        }
        v260 = &v261[8 * (unint64_t)(v175 + v173)];
        do
        {
          int v176 = v295 + v167;
          if (v296)
          {
            int v177 = v293;
            if (v293)
            {
              int v178 = 0;
              int v177 = 0;
              int v179 = 1;
              BOOL v180 = v279;
              BOOL v181 = v281;
              int v183 = v283;
              int v182 = v285;
              do
              {
                --v182;
                if (v181) {
                  v177 |= (v179 & v172) << v178;
                }
                else {
                  int v182 = 0;
                }
                if (v181) {
                  ++v178;
                }
                --v183;
                if (v180) {
                  v177 |= (v179 & v176) << v178;
                }
                else {
                  int v183 = 0;
                }
                if (v180) {
                  ++v178;
                }
                v179 *= 2;
                --v178;
                BOOL v180 = v183 != 0;
                BOOL v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          else
          {
            int v177 = v293;
            if (v293)
            {
              int v184 = 0;
              int v177 = 0;
              int v185 = 1;
              BOOL v187 = v279;
              BOOL v186 = v281;
              int v188 = v283;
              int v189 = v285;
              do
              {
                --v188;
                if (v187) {
                  v177 |= (v185 & v176) << v184;
                }
                else {
                  int v188 = 0;
                }
                if (v187) {
                  ++v184;
                }
                --v189;
                if (v186) {
                  v177 |= (v185 & v172) << v184;
                }
                else {
                  int v189 = 0;
                }
                if (v186) {
                  ++v184;
                }
                v185 *= 2;
                --v184;
                BOOL v186 = v189 != 0;
                BOOL v187 = v188 != 0;
              }
              while (v189 | v188);
            }
          }
          int v190 = *(_DWORD *)(v153 + 4 * ((v177 + v165) | ((v177 + v165) >> 8 << 9)));
          if (v190 < 0)
          {
            unint64_t v191 = v153 - *((void *)a13 + 3) + ((unint64_t)(v190 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v192 = a13[2];
            if (result > v192)
            {
              unint64_t result = get_level_offset_within_tail(result, v192, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v161 = v277;
              unsigned int v156 = v257;
              char v23 = v258;
              uint64_t v17 = a11;
              unsigned int v155 = a8;
              int v154 = a10;
              uint64_t v153 = v275;
              v191 += result;
            }
            unsigned int v193 = (v167 + v273) << v23;
            unsigned int v194 = v266;
            if (a10 + a8 >= (v167 + v273 + 1) << v23)
            {
              unsigned int v195 = v156;
            }
            else
            {
              unsigned int v194 = v154;
              unsigned int v195 = v270;
            }
            if (v193 >= v155) {
              int v196 = 0;
            }
            else {
              int v196 = v268;
            }
            if (v193 >= v155) {
              unsigned int v194 = v195;
            }
            if (!v265)
            {
              uint64_t v214 = 0;
              uint64_t v198 = 0;
              uint64_t v205 = 0;
              uint64_t v221 = 0;
              int v165 = v264;
              if (!v194) {
                goto LABEL_191;
              }
LABEL_263:
              if (v174)
              {
                int v228 = 0;
                v229 = (long long *)((char *)v260 + (v196 + (v167 << v23)) * v17);
                do
                {
                  int v230 = v174;
                  v231 = v229;
                  uint64_t v232 = v214;
                  do
                  {
                    unint64_t result = v191 + ((v232 + v221) << 7);
                    long long v233 = *v231;
                    long long v234 = v231[1];
                    long long v235 = v231[3];
                    *(_OWORD *)(result + 32) = v231[2];
                    *(_OWORD *)(result + 48) = v235;
                    *(_OWORD *)unint64_t result = v233;
                    *(_OWORD *)(result + 16) = v234;
                    long long v236 = v231[4];
                    long long v237 = v231[5];
                    long long v238 = v231[7];
                    *(_OWORD *)(result + 96) = v231[6];
                    *(_OWORD *)(result + 112) = v238;
                    *(_OWORD *)(result + 64) = v236;
                    *(_OWORD *)(result + 80) = v237;
                    uint64_t v232 = (v232 - v198) & v198;
                    v231 += 8;
                    --v230;
                  }
                  while (v230);
                  uint64_t v221 = (v221 - v205) & v205;
                  v229 = (long long *)((char *)v229 + v17);
                  ++v228;
                }
                while (v228 != v194);
              }
              goto LABEL_191;
            }
            unsigned int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v287;
            BOOL v201 = v289;
            unsigned int v202 = v161;
            unsigned int v203 = v291;
            do
            {
              --v202;
              if (v201) {
                v198 |= (unint64_t)(v199 & v166) << v197++;
              }
              else {
                unsigned int v202 = 0;
              }
              --v203;
              if (!v200) {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              unsigned int v197 = (__PAIR64__(v197, v200) - 1) >> 32;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            int v204 = 0;
            uint64_t v205 = 0;
            int v206 = 1;
            BOOL v207 = v287;
            BOOL v208 = v289;
            unsigned int v209 = v161;
            unsigned int v210 = v291;
            do
            {
              --v209;
              int v211 = v208;
              if (!v211) {
                unsigned int v209 = 0;
              }
              int v212 = v204 + v211;
              --v210;
              if (v207) {
                v205 |= (unint64_t)(v206 & ~(-1 << v291)) << v212++;
              }
              else {
                unsigned int v210 = 0;
              }
              v206 *= 2;
              int v204 = v212 - 1;
              BOOL v207 = v210 != 0;
              BOOL v208 = v209 != 0;
            }
            while (v210 | v209);
            unsigned int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            BOOL v217 = v287;
            BOOL v216 = v289;
            unsigned int v218 = v161;
            unsigned int v219 = v291;
            do
            {
              --v218;
              if (v216) {
                v214 |= (unint64_t)(v215 & v175) << v213++;
              }
              else {
                unsigned int v218 = 0;
              }
              --v219;
              if (!v217) {
                unsigned int v219 = 0;
              }
              v215 *= 2;
              unsigned int v213 = (__PAIR64__(v213, v217) - 1) >> 32;
              BOOL v217 = v219 != 0;
              BOOL v216 = v218 != 0;
            }
            while (v219 | v218);
            int v220 = 0;
            uint64_t v221 = 0;
            int v222 = 1;
            LOBYTE(result) = v287;
            BOOL v223 = v289;
            unsigned int v224 = v161;
            unsigned int v225 = v291;
            do
            {
              --v224;
              int v226 = v223;
              if (!v226) {
                unsigned int v224 = 0;
              }
              int v227 = v220 + v226;
              --v225;
              if (result) {
                v221 |= (unint64_t)(v222 & v196) << v227++;
              }
              else {
                unsigned int v225 = 0;
              }
              v222 *= 2;
              int v220 = v227 - 1;
              unint64_t result = v225 != 0;
              BOOL v223 = v224 != 0;
            }
            while (v225 | v224);
            unsigned int v161 = v277;
            int v165 = v264;
            if (v194) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v167 = (unsigned __int16)++v168;
        }
        while (v157 > (unsigned __int16)v168);
        int v164 = v256 + 1;
        unsigned int v163 = (unsigned __int16)(v256 + 1);
        unsigned int v19 = a7;
      }
      while (v254 > v163);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,4u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v233 = a9;
        long long v234 = v13;
        uint64_t v235 = v47;
        do
        {
          long long v236 = (_OWORD *)(result + ((v235 + v54) << 6));
          long long v237 = *v234;
          long long v238 = v234[1];
          long long v239 = v234[3];
          v236[2] = v234[2];
          v236[3] = v239;
          *long long v236 = v237;
          v236[1] = v238;
          uint64_t v235 = (v235 - v29) & v29;
          v234 += 4;
          --v233;
        }
        while (v233);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v265 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v268 = a8 >> v66;
    unsigned int v270 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v266 = a10 + a8;
    unsigned int v262 = (v69 - 1 + a10 + a8) >> v66;
    char v264 = v66;
    if (a8 >> v66 >= v262) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v284 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v270 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v278 = a7 >> v67;
    unsigned int v282 = (v77 + a9 + a7) >> v67;
    if (result >= v282) {
      return result;
    }
    unsigned int v261 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v280 = v77 & v284;
    int v257 = v76 & v266;
    uint64_t v259 = v76 & a8;
    unsigned int v85 = v268;
LABEL_89:
    unsigned int v86 = v85 << v264;
    unsigned int v87 = v85 - v268;
    int v276 = v85 * v261;
    unsigned int v272 = v85 + 1;
    BOOL v88 = v266 >= (v85 + 1) << v264;
    unsigned int v89 = v270;
    if (!v88) {
      unsigned int v89 = v257;
    }
    int v90 = v270 - v259;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v264;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v259;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v274 = (v92 + v91 - v259) * a11;
    unsigned int v94 = v278;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v284 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v280;
      if (v284 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v282)
      {
        unsigned int v85 = v272;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v272 == v262) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[4 * (v100 + ((v94 - v278) << v67) - v84)] + v274);
      uint64_t v135 = (v94 + v276) * a12[3] * *((unsigned __int8 *)a12 + 9) + v265;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (_OWORD *)(v135 + ((v138 + v125) << 6));
          long long v140 = *v137;
          long long v141 = v137[1];
          long long v142 = v137[3];
          v139[2] = v137[2];
          v139[3] = v142;
          *uint64_t v139 = v140;
          v139[1] = v141;
          uint64_t v138 = (v138 - v102) & v102;
          v137 += 4;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v287);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  unsigned int v251 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v143 = a6 >> v20;
    unsigned int v144 = 1 << v21;
    unsigned int v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v145 = 0;
    }
    BOOL v146 = v144 >= a5;
    if (v144 < a5) {
      char v147 = v21 + v20 + v145;
    }
    else {
      char v147 = *((unsigned char *)a12 + 12);
    }
    if (v146) {
      LOBYTE(v148) = *((unsigned char *)a12 + 13);
    }
    else {
      int v148 = -v145;
    }
    if (!v143) {
      char v21 = v147;
    }
    char v245 = v21;
    if (v143) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v148;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v245 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v149 = v265;
  unsigned int v151 = a8;
  int v150 = a10;
  unsigned int v244 = v293;
  if (v293)
  {
    unsigned int v152 = 1 << v23;
    unsigned int v153 = v294;
    int v275 = v291;
    BOOL v271 = v291 != 0;
    int v273 = v292;
    BOOL v269 = v292 != 0;
    int v243 = 1 << v245;
    if (1 << v245 >= a5) {
      unsigned int v154 = a5;
    }
    else {
      unsigned int v154 = 1 << v245;
    }
    if (v152 >= a6) {
      unsigned int v155 = a6;
    }
    else {
      unsigned int v155 = 1 << v23;
    }
    unsigned int v156 = 32 - __clz(v154 - 1);
    if (v154 >= 2) {
      unsigned int v157 = v156;
    }
    else {
      unsigned int v157 = 0;
    }
    unsigned int v158 = 32 - __clz(v155 - 1);
    if (v155 < 2) {
      unsigned int v158 = 0;
    }
    BOOL v279 = v157 != 0;
    unsigned int v281 = v158;
    BOOL v277 = v158 != 0;
    if (v294)
    {
      unsigned int v159 = 0;
      int v160 = 0;
      unsigned int v242 = a7 >> v245;
      unsigned int v263 = a8 >> v23;
      int v286 = v295;
      int v283 = v292 | v291;
      unsigned int v241 = a9 + a7;
      int v240 = v288;
      int v161 = v290;
      int v285 = v289;
      int v258 = (v152 - 1) & a8;
      int v260 = (v152 - 1) & (a10 + a8);
      unsigned int v256 = v152 - v258;
      int v162 = ~(-1 << v157);
      int v254 = v290;
      int v255 = v281 | v157;
      unsigned int v267 = v157;
      int v247 = 1 << v23;
      char v248 = v23;
      do
      {
        int v246 = v160;
        int v163 = 0;
        int v164 = 0;
        unsigned int v165 = (v159 + v242) << v245;
        int v166 = a9;
        if (v241 >= (v159 + v242 + 1) << v245) {
          int v166 = v243 - ((v243 - 1) & a7);
        }
        int v167 = 1 << v245;
        if (v241 < (v159 + v242 + 1) << v245) {
          int v167 = (v243 - 1) & (a9 + a7);
        }
        int v168 = v240 + v159;
        int v169 = v159 << v245;
        if (v165 >= v19) {
          int v170 = v167;
        }
        else {
          int v170 = v166;
        }
        if (v165 >= v19) {
          int v171 = 0;
        }
        else {
          int v171 = (v243 - 1) & a7;
        }
        int v250 = &v251[4 * (unint64_t)(v171 + v169)];
        do
        {
          int v172 = v285 + v163;
          if (v286)
          {
            int v173 = v283;
            if (v283)
            {
              int v174 = 0;
              int v173 = 0;
              int v175 = 1;
              BOOL v176 = v269;
              BOOL v177 = v271;
              int v179 = v273;
              int v178 = v275;
              do
              {
                --v178;
                if (v177) {
                  v173 |= (v175 & v168) << v174;
                }
                else {
                  int v178 = 0;
                }
                if (v177) {
                  ++v174;
                }
                --v179;
                if (v176) {
                  v173 |= (v175 & v172) << v174;
                }
                else {
                  int v179 = 0;
                }
                if (v176) {
                  ++v174;
                }
                v175 *= 2;
                --v174;
                BOOL v176 = v179 != 0;
                BOOL v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            int v173 = v283;
            if (v283)
            {
              int v180 = 0;
              int v173 = 0;
              int v181 = 1;
              BOOL v183 = v269;
              BOOL v182 = v271;
              int v184 = v273;
              int v185 = v275;
              do
              {
                --v184;
                if (v183) {
                  v173 |= (v181 & v172) << v180;
                }
                else {
                  int v184 = 0;
                }
                if (v183) {
                  ++v180;
                }
                --v185;
                if (v182) {
                  v173 |= (v181 & v168) << v180;
                }
                else {
                  int v185 = 0;
                }
                if (v182) {
                  ++v180;
                }
                v181 *= 2;
                --v180;
                BOOL v182 = v185 != 0;
                BOOL v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          int v186 = *(_DWORD *)(v149 + 4 * ((v173 + v161) | ((v173 + v161) >> 8 << 9)));
          if (v186 < 0)
          {
            unint64_t v187 = v149 - *((void *)a13 + 3) + ((unint64_t)(v186 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v188 = a13[2];
            if (result > v188)
            {
              unint64_t result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v157 = v267;
              unsigned int v152 = v247;
              char v23 = v248;
              uint64_t v17 = a11;
              unsigned int v151 = a8;
              int v150 = a10;
              uint64_t v149 = v265;
              v187 += result;
            }
            unsigned int v189 = (v163 + v263) << v23;
            unsigned int v190 = v256;
            if (a10 + a8 >= (v163 + v263 + 1) << v23)
            {
              unsigned int v191 = v152;
            }
            else
            {
              unsigned int v190 = v150;
              unsigned int v191 = v260;
            }
            if (v189 >= v151) {
              int v192 = 0;
            }
            else {
              int v192 = v258;
            }
            if (v189 >= v151) {
              unsigned int v190 = v191;
            }
            if (!v255)
            {
              uint64_t v210 = 0;
              uint64_t v194 = 0;
              uint64_t v201 = 0;
              uint64_t v217 = 0;
              int v161 = v254;
              if (!v190) {
                goto LABEL_191;
              }
LABEL_263:
              if (v170)
              {
                int v224 = 0;
                unsigned int v225 = (long long *)((char *)v250 + (v192 + (v163 << v23)) * v17);
                do
                {
                  int v226 = v170;
                  int v227 = v225;
                  uint64_t v228 = v210;
                  do
                  {
                    unint64_t result = v187 + ((v228 + v217) << 6);
                    long long v229 = *v227;
                    long long v230 = v227[1];
                    long long v231 = v227[3];
                    *(_OWORD *)(result + 32) = v227[2];
                    *(_OWORD *)(result + 48) = v231;
                    *(_OWORD *)unint64_t result = v229;
                    *(_OWORD *)(result + 16) = v230;
                    uint64_t v228 = (v228 - v194) & v194;
                    v227 += 4;
                    --v226;
                  }
                  while (v226);
                  uint64_t v217 = (v217 - v201) & v201;
                  unsigned int v225 = (long long *)((char *)v225 + v17);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_191;
            }
            unsigned int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v277;
            BOOL v197 = v279;
            unsigned int v198 = v157;
            unsigned int v199 = v281;
            do
            {
              --v198;
              if (v197) {
                v194 |= (unint64_t)(v195 & v162) << v193++;
              }
              else {
                unsigned int v198 = 0;
              }
              --v199;
              if (!v196) {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              unsigned int v193 = (__PAIR64__(v193, v196) - 1) >> 32;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            int v200 = 0;
            uint64_t v201 = 0;
            int v202 = 1;
            BOOL v203 = v277;
            BOOL v204 = v279;
            unsigned int v205 = v157;
            unsigned int v206 = v281;
            do
            {
              --v205;
              int v207 = v204;
              if (!v207) {
                unsigned int v205 = 0;
              }
              int v208 = v200 + v207;
              --v206;
              if (v203) {
                v201 |= (unint64_t)(v202 & ~(-1 << v281)) << v208++;
              }
              else {
                unsigned int v206 = 0;
              }
              v202 *= 2;
              int v200 = v208 - 1;
              BOOL v203 = v206 != 0;
              BOOL v204 = v205 != 0;
            }
            while (v206 | v205);
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            BOOL v213 = v277;
            BOOL v212 = v279;
            unsigned int v214 = v157;
            unsigned int v215 = v281;
            do
            {
              --v214;
              if (v212) {
                v210 |= (unint64_t)(v211 & v171) << v209++;
              }
              else {
                unsigned int v214 = 0;
              }
              --v215;
              if (!v213) {
                unsigned int v215 = 0;
              }
              v211 *= 2;
              unsigned int v209 = (__PAIR64__(v209, v213) - 1) >> 32;
              BOOL v213 = v215 != 0;
              BOOL v212 = v214 != 0;
            }
            while (v215 | v214);
            int v216 = 0;
            uint64_t v217 = 0;
            int v218 = 1;
            LOBYTE(result) = v277;
            BOOL v219 = v279;
            unsigned int v220 = v157;
            unsigned int v221 = v281;
            do
            {
              --v220;
              int v222 = v219;
              if (!v222) {
                unsigned int v220 = 0;
              }
              int v223 = v216 + v222;
              --v221;
              if (result) {
                v217 |= (unint64_t)(v218 & v192) << v223++;
              }
              else {
                unsigned int v221 = 0;
              }
              v218 *= 2;
              int v216 = v223 - 1;
              unint64_t result = v221 != 0;
              BOOL v219 = v220 != 0;
            }
            while (v221 | v220);
            unsigned int v157 = v267;
            int v161 = v254;
            if (v190) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v163 = (unsigned __int16)++v164;
        }
        while (v153 > (unsigned __int16)v164);
        int v160 = v246 + 1;
        unsigned int v159 = (unsigned __int16)(v246 + 1);
        unsigned int v19 = a7;
      }
      while (v244 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,2u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v231 = a9;
        uint64_t v232 = v13;
        uint64_t v233 = v47;
        do
        {
          long long v234 = (_OWORD *)(result + 32 * (v233 + v54));
          long long v235 = *v232;
          long long v236 = v232[1];
          v232 += 2;
          *long long v234 = v235;
          v234[1] = v236;
          uint64_t v233 = (v233 - v29) & v29;
          --v231;
        }
        while (v231);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v262 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v265 = a8 >> v66;
    unsigned int v267 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v263 = a10 + a8;
    unsigned int v259 = (v69 - 1 + a10 + a8) >> v66;
    char v261 = v66;
    if (a8 >> v66 >= v259) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v281 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v267 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v275 = a7 >> v67;
    unsigned int v279 = (v77 + a9 + a7) >> v67;
    if (result >= v279) {
      return result;
    }
    unsigned int v258 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v277 = v77 & v281;
    int v254 = v76 & v263;
    uint64_t v256 = v76 & a8;
    unsigned int v85 = v265;
LABEL_89:
    unsigned int v86 = v85 << v261;
    unsigned int v87 = v85 - v265;
    int v273 = v85 * v258;
    unsigned int v269 = v85 + 1;
    BOOL v88 = v263 >= (v85 + 1) << v261;
    unsigned int v89 = v267;
    if (!v88) {
      unsigned int v89 = v254;
    }
    int v90 = v267 - v256;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v261;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v256;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v271 = (v92 + v91 - v256) * a11;
    unsigned int v94 = v275;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v281 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v277;
      if (v281 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v279)
      {
        unsigned int v85 = v269;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v269 == v259) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[2 * (v100 + ((v94 - v275) << v67) - v84)] + v271);
      uint64_t v135 = (v94 + v273) * a12[3] * *((unsigned __int8 *)a12 + 9) + v262;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (_OWORD *)(v135 + 32 * (v138 + v125));
          long long v140 = *v137;
          long long v141 = v137[1];
          v137 += 2;
          *uint64_t v139 = v140;
          v139[1] = v141;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v284);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  char v248 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v142 = a6 >> v20;
    unsigned int v143 = 1 << v21;
    unsigned int v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v144 = 0;
    }
    BOOL v145 = v143 >= a5;
    if (v143 < a5) {
      char v146 = v21 + v20 + v144;
    }
    else {
      char v146 = *((unsigned char *)a12 + 12);
    }
    if (v145) {
      LOBYTE(v147) = *((unsigned char *)a12 + 13);
    }
    else {
      int v147 = -v144;
    }
    if (!v142) {
      char v21 = v146;
    }
    char v242 = v21;
    if (v142) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v147;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v242 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v148 = v262;
  unsigned int v150 = a8;
  int v149 = a10;
  unsigned int v241 = v290;
  if (v290)
  {
    unsigned int v151 = 1 << v23;
    unsigned int v152 = v291;
    int v272 = v288;
    BOOL v268 = v288 != 0;
    int v270 = v289;
    BOOL v266 = v289 != 0;
    int v240 = 1 << v242;
    if (1 << v242 >= a5) {
      unsigned int v153 = a5;
    }
    else {
      unsigned int v153 = 1 << v242;
    }
    if (v151 >= a6) {
      unsigned int v154 = a6;
    }
    else {
      unsigned int v154 = 1 << v23;
    }
    unsigned int v155 = 32 - __clz(v153 - 1);
    if (v153 >= 2) {
      unsigned int v156 = v155;
    }
    else {
      unsigned int v156 = 0;
    }
    unsigned int v157 = 32 - __clz(v154 - 1);
    if (v154 < 2) {
      unsigned int v157 = 0;
    }
    BOOL v276 = v156 != 0;
    unsigned int v278 = v157;
    BOOL v274 = v157 != 0;
    if (v291)
    {
      unsigned int v158 = 0;
      int v159 = 0;
      unsigned int v239 = a7 >> v242;
      unsigned int v260 = a8 >> v23;
      int v283 = v292;
      int v280 = v289 | v288;
      unsigned int v238 = a9 + a7;
      int v237 = v285;
      int v160 = v287;
      int v282 = v286;
      int v255 = (v151 - 1) & a8;
      int v257 = (v151 - 1) & (a10 + a8);
      unsigned int v253 = v151 - v255;
      int v161 = ~(-1 << v156);
      int v251 = v287;
      int v252 = v278 | v156;
      unsigned int v264 = v156;
      int v244 = 1 << v23;
      char v245 = v23;
      do
      {
        int v243 = v159;
        int v162 = 0;
        int v163 = 0;
        unsigned int v164 = (v158 + v239) << v242;
        int v165 = a9;
        if (v238 >= (v158 + v239 + 1) << v242) {
          int v165 = v240 - ((v240 - 1) & a7);
        }
        int v166 = 1 << v242;
        if (v238 < (v158 + v239 + 1) << v242) {
          int v166 = (v240 - 1) & (a9 + a7);
        }
        int v167 = v237 + v158;
        int v168 = v158 << v242;
        if (v164 >= v19) {
          int v169 = v166;
        }
        else {
          int v169 = v165;
        }
        if (v164 >= v19) {
          int v170 = 0;
        }
        else {
          int v170 = (v240 - 1) & a7;
        }
        int v247 = &v248[2 * (v170 + v168)];
        do
        {
          int v171 = v282 + v162;
          if (v283)
          {
            int v172 = v280;
            if (v280)
            {
              int v173 = 0;
              int v172 = 0;
              int v174 = 1;
              BOOL v175 = v266;
              BOOL v176 = v268;
              int v178 = v270;
              int v177 = v272;
              do
              {
                --v177;
                if (v176) {
                  v172 |= (v174 & v167) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v172 |= (v174 & v171) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            int v172 = v280;
            if (v280)
            {
              int v179 = 0;
              int v172 = 0;
              int v180 = 1;
              BOOL v182 = v266;
              BOOL v181 = v268;
              int v183 = v270;
              int v184 = v272;
              do
              {
                --v183;
                if (v182) {
                  v172 |= (v180 & v171) << v179;
                }
                else {
                  int v183 = 0;
                }
                if (v182) {
                  ++v179;
                }
                --v184;
                if (v181) {
                  v172 |= (v180 & v167) << v179;
                }
                else {
                  int v184 = 0;
                }
                if (v181) {
                  ++v179;
                }
                v180 *= 2;
                --v179;
                BOOL v181 = v184 != 0;
                BOOL v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          int v185 = *(_DWORD *)(v148 + 4 * ((v172 + v160) | ((v172 + v160) >> 8 << 9)));
          if (v185 < 0)
          {
            unint64_t v186 = v148 - *((void *)a13 + 3) + ((unint64_t)(v185 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v187 = a13[2];
            if (result > v187)
            {
              unint64_t result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v156 = v264;
              unsigned int v151 = v244;
              char v23 = v245;
              uint64_t v17 = a11;
              unsigned int v150 = a8;
              int v149 = a10;
              uint64_t v148 = v262;
              v186 += result;
            }
            unsigned int v188 = (v162 + v260) << v23;
            unsigned int v189 = v253;
            if (a10 + a8 >= (v162 + v260 + 1) << v23)
            {
              unsigned int v190 = v151;
            }
            else
            {
              unsigned int v189 = v149;
              unsigned int v190 = v257;
            }
            if (v188 >= v150) {
              int v191 = 0;
            }
            else {
              int v191 = v255;
            }
            if (v188 >= v150) {
              unsigned int v189 = v190;
            }
            if (!v252)
            {
              uint64_t v209 = 0;
              uint64_t v193 = 0;
              uint64_t v200 = 0;
              uint64_t v216 = 0;
              int v160 = v251;
              if (!v189) {
                goto LABEL_191;
              }
LABEL_263:
              if (v169)
              {
                int v223 = 0;
                int v224 = (long long *)((char *)v247 + (v191 + (v162 << v23)) * v17);
                do
                {
                  int v225 = v169;
                  int v226 = v224;
                  uint64_t v227 = v209;
                  do
                  {
                    unint64_t result = v186 + 32 * (v227 + v216);
                    long long v228 = *v226;
                    long long v229 = v226[1];
                    v226 += 2;
                    *(_OWORD *)unint64_t result = v228;
                    *(_OWORD *)(result + 16) = v229;
                    uint64_t v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  uint64_t v216 = (v216 - v200) & v200;
                  int v224 = (long long *)((char *)v224 + v17);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_191;
            }
            unsigned int v192 = 0;
            uint64_t v193 = 0;
            int v194 = 1;
            BOOL v195 = v274;
            BOOL v196 = v276;
            unsigned int v197 = v156;
            unsigned int v198 = v278;
            do
            {
              --v197;
              if (v196) {
                v193 |= (unint64_t)(v194 & v161) << v192++;
              }
              else {
                unsigned int v197 = 0;
              }
              --v198;
              if (!v195) {
                unsigned int v198 = 0;
              }
              v194 *= 2;
              unsigned int v192 = (__PAIR64__(v192, v195) - 1) >> 32;
              BOOL v195 = v198 != 0;
              BOOL v196 = v197 != 0;
            }
            while (v198 | v197);
            int v199 = 0;
            uint64_t v200 = 0;
            int v201 = 1;
            BOOL v202 = v274;
            BOOL v203 = v276;
            unsigned int v204 = v156;
            unsigned int v205 = v278;
            do
            {
              --v204;
              int v206 = v203;
              if (!v206) {
                unsigned int v204 = 0;
              }
              int v207 = v199 + v206;
              --v205;
              if (v202) {
                v200 |= (unint64_t)(v201 & ~(-1 << v278)) << v207++;
              }
              else {
                unsigned int v205 = 0;
              }
              v201 *= 2;
              int v199 = v207 - 1;
              BOOL v202 = v205 != 0;
              BOOL v203 = v204 != 0;
            }
            while (v205 | v204);
            unsigned int v208 = 0;
            uint64_t v209 = 0;
            int v210 = 1;
            BOOL v212 = v274;
            BOOL v211 = v276;
            unsigned int v213 = v156;
            unsigned int v214 = v278;
            do
            {
              --v213;
              if (v211) {
                v209 |= (unint64_t)(v210 & v170) << v208++;
              }
              else {
                unsigned int v213 = 0;
              }
              --v214;
              if (!v212) {
                unsigned int v214 = 0;
              }
              v210 *= 2;
              unsigned int v208 = (__PAIR64__(v208, v212) - 1) >> 32;
              BOOL v212 = v214 != 0;
              BOOL v211 = v213 != 0;
            }
            while (v214 | v213);
            int v215 = 0;
            uint64_t v216 = 0;
            int v217 = 1;
            LOBYTE(result) = v274;
            BOOL v218 = v276;
            unsigned int v219 = v156;
            unsigned int v220 = v278;
            do
            {
              --v219;
              int v221 = v218;
              if (!v221) {
                unsigned int v219 = 0;
              }
              int v222 = v215 + v221;
              --v220;
              if (result) {
                v216 |= (unint64_t)(v217 & v191) << v222++;
              }
              else {
                unsigned int v220 = 0;
              }
              v217 *= 2;
              int v215 = v222 - 1;
              unint64_t result = v220 != 0;
              BOOL v218 = v219 != 0;
            }
            while (v220 | v219);
            unsigned int v156 = v264;
            int v160 = v251;
            if (v189) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v162 = (unsigned __int16)++v163;
        }
        while (v152 > (unsigned __int16)v163);
        int v159 = v243 + 1;
        unsigned int v158 = (unsigned __int16)(v243 + 1);
        unsigned int v19 = a7;
      }
      while (v241 > v158);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,8u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v233 = a9;
        long long v234 = v13;
        uint64_t v235 = v47;
        do
        {
          long long v236 = (_OWORD *)(result + ((v235 + v54) << 6));
          long long v237 = *v234;
          long long v238 = v234[1];
          long long v239 = v234[3];
          v236[2] = v234[2];
          v236[3] = v239;
          *long long v236 = v237;
          v236[1] = v238;
          uint64_t v235 = (v235 - v29) & v29;
          v234 += 4;
          --v233;
        }
        while (v233);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v265 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v268 = a8 >> v66;
    unsigned int v270 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v266 = a10 + a8;
    unsigned int v262 = (v69 - 1 + a10 + a8) >> v66;
    char v264 = v66;
    if (a8 >> v66 >= v262) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v284 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v270 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v278 = a7 >> v67;
    unsigned int v282 = (v77 + a9 + a7) >> v67;
    if (result >= v282) {
      return result;
    }
    unsigned int v261 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v280 = v77 & v284;
    int v257 = v76 & v266;
    uint64_t v259 = v76 & a8;
    unsigned int v85 = v268;
LABEL_89:
    unsigned int v86 = v85 << v264;
    unsigned int v87 = v85 - v268;
    int v276 = v85 * v261;
    unsigned int v272 = v85 + 1;
    BOOL v88 = v266 >= (v85 + 1) << v264;
    unsigned int v89 = v270;
    if (!v88) {
      unsigned int v89 = v257;
    }
    int v90 = v270 - v259;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v264;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v259;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v274 = (v92 + v91 - v259) * a11;
    unsigned int v94 = v278;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v284 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v280;
      if (v284 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v282)
      {
        unsigned int v85 = v272;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v272 == v262) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[4 * (v100 + ((v94 - v278) << v67) - v84)] + v274);
      uint64_t v135 = (v94 + v276) * a12[3] * *((unsigned __int8 *)a12 + 9) + v265;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (_OWORD *)(v135 + ((v138 + v125) << 6));
          long long v140 = *v137;
          long long v141 = v137[1];
          long long v142 = v137[3];
          v139[2] = v137[2];
          v139[3] = v142;
          *uint64_t v139 = v140;
          v139[1] = v141;
          uint64_t v138 = (v138 - v102) & v102;
          v137 += 4;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v287);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v251 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v143 = a6 >> v20;
    unsigned int v144 = 1 << v21;
    unsigned int v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v145 = 0;
    }
    BOOL v146 = v144 >= a5;
    if (v144 < a5) {
      char v147 = v21 + v20 + v145;
    }
    else {
      char v147 = *((unsigned char *)a12 + 12);
    }
    if (v146) {
      LOBYTE(v148) = *((unsigned char *)a12 + 13);
    }
    else {
      int v148 = -v145;
    }
    if (!v143) {
      char v21 = v147;
    }
    char v245 = v21;
    if (v143) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v148;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v245 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v149 = v265;
  unsigned int v151 = a8;
  int v150 = a10;
  unsigned int v244 = v293;
  if (v293)
  {
    unsigned int v152 = 1 << v23;
    unsigned int v153 = v294;
    int v275 = v291;
    BOOL v271 = v291 != 0;
    int v273 = v292;
    BOOL v269 = v292 != 0;
    int v243 = 1 << v245;
    if (1 << v245 >= a5) {
      unsigned int v154 = a5;
    }
    else {
      unsigned int v154 = 1 << v245;
    }
    if (v152 >= a6) {
      unsigned int v155 = a6;
    }
    else {
      unsigned int v155 = 1 << v23;
    }
    unsigned int v156 = 32 - __clz(v154 - 1);
    if (v154 >= 2) {
      unsigned int v157 = v156;
    }
    else {
      unsigned int v157 = 0;
    }
    unsigned int v158 = 32 - __clz(v155 - 1);
    if (v155 < 2) {
      unsigned int v158 = 0;
    }
    BOOL v279 = v157 != 0;
    unsigned int v281 = v158;
    BOOL v277 = v158 != 0;
    if (v294)
    {
      unsigned int v159 = 0;
      int v160 = 0;
      unsigned int v242 = a7 >> v245;
      unsigned int v263 = a8 >> v23;
      int v286 = v295;
      int v283 = v292 | v291;
      unsigned int v241 = a9 + a7;
      int v240 = v288;
      int v161 = v290;
      int v285 = v289;
      int v258 = (v152 - 1) & a8;
      int v260 = (v152 - 1) & (a10 + a8);
      unsigned int v256 = v152 - v258;
      int v162 = ~(-1 << v157);
      int v254 = v290;
      int v255 = v281 | v157;
      unsigned int v267 = v157;
      int v247 = 1 << v23;
      char v248 = v23;
      do
      {
        int v246 = v160;
        int v163 = 0;
        int v164 = 0;
        unsigned int v165 = (v159 + v242) << v245;
        int v166 = a9;
        if (v241 >= (v159 + v242 + 1) << v245) {
          int v166 = v243 - ((v243 - 1) & a7);
        }
        int v167 = 1 << v245;
        if (v241 < (v159 + v242 + 1) << v245) {
          int v167 = (v243 - 1) & (a9 + a7);
        }
        int v168 = v240 + v159;
        int v169 = v159 << v245;
        if (v165 >= v19) {
          int v170 = v167;
        }
        else {
          int v170 = v166;
        }
        if (v165 >= v19) {
          int v171 = 0;
        }
        else {
          int v171 = (v243 - 1) & a7;
        }
        int v250 = &v251[4 * (unint64_t)(v171 + v169)];
        do
        {
          int v172 = v285 + v163;
          if (v286)
          {
            int v173 = v283;
            if (v283)
            {
              int v174 = 0;
              int v173 = 0;
              int v175 = 1;
              BOOL v176 = v269;
              BOOL v177 = v271;
              int v179 = v273;
              int v178 = v275;
              do
              {
                --v178;
                if (v177) {
                  v173 |= (v175 & v168) << v174;
                }
                else {
                  int v178 = 0;
                }
                if (v177) {
                  ++v174;
                }
                --v179;
                if (v176) {
                  v173 |= (v175 & v172) << v174;
                }
                else {
                  int v179 = 0;
                }
                if (v176) {
                  ++v174;
                }
                v175 *= 2;
                --v174;
                BOOL v176 = v179 != 0;
                BOOL v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            int v173 = v283;
            if (v283)
            {
              int v180 = 0;
              int v173 = 0;
              int v181 = 1;
              BOOL v183 = v269;
              BOOL v182 = v271;
              int v184 = v273;
              int v185 = v275;
              do
              {
                --v184;
                if (v183) {
                  v173 |= (v181 & v172) << v180;
                }
                else {
                  int v184 = 0;
                }
                if (v183) {
                  ++v180;
                }
                --v185;
                if (v182) {
                  v173 |= (v181 & v168) << v180;
                }
                else {
                  int v185 = 0;
                }
                if (v182) {
                  ++v180;
                }
                v181 *= 2;
                --v180;
                BOOL v182 = v185 != 0;
                BOOL v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          int v186 = *(_DWORD *)(v149 + 4 * ((v173 + v161) | ((v173 + v161) >> 8 << 9)));
          if (v186 < 0)
          {
            unint64_t v187 = v149 - *((void *)a13 + 3) + ((unint64_t)(v186 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v188 = a13[2];
            if (result > v188)
            {
              unint64_t result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v157 = v267;
              unsigned int v152 = v247;
              char v23 = v248;
              uint64_t v17 = a11;
              unsigned int v151 = a8;
              int v150 = a10;
              uint64_t v149 = v265;
              v187 += result;
            }
            unsigned int v189 = (v163 + v263) << v23;
            unsigned int v190 = v256;
            if (a10 + a8 >= (v163 + v263 + 1) << v23)
            {
              unsigned int v191 = v152;
            }
            else
            {
              unsigned int v190 = v150;
              unsigned int v191 = v260;
            }
            if (v189 >= v151) {
              int v192 = 0;
            }
            else {
              int v192 = v258;
            }
            if (v189 >= v151) {
              unsigned int v190 = v191;
            }
            if (!v255)
            {
              uint64_t v210 = 0;
              uint64_t v194 = 0;
              uint64_t v201 = 0;
              uint64_t v217 = 0;
              int v161 = v254;
              if (!v190) {
                goto LABEL_191;
              }
LABEL_263:
              if (v170)
              {
                int v224 = 0;
                int v225 = (long long *)((char *)v250 + (v192 + (v163 << v23)) * v17);
                do
                {
                  int v226 = v170;
                  uint64_t v227 = v225;
                  uint64_t v228 = v210;
                  do
                  {
                    unint64_t result = v187 + ((v228 + v217) << 6);
                    long long v229 = *v227;
                    long long v230 = v227[1];
                    long long v231 = v227[3];
                    *(_OWORD *)(result + 32) = v227[2];
                    *(_OWORD *)(result + 48) = v231;
                    *(_OWORD *)unint64_t result = v229;
                    *(_OWORD *)(result + 16) = v230;
                    uint64_t v228 = (v228 - v194) & v194;
                    v227 += 4;
                    --v226;
                  }
                  while (v226);
                  uint64_t v217 = (v217 - v201) & v201;
                  int v225 = (long long *)((char *)v225 + v17);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_191;
            }
            unsigned int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v277;
            BOOL v197 = v279;
            unsigned int v198 = v157;
            unsigned int v199 = v281;
            do
            {
              --v198;
              if (v197) {
                v194 |= (unint64_t)(v195 & v162) << v193++;
              }
              else {
                unsigned int v198 = 0;
              }
              --v199;
              if (!v196) {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              unsigned int v193 = (__PAIR64__(v193, v196) - 1) >> 32;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            int v200 = 0;
            uint64_t v201 = 0;
            int v202 = 1;
            BOOL v203 = v277;
            BOOL v204 = v279;
            unsigned int v205 = v157;
            unsigned int v206 = v281;
            do
            {
              --v205;
              int v207 = v204;
              if (!v207) {
                unsigned int v205 = 0;
              }
              int v208 = v200 + v207;
              --v206;
              if (v203) {
                v201 |= (unint64_t)(v202 & ~(-1 << v281)) << v208++;
              }
              else {
                unsigned int v206 = 0;
              }
              v202 *= 2;
              int v200 = v208 - 1;
              BOOL v203 = v206 != 0;
              BOOL v204 = v205 != 0;
            }
            while (v206 | v205);
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            BOOL v213 = v277;
            BOOL v212 = v279;
            unsigned int v214 = v157;
            unsigned int v215 = v281;
            do
            {
              --v214;
              if (v212) {
                v210 |= (unint64_t)(v211 & v171) << v209++;
              }
              else {
                unsigned int v214 = 0;
              }
              --v215;
              if (!v213) {
                unsigned int v215 = 0;
              }
              v211 *= 2;
              unsigned int v209 = (__PAIR64__(v209, v213) - 1) >> 32;
              BOOL v213 = v215 != 0;
              BOOL v212 = v214 != 0;
            }
            while (v215 | v214);
            int v216 = 0;
            uint64_t v217 = 0;
            int v218 = 1;
            LOBYTE(result) = v277;
            BOOL v219 = v279;
            unsigned int v220 = v157;
            unsigned int v221 = v281;
            do
            {
              --v220;
              int v222 = v219;
              if (!v222) {
                unsigned int v220 = 0;
              }
              int v223 = v216 + v222;
              --v221;
              if (result) {
                v217 |= (unint64_t)(v218 & v192) << v223++;
              }
              else {
                unsigned int v221 = 0;
              }
              v218 *= 2;
              int v216 = v223 - 1;
              unint64_t result = v221 != 0;
              BOOL v219 = v220 != 0;
            }
            while (v221 | v220);
            unsigned int v157 = v267;
            int v161 = v254;
            if (v190) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v163 = (unsigned __int16)++v164;
        }
        while (v153 > (unsigned __int16)v164);
        int v160 = v246 + 1;
        unsigned int v159 = (unsigned __int16)(v246 + 1);
        unsigned int v19 = a7;
      }
      while (v244 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,4u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v231 = a9;
        uint64_t v232 = v13;
        uint64_t v233 = v47;
        do
        {
          long long v234 = (_OWORD *)(result + 32 * (v233 + v54));
          long long v235 = *v232;
          long long v236 = v232[1];
          v232 += 2;
          *long long v234 = v235;
          v234[1] = v236;
          uint64_t v233 = (v233 - v29) & v29;
          --v231;
        }
        while (v231);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v262 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v265 = a8 >> v66;
    unsigned int v267 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v263 = a10 + a8;
    unsigned int v259 = (v69 - 1 + a10 + a8) >> v66;
    char v261 = v66;
    if (a8 >> v66 >= v259) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v281 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v267 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v275 = a7 >> v67;
    unsigned int v279 = (v77 + a9 + a7) >> v67;
    if (result >= v279) {
      return result;
    }
    unsigned int v258 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v277 = v77 & v281;
    int v254 = v76 & v263;
    uint64_t v256 = v76 & a8;
    unsigned int v85 = v265;
LABEL_89:
    unsigned int v86 = v85 << v261;
    unsigned int v87 = v85 - v265;
    int v273 = v85 * v258;
    unsigned int v269 = v85 + 1;
    BOOL v88 = v263 >= (v85 + 1) << v261;
    unsigned int v89 = v267;
    if (!v88) {
      unsigned int v89 = v254;
    }
    int v90 = v267 - v256;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v261;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v256;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v271 = (v92 + v91 - v256) * a11;
    unsigned int v94 = v275;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v281 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v277;
      if (v281 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v279)
      {
        unsigned int v85 = v269;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v269 == v259) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[2 * (v100 + ((v94 - v275) << v67) - v84)] + v271);
      uint64_t v135 = (v94 + v273) * a12[3] * *((unsigned __int8 *)a12 + 9) + v262;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (_OWORD *)(v135 + 32 * (v138 + v125));
          long long v140 = *v137;
          long long v141 = v137[1];
          v137 += 2;
          *uint64_t v139 = v140;
          v139[1] = v141;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v284);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  char v248 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v142 = a6 >> v20;
    unsigned int v143 = 1 << v21;
    unsigned int v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v144 = 0;
    }
    BOOL v145 = v143 >= a5;
    if (v143 < a5) {
      char v146 = v21 + v20 + v144;
    }
    else {
      char v146 = *((unsigned char *)a12 + 12);
    }
    if (v145) {
      LOBYTE(v147) = *((unsigned char *)a12 + 13);
    }
    else {
      int v147 = -v144;
    }
    if (!v142) {
      char v21 = v146;
    }
    char v242 = v21;
    if (v142) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v147;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v242 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v148 = v262;
  unsigned int v150 = a8;
  int v149 = a10;
  unsigned int v241 = v290;
  if (v290)
  {
    unsigned int v151 = 1 << v23;
    unsigned int v152 = v291;
    int v272 = v288;
    BOOL v268 = v288 != 0;
    int v270 = v289;
    BOOL v266 = v289 != 0;
    int v240 = 1 << v242;
    if (1 << v242 >= a5) {
      unsigned int v153 = a5;
    }
    else {
      unsigned int v153 = 1 << v242;
    }
    if (v151 >= a6) {
      unsigned int v154 = a6;
    }
    else {
      unsigned int v154 = 1 << v23;
    }
    unsigned int v155 = 32 - __clz(v153 - 1);
    if (v153 >= 2) {
      unsigned int v156 = v155;
    }
    else {
      unsigned int v156 = 0;
    }
    unsigned int v157 = 32 - __clz(v154 - 1);
    if (v154 < 2) {
      unsigned int v157 = 0;
    }
    BOOL v276 = v156 != 0;
    unsigned int v278 = v157;
    BOOL v274 = v157 != 0;
    if (v291)
    {
      unsigned int v158 = 0;
      int v159 = 0;
      unsigned int v239 = a7 >> v242;
      unsigned int v260 = a8 >> v23;
      int v283 = v292;
      int v280 = v289 | v288;
      unsigned int v238 = a9 + a7;
      int v237 = v285;
      int v160 = v287;
      int v282 = v286;
      int v255 = (v151 - 1) & a8;
      int v257 = (v151 - 1) & (a10 + a8);
      unsigned int v253 = v151 - v255;
      int v161 = ~(-1 << v156);
      int v251 = v287;
      int v252 = v278 | v156;
      unsigned int v264 = v156;
      int v244 = 1 << v23;
      char v245 = v23;
      do
      {
        int v243 = v159;
        int v162 = 0;
        int v163 = 0;
        unsigned int v164 = (v158 + v239) << v242;
        int v165 = a9;
        if (v238 >= (v158 + v239 + 1) << v242) {
          int v165 = v240 - ((v240 - 1) & a7);
        }
        int v166 = 1 << v242;
        if (v238 < (v158 + v239 + 1) << v242) {
          int v166 = (v240 - 1) & (a9 + a7);
        }
        int v167 = v237 + v158;
        int v168 = v158 << v242;
        if (v164 >= v19) {
          int v169 = v166;
        }
        else {
          int v169 = v165;
        }
        if (v164 >= v19) {
          int v170 = 0;
        }
        else {
          int v170 = (v240 - 1) & a7;
        }
        int v247 = &v248[2 * (v170 + v168)];
        do
        {
          int v171 = v282 + v162;
          if (v283)
          {
            int v172 = v280;
            if (v280)
            {
              int v173 = 0;
              int v172 = 0;
              int v174 = 1;
              BOOL v175 = v266;
              BOOL v176 = v268;
              int v178 = v270;
              int v177 = v272;
              do
              {
                --v177;
                if (v176) {
                  v172 |= (v174 & v167) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v172 |= (v174 & v171) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            int v172 = v280;
            if (v280)
            {
              int v179 = 0;
              int v172 = 0;
              int v180 = 1;
              BOOL v182 = v266;
              BOOL v181 = v268;
              int v183 = v270;
              int v184 = v272;
              do
              {
                --v183;
                if (v182) {
                  v172 |= (v180 & v171) << v179;
                }
                else {
                  int v183 = 0;
                }
                if (v182) {
                  ++v179;
                }
                --v184;
                if (v181) {
                  v172 |= (v180 & v167) << v179;
                }
                else {
                  int v184 = 0;
                }
                if (v181) {
                  ++v179;
                }
                v180 *= 2;
                --v179;
                BOOL v181 = v184 != 0;
                BOOL v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          int v185 = *(_DWORD *)(v148 + 4 * ((v172 + v160) | ((v172 + v160) >> 8 << 9)));
          if (v185 < 0)
          {
            unint64_t v186 = v148 - *((void *)a13 + 3) + ((unint64_t)(v185 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v187 = a13[2];
            if (result > v187)
            {
              unint64_t result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v156 = v264;
              unsigned int v151 = v244;
              char v23 = v245;
              uint64_t v17 = a11;
              unsigned int v150 = a8;
              int v149 = a10;
              uint64_t v148 = v262;
              v186 += result;
            }
            unsigned int v188 = (v162 + v260) << v23;
            unsigned int v189 = v253;
            if (a10 + a8 >= (v162 + v260 + 1) << v23)
            {
              unsigned int v190 = v151;
            }
            else
            {
              unsigned int v189 = v149;
              unsigned int v190 = v257;
            }
            if (v188 >= v150) {
              int v191 = 0;
            }
            else {
              int v191 = v255;
            }
            if (v188 >= v150) {
              unsigned int v189 = v190;
            }
            if (!v252)
            {
              uint64_t v209 = 0;
              uint64_t v193 = 0;
              uint64_t v200 = 0;
              uint64_t v216 = 0;
              int v160 = v251;
              if (!v189) {
                goto LABEL_191;
              }
LABEL_263:
              if (v169)
              {
                int v223 = 0;
                int v224 = (long long *)((char *)v247 + (v191 + (v162 << v23)) * v17);
                do
                {
                  int v225 = v169;
                  int v226 = v224;
                  uint64_t v227 = v209;
                  do
                  {
                    unint64_t result = v186 + 32 * (v227 + v216);
                    long long v228 = *v226;
                    long long v229 = v226[1];
                    v226 += 2;
                    *(_OWORD *)unint64_t result = v228;
                    *(_OWORD *)(result + 16) = v229;
                    uint64_t v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  uint64_t v216 = (v216 - v200) & v200;
                  int v224 = (long long *)((char *)v224 + v17);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_191;
            }
            unsigned int v192 = 0;
            uint64_t v193 = 0;
            int v194 = 1;
            BOOL v195 = v274;
            BOOL v196 = v276;
            unsigned int v197 = v156;
            unsigned int v198 = v278;
            do
            {
              --v197;
              if (v196) {
                v193 |= (unint64_t)(v194 & v161) << v192++;
              }
              else {
                unsigned int v197 = 0;
              }
              --v198;
              if (!v195) {
                unsigned int v198 = 0;
              }
              v194 *= 2;
              unsigned int v192 = (__PAIR64__(v192, v195) - 1) >> 32;
              BOOL v195 = v198 != 0;
              BOOL v196 = v197 != 0;
            }
            while (v198 | v197);
            int v199 = 0;
            uint64_t v200 = 0;
            int v201 = 1;
            BOOL v202 = v274;
            BOOL v203 = v276;
            unsigned int v204 = v156;
            unsigned int v205 = v278;
            do
            {
              --v204;
              int v206 = v203;
              if (!v206) {
                unsigned int v204 = 0;
              }
              int v207 = v199 + v206;
              --v205;
              if (v202) {
                v200 |= (unint64_t)(v201 & ~(-1 << v278)) << v207++;
              }
              else {
                unsigned int v205 = 0;
              }
              v201 *= 2;
              int v199 = v207 - 1;
              BOOL v202 = v205 != 0;
              BOOL v203 = v204 != 0;
            }
            while (v205 | v204);
            unsigned int v208 = 0;
            uint64_t v209 = 0;
            int v210 = 1;
            BOOL v212 = v274;
            BOOL v211 = v276;
            unsigned int v213 = v156;
            unsigned int v214 = v278;
            do
            {
              --v213;
              if (v211) {
                v209 |= (unint64_t)(v210 & v170) << v208++;
              }
              else {
                unsigned int v213 = 0;
              }
              --v214;
              if (!v212) {
                unsigned int v214 = 0;
              }
              v210 *= 2;
              unsigned int v208 = (__PAIR64__(v208, v212) - 1) >> 32;
              BOOL v212 = v214 != 0;
              BOOL v211 = v213 != 0;
            }
            while (v214 | v213);
            int v215 = 0;
            uint64_t v216 = 0;
            int v217 = 1;
            LOBYTE(result) = v274;
            BOOL v218 = v276;
            unsigned int v219 = v156;
            unsigned int v220 = v278;
            do
            {
              --v219;
              int v221 = v218;
              if (!v221) {
                unsigned int v219 = 0;
              }
              int v222 = v215 + v221;
              --v220;
              if (result) {
                v216 |= (unint64_t)(v217 & v191) << v222++;
              }
              else {
                unsigned int v220 = 0;
              }
              v217 *= 2;
              int v215 = v222 - 1;
              unint64_t result = v220 != 0;
              BOOL v218 = v219 != 0;
            }
            while (v220 | v219);
            unsigned int v156 = v264;
            int v160 = v251;
            if (v189) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v162 = (unsigned __int16)++v163;
        }
        while (v152 > (unsigned __int16)v163);
        int v159 = v243 + 1;
        unsigned int v158 = (unsigned __int16)(v243 + 1);
        unsigned int v19 = a7;
      }
      while (v241 > v158);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,2u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v228 = a9;
        long long v229 = v13;
        uint64_t v230 = v47;
        do
        {
          long long v231 = *v229++;
          *(_OWORD *)(result + 16 * (v230 + v54)) = v231;
          uint64_t v230 = (v230 - v29) & v29;
          --v228;
        }
        while (v228);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v257 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v260 = a8 >> v66;
    unsigned int v262 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v258 = a10 + a8;
    unsigned int v254 = (v69 - 1 + a10 + a8) >> v66;
    char v256 = v66;
    if (a8 >> v66 >= v254) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v276 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v262 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v270 = a7 >> v67;
    unsigned int v274 = (v77 + a9 + a7) >> v67;
    if (result >= v274) {
      return result;
    }
    unsigned int v253 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v272 = v77 & v276;
    int v249 = v76 & v258;
    uint64_t v251 = v76 & a8;
    unsigned int v85 = v260;
LABEL_89:
    unsigned int v86 = v85 << v256;
    unsigned int v87 = v85 - v260;
    int v268 = v85 * v253;
    unsigned int v264 = v85 + 1;
    BOOL v88 = v258 >= (v85 + 1) << v256;
    unsigned int v89 = v262;
    if (!v88) {
      unsigned int v89 = v249;
    }
    int v90 = v262 - v251;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v256;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v251;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v266 = (v92 + v91 - v251) * a11;
    unsigned int v94 = v270;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v276 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v272;
      if (v276 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v274)
      {
        unsigned int v85 = v264;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v264 == v254) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[v100 + ((v94 - v270) << v67) - v84] + v266);
      uint64_t v135 = (v94 + v268) * a12[3] * *((unsigned __int8 *)a12 + 9) + v257;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          long long v139 = *v137++;
          *(_OWORD *)(v135 + 16 * (v138 + v125)) = v139;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v279);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v140 = a6 >> v20;
    unsigned int v141 = 1 << v21;
    unsigned int v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v142 = 0;
    }
    BOOL v143 = v141 >= a5;
    if (v141 < a5) {
      char v144 = v21 + v20 + v142;
    }
    else {
      char v144 = *((unsigned char *)a12 + 12);
    }
    if (v143) {
      LOBYTE(v145) = *((unsigned char *)a12 + 13);
    }
    else {
      int v145 = -v142;
    }
    if (!v140) {
      char v21 = v144;
    }
    char v237 = v21;
    if (v140) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v145;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v237 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v146 = v257;
  unsigned int v148 = a8;
  int v147 = a10;
  unsigned int v236 = v285;
  if (v285)
  {
    unsigned int v149 = 1 << v23;
    unsigned int v150 = v286;
    int v267 = v283;
    BOOL v263 = v283 != 0;
    int v265 = v284;
    BOOL v261 = v284 != 0;
    int v235 = 1 << v237;
    if (1 << v237 >= a5) {
      unsigned int v151 = a5;
    }
    else {
      unsigned int v151 = 1 << v237;
    }
    if (v149 >= a6) {
      unsigned int v152 = a6;
    }
    else {
      unsigned int v152 = 1 << v23;
    }
    unsigned int v153 = 32 - __clz(v151 - 1);
    if (v151 >= 2) {
      unsigned int v154 = v153;
    }
    else {
      unsigned int v154 = 0;
    }
    unsigned int v155 = 32 - __clz(v152 - 1);
    if (v152 < 2) {
      unsigned int v155 = 0;
    }
    BOOL v271 = v154 != 0;
    unsigned int v273 = v155;
    BOOL v269 = v155 != 0;
    if (v286)
    {
      unsigned int v156 = 0;
      int v157 = 0;
      unsigned int v234 = a7 >> v237;
      unsigned int v255 = a8 >> v23;
      int v278 = v287;
      int v275 = v284 | v283;
      unsigned int v233 = a9 + a7;
      int v232 = v280;
      int v158 = v282;
      int v277 = v281;
      int v250 = (v149 - 1) & a8;
      int v252 = (v149 - 1) & (a10 + a8);
      unsigned int v248 = v149 - v250;
      int v159 = ~(-1 << v154);
      int v246 = v282;
      int v247 = v273 | v154;
      unsigned int v259 = v154;
      int v239 = 1 << v23;
      char v240 = v23;
      do
      {
        int v238 = v157;
        int v160 = 0;
        int v161 = 0;
        unsigned int v162 = (v156 + v234) << v237;
        int v163 = a9;
        if (v233 >= (v156 + v234 + 1) << v237) {
          int v163 = v235 - ((v235 - 1) & a7);
        }
        int v164 = 1 << v237;
        if (v233 < (v156 + v234 + 1) << v237) {
          int v164 = (v235 - 1) & (a9 + a7);
        }
        int v165 = v232 + v156;
        int v166 = v156 << v237;
        if (v162 >= v19) {
          int v167 = v164;
        }
        else {
          int v167 = v163;
        }
        if (v162 >= v19) {
          int v168 = 0;
        }
        else {
          int v168 = (v235 - 1) & a7;
        }
        char v242 = &v243[v168 + v166];
        do
        {
          int v169 = v277 + v160;
          if (v278)
          {
            int v170 = v275;
            if (v275)
            {
              int v171 = 0;
              int v170 = 0;
              int v172 = 1;
              BOOL v173 = v261;
              BOOL v174 = v263;
              int v176 = v265;
              int v175 = v267;
              do
              {
                --v175;
                if (v174) {
                  v170 |= (v172 & v165) << v171;
                }
                else {
                  int v175 = 0;
                }
                if (v174) {
                  ++v171;
                }
                --v176;
                if (v173) {
                  v170 |= (v172 & v169) << v171;
                }
                else {
                  int v176 = 0;
                }
                if (v173) {
                  ++v171;
                }
                v172 *= 2;
                --v171;
                BOOL v173 = v176 != 0;
                BOOL v174 = v175 != 0;
              }
              while (v176 | v175);
            }
          }
          else
          {
            int v170 = v275;
            if (v275)
            {
              int v177 = 0;
              int v170 = 0;
              int v178 = 1;
              BOOL v180 = v261;
              BOOL v179 = v263;
              int v181 = v265;
              int v182 = v267;
              do
              {
                --v181;
                if (v180) {
                  v170 |= (v178 & v169) << v177;
                }
                else {
                  int v181 = 0;
                }
                if (v180) {
                  ++v177;
                }
                --v182;
                if (v179) {
                  v170 |= (v178 & v165) << v177;
                }
                else {
                  int v182 = 0;
                }
                if (v179) {
                  ++v177;
                }
                v178 *= 2;
                --v177;
                BOOL v179 = v182 != 0;
                BOOL v180 = v181 != 0;
              }
              while (v182 | v181);
            }
          }
          int v183 = *(_DWORD *)(v146 + 4 * ((v170 + v158) | ((v170 + v158) >> 8 << 9)));
          if (v183 < 0)
          {
            unint64_t v184 = v146 - *((void *)a13 + 3) + ((unint64_t)(v183 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v185 = a13[2];
            if (result > v185)
            {
              unint64_t result = get_level_offset_within_tail(result, v185, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v154 = v259;
              unsigned int v149 = v239;
              char v23 = v240;
              uint64_t v17 = a11;
              unsigned int v148 = a8;
              int v147 = a10;
              uint64_t v146 = v257;
              v184 += result;
            }
            unsigned int v186 = (v160 + v255) << v23;
            unsigned int v187 = v248;
            if (a10 + a8 >= (v160 + v255 + 1) << v23)
            {
              unsigned int v188 = v149;
            }
            else
            {
              unsigned int v187 = v147;
              unsigned int v188 = v252;
            }
            if (v186 >= v148) {
              int v189 = 0;
            }
            else {
              int v189 = v250;
            }
            if (v186 >= v148) {
              unsigned int v187 = v188;
            }
            if (!v247)
            {
              uint64_t v207 = 0;
              uint64_t v191 = 0;
              uint64_t v198 = 0;
              uint64_t v214 = 0;
              int v158 = v246;
              if (!v187) {
                goto LABEL_191;
              }
LABEL_263:
              if (v167)
              {
                int v221 = 0;
                int v222 = (long long *)((char *)v242 + (v189 + (v160 << v23)) * v17);
                do
                {
                  int v223 = v167;
                  int v224 = v222;
                  uint64_t v225 = v207;
                  do
                  {
                    unint64_t result = v225 + v214;
                    long long v226 = *v224++;
                    *(_OWORD *)(v184 + 16 * (v225 + v214)) = v226;
                    uint64_t v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  uint64_t v214 = (v214 - v198) & v198;
                  int v222 = (long long *)((char *)v222 + v17);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_191;
            }
            unsigned int v190 = 0;
            uint64_t v191 = 0;
            int v192 = 1;
            BOOL v193 = v269;
            BOOL v194 = v271;
            unsigned int v195 = v154;
            unsigned int v196 = v273;
            do
            {
              --v195;
              if (v194) {
                v191 |= (unint64_t)(v192 & v159) << v190++;
              }
              else {
                unsigned int v195 = 0;
              }
              --v196;
              if (!v193) {
                unsigned int v196 = 0;
              }
              v192 *= 2;
              unsigned int v190 = (__PAIR64__(v190, v193) - 1) >> 32;
              BOOL v193 = v196 != 0;
              BOOL v194 = v195 != 0;
            }
            while (v196 | v195);
            int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v269;
            BOOL v201 = v271;
            unsigned int v202 = v154;
            unsigned int v203 = v273;
            do
            {
              --v202;
              int v204 = v201;
              if (!v204) {
                unsigned int v202 = 0;
              }
              int v205 = v197 + v204;
              --v203;
              if (v200) {
                v198 |= (unint64_t)(v199 & ~(-1 << v273)) << v205++;
              }
              else {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              int v197 = v205 - 1;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            unsigned int v206 = 0;
            uint64_t v207 = 0;
            int v208 = 1;
            BOOL v210 = v269;
            BOOL v209 = v271;
            unsigned int v211 = v154;
            unsigned int v212 = v273;
            do
            {
              --v211;
              if (v209) {
                v207 |= (unint64_t)(v208 & v168) << v206++;
              }
              else {
                unsigned int v211 = 0;
              }
              --v212;
              if (!v210) {
                unsigned int v212 = 0;
              }
              v208 *= 2;
              unsigned int v206 = (__PAIR64__(v206, v210) - 1) >> 32;
              BOOL v210 = v212 != 0;
              BOOL v209 = v211 != 0;
            }
            while (v212 | v211);
            int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            LOBYTE(result) = v269;
            BOOL v216 = v271;
            unsigned int v217 = v154;
            unsigned int v218 = v273;
            do
            {
              --v217;
              int v219 = v216;
              if (!v219) {
                unsigned int v217 = 0;
              }
              int v220 = v213 + v219;
              --v218;
              if (result) {
                v214 |= (unint64_t)(v215 & v189) << v220++;
              }
              else {
                unsigned int v218 = 0;
              }
              v215 *= 2;
              int v213 = v220 - 1;
              unint64_t result = v218 != 0;
              BOOL v216 = v217 != 0;
            }
            while (v218 | v217);
            unsigned int v154 = v259;
            int v158 = v246;
            if (v187) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v160 = (unsigned __int16)++v161;
        }
        while (v150 > (unsigned __int16)v161);
        int v157 = v238 + 1;
        unsigned int v156 = (unsigned __int16)(v238 + 1);
        unsigned int v19 = a7;
      }
      while (v236 > v156);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,8u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v231 = a9;
        int v232 = v13;
        uint64_t v233 = v47;
        do
        {
          unsigned int v234 = (_OWORD *)(result + 32 * (v233 + v54));
          long long v235 = *v232;
          long long v236 = v232[1];
          v232 += 2;
          *unsigned int v234 = v235;
          v234[1] = v236;
          uint64_t v233 = (v233 - v29) & v29;
          --v231;
        }
        while (v231);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v262 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v265 = a8 >> v66;
    unsigned int v267 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v263 = a10 + a8;
    unsigned int v259 = (v69 - 1 + a10 + a8) >> v66;
    char v261 = v66;
    if (a8 >> v66 >= v259) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v281 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v267 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v275 = a7 >> v67;
    unsigned int v279 = (v77 + a9 + a7) >> v67;
    if (result >= v279) {
      return result;
    }
    unsigned int v258 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v277 = v77 & v281;
    int v254 = v76 & v263;
    uint64_t v256 = v76 & a8;
    unsigned int v85 = v265;
LABEL_89:
    unsigned int v86 = v85 << v261;
    unsigned int v87 = v85 - v265;
    int v273 = v85 * v258;
    unsigned int v269 = v85 + 1;
    BOOL v88 = v263 >= (v85 + 1) << v261;
    unsigned int v89 = v267;
    if (!v88) {
      unsigned int v89 = v254;
    }
    int v90 = v267 - v256;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v261;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v256;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v271 = (v92 + v91 - v256) * a11;
    unsigned int v94 = v275;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v281 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v277;
      if (v281 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v279)
      {
        unsigned int v85 = v269;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v269 == v259) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[2 * (v100 + ((v94 - v275) << v67) - v84)] + v271);
      uint64_t v135 = (v94 + v273) * a12[3] * *((unsigned __int8 *)a12 + 9) + v262;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          long long v139 = (_OWORD *)(v135 + 32 * (v138 + v125));
          long long v140 = *v137;
          long long v141 = v137[1];
          v137 += 2;
          *long long v139 = v140;
          v139[1] = v141;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v284);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  unsigned int v248 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v142 = a6 >> v20;
    unsigned int v143 = 1 << v21;
    unsigned int v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v144 = 0;
    }
    BOOL v145 = v143 >= a5;
    if (v143 < a5) {
      char v146 = v21 + v20 + v144;
    }
    else {
      char v146 = *((unsigned char *)a12 + 12);
    }
    if (v145) {
      LOBYTE(v147) = *((unsigned char *)a12 + 13);
    }
    else {
      int v147 = -v144;
    }
    if (!v142) {
      char v21 = v146;
    }
    char v242 = v21;
    if (v142) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v147;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v242 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v148 = v262;
  unsigned int v150 = a8;
  int v149 = a10;
  unsigned int v241 = v290;
  if (v290)
  {
    unsigned int v151 = 1 << v23;
    unsigned int v152 = v291;
    int v272 = v288;
    BOOL v268 = v288 != 0;
    int v270 = v289;
    BOOL v266 = v289 != 0;
    int v240 = 1 << v242;
    if (1 << v242 >= a5) {
      unsigned int v153 = a5;
    }
    else {
      unsigned int v153 = 1 << v242;
    }
    if (v151 >= a6) {
      unsigned int v154 = a6;
    }
    else {
      unsigned int v154 = 1 << v23;
    }
    unsigned int v155 = 32 - __clz(v153 - 1);
    if (v153 >= 2) {
      unsigned int v156 = v155;
    }
    else {
      unsigned int v156 = 0;
    }
    unsigned int v157 = 32 - __clz(v154 - 1);
    if (v154 < 2) {
      unsigned int v157 = 0;
    }
    BOOL v276 = v156 != 0;
    unsigned int v278 = v157;
    BOOL v274 = v157 != 0;
    if (v291)
    {
      unsigned int v158 = 0;
      int v159 = 0;
      unsigned int v239 = a7 >> v242;
      unsigned int v260 = a8 >> v23;
      int v283 = v292;
      int v280 = v289 | v288;
      unsigned int v238 = a9 + a7;
      int v237 = v285;
      int v160 = v287;
      int v282 = v286;
      int v255 = (v151 - 1) & a8;
      int v257 = (v151 - 1) & (a10 + a8);
      unsigned int v253 = v151 - v255;
      int v161 = ~(-1 << v156);
      int v251 = v287;
      int v252 = v278 | v156;
      unsigned int v264 = v156;
      int v244 = 1 << v23;
      char v245 = v23;
      do
      {
        int v243 = v159;
        int v162 = 0;
        int v163 = 0;
        unsigned int v164 = (v158 + v239) << v242;
        int v165 = a9;
        if (v238 >= (v158 + v239 + 1) << v242) {
          int v165 = v240 - ((v240 - 1) & a7);
        }
        int v166 = 1 << v242;
        if (v238 < (v158 + v239 + 1) << v242) {
          int v166 = (v240 - 1) & (a9 + a7);
        }
        int v167 = v237 + v158;
        int v168 = v158 << v242;
        if (v164 >= v19) {
          int v169 = v166;
        }
        else {
          int v169 = v165;
        }
        if (v164 >= v19) {
          int v170 = 0;
        }
        else {
          int v170 = (v240 - 1) & a7;
        }
        int v247 = &v248[2 * (v170 + v168)];
        do
        {
          int v171 = v282 + v162;
          if (v283)
          {
            int v172 = v280;
            if (v280)
            {
              int v173 = 0;
              int v172 = 0;
              int v174 = 1;
              BOOL v175 = v266;
              BOOL v176 = v268;
              int v178 = v270;
              int v177 = v272;
              do
              {
                --v177;
                if (v176) {
                  v172 |= (v174 & v167) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v172 |= (v174 & v171) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            int v172 = v280;
            if (v280)
            {
              int v179 = 0;
              int v172 = 0;
              int v180 = 1;
              BOOL v182 = v266;
              BOOL v181 = v268;
              int v183 = v270;
              int v184 = v272;
              do
              {
                --v183;
                if (v182) {
                  v172 |= (v180 & v171) << v179;
                }
                else {
                  int v183 = 0;
                }
                if (v182) {
                  ++v179;
                }
                --v184;
                if (v181) {
                  v172 |= (v180 & v167) << v179;
                }
                else {
                  int v184 = 0;
                }
                if (v181) {
                  ++v179;
                }
                v180 *= 2;
                --v179;
                BOOL v181 = v184 != 0;
                BOOL v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          int v185 = *(_DWORD *)(v148 + 4 * ((v172 + v160) | ((v172 + v160) >> 8 << 9)));
          if (v185 < 0)
          {
            unint64_t v186 = v148 - *((void *)a13 + 3) + ((unint64_t)(v185 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v187 = a13[2];
            if (result > v187)
            {
              unint64_t result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v156 = v264;
              unsigned int v151 = v244;
              char v23 = v245;
              uint64_t v17 = a11;
              unsigned int v150 = a8;
              int v149 = a10;
              uint64_t v148 = v262;
              v186 += result;
            }
            unsigned int v188 = (v162 + v260) << v23;
            unsigned int v189 = v253;
            if (a10 + a8 >= (v162 + v260 + 1) << v23)
            {
              unsigned int v190 = v151;
            }
            else
            {
              unsigned int v189 = v149;
              unsigned int v190 = v257;
            }
            if (v188 >= v150) {
              int v191 = 0;
            }
            else {
              int v191 = v255;
            }
            if (v188 >= v150) {
              unsigned int v189 = v190;
            }
            if (!v252)
            {
              uint64_t v209 = 0;
              uint64_t v193 = 0;
              uint64_t v200 = 0;
              uint64_t v216 = 0;
              int v160 = v251;
              if (!v189) {
                goto LABEL_191;
              }
LABEL_263:
              if (v169)
              {
                int v223 = 0;
                int v224 = (long long *)((char *)v247 + (v191 + (v162 << v23)) * v17);
                do
                {
                  int v225 = v169;
                  long long v226 = v224;
                  uint64_t v227 = v209;
                  do
                  {
                    unint64_t result = v186 + 32 * (v227 + v216);
                    long long v228 = *v226;
                    long long v229 = v226[1];
                    v226 += 2;
                    *(_OWORD *)unint64_t result = v228;
                    *(_OWORD *)(result + 16) = v229;
                    uint64_t v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  uint64_t v216 = (v216 - v200) & v200;
                  int v224 = (long long *)((char *)v224 + v17);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_191;
            }
            unsigned int v192 = 0;
            uint64_t v193 = 0;
            int v194 = 1;
            BOOL v195 = v274;
            BOOL v196 = v276;
            unsigned int v197 = v156;
            unsigned int v198 = v278;
            do
            {
              --v197;
              if (v196) {
                v193 |= (unint64_t)(v194 & v161) << v192++;
              }
              else {
                unsigned int v197 = 0;
              }
              --v198;
              if (!v195) {
                unsigned int v198 = 0;
              }
              v194 *= 2;
              unsigned int v192 = (__PAIR64__(v192, v195) - 1) >> 32;
              BOOL v195 = v198 != 0;
              BOOL v196 = v197 != 0;
            }
            while (v198 | v197);
            int v199 = 0;
            uint64_t v200 = 0;
            int v201 = 1;
            BOOL v202 = v274;
            BOOL v203 = v276;
            unsigned int v204 = v156;
            unsigned int v205 = v278;
            do
            {
              --v204;
              int v206 = v203;
              if (!v206) {
                unsigned int v204 = 0;
              }
              int v207 = v199 + v206;
              --v205;
              if (v202) {
                v200 |= (unint64_t)(v201 & ~(-1 << v278)) << v207++;
              }
              else {
                unsigned int v205 = 0;
              }
              v201 *= 2;
              int v199 = v207 - 1;
              BOOL v202 = v205 != 0;
              BOOL v203 = v204 != 0;
            }
            while (v205 | v204);
            unsigned int v208 = 0;
            uint64_t v209 = 0;
            int v210 = 1;
            BOOL v212 = v274;
            BOOL v211 = v276;
            unsigned int v213 = v156;
            unsigned int v214 = v278;
            do
            {
              --v213;
              if (v211) {
                v209 |= (unint64_t)(v210 & v170) << v208++;
              }
              else {
                unsigned int v213 = 0;
              }
              --v214;
              if (!v212) {
                unsigned int v214 = 0;
              }
              v210 *= 2;
              unsigned int v208 = (__PAIR64__(v208, v212) - 1) >> 32;
              BOOL v212 = v214 != 0;
              BOOL v211 = v213 != 0;
            }
            while (v214 | v213);
            int v215 = 0;
            uint64_t v216 = 0;
            int v217 = 1;
            LOBYTE(result) = v274;
            BOOL v218 = v276;
            unsigned int v219 = v156;
            unsigned int v220 = v278;
            do
            {
              --v219;
              int v221 = v218;
              if (!v221) {
                unsigned int v219 = 0;
              }
              int v222 = v215 + v221;
              --v220;
              if (result) {
                v216 |= (unint64_t)(v217 & v191) << v222++;
              }
              else {
                unsigned int v220 = 0;
              }
              v217 *= 2;
              int v215 = v222 - 1;
              unint64_t result = v220 != 0;
              BOOL v218 = v219 != 0;
            }
            while (v220 | v219);
            unsigned int v156 = v264;
            int v160 = v251;
            if (v189) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v162 = (unsigned __int16)++v163;
        }
        while (v152 > (unsigned __int16)v163);
        int v159 = v243 + 1;
        unsigned int v158 = (unsigned __int16)(v243 + 1);
        unsigned int v19 = a7;
      }
      while (v241 > v158);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,4u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v228 = a9;
        long long v229 = v13;
        uint64_t v230 = v47;
        do
        {
          long long v231 = *v229++;
          *(_OWORD *)(result + 16 * (v230 + v54)) = v231;
          uint64_t v230 = (v230 - v29) & v29;
          --v228;
        }
        while (v228);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v257 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v260 = a8 >> v66;
    unsigned int v262 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v258 = a10 + a8;
    unsigned int v254 = (v69 - 1 + a10 + a8) >> v66;
    char v256 = v66;
    if (a8 >> v66 >= v254) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v276 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v262 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v270 = a7 >> v67;
    unsigned int v274 = (v77 + a9 + a7) >> v67;
    if (result >= v274) {
      return result;
    }
    unsigned int v253 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v272 = v77 & v276;
    int v249 = v76 & v258;
    uint64_t v251 = v76 & a8;
    unsigned int v85 = v260;
LABEL_89:
    unsigned int v86 = v85 << v256;
    unsigned int v87 = v85 - v260;
    int v268 = v85 * v253;
    unsigned int v264 = v85 + 1;
    BOOL v88 = v258 >= (v85 + 1) << v256;
    unsigned int v89 = v262;
    if (!v88) {
      unsigned int v89 = v249;
    }
    int v90 = v262 - v251;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v256;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v251;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v266 = (v92 + v91 - v251) * a11;
    unsigned int v94 = v270;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v276 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v272;
      if (v276 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v274)
      {
        unsigned int v85 = v264;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v264 == v254) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[v100 + ((v94 - v270) << v67) - v84] + v266);
      uint64_t v135 = (v94 + v268) * a12[3] * *((unsigned __int8 *)a12 + 9) + v257;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          long long v139 = *v137++;
          *(_OWORD *)(v135 + 16 * (v138 + v125)) = v139;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v279);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v140 = a6 >> v20;
    unsigned int v141 = 1 << v21;
    unsigned int v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v142 = 0;
    }
    BOOL v143 = v141 >= a5;
    if (v141 < a5) {
      char v144 = v21 + v20 + v142;
    }
    else {
      char v144 = *((unsigned char *)a12 + 12);
    }
    if (v143) {
      LOBYTE(v145) = *((unsigned char *)a12 + 13);
    }
    else {
      int v145 = -v142;
    }
    if (!v140) {
      char v21 = v144;
    }
    char v237 = v21;
    if (v140) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v145;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v237 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v146 = v257;
  unsigned int v148 = a8;
  int v147 = a10;
  unsigned int v236 = v285;
  if (v285)
  {
    unsigned int v149 = 1 << v23;
    unsigned int v150 = v286;
    int v267 = v283;
    BOOL v263 = v283 != 0;
    int v265 = v284;
    BOOL v261 = v284 != 0;
    int v235 = 1 << v237;
    if (1 << v237 >= a5) {
      unsigned int v151 = a5;
    }
    else {
      unsigned int v151 = 1 << v237;
    }
    if (v149 >= a6) {
      unsigned int v152 = a6;
    }
    else {
      unsigned int v152 = 1 << v23;
    }
    unsigned int v153 = 32 - __clz(v151 - 1);
    if (v151 >= 2) {
      unsigned int v154 = v153;
    }
    else {
      unsigned int v154 = 0;
    }
    unsigned int v155 = 32 - __clz(v152 - 1);
    if (v152 < 2) {
      unsigned int v155 = 0;
    }
    BOOL v271 = v154 != 0;
    unsigned int v273 = v155;
    BOOL v269 = v155 != 0;
    if (v286)
    {
      unsigned int v156 = 0;
      int v157 = 0;
      unsigned int v234 = a7 >> v237;
      unsigned int v255 = a8 >> v23;
      int v278 = v287;
      int v275 = v284 | v283;
      unsigned int v233 = a9 + a7;
      int v232 = v280;
      int v158 = v282;
      int v277 = v281;
      int v250 = (v149 - 1) & a8;
      int v252 = (v149 - 1) & (a10 + a8);
      unsigned int v248 = v149 - v250;
      int v159 = ~(-1 << v154);
      int v246 = v282;
      int v247 = v273 | v154;
      unsigned int v259 = v154;
      int v239 = 1 << v23;
      char v240 = v23;
      do
      {
        int v238 = v157;
        int v160 = 0;
        int v161 = 0;
        unsigned int v162 = (v156 + v234) << v237;
        int v163 = a9;
        if (v233 >= (v156 + v234 + 1) << v237) {
          int v163 = v235 - ((v235 - 1) & a7);
        }
        int v164 = 1 << v237;
        if (v233 < (v156 + v234 + 1) << v237) {
          int v164 = (v235 - 1) & (a9 + a7);
        }
        int v165 = v232 + v156;
        int v166 = v156 << v237;
        if (v162 >= v19) {
          int v167 = v164;
        }
        else {
          int v167 = v163;
        }
        if (v162 >= v19) {
          int v168 = 0;
        }
        else {
          int v168 = (v235 - 1) & a7;
        }
        char v242 = &v243[v168 + v166];
        do
        {
          int v169 = v277 + v160;
          if (v278)
          {
            int v170 = v275;
            if (v275)
            {
              int v171 = 0;
              int v170 = 0;
              int v172 = 1;
              BOOL v173 = v261;
              BOOL v174 = v263;
              int v176 = v265;
              int v175 = v267;
              do
              {
                --v175;
                if (v174) {
                  v170 |= (v172 & v165) << v171;
                }
                else {
                  int v175 = 0;
                }
                if (v174) {
                  ++v171;
                }
                --v176;
                if (v173) {
                  v170 |= (v172 & v169) << v171;
                }
                else {
                  int v176 = 0;
                }
                if (v173) {
                  ++v171;
                }
                v172 *= 2;
                --v171;
                BOOL v173 = v176 != 0;
                BOOL v174 = v175 != 0;
              }
              while (v176 | v175);
            }
          }
          else
          {
            int v170 = v275;
            if (v275)
            {
              int v177 = 0;
              int v170 = 0;
              int v178 = 1;
              BOOL v180 = v261;
              BOOL v179 = v263;
              int v181 = v265;
              int v182 = v267;
              do
              {
                --v181;
                if (v180) {
                  v170 |= (v178 & v169) << v177;
                }
                else {
                  int v181 = 0;
                }
                if (v180) {
                  ++v177;
                }
                --v182;
                if (v179) {
                  v170 |= (v178 & v165) << v177;
                }
                else {
                  int v182 = 0;
                }
                if (v179) {
                  ++v177;
                }
                v178 *= 2;
                --v177;
                BOOL v179 = v182 != 0;
                BOOL v180 = v181 != 0;
              }
              while (v182 | v181);
            }
          }
          int v183 = *(_DWORD *)(v146 + 4 * ((v170 + v158) | ((v170 + v158) >> 8 << 9)));
          if (v183 < 0)
          {
            unint64_t v184 = v146 - *((void *)a13 + 3) + ((unint64_t)(v183 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v185 = a13[2];
            if (result > v185)
            {
              unint64_t result = get_level_offset_within_tail(result, v185, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v154 = v259;
              unsigned int v149 = v239;
              char v23 = v240;
              uint64_t v17 = a11;
              unsigned int v148 = a8;
              int v147 = a10;
              uint64_t v146 = v257;
              v184 += result;
            }
            unsigned int v186 = (v160 + v255) << v23;
            unsigned int v187 = v248;
            if (a10 + a8 >= (v160 + v255 + 1) << v23)
            {
              unsigned int v188 = v149;
            }
            else
            {
              unsigned int v187 = v147;
              unsigned int v188 = v252;
            }
            if (v186 >= v148) {
              int v189 = 0;
            }
            else {
              int v189 = v250;
            }
            if (v186 >= v148) {
              unsigned int v187 = v188;
            }
            if (!v247)
            {
              uint64_t v207 = 0;
              uint64_t v191 = 0;
              uint64_t v198 = 0;
              uint64_t v214 = 0;
              int v158 = v246;
              if (!v187) {
                goto LABEL_191;
              }
LABEL_263:
              if (v167)
              {
                int v221 = 0;
                int v222 = (long long *)((char *)v242 + (v189 + (v160 << v23)) * v17);
                do
                {
                  int v223 = v167;
                  int v224 = v222;
                  uint64_t v225 = v207;
                  do
                  {
                    unint64_t result = v225 + v214;
                    long long v226 = *v224++;
                    *(_OWORD *)(v184 + 16 * (v225 + v214)) = v226;
                    uint64_t v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  uint64_t v214 = (v214 - v198) & v198;
                  int v222 = (long long *)((char *)v222 + v17);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_191;
            }
            unsigned int v190 = 0;
            uint64_t v191 = 0;
            int v192 = 1;
            BOOL v193 = v269;
            BOOL v194 = v271;
            unsigned int v195 = v154;
            unsigned int v196 = v273;
            do
            {
              --v195;
              if (v194) {
                v191 |= (unint64_t)(v192 & v159) << v190++;
              }
              else {
                unsigned int v195 = 0;
              }
              --v196;
              if (!v193) {
                unsigned int v196 = 0;
              }
              v192 *= 2;
              unsigned int v190 = (__PAIR64__(v190, v193) - 1) >> 32;
              BOOL v193 = v196 != 0;
              BOOL v194 = v195 != 0;
            }
            while (v196 | v195);
            int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v269;
            BOOL v201 = v271;
            unsigned int v202 = v154;
            unsigned int v203 = v273;
            do
            {
              --v202;
              int v204 = v201;
              if (!v204) {
                unsigned int v202 = 0;
              }
              int v205 = v197 + v204;
              --v203;
              if (v200) {
                v198 |= (unint64_t)(v199 & ~(-1 << v273)) << v205++;
              }
              else {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              int v197 = v205 - 1;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            unsigned int v206 = 0;
            uint64_t v207 = 0;
            int v208 = 1;
            BOOL v210 = v269;
            BOOL v209 = v271;
            unsigned int v211 = v154;
            unsigned int v212 = v273;
            do
            {
              --v211;
              if (v209) {
                v207 |= (unint64_t)(v208 & v168) << v206++;
              }
              else {
                unsigned int v211 = 0;
              }
              --v212;
              if (!v210) {
                unsigned int v212 = 0;
              }
              v208 *= 2;
              unsigned int v206 = (__PAIR64__(v206, v210) - 1) >> 32;
              BOOL v210 = v212 != 0;
              BOOL v209 = v211 != 0;
            }
            while (v212 | v211);
            int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            LOBYTE(result) = v269;
            BOOL v216 = v271;
            unsigned int v217 = v154;
            unsigned int v218 = v273;
            do
            {
              --v217;
              int v219 = v216;
              if (!v219) {
                unsigned int v217 = 0;
              }
              int v220 = v213 + v219;
              --v218;
              if (result) {
                v214 |= (unint64_t)(v215 & v189) << v220++;
              }
              else {
                unsigned int v218 = 0;
              }
              v215 *= 2;
              int v213 = v220 - 1;
              unint64_t result = v218 != 0;
              BOOL v216 = v217 != 0;
            }
            while (v218 | v217);
            unsigned int v154 = v259;
            int v158 = v246;
            if (v187) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v160 = (unsigned __int16)++v161;
        }
        while (v150 > (unsigned __int16)v161);
        int v157 = v238 + 1;
        unsigned int v156 = (unsigned __int16)(v238 + 1);
        unsigned int v19 = a7;
      }
      while (v236 > v156);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        unint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          uint64_t v228 = *v226++;
          *(void *)(v17 + 8 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (uint64_t *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      int v134 = (uint64_t *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          uint64_t v138 = *v136++;
          *(void *)(v135 + 8 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          unint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        int v134 = (uint64_t *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        unsigned int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              unint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (uint64_t *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    uint64_t v223 = *v221++;
                    unint64_t result = v223;
                    *(void *)(v180 + 8 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (uint64_t *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              unint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        unint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          uint64_t v228 = *v226++;
          *(void *)(v17 + 8 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (uint64_t *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      int v134 = (uint64_t *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          uint64_t v138 = *v136++;
          *(void *)(v135 + 8 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          unint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        int v134 = (uint64_t *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        unsigned int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              unint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (uint64_t *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    uint64_t v223 = *v221++;
                    unint64_t result = v223;
                    *(void *)(v180 + 8 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (uint64_t *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              unint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)1>>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        unint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          int v228 = *v226++;
          *(_DWORD *)(v17 + 4 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (int *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      int v134 = (int *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          int v138 = *v136++;
          *(_DWORD *)(v135 + 4 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          unint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        int v134 = (int *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        unsigned int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              unint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (unsigned int *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    unsigned int v223 = *v221++;
                    unint64_t result = v223;
                    *(_DWORD *)(v180 + 4 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (unsigned int *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              unint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)1>>(uint64_t result, __int16 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        unint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          __int16 v228 = *v226++;
          *(_WORD *)(v17 + 2 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (__int16 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      int v134 = (__int16 *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          __int16 v138 = *v136++;
          *(_WORD *)(v135 + 2 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          unint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        int v134 = (__int16 *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        unsigned int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              unint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (unsigned __int16 *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    unsigned int v223 = *v221++;
                    unint64_t result = v223;
                    *(_WORD *)(v180 + 2 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (unsigned __int16 *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              unint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v228 = a9;
        int v229 = v13;
        uint64_t v230 = v47;
        do
        {
          long long v231 = *v229++;
          *(_OWORD *)(result + 16 * (v230 + v54)) = v231;
          uint64_t v230 = (v230 - v29) & v29;
          --v228;
        }
        while (v228);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v257 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v260 = a8 >> v66;
    unsigned int v262 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v258 = a10 + a8;
    unsigned int v254 = (v69 - 1 + a10 + a8) >> v66;
    char v256 = v66;
    if (a8 >> v66 >= v254) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v276 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v262 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v270 = a7 >> v67;
    unsigned int v274 = (v77 + a9 + a7) >> v67;
    if (result >= v274) {
      return result;
    }
    unsigned int v253 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v272 = v77 & v276;
    int v249 = v76 & v258;
    uint64_t v251 = v76 & a8;
    unsigned int v85 = v260;
LABEL_89:
    unsigned int v86 = v85 << v256;
    unsigned int v87 = v85 - v260;
    int v268 = v85 * v253;
    unsigned int v264 = v85 + 1;
    BOOL v88 = v258 >= (v85 + 1) << v256;
    unsigned int v89 = v262;
    if (!v88) {
      unsigned int v89 = v249;
    }
    int v90 = v262 - v251;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v256;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v251;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v266 = (v92 + v91 - v251) * a11;
    unsigned int v94 = v270;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v276 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v272;
      if (v276 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v274)
      {
        unsigned int v85 = v264;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v264 == v254) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (long long *)((char *)&a2[v100 + ((v94 - v270) << v67) - v84] + v266);
      uint64_t v135 = (v94 + v268) * a12[3] * *((unsigned __int8 *)a12 + 9) + v257;
      do
      {
        int v136 = v99;
        uint64_t v137 = v134;
        uint64_t v138 = v118;
        do
        {
          long long v139 = *v137++;
          *(_OWORD *)(v135 + 16 * (v138 + v125)) = v139;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        unint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v279);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v140 = a6 >> v20;
    unsigned int v141 = 1 << v21;
    unsigned int v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v142 = 0;
    }
    BOOL v143 = v141 >= a5;
    if (v141 < a5) {
      char v144 = v21 + v20 + v142;
    }
    else {
      char v144 = *((unsigned char *)a12 + 12);
    }
    if (v143) {
      LOBYTE(v145) = *((unsigned char *)a12 + 13);
    }
    else {
      int v145 = -v142;
    }
    if (!v140) {
      char v21 = v144;
    }
    char v237 = v21;
    if (v140) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v145;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v237 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v146 = v257;
  unsigned int v148 = a8;
  int v147 = a10;
  unsigned int v236 = v285;
  if (v285)
  {
    unsigned int v149 = 1 << v23;
    unsigned int v150 = v286;
    int v267 = v283;
    BOOL v263 = v283 != 0;
    int v265 = v284;
    BOOL v261 = v284 != 0;
    int v235 = 1 << v237;
    if (1 << v237 >= a5) {
      unsigned int v151 = a5;
    }
    else {
      unsigned int v151 = 1 << v237;
    }
    if (v149 >= a6) {
      unsigned int v152 = a6;
    }
    else {
      unsigned int v152 = 1 << v23;
    }
    unsigned int v153 = 32 - __clz(v151 - 1);
    if (v151 >= 2) {
      unsigned int v154 = v153;
    }
    else {
      unsigned int v154 = 0;
    }
    unsigned int v155 = 32 - __clz(v152 - 1);
    if (v152 < 2) {
      unsigned int v155 = 0;
    }
    BOOL v271 = v154 != 0;
    unsigned int v273 = v155;
    BOOL v269 = v155 != 0;
    if (v286)
    {
      unsigned int v156 = 0;
      int v157 = 0;
      unsigned int v234 = a7 >> v237;
      unsigned int v255 = a8 >> v23;
      int v278 = v287;
      int v275 = v284 | v283;
      unsigned int v233 = a9 + a7;
      int v232 = v280;
      int v158 = v282;
      int v277 = v281;
      int v250 = (v149 - 1) & a8;
      int v252 = (v149 - 1) & (a10 + a8);
      unsigned int v248 = v149 - v250;
      int v159 = ~(-1 << v154);
      int v246 = v282;
      int v247 = v273 | v154;
      unsigned int v259 = v154;
      int v239 = 1 << v23;
      char v240 = v23;
      do
      {
        int v238 = v157;
        int v160 = 0;
        int v161 = 0;
        unsigned int v162 = (v156 + v234) << v237;
        int v163 = a9;
        if (v233 >= (v156 + v234 + 1) << v237) {
          int v163 = v235 - ((v235 - 1) & a7);
        }
        int v164 = 1 << v237;
        if (v233 < (v156 + v234 + 1) << v237) {
          int v164 = (v235 - 1) & (a9 + a7);
        }
        int v165 = v232 + v156;
        int v166 = v156 << v237;
        if (v162 >= v19) {
          int v167 = v164;
        }
        else {
          int v167 = v163;
        }
        if (v162 >= v19) {
          int v168 = 0;
        }
        else {
          int v168 = (v235 - 1) & a7;
        }
        char v242 = &v243[v168 + v166];
        do
        {
          int v169 = v277 + v160;
          if (v278)
          {
            int v170 = v275;
            if (v275)
            {
              int v171 = 0;
              int v170 = 0;
              int v172 = 1;
              BOOL v173 = v261;
              BOOL v174 = v263;
              int v176 = v265;
              int v175 = v267;
              do
              {
                --v175;
                if (v174) {
                  v170 |= (v172 & v165) << v171;
                }
                else {
                  int v175 = 0;
                }
                if (v174) {
                  ++v171;
                }
                --v176;
                if (v173) {
                  v170 |= (v172 & v169) << v171;
                }
                else {
                  int v176 = 0;
                }
                if (v173) {
                  ++v171;
                }
                v172 *= 2;
                --v171;
                BOOL v173 = v176 != 0;
                BOOL v174 = v175 != 0;
              }
              while (v176 | v175);
            }
          }
          else
          {
            int v170 = v275;
            if (v275)
            {
              int v177 = 0;
              int v170 = 0;
              int v178 = 1;
              BOOL v180 = v261;
              BOOL v179 = v263;
              int v181 = v265;
              int v182 = v267;
              do
              {
                --v181;
                if (v180) {
                  v170 |= (v178 & v169) << v177;
                }
                else {
                  int v181 = 0;
                }
                if (v180) {
                  ++v177;
                }
                --v182;
                if (v179) {
                  v170 |= (v178 & v165) << v177;
                }
                else {
                  int v182 = 0;
                }
                if (v179) {
                  ++v177;
                }
                v178 *= 2;
                --v177;
                BOOL v179 = v182 != 0;
                BOOL v180 = v181 != 0;
              }
              while (v182 | v181);
            }
          }
          int v183 = *(_DWORD *)(v146 + 4 * ((v170 + v158) | ((v170 + v158) >> 8 << 9)));
          if (v183 < 0)
          {
            unint64_t v184 = v146 - *((void *)a13 + 3) + ((unint64_t)(v183 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v185 = a13[2];
            if (result > v185)
            {
              unint64_t result = get_level_offset_within_tail(result, v185, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v154 = v259;
              unsigned int v149 = v239;
              char v23 = v240;
              uint64_t v17 = a11;
              unsigned int v148 = a8;
              int v147 = a10;
              uint64_t v146 = v257;
              v184 += result;
            }
            unsigned int v186 = (v160 + v255) << v23;
            unsigned int v187 = v248;
            if (a10 + a8 >= (v160 + v255 + 1) << v23)
            {
              unsigned int v188 = v149;
            }
            else
            {
              unsigned int v187 = v147;
              unsigned int v188 = v252;
            }
            if (v186 >= v148) {
              int v189 = 0;
            }
            else {
              int v189 = v250;
            }
            if (v186 >= v148) {
              unsigned int v187 = v188;
            }
            if (!v247)
            {
              uint64_t v207 = 0;
              uint64_t v191 = 0;
              uint64_t v198 = 0;
              uint64_t v214 = 0;
              int v158 = v246;
              if (!v187) {
                goto LABEL_191;
              }
LABEL_263:
              if (v167)
              {
                int v221 = 0;
                uint64_t v222 = (long long *)((char *)v242 + (v189 + (v160 << v23)) * v17);
                do
                {
                  int v223 = v167;
                  int v224 = v222;
                  uint64_t v225 = v207;
                  do
                  {
                    unint64_t result = v225 + v214;
                    long long v226 = *v224++;
                    *(_OWORD *)(v184 + 16 * (v225 + v214)) = v226;
                    uint64_t v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  uint64_t v214 = (v214 - v198) & v198;
                  uint64_t v222 = (long long *)((char *)v222 + v17);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_191;
            }
            unsigned int v190 = 0;
            uint64_t v191 = 0;
            int v192 = 1;
            BOOL v193 = v269;
            BOOL v194 = v271;
            unsigned int v195 = v154;
            unsigned int v196 = v273;
            do
            {
              --v195;
              if (v194) {
                v191 |= (unint64_t)(v192 & v159) << v190++;
              }
              else {
                unsigned int v195 = 0;
              }
              --v196;
              if (!v193) {
                unsigned int v196 = 0;
              }
              v192 *= 2;
              unsigned int v190 = (__PAIR64__(v190, v193) - 1) >> 32;
              BOOL v193 = v196 != 0;
              BOOL v194 = v195 != 0;
            }
            while (v196 | v195);
            int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v269;
            BOOL v201 = v271;
            unsigned int v202 = v154;
            unsigned int v203 = v273;
            do
            {
              --v202;
              int v204 = v201;
              if (!v204) {
                unsigned int v202 = 0;
              }
              int v205 = v197 + v204;
              --v203;
              if (v200) {
                v198 |= (unint64_t)(v199 & ~(-1 << v273)) << v205++;
              }
              else {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              int v197 = v205 - 1;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            unsigned int v206 = 0;
            uint64_t v207 = 0;
            int v208 = 1;
            BOOL v210 = v269;
            BOOL v209 = v271;
            unsigned int v211 = v154;
            unsigned int v212 = v273;
            do
            {
              --v211;
              if (v209) {
                v207 |= (unint64_t)(v208 & v168) << v206++;
              }
              else {
                unsigned int v211 = 0;
              }
              --v212;
              if (!v210) {
                unsigned int v212 = 0;
              }
              v208 *= 2;
              unsigned int v206 = (__PAIR64__(v206, v210) - 1) >> 32;
              BOOL v210 = v212 != 0;
              BOOL v209 = v211 != 0;
            }
            while (v212 | v211);
            int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            LOBYTE(result) = v269;
            BOOL v216 = v271;
            unsigned int v217 = v154;
            unsigned int v218 = v273;
            do
            {
              --v217;
              int v219 = v216;
              if (!v219) {
                unsigned int v217 = 0;
              }
              int v220 = v213 + v219;
              --v218;
              if (result) {
                v214 |= (unint64_t)(v215 & v189) << v220++;
              }
              else {
                unsigned int v218 = 0;
              }
              v215 *= 2;
              int v213 = v220 - 1;
              unint64_t result = v218 != 0;
              BOOL v216 = v217 != 0;
            }
            while (v218 | v217);
            unsigned int v154 = v259;
            int v158 = v246;
            if (v187) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v160 = (unsigned __int16)++v161;
        }
        while (v150 > (unsigned __int16)v161);
        int v157 = v238 + 1;
        unsigned int v156 = (unsigned __int16)(v238 + 1);
        unsigned int v19 = a7;
      }
      while (v236 > v156);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        unint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          uint64_t v228 = *v226++;
          *(void *)(v17 + 8 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (uint64_t *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      int v134 = (uint64_t *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          uint64_t v138 = *v136++;
          *(void *)(v135 + 8 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          unint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        int v134 = (uint64_t *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        unsigned int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              unint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (uint64_t *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    uint64_t v223 = *v221++;
                    unint64_t result = v223;
                    *(void *)(v180 + 8 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (uint64_t *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              unint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        unint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          int v228 = *v226++;
          *(_DWORD *)(v17 + 4 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (int *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    unint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    unint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      unint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      int v134 = (int *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          int v138 = *v136++;
          *(_DWORD *)(v135 + 4 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          unint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        int v134 = (int *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  unint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        unsigned int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            unint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              unint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (unsigned int *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    unsigned int v223 = *v221++;
                    unint64_t result = v223;
                    *(_DWORD *)(v180 + 4 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (unsigned int *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              unint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(uint64_t result, __int16 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 11) / 0xCu, (a4 + 11) / 0xCu, a5, a6, a7 / 0xC, a8 / 0xC, (a9 + 11) / 0xCu, (a10 + 11) / 0xCu, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 11) / 0xCu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xC, a8 / 0xA, (a9 + 11) / 0xCu, (a10 + 9) / 0xAu, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xA, a8 / 0xA, (a9 + 9) / 0xAu, (a10 + 9) / 0xAu, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 7) >> 3, a5, a6, a7 / 0xA, a8 >> 3, (a9 + 9) / 0xAu, (a10 + 7) >> 3, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 5) / 6u, a5, a6, a7 / 0xA, a8 / 6, (a9 + 9) / 0xAu, (a10 + 5) / 6u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 4) / 5u, a5, a6, a7 / 0xA, a8 / 5, (a9 + 9) / 0xAu, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 7) >> 3, a5, a6, a7 >> 3, a8 >> 3, (a9 + 7) >> 3, (a10 + 7) >> 3, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 5) / 6u, a5, a6, a7 >> 3, a8 / 6, (a9 + 7) >> 3, (a10 + 5) / 6u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 4) / 5u, a5, a6, a7 >> 3, a8 / 5, (a9 + 7) >> 3, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 3) >> 2, a5, a6, a7 >> 3, a8 >> 2, (a9 + 7) >> 3, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 5) / 6u, (a4 + 5) / 6u, a5, a6, a7 / 6, a8 / 6, (a9 + 5) / 6u, (a10 + 5) / 6u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 5) / 6u, (a4 + 4) / 5u, a5, a6, a7 / 6, a8 / 5, (a9 + 5) / 6u, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 4) / 5u, (a4 + 4) / 5u, a5, a6, a7 / 5, a8 / 5, (a9 + 4) / 5u, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 4) / 5u, (a4 + 3) >> 2, a5, a6, a7 / 5, a8 >> 2, (a9 + 4) / 5u, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 3) >> 2, (a4 + 1) >> 1, a5, a6, a7 >> 2, a8 >> 1, (a9 + 3) >> 2, (a10 + 1) >> 1, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)1>(uint64_t result, uint64_t *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressPVRTC4<true,(TwiddleOrder)1>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result && a2)
  {
    unint64_t v10 = (a9 + 3) >> 2;
    unsigned int v11 = (a10 + 3) >> 2;
    unint64_t v12 = ((a9 + 3) >> 3) * (unint64_t)v11;
    uint64_t v13 = 8 * v12;
    uint64_t v14 = 16 * v12;
    if (v10 > v11)
    {
      unint64_t v15 = v10 >> 1;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v15 = (a9 + 3) >> 2;
    }
    unint64_t v16 = 32 - __clz(v15 - 1);
    if (v15 < 2) {
      unint64_t v16 = 0;
    }
    unsigned int v17 = 32 - __clz(v11 - 1);
    if ((a10 + 3) >= 8) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = 0;
    }
    if (v18 < v16) {
      LOBYTE(v16) = v18;
    }
    unint64_t v19 = 8 * v15 * (unint64_t)v11;
    if (v19)
    {
      unint64_t v20 = 0;
      uint64_t v21 = 8 * ~(-1 << (2 * v16));
      uint64_t v22 = v21 & 0x2AAAAAAAAAAAAAA8;
      uint64_t v23 = v21 & 0x5555555555555555;
      uint64_t v24 = ~v21;
      do
      {
        *(void *)(result + (v20 & v24 | (2 * (v22 & v20)) | ((v23 & v20) >> 1))) = *(void *)(a2 + v20);
        v20 += 8;
      }
      while (v20 < v19);
      if (v10 > v11)
      {
        unint64_t v25 = 0;
        uint64_t v26 = a2 + v14;
        do
        {
          *(void *)(result + v13 + (v25 & v24 | (2 * (v22 & v25)) | ((v23 & v25) >> 1))) = *(void *)(v26 + v25);
          v25 += 8;
        }
        while (v25 < v19);
      }
    }
  }
  return result;
}

uint64_t agxaAssertBufferIsValid(const unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unsigned int v19 = (a5 + a8 - 1) / a8 * a4;
  if (a2) {
    unsigned int v9 = a2;
  }
  else {
    unsigned int v9 = (a5 + a8 - 1) / a8 * a4;
  }
  if (v9 >= v19)
  {
    for (unint64_t i = 0; i < a9; ++i)
    {
      uint64_t v13 = &a1[i * a3];
      for (unint64_t j = 0; j < (a6 + a7 - 1) / a7; ++j)
      {
        for (unint64_t k = 0; k < v19; k += *MEMORY[0x263EF8AF8])
          ;
        v13 += v9;
      }
    }
    char v20 = 1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "bytes_per_row >= used_bytes_per_row");
    oslog = &_os_log_internal;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)buf);
      _os_log_error_impl(&dword_2427AD000, oslog, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    unsigned int v17 = &_os_log_internal;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v23);
      _os_log_impl(&dword_2427AD000, v17, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", v23, 0xCu);
    }
    unint64_t v16 = &_os_log_internal;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v22);
      _os_log_error_impl(&dword_2427AD000, v16, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", v22, 0xCu);
    }
    unint64_t v15 = &_os_log_internal;
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v21);
      _os_log_impl(&dword_2427AD000, v15, OS_LOG_TYPE_INFO, "AGX: Texture read/write assertion failed: %s\n", v21, 0xCu);
    }
    char v20 = 0;
  }
  return v20 & 1;
}

double __os_log_helper_16_2_1_8_32(uint64_t a1)
{
  *(void *)&double result = 136315138;
  *(_DWORD *)a1 = 136315138;
  *(void *)(a1 + 4) = "bytes_per_row >= used_bytes_per_row";
  return result;
}

__IOSurface *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::readRegion(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, unsigned __int8 *a10, uint64_t a11, uint64_t a12)
{
  unsigned int v14 = a4;
  unint64_t v16 = a10;
  unint64_t v89 = __PAIR64__(a3, a2);
  double result = (__IOSurface *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::validateRegion(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (!result) {
    return result;
  }
  unsigned int v80 = a7;
  int v18 = *(_DWORD *)(a1 + 144);
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    IOSurfaceLockPlane();
  }
  unsigned int v87 = v18 + a9;
  uint64_t v21 = *(__IOSurface **)(a1 + 184);
  if (v21) {
    IOSurfaceLock(v21, 1u, 0);
  }
  uint64_t v22 = *(void *)(a1 + 380);
  uint64_t v23 = v22;
  if (!(_BYTE)v22)
  {
    size_t v33 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
    uint64_t CPUPtr = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, a8, v87, 0);
    if (a6)
    {
      uint64_t v35 = a6;
      unsigned int v36 = (char *)(CPUPtr + v33 * HIDWORD(v89) + v19 * (unint64_t)v89);
      size_t v37 = v19 * (unint64_t)a5;
      do
      {
        memcpy(v16, v36, v37);
        v36 += v33;
        v16 += a11;
        --v35;
      }
      while (v35);
    }
    goto LABEL_78;
  }
  unint64_t v24 = ((unint64_t)((unsigned __int16)v22 & 0xFF00) - 256) >> 8;
  if (v24 >= 2)
  {
    if (v24 == 2)
    {
      unint64_t v83 = v20 * (unint64_t)v19;
      int v39 = *(_DWORD *)(a1 + 144) + a9;
      unsigned int v40 = *(_DWORD *)(a1 + 132);
      if (*(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a9) <= 1u) {
        unsigned int v41 = 1;
      }
      else {
        unsigned int v41 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a9);
      }
      if (v40 >> v39 <= 1) {
        unsigned int v42 = 1;
      }
      else {
        unsigned int v42 = v40 >> v39;
      }
      unsigned int v43 = *(_DWORD *)(a1 + 136) >> v39;
      if (v43 <= 1) {
        unsigned int v44 = 1;
      }
      else {
        unsigned int v44 = v43;
      }
      unsigned int v45 = v87;
      int AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(a1, v87);
      int AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(a1, v87);
      uint64_t v47 = *(void *)(a1 + 488);
      if (v47 && *(_DWORD *)(v47 + 1080) > v87)
      {
        unsigned int v84 = v41;
        uint64_t v48 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, 0, v87, 0);
        uint64_t v49 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(*(void *)(a1 + 488), a8, v87, 0);
        unint64_t v50 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, 0);
        unint64_t v51 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(a1 + 488), 0);
        AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::readCompressedRegion3D(a1, v48, (uint64_t)a10, v49, v84, v42, v89, HIDWORD(v89), v14, a5, a6, v80, a11, a12, v50, v51, a9);
      }
      else
      {
        int v76 = AddressingBaseLevelHeightInBlocks;
        if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, v87))
        {
          uint64_t v79 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, 0, v87, 0);
          unint64_t v77 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, 0);
          DetwiddleFunc = (uint64_t (*)(unint64_t, uint64_t))AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getDetwiddleFunc(a1);
          uint64_t v53 = v83;
          if (v80)
          {
            uint64_t v54 = DetwiddleFunc;
            int v55 = *(_DWORD *)(a1 + 128);
            unsigned int v56 = *(_DWORD *)(a1 + 216);
            unsigned int v57 = *(_DWORD *)(a1 + 220);
            uint64_t v58 = v80;
            int v59 = *(unsigned __int8 *)(a1 + 317);
            do
            {
              TiledMemory<(TwiddleOrder)1>::convertTiles2D<true>((uint64_t)v16, v79 + v77 * v14, v55, v87, v89, HIDWORD(v89), a5, a6, a11, v56, v57, v53, v54, v59 != 0);
              uint64_t v53 = v83;
              ++v14;
              v16 += a12;
              --v58;
            }
            while (v58);
          }
        }
        else
        {
          unsigned int v75 = v42;
          if (*(unsigned char *)(a1 + 240))
          {
            uint64_t v74 = a1 + 242;
            uint64_t v62 = *(void *)(a1 + 72);
            *(void *)&long long v93 = __PAIR64__(a8, v87);
            DWORD2(v93) = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, 0);
            HIDWORD(v93) = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, 1);
            LODWORD(v94) = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::tailSize(a1, 0);
            *((void *)&v94 + 1) = v62;
            unsigned int v45 = 0;
            DWORD1(v94) = 8
                        * ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, 0)+ (*(_DWORD *)(a1 + 236) << 8)- 1) & -(uint64_t)(*(_DWORD *)(a1 + 236) << 8))/ *(unsigned int *)(a1 + 236);
            unsigned int v63 = &v93;
          }
          else
          {
            unsigned int v63 = 0;
            if (*(unsigned char *)(a1 + 232)) {
              uint64_t v69 = a1 + 242;
            }
            else {
              uint64_t v69 = 0;
            }
            uint64_t v74 = v69;
          }
          uint64_t v70 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, 0, v45, 0);
          unsigned int v71 = agxsTwiddle3DAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)1>;
          switch(*(void *)(a1 + 32))
          {
            case 0x82:
            case 0x83:
            case 0x8CLL:
            case 0x8DLL:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x8ELL:
            case 0x8FLL:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0xBALL:
            case 0xCCLL:
            case 0xDELL:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xB9:
            case 0xCBLL:
            case 0xDDLL:
              goto LABEL_77;
            case 0xBBLL:
            case 0xCDLL:
            case 0xDFLL:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xBCLL:
            case 0xCELL:
            case 0xE0:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xBDLL:
            case 0xCFLL:
            case 0xE1:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xBELL:
            case 0xD0:
            case 0xE2:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xBFLL:
            case 0xD1:
            case 0xE3:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC0:
            case 0xD2:
            case 0xE4:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC1:
            case 0xD3:
            case 0xE5:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC2:
            case 0xD4:
            case 0xE6:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC3:
            case 0xD5:
            case 0xE7:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC4:
            case 0xD6:
            case 0xE8:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC5:
            case 0xD7:
            case 0xE9:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC6:
            case 0xD8:
            case 0xEALL:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC7:
            case 0xD9:
            case 0xEBLL:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)1>;
              goto LABEL_76;
            case 0xC8:
            case 0xDALL:
            case 0xECLL:
              BOOL v72 = agxsTwiddle3DAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)1>;
LABEL_76:
              unsigned int v71 = v72;
LABEL_77:
              unint64_t v73 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, 0);
              ((void (*)(uint64_t, unsigned __int8 *, void, void, void, void, void, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, long long *))v71)(v70, a10, v41, v75, v44, (1 << -__clz(AddressingBaseLevelWidthInBlocks - 1)), (1 << -__clz(v76 - 1)), v73, v89, __PAIR64__(a5, v14), __PAIR64__(v80, a6), a11, a12, v74, v63);
              break;
            default:
              unsigned int v71 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
              switch(*(unsigned char *)(*(void *)(a1 + 208) + 49))
              {
                case 2:
                  BOOL v72 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
                  goto LABEL_76;
                case 3:
                case 5:
                case 6:
                case 7:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                  __break(1u);
                  JUMPOUT(0x242D15ED0);
                case 4:
                  BOOL v72 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
                  goto LABEL_76;
                case 8:
                  BOOL v72 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
                  goto LABEL_76;
                case 0x10:
                  BOOL v72 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
                  goto LABEL_76;
                default:
                  goto LABEL_77;
              }
          }
        }
      }
      goto LABEL_78;
    }
    if (v24 != 3)
    {
LABEL_78:
      if (*(void *)(a1 + 168)) {
        IOSurfaceUnlockPlane();
      }
      double result = *(__IOSurface **)(a1 + 184);
      if (result) {
        return (__IOSurface *)IOSurfaceUnlock(result, 1u, 0);
      }
      return result;
    }
  }
  uint64_t v82 = v20 * (unint64_t)v19;
  unsigned int v25 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a9);
  if (v25 <= 1) {
    unsigned int v25 = 1;
  }
  unsigned int v86 = v25;
  unsigned int v26 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a9);
  if (v26 <= 1) {
    unsigned int v26 = 1;
  }
  unsigned int v81 = v26;
  int v27 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(a1, v87);
  double result = (__IOSurface *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(a1, v87);
  int v28 = (int)result;
  if (a8 < 6 || (v22 & 0x10000) != 0)
  {
    uint64_t v29 = (uint64_t (*)(unint64_t, uint64_t))AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getDetwiddleFunc(a1);
    uint64_t v30 = *(void *)(a1 + 488);
    if (v30 && *(_DWORD *)(v30 + 1080) > v87)
    {
      uint64_t v31 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, a8, v87, 0);
      uint64_t v32 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(*(void *)(a1 + 488), a8, v87, 0);
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::readCompressedRegion2D<true>(a1, v31, (uint64_t)a10, v32, v86, v81, v89, HIDWORD(v89), a5, a6, a11, a9);
    }
    else if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, v87))
    {
      uint64_t v38 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, a8, v87, 0);
      TiledMemory<(TwiddleOrder)1>::convertTiles2D<true>((uint64_t)a10, v38, *(_DWORD *)(a1 + 128), v87, v89, HIDWORD(v89), a5, a6, a11, *(_DWORD *)(a1 + 216), *(_DWORD *)(a1 + 220), v82, v29, *(unsigned char *)(a1 + 317));
    }
    else if (v23 == 3)
    {
      uint64_t v60 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, 0, 0, 0);
      uint64_t v97 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      uint64_t v61 = *(void *)(a1 + 208);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)&v93, 0, *(MTLPixelFormat *)(a1 + 32), *(unsigned __int8 *)(v61 + 49));
      unsigned __int8 CompressedTileWidthOfPlane = v93;
      __int16 v92 = *(_WORD *)((char *)&v93 + 1);
      if (*(void *)(a1 + 168))
      {
        unsigned __int8 CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        LOBYTE(v92) = IOSurfaceGetCompressedTileHeightOfPlane();
        uint64_t v61 = *(void *)(a1 + 208);
      }
      InterchangeTiledMemory::read(v60, (uint64_t)a10, v86, v89, HIDWORD(v89), a5, a6, a11, &CompressedTileWidthOfPlane, v61);
    }
    else
    {
      uint64_t v64 = (1 << -(char)__clz(v27 - 1));
      uint64_t v65 = (1 << -(char)__clz(v28 - 1));
      if (*(unsigned char *)(a1 + 240))
      {
        uint64_t v85 = *(void *)(a1 + 72);
        *(void *)&long long v93 = __PAIR64__(a8, v87);
        DWORD2(v93) = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, 0);
        HIDWORD(v93) = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, 1);
        uint64_t v66 = a1 + 242;
        LODWORD(v94) = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::tailSize(a1, 0);
        *((void *)&v94 + 1) = v85;
        uint64_t v67 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, 0, 0, 0);
        int16x4_t v68 = &v93;
      }
      else
      {
        if (*(unsigned char *)(a1 + 232)) {
          uint64_t v66 = a1 + 242;
        }
        else {
          uint64_t v66 = 0;
        }
        uint64_t v67 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(a1, a8, v87, 0);
        int16x4_t v68 = 0;
      }
      ((void (*)(uint64_t, unsigned __int8 *, void, void, uint64_t, uint64_t, void, void, unint64_t, uint64_t, uint64_t, long long *))v29)(v67, a10, v86, v81, v64, v65, v89, HIDWORD(v89), __PAIR64__(a6, a5), a11, v66, v68);
    }
    goto LABEL_78;
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getDetwiddleFunc(uint64_t a1)
{
  uint64_t v1 = agxsTwiddleAddressPVRTC2<false,(TwiddleOrder)1>;
  switch(*(void *)(a1 + 32))
  {
    case 0x82:
    case 0x83:
    case 0x8CLL:
    case 0x8DLL:
    case 0xAALL:
    case 0xACLL:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
      double result = agxsTwiddleAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)1>;
      break;
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x8ELL:
    case 0x8FLL:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0xAELL:
    case 0xB0:
    case 0xB2:
    case 0xB3:
    case 0xBALL:
    case 0xCCLL:
    case 0xDELL:
      double result = agxsTwiddleAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)1>;
      break;
    case 0xA0:
    case 0xA1:
    case 0xA4:
    case 0xA5:
      goto LABEL_34;
    case 0xA2:
    case 0xA3:
    case 0xA6:
    case 0xA7:
      double result = agxsTwiddleAddressPVRTC4<false,(TwiddleOrder)1>;
      break;
    case 0xB9:
    case 0xCBLL:
    case 0xDDLL:
      double result = agxsTwiddleAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBBLL:
    case 0xCDLL:
    case 0xDFLL:
      double result = agxsTwiddleAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBCLL:
    case 0xCELL:
    case 0xE0:
      double result = agxsTwiddleAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBDLL:
    case 0xCFLL:
    case 0xE1:
      double result = agxsTwiddleAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBELL:
    case 0xD0:
    case 0xE2:
      double result = agxsTwiddleAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBFLL:
    case 0xD1:
    case 0xE3:
      double result = agxsTwiddleAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC0:
    case 0xD2:
    case 0xE4:
      double result = agxsTwiddleAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC1:
    case 0xD3:
    case 0xE5:
      double result = agxsTwiddleAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC2:
    case 0xD4:
    case 0xE6:
      double result = agxsTwiddleAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC3:
    case 0xD5:
    case 0xE7:
      double result = agxsTwiddleAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC4:
    case 0xD6:
    case 0xE8:
      double result = agxsTwiddleAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC5:
    case 0xD7:
    case 0xE9:
      double result = agxsTwiddleAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC6:
    case 0xD8:
    case 0xEALL:
      double result = agxsTwiddleAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC7:
    case 0xD9:
    case 0xEBLL:
      double result = agxsTwiddleAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC8:
    case 0xDALL:
    case 0xECLL:
      double result = agxsTwiddleAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)1>;
      break;
    default:
      uint64_t v1 = 0;
      switch(*(unsigned char *)(*(void *)(a1 + 208) + 88))
      {
        case 1:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853CF0;
          goto LABEL_33;
        case 2:
          uint64_t v1 = 0;
          switch(*(_DWORD *)(a1 + 112))
          {
            case 1:
              if (*(unsigned char *)(a1 + 16)) {
                double result = agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>;
              }
              else {
                double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>;
              }
              break;
            case 2:
              if (*(unsigned char *)(a1 + 16)) {
                double result = agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>;
              }
              else {
                double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>;
              }
              break;
            case 4:
              if (*(unsigned char *)(a1 + 16)) {
                double result = agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>;
              }
              else {
                double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>;
              }
              break;
            case 8:
              if (*(unsigned char *)(a1 + 16)) {
                double result = agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>;
              }
              else {
                double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>;
              }
              break;
            default:
              goto LABEL_34;
          }
          return result;
        case 4:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853D30;
          goto LABEL_33;
        case 8:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853D70;
          goto LABEL_33;
        case 0x10:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853DB0;
LABEL_33:
          uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, int))v4[v3];
          break;
        default:
          break;
      }
LABEL_34:
      double result = v1;
      break;
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::readCompressedRegion2D<true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  MTLPixelFormat v15 = *(void *)(a1 + 32);
  if (v15 == MTLPixelFormatDepth32Float_Stencil8) {
    uint64_t v16 = 252;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(unsigned __int8 *)(a1 + 380);
  if (v17 == 3)
  {
    if (*(void *)(a1 + 488))
    {
      if (*(void *)(a1 + 168))
      {
        char CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        IOSurfaceGetCompressedTileHeightOfPlane();
        if (CompressedTileWidthOfPlane == 32) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 208);
        uint64_t v373 = 0;
        memset(v372, 0, sizeof(v372));
        InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v372, 0, v15, *(unsigned __int8 *)(v33 + 49));
        if (LOBYTE(v372[0]) == 32)
        {
LABEL_8:
          switch(v16)
          {
            case 1:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_90;
                case 1u:
                  goto LABEL_210;
                case 2u:
                  goto LABEL_211;
                case 3u:
                  goto LABEL_212;
                case 4u:
                  goto LABEL_213;
                default:
                  return;
              }
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 21:
              return;
            case 10:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_90;
                case 1u:
                  goto LABEL_210;
                case 2u:
                  goto LABEL_211;
                case 3u:
                  goto LABEL_212;
                case 4u:
                  goto LABEL_213;
                default:
                  return;
              }
            case 11:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
LABEL_90:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 1u:
LABEL_210:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 2u:
LABEL_211:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 3u:
LABEL_212:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 4u:
LABEL_213:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                default:
                  return;
              }
              break;
            case 20:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 22:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 23:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 24:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 25:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
LABEL_96:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 1u:
LABEL_105:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 2u:
LABEL_106:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 3u:
LABEL_107:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 4u:
LABEL_108:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                default:
                  return;
              }
              break;
            default:
              switch(v16)
              {
                case 576:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 577:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 603:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_100;
                    case 1u:
                      goto LABEL_296;
                    case 2u:
                      goto LABEL_297;
                    case 3u:
                      goto LABEL_298;
                    case 4u:
                      goto LABEL_299;
                    default:
                      return;
                  }
                case 604:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
LABEL_100:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 1u:
LABEL_296:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 2u:
LABEL_297:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 3u:
LABEL_298:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 4u:
LABEL_299:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    default:
                      return;
                  }
                  break;
                case 606:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 642:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 643:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
LABEL_104:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 1u:
LABEL_109:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 2u:
LABEL_110:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 3u:
LABEL_111:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 4u:
LABEL_112:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    default:
                      return;
                  }
                  break;
                default:
                  return;
              }
              break;
          }
          return;
        }
      }
    }
    switch(v16)
    {
      case 1:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_214;
          case 2u:
            goto LABEL_215;
          case 3u:
            goto LABEL_216;
          case 4u:
            goto LABEL_217;
          default:
            return;
        }
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 26:
      case 27:
      case 28:
      case 29:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 61:
      case 66:
      case 67:
      case 68:
      case 69:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 92:
      case 93:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 111:
        return;
      case 10:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_214;
          case 2u:
            goto LABEL_215;
          case 3u:
            goto LABEL_216;
          case 4u:
            goto LABEL_217;
          default:
            return;
        }
      case 11:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_214;
          case 2u:
            goto LABEL_215;
          case 3u:
            goto LABEL_216;
          case 4u:
            goto LABEL_217;
          default:
            return;
        }
      case 13:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_116:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_214:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_215:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_216:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_217:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 20:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 22:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 23:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 24:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 25:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_122:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_184:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_185:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_186:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_187:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 30:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 31:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 32:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 33:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 34:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_128:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_188:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_189:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_190:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_195:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 60:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 62:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 63:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 64:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 65:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_134:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_191:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_192:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_193:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_194:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 70:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 71:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 72:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 73:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 74:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 80:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 81:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_142:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_143:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_144:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_145:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_146:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 90:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_167;
          case 1u:
            goto LABEL_168;
          case 2u:
            goto LABEL_169;
          case 3u:
            goto LABEL_170;
          case 4u:
            goto LABEL_171;
          default:
            return;
        }
      case 91:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_167;
          case 1u:
            goto LABEL_168;
          case 2u:
            goto LABEL_169;
          case 3u:
            goto LABEL_170;
          case 4u:
            goto LABEL_171;
          default:
            return;
        }
      case 94:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_167;
          case 1u:
            goto LABEL_168;
          case 2u:
            goto LABEL_169;
          case 3u:
            goto LABEL_170;
          case 4u:
            goto LABEL_171;
          default:
            return;
        }
      case 110:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 112:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 113:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 114:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 115:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_155:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_196:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_197:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_198:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_199:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      default:
        switch(v16)
        {
          case 552:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 553:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 554:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 555:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 578:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_183;
              case 1u:
                goto LABEL_292;
              case 2u:
                goto LABEL_293;
              case 3u:
                goto LABEL_294;
              case 4u:
                goto LABEL_295;
              default:
                return;
            }
          case 579:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_183;
              case 1u:
                goto LABEL_292;
              case 2u:
                goto LABEL_293;
              case 3u:
                goto LABEL_294;
              case 4u:
                goto LABEL_295;
              default:
                return;
            }
          case 586:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 587:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 605:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          case 628:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 629:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
LABEL_167:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
LABEL_168:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
LABEL_169:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
LABEL_170:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
LABEL_171:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          case 637:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 638:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 639:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 640:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 641:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
LABEL_177:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
LABEL_178:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
LABEL_179:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
LABEL_180:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
LABEL_181:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          case 644:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
LABEL_183:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
LABEL_292:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
LABEL_293:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
LABEL_294:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
LABEL_295:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          default:
            return;
        }
        break;
    }
  }
  else
  {
    unsigned int v19 = (void *)(a1 + 56);
    int v20 = *(unsigned __int8 *)(a1 + 57);
    if (v20 == 3)
    {
      int v22 = *(_DWORD *)(a1 + 112);
      switch(v22)
      {
        case 4:
          switch(v16)
          {
            case 1:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3) {
                goto LABEL_735;
              }
              break;
            case 10:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 11:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 12:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 13:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 14:
              if (v17 != 1)
              {
LABEL_734:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_735:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 20:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3) {
                goto LABEL_749;
              }
              break;
            case 22:
              if (v17 != 1) {
                goto LABEL_748;
              }
              break;
            case 23:
              if (v17 != 1) {
                goto LABEL_748;
              }
              break;
            case 24:
              if (v17 != 1) {
                goto LABEL_748;
              }
              break;
            case 25:
              if (v17 != 1)
              {
LABEL_748:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_749:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 30:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 31:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 32:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 33:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 34:
              if (v17 != 1)
              {
LABEL_761:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 53:
              if (v17 != 1) {
                goto LABEL_770;
              }
              break;
            case 54:
              if (v17 != 1) {
                goto LABEL_770;
              }
              break;
            case 55:
              if (v17 != 1)
              {
LABEL_770:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 60:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 62:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 63:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 64:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 65:
              if (v17 != 1)
              {
LABEL_783:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 70:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 71:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 72:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 73:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 74:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 80:
              if (v17 != 1) {
                goto LABEL_800;
              }
              break;
            case 81:
              if (v17 != 1)
              {
LABEL_800:
                if (getCompressionCodecConfig(*v19) == 3) {
                  goto LABEL_848;
                }
              }
              break;
            case 84:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 85:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 90:
              if (v17 != 1) {
                goto LABEL_811;
              }
              break;
            case 91:
              if (v17 != 1) {
                goto LABEL_811;
              }
              break;
            case 94:
              if (v17 != 1)
              {
LABEL_811:
                if (getCompressionCodecConfig(*v19) == 3) {
                  goto LABEL_873;
                }
              }
              break;
            case 103:
              if (v17 != 1) {
                goto LABEL_818;
              }
              break;
            case 104:
              if (v17 != 1) {
                goto LABEL_818;
              }
              break;
            case 105:
              if (v17 != 1)
              {
LABEL_818:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 110:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 112:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 113:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 114:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 115:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 123:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 124:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 125:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 300:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 301:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 302:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 303:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 304:
              if (v17 != 1)
              {
LABEL_847:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_848:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 313:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 314:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 315:
              if (v17 != 1)
              {
LABEL_856:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 323:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 324:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 325:
              if (v17 != 1)
              {
LABEL_865:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 554:
              if (v17 != 1) {
                goto LABEL_872;
              }
              break;
            case 555:
              if (v17 != 1)
              {
LABEL_872:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_873:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            default:
              return;
          }
          break;
        case 2:
          switch(v16)
          {
            case 1:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 53:
            case 54:
            case 55:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 80:
            case 81:
            case 304:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 84:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 85:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 90:
            case 91:
            case 554:
            case 555:
              if (v17 != 1) {
                goto LABEL_881;
              }
              break;
            case 94:
              if (v17 != 1)
              {
LABEL_881:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 103:
            case 104:
            case 105:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 123:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 124:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 125:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 300:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 301:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 302:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 303:
              if (v17 != 1)
              {
LABEL_64:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 323:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 324:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 325:
              if (v17 != 1)
              {
LABEL_904:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            default:
              return;
          }
          break;
        case 1:
          switch(v16)
          {
            case 1:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 53:
            case 54:
            case 55:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 80:
            case 81:
            case 84:
            case 85:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 90:
            case 91:
            case 94:
            case 554:
            case 555:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 103:
            case 104:
            case 105:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            default:
              return;
          }
          break;
      }
    }
    else if (v20 == 1)
    {
      int v21 = *(_DWORD *)(a1 + 112);
      switch(v21)
      {
        case 4:
          switch(v16)
          {
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              goto LABEL_47;
            default:
              if (v16 == 553 || v16 == 552)
              {
LABEL_47:
                if (v17 != 1 && getCompressionCodecConfig(*v19) == 1)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
          }
          break;
        case 2:
          switch(v16)
          {
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              goto LABEL_53;
            default:
              if (v16 == 553 || v16 == 552)
              {
LABEL_53:
                if (v17 != 1 && getCompressionCodecConfig(*v19) == 1)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
          }
          break;
        case 1:
          switch(v16)
          {
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              goto LABEL_16;
            default:
              if (v16 == 553 || v16 == 552)
              {
LABEL_16:
                if (v17 != 1 && getCompressionCodecConfig(*v19) == 1)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
          }
          break;
      }
    }
    else
    {
      int v23 = *(_DWORD *)(a1 + 112);
      switch(v23)
      {
        case 4:
          switch(v16)
          {
            case 1:
              int CompressionCodecConfig = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (CompressionCodecConfig != 4) {
                  goto LABEL_990;
                }
                uint64_t v82 = a1;
                uint64_t v83 = a3;
                uint64_t v84 = a2;
                uint64_t v85 = a4;
                unsigned int v86 = a5;
                unsigned int v87 = a6;
                unsigned int v88 = a7;
                unsigned int v89 = a8;
                goto LABEL_357;
              }
              if (CompressionCodecConfig == 4) {
                goto LABEL_1450;
              }
              if (!CompressionCodecConfig)
              {
                uint64_t v185 = a1;
                uint64_t v186 = a3;
                uint64_t v187 = a2;
                uint64_t v188 = a4;
                unsigned int v189 = a5;
                unsigned int v190 = a6;
                unsigned int v191 = a7;
                unsigned int v192 = a8;
                goto LABEL_539;
              }
              return;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              int CompressionCodecConfig = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (CompressionCodecConfig != 4) {
                  goto LABEL_990;
                }
                uint64_t v82 = a1;
                uint64_t v83 = a3;
                uint64_t v84 = a2;
                uint64_t v85 = a4;
                unsigned int v86 = a5;
                unsigned int v87 = a6;
                unsigned int v88 = a7;
                unsigned int v89 = a8;
                goto LABEL_357;
              }
              if (CompressionCodecConfig == 4)
              {
                uint64_t v311 = a1;
                uint64_t v312 = a3;
                uint64_t v313 = a2;
                uint64_t v314 = a4;
                unsigned int v315 = a5;
                unsigned int v316 = a6;
                unsigned int v317 = a7;
                unsigned int v318 = a8;
                goto LABEL_1273;
              }
              if (!CompressionCodecConfig)
              {
                uint64_t v185 = a1;
                uint64_t v186 = a3;
                uint64_t v187 = a2;
                uint64_t v188 = a4;
                unsigned int v189 = a5;
                unsigned int v190 = a6;
                unsigned int v191 = a7;
                unsigned int v192 = a8;
                goto LABEL_539;
              }
              return;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              int v90 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v90 != 4) {
                  goto LABEL_609;
                }
                uint64_t v91 = a1;
                uint64_t v92 = a3;
                uint64_t v93 = a2;
                uint64_t v94 = a4;
                unsigned int v95 = a5;
                unsigned int v96 = a6;
                unsigned int v97 = a7;
                unsigned int v98 = a8;
                goto LABEL_362;
              }
              if (v90 == 4) {
                goto LABEL_1158;
              }
              if (!v90) {
                goto LABEL_1155;
              }
              return;
            case 26:
            case 250:
              int v90 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v90 == 4)
                {
                  uint64_t v91 = a1;
                  uint64_t v92 = a3;
                  uint64_t v93 = a2;
                  uint64_t v94 = a4;
                  unsigned int v95 = a5;
                  unsigned int v96 = a6;
                  unsigned int v97 = a7;
                  unsigned int v98 = a8;
LABEL_362:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v91, v92, v93, v94, v95, v96, v97, v98, a9, a10, a11, a12);
                }
                else
                {
LABEL_609:
                  if (!v90)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v90 == 4)
              {
LABEL_1158:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v90)
              {
LABEL_1155:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              int v99 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v99 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v99)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v99 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v99)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 40:
              int v250 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v250 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v250)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v250 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v250)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 41:
              int v251 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v251 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v251)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v251 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v251)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 42:
              int v252 = getCompressionCodecConfig(*v19);
              if (v17 != 1) {
                goto LABEL_1199;
              }
              if (v252 != 4) {
                goto LABEL_1019;
              }
              goto LABEL_1008;
            case 43:
              int v253 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v253 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v253)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v253 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v253)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 44:
              int v252 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v252 == 4)
                {
LABEL_1008:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else
                {
LABEL_1019:
                  if (!v252)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else
              {
LABEL_1199:
                if (v252 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v252)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 53:
            case 54:
            case 55:
              int v156 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v156 != 4) {
                  goto LABEL_1041;
                }
                uint64_t v157 = a1;
                uint64_t v158 = a3;
                uint64_t v159 = a2;
                uint64_t v160 = a4;
                unsigned int v161 = a5;
                unsigned int v162 = a6;
                unsigned int v163 = a7;
                unsigned int v164 = a8;
                goto LABEL_477;
              }
              if (v156 == 4)
              {
                uint64_t v343 = a1;
                uint64_t v344 = a3;
                uint64_t v345 = a2;
                uint64_t v346 = a4;
                unsigned int v347 = a5;
                unsigned int v348 = a6;
                uint64_t v349 = a7;
                unsigned int v350 = a8;
                goto LABEL_1315;
              }
              if (!v156) {
                goto LABEL_1408;
              }
              return;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              int v100 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v100 == 4)
                {
                  uint64_t v287 = a1;
                  uint64_t v288 = a3;
                  uint64_t v289 = a2;
                  uint64_t v290 = a4;
                  unsigned int v291 = a5;
                  unsigned int v292 = a6;
                  unsigned int v293 = a7;
                  unsigned int v294 = a8;
                  goto LABEL_1255;
                }
                if (v100) {
                  return;
                }
                goto LABEL_372;
              }
              if (v100 == 4)
              {
                uint64_t v319 = a1;
                uint64_t v320 = a3;
                uint64_t v321 = a2;
                uint64_t v322 = a4;
                unsigned int v323 = a5;
                unsigned int v324 = a6;
                unsigned int v325 = a7;
                unsigned int v326 = a8;
                goto LABEL_1279;
              }
              if (v100) {
                return;
              }
              goto LABEL_550;
            case 66:
              int v254 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v254 == 4)
                {
                  uint64_t v287 = a1;
                  uint64_t v288 = a3;
                  uint64_t v289 = a2;
                  uint64_t v290 = a4;
                  unsigned int v291 = a5;
                  unsigned int v292 = a6;
                  unsigned int v293 = a7;
                  unsigned int v294 = a8;
LABEL_1255:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v287, v288, v289, v290, v291, v292, v293, v294, a9, a10, a11, a12);
                }
                else if (!v254)
                {
LABEL_372:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v254 == 4)
              {
                uint64_t v319 = a1;
                uint64_t v320 = a3;
                uint64_t v321 = a2;
                uint64_t v322 = a4;
                unsigned int v323 = a5;
                unsigned int v324 = a6;
                unsigned int v325 = a7;
                unsigned int v326 = a8;
LABEL_1279:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v319, v320, v321, v322, v323, v324, v325, v326, a9, a10, a11, a12);
              }
              else if (!v254)
              {
LABEL_550:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 70:
            case 71:
            case 73:
            case 84:
            case 85:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              int v34 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_443;
              }
              if (v34 == 4) {
                goto LABEL_677;
              }
              if (v34) {
                return;
              }
              goto LABEL_674;
            case 72:
            case 74:
            case 80:
            case 81:
              int v34 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_443:
                if (v34 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v34)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v34 == 4)
              {
LABEL_677:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v34)
              {
LABEL_674:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 90:
            case 91:
              int v193 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_618;
              }
              if (v193 == 4) {
                goto LABEL_1169;
              }
              if (v193) {
                return;
              }
              goto LABEL_1166;
            case 92:
              int v255 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v255 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v255)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v255 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v255)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 93:
              int v256 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v256 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v256)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v256 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v256)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 94:
            case 586:
            case 587:
              int v165 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v165 == 4) {
                  goto LABEL_717;
                }
                if (!v165) {
                  goto LABEL_624;
                }
              }
              else
              {
                if (v165 == 4) {
                  goto LABEL_1169;
                }
                if (!v165) {
                  goto LABEL_1166;
                }
              }
              return;
            case 103:
            case 104:
            case 105:
              int v184 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v184 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v184)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v184 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v184)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
              int v121 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_412;
              }
              if (v121 == 4)
              {
                uint64_t v295 = a1;
                uint64_t v296 = a3;
                uint64_t v297 = a2;
                uint64_t v298 = a4;
                uint64_t v299 = a5;
                uint64_t v300 = a6;
                uint64_t v301 = a7;
                uint64_t v302 = a8;
                goto LABEL_1264;
              }
              if (!v121) {
                goto LABEL_571;
              }
              return;
            case 116:
            case 313:
            case 314:
            case 315:
            case 556:
              int v121 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_412:
                if (v121 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v121)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v121 == 4)
              {
                uint64_t v295 = a1;
                uint64_t v296 = a3;
                uint64_t v297 = a2;
                uint64_t v298 = a4;
                uint64_t v299 = a5;
                uint64_t v300 = a6;
                uint64_t v301 = a7;
                uint64_t v302 = a8;
LABEL_1264:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v295, v296, v297, v298, v299, v300, v301, v302, a9, a10, a11, a12);
              }
              else if (!v121)
              {
LABEL_571:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              int v59 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v59 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v59)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v59 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v59)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 252:
              int v156 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v156 == 4)
                {
                  uint64_t v157 = a1;
                  uint64_t v158 = a3;
                  uint64_t v159 = a2;
                  uint64_t v160 = a4;
                  unsigned int v161 = a5;
                  unsigned int v162 = a6;
                  unsigned int v163 = a7;
                  unsigned int v164 = a8;
LABEL_477:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v157, v158, v159, v160, v161, v162, v163, v164, a9, a10, a11, a12);
                }
                else
                {
LABEL_1041:
                  if (!v156)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v156 == 4)
              {
                uint64_t v343 = a1;
                uint64_t v344 = a3;
                uint64_t v345 = a2;
                uint64_t v346 = a4;
                unsigned int v347 = a5;
                unsigned int v348 = a6;
                uint64_t v349 = a7;
                unsigned int v350 = a8;
LABEL_1315:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v343, v344, v345, v346, v347, v348, v349, v350, a9, a10, a11, a12);
              }
              else if (!v156)
              {
LABEL_1408:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 253:
            case 261:
              int CompressionCodecConfig = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (CompressionCodecConfig == 4)
                {
                  uint64_t v82 = a1;
                  uint64_t v83 = a3;
                  uint64_t v84 = a2;
                  uint64_t v85 = a4;
                  unsigned int v86 = a5;
                  unsigned int v87 = a6;
                  unsigned int v88 = a7;
                  unsigned int v89 = a8;
LABEL_357:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v82, v83, v84, v85, v86, v87, v88, v89, a9, a10, a11, a12);
                }
                else
                {
LABEL_990:
                  if (!CompressionCodecConfig)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (CompressionCodecConfig == 4)
              {
LABEL_1450:
                uint64_t v311 = a1;
                uint64_t v312 = a3;
                uint64_t v313 = a2;
                uint64_t v314 = a4;
                unsigned int v315 = a5;
                unsigned int v316 = a6;
                unsigned int v317 = a7;
                unsigned int v318 = a8;
LABEL_1273:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v311, v312, v313, v314, v315, v316, v317, v318, a9, a10, a11, a12);
              }
              else if (!CompressionCodecConfig)
              {
                uint64_t v185 = a1;
                uint64_t v186 = a3;
                uint64_t v187 = a2;
                uint64_t v188 = a4;
                unsigned int v189 = a5;
                unsigned int v190 = a6;
                unsigned int v191 = a7;
                unsigned int v192 = a8;
LABEL_539:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v185, v186, v187, v188, v189, v190, v191, v192, a9, a10, a11, a12);
              }
              return;
            case 552:
            case 553:
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              int v47 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v47 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v47)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v47 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v47)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 554:
            case 555:
              int v193 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_618:
                if (v193 == 4) {
                  goto LABEL_717;
                }
                if (!v193) {
                  goto LABEL_624;
                }
              }
              else
              {
                if (v193 == 4) {
                  goto LABEL_1169;
                }
                if (!v193) {
                  goto LABEL_1166;
                }
              }
              break;
            case 628:
            case 629:
              int v194 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v194 == 4)
                {
LABEL_717:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v194)
                {
LABEL_624:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v194 == 4)
              {
LABEL_1169:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v194)
              {
LABEL_1166:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            default:
              return;
          }
          break;
        case 2:
          switch(v16)
          {
            case 1:
            case 14:
              int v130 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_692;
              }
              if (v130 == 4) {
                goto LABEL_1196;
              }
              if (!v130) {
                goto LABEL_659;
              }
              return;
            case 10:
            case 11:
            case 12:
            case 13:
              int v130 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v130 != 4) {
                  goto LABEL_693;
                }
                uint64_t v131 = a1;
                uint64_t v132 = a3;
                uint64_t v133 = a2;
                uint64_t v134 = a4;
                unsigned int v135 = a5;
                unsigned int v136 = a6;
                unsigned int v137 = a7;
                unsigned int v138 = a8;
                goto LABEL_441;
              }
              if (v130 == 4)
              {
LABEL_1196:
                uint64_t v279 = a1;
                uint64_t v280 = a3;
                uint64_t v281 = a2;
                uint64_t v282 = a4;
                unsigned int v283 = a5;
                unsigned int v284 = a6;
                unsigned int v285 = a7;
                unsigned int v286 = a8;
                goto LABEL_1198;
              }
              if (!v130)
              {
LABEL_659:
                uint64_t v195 = a1;
                uint64_t v196 = a3;
                uint64_t v197 = a2;
                uint64_t v198 = a4;
                unsigned int v199 = a5;
                unsigned int v200 = a6;
                unsigned int v201 = a7;
                unsigned int v202 = a8;
                goto LABEL_661;
              }
              return;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              int v101 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v101 != 4) {
                  goto LABEL_633;
                }
                uint64_t v102 = a1;
                uint64_t v103 = a3;
                uint64_t v104 = a2;
                uint64_t v105 = a4;
                unsigned int v106 = a5;
                unsigned int v107 = a6;
                unsigned int v108 = a7;
                unsigned int v109 = a8;
                goto LABEL_379;
              }
              if (v101 == 4) {
                goto LABEL_1177;
              }
              if (!v101) {
                goto LABEL_1174;
              }
              return;
            case 26:
            case 250:
              int v101 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v101 == 4)
                {
                  uint64_t v102 = a1;
                  uint64_t v103 = a3;
                  uint64_t v104 = a2;
                  uint64_t v105 = a4;
                  unsigned int v106 = a5;
                  unsigned int v107 = a6;
                  unsigned int v108 = a7;
                  unsigned int v109 = a8;
LABEL_379:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v102, v103, v104, v105, v106, v107, v108, v109, a9, a10, a11, a12);
                }
                else
                {
LABEL_633:
                  if (!v101)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v101 == 4)
              {
LABEL_1177:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v101)
              {
LABEL_1174:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              int v110 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v110 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v110)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v110 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v110)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 40:
              int v257 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v257 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v257)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v257 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v257)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 41:
              int v258 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v258 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v258)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v258 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v258)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 42:
              int v259 = getCompressionCodecConfig(*v19);
              if (v17 != 1) {
                goto LABEL_1204;
              }
              if (v259 != 4) {
                goto LABEL_1070;
              }
              goto LABEL_1059;
            case 43:
              int v260 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v260 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v260)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v260 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v260)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 44:
              int v259 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v259 == 4)
                {
LABEL_1059:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else
                {
LABEL_1070:
                  if (!v259)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else
              {
LABEL_1204:
                if (v259 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v259)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 53:
            case 54:
            case 55:
              int v166 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v166 != 4) {
                  goto LABEL_1093;
                }
                uint64_t v167 = a1;
                uint64_t v168 = a3;
                uint64_t v169 = a2;
                uint64_t v170 = a4;
                unsigned int v171 = a5;
                unsigned int v172 = a6;
                unsigned int v173 = a7;
                unsigned int v174 = a8;
                goto LABEL_486;
              }
              if (v166 == 4)
              {
                uint64_t v351 = a1;
                uint64_t v352 = a3;
                uint64_t v353 = a2;
                uint64_t v354 = a4;
                unsigned int v355 = a5;
                unsigned int v356 = a6;
                unsigned int v357 = a7;
                unsigned int v358 = a8;
                goto LABEL_1318;
              }
              if (!v166) {
                goto LABEL_1441;
              }
              return;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              int v111 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v111 != 4) {
                  goto LABEL_388;
                }
                uint64_t v261 = a1;
                uint64_t v262 = a3;
                uint64_t v263 = a2;
                uint64_t v264 = a4;
                unsigned int v265 = a5;
                unsigned int v266 = a6;
                unsigned int v267 = a7;
                unsigned int v268 = a8;
                goto LABEL_1078;
              }
              if (v111 == 4)
              {
                uint64_t v327 = a1;
                uint64_t v328 = a3;
                uint64_t v329 = a2;
                uint64_t v330 = a4;
                unsigned int v331 = a5;
                unsigned int v332 = a6;
                unsigned int v333 = a7;
                unsigned int v334 = a8;
                goto LABEL_1285;
              }
              if (v111) {
                return;
              }
              goto LABEL_563;
            case 66:
              int v111 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v111 == 4)
                {
                  uint64_t v261 = a1;
                  uint64_t v262 = a3;
                  uint64_t v263 = a2;
                  uint64_t v264 = a4;
                  unsigned int v265 = a5;
                  unsigned int v266 = a6;
                  unsigned int v267 = a7;
                  unsigned int v268 = a8;
LABEL_1078:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v261, v262, v263, v264, v265, v266, v267, v268, a9, a10, a11, a12);
                }
                else
                {
LABEL_388:
                  if (!v111)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v111 == 4)
              {
                uint64_t v327 = a1;
                uint64_t v328 = a3;
                uint64_t v329 = a2;
                uint64_t v330 = a4;
                unsigned int v331 = a5;
                unsigned int v332 = a6;
                unsigned int v333 = a7;
                unsigned int v334 = a8;
LABEL_1285:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v327, v328, v329, v330, v331, v332, v333, v334, a9, a10, a11, a12);
              }
              else if (!v111)
              {
LABEL_563:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              int v35 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v35 != 4) {
                  goto LABEL_643;
                }
                uint64_t v36 = a1;
                uint64_t v37 = a3;
                uint64_t v38 = a2;
                uint64_t v39 = a4;
                unsigned int v40 = a5;
                unsigned int v41 = a6;
                unsigned int v42 = a7;
                unsigned int v43 = a8;
                goto LABEL_78;
              }
              if (v35 == 4) {
                goto LABEL_1185;
              }
              if (!v35)
              {
                uint64_t v122 = a1;
                uint64_t v123 = a3;
                uint64_t v124 = a2;
                uint64_t v125 = a4;
                unsigned int v126 = a5;
                unsigned int v127 = a6;
                unsigned int v128 = a7;
                unsigned int v129 = a8;
                goto LABEL_405;
              }
              return;
            case 80:
            case 81:
              int v35 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_642;
              }
              if (v35 == 4) {
                goto LABEL_1185;
              }
              if (v35) {
                return;
              }
              goto LABEL_1182;
            case 84:
            case 85:
              int v35 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_642:
                if (v35 == 4)
                {
                  uint64_t v36 = a1;
                  uint64_t v37 = a3;
                  uint64_t v38 = a2;
                  uint64_t v39 = a4;
                  unsigned int v40 = a5;
                  unsigned int v41 = a6;
                  unsigned int v42 = a7;
                  unsigned int v43 = a8;
LABEL_78:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
                }
                else
                {
LABEL_643:
                  if (!v35)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v35 == 4)
              {
LABEL_1185:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v35)
              {
LABEL_1182:
                uint64_t v122 = a1;
                uint64_t v123 = a3;
                uint64_t v124 = a2;
                uint64_t v125 = a4;
                unsigned int v126 = a5;
                unsigned int v127 = a6;
                unsigned int v128 = a7;
                unsigned int v129 = a8;
LABEL_405:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v122, v123, v124, v125, v126, v127, v128, v129, a9, a10, a11, a12);
              }
              return;
            case 90:
            case 91:
              int v112 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_652;
              }
              if (v112 == 4) {
                goto LABEL_1193;
              }
              if (v112) {
                return;
              }
              goto LABEL_1190;
            case 92:
              int v269 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v269 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v269)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v269 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v269)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 93:
              int v270 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v270 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v270)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v270 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v270)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 94:
            case 586:
            case 587:
            case 628:
            case 629:
              int v112 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v112 != 4) {
                  goto LABEL_653;
                }
                uint64_t v113 = a1;
                uint64_t v114 = a3;
                uint64_t v115 = a2;
                uint64_t v116 = a4;
                unsigned int v117 = a5;
                unsigned int v118 = a6;
                unsigned int v119 = a7;
                unsigned int v120 = a8;
                goto LABEL_396;
              }
              if (v112 == 4) {
                goto LABEL_1193;
              }
              if (v112) {
                return;
              }
              goto LABEL_1190;
            case 103:
            case 104:
            case 105:
              int v175 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v175 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v175)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v175 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v175)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              int v45 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v45 != 4) {
                  goto LABEL_241;
                }
                uint64_t v211 = a1;
                uint64_t v212 = a3;
                uint64_t v213 = a2;
                uint64_t v214 = a4;
                uint64_t v215 = a5;
                uint64_t v216 = a6;
                uint64_t v217 = a7;
                uint64_t v218 = a8;
                goto LABEL_671;
              }
              if (v45 == 4) {
                goto LABEL_1226;
              }
              if (!v45) {
                goto LABEL_455;
              }
              return;
            case 116:
            case 556:
              int v45 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v45 == 4)
                {
                  uint64_t v211 = a1;
                  uint64_t v212 = a3;
                  uint64_t v213 = a2;
                  uint64_t v214 = a4;
                  uint64_t v215 = a5;
                  uint64_t v216 = a6;
                  uint64_t v217 = a7;
                  uint64_t v218 = a8;
LABEL_671:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v211, v212, v213, v214, v215, v216, v217, v218, a9, a10, a11, a12);
                }
                else
                {
LABEL_241:
                  if (!v45)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v45 == 4)
              {
LABEL_1226:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v45)
              {
LABEL_455:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              int v60 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v60 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v60)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v60 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v60)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 252:
              int v166 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v166 == 4)
                {
                  uint64_t v167 = a1;
                  uint64_t v168 = a3;
                  uint64_t v169 = a2;
                  uint64_t v170 = a4;
                  unsigned int v171 = a5;
                  unsigned int v172 = a6;
                  unsigned int v173 = a7;
                  unsigned int v174 = a8;
LABEL_486:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v167, v168, v169, v170, v171, v172, v173, v174, a9, a10, a11, a12);
                }
                else
                {
LABEL_1093:
                  if (!v166)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v166 == 4)
              {
                uint64_t v351 = a1;
                uint64_t v352 = a3;
                uint64_t v353 = a2;
                uint64_t v354 = a4;
                unsigned int v355 = a5;
                unsigned int v356 = a6;
                unsigned int v357 = a7;
                unsigned int v358 = a8;
LABEL_1318:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v351, v352, v353, v354, v355, v356, v357, v358, a9, a10, a11, a12);
              }
              else if (!v166)
              {
LABEL_1441:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 253:
            case 261:
              int v130 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_692:
                if (v130 == 4)
                {
                  uint64_t v131 = a1;
                  uint64_t v132 = a3;
                  uint64_t v133 = a2;
                  uint64_t v134 = a4;
                  unsigned int v135 = a5;
                  unsigned int v136 = a6;
                  unsigned int v137 = a7;
                  unsigned int v138 = a8;
LABEL_441:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v131, v132, v133, v134, v135, v136, v137, v138, a9, a10, a11, a12);
                }
                else
                {
LABEL_693:
                  if (!v130)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v130 == 4)
              {
                uint64_t v279 = a1;
                uint64_t v280 = a3;
                uint64_t v281 = a2;
                uint64_t v282 = a4;
                unsigned int v283 = a5;
                unsigned int v284 = a6;
                unsigned int v285 = a7;
                unsigned int v286 = a8;
LABEL_1198:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v279, v280, v281, v282, v283, v284, v285, v286, a9, a10, a11, a12);
              }
              else if (!v130)
              {
                uint64_t v195 = a1;
                uint64_t v196 = a3;
                uint64_t v197 = a2;
                uint64_t v198 = a4;
                unsigned int v199 = a5;
                unsigned int v200 = a6;
                unsigned int v201 = a7;
                unsigned int v202 = a8;
LABEL_661:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v195, v196, v197, v198, v199, v200, v201, v202, a9, a10, a11, a12);
              }
              return;
            case 552:
              int v57 = getCompressionCodecConfig(*v19);
              if (v17 != 1) {
                goto LABEL_1102;
              }
              if (v57 == 4) {
                goto LABEL_1099;
              }
              goto LABEL_307;
            case 553:
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              int v57 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v57 == 4)
                {
LABEL_1099:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else
                {
LABEL_307:
                  if (!v57)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else
              {
LABEL_1102:
                if (v57 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v57)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 554:
            case 555:
              int v112 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_652:
                if (v112 == 4)
                {
                  uint64_t v113 = a1;
                  uint64_t v114 = a3;
                  uint64_t v115 = a2;
                  uint64_t v116 = a4;
                  unsigned int v117 = a5;
                  unsigned int v118 = a6;
                  unsigned int v119 = a7;
                  unsigned int v120 = a8;
LABEL_396:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v113, v114, v115, v116, v117, v118, v119, v120, a9, a10, a11, a12);
                }
                else
                {
LABEL_653:
                  if (!v112)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v112 == 4)
              {
LABEL_1193:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v112)
              {
LABEL_1190:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            default:
              return;
          }
          break;
        case 1:
          switch(v16)
          {
            case 1:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              int v48 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v48 != 4) {
                  goto LABEL_682;
                }
                uint64_t v49 = a1;
                uint64_t v50 = a3;
                uint64_t v51 = a2;
                uint64_t v52 = a4;
                unsigned int v53 = a5;
                unsigned int v54 = a6;
                unsigned int v55 = a7;
                unsigned int v56 = a8;
                goto LABEL_304;
              }
              if (v48 == 4)
              {
                uint64_t v271 = a1;
                uint64_t v272 = a3;
                uint64_t v273 = a2;
                uint64_t v274 = a4;
                unsigned int v275 = a5;
                unsigned int v276 = a6;
                unsigned int v277 = a7;
                unsigned int v278 = a8;
                goto LABEL_1121;
              }
              if (!v48)
              {
                uint64_t v176 = a1;
                uint64_t v177 = a3;
                uint64_t v178 = a2;
                uint64_t v179 = a4;
                unsigned int v180 = a5;
                unsigned int v181 = a6;
                unsigned int v182 = a7;
                unsigned int v183 = a8;
                goto LABEL_497;
              }
              return;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              int v61 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v61 != 4) {
                  goto LABEL_583;
                }
                uint64_t v62 = a1;
                uint64_t v63 = a3;
                uint64_t v64 = a2;
                uint64_t v65 = a4;
                unsigned int v66 = a5;
                unsigned int v67 = a6;
                unsigned int v68 = a7;
                unsigned int v69 = a8;
                goto LABEL_335;
              }
              if (v61 == 4) {
                goto LABEL_1136;
              }
              if (!v61) {
                goto LABEL_1133;
              }
              return;
            case 26:
            case 250:
              int v61 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v61 == 4)
                {
                  uint64_t v62 = a1;
                  uint64_t v63 = a3;
                  uint64_t v64 = a2;
                  uint64_t v65 = a4;
                  unsigned int v66 = a5;
                  unsigned int v67 = a6;
                  unsigned int v68 = a7;
                  unsigned int v69 = a8;
LABEL_335:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v62, v63, v64, v65, v66, v67, v68, v69, a9, a10, a11, a12);
                }
                else
                {
LABEL_583:
                  if (!v61)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v61 == 4)
              {
LABEL_1136:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v61)
              {
LABEL_1133:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              int v70 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v70 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v70)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v70 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v70)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 40:
              int v219 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v219 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v219)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v219 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v219)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 41:
              int v220 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v220 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v220)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v220 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v220)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 42:
              int v221 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v221 != 4) {
                  goto LABEL_951;
                }
                uint64_t v222 = a1;
                uint64_t v223 = a3;
                uint64_t v224 = a2;
                uint64_t v225 = a4;
                unsigned int v226 = a5;
                unsigned int v227 = a6;
                unsigned int v228 = a7;
                unsigned int v229 = a8;
                goto LABEL_942;
              }
              if (v221 == 4) {
                goto LABEL_1468;
              }
              if (!v221) {
                goto LABEL_1345;
              }
              return;
            case 43:
              int v230 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v230 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v230)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v230 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v230)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 44:
              int v221 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v221 == 4)
                {
                  uint64_t v222 = a1;
                  uint64_t v223 = a3;
                  uint64_t v224 = a2;
                  uint64_t v225 = a4;
                  unsigned int v226 = a5;
                  unsigned int v227 = a6;
                  unsigned int v228 = a7;
                  unsigned int v229 = a8;
LABEL_942:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v222, v223, v224, v225, v226, v227, v228, v229, a9, a10, a11, a12);
                }
                else
                {
LABEL_951:
                  if (!v221)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v221 == 4)
              {
LABEL_1468:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v221)
              {
LABEL_1345:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 53:
            case 54:
            case 55:
              int v147 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v147 != 4) {
                  goto LABEL_984;
                }
                uint64_t v148 = a1;
                uint64_t v149 = a3;
                uint64_t v150 = a2;
                uint64_t v151 = a4;
                unsigned int v152 = a5;
                unsigned int v153 = a6;
                unsigned int v154 = a7;
                unsigned int v155 = a8;
                goto LABEL_472;
              }
              if (v147 == 4)
              {
                uint64_t v335 = a1;
                uint64_t v336 = a3;
                uint64_t v337 = a2;
                uint64_t v338 = a4;
                unsigned int v339 = a5;
                unsigned int v340 = a6;
                uint64_t v341 = a7;
                unsigned int v342 = a8;
                goto LABEL_1312;
              }
              if (!v147) {
                goto LABEL_1370;
              }
              return;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              int v71 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v71 != 4) {
                  goto LABEL_344;
                }
                uint64_t v231 = a1;
                uint64_t v232 = a3;
                uint64_t v233 = a2;
                uint64_t v234 = a4;
                unsigned int v235 = a5;
                unsigned int v236 = a6;
                unsigned int v237 = a7;
                unsigned int v238 = a8;
                goto LABEL_959;
              }
              if (v71 == 4)
              {
                uint64_t v303 = a1;
                uint64_t v304 = a3;
                uint64_t v305 = a2;
                uint64_t v306 = a4;
                unsigned int v307 = a5;
                unsigned int v308 = a6;
                unsigned int v309 = a7;
                unsigned int v310 = a8;
                goto LABEL_1270;
              }
              if (!v71) {
                goto LABEL_529;
              }
              return;
            case 66:
              int v71 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v71 == 4)
                {
                  uint64_t v231 = a1;
                  uint64_t v232 = a3;
                  uint64_t v233 = a2;
                  uint64_t v234 = a4;
                  unsigned int v235 = a5;
                  unsigned int v236 = a6;
                  unsigned int v237 = a7;
                  unsigned int v238 = a8;
LABEL_959:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v231, v232, v233, v234, v235, v236, v237, v238, a9, a10, a11, a12);
                }
                else
                {
LABEL_344:
                  if (!v71)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v71 == 4)
              {
                uint64_t v303 = a1;
                uint64_t v304 = a3;
                uint64_t v305 = a2;
                uint64_t v306 = a4;
                unsigned int v307 = a5;
                unsigned int v308 = a6;
                unsigned int v309 = a7;
                unsigned int v310 = a8;
LABEL_1270:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v303, v304, v305, v306, v307, v308, v309, v310, a9, a10, a11, a12);
              }
              else if (!v71)
              {
LABEL_529:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              int v24 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v24 != 4) {
                  goto LABEL_593;
                }
                uint64_t v25 = a1;
                uint64_t v26 = a3;
                uint64_t v27 = a2;
                uint64_t v28 = a4;
                unsigned int v29 = a5;
                unsigned int v30 = a6;
                unsigned int v31 = a7;
                unsigned int v32 = a8;
                goto LABEL_38;
              }
              if (v24 == 4) {
                goto LABEL_1142;
              }
              if (!v24) {
                goto LABEL_408;
              }
              return;
            case 80:
            case 81:
              int v24 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_592;
              }
              if (v24 == 4) {
                goto LABEL_1142;
              }
              if (!v24) {
                goto LABEL_408;
              }
              return;
            case 84:
            case 85:
              int v24 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_592:
                if (v24 == 4)
                {
                  uint64_t v25 = a1;
                  uint64_t v26 = a3;
                  uint64_t v27 = a2;
                  uint64_t v28 = a4;
                  unsigned int v29 = a5;
                  unsigned int v30 = a6;
                  unsigned int v31 = a7;
                  unsigned int v32 = a8;
LABEL_38:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
                }
                else
                {
LABEL_593:
                  if (!v24)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v24 == 4)
              {
LABEL_1142:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v24)
              {
LABEL_408:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 90:
            case 91:
              int v72 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_602;
              }
              if (v72 == 4) {
                goto LABEL_1150;
              }
              if (!v72) {
                goto LABEL_1147;
              }
              return;
            case 92:
              int v239 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v239 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v239)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v239 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v239)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 93:
              int v240 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v240 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v240)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v240 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v240)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 94:
            case 586:
            case 587:
            case 628:
            case 629:
              int v72 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v72 != 4) {
                  goto LABEL_603;
                }
                uint64_t v73 = a1;
                uint64_t v74 = a3;
                uint64_t v75 = a2;
                uint64_t v76 = a4;
                unsigned int v77 = a5;
                unsigned int v78 = a6;
                unsigned int v79 = a7;
                unsigned int v80 = a8;
                goto LABEL_352;
              }
              if (v72 == 4) {
                goto LABEL_1150;
              }
              if (!v72) {
                goto LABEL_1147;
              }
              return;
            case 103:
              int v241 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v241 != 4) {
                  goto LABEL_1211;
                }
                uint64_t v242 = a1;
                uint64_t v243 = a3;
                uint64_t v244 = a2;
                uint64_t v245 = a4;
                uint64_t v246 = a5;
                uint64_t v247 = a6;
                uint64_t v248 = a7;
                uint64_t v249 = a8;
                goto LABEL_976;
              }
              if (v241 == 4) {
                goto LABEL_1365;
              }
              if (!v241) {
                goto LABEL_1446;
              }
              return;
            case 104:
              int v241 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v241 != 4) {
                  goto LABEL_1211;
                }
                goto LABEL_979;
              }
              if (v241 != 4) {
                goto LABEL_1445;
              }
LABEL_1365:
              uint64_t v359 = a1;
              uint64_t v360 = a3;
              uint64_t v361 = a2;
              uint64_t v362 = a4;
              uint64_t v363 = a5;
              uint64_t v364 = a6;
              uint64_t v365 = a7;
              uint64_t v366 = a8;
              goto LABEL_1367;
            case 105:
              int v241 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v241 == 4)
                {
LABEL_979:
                  uint64_t v242 = a1;
                  uint64_t v243 = a3;
                  uint64_t v244 = a2;
                  uint64_t v245 = a4;
                  uint64_t v246 = a5;
                  uint64_t v247 = a6;
                  uint64_t v248 = a7;
                  uint64_t v249 = a8;
LABEL_976:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v242, v243, v244, v245, v246, v247, v248, v249, a9, a10, a11, a12);
                }
                else
                {
LABEL_1211:
                  if (!v241)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v241 == 4)
              {
                uint64_t v359 = a1;
                uint64_t v360 = a3;
                uint64_t v361 = a2;
                uint64_t v362 = a4;
                uint64_t v363 = a5;
                uint64_t v364 = a6;
                uint64_t v365 = a7;
                uint64_t v366 = a8;
LABEL_1367:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v359, v360, v361, v362, v363, v364, v365, v366, a9, a10, a11, a12);
              }
              else
              {
LABEL_1445:
                if (!v241)
                {
LABEL_1446:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              int v44 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v44 != 4) {
                  goto LABEL_235;
                }
                uint64_t v203 = a1;
                uint64_t v204 = a3;
                uint64_t v205 = a2;
                uint64_t v206 = a4;
                uint64_t v207 = a5;
                uint64_t v208 = a6;
                uint64_t v209 = a7;
                uint64_t v210 = a8;
                goto LABEL_666;
              }
              if (v44 == 4) {
                goto LABEL_1220;
              }
              if (!v44)
              {
                uint64_t v139 = a1;
                uint64_t v140 = a3;
                uint64_t v141 = a2;
                uint64_t v142 = a4;
                uint64_t v143 = a5;
                uint64_t v144 = a6;
                uint64_t v145 = a7;
                uint64_t v146 = a8;
                goto LABEL_452;
              }
              break;
            case 116:
            case 556:
              int v44 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v44 == 4)
                {
                  uint64_t v203 = a1;
                  uint64_t v204 = a3;
                  uint64_t v205 = a2;
                  uint64_t v206 = a4;
                  uint64_t v207 = a5;
                  uint64_t v208 = a6;
                  uint64_t v209 = a7;
                  uint64_t v210 = a8;
LABEL_666:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v203, v204, v205, v206, v207, v208, v209, v210, a9, a10, a11, a12);
                }
                else
                {
LABEL_235:
                  if (!v44)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v44 == 4)
              {
LABEL_1220:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v44)
              {
                uint64_t v139 = a1;
                uint64_t v140 = a3;
                uint64_t v141 = a2;
                uint64_t v142 = a4;
                uint64_t v143 = a5;
                uint64_t v144 = a6;
                uint64_t v145 = a7;
                uint64_t v146 = a8;
LABEL_452:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v139, v140, v141, v142, v143, v144, v145, v146, a9, a10, a11, a12);
              }
              break;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              int v58 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v58 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v58)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v58 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v58)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 252:
              int v147 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v147 == 4)
                {
                  uint64_t v148 = a1;
                  uint64_t v149 = a3;
                  uint64_t v150 = a2;
                  uint64_t v151 = a4;
                  unsigned int v152 = a5;
                  unsigned int v153 = a6;
                  unsigned int v154 = a7;
                  unsigned int v155 = a8;
LABEL_472:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v148, v149, v150, v151, v152, v153, v154, v155, a9, a10, a11, a12);
                }
                else
                {
LABEL_984:
                  if (!v147)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v147 == 4)
              {
                uint64_t v335 = a1;
                uint64_t v336 = a3;
                uint64_t v337 = a2;
                uint64_t v338 = a4;
                unsigned int v339 = a5;
                unsigned int v340 = a6;
                uint64_t v341 = a7;
                unsigned int v342 = a8;
LABEL_1312:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v335, v336, v337, v338, v339, v340, v341, v342, a9, a10, a11, a12);
              }
              else if (!v147)
              {
LABEL_1370:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 253:
            case 261:
              int v48 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v48 == 4)
                {
                  uint64_t v49 = a1;
                  uint64_t v50 = a3;
                  uint64_t v51 = a2;
                  uint64_t v52 = a4;
                  unsigned int v53 = a5;
                  unsigned int v54 = a6;
                  unsigned int v55 = a7;
                  unsigned int v56 = a8;
LABEL_304:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12);
                }
                else
                {
LABEL_682:
                  if (!v48)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v48 == 4)
              {
                uint64_t v271 = a1;
                uint64_t v272 = a3;
                uint64_t v273 = a2;
                uint64_t v274 = a4;
                unsigned int v275 = a5;
                unsigned int v276 = a6;
                unsigned int v277 = a7;
                unsigned int v278 = a8;
LABEL_1121:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v271, v272, v273, v274, v275, v276, v277, v278, a9, a10, a11, a12);
              }
              else if (!v48)
              {
                uint64_t v176 = a1;
                uint64_t v177 = a3;
                uint64_t v178 = a2;
                uint64_t v179 = a4;
                unsigned int v180 = a5;
                unsigned int v181 = a6;
                unsigned int v182 = a7;
                unsigned int v183 = a8;
LABEL_497:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(v176, v177, v178, v179, v180, v181, v182, v183, a9, a10, a11, a12);
              }
              return;
            case 552:
            case 553:
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              int v46 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v46 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v46)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v46 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v46)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 554:
            case 555:
              int v72 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_602:
                if (v72 == 4)
                {
                  uint64_t v73 = a1;
                  uint64_t v74 = a3;
                  uint64_t v75 = a2;
                  uint64_t v76 = a4;
                  unsigned int v77 = a5;
                  unsigned int v78 = a6;
                  unsigned int v79 = a7;
                  unsigned int v80 = a8;
LABEL_352:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, a12);
                }
                else
                {
LABEL_603:
                  if (!v72)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v72 == 4)
              {
LABEL_1150:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v72)
              {
LABEL_1147:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            default:
              return;
          }
          break;
      }
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::readCompressedRegion3D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  int v19 = a17;
  uint64_t v21 = a15;
  uint64_t v20 = a16;
  uint64_t v22 = a13;
  int v23 = a11;
  uint64_t v24 = a12;
  int v25 = a10;
  int v27 = *(unsigned __int8 *)(a1 + 57);
  uint64_t v28 = a2;
  if (v27 == 3)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int CompressionCodecConfig = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v32 = a17;
          if (a12)
          {
            if (CompressionCodecConfig == 3)
            {
              int v33 = a10;
              int v34 = a11;
              uint64_t v35 = a13;
              uint64_t v36 = a15;
              uint64_t v37 = a16;
              uint64_t v38 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v38 + a9 * v36, a4 + a9 * v37, a5, a6, a7, a8, v33, v34, v35, v32);
                int v33 = a10;
                int v34 = a11;
                uint64_t v35 = a13;
                uint64_t v36 = a15;
                uint64_t v37 = a16;
                uint64_t v38 = v28;
                int v32 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xA:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v47 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v48 = a17;
          if (a12)
          {
            if (v47 == 3)
            {
              int v49 = a10;
              int v50 = a11;
              uint64_t v51 = a13;
              uint64_t v52 = a15;
              uint64_t v53 = a16;
              uint64_t v54 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v54 + a9 * v52, a4 + a9 * v53, a5, a6, a7, a8, v49, v50, v51, v48);
                int v49 = a10;
                int v50 = a11;
                uint64_t v51 = a13;
                uint64_t v52 = a15;
                uint64_t v53 = a16;
                uint64_t v54 = v28;
                int v48 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xB:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v55 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v56 = a17;
          if (a12)
          {
            if (v55 == 3)
            {
              int v57 = a10;
              int v58 = a11;
              uint64_t v59 = a13;
              uint64_t v60 = a15;
              uint64_t v61 = a16;
              uint64_t v62 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v62 + a9 * v60, a4 + a9 * v61, a5, a6, a7, a8, v57, v58, v59, v56);
                int v57 = a10;
                int v58 = a11;
                uint64_t v59 = a13;
                uint64_t v60 = a15;
                uint64_t v61 = a16;
                uint64_t v62 = v28;
                int v56 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xC:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v63 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v64 = a17;
          if (a12)
          {
            if (v63 == 3)
            {
              int v65 = a10;
              int v66 = a11;
              uint64_t v67 = a13;
              uint64_t v68 = a15;
              uint64_t v69 = a16;
              uint64_t v70 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v70 + a9 * v68, a4 + a9 * v69, a5, a6, a7, a8, v65, v66, v67, v64);
                int v65 = a10;
                int v66 = a11;
                uint64_t v67 = a13;
                uint64_t v68 = a15;
                uint64_t v69 = a16;
                uint64_t v70 = v28;
                int v64 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xD:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v71 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v72 = a17;
          if (a12)
          {
            if (v71 == 3)
            {
              int v73 = a10;
              int v74 = a11;
              uint64_t v75 = a13;
              uint64_t v76 = a15;
              uint64_t v77 = a16;
              uint64_t v78 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v78 + a9 * v76, a4 + a9 * v77, a5, a6, a7, a8, v73, v74, v75, v72);
                int v73 = a10;
                int v74 = a11;
                uint64_t v75 = a13;
                uint64_t v76 = a15;
                uint64_t v77 = a16;
                uint64_t v78 = v28;
                int v72 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xE:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v79 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v80 = a17;
          if (a12)
          {
            if (v79 == 3)
            {
              int v81 = a10;
              int v82 = a11;
              uint64_t v83 = a13;
              uint64_t v84 = a15;
              uint64_t v85 = a16;
              uint64_t v86 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v86 + a9 * v84, a4 + a9 * v85, a5, a6, a7, a8, v81, v82, v83, v80);
                int v81 = a10;
                int v82 = a11;
                uint64_t v83 = a13;
                uint64_t v84 = a15;
                uint64_t v85 = a16;
                uint64_t v86 = v28;
                int v80 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x14:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v87 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v88 = a17;
          if (a12)
          {
            if (v87 == 3)
            {
              int v89 = a10;
              int v90 = a11;
              uint64_t v91 = a13;
              uint64_t v92 = a15;
              uint64_t v93 = a16;
              uint64_t v94 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v94 + a9 * v92, a4 + a9 * v93, a5, a6, a7, a8, v89, v90, v91, v88);
                int v89 = a10;
                int v90 = a11;
                uint64_t v91 = a13;
                uint64_t v92 = a15;
                uint64_t v93 = a16;
                uint64_t v94 = v28;
                int v88 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x16:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v95 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v96 = a17;
          if (a12)
          {
            if (v95 == 3)
            {
              int v97 = a10;
              int v98 = a11;
              uint64_t v99 = a13;
              uint64_t v100 = a15;
              uint64_t v101 = a16;
              uint64_t v102 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v102 + a9 * v100, a4 + a9 * v101, a5, a6, a7, a8, v97, v98, v99, v96);
                int v97 = a10;
                int v98 = a11;
                uint64_t v99 = a13;
                uint64_t v100 = a15;
                uint64_t v101 = a16;
                uint64_t v102 = v28;
                int v96 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x17:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v103 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v104 = a17;
          if (a12)
          {
            if (v103 == 3)
            {
              int v105 = a10;
              int v106 = a11;
              uint64_t v107 = a13;
              uint64_t v108 = a15;
              uint64_t v109 = a16;
              uint64_t v110 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v110 + a9 * v108, a4 + a9 * v109, a5, a6, a7, a8, v105, v106, v107, v104);
                int v105 = a10;
                int v106 = a11;
                uint64_t v107 = a13;
                uint64_t v108 = a15;
                uint64_t v109 = a16;
                uint64_t v110 = v28;
                int v104 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x18:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v111 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v112 = a17;
          if (a12)
          {
            if (v111 == 3)
            {
              int v113 = a10;
              int v114 = a11;
              uint64_t v115 = a13;
              uint64_t v116 = a15;
              uint64_t v117 = a16;
              uint64_t v118 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v118 + a9 * v116, a4 + a9 * v117, a5, a6, a7, a8, v113, v114, v115, v112);
                int v113 = a10;
                int v114 = a11;
                uint64_t v115 = a13;
                uint64_t v116 = a15;
                uint64_t v117 = a16;
                uint64_t v118 = v28;
                int v112 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x19:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v119 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v120 = a17;
          if (a12)
          {
            if (v119 == 3)
            {
              int v121 = a10;
              int v122 = a11;
              uint64_t v123 = a13;
              uint64_t v124 = a15;
              uint64_t v125 = a16;
              uint64_t v126 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v126 + a9 * v124, a4 + a9 * v125, a5, a6, a7, a8, v121, v122, v123, v120);
                int v121 = a10;
                int v122 = a11;
                uint64_t v123 = a13;
                uint64_t v124 = a15;
                uint64_t v125 = a16;
                uint64_t v126 = v28;
                int v120 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x1E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v127 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v128 = a17;
          if (a12)
          {
            if (v127 == 3)
            {
              int v129 = a10;
              int v130 = a11;
              uint64_t v131 = a13;
              uint64_t v132 = a15;
              uint64_t v133 = a16;
              uint64_t v134 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v134 + a9 * v132, a4 + a9 * v133, a5, a6, a7, a8, v129, v130, v131, v128);
                int v129 = a10;
                int v130 = a11;
                uint64_t v131 = a13;
                uint64_t v132 = a15;
                uint64_t v133 = a16;
                uint64_t v134 = v28;
                int v128 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x1F:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v135 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v136 = a17;
          if (a12)
          {
            if (v135 == 3)
            {
              int v137 = a10;
              int v138 = a11;
              uint64_t v139 = a13;
              uint64_t v140 = a15;
              uint64_t v141 = a16;
              uint64_t v142 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v142 + a9 * v140, a4 + a9 * v141, a5, a6, a7, a8, v137, v138, v139, v136);
                int v137 = a10;
                int v138 = a11;
                uint64_t v139 = a13;
                uint64_t v140 = a15;
                uint64_t v141 = a16;
                uint64_t v142 = v28;
                int v136 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x20:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v143 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v144 = a17;
          if (a12)
          {
            if (v143 == 3)
            {
              int v145 = a10;
              int v146 = a11;
              uint64_t v147 = a13;
              uint64_t v148 = a15;
              uint64_t v149 = a16;
              uint64_t v150 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v150 + a9 * v148, a4 + a9 * v149, a5, a6, a7, a8, v145, v146, v147, v144);
                int v145 = a10;
                int v146 = a11;
                uint64_t v147 = a13;
                uint64_t v148 = a15;
                uint64_t v149 = a16;
                uint64_t v150 = v28;
                int v144 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x21:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v151 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v152 = a17;
          if (a12)
          {
            if (v151 == 3)
            {
              int v153 = a10;
              int v154 = a11;
              uint64_t v155 = a13;
              uint64_t v156 = a15;
              uint64_t v157 = a16;
              uint64_t v158 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v158 + a9 * v156, a4 + a9 * v157, a5, a6, a7, a8, v153, v154, v155, v152);
                int v153 = a10;
                int v154 = a11;
                uint64_t v155 = a13;
                uint64_t v156 = a15;
                uint64_t v157 = a16;
                uint64_t v158 = v28;
                int v152 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x22:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v159 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v160 = a17;
          if (a12)
          {
            if (v159 == 3)
            {
              int v161 = a10;
              int v162 = a11;
              uint64_t v163 = a13;
              uint64_t v164 = a15;
              uint64_t v165 = a16;
              uint64_t v166 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v166 + a9 * v164, a4 + a9 * v165, a5, a6, a7, a8, v161, v162, v163, v160);
                int v161 = a10;
                int v162 = a11;
                uint64_t v163 = a13;
                uint64_t v164 = a15;
                uint64_t v165 = a16;
                uint64_t v166 = v28;
                int v160 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x35:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v167 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v168 = a17;
          if (a12)
          {
            if (v167 == 3)
            {
              int v169 = a10;
              int v170 = a11;
              uint64_t v171 = a13;
              uint64_t v172 = a15;
              uint64_t v173 = a16;
              uint64_t v174 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v174 + a9 * v172, a4 + a9 * v173, a5, a6, a7, a8, v169, v170, v171, v168);
                int v169 = a10;
                int v170 = a11;
                uint64_t v171 = a13;
                uint64_t v172 = a15;
                uint64_t v173 = a16;
                uint64_t v174 = v28;
                int v168 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x36:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v175 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v176 = a17;
          if (a12)
          {
            if (v175 == 3)
            {
              int v177 = a10;
              int v178 = a11;
              uint64_t v179 = a13;
              uint64_t v180 = a15;
              uint64_t v181 = a16;
              uint64_t v182 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v182 + a9 * v180, a4 + a9 * v181, a5, a6, a7, a8, v177, v178, v179, v176);
                int v177 = a10;
                int v178 = a11;
                uint64_t v179 = a13;
                uint64_t v180 = a15;
                uint64_t v181 = a16;
                uint64_t v182 = v28;
                int v176 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x37:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v183 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v184 = a17;
          if (a12)
          {
            if (v183 == 3)
            {
              int v185 = a10;
              int v186 = a11;
              uint64_t v187 = a13;
              uint64_t v188 = a15;
              uint64_t v189 = a16;
              uint64_t v190 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v190 + a9 * v188, a4 + a9 * v189, a5, a6, a7, a8, v185, v186, v187, v184);
                int v185 = a10;
                int v186 = a11;
                uint64_t v187 = a13;
                uint64_t v188 = a15;
                uint64_t v189 = a16;
                uint64_t v190 = v28;
                int v184 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x3C:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v191 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v192 = a17;
          if (a12)
          {
            if (v191 == 3)
            {
              int v193 = a10;
              int v194 = a11;
              uint64_t v195 = a13;
              uint64_t v196 = a15;
              uint64_t v197 = a16;
              uint64_t v198 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v198 + a9 * v196, a4 + a9 * v197, a5, a6, a7, a8, v193, v194, v195, v192);
                int v193 = a10;
                int v194 = a11;
                uint64_t v195 = a13;
                uint64_t v196 = a15;
                uint64_t v197 = a16;
                uint64_t v198 = v28;
                int v192 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x3E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v199 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v200 = a17;
          if (a12)
          {
            if (v199 == 3)
            {
              int v201 = a10;
              int v202 = a11;
              uint64_t v203 = a13;
              uint64_t v204 = a15;
              uint64_t v205 = a16;
              uint64_t v206 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v206 + a9 * v204, a4 + a9 * v205, a5, a6, a7, a8, v201, v202, v203, v200);
                int v201 = a10;
                int v202 = a11;
                uint64_t v203 = a13;
                uint64_t v204 = a15;
                uint64_t v205 = a16;
                uint64_t v206 = v28;
                int v200 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x3F:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v207 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v208 = a17;
          if (a12)
          {
            if (v207 == 3)
            {
              int v209 = a10;
              int v210 = a11;
              uint64_t v211 = a13;
              uint64_t v212 = a15;
              uint64_t v213 = a16;
              uint64_t v214 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v214 + a9 * v212, a4 + a9 * v213, a5, a6, a7, a8, v209, v210, v211, v208);
                int v209 = a10;
                int v210 = a11;
                uint64_t v211 = a13;
                uint64_t v212 = a15;
                uint64_t v213 = a16;
                uint64_t v214 = v28;
                int v208 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x40:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v215 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v216 = a17;
          if (a12)
          {
            if (v215 == 3)
            {
              int v217 = a10;
              int v218 = a11;
              uint64_t v219 = a13;
              uint64_t v220 = a15;
              uint64_t v221 = a16;
              uint64_t v222 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v222 + a9 * v220, a4 + a9 * v221, a5, a6, a7, a8, v217, v218, v219, v216);
                int v217 = a10;
                int v218 = a11;
                uint64_t v219 = a13;
                uint64_t v220 = a15;
                uint64_t v221 = a16;
                uint64_t v222 = v28;
                int v216 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x41:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v223 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v224 = a17;
          if (a12)
          {
            if (v223 == 3)
            {
              int v225 = a10;
              int v226 = a11;
              uint64_t v227 = a13;
              uint64_t v228 = a15;
              uint64_t v229 = a16;
              uint64_t v230 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v230 + a9 * v228, a4 + a9 * v229, a5, a6, a7, a8, v225, v226, v227, v224);
                int v225 = a10;
                int v226 = a11;
                uint64_t v227 = a13;
                uint64_t v228 = a15;
                uint64_t v229 = a16;
                uint64_t v230 = v28;
                int v224 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x46:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v231 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v232 = a17;
          if (a12)
          {
            if (v231 == 3)
            {
              int v233 = a10;
              int v234 = a11;
              uint64_t v235 = a13;
              uint64_t v236 = a15;
              uint64_t v237 = a16;
              uint64_t v238 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v238 + a9 * v236, a4 + a9 * v237, a5, a6, a7, a8, v233, v234, v235, v232);
                int v233 = a10;
                int v234 = a11;
                uint64_t v235 = a13;
                uint64_t v236 = a15;
                uint64_t v237 = a16;
                uint64_t v238 = v28;
                int v232 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x47:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v239 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v240 = a17;
          if (a12)
          {
            if (v239 == 3)
            {
              int v241 = a10;
              int v242 = a11;
              uint64_t v243 = a13;
              uint64_t v244 = a15;
              uint64_t v245 = a16;
              uint64_t v246 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v246 + a9 * v244, a4 + a9 * v245, a5, a6, a7, a8, v241, v242, v243, v240);
                int v241 = a10;
                int v242 = a11;
                uint64_t v243 = a13;
                uint64_t v244 = a15;
                uint64_t v245 = a16;
                uint64_t v246 = v28;
                int v240 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x48:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v247 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v248 = a17;
          if (a12)
          {
            if (v247 == 3)
            {
              int v249 = a10;
              int v250 = a11;
              uint64_t v251 = a13;
              uint64_t v252 = a15;
              uint64_t v253 = a16;
              uint64_t v254 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v254 + a9 * v252, a4 + a9 * v253, a5, a6, a7, a8, v249, v250, v251, v248);
                int v249 = a10;
                int v250 = a11;
                uint64_t v251 = a13;
                uint64_t v252 = a15;
                uint64_t v253 = a16;
                uint64_t v254 = v28;
                int v248 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x49:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v255 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v256 = a17;
          if (a12)
          {
            if (v255 == 3)
            {
              int v257 = a10;
              int v258 = a11;
              uint64_t v259 = a13;
              uint64_t v260 = a15;
              uint64_t v261 = a16;
              uint64_t v262 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v262 + a9 * v260, a4 + a9 * v261, a5, a6, a7, a8, v257, v258, v259, v256);
                int v257 = a10;
                int v258 = a11;
                uint64_t v259 = a13;
                uint64_t v260 = a15;
                uint64_t v261 = a16;
                uint64_t v262 = v28;
                int v256 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x4A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v263 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v264 = a17;
          if (a12)
          {
            if (v263 == 3)
            {
              int v265 = a10;
              int v266 = a11;
              uint64_t v267 = a13;
              uint64_t v268 = a15;
              uint64_t v269 = a16;
              uint64_t v270 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v270 + a9 * v268, a4 + a9 * v269, a5, a6, a7, a8, v265, v266, v267, v264);
                int v265 = a10;
                int v266 = a11;
                uint64_t v267 = a13;
                uint64_t v268 = a15;
                uint64_t v269 = a16;
                uint64_t v270 = v28;
                int v264 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x50:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v271 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v272 = a17;
          if (a12)
          {
            if (v271 == 3)
            {
              int v273 = a10;
              int v274 = a11;
              uint64_t v275 = a13;
              uint64_t v276 = a15;
              uint64_t v277 = a16;
              uint64_t v278 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v278 + a9 * v276, a4 + a9 * v277, a5, a6, a7, a8, v273, v274, v275, v272);
                int v273 = a10;
                int v274 = a11;
                uint64_t v275 = a13;
                uint64_t v276 = a15;
                uint64_t v277 = a16;
                uint64_t v278 = v28;
                int v272 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x51:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v279 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v280 = a17;
          if (a12)
          {
            if (v279 == 3)
            {
              int v281 = a10;
              int v282 = a11;
              uint64_t v283 = a13;
              uint64_t v284 = a15;
              uint64_t v285 = a16;
              uint64_t v286 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v286 + a9 * v284, a4 + a9 * v285, a5, a6, a7, a8, v281, v282, v283, v280);
                int v281 = a10;
                int v282 = a11;
                uint64_t v283 = a13;
                uint64_t v284 = a15;
                uint64_t v285 = a16;
                uint64_t v286 = v28;
                int v280 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x54:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v287 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v288 = a17;
          if (a12)
          {
            if (v287 == 3)
            {
              int v289 = a10;
              int v290 = a11;
              uint64_t v291 = a13;
              uint64_t v292 = a15;
              uint64_t v293 = a16;
              uint64_t v294 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v294 + a9 * v292, a4 + a9 * v293, a5, a6, a7, a8, v289, v290, v291, v288);
                int v289 = a10;
                int v290 = a11;
                uint64_t v291 = a13;
                uint64_t v292 = a15;
                uint64_t v293 = a16;
                uint64_t v294 = v28;
                int v288 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x55:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v295 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v296 = a17;
          if (a12)
          {
            if (v295 == 3)
            {
              int v297 = a10;
              int v298 = a11;
              uint64_t v299 = a13;
              uint64_t v300 = a15;
              uint64_t v301 = a16;
              uint64_t v302 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v302 + a9 * v300, a4 + a9 * v301, a5, a6, a7, a8, v297, v298, v299, v296);
                int v297 = a10;
                int v298 = a11;
                uint64_t v299 = a13;
                uint64_t v300 = a15;
                uint64_t v301 = a16;
                uint64_t v302 = v28;
                int v296 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x5A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v303 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v304 = a17;
          if (a12)
          {
            if (v303 == 3)
            {
              int v305 = a10;
              int v306 = a11;
              uint64_t v307 = a13;
              uint64_t v308 = a15;
              uint64_t v309 = a16;
              uint64_t v310 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v310 + a9 * v308, a4 + a9 * v309, a5, a6, a7, a8, v305, v306, v307, v304);
                int v305 = a10;
                int v306 = a11;
                uint64_t v307 = a13;
                uint64_t v308 = a15;
                uint64_t v309 = a16;
                uint64_t v310 = v28;
                int v304 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x5B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v311 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v312 = a17;
          if (a12)
          {
            if (v311 == 3)
            {
              int v313 = a10;
              int v314 = a11;
              uint64_t v315 = a13;
              uint64_t v316 = a15;
              uint64_t v317 = a16;
              uint64_t v318 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v318 + a9 * v316, a4 + a9 * v317, a5, a6, a7, a8, v313, v314, v315, v312);
                int v313 = a10;
                int v314 = a11;
                uint64_t v315 = a13;
                uint64_t v316 = a15;
                uint64_t v317 = a16;
                uint64_t v318 = v28;
                int v312 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x5E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v319 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v320 = a17;
          if (a12)
          {
            if (v319 == 3)
            {
              int v321 = a10;
              int v322 = a11;
              uint64_t v323 = a13;
              uint64_t v324 = a15;
              uint64_t v325 = a16;
              uint64_t v326 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v326 + a9 * v324, a4 + a9 * v325, a5, a6, a7, a8, v321, v322, v323, v320);
                int v321 = a10;
                int v322 = a11;
                uint64_t v323 = a13;
                uint64_t v324 = a15;
                uint64_t v325 = a16;
                uint64_t v326 = v28;
                int v320 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x67:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v327 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v328 = a17;
          if (a12)
          {
            if (v327 == 3)
            {
              int v329 = a10;
              int v330 = a11;
              uint64_t v331 = a13;
              uint64_t v332 = a15;
              uint64_t v333 = a16;
              uint64_t v334 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v334 + a9 * v332, a4 + a9 * v333, a5, a6, a7, a8, v329, v330, v331, v328);
                int v329 = a10;
                int v330 = a11;
                uint64_t v331 = a13;
                uint64_t v332 = a15;
                uint64_t v333 = a16;
                uint64_t v334 = v28;
                int v328 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x68:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v335 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v336 = a17;
          if (a12)
          {
            if (v335 == 3)
            {
              int v337 = a10;
              int v338 = a11;
              uint64_t v339 = a13;
              uint64_t v340 = a15;
              uint64_t v341 = a16;
              uint64_t v342 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v342 + a9 * v340, a4 + a9 * v341, a5, a6, a7, a8, v337, v338, v339, v336);
                int v337 = a10;
                int v338 = a11;
                uint64_t v339 = a13;
                uint64_t v340 = a15;
                uint64_t v341 = a16;
                uint64_t v342 = v28;
                int v336 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x69:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v343 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v344 = a17;
          if (a12)
          {
            if (v343 == 3)
            {
              int v345 = a10;
              int v346 = a11;
              uint64_t v347 = a13;
              uint64_t v348 = a15;
              uint64_t v349 = a16;
              uint64_t v350 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v350 + a9 * v348, a4 + a9 * v349, a5, a6, a7, a8, v345, v346, v347, v344);
                int v345 = a10;
                int v346 = a11;
                uint64_t v347 = a13;
                uint64_t v348 = a15;
                uint64_t v349 = a16;
                uint64_t v350 = v28;
                int v344 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x6E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v351 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v352 = a17;
          if (a12)
          {
            if (v351 == 3)
            {
              int v353 = a10;
              int v354 = a11;
              uint64_t v355 = a13;
              uint64_t v356 = a15;
              uint64_t v357 = a16;
              uint64_t v358 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v358 + a9 * v356, a4 + a9 * v357, a5, a6, a7, a8, v353, v354, v355, v352);
                int v353 = a10;
                int v354 = a11;
                uint64_t v355 = a13;
                uint64_t v356 = a15;
                uint64_t v357 = a16;
                uint64_t v358 = v28;
                int v352 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x70:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v359 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v360 = a17;
          if (a12)
          {
            if (v359 == 3)
            {
              int v361 = a10;
              int v362 = a11;
              uint64_t v363 = a13;
              uint64_t v364 = a15;
              uint64_t v365 = a16;
              uint64_t v366 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v366 + a9 * v364, a4 + a9 * v365, a5, a6, a7, a8, v361, v362, v363, v360);
                int v361 = a10;
                int v362 = a11;
                uint64_t v363 = a13;
                uint64_t v364 = a15;
                uint64_t v365 = a16;
                uint64_t v366 = v28;
                int v360 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x71:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v367 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v368 = a17;
          if (a12)
          {
            if (v367 == 3)
            {
              int v369 = a10;
              int v370 = a11;
              uint64_t v371 = a13;
              uint64_t v372 = a15;
              uint64_t v373 = a16;
              uint64_t v374 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v374 + a9 * v372, a4 + a9 * v373, a5, a6, a7, a8, v369, v370, v371, v368);
                int v369 = a10;
                int v370 = a11;
                uint64_t v371 = a13;
                uint64_t v372 = a15;
                uint64_t v373 = a16;
                uint64_t v374 = v28;
                int v368 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x72:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v375 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v376 = a17;
          if (a12)
          {
            if (v375 == 3)
            {
              int v377 = a10;
              int v378 = a11;
              uint64_t v379 = a13;
              uint64_t v380 = a15;
              uint64_t v381 = a16;
              uint64_t v382 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v382 + a9 * v380, a4 + a9 * v381, a5, a6, a7, a8, v377, v378, v379, v376);
                int v377 = a10;
                int v378 = a11;
                uint64_t v379 = a13;
                uint64_t v380 = a15;
                uint64_t v381 = a16;
                uint64_t v382 = v28;
                int v376 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x73:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v383 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v384 = a17;
          if (a12)
          {
            if (v383 == 3)
            {
              int v385 = a10;
              int v386 = a11;
              uint64_t v387 = a13;
              uint64_t v388 = a15;
              uint64_t v389 = a16;
              uint64_t v390 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v390 + a9 * v388, a4 + a9 * v389, a5, a6, a7, a8, v385, v386, v387, v384);
                int v385 = a10;
                int v386 = a11;
                uint64_t v387 = a13;
                uint64_t v388 = a15;
                uint64_t v389 = a16;
                uint64_t v390 = v28;
                int v384 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x7B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v391 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v392 = a17;
          if (a12)
          {
            if (v391 == 3)
            {
              int v393 = a10;
              int v394 = a11;
              uint64_t v395 = a13;
              uint64_t v396 = a15;
              uint64_t v397 = a16;
              uint64_t v398 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v398 + a9 * v396, a4 + a9 * v397, a5, a6, a7, a8, v393, v394, v395, v392);
                int v393 = a10;
                int v394 = a11;
                uint64_t v395 = a13;
                uint64_t v396 = a15;
                uint64_t v397 = a16;
                uint64_t v398 = v28;
                int v392 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x7C:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v399 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v400 = a17;
          if (a12)
          {
            if (v399 == 3)
            {
              int v401 = a10;
              int v402 = a11;
              uint64_t v403 = a13;
              uint64_t v404 = a15;
              uint64_t v405 = a16;
              uint64_t v406 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v406 + a9 * v404, a4 + a9 * v405, a5, a6, a7, a8, v401, v402, v403, v400);
                int v401 = a10;
                int v402 = a11;
                uint64_t v403 = a13;
                uint64_t v404 = a15;
                uint64_t v405 = a16;
                uint64_t v406 = v28;
                int v400 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x7D:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v407 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v408 = a17;
          if (a12)
          {
            if (v407 == 3)
            {
              int v409 = a10;
              int v410 = a11;
              uint64_t v411 = a13;
              uint64_t v412 = a15;
              uint64_t v413 = a16;
              uint64_t v414 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v414 + a9 * v412, a4 + a9 * v413, a5, a6, a7, a8, v409, v410, v411, v408);
                int v409 = a10;
                int v410 = a11;
                uint64_t v411 = a13;
                uint64_t v412 = a15;
                uint64_t v413 = a16;
                uint64_t v414 = v28;
                int v408 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12C:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v415 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v416 = a17;
          if (a12)
          {
            if (v415 == 3)
            {
              int v417 = a10;
              int v418 = a11;
              uint64_t v419 = a13;
              uint64_t v420 = a15;
              uint64_t v421 = a16;
              uint64_t v422 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v422 + a9 * v420, a4 + a9 * v421, a5, a6, a7, a8, v417, v418, v419, v416);
                int v417 = a10;
                int v418 = a11;
                uint64_t v419 = a13;
                uint64_t v420 = a15;
                uint64_t v421 = a16;
                uint64_t v422 = v28;
                int v416 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12D:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v423 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v424 = a17;
          if (a12)
          {
            if (v423 == 3)
            {
              int v425 = a10;
              int v426 = a11;
              uint64_t v427 = a13;
              uint64_t v428 = a15;
              uint64_t v429 = a16;
              uint64_t v430 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v430 + a9 * v428, a4 + a9 * v429, a5, a6, a7, a8, v425, v426, v427, v424);
                int v425 = a10;
                int v426 = a11;
                uint64_t v427 = a13;
                uint64_t v428 = a15;
                uint64_t v429 = a16;
                uint64_t v430 = v28;
                int v424 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v431 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v432 = a17;
          if (a12)
          {
            if (v431 == 3)
            {
              int v433 = a10;
              int v434 = a11;
              uint64_t v435 = a13;
              uint64_t v436 = a15;
              uint64_t v437 = a16;
              uint64_t v438 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v438 + a9 * v436, a4 + a9 * v437, a5, a6, a7, a8, v433, v434, v435, v432);
                int v433 = a10;
                int v434 = a11;
                uint64_t v435 = a13;
                uint64_t v436 = a15;
                uint64_t v437 = a16;
                uint64_t v438 = v28;
                int v432 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12F:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v439 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v440 = a17;
          if (a12)
          {
            if (v439 == 3)
            {
              int v441 = a10;
              int v442 = a11;
              uint64_t v443 = a13;
              uint64_t v444 = a15;
              uint64_t v445 = a16;
              uint64_t v446 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v446 + a9 * v444, a4 + a9 * v445, a5, a6, a7, a8, v441, v442, v443, v440);
                int v441 = a10;
                int v442 = a11;
                uint64_t v443 = a13;
                uint64_t v444 = a15;
                uint64_t v445 = a16;
                uint64_t v446 = v28;
                int v440 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x130:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v447 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v448 = a17;
          if (a12)
          {
            if (v447 == 3)
            {
              int v449 = a10;
              int v450 = a11;
              uint64_t v451 = a13;
              uint64_t v452 = a15;
              uint64_t v453 = a16;
              uint64_t v454 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v454 + a9 * v452, a4 + a9 * v453, a5, a6, a7, a8, v449, v450, v451, v448);
                int v449 = a10;
                int v450 = a11;
                uint64_t v451 = a13;
                uint64_t v452 = a15;
                uint64_t v453 = a16;
                uint64_t v454 = v28;
                int v448 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x139:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v455 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v456 = a17;
          if (a12)
          {
            if (v455 == 3)
            {
              int v457 = a10;
              int v458 = a11;
              uint64_t v459 = a13;
              uint64_t v460 = a15;
              uint64_t v461 = a16;
              uint64_t v462 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v462 + a9 * v460, a4 + a9 * v461, a5, a6, a7, a8, v457, v458, v459, v456);
                int v457 = a10;
                int v458 = a11;
                uint64_t v459 = a13;
                uint64_t v460 = a15;
                uint64_t v461 = a16;
                uint64_t v462 = v28;
                int v456 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x13A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v463 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v464 = a17;
          if (a12)
          {
            if (v463 == 3)
            {
              int v465 = a10;
              int v466 = a11;
              uint64_t v467 = a13;
              uint64_t v468 = a15;
              uint64_t v469 = a16;
              uint64_t v470 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v470 + a9 * v468, a4 + a9 * v469, a5, a6, a7, a8, v465, v466, v467, v464);
                int v465 = a10;
                int v466 = a11;
                uint64_t v467 = a13;
                uint64_t v468 = a15;
                uint64_t v469 = a16;
                uint64_t v470 = v28;
                int v464 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x13B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v471 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v472 = a17;
          if (a12)
          {
            if (v471 == 3)
            {
              int v473 = a10;
              int v474 = a11;
              uint64_t v475 = a13;
              uint64_t v476 = a15;
              uint64_t v477 = a16;
              uint64_t v478 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v478 + a9 * v476, a4 + a9 * v477, a5, a6, a7, a8, v473, v474, v475, v472);
                int v473 = a10;
                int v474 = a11;
                uint64_t v475 = a13;
                uint64_t v476 = a15;
                uint64_t v477 = a16;
                uint64_t v478 = v28;
                int v472 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x143:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v479 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v480 = a17;
          if (a12)
          {
            if (v479 == 3)
            {
              int v481 = a10;
              int v482 = a11;
              uint64_t v483 = a13;
              uint64_t v484 = a15;
              uint64_t v485 = a16;
              uint64_t v486 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v486 + a9 * v484, a4 + a9 * v485, a5, a6, a7, a8, v481, v482, v483, v480);
                int v481 = a10;
                int v482 = a11;
                uint64_t v483 = a13;
                uint64_t v484 = a15;
                uint64_t v485 = a16;
                uint64_t v486 = v28;
                int v480 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x144:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v487 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v488 = a17;
          if (a12)
          {
            if (v487 == 3)
            {
              int v489 = a10;
              int v490 = a11;
              uint64_t v491 = a13;
              uint64_t v492 = a15;
              uint64_t v493 = a16;
              uint64_t v494 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v494 + a9 * v492, a4 + a9 * v493, a5, a6, a7, a8, v489, v490, v491, v488);
                int v489 = a10;
                int v490 = a11;
                uint64_t v491 = a13;
                uint64_t v492 = a15;
                uint64_t v493 = a16;
                uint64_t v494 = v28;
                int v488 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x145:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v495 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v496 = a17;
          if (a12)
          {
            if (v495 == 3)
            {
              int v497 = a10;
              int v498 = a11;
              uint64_t v499 = a13;
              uint64_t v500 = a15;
              uint64_t v501 = a16;
              uint64_t v502 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v502 + a9 * v500, a4 + a9 * v501, a5, a6, a7, a8, v497, v498, v499, v496);
                int v497 = a10;
                int v498 = a11;
                uint64_t v499 = a13;
                uint64_t v500 = a15;
                uint64_t v501 = a16;
                uint64_t v502 = v28;
                int v496 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x22A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v503 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v504 = a17;
          if (a12)
          {
            if (v503 == 3)
            {
              int v505 = a10;
              int v506 = a11;
              uint64_t v507 = a13;
              uint64_t v508 = a15;
              uint64_t v509 = a16;
              uint64_t v510 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v510 + a9 * v508, a4 + a9 * v509, a5, a6, a7, a8, v505, v506, v507, v504);
                int v505 = a10;
                int v506 = a11;
                uint64_t v507 = a13;
                uint64_t v508 = a15;
                uint64_t v509 = a16;
                uint64_t v510 = v28;
                int v504 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x22B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v511 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v512 = a17;
          if (a12)
          {
            if (v511 == 3)
            {
              int v513 = a10;
              int v514 = a11;
              uint64_t v515 = a13;
              uint64_t v516 = a15;
              uint64_t v517 = a16;
              uint64_t v518 = v28;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v518 + a9 * v516, a4 + a9 * v517, a5, a6, a7, a8, v513, v514, v515, v512);
                int v513 = a10;
                int v514 = a11;
                uint64_t v515 = a13;
                uint64_t v516 = a15;
                uint64_t v517 = a16;
                uint64_t v518 = v28;
                int v512 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      default:
        return;
    }
  }
  else if (v27 == 1)
  {
    int v29 = *(_DWORD *)(a1 + 32);
    switch(v29)
    {
      case 637:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v30 = *(unsigned __int8 *)(a1 + 57);
          if (v30 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              a2 = v28;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 638:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v30 = *(unsigned __int8 *)(a1 + 57);
          if (v30 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              a2 = v28;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 639:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v30 = *(unsigned __int8 *)(a1 + 57);
          if (v30 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              a2 = v28;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 640:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v30 = *(unsigned __int8 *)(a1 + 57);
          if (v30 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              a2 = v28;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 641:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v30 = *(unsigned __int8 *)(a1 + 57);
          if (v30 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              a2 = v28;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      default:
        if (v29 != 553)
        {
          if (v29 != 552 || *(unsigned char *)(a1 + 380) == 1) {
            return;
          }
          int v30 = *(unsigned __int8 *)(a1 + 57);
          if (v30 == 1)
          {
            if (a12)
            {
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
                int v25 = a10;
                int v23 = a11;
                uint64_t v22 = a13;
                uint64_t v21 = a15;
                uint64_t v20 = a16;
                a2 = v28;
                int v19 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
            return;
          }
LABEL_53:
          if (!v30
          {
            getCompressionCodecConfig(AGXTextureCompressionSettings)::losslessCodecConfig = 1;
          }
          return;
        }
        if (*(unsigned char *)(a1 + 380) == 1) {
          return;
        }
        int v30 = *(unsigned __int8 *)(a1 + 57);
        if (v30 != 1) {
          goto LABEL_53;
        }
        if (a12)
        {
          do
          {
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, a2 + a9 * v21, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
            int v25 = a10;
            int v23 = a11;
            uint64_t v22 = a13;
            uint64_t v21 = a15;
            uint64_t v20 = a16;
            a2 = v28;
            int v19 = a17;
            ++a9;
            a3 += a14;
            --v24;
          }
          while (v24);
        }
        break;
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        uint64_t v3005 = *(unsigned __int8 *)(a1 + 380);
        int v39 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3005 == 1)
        {
          if (v39 == 4)
          {
            char v1801 = a17;
            if (a12)
            {
              uint64_t v1802 = v28;
              uint64_t v1803 = a16;
              uint64_t v1804 = a15;
              uint64_t v1805 = a13;
              int v1806 = a11;
              int v1807 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1802 + a9 * v1804, a4 + a9 * v1803, a5, a6, a7, a8, v1807, v1806, v1805, v1801);
                int v1807 = a10;
                int v1806 = a11;
                uint64_t v1805 = a13;
                uint64_t v1804 = a15;
                uint64_t v1803 = a16;
                uint64_t v1802 = v28;
                char v1801 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v40 = a17;
            if (!v39 && a12)
            {
              uint64_t v41 = v28;
              uint64_t v42 = a16;
              uint64_t v43 = a15;
              uint64_t v44 = a13;
              int v45 = a11;
              int v46 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v41 + a9 * v43, a4 + a9 * v42, a5, a6, a7, a8, v46, v45, v44, v40);
                int v46 = a10;
                int v45 = a11;
                uint64_t v44 = a13;
                uint64_t v43 = a15;
                uint64_t v42 = a16;
                uint64_t v41 = v28;
                char v40 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v39 == 4)
        {
          int v2403 = a17;
          if (a12)
          {
            uint64_t v2404 = v28;
            uint64_t v2405 = a16;
            uint64_t v2406 = a15;
            uint64_t v2407 = a13;
            int v2408 = a11;
            int v2409 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2404 + a9 * v2406, a4 + a9 * v2405, a5, a6, a7, a8, v2409, v2408, v2407, v2403);
              int v2409 = a10;
              int v2408 = a11;
              uint64_t v2407 = a13;
              uint64_t v2406 = a15;
              uint64_t v2405 = a16;
              uint64_t v2404 = v28;
              int v2403 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1199 = a17;
          if (!v39 && a12)
          {
            uint64_t v1200 = v28;
            uint64_t v1201 = a16;
            uint64_t v1202 = a15;
            uint64_t v1203 = a13;
            int v1204 = a11;
            int v1205 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1200 + a9 * v1202, a4 + a9 * v1201, a5, a6, a7, a8, v1205, v1204, v1203, v1199);
              int v1205 = a10;
              int v1204 = a11;
              uint64_t v1203 = a13;
              uint64_t v1202 = a15;
              uint64_t v1201 = a16;
              uint64_t v1200 = v28;
              int v1199 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xA:
        uint64_t v3006 = *(unsigned __int8 *)(a1 + 380);
        int v519 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3006 == 1)
        {
          if (v519 == 4)
          {
            char v1808 = a17;
            if (a12)
            {
              uint64_t v1809 = v28;
              uint64_t v1810 = a16;
              uint64_t v1811 = a15;
              uint64_t v1812 = a13;
              int v1813 = a11;
              int v1814 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1809 + a9 * v1811, a4 + a9 * v1810, a5, a6, a7, a8, v1814, v1813, v1812, v1808);
                int v1814 = a10;
                int v1813 = a11;
                uint64_t v1812 = a13;
                uint64_t v1811 = a15;
                uint64_t v1810 = a16;
                uint64_t v1809 = v28;
                char v1808 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v520 = a17;
            if (!v519 && a12)
            {
              uint64_t v521 = v28;
              uint64_t v522 = a16;
              uint64_t v523 = a15;
              uint64_t v524 = a13;
              int v525 = a11;
              int v526 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v521 + a9 * v523, a4 + a9 * v522, a5, a6, a7, a8, v526, v525, v524, v520);
                int v526 = a10;
                int v525 = a11;
                uint64_t v524 = a13;
                uint64_t v523 = a15;
                uint64_t v522 = a16;
                uint64_t v521 = v28;
                char v520 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v519 == 4)
        {
          int v2410 = a17;
          if (a12)
          {
            uint64_t v2411 = v28;
            uint64_t v2412 = a16;
            uint64_t v2413 = a15;
            uint64_t v2414 = a13;
            int v2415 = a11;
            int v2416 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2411 + a9 * v2413, a4 + a9 * v2412, a5, a6, a7, a8, v2416, v2415, v2414, v2410);
              int v2416 = a10;
              int v2415 = a11;
              uint64_t v2414 = a13;
              uint64_t v2413 = a15;
              uint64_t v2412 = a16;
              uint64_t v2411 = v28;
              int v2410 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1206 = a17;
          if (!v519 && a12)
          {
            uint64_t v1207 = v28;
            uint64_t v1208 = a16;
            uint64_t v1209 = a15;
            uint64_t v1210 = a13;
            int v1211 = a11;
            int v1212 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1207 + a9 * v1209, a4 + a9 * v1208, a5, a6, a7, a8, v1212, v1211, v1210, v1206);
              int v1212 = a10;
              int v1211 = a11;
              uint64_t v1210 = a13;
              uint64_t v1209 = a15;
              uint64_t v1208 = a16;
              uint64_t v1207 = v28;
              int v1206 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xB:
        uint64_t v3007 = *(unsigned __int8 *)(a1 + 380);
        int v527 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3007 == 1)
        {
          if (v527 == 4)
          {
            char v1815 = a17;
            if (a12)
            {
              uint64_t v1816 = v28;
              uint64_t v1817 = a16;
              uint64_t v1818 = a15;
              uint64_t v1819 = a13;
              int v1820 = a11;
              int v1821 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1816 + a9 * v1818, a4 + a9 * v1817, a5, a6, a7, a8, v1821, v1820, v1819, v1815);
                int v1821 = a10;
                int v1820 = a11;
                uint64_t v1819 = a13;
                uint64_t v1818 = a15;
                uint64_t v1817 = a16;
                uint64_t v1816 = v28;
                char v1815 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v528 = a17;
            if (!v527 && a12)
            {
              uint64_t v529 = v28;
              uint64_t v530 = a16;
              uint64_t v531 = a15;
              uint64_t v532 = a13;
              int v533 = a11;
              int v534 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v529 + a9 * v531, a4 + a9 * v530, a5, a6, a7, a8, v534, v533, v532, v528);
                int v534 = a10;
                int v533 = a11;
                uint64_t v532 = a13;
                uint64_t v531 = a15;
                uint64_t v530 = a16;
                uint64_t v529 = v28;
                char v528 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v527 == 4)
        {
          int v2417 = a17;
          if (a12)
          {
            uint64_t v2418 = v28;
            uint64_t v2419 = a16;
            uint64_t v2420 = a15;
            uint64_t v2421 = a13;
            int v2422 = a11;
            int v2423 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2418 + a9 * v2420, a4 + a9 * v2419, a5, a6, a7, a8, v2423, v2422, v2421, v2417);
              int v2423 = a10;
              int v2422 = a11;
              uint64_t v2421 = a13;
              uint64_t v2420 = a15;
              uint64_t v2419 = a16;
              uint64_t v2418 = v28;
              int v2417 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1213 = a17;
          if (!v527 && a12)
          {
            uint64_t v1214 = v28;
            uint64_t v1215 = a16;
            uint64_t v1216 = a15;
            uint64_t v1217 = a13;
            int v1218 = a11;
            int v1219 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1214 + a9 * v1216, a4 + a9 * v1215, a5, a6, a7, a8, v1219, v1218, v1217, v1213);
              int v1219 = a10;
              int v1218 = a11;
              uint64_t v1217 = a13;
              uint64_t v1216 = a15;
              uint64_t v1215 = a16;
              uint64_t v1214 = v28;
              int v1213 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xC:
        uint64_t v3008 = *(unsigned __int8 *)(a1 + 380);
        int v535 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3008 == 1)
        {
          if (v535 == 4)
          {
            char v1822 = a17;
            if (a12)
            {
              uint64_t v1823 = v28;
              uint64_t v1824 = a16;
              uint64_t v1825 = a15;
              uint64_t v1826 = a13;
              int v1827 = a11;
              int v1828 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1823 + a9 * v1825, a4 + a9 * v1824, a5, a6, a7, a8, v1828, v1827, v1826, v1822);
                int v1828 = a10;
                int v1827 = a11;
                uint64_t v1826 = a13;
                uint64_t v1825 = a15;
                uint64_t v1824 = a16;
                uint64_t v1823 = v28;
                char v1822 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v536 = a17;
            if (!v535 && a12)
            {
              uint64_t v537 = v28;
              uint64_t v538 = a16;
              uint64_t v539 = a15;
              uint64_t v540 = a13;
              int v541 = a11;
              int v542 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v537 + a9 * v539, a4 + a9 * v538, a5, a6, a7, a8, v542, v541, v540, v536);
                int v542 = a10;
                int v541 = a11;
                uint64_t v540 = a13;
                uint64_t v539 = a15;
                uint64_t v538 = a16;
                uint64_t v537 = v28;
                char v536 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v535 == 4)
        {
          int v2424 = a17;
          if (a12)
          {
            uint64_t v2425 = v28;
            uint64_t v2426 = a16;
            uint64_t v2427 = a15;
            uint64_t v2428 = a13;
            int v2429 = a11;
            int v2430 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2425 + a9 * v2427, a4 + a9 * v2426, a5, a6, a7, a8, v2430, v2429, v2428, v2424);
              int v2430 = a10;
              int v2429 = a11;
              uint64_t v2428 = a13;
              uint64_t v2427 = a15;
              uint64_t v2426 = a16;
              uint64_t v2425 = v28;
              int v2424 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1220 = a17;
          if (!v535 && a12)
          {
            uint64_t v1221 = v28;
            uint64_t v1222 = a16;
            uint64_t v1223 = a15;
            uint64_t v1224 = a13;
            int v1225 = a11;
            int v1226 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1221 + a9 * v1223, a4 + a9 * v1222, a5, a6, a7, a8, v1226, v1225, v1224, v1220);
              int v1226 = a10;
              int v1225 = a11;
              uint64_t v1224 = a13;
              uint64_t v1223 = a15;
              uint64_t v1222 = a16;
              uint64_t v1221 = v28;
              int v1220 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xD:
        uint64_t v3009 = *(unsigned __int8 *)(a1 + 380);
        int v543 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3009 == 1)
        {
          if (v543 == 4)
          {
            char v1829 = a17;
            if (a12)
            {
              uint64_t v1830 = v28;
              uint64_t v1831 = a16;
              uint64_t v1832 = a15;
              uint64_t v1833 = a13;
              int v1834 = a11;
              int v1835 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1830 + a9 * v1832, a4 + a9 * v1831, a5, a6, a7, a8, v1835, v1834, v1833, v1829);
                int v1835 = a10;
                int v1834 = a11;
                uint64_t v1833 = a13;
                uint64_t v1832 = a15;
                uint64_t v1831 = a16;
                uint64_t v1830 = v28;
                char v1829 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v544 = a17;
            if (!v543 && a12)
            {
              uint64_t v545 = v28;
              uint64_t v546 = a16;
              uint64_t v547 = a15;
              uint64_t v548 = a13;
              int v549 = a11;
              int v550 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v545 + a9 * v547, a4 + a9 * v546, a5, a6, a7, a8, v550, v549, v548, v544);
                int v550 = a10;
                int v549 = a11;
                uint64_t v548 = a13;
                uint64_t v547 = a15;
                uint64_t v546 = a16;
                uint64_t v545 = v28;
                char v544 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v543 == 4)
        {
          int v2431 = a17;
          if (a12)
          {
            uint64_t v2432 = v28;
            uint64_t v2433 = a16;
            uint64_t v2434 = a15;
            uint64_t v2435 = a13;
            int v2436 = a11;
            int v2437 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2432 + a9 * v2434, a4 + a9 * v2433, a5, a6, a7, a8, v2437, v2436, v2435, v2431);
              int v2437 = a10;
              int v2436 = a11;
              uint64_t v2435 = a13;
              uint64_t v2434 = a15;
              uint64_t v2433 = a16;
              uint64_t v2432 = v28;
              int v2431 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1227 = a17;
          if (!v543 && a12)
          {
            uint64_t v1228 = v28;
            uint64_t v1229 = a16;
            uint64_t v1230 = a15;
            uint64_t v1231 = a13;
            int v1232 = a11;
            int v1233 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1228 + a9 * v1230, a4 + a9 * v1229, a5, a6, a7, a8, v1233, v1232, v1231, v1227);
              int v1233 = a10;
              int v1232 = a11;
              uint64_t v1231 = a13;
              uint64_t v1230 = a15;
              uint64_t v1229 = a16;
              uint64_t v1228 = v28;
              int v1227 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xE:
        uint64_t v3010 = *(unsigned __int8 *)(a1 + 380);
        int v551 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3010 == 1)
        {
          if (v551 == 4)
          {
            char v1836 = a17;
            if (a12)
            {
              uint64_t v1837 = v28;
              uint64_t v1838 = a16;
              uint64_t v1839 = a15;
              uint64_t v1840 = a13;
              int v1841 = a11;
              int v1842 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1837 + a9 * v1839, a4 + a9 * v1838, a5, a6, a7, a8, v1842, v1841, v1840, v1836);
                int v1842 = a10;
                int v1841 = a11;
                uint64_t v1840 = a13;
                uint64_t v1839 = a15;
                uint64_t v1838 = a16;
                uint64_t v1837 = v28;
                char v1836 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v552 = a17;
            if (!v551 && a12)
            {
              uint64_t v553 = v28;
              uint64_t v554 = a16;
              uint64_t v555 = a15;
              uint64_t v556 = a13;
              int v557 = a11;
              int v558 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v553 + a9 * v555, a4 + a9 * v554, a5, a6, a7, a8, v558, v557, v556, v552);
                int v558 = a10;
                int v557 = a11;
                uint64_t v556 = a13;
                uint64_t v555 = a15;
                uint64_t v554 = a16;
                uint64_t v553 = v28;
                char v552 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v551 == 4)
        {
          int v2438 = a17;
          if (a12)
          {
            uint64_t v2439 = v28;
            uint64_t v2440 = a16;
            uint64_t v2441 = a15;
            uint64_t v2442 = a13;
            int v2443 = a11;
            int v2444 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2439 + a9 * v2441, a4 + a9 * v2440, a5, a6, a7, a8, v2444, v2443, v2442, v2438);
              int v2444 = a10;
              int v2443 = a11;
              uint64_t v2442 = a13;
              uint64_t v2441 = a15;
              uint64_t v2440 = a16;
              uint64_t v2439 = v28;
              int v2438 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1234 = a17;
          if (!v551 && a12)
          {
            uint64_t v1235 = v28;
            uint64_t v1236 = a16;
            uint64_t v1237 = a15;
            uint64_t v1238 = a13;
            int v1239 = a11;
            int v1240 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1235 + a9 * v1237, a4 + a9 * v1236, a5, a6, a7, a8, v1240, v1239, v1238, v1234);
              int v1240 = a10;
              int v1239 = a11;
              uint64_t v1238 = a13;
              uint64_t v1237 = a15;
              uint64_t v1236 = a16;
              uint64_t v1235 = v28;
              int v1234 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x14:
        uint64_t v3011 = *(unsigned __int8 *)(a1 + 380);
        int v559 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3011 == 1)
        {
          if (v559 == 4)
          {
            char v1843 = a17;
            if (a12)
            {
              uint64_t v1844 = v28;
              uint64_t v1845 = a16;
              uint64_t v1846 = a15;
              uint64_t v1847 = a13;
              int v1848 = a11;
              int v1849 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1844 + a9 * v1846, a4 + a9 * v1845, a5, a6, a7, a8, v1849, v1848, v1847, v1843);
                int v1849 = a10;
                int v1848 = a11;
                uint64_t v1847 = a13;
                uint64_t v1846 = a15;
                uint64_t v1845 = a16;
                uint64_t v1844 = v28;
                char v1843 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v560 = a17;
            if (!v559 && a12)
            {
              uint64_t v561 = v28;
              uint64_t v562 = a16;
              uint64_t v563 = a15;
              uint64_t v564 = a13;
              int v565 = a11;
              int v566 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v561 + a9 * v563, a4 + a9 * v562, a5, a6, a7, a8, v566, v565, v564, v560);
                int v566 = a10;
                int v565 = a11;
                uint64_t v564 = a13;
                uint64_t v563 = a15;
                uint64_t v562 = a16;
                uint64_t v561 = v28;
                char v560 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v559 == 4)
        {
          int v2445 = a17;
          if (a12)
          {
            uint64_t v2446 = v28;
            uint64_t v2447 = a16;
            uint64_t v2448 = a15;
            uint64_t v2449 = a13;
            int v2450 = a11;
            int v2451 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2446 + a9 * v2448, a4 + a9 * v2447, a5, a6, a7, a8, v2451, v2450, v2449, v2445);
              int v2451 = a10;
              int v2450 = a11;
              uint64_t v2449 = a13;
              uint64_t v2448 = a15;
              uint64_t v2447 = a16;
              uint64_t v2446 = v28;
              int v2445 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1241 = a17;
          if (!v559 && a12)
          {
            uint64_t v1242 = v28;
            uint64_t v1243 = a16;
            uint64_t v1244 = a15;
            uint64_t v1245 = a13;
            int v1246 = a11;
            int v1247 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1242 + a9 * v1244, a4 + a9 * v1243, a5, a6, a7, a8, v1247, v1246, v1245, v1241);
              int v1247 = a10;
              int v1246 = a11;
              uint64_t v1245 = a13;
              uint64_t v1244 = a15;
              uint64_t v1243 = a16;
              uint64_t v1242 = v28;
              int v1241 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x16:
        uint64_t v3012 = *(unsigned __int8 *)(a1 + 380);
        int v567 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3012 == 1)
        {
          if (v567 == 4)
          {
            char v1850 = a17;
            if (a12)
            {
              uint64_t v1851 = v28;
              uint64_t v1852 = a16;
              uint64_t v1853 = a15;
              uint64_t v1854 = a13;
              int v1855 = a11;
              int v1856 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1851 + a9 * v1853, a4 + a9 * v1852, a5, a6, a7, a8, v1856, v1855, v1854, v1850);
                int v1856 = a10;
                int v1855 = a11;
                uint64_t v1854 = a13;
                uint64_t v1853 = a15;
                uint64_t v1852 = a16;
                uint64_t v1851 = v28;
                char v1850 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v568 = a17;
            if (!v567 && a12)
            {
              uint64_t v569 = v28;
              uint64_t v570 = a16;
              uint64_t v571 = a15;
              uint64_t v572 = a13;
              int v573 = a11;
              int v574 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v569 + a9 * v571, a4 + a9 * v570, a5, a6, a7, a8, v574, v573, v572, v568);
                int v574 = a10;
                int v573 = a11;
                uint64_t v572 = a13;
                uint64_t v571 = a15;
                uint64_t v570 = a16;
                uint64_t v569 = v28;
                char v568 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v567 == 4)
        {
          int v2452 = a17;
          if (a12)
          {
            uint64_t v2453 = v28;
            uint64_t v2454 = a16;
            uint64_t v2455 = a15;
            uint64_t v2456 = a13;
            int v2457 = a11;
            int v2458 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2453 + a9 * v2455, a4 + a9 * v2454, a5, a6, a7, a8, v2458, v2457, v2456, v2452);
              int v2458 = a10;
              int v2457 = a11;
              uint64_t v2456 = a13;
              uint64_t v2455 = a15;
              uint64_t v2454 = a16;
              uint64_t v2453 = v28;
              int v2452 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1248 = a17;
          if (!v567 && a12)
          {
            uint64_t v1249 = v28;
            uint64_t v1250 = a16;
            uint64_t v1251 = a15;
            uint64_t v1252 = a13;
            int v1253 = a11;
            int v1254 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1249 + a9 * v1251, a4 + a9 * v1250, a5, a6, a7, a8, v1254, v1253, v1252, v1248);
              int v1254 = a10;
              int v1253 = a11;
              uint64_t v1252 = a13;
              uint64_t v1251 = a15;
              uint64_t v1250 = a16;
              uint64_t v1249 = v28;
              int v1248 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x17:
        uint64_t v3013 = *(unsigned __int8 *)(a1 + 380);
        int v575 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3013 == 1)
        {
          if (v575 == 4)
          {
            char v1857 = a17;
            if (a12)
            {
              uint64_t v1858 = v28;
              uint64_t v1859 = a16;
              uint64_t v1860 = a15;
              uint64_t v1861 = a13;
              int v1862 = a11;
              int v1863 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1858 + a9 * v1860, a4 + a9 * v1859, a5, a6, a7, a8, v1863, v1862, v1861, v1857);
                int v1863 = a10;
                int v1862 = a11;
                uint64_t v1861 = a13;
                uint64_t v1860 = a15;
                uint64_t v1859 = a16;
                uint64_t v1858 = v28;
                char v1857 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v576 = a17;
            if (!v575 && a12)
            {
              uint64_t v577 = v28;
              uint64_t v578 = a16;
              uint64_t v579 = a15;
              uint64_t v580 = a13;
              int v581 = a11;
              int v582 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v577 + a9 * v579, a4 + a9 * v578, a5, a6, a7, a8, v582, v581, v580, v576);
                int v582 = a10;
                int v581 = a11;
                uint64_t v580 = a13;
                uint64_t v579 = a15;
                uint64_t v578 = a16;
                uint64_t v577 = v28;
                char v576 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v575 == 4)
        {
          int v2459 = a17;
          if (a12)
          {
            uint64_t v2460 = v28;
            uint64_t v2461 = a16;
            uint64_t v2462 = a15;
            uint64_t v2463 = a13;
            int v2464 = a11;
            int v2465 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2460 + a9 * v2462, a4 + a9 * v2461, a5, a6, a7, a8, v2465, v2464, v2463, v2459);
              int v2465 = a10;
              int v2464 = a11;
              uint64_t v2463 = a13;
              uint64_t v2462 = a15;
              uint64_t v2461 = a16;
              uint64_t v2460 = v28;
              int v2459 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1255 = a17;
          if (!v575 && a12)
          {
            uint64_t v1256 = v28;
            uint64_t v1257 = a16;
            uint64_t v1258 = a15;
            uint64_t v1259 = a13;
            int v1260 = a11;
            int v1261 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1256 + a9 * v1258, a4 + a9 * v1257, a5, a6, a7, a8, v1261, v1260, v1259, v1255);
              int v1261 = a10;
              int v1260 = a11;
              uint64_t v1259 = a13;
              uint64_t v1258 = a15;
              uint64_t v1257 = a16;
              uint64_t v1256 = v28;
              int v1255 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x18:
        uint64_t v3014 = *(unsigned __int8 *)(a1 + 380);
        int v583 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3014 == 1)
        {
          if (v583 == 4)
          {
            char v1864 = a17;
            if (a12)
            {
              uint64_t v1865 = v28;
              uint64_t v1866 = a16;
              uint64_t v1867 = a15;
              uint64_t v1868 = a13;
              int v1869 = a11;
              int v1870 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1865 + a9 * v1867, a4 + a9 * v1866, a5, a6, a7, a8, v1870, v1869, v1868, v1864);
                int v1870 = a10;
                int v1869 = a11;
                uint64_t v1868 = a13;
                uint64_t v1867 = a15;
                uint64_t v1866 = a16;
                uint64_t v1865 = v28;
                char v1864 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v584 = a17;
            if (!v583 && a12)
            {
              uint64_t v585 = v28;
              uint64_t v586 = a16;
              uint64_t v587 = a15;
              uint64_t v588 = a13;
              int v589 = a11;
              int v590 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v585 + a9 * v587, a4 + a9 * v586, a5, a6, a7, a8, v590, v589, v588, v584);
                int v590 = a10;
                int v589 = a11;
                uint64_t v588 = a13;
                uint64_t v587 = a15;
                uint64_t v586 = a16;
                uint64_t v585 = v28;
                char v584 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v583 == 4)
        {
          int v2466 = a17;
          if (a12)
          {
            uint64_t v2467 = v28;
            uint64_t v2468 = a16;
            uint64_t v2469 = a15;
            uint64_t v2470 = a13;
            int v2471 = a11;
            int v2472 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2467 + a9 * v2469, a4 + a9 * v2468, a5, a6, a7, a8, v2472, v2471, v2470, v2466);
              int v2472 = a10;
              int v2471 = a11;
              uint64_t v2470 = a13;
              uint64_t v2469 = a15;
              uint64_t v2468 = a16;
              uint64_t v2467 = v28;
              int v2466 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1262 = a17;
          if (!v583 && a12)
          {
            uint64_t v1263 = v28;
            uint64_t v1264 = a16;
            uint64_t v1265 = a15;
            uint64_t v1266 = a13;
            int v1267 = a11;
            int v1268 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1263 + a9 * v1265, a4 + a9 * v1264, a5, a6, a7, a8, v1268, v1267, v1266, v1262);
              int v1268 = a10;
              int v1267 = a11;
              uint64_t v1266 = a13;
              uint64_t v1265 = a15;
              uint64_t v1264 = a16;
              uint64_t v1263 = v28;
              int v1262 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x19:
        uint64_t v3015 = *(unsigned __int8 *)(a1 + 380);
        int v591 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3015 == 1)
        {
          if (v591 == 4)
          {
            char v1871 = a17;
            if (a12)
            {
              uint64_t v1872 = v28;
              uint64_t v1873 = a16;
              uint64_t v1874 = a15;
              uint64_t v1875 = a13;
              int v1876 = a11;
              int v1877 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1872 + a9 * v1874, a4 + a9 * v1873, a5, a6, a7, a8, v1877, v1876, v1875, v1871);
                int v1877 = a10;
                int v1876 = a11;
                uint64_t v1875 = a13;
                uint64_t v1874 = a15;
                uint64_t v1873 = a16;
                uint64_t v1872 = v28;
                char v1871 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v592 = a17;
            if (!v591 && a12)
            {
              uint64_t v593 = v28;
              uint64_t v594 = a16;
              uint64_t v595 = a15;
              uint64_t v596 = a13;
              int v597 = a11;
              int v598 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v593 + a9 * v595, a4 + a9 * v594, a5, a6, a7, a8, v598, v597, v596, v592);
                int v598 = a10;
                int v597 = a11;
                uint64_t v596 = a13;
                uint64_t v595 = a15;
                uint64_t v594 = a16;
                uint64_t v593 = v28;
                char v592 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v591 == 4)
        {
          int v2473 = a17;
          if (a12)
          {
            uint64_t v2474 = v28;
            uint64_t v2475 = a16;
            uint64_t v2476 = a15;
            uint64_t v2477 = a13;
            int v2478 = a11;
            int v2479 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2474 + a9 * v2476, a4 + a9 * v2475, a5, a6, a7, a8, v2479, v2478, v2477, v2473);
              int v2479 = a10;
              int v2478 = a11;
              uint64_t v2477 = a13;
              uint64_t v2476 = a15;
              uint64_t v2475 = a16;
              uint64_t v2474 = v28;
              int v2473 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1269 = a17;
          if (!v591 && a12)
          {
            uint64_t v1270 = v28;
            uint64_t v1271 = a16;
            uint64_t v1272 = a15;
            uint64_t v1273 = a13;
            int v1274 = a11;
            int v1275 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1270 + a9 * v1272, a4 + a9 * v1271, a5, a6, a7, a8, v1275, v1274, v1273, v1269);
              int v1275 = a10;
              int v1274 = a11;
              uint64_t v1273 = a13;
              uint64_t v1272 = a15;
              uint64_t v1271 = a16;
              uint64_t v1270 = v28;
              int v1269 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x1A:
        uint64_t v3016 = *(unsigned __int8 *)(a1 + 380);
        int v599 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3016 == 1)
        {
          if (v599 == 4)
          {
            char v1878 = a17;
            if (a12)
            {
              uint64_t v1879 = v28;
              uint64_t v1880 = a16;
              uint64_t v1881 = a15;
              uint64_t v1882 = a13;
              int v1883 = a11;
              int v1884 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1879 + a9 * v1881, a4 + a9 * v1880, a5, a6, a7, a8, v1884, v1883, v1882, v1878);
                int v1884 = a10;
                int v1883 = a11;
                uint64_t v1882 = a13;
                uint64_t v1881 = a15;
                uint64_t v1880 = a16;
                uint64_t v1879 = v28;
                char v1878 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v600 = a17;
            if (!v599 && a12)
            {
              uint64_t v601 = v28;
              uint64_t v602 = a16;
              uint64_t v603 = a15;
              uint64_t v604 = a13;
              int v605 = a11;
              int v606 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v601 + a9 * v603, a4 + a9 * v602, a5, a6, a7, a8, v606, v605, v604, v600);
                int v606 = a10;
                int v605 = a11;
                uint64_t v604 = a13;
                uint64_t v603 = a15;
                uint64_t v602 = a16;
                uint64_t v601 = v28;
                char v600 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v599 == 4)
        {
          int v2480 = a17;
          if (a12)
          {
            uint64_t v2481 = v28;
            uint64_t v2482 = a16;
            uint64_t v2483 = a15;
            uint64_t v2484 = a13;
            int v2485 = a11;
            int v2486 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2481 + a9 * v2483, a4 + a9 * v2482, a5, a6, a7, a8, v2486, v2485, v2484, v2480);
              int v2486 = a10;
              int v2485 = a11;
              uint64_t v2484 = a13;
              uint64_t v2483 = a15;
              uint64_t v2482 = a16;
              uint64_t v2481 = v28;
              int v2480 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1276 = a17;
          if (!v599 && a12)
          {
            uint64_t v1277 = v28;
            uint64_t v1278 = a16;
            uint64_t v1279 = a15;
            uint64_t v1280 = a13;
            int v1281 = a11;
            int v1282 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1277 + a9 * v1279, a4 + a9 * v1278, a5, a6, a7, a8, v1282, v1281, v1280, v1276);
              int v1282 = a10;
              int v1281 = a11;
              uint64_t v1280 = a13;
              uint64_t v1279 = a15;
              uint64_t v1278 = a16;
              uint64_t v1277 = v28;
              int v1276 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x1E:
        uint64_t v3017 = *(unsigned __int8 *)(a1 + 380);
        int v607 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3017 == 1)
        {
          if (v607 == 4)
          {
            char v1885 = a17;
            if (a12)
            {
              uint64_t v1886 = v28;
              uint64_t v1887 = a16;
              uint64_t v1888 = a15;
              uint64_t v1889 = a13;
              int v1890 = a11;
              int v1891 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1886 + a9 * v1888, a4 + a9 * v1887, a5, a6, a7, a8, v1891, v1890, v1889, v1885);
                int v1891 = a10;
                int v1890 = a11;
                uint64_t v1889 = a13;
                uint64_t v1888 = a15;
                uint64_t v1887 = a16;
                uint64_t v1886 = v28;
                char v1885 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v608 = a17;
            if (!v607 && a12)
            {
              uint64_t v609 = v28;
              uint64_t v610 = a16;
              uint64_t v611 = a15;
              uint64_t v612 = a13;
              int v613 = a11;
              int v614 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v609 + a9 * v611, a4 + a9 * v610, a5, a6, a7, a8, v614, v613, v612, v608);
                int v614 = a10;
                int v613 = a11;
                uint64_t v612 = a13;
                uint64_t v611 = a15;
                uint64_t v610 = a16;
                uint64_t v609 = v28;
                char v608 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v607 == 4)
        {
          int v2487 = a17;
          if (a12)
          {
            uint64_t v2488 = v28;
            uint64_t v2489 = a16;
            uint64_t v2490 = a15;
            uint64_t v2491 = a13;
            int v2492 = a11;
            int v2493 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2488 + a9 * v2490, a4 + a9 * v2489, a5, a6, a7, a8, v2493, v2492, v2491, v2487);
              int v2493 = a10;
              int v2492 = a11;
              uint64_t v2491 = a13;
              uint64_t v2490 = a15;
              uint64_t v2489 = a16;
              uint64_t v2488 = v28;
              int v2487 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1283 = a17;
          if (!v607 && a12)
          {
            uint64_t v1284 = v28;
            uint64_t v1285 = a16;
            uint64_t v1286 = a15;
            uint64_t v1287 = a13;
            int v1288 = a11;
            int v1289 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1284 + a9 * v1286, a4 + a9 * v1285, a5, a6, a7, a8, v1289, v1288, v1287, v1283);
              int v1289 = a10;
              int v1288 = a11;
              uint64_t v1287 = a13;
              uint64_t v1286 = a15;
              uint64_t v1285 = a16;
              uint64_t v1284 = v28;
              int v1283 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x1F:
        uint64_t v3018 = *(unsigned __int8 *)(a1 + 380);
        int v615 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3018 == 1)
        {
          if (v615 == 4)
          {
            char v1892 = a17;
            if (a12)
            {
              uint64_t v1893 = v28;
              uint64_t v1894 = a16;
              uint64_t v1895 = a15;
              uint64_t v1896 = a13;
              int v1897 = a11;
              int v1898 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1893 + a9 * v1895, a4 + a9 * v1894, a5, a6, a7, a8, v1898, v1897, v1896, v1892);
                int v1898 = a10;
                int v1897 = a11;
                uint64_t v1896 = a13;
                uint64_t v1895 = a15;
                uint64_t v1894 = a16;
                uint64_t v1893 = v28;
                char v1892 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v616 = a17;
            if (!v615 && a12)
            {
              uint64_t v617 = v28;
              uint64_t v618 = a16;
              uint64_t v619 = a15;
              uint64_t v620 = a13;
              int v621 = a11;
              int v622 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v617 + a9 * v619, a4 + a9 * v618, a5, a6, a7, a8, v622, v621, v620, v616);
                int v622 = a10;
                int v621 = a11;
                uint64_t v620 = a13;
                uint64_t v619 = a15;
                uint64_t v618 = a16;
                uint64_t v617 = v28;
                char v616 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v615 == 4)
        {
          int v2494 = a17;
          if (a12)
          {
            uint64_t v2495 = v28;
            uint64_t v2496 = a16;
            uint64_t v2497 = a15;
            uint64_t v2498 = a13;
            int v2499 = a11;
            int v2500 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2495 + a9 * v2497, a4 + a9 * v2496, a5, a6, a7, a8, v2500, v2499, v2498, v2494);
              int v2500 = a10;
              int v2499 = a11;
              uint64_t v2498 = a13;
              uint64_t v2497 = a15;
              uint64_t v2496 = a16;
              uint64_t v2495 = v28;
              int v2494 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1290 = a17;
          if (!v615 && a12)
          {
            uint64_t v1291 = v28;
            uint64_t v1292 = a16;
            uint64_t v1293 = a15;
            uint64_t v1294 = a13;
            int v1295 = a11;
            int v1296 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1291 + a9 * v1293, a4 + a9 * v1292, a5, a6, a7, a8, v1296, v1295, v1294, v1290);
              int v1296 = a10;
              int v1295 = a11;
              uint64_t v1294 = a13;
              uint64_t v1293 = a15;
              uint64_t v1292 = a16;
              uint64_t v1291 = v28;
              int v1290 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x20:
        uint64_t v3019 = *(unsigned __int8 *)(a1 + 380);
        int v623 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3019 == 1)
        {
          if (v623 == 4)
          {
            char v1899 = a17;
            if (a12)
            {
              uint64_t v1900 = v28;
              uint64_t v1901 = a16;
              uint64_t v1902 = a15;
              uint64_t v1903 = a13;
              int v1904 = a11;
              int v1905 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1900 + a9 * v1902, a4 + a9 * v1901, a5, a6, a7, a8, v1905, v1904, v1903, v1899);
                int v1905 = a10;
                int v1904 = a11;
                uint64_t v1903 = a13;
                uint64_t v1902 = a15;
                uint64_t v1901 = a16;
                uint64_t v1900 = v28;
                char v1899 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v624 = a17;
            if (!v623 && a12)
            {
              uint64_t v625 = v28;
              uint64_t v626 = a16;
              uint64_t v627 = a15;
              uint64_t v628 = a13;
              int v629 = a11;
              int v630 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v625 + a9 * v627, a4 + a9 * v626, a5, a6, a7, a8, v630, v629, v628, v624);
                int v630 = a10;
                int v629 = a11;
                uint64_t v628 = a13;
                uint64_t v627 = a15;
                uint64_t v626 = a16;
                uint64_t v625 = v28;
                char v624 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v623 == 4)
        {
          int v2501 = a17;
          if (a12)
          {
            uint64_t v2502 = v28;
            uint64_t v2503 = a16;
            uint64_t v2504 = a15;
            uint64_t v2505 = a13;
            int v2506 = a11;
            int v2507 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2502 + a9 * v2504, a4 + a9 * v2503, a5, a6, a7, a8, v2507, v2506, v2505, v2501);
              int v2507 = a10;
              int v2506 = a11;
              uint64_t v2505 = a13;
              uint64_t v2504 = a15;
              uint64_t v2503 = a16;
              uint64_t v2502 = v28;
              int v2501 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1297 = a17;
          if (!v623 && a12)
          {
            uint64_t v1298 = v28;
            uint64_t v1299 = a16;
            uint64_t v1300 = a15;
            uint64_t v1301 = a13;
            int v1302 = a11;
            int v1303 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1298 + a9 * v1300, a4 + a9 * v1299, a5, a6, a7, a8, v1303, v1302, v1301, v1297);
              int v1303 = a10;
              int v1302 = a11;
              uint64_t v1301 = a13;
              uint64_t v1300 = a15;
              uint64_t v1299 = a16;
              uint64_t v1298 = v28;
              int v1297 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x21:
        uint64_t v3020 = *(unsigned __int8 *)(a1 + 380);
        int v631 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3020 == 1)
        {
          if (v631 == 4)
          {
            char v1906 = a17;
            if (a12)
            {
              uint64_t v1907 = v28;
              uint64_t v1908 = a16;
              uint64_t v1909 = a15;
              uint64_t v1910 = a13;
              int v1911 = a11;
              int v1912 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1907 + a9 * v1909, a4 + a9 * v1908, a5, a6, a7, a8, v1912, v1911, v1910, v1906);
                int v1912 = a10;
                int v1911 = a11;
                uint64_t v1910 = a13;
                uint64_t v1909 = a15;
                uint64_t v1908 = a16;
                uint64_t v1907 = v28;
                char v1906 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v632 = a17;
            if (!v631 && a12)
            {
              uint64_t v633 = v28;
              uint64_t v634 = a16;
              uint64_t v635 = a15;
              uint64_t v636 = a13;
              int v637 = a11;
              int v638 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v633 + a9 * v635, a4 + a9 * v634, a5, a6, a7, a8, v638, v637, v636, v632);
                int v638 = a10;
                int v637 = a11;
                uint64_t v636 = a13;
                uint64_t v635 = a15;
                uint64_t v634 = a16;
                uint64_t v633 = v28;
                char v632 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v631 == 4)
        {
          int v2508 = a17;
          if (a12)
          {
            uint64_t v2509 = v28;
            uint64_t v2510 = a16;
            uint64_t v2511 = a15;
            uint64_t v2512 = a13;
            int v2513 = a11;
            int v2514 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2509 + a9 * v2511, a4 + a9 * v2510, a5, a6, a7, a8, v2514, v2513, v2512, v2508);
              int v2514 = a10;
              int v2513 = a11;
              uint64_t v2512 = a13;
              uint64_t v2511 = a15;
              uint64_t v2510 = a16;
              uint64_t v2509 = v28;
              int v2508 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1304 = a17;
          if (!v631 && a12)
          {
            uint64_t v1305 = v28;
            uint64_t v1306 = a16;
            uint64_t v1307 = a15;
            uint64_t v1308 = a13;
            int v1309 = a11;
            int v1310 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1305 + a9 * v1307, a4 + a9 * v1306, a5, a6, a7, a8, v1310, v1309, v1308, v1304);
              int v1310 = a10;
              int v1309 = a11;
              uint64_t v1308 = a13;
              uint64_t v1307 = a15;
              uint64_t v1306 = a16;
              uint64_t v1305 = v28;
              int v1304 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22:
        uint64_t v3021 = *(unsigned __int8 *)(a1 + 380);
        int v639 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3021 == 1)
        {
          if (v639 == 4)
          {
            char v1913 = a17;
            if (a12)
            {
              uint64_t v1914 = v28;
              uint64_t v1915 = a16;
              uint64_t v1916 = a15;
              uint64_t v1917 = a13;
              int v1918 = a11;
              int v1919 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1914 + a9 * v1916, a4 + a9 * v1915, a5, a6, a7, a8, v1919, v1918, v1917, v1913);
                int v1919 = a10;
                int v1918 = a11;
                uint64_t v1917 = a13;
                uint64_t v1916 = a15;
                uint64_t v1915 = a16;
                uint64_t v1914 = v28;
                char v1913 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v640 = a17;
            if (!v639 && a12)
            {
              uint64_t v641 = v28;
              uint64_t v642 = a16;
              uint64_t v643 = a15;
              uint64_t v644 = a13;
              int v645 = a11;
              int v646 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v641 + a9 * v643, a4 + a9 * v642, a5, a6, a7, a8, v646, v645, v644, v640);
                int v646 = a10;
                int v645 = a11;
                uint64_t v644 = a13;
                uint64_t v643 = a15;
                uint64_t v642 = a16;
                uint64_t v641 = v28;
                char v640 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v639 == 4)
        {
          int v2515 = a17;
          if (a12)
          {
            uint64_t v2516 = v28;
            uint64_t v2517 = a16;
            uint64_t v2518 = a15;
            uint64_t v2519 = a13;
            int v2520 = a11;
            int v2521 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2516 + a9 * v2518, a4 + a9 * v2517, a5, a6, a7, a8, v2521, v2520, v2519, v2515);
              int v2521 = a10;
              int v2520 = a11;
              uint64_t v2519 = a13;
              uint64_t v2518 = a15;
              uint64_t v2517 = a16;
              uint64_t v2516 = v28;
              int v2515 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1311 = a17;
          if (!v639 && a12)
          {
            uint64_t v1312 = v28;
            uint64_t v1313 = a16;
            uint64_t v1314 = a15;
            uint64_t v1315 = a13;
            int v1316 = a11;
            int v1317 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1312 + a9 * v1314, a4 + a9 * v1313, a5, a6, a7, a8, v1317, v1316, v1315, v1311);
              int v1317 = a10;
              int v1316 = a11;
              uint64_t v1315 = a13;
              uint64_t v1314 = a15;
              uint64_t v1313 = a16;
              uint64_t v1312 = v28;
              int v1311 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x28:
        uint64_t v3022 = *(unsigned __int8 *)(a1 + 380);
        int v647 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3022 == 1)
        {
          if (v647 == 4)
          {
            char v1920 = a17;
            if (a12)
            {
              uint64_t v1921 = v28;
              uint64_t v1922 = a16;
              uint64_t v1923 = a15;
              uint64_t v1924 = a13;
              int v1925 = a11;
              int v1926 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1921 + a9 * v1923, a4 + a9 * v1922, a5, a6, a7, a8, v1926, v1925, v1924, v1920);
                int v1926 = a10;
                int v1925 = a11;
                uint64_t v1924 = a13;
                uint64_t v1923 = a15;
                uint64_t v1922 = a16;
                uint64_t v1921 = v28;
                char v1920 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v648 = a17;
            if (!v647 && a12)
            {
              uint64_t v649 = v28;
              uint64_t v650 = a16;
              uint64_t v651 = a15;
              uint64_t v652 = a13;
              int v653 = a11;
              int v654 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v649 + a9 * v651, a4 + a9 * v650, a5, a6, a7, a8, v654, v653, v652, v648);
                int v654 = a10;
                int v653 = a11;
                uint64_t v652 = a13;
                uint64_t v651 = a15;
                uint64_t v650 = a16;
                uint64_t v649 = v28;
                char v648 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v647 == 4)
        {
          int v2522 = a17;
          if (a12)
          {
            uint64_t v2523 = v28;
            uint64_t v2524 = a16;
            uint64_t v2525 = a15;
            uint64_t v2526 = a13;
            int v2527 = a11;
            int v2528 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2523 + a9 * v2525, a4 + a9 * v2524, a5, a6, a7, a8, v2528, v2527, v2526, v2522);
              int v2528 = a10;
              int v2527 = a11;
              uint64_t v2526 = a13;
              uint64_t v2525 = a15;
              uint64_t v2524 = a16;
              uint64_t v2523 = v28;
              int v2522 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1318 = a17;
          if (!v647 && a12)
          {
            uint64_t v1319 = v28;
            uint64_t v1320 = a16;
            uint64_t v1321 = a15;
            uint64_t v1322 = a13;
            int v1323 = a11;
            int v1324 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1319 + a9 * v1321, a4 + a9 * v1320, a5, a6, a7, a8, v1324, v1323, v1322, v1318);
              int v1324 = a10;
              int v1323 = a11;
              uint64_t v1322 = a13;
              uint64_t v1321 = a15;
              uint64_t v1320 = a16;
              uint64_t v1319 = v28;
              int v1318 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x29:
        uint64_t v3023 = *(unsigned __int8 *)(a1 + 380);
        int v655 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3023 == 1)
        {
          if (v655 == 4)
          {
            char v1927 = a17;
            if (a12)
            {
              uint64_t v1928 = v28;
              uint64_t v1929 = a16;
              uint64_t v1930 = a15;
              uint64_t v1931 = a13;
              int v1932 = a11;
              int v1933 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1928 + a9 * v1930, a4 + a9 * v1929, a5, a6, a7, a8, v1933, v1932, v1931, v1927);
                int v1933 = a10;
                int v1932 = a11;
                uint64_t v1931 = a13;
                uint64_t v1930 = a15;
                uint64_t v1929 = a16;
                uint64_t v1928 = v28;
                char v1927 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v656 = a17;
            if (!v655 && a12)
            {
              uint64_t v657 = v28;
              uint64_t v658 = a16;
              uint64_t v659 = a15;
              uint64_t v660 = a13;
              int v661 = a11;
              int v662 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v657 + a9 * v659, a4 + a9 * v658, a5, a6, a7, a8, v662, v661, v660, v656);
                int v662 = a10;
                int v661 = a11;
                uint64_t v660 = a13;
                uint64_t v659 = a15;
                uint64_t v658 = a16;
                uint64_t v657 = v28;
                char v656 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v655 == 4)
        {
          int v2529 = a17;
          if (a12)
          {
            uint64_t v2530 = v28;
            uint64_t v2531 = a16;
            uint64_t v2532 = a15;
            uint64_t v2533 = a13;
            int v2534 = a11;
            int v2535 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2530 + a9 * v2532, a4 + a9 * v2531, a5, a6, a7, a8, v2535, v2534, v2533, v2529);
              int v2535 = a10;
              int v2534 = a11;
              uint64_t v2533 = a13;
              uint64_t v2532 = a15;
              uint64_t v2531 = a16;
              uint64_t v2530 = v28;
              int v2529 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1325 = a17;
          if (!v655 && a12)
          {
            uint64_t v1326 = v28;
            uint64_t v1327 = a16;
            uint64_t v1328 = a15;
            uint64_t v1329 = a13;
            int v1330 = a11;
            int v1331 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1326 + a9 * v1328, a4 + a9 * v1327, a5, a6, a7, a8, v1331, v1330, v1329, v1325);
              int v1331 = a10;
              int v1330 = a11;
              uint64_t v1329 = a13;
              uint64_t v1328 = a15;
              uint64_t v1327 = a16;
              uint64_t v1326 = v28;
              int v1325 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x2A:
        uint64_t v3024 = *(unsigned __int8 *)(a1 + 380);
        int v663 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3024 == 1)
        {
          if (v663 == 4)
          {
            char v1934 = a17;
            if (a12)
            {
              uint64_t v1935 = v28;
              uint64_t v1936 = a16;
              uint64_t v1937 = a15;
              uint64_t v1938 = a13;
              int v1939 = a11;
              int v1940 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1935 + a9 * v1937, a4 + a9 * v1936, a5, a6, a7, a8, v1940, v1939, v1938, v1934);
                int v1940 = a10;
                int v1939 = a11;
                uint64_t v1938 = a13;
                uint64_t v1937 = a15;
                uint64_t v1936 = a16;
                uint64_t v1935 = v28;
                char v1934 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v664 = a17;
            if (!v663 && a12)
            {
              uint64_t v665 = v28;
              uint64_t v666 = a16;
              uint64_t v667 = a15;
              uint64_t v668 = a13;
              int v669 = a11;
              int v670 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v665 + a9 * v667, a4 + a9 * v666, a5, a6, a7, a8, v670, v669, v668, v664);
                int v670 = a10;
                int v669 = a11;
                uint64_t v668 = a13;
                uint64_t v667 = a15;
                uint64_t v666 = a16;
                uint64_t v665 = v28;
                char v664 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v663 == 4)
        {
          int v2536 = a17;
          if (a12)
          {
            uint64_t v2537 = v28;
            uint64_t v2538 = a16;
            uint64_t v2539 = a15;
            uint64_t v2540 = a13;
            int v2541 = a11;
            int v2542 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2537 + a9 * v2539, a4 + a9 * v2538, a5, a6, a7, a8, v2542, v2541, v2540, v2536);
              int v2542 = a10;
              int v2541 = a11;
              uint64_t v2540 = a13;
              uint64_t v2539 = a15;
              uint64_t v2538 = a16;
              uint64_t v2537 = v28;
              int v2536 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1332 = a17;
          if (!v663 && a12)
          {
            uint64_t v1333 = v28;
            uint64_t v1334 = a16;
            uint64_t v1335 = a15;
            uint64_t v1336 = a13;
            int v1337 = a11;
            int v1338 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1333 + a9 * v1335, a4 + a9 * v1334, a5, a6, a7, a8, v1338, v1337, v1336, v1332);
              int v1338 = a10;
              int v1337 = a11;
              uint64_t v1336 = a13;
              uint64_t v1335 = a15;
              uint64_t v1334 = a16;
              uint64_t v1333 = v28;
              int v1332 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x2B:
        uint64_t v3025 = *(unsigned __int8 *)(a1 + 380);
        int v671 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3025 == 1)
        {
          if (v671 == 4)
          {
            char v1941 = a17;
            if (a12)
            {
              uint64_t v1942 = v28;
              uint64_t v1943 = a16;
              uint64_t v1944 = a15;
              uint64_t v1945 = a13;
              int v1946 = a11;
              int v1947 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1942 + a9 * v1944, a4 + a9 * v1943, a5, a6, a7, a8, v1947, v1946, v1945, v1941);
                int v1947 = a10;
                int v1946 = a11;
                uint64_t v1945 = a13;
                uint64_t v1944 = a15;
                uint64_t v1943 = a16;
                uint64_t v1942 = v28;
                char v1941 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v672 = a17;
            if (!v671 && a12)
            {
              uint64_t v673 = v28;
              uint64_t v674 = a16;
              uint64_t v675 = a15;
              uint64_t v676 = a13;
              int v677 = a11;
              int v678 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v673 + a9 * v675, a4 + a9 * v674, a5, a6, a7, a8, v678, v677, v676, v672);
                int v678 = a10;
                int v677 = a11;
                uint64_t v676 = a13;
                uint64_t v675 = a15;
                uint64_t v674 = a16;
                uint64_t v673 = v28;
                char v672 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v671 == 4)
        {
          int v2543 = a17;
          if (a12)
          {
            uint64_t v2544 = v28;
            uint64_t v2545 = a16;
            uint64_t v2546 = a15;
            uint64_t v2547 = a13;
            int v2548 = a11;
            int v2549 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2544 + a9 * v2546, a4 + a9 * v2545, a5, a6, a7, a8, v2549, v2548, v2547, v2543);
              int v2549 = a10;
              int v2548 = a11;
              uint64_t v2547 = a13;
              uint64_t v2546 = a15;
              uint64_t v2545 = a16;
              uint64_t v2544 = v28;
              int v2543 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1339 = a17;
          if (!v671 && a12)
          {
            uint64_t v1340 = v28;
            uint64_t v1341 = a16;
            uint64_t v1342 = a15;
            uint64_t v1343 = a13;
            int v1344 = a11;
            int v1345 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1340 + a9 * v1342, a4 + a9 * v1341, a5, a6, a7, a8, v1345, v1344, v1343, v1339);
              int v1345 = a10;
              int v1344 = a11;
              uint64_t v1343 = a13;
              uint64_t v1342 = a15;
              uint64_t v1341 = a16;
              uint64_t v1340 = v28;
              int v1339 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x2C:
        uint64_t v3026 = *(unsigned __int8 *)(a1 + 380);
        int v679 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3026 == 1)
        {
          if (v679 == 4)
          {
            char v1948 = a17;
            if (a12)
            {
              uint64_t v1949 = v28;
              uint64_t v1950 = a16;
              uint64_t v1951 = a15;
              uint64_t v1952 = a13;
              int v1953 = a11;
              int v1954 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1949 + a9 * v1951, a4 + a9 * v1950, a5, a6, a7, a8, v1954, v1953, v1952, v1948);
                int v1954 = a10;
                int v1953 = a11;
                uint64_t v1952 = a13;
                uint64_t v1951 = a15;
                uint64_t v1950 = a16;
                uint64_t v1949 = v28;
                char v1948 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v680 = a17;
            if (!v679 && a12)
            {
              uint64_t v681 = v28;
              uint64_t v682 = a16;
              uint64_t v683 = a15;
              uint64_t v684 = a13;
              int v685 = a11;
              int v686 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v681 + a9 * v683, a4 + a9 * v682, a5, a6, a7, a8, v686, v685, v684, v680);
                int v686 = a10;
                int v685 = a11;
                uint64_t v684 = a13;
                uint64_t v683 = a15;
                uint64_t v682 = a16;
                uint64_t v681 = v28;
                char v680 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v679 == 4)
        {
          int v2550 = a17;
          if (a12)
          {
            uint64_t v2551 = v28;
            uint64_t v2552 = a16;
            uint64_t v2553 = a15;
            uint64_t v2554 = a13;
            int v2555 = a11;
            int v2556 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2551 + a9 * v2553, a4 + a9 * v2552, a5, a6, a7, a8, v2556, v2555, v2554, v2550);
              int v2556 = a10;
              int v2555 = a11;
              uint64_t v2554 = a13;
              uint64_t v2553 = a15;
              uint64_t v2552 = a16;
              uint64_t v2551 = v28;
              int v2550 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1346 = a17;
          if (!v679 && a12)
          {
            uint64_t v1347 = v28;
            uint64_t v1348 = a16;
            uint64_t v1349 = a15;
            uint64_t v1350 = a13;
            int v1351 = a11;
            int v1352 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1347 + a9 * v1349, a4 + a9 * v1348, a5, a6, a7, a8, v1352, v1351, v1350, v1346);
              int v1352 = a10;
              int v1351 = a11;
              uint64_t v1350 = a13;
              uint64_t v1349 = a15;
              uint64_t v1348 = a16;
              uint64_t v1347 = v28;
              int v1346 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x35:
        uint64_t v3027 = *(unsigned __int8 *)(a1 + 380);
        int v687 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3027 == 1)
        {
          if (v687 == 4)
          {
            char v1955 = a17;
            if (a12)
            {
              uint64_t v1956 = v28;
              uint64_t v1957 = a16;
              uint64_t v1958 = a15;
              uint64_t v1959 = a13;
              int v1960 = a11;
              int v1961 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1956 + a9 * v1958, a4 + a9 * v1957, a5, a6, a7, a8, v1961, v1960, v1959, v1955);
                int v1961 = a10;
                int v1960 = a11;
                uint64_t v1959 = a13;
                uint64_t v1958 = a15;
                uint64_t v1957 = a16;
                uint64_t v1956 = v28;
                char v1955 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v688 = a17;
            if (!v687 && a12)
            {
              uint64_t v689 = v28;
              uint64_t v690 = a16;
              uint64_t v691 = a15;
              uint64_t v692 = a13;
              int v693 = a11;
              int v694 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v689 + a9 * v691, a4 + a9 * v690, a5, a6, a7, a8, v694, v693, v692, v688);
                int v694 = a10;
                int v693 = a11;
                uint64_t v692 = a13;
                uint64_t v691 = a15;
                uint64_t v690 = a16;
                uint64_t v689 = v28;
                char v688 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v687 == 4)
        {
          int v2557 = a17;
          if (a12)
          {
            uint64_t v2558 = v28;
            uint64_t v2559 = a16;
            uint64_t v2560 = a15;
            uint64_t v2561 = a13;
            int v2562 = a11;
            int v2563 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2558 + a9 * v2560, a4 + a9 * v2559, a5, a6, a7, a8, v2563, v2562, v2561, v2557);
              int v2563 = a10;
              int v2562 = a11;
              uint64_t v2561 = a13;
              uint64_t v2560 = a15;
              uint64_t v2559 = a16;
              uint64_t v2558 = v28;
              int v2557 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1353 = a17;
          if (!v687 && a12)
          {
            uint64_t v1354 = v28;
            uint64_t v1355 = a16;
            uint64_t v1356 = a15;
            uint64_t v1357 = a13;
            int v1358 = a11;
            int v1359 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1354 + a9 * v1356, a4 + a9 * v1355, a5, a6, a7, a8, v1359, v1358, v1357, v1353);
              int v1359 = a10;
              int v1358 = a11;
              uint64_t v1357 = a13;
              uint64_t v1356 = a15;
              uint64_t v1355 = a16;
              uint64_t v1354 = v28;
              int v1353 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x36:
        uint64_t v3028 = *(unsigned __int8 *)(a1 + 380);
        int v695 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3028 == 1)
        {
          if (v695 == 4)
          {
            char v1962 = a17;
            if (a12)
            {
              uint64_t v1963 = v28;
              uint64_t v1964 = a16;
              uint64_t v1965 = a15;
              uint64_t v1966 = a13;
              int v1967 = a11;
              int v1968 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1963 + a9 * v1965, a4 + a9 * v1964, a5, a6, a7, a8, v1968, v1967, v1966, v1962);
                int v1968 = a10;
                int v1967 = a11;
                uint64_t v1966 = a13;
                uint64_t v1965 = a15;
                uint64_t v1964 = a16;
                uint64_t v1963 = v28;
                char v1962 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v696 = a17;
            if (!v695 && a12)
            {
              uint64_t v697 = v28;
              uint64_t v698 = a16;
              uint64_t v699 = a15;
              uint64_t v700 = a13;
              int v701 = a11;
              int v702 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v697 + a9 * v699, a4 + a9 * v698, a5, a6, a7, a8, v702, v701, v700, v696);
                int v702 = a10;
                int v701 = a11;
                uint64_t v700 = a13;
                uint64_t v699 = a15;
                uint64_t v698 = a16;
                uint64_t v697 = v28;
                char v696 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v695 == 4)
        {
          int v2564 = a17;
          if (a12)
          {
            uint64_t v2565 = v28;
            uint64_t v2566 = a16;
            uint64_t v2567 = a15;
            uint64_t v2568 = a13;
            int v2569 = a11;
            int v2570 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2565 + a9 * v2567, a4 + a9 * v2566, a5, a6, a7, a8, v2570, v2569, v2568, v2564);
              int v2570 = a10;
              int v2569 = a11;
              uint64_t v2568 = a13;
              uint64_t v2567 = a15;
              uint64_t v2566 = a16;
              uint64_t v2565 = v28;
              int v2564 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1360 = a17;
          if (!v695 && a12)
          {
            uint64_t v1361 = v28;
            uint64_t v1362 = a16;
            uint64_t v1363 = a15;
            uint64_t v1364 = a13;
            int v1365 = a11;
            int v1366 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1361 + a9 * v1363, a4 + a9 * v1362, a5, a6, a7, a8, v1366, v1365, v1364, v1360);
              int v1366 = a10;
              int v1365 = a11;
              uint64_t v1364 = a13;
              uint64_t v1363 = a15;
              uint64_t v1362 = a16;
              uint64_t v1361 = v28;
              int v1360 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x37:
        uint64_t v3029 = *(unsigned __int8 *)(a1 + 380);
        int v703 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3029 == 1)
        {
          if (v703 == 4)
          {
            char v1969 = a17;
            if (a12)
            {
              uint64_t v1970 = v28;
              uint64_t v1971 = a16;
              uint64_t v1972 = a15;
              uint64_t v1973 = a13;
              int v1974 = a11;
              int v1975 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1970 + a9 * v1972, a4 + a9 * v1971, a5, a6, a7, a8, v1975, v1974, v1973, v1969);
                int v1975 = a10;
                int v1974 = a11;
                uint64_t v1973 = a13;
                uint64_t v1972 = a15;
                uint64_t v1971 = a16;
                uint64_t v1970 = v28;
                char v1969 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v704 = a17;
            if (!v703 && a12)
            {
              uint64_t v705 = v28;
              uint64_t v706 = a16;
              uint64_t v707 = a15;
              uint64_t v708 = a13;
              int v709 = a11;
              int v710 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v705 + a9 * v707, a4 + a9 * v706, a5, a6, a7, a8, v710, v709, v708, v704);
                int v710 = a10;
                int v709 = a11;
                uint64_t v708 = a13;
                uint64_t v707 = a15;
                uint64_t v706 = a16;
                uint64_t v705 = v28;
                char v704 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v703 == 4)
        {
          int v2571 = a17;
          if (a12)
          {
            uint64_t v2572 = v28;
            uint64_t v2573 = a16;
            uint64_t v2574 = a15;
            uint64_t v2575 = a13;
            int v2576 = a11;
            int v2577 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2572 + a9 * v2574, a4 + a9 * v2573, a5, a6, a7, a8, v2577, v2576, v2575, v2571);
              int v2577 = a10;
              int v2576 = a11;
              uint64_t v2575 = a13;
              uint64_t v2574 = a15;
              uint64_t v2573 = a16;
              uint64_t v2572 = v28;
              int v2571 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1367 = a17;
          if (!v703 && a12)
          {
            uint64_t v1368 = v28;
            uint64_t v1369 = a16;
            uint64_t v1370 = a15;
            uint64_t v1371 = a13;
            int v1372 = a11;
            int v1373 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1368 + a9 * v1370, a4 + a9 * v1369, a5, a6, a7, a8, v1373, v1372, v1371, v1367);
              int v1373 = a10;
              int v1372 = a11;
              uint64_t v1371 = a13;
              uint64_t v1370 = a15;
              uint64_t v1369 = a16;
              uint64_t v1368 = v28;
              int v1367 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x3C:
        uint64_t v3030 = *(unsigned __int8 *)(a1 + 380);
        int v711 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3030 == 1)
        {
          if (v711 == 4)
          {
            char v1976 = a17;
            if (a12)
            {
              uint64_t v1977 = v28;
              uint64_t v1978 = a16;
              uint64_t v1979 = a15;
              uint64_t v1980 = a13;
              int v1981 = a11;
              int v1982 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1977 + a9 * v1979, a4 + a9 * v1978, a5, a6, a7, a8, v1982, v1981, v1980, v1976);
                int v1982 = a10;
                int v1981 = a11;
                uint64_t v1980 = a13;
                uint64_t v1979 = a15;
                uint64_t v1978 = a16;
                uint64_t v1977 = v28;
                char v1976 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v712 = a17;
            if (!v711 && a12)
            {
              uint64_t v713 = v28;
              uint64_t v714 = a16;
              uint64_t v715 = a15;
              uint64_t v716 = a13;
              int v717 = a11;
              int v718 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v713 + a9 * v715, a4 + a9 * v714, a5, a6, a7, a8, v718, v717, v716, v712);
                int v718 = a10;
                int v717 = a11;
                uint64_t v716 = a13;
                uint64_t v715 = a15;
                uint64_t v714 = a16;
                uint64_t v713 = v28;
                char v712 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v711 == 4)
        {
          int v2578 = a17;
          if (a12)
          {
            uint64_t v2579 = v28;
            uint64_t v2580 = a16;
            uint64_t v2581 = a15;
            uint64_t v2582 = a13;
            int v2583 = a11;
            int v2584 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2579 + a9 * v2581, a4 + a9 * v2580, a5, a6, a7, a8, v2584, v2583, v2582, v2578);
              int v2584 = a10;
              int v2583 = a11;
              uint64_t v2582 = a13;
              uint64_t v2581 = a15;
              uint64_t v2580 = a16;
              uint64_t v2579 = v28;
              int v2578 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1374 = a17;
          if (!v711 && a12)
          {
            uint64_t v1375 = v28;
            uint64_t v1376 = a16;
            uint64_t v1377 = a15;
            uint64_t v1378 = a13;
            int v1379 = a11;
            int v1380 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1375 + a9 * v1377, a4 + a9 * v1376, a5, a6, a7, a8, v1380, v1379, v1378, v1374);
              int v1380 = a10;
              int v1379 = a11;
              uint64_t v1378 = a13;
              uint64_t v1377 = a15;
              uint64_t v1376 = a16;
              uint64_t v1375 = v28;
              int v1374 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x3E:
        uint64_t v3031 = *(unsigned __int8 *)(a1 + 380);
        int v719 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3031 == 1)
        {
          if (v719 == 4)
          {
            char v1983 = a17;
            if (a12)
            {
              uint64_t v1984 = v28;
              uint64_t v1985 = a16;
              uint64_t v1986 = a15;
              uint64_t v1987 = a13;
              int v1988 = a11;
              int v1989 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1984 + a9 * v1986, a4 + a9 * v1985, a5, a6, a7, a8, v1989, v1988, v1987, v1983);
                int v1989 = a10;
                int v1988 = a11;
                uint64_t v1987 = a13;
                uint64_t v1986 = a15;
                uint64_t v1985 = a16;
                uint64_t v1984 = v28;
                char v1983 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v720 = a17;
            if (!v719 && a12)
            {
              uint64_t v721 = v28;
              uint64_t v722 = a16;
              uint64_t v723 = a15;
              uint64_t v724 = a13;
              int v725 = a11;
              int v726 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v721 + a9 * v723, a4 + a9 * v722, a5, a6, a7, a8, v726, v725, v724, v720);
                int v726 = a10;
                int v725 = a11;
                uint64_t v724 = a13;
                uint64_t v723 = a15;
                uint64_t v722 = a16;
                uint64_t v721 = v28;
                char v720 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v719 == 4)
        {
          int v2585 = a17;
          if (a12)
          {
            uint64_t v2586 = v28;
            uint64_t v2587 = a16;
            uint64_t v2588 = a15;
            uint64_t v2589 = a13;
            int v2590 = a11;
            int v2591 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2586 + a9 * v2588, a4 + a9 * v2587, a5, a6, a7, a8, v2591, v2590, v2589, v2585);
              int v2591 = a10;
              int v2590 = a11;
              uint64_t v2589 = a13;
              uint64_t v2588 = a15;
              uint64_t v2587 = a16;
              uint64_t v2586 = v28;
              int v2585 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1381 = a17;
          if (!v719 && a12)
          {
            uint64_t v1382 = v28;
            uint64_t v1383 = a16;
            uint64_t v1384 = a15;
            uint64_t v1385 = a13;
            int v1386 = a11;
            int v1387 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1382 + a9 * v1384, a4 + a9 * v1383, a5, a6, a7, a8, v1387, v1386, v1385, v1381);
              int v1387 = a10;
              int v1386 = a11;
              uint64_t v1385 = a13;
              uint64_t v1384 = a15;
              uint64_t v1383 = a16;
              uint64_t v1382 = v28;
              int v1381 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x3F:
        uint64_t v3032 = *(unsigned __int8 *)(a1 + 380);
        int v727 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3032 == 1)
        {
          if (v727 == 4)
          {
            char v1990 = a17;
            if (a12)
            {
              uint64_t v1991 = v28;
              uint64_t v1992 = a16;
              uint64_t v1993 = a15;
              uint64_t v1994 = a13;
              int v1995 = a11;
              int v1996 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1991 + a9 * v1993, a4 + a9 * v1992, a5, a6, a7, a8, v1996, v1995, v1994, v1990);
                int v1996 = a10;
                int v1995 = a11;
                uint64_t v1994 = a13;
                uint64_t v1993 = a15;
                uint64_t v1992 = a16;
                uint64_t v1991 = v28;
                char v1990 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v728 = a17;
            if (!v727 && a12)
            {
              uint64_t v729 = v28;
              uint64_t v730 = a16;
              uint64_t v731 = a15;
              uint64_t v732 = a13;
              int v733 = a11;
              int v734 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v729 + a9 * v731, a4 + a9 * v730, a5, a6, a7, a8, v734, v733, v732, v728);
                int v734 = a10;
                int v733 = a11;
                uint64_t v732 = a13;
                uint64_t v731 = a15;
                uint64_t v730 = a16;
                uint64_t v729 = v28;
                char v728 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v727 == 4)
        {
          int v2592 = a17;
          if (a12)
          {
            uint64_t v2593 = v28;
            uint64_t v2594 = a16;
            uint64_t v2595 = a15;
            uint64_t v2596 = a13;
            int v2597 = a11;
            int v2598 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2593 + a9 * v2595, a4 + a9 * v2594, a5, a6, a7, a8, v2598, v2597, v2596, v2592);
              int v2598 = a10;
              int v2597 = a11;
              uint64_t v2596 = a13;
              uint64_t v2595 = a15;
              uint64_t v2594 = a16;
              uint64_t v2593 = v28;
              int v2592 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1388 = a17;
          if (!v727 && a12)
          {
            uint64_t v1389 = v28;
            uint64_t v1390 = a16;
            uint64_t v1391 = a15;
            uint64_t v1392 = a13;
            int v1393 = a11;
            int v1394 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1389 + a9 * v1391, a4 + a9 * v1390, a5, a6, a7, a8, v1394, v1393, v1392, v1388);
              int v1394 = a10;
              int v1393 = a11;
              uint64_t v1392 = a13;
              uint64_t v1391 = a15;
              uint64_t v1390 = a16;
              uint64_t v1389 = v28;
              int v1388 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x40:
        uint64_t v3033 = *(unsigned __int8 *)(a1 + 380);
        int v735 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3033 == 1)
        {
          if (v735 == 4)
          {
            char v1997 = a17;
            if (a12)
            {
              uint64_t v1998 = v28;
              uint64_t v1999 = a16;
              uint64_t v2000 = a15;
              uint64_t v2001 = a13;
              int v2002 = a11;
              int v2003 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1998 + a9 * v2000, a4 + a9 * v1999, a5, a6, a7, a8, v2003, v2002, v2001, v1997);
                int v2003 = a10;
                int v2002 = a11;
                uint64_t v2001 = a13;
                uint64_t v2000 = a15;
                uint64_t v1999 = a16;
                uint64_t v1998 = v28;
                char v1997 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v736 = a17;
            if (!v735 && a12)
            {
              uint64_t v737 = v28;
              uint64_t v738 = a16;
              uint64_t v739 = a15;
              uint64_t v740 = a13;
              int v741 = a11;
              int v742 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v737 + a9 * v739, a4 + a9 * v738, a5, a6, a7, a8, v742, v741, v740, v736);
                int v742 = a10;
                int v741 = a11;
                uint64_t v740 = a13;
                uint64_t v739 = a15;
                uint64_t v738 = a16;
                uint64_t v737 = v28;
                char v736 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v735 == 4)
        {
          int v2599 = a17;
          if (a12)
          {
            uint64_t v2600 = v28;
            uint64_t v2601 = a16;
            uint64_t v2602 = a15;
            uint64_t v2603 = a13;
            int v2604 = a11;
            int v2605 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2600 + a9 * v2602, a4 + a9 * v2601, a5, a6, a7, a8, v2605, v2604, v2603, v2599);
              int v2605 = a10;
              int v2604 = a11;
              uint64_t v2603 = a13;
              uint64_t v2602 = a15;
              uint64_t v2601 = a16;
              uint64_t v2600 = v28;
              int v2599 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1395 = a17;
          if (!v735 && a12)
          {
            uint64_t v1396 = v28;
            uint64_t v1397 = a16;
            uint64_t v1398 = a15;
            uint64_t v1399 = a13;
            int v1400 = a11;
            int v1401 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1396 + a9 * v1398, a4 + a9 * v1397, a5, a6, a7, a8, v1401, v1400, v1399, v1395);
              int v1401 = a10;
              int v1400 = a11;
              uint64_t v1399 = a13;
              uint64_t v1398 = a15;
              uint64_t v1397 = a16;
              uint64_t v1396 = v28;
              int v1395 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x41:
        uint64_t v3034 = *(unsigned __int8 *)(a1 + 380);
        int v743 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3034 == 1)
        {
          if (v743 == 4)
          {
            char v2004 = a17;
            if (a12)
            {
              uint64_t v2005 = v28;
              uint64_t v2006 = a16;
              uint64_t v2007 = a15;
              uint64_t v2008 = a13;
              int v2009 = a11;
              int v2010 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2005 + a9 * v2007, a4 + a9 * v2006, a5, a6, a7, a8, v2010, v2009, v2008, v2004);
                int v2010 = a10;
                int v2009 = a11;
                uint64_t v2008 = a13;
                uint64_t v2007 = a15;
                uint64_t v2006 = a16;
                uint64_t v2005 = v28;
                char v2004 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v744 = a17;
            if (!v743 && a12)
            {
              uint64_t v745 = v28;
              uint64_t v746 = a16;
              uint64_t v747 = a15;
              uint64_t v748 = a13;
              int v749 = a11;
              int v750 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v745 + a9 * v747, a4 + a9 * v746, a5, a6, a7, a8, v750, v749, v748, v744);
                int v750 = a10;
                int v749 = a11;
                uint64_t v748 = a13;
                uint64_t v747 = a15;
                uint64_t v746 = a16;
                uint64_t v745 = v28;
                char v744 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v743 == 4)
        {
          int v2606 = a17;
          if (a12)
          {
            uint64_t v2607 = v28;
            uint64_t v2608 = a16;
            uint64_t v2609 = a15;
            uint64_t v2610 = a13;
            int v2611 = a11;
            int v2612 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2607 + a9 * v2609, a4 + a9 * v2608, a5, a6, a7, a8, v2612, v2611, v2610, v2606);
              int v2612 = a10;
              int v2611 = a11;
              uint64_t v2610 = a13;
              uint64_t v2609 = a15;
              uint64_t v2608 = a16;
              uint64_t v2607 = v28;
              int v2606 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1402 = a17;
          if (!v743 && a12)
          {
            uint64_t v1403 = v28;
            uint64_t v1404 = a16;
            uint64_t v1405 = a15;
            uint64_t v1406 = a13;
            int v1407 = a11;
            int v1408 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1403 + a9 * v1405, a4 + a9 * v1404, a5, a6, a7, a8, v1408, v1407, v1406, v1402);
              int v1408 = a10;
              int v1407 = a11;
              uint64_t v1406 = a13;
              uint64_t v1405 = a15;
              uint64_t v1404 = a16;
              uint64_t v1403 = v28;
              int v1402 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x42:
        uint64_t v3035 = *(unsigned __int8 *)(a1 + 380);
        int v751 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3035 == 1)
        {
          if (v751 == 4)
          {
            char v2011 = a17;
            if (a12)
            {
              uint64_t v2012 = v28;
              uint64_t v2013 = a16;
              uint64_t v2014 = a15;
              uint64_t v2015 = a13;
              int v2016 = a11;
              int v2017 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2012 + a9 * v2014, a4 + a9 * v2013, a5, a6, a7, a8, v2017, v2016, v2015, v2011);
                int v2017 = a10;
                int v2016 = a11;
                uint64_t v2015 = a13;
                uint64_t v2014 = a15;
                uint64_t v2013 = a16;
                uint64_t v2012 = v28;
                char v2011 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v752 = a17;
            if (!v751 && a12)
            {
              uint64_t v753 = v28;
              uint64_t v754 = a16;
              uint64_t v755 = a15;
              uint64_t v756 = a13;
              int v757 = a11;
              int v758 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v753 + a9 * v755, a4 + a9 * v754, a5, a6, a7, a8, v758, v757, v756, v752);
                int v758 = a10;
                int v757 = a11;
                uint64_t v756 = a13;
                uint64_t v755 = a15;
                uint64_t v754 = a16;
                uint64_t v753 = v28;
                char v752 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v751 == 4)
        {
          int v2613 = a17;
          if (a12)
          {
            uint64_t v2614 = v28;
            uint64_t v2615 = a16;
            uint64_t v2616 = a15;
            uint64_t v2617 = a13;
            int v2618 = a11;
            int v2619 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2614 + a9 * v2616, a4 + a9 * v2615, a5, a6, a7, a8, v2619, v2618, v2617, v2613);
              int v2619 = a10;
              int v2618 = a11;
              uint64_t v2617 = a13;
              uint64_t v2616 = a15;
              uint64_t v2615 = a16;
              uint64_t v2614 = v28;
              int v2613 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1409 = a17;
          if (!v751 && a12)
          {
            uint64_t v1410 = v28;
            uint64_t v1411 = a16;
            uint64_t v1412 = a15;
            uint64_t v1413 = a13;
            int v1414 = a11;
            int v1415 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1410 + a9 * v1412, a4 + a9 * v1411, a5, a6, a7, a8, v1415, v1414, v1413, v1409);
              int v1415 = a10;
              int v1414 = a11;
              uint64_t v1413 = a13;
              uint64_t v1412 = a15;
              uint64_t v1411 = a16;
              uint64_t v1410 = v28;
              int v1409 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x46:
        uint64_t v3036 = *(unsigned __int8 *)(a1 + 380);
        int v759 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3036 == 1)
        {
          if (v759 == 4)
          {
            char v2018 = a17;
            if (a12)
            {
              uint64_t v2019 = v28;
              uint64_t v2020 = a16;
              uint64_t v2021 = a15;
              uint64_t v2022 = a13;
              int v2023 = a11;
              int v2024 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2019 + a9 * v2021, a4 + a9 * v2020, a5, a6, a7, a8, v2024, v2023, v2022, v2018);
                int v2024 = a10;
                int v2023 = a11;
                uint64_t v2022 = a13;
                uint64_t v2021 = a15;
                uint64_t v2020 = a16;
                uint64_t v2019 = v28;
                char v2018 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v760 = a17;
            if (!v759 && a12)
            {
              uint64_t v761 = v28;
              uint64_t v762 = a16;
              uint64_t v763 = a15;
              uint64_t v764 = a13;
              int v765 = a11;
              int v766 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v761 + a9 * v763, a4 + a9 * v762, a5, a6, a7, a8, v766, v765, v764, v760);
                int v766 = a10;
                int v765 = a11;
                uint64_t v764 = a13;
                uint64_t v763 = a15;
                uint64_t v762 = a16;
                uint64_t v761 = v28;
                char v760 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v759 == 4)
        {
          int v2620 = a17;
          if (a12)
          {
            uint64_t v2621 = v28;
            uint64_t v2622 = a16;
            uint64_t v2623 = a15;
            uint64_t v2624 = a13;
            int v2625 = a11;
            int v2626 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2621 + a9 * v2623, a4 + a9 * v2622, a5, a6, a7, a8, v2626, v2625, v2624, v2620);
              int v2626 = a10;
              int v2625 = a11;
              uint64_t v2624 = a13;
              uint64_t v2623 = a15;
              uint64_t v2622 = a16;
              uint64_t v2621 = v28;
              int v2620 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1416 = a17;
          if (!v759 && a12)
          {
            uint64_t v1417 = v28;
            uint64_t v1418 = a16;
            uint64_t v1419 = a15;
            uint64_t v1420 = a13;
            int v1421 = a11;
            int v1422 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1417 + a9 * v1419, a4 + a9 * v1418, a5, a6, a7, a8, v1422, v1421, v1420, v1416);
              int v1422 = a10;
              int v1421 = a11;
              uint64_t v1420 = a13;
              uint64_t v1419 = a15;
              uint64_t v1418 = a16;
              uint64_t v1417 = v28;
              int v1416 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x47:
        uint64_t v3037 = *(unsigned __int8 *)(a1 + 380);
        int v767 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3037 == 1)
        {
          if (v767 == 4)
          {
            char v2025 = a17;
            if (a12)
            {
              uint64_t v2026 = v28;
              uint64_t v2027 = a16;
              uint64_t v2028 = a15;
              uint64_t v2029 = a13;
              int v2030 = a11;
              int v2031 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2026 + a9 * v2028, a4 + a9 * v2027, a5, a6, a7, a8, v2031, v2030, v2029, v2025);
                int v2031 = a10;
                int v2030 = a11;
                uint64_t v2029 = a13;
                uint64_t v2028 = a15;
                uint64_t v2027 = a16;
                uint64_t v2026 = v28;
                char v2025 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v768 = a17;
            if (!v767 && a12)
            {
              uint64_t v769 = v28;
              uint64_t v770 = a16;
              uint64_t v771 = a15;
              uint64_t v772 = a13;
              int v773 = a11;
              int v774 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v769 + a9 * v771, a4 + a9 * v770, a5, a6, a7, a8, v774, v773, v772, v768);
                int v774 = a10;
                int v773 = a11;
                uint64_t v772 = a13;
                uint64_t v771 = a15;
                uint64_t v770 = a16;
                uint64_t v769 = v28;
                char v768 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v767 == 4)
        {
          int v2627 = a17;
          if (a12)
          {
            uint64_t v2628 = v28;
            uint64_t v2629 = a16;
            uint64_t v2630 = a15;
            uint64_t v2631 = a13;
            int v2632 = a11;
            int v2633 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2628 + a9 * v2630, a4 + a9 * v2629, a5, a6, a7, a8, v2633, v2632, v2631, v2627);
              int v2633 = a10;
              int v2632 = a11;
              uint64_t v2631 = a13;
              uint64_t v2630 = a15;
              uint64_t v2629 = a16;
              uint64_t v2628 = v28;
              int v2627 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1423 = a17;
          if (!v767 && a12)
          {
            uint64_t v1424 = v28;
            uint64_t v1425 = a16;
            uint64_t v1426 = a15;
            uint64_t v1427 = a13;
            int v1428 = a11;
            int v1429 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1424 + a9 * v1426, a4 + a9 * v1425, a5, a6, a7, a8, v1429, v1428, v1427, v1423);
              int v1429 = a10;
              int v1428 = a11;
              uint64_t v1427 = a13;
              uint64_t v1426 = a15;
              uint64_t v1425 = a16;
              uint64_t v1424 = v28;
              int v1423 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x48:
        uint64_t v3038 = *(unsigned __int8 *)(a1 + 380);
        int v775 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3038 == 1)
        {
          if (v775 == 4)
          {
            char v2032 = a17;
            if (a12)
            {
              uint64_t v2033 = v28;
              uint64_t v2034 = a16;
              uint64_t v2035 = a15;
              uint64_t v2036 = a13;
              int v2037 = a11;
              int v2038 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2033 + a9 * v2035, a4 + a9 * v2034, a5, a6, a7, a8, v2038, v2037, v2036, v2032);
                int v2038 = a10;
                int v2037 = a11;
                uint64_t v2036 = a13;
                uint64_t v2035 = a15;
                uint64_t v2034 = a16;
                uint64_t v2033 = v28;
                char v2032 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v776 = a17;
            if (!v775 && a12)
            {
              uint64_t v777 = v28;
              uint64_t v778 = a16;
              uint64_t v779 = a15;
              uint64_t v780 = a13;
              int v781 = a11;
              int v782 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v777 + a9 * v779, a4 + a9 * v778, a5, a6, a7, a8, v782, v781, v780, v776);
                int v782 = a10;
                int v781 = a11;
                uint64_t v780 = a13;
                uint64_t v779 = a15;
                uint64_t v778 = a16;
                uint64_t v777 = v28;
                char v776 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v775 == 4)
        {
          int v2634 = a17;
          if (a12)
          {
            uint64_t v2635 = v28;
            uint64_t v2636 = a16;
            uint64_t v2637 = a15;
            uint64_t v2638 = a13;
            int v2639 = a11;
            int v2640 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2635 + a9 * v2637, a4 + a9 * v2636, a5, a6, a7, a8, v2640, v2639, v2638, v2634);
              int v2640 = a10;
              int v2639 = a11;
              uint64_t v2638 = a13;
              uint64_t v2637 = a15;
              uint64_t v2636 = a16;
              uint64_t v2635 = v28;
              int v2634 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1430 = a17;
          if (!v775 && a12)
          {
            uint64_t v1431 = v28;
            uint64_t v1432 = a16;
            uint64_t v1433 = a15;
            uint64_t v1434 = a13;
            int v1435 = a11;
            int v1436 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1431 + a9 * v1433, a4 + a9 * v1432, a5, a6, a7, a8, v1436, v1435, v1434, v1430);
              int v1436 = a10;
              int v1435 = a11;
              uint64_t v1434 = a13;
              uint64_t v1433 = a15;
              uint64_t v1432 = a16;
              uint64_t v1431 = v28;
              int v1430 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x49:
        uint64_t v3039 = *(unsigned __int8 *)(a1 + 380);
        int v783 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3039 == 1)
        {
          if (v783 == 4)
          {
            char v2039 = a17;
            if (a12)
            {
              uint64_t v2040 = v28;
              uint64_t v2041 = a16;
              uint64_t v2042 = a15;
              uint64_t v2043 = a13;
              int v2044 = a11;
              int v2045 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2040 + a9 * v2042, a4 + a9 * v2041, a5, a6, a7, a8, v2045, v2044, v2043, v2039);
                int v2045 = a10;
                int v2044 = a11;
                uint64_t v2043 = a13;
                uint64_t v2042 = a15;
                uint64_t v2041 = a16;
                uint64_t v2040 = v28;
                char v2039 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v784 = a17;
            if (!v783 && a12)
            {
              uint64_t v785 = v28;
              uint64_t v786 = a16;
              uint64_t v787 = a15;
              uint64_t v788 = a13;
              int v789 = a11;
              int v790 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v785 + a9 * v787, a4 + a9 * v786, a5, a6, a7, a8, v790, v789, v788, v784);
                int v790 = a10;
                int v789 = a11;
                uint64_t v788 = a13;
                uint64_t v787 = a15;
                uint64_t v786 = a16;
                uint64_t v785 = v28;
                char v784 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v783 == 4)
        {
          int v2641 = a17;
          if (a12)
          {
            uint64_t v2642 = v28;
            uint64_t v2643 = a16;
            uint64_t v2644 = a15;
            uint64_t v2645 = a13;
            int v2646 = a11;
            int v2647 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2642 + a9 * v2644, a4 + a9 * v2643, a5, a6, a7, a8, v2647, v2646, v2645, v2641);
              int v2647 = a10;
              int v2646 = a11;
              uint64_t v2645 = a13;
              uint64_t v2644 = a15;
              uint64_t v2643 = a16;
              uint64_t v2642 = v28;
              int v2641 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1437 = a17;
          if (!v783 && a12)
          {
            uint64_t v1438 = v28;
            uint64_t v1439 = a16;
            uint64_t v1440 = a15;
            uint64_t v1441 = a13;
            int v1442 = a11;
            int v1443 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1438 + a9 * v1440, a4 + a9 * v1439, a5, a6, a7, a8, v1443, v1442, v1441, v1437);
              int v1443 = a10;
              int v1442 = a11;
              uint64_t v1441 = a13;
              uint64_t v1440 = a15;
              uint64_t v1439 = a16;
              uint64_t v1438 = v28;
              int v1437 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x4A:
        uint64_t v3040 = *(unsigned __int8 *)(a1 + 380);
        int v791 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3040 == 1)
        {
          if (v791 == 4)
          {
            char v2046 = a17;
            if (a12)
            {
              uint64_t v2047 = v28;
              uint64_t v2048 = a16;
              uint64_t v2049 = a15;
              uint64_t v2050 = a13;
              int v2051 = a11;
              int v2052 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2047 + a9 * v2049, a4 + a9 * v2048, a5, a6, a7, a8, v2052, v2051, v2050, v2046);
                int v2052 = a10;
                int v2051 = a11;
                uint64_t v2050 = a13;
                uint64_t v2049 = a15;
                uint64_t v2048 = a16;
                uint64_t v2047 = v28;
                char v2046 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v792 = a17;
            if (!v791 && a12)
            {
              uint64_t v793 = v28;
              uint64_t v794 = a16;
              uint64_t v795 = a15;
              uint64_t v796 = a13;
              int v797 = a11;
              int v798 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v793 + a9 * v795, a4 + a9 * v794, a5, a6, a7, a8, v798, v797, v796, v792);
                int v798 = a10;
                int v797 = a11;
                uint64_t v796 = a13;
                uint64_t v795 = a15;
                uint64_t v794 = a16;
                uint64_t v793 = v28;
                char v792 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v791 == 4)
        {
          int v2648 = a17;
          if (a12)
          {
            uint64_t v2649 = v28;
            uint64_t v2650 = a16;
            uint64_t v2651 = a15;
            uint64_t v2652 = a13;
            int v2653 = a11;
            int v2654 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2649 + a9 * v2651, a4 + a9 * v2650, a5, a6, a7, a8, v2654, v2653, v2652, v2648);
              int v2654 = a10;
              int v2653 = a11;
              uint64_t v2652 = a13;
              uint64_t v2651 = a15;
              uint64_t v2650 = a16;
              uint64_t v2649 = v28;
              int v2648 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1444 = a17;
          if (!v791 && a12)
          {
            uint64_t v1445 = v28;
            uint64_t v1446 = a16;
            uint64_t v1447 = a15;
            uint64_t v1448 = a13;
            int v1449 = a11;
            int v1450 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1445 + a9 * v1447, a4 + a9 * v1446, a5, a6, a7, a8, v1450, v1449, v1448, v1444);
              int v1450 = a10;
              int v1449 = a11;
              uint64_t v1448 = a13;
              uint64_t v1447 = a15;
              uint64_t v1446 = a16;
              uint64_t v1445 = v28;
              int v1444 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x50:
        uint64_t v3041 = *(unsigned __int8 *)(a1 + 380);
        int v799 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3041 == 1)
        {
          if (v799 == 4)
          {
            char v2053 = a17;
            if (a12)
            {
              uint64_t v2054 = v28;
              uint64_t v2055 = a16;
              uint64_t v2056 = a15;
              uint64_t v2057 = a13;
              int v2058 = a11;
              int v2059 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2054 + a9 * v2056, a4 + a9 * v2055, a5, a6, a7, a8, v2059, v2058, v2057, v2053);
                int v2059 = a10;
                int v2058 = a11;
                uint64_t v2057 = a13;
                uint64_t v2056 = a15;
                uint64_t v2055 = a16;
                uint64_t v2054 = v28;
                char v2053 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v800 = a17;
            if (!v799 && a12)
            {
              uint64_t v801 = v28;
              uint64_t v802 = a16;
              uint64_t v803 = a15;
              uint64_t v804 = a13;
              int v805 = a11;
              int v806 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v801 + a9 * v803, a4 + a9 * v802, a5, a6, a7, a8, v806, v805, v804, v800);
                int v806 = a10;
                int v805 = a11;
                uint64_t v804 = a13;
                uint64_t v803 = a15;
                uint64_t v802 = a16;
                uint64_t v801 = v28;
                char v800 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v799 == 4)
        {
          int v2655 = a17;
          if (a12)
          {
            uint64_t v2656 = v28;
            uint64_t v2657 = a16;
            uint64_t v2658 = a15;
            uint64_t v2659 = a13;
            int v2660 = a11;
            int v2661 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2656 + a9 * v2658, a4 + a9 * v2657, a5, a6, a7, a8, v2661, v2660, v2659, v2655);
              int v2661 = a10;
              int v2660 = a11;
              uint64_t v2659 = a13;
              uint64_t v2658 = a15;
              uint64_t v2657 = a16;
              uint64_t v2656 = v28;
              int v2655 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1451 = a17;
          if (!v799 && a12)
          {
            uint64_t v1452 = v28;
            uint64_t v1453 = a16;
            uint64_t v1454 = a15;
            uint64_t v1455 = a13;
            int v1456 = a11;
            int v1457 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1452 + a9 * v1454, a4 + a9 * v1453, a5, a6, a7, a8, v1457, v1456, v1455, v1451);
              int v1457 = a10;
              int v1456 = a11;
              uint64_t v1455 = a13;
              uint64_t v1454 = a15;
              uint64_t v1453 = a16;
              uint64_t v1452 = v28;
              int v1451 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x51:
        uint64_t v3042 = *(unsigned __int8 *)(a1 + 380);
        int v807 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3042 == 1)
        {
          if (v807 == 4)
          {
            char v2060 = a17;
            if (a12)
            {
              uint64_t v2061 = v28;
              uint64_t v2062 = a16;
              uint64_t v2063 = a15;
              uint64_t v2064 = a13;
              int v2065 = a11;
              int v2066 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2061 + a9 * v2063, a4 + a9 * v2062, a5, a6, a7, a8, v2066, v2065, v2064, v2060);
                int v2066 = a10;
                int v2065 = a11;
                uint64_t v2064 = a13;
                uint64_t v2063 = a15;
                uint64_t v2062 = a16;
                uint64_t v2061 = v28;
                char v2060 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v808 = a17;
            if (!v807 && a12)
            {
              uint64_t v809 = v28;
              uint64_t v810 = a16;
              uint64_t v811 = a15;
              uint64_t v812 = a13;
              int v813 = a11;
              int v814 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v809 + a9 * v811, a4 + a9 * v810, a5, a6, a7, a8, v814, v813, v812, v808);
                int v814 = a10;
                int v813 = a11;
                uint64_t v812 = a13;
                uint64_t v811 = a15;
                uint64_t v810 = a16;
                uint64_t v809 = v28;
                char v808 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v807 == 4)
        {
          int v2662 = a17;
          if (a12)
          {
            uint64_t v2663 = v28;
            uint64_t v2664 = a16;
            uint64_t v2665 = a15;
            uint64_t v2666 = a13;
            int v2667 = a11;
            int v2668 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2663 + a9 * v2665, a4 + a9 * v2664, a5, a6, a7, a8, v2668, v2667, v2666, v2662);
              int v2668 = a10;
              int v2667 = a11;
              uint64_t v2666 = a13;
              uint64_t v2665 = a15;
              uint64_t v2664 = a16;
              uint64_t v2663 = v28;
              int v2662 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1458 = a17;
          if (!v807 && a12)
          {
            uint64_t v1459 = v28;
            uint64_t v1460 = a16;
            uint64_t v1461 = a15;
            uint64_t v1462 = a13;
            int v1463 = a11;
            int v1464 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1459 + a9 * v1461, a4 + a9 * v1460, a5, a6, a7, a8, v1464, v1463, v1462, v1458);
              int v1464 = a10;
              int v1463 = a11;
              uint64_t v1462 = a13;
              uint64_t v1461 = a15;
              uint64_t v1460 = a16;
              uint64_t v1459 = v28;
              int v1458 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x54:
        uint64_t v3043 = *(unsigned __int8 *)(a1 + 380);
        int v815 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3043 == 1)
        {
          if (v815 == 4)
          {
            char v2067 = a17;
            if (a12)
            {
              uint64_t v2068 = v28;
              uint64_t v2069 = a16;
              uint64_t v2070 = a15;
              uint64_t v2071 = a13;
              int v2072 = a11;
              int v2073 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2068 + a9 * v2070, a4 + a9 * v2069, a5, a6, a7, a8, v2073, v2072, v2071, v2067);
                int v2073 = a10;
                int v2072 = a11;
                uint64_t v2071 = a13;
                uint64_t v2070 = a15;
                uint64_t v2069 = a16;
                uint64_t v2068 = v28;
                char v2067 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v816 = a17;
            if (!v815 && a12)
            {
              uint64_t v817 = v28;
              uint64_t v818 = a16;
              uint64_t v819 = a15;
              uint64_t v820 = a13;
              int v821 = a11;
              int v822 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v817 + a9 * v819, a4 + a9 * v818, a5, a6, a7, a8, v822, v821, v820, v816);
                int v822 = a10;
                int v821 = a11;
                uint64_t v820 = a13;
                uint64_t v819 = a15;
                uint64_t v818 = a16;
                uint64_t v817 = v28;
                char v816 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v815 == 4)
        {
          int v2669 = a17;
          if (a12)
          {
            uint64_t v2670 = v28;
            uint64_t v2671 = a16;
            uint64_t v2672 = a15;
            uint64_t v2673 = a13;
            int v2674 = a11;
            int v2675 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2670 + a9 * v2672, a4 + a9 * v2671, a5, a6, a7, a8, v2675, v2674, v2673, v2669);
              int v2675 = a10;
              int v2674 = a11;
              uint64_t v2673 = a13;
              uint64_t v2672 = a15;
              uint64_t v2671 = a16;
              uint64_t v2670 = v28;
              int v2669 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1465 = a17;
          if (!v815 && a12)
          {
            uint64_t v1466 = v28;
            uint64_t v1467 = a16;
            uint64_t v1468 = a15;
            uint64_t v1469 = a13;
            int v1470 = a11;
            int v1471 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1466 + a9 * v1468, a4 + a9 * v1467, a5, a6, a7, a8, v1471, v1470, v1469, v1465);
              int v1471 = a10;
              int v1470 = a11;
              uint64_t v1469 = a13;
              uint64_t v1468 = a15;
              uint64_t v1467 = a16;
              uint64_t v1466 = v28;
              int v1465 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x55:
        uint64_t v3044 = *(unsigned __int8 *)(a1 + 380);
        int v823 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3044 == 1)
        {
          if (v823 == 4)
          {
            char v2074 = a17;
            if (a12)
            {
              uint64_t v2075 = v28;
              uint64_t v2076 = a16;
              uint64_t v2077 = a15;
              uint64_t v2078 = a13;
              int v2079 = a11;
              int v2080 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2075 + a9 * v2077, a4 + a9 * v2076, a5, a6, a7, a8, v2080, v2079, v2078, v2074);
                int v2080 = a10;
                int v2079 = a11;
                uint64_t v2078 = a13;
                uint64_t v2077 = a15;
                uint64_t v2076 = a16;
                uint64_t v2075 = v28;
                char v2074 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v824 = a17;
            if (!v823 && a12)
            {
              uint64_t v825 = v28;
              uint64_t v826 = a16;
              uint64_t v827 = a15;
              uint64_t v828 = a13;
              int v829 = a11;
              int v830 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v825 + a9 * v827, a4 + a9 * v826, a5, a6, a7, a8, v830, v829, v828, v824);
                int v830 = a10;
                int v829 = a11;
                uint64_t v828 = a13;
                uint64_t v827 = a15;
                uint64_t v826 = a16;
                uint64_t v825 = v28;
                char v824 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v823 == 4)
        {
          int v2676 = a17;
          if (a12)
          {
            uint64_t v2677 = v28;
            uint64_t v2678 = a16;
            uint64_t v2679 = a15;
            uint64_t v2680 = a13;
            int v2681 = a11;
            int v2682 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2677 + a9 * v2679, a4 + a9 * v2678, a5, a6, a7, a8, v2682, v2681, v2680, v2676);
              int v2682 = a10;
              int v2681 = a11;
              uint64_t v2680 = a13;
              uint64_t v2679 = a15;
              uint64_t v2678 = a16;
              uint64_t v2677 = v28;
              int v2676 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1472 = a17;
          if (!v823 && a12)
          {
            uint64_t v1473 = v28;
            uint64_t v1474 = a16;
            uint64_t v1475 = a15;
            uint64_t v1476 = a13;
            int v1477 = a11;
            int v1478 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1473 + a9 * v1475, a4 + a9 * v1474, a5, a6, a7, a8, v1478, v1477, v1476, v1472);
              int v1478 = a10;
              int v1477 = a11;
              uint64_t v1476 = a13;
              uint64_t v1475 = a15;
              uint64_t v1474 = a16;
              uint64_t v1473 = v28;
              int v1472 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5A:
        uint64_t v3045 = *(unsigned __int8 *)(a1 + 380);
        int v831 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3045 == 1)
        {
          if (v831 == 4)
          {
            char v2081 = a17;
            if (a12)
            {
              uint64_t v2082 = v28;
              uint64_t v2083 = a16;
              uint64_t v2084 = a15;
              uint64_t v2085 = a13;
              int v2086 = a11;
              int v2087 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2082 + a9 * v2084, a4 + a9 * v2083, a5, a6, a7, a8, v2087, v2086, v2085, v2081);
                int v2087 = a10;
                int v2086 = a11;
                uint64_t v2085 = a13;
                uint64_t v2084 = a15;
                uint64_t v2083 = a16;
                uint64_t v2082 = v28;
                char v2081 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v832 = a17;
            if (!v831 && a12)
            {
              uint64_t v833 = v28;
              uint64_t v834 = a16;
              uint64_t v835 = a15;
              uint64_t v836 = a13;
              int v837 = a11;
              int v838 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v833 + a9 * v835, a4 + a9 * v834, a5, a6, a7, a8, v838, v837, v836, v832);
                int v838 = a10;
                int v837 = a11;
                uint64_t v836 = a13;
                uint64_t v835 = a15;
                uint64_t v834 = a16;
                uint64_t v833 = v28;
                char v832 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v831 == 4)
        {
          int v2683 = a17;
          if (a12)
          {
            uint64_t v2684 = v28;
            uint64_t v2685 = a16;
            uint64_t v2686 = a15;
            uint64_t v2687 = a13;
            int v2688 = a11;
            int v2689 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2684 + a9 * v2686, a4 + a9 * v2685, a5, a6, a7, a8, v2689, v2688, v2687, v2683);
              int v2689 = a10;
              int v2688 = a11;
              uint64_t v2687 = a13;
              uint64_t v2686 = a15;
              uint64_t v2685 = a16;
              uint64_t v2684 = v28;
              int v2683 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1479 = a17;
          if (!v831 && a12)
          {
            uint64_t v1480 = v28;
            uint64_t v1481 = a16;
            uint64_t v1482 = a15;
            uint64_t v1483 = a13;
            int v1484 = a11;
            int v1485 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1480 + a9 * v1482, a4 + a9 * v1481, a5, a6, a7, a8, v1485, v1484, v1483, v1479);
              int v1485 = a10;
              int v1484 = a11;
              uint64_t v1483 = a13;
              uint64_t v1482 = a15;
              uint64_t v1481 = a16;
              uint64_t v1480 = v28;
              int v1479 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5B:
        uint64_t v3046 = *(unsigned __int8 *)(a1 + 380);
        int v839 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3046 == 1)
        {
          if (v839 == 4)
          {
            char v2088 = a17;
            if (a12)
            {
              uint64_t v2089 = v28;
              uint64_t v2090 = a16;
              uint64_t v2091 = a15;
              uint64_t v2092 = a13;
              int v2093 = a11;
              int v2094 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2089 + a9 * v2091, a4 + a9 * v2090, a5, a6, a7, a8, v2094, v2093, v2092, v2088);
                int v2094 = a10;
                int v2093 = a11;
                uint64_t v2092 = a13;
                uint64_t v2091 = a15;
                uint64_t v2090 = a16;
                uint64_t v2089 = v28;
                char v2088 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v840 = a17;
            if (!v839 && a12)
            {
              uint64_t v841 = v28;
              uint64_t v842 = a16;
              uint64_t v843 = a15;
              uint64_t v844 = a13;
              int v845 = a11;
              int v846 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v841 + a9 * v843, a4 + a9 * v842, a5, a6, a7, a8, v846, v845, v844, v840);
                int v846 = a10;
                int v845 = a11;
                uint64_t v844 = a13;
                uint64_t v843 = a15;
                uint64_t v842 = a16;
                uint64_t v841 = v28;
                char v840 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v839 == 4)
        {
          int v2690 = a17;
          if (a12)
          {
            uint64_t v2691 = v28;
            uint64_t v2692 = a16;
            uint64_t v2693 = a15;
            uint64_t v2694 = a13;
            int v2695 = a11;
            int v2696 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2691 + a9 * v2693, a4 + a9 * v2692, a5, a6, a7, a8, v2696, v2695, v2694, v2690);
              int v2696 = a10;
              int v2695 = a11;
              uint64_t v2694 = a13;
              uint64_t v2693 = a15;
              uint64_t v2692 = a16;
              uint64_t v2691 = v28;
              int v2690 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1486 = a17;
          if (!v839 && a12)
          {
            uint64_t v1487 = v28;
            uint64_t v1488 = a16;
            uint64_t v1489 = a15;
            uint64_t v1490 = a13;
            int v1491 = a11;
            int v1492 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1487 + a9 * v1489, a4 + a9 * v1488, a5, a6, a7, a8, v1492, v1491, v1490, v1486);
              int v1492 = a10;
              int v1491 = a11;
              uint64_t v1490 = a13;
              uint64_t v1489 = a15;
              uint64_t v1488 = a16;
              uint64_t v1487 = v28;
              int v1486 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5C:
        uint64_t v3047 = *(unsigned __int8 *)(a1 + 380);
        int v847 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3047 == 1)
        {
          if (v847 == 4)
          {
            char v2095 = a17;
            if (a12)
            {
              uint64_t v2096 = v28;
              uint64_t v2097 = a16;
              uint64_t v2098 = a15;
              uint64_t v2099 = a13;
              int v2100 = a11;
              int v2101 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2096 + a9 * v2098, a4 + a9 * v2097, a5, a6, a7, a8, v2101, v2100, v2099, v2095);
                int v2101 = a10;
                int v2100 = a11;
                uint64_t v2099 = a13;
                uint64_t v2098 = a15;
                uint64_t v2097 = a16;
                uint64_t v2096 = v28;
                char v2095 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v848 = a17;
            if (!v847 && a12)
            {
              uint64_t v849 = v28;
              uint64_t v850 = a16;
              uint64_t v851 = a15;
              uint64_t v852 = a13;
              int v853 = a11;
              int v854 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v849 + a9 * v851, a4 + a9 * v850, a5, a6, a7, a8, v854, v853, v852, v848);
                int v854 = a10;
                int v853 = a11;
                uint64_t v852 = a13;
                uint64_t v851 = a15;
                uint64_t v850 = a16;
                uint64_t v849 = v28;
                char v848 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v847 == 4)
        {
          int v2697 = a17;
          if (a12)
          {
            uint64_t v2698 = v28;
            uint64_t v2699 = a16;
            uint64_t v2700 = a15;
            uint64_t v2701 = a13;
            int v2702 = a11;
            int v2703 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2698 + a9 * v2700, a4 + a9 * v2699, a5, a6, a7, a8, v2703, v2702, v2701, v2697);
              int v2703 = a10;
              int v2702 = a11;
              uint64_t v2701 = a13;
              uint64_t v2700 = a15;
              uint64_t v2699 = a16;
              uint64_t v2698 = v28;
              int v2697 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1493 = a17;
          if (!v847 && a12)
          {
            uint64_t v1494 = v28;
            uint64_t v1495 = a16;
            uint64_t v1496 = a15;
            uint64_t v1497 = a13;
            int v1498 = a11;
            int v1499 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1494 + a9 * v1496, a4 + a9 * v1495, a5, a6, a7, a8, v1499, v1498, v1497, v1493);
              int v1499 = a10;
              int v1498 = a11;
              uint64_t v1497 = a13;
              uint64_t v1496 = a15;
              uint64_t v1495 = a16;
              uint64_t v1494 = v28;
              int v1493 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5D:
        uint64_t v3048 = *(unsigned __int8 *)(a1 + 380);
        int v855 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3048 == 1)
        {
          if (v855 == 4)
          {
            char v2102 = a17;
            if (a12)
            {
              uint64_t v2103 = v28;
              uint64_t v2104 = a16;
              uint64_t v2105 = a15;
              uint64_t v2106 = a13;
              int v2107 = a11;
              int v2108 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2103 + a9 * v2105, a4 + a9 * v2104, a5, a6, a7, a8, v2108, v2107, v2106, v2102);
                int v2108 = a10;
                int v2107 = a11;
                uint64_t v2106 = a13;
                uint64_t v2105 = a15;
                uint64_t v2104 = a16;
                uint64_t v2103 = v28;
                char v2102 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v856 = a17;
            if (!v855 && a12)
            {
              uint64_t v857 = v28;
              uint64_t v858 = a16;
              uint64_t v859 = a15;
              uint64_t v860 = a13;
              int v861 = a11;
              int v862 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v857 + a9 * v859, a4 + a9 * v858, a5, a6, a7, a8, v862, v861, v860, v856);
                int v862 = a10;
                int v861 = a11;
                uint64_t v860 = a13;
                uint64_t v859 = a15;
                uint64_t v858 = a16;
                uint64_t v857 = v28;
                char v856 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v855 == 4)
        {
          int v2704 = a17;
          if (a12)
          {
            uint64_t v2705 = v28;
            uint64_t v2706 = a16;
            uint64_t v2707 = a15;
            uint64_t v2708 = a13;
            int v2709 = a11;
            int v2710 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2705 + a9 * v2707, a4 + a9 * v2706, a5, a6, a7, a8, v2710, v2709, v2708, v2704);
              int v2710 = a10;
              int v2709 = a11;
              uint64_t v2708 = a13;
              uint64_t v2707 = a15;
              uint64_t v2706 = a16;
              uint64_t v2705 = v28;
              int v2704 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1500 = a17;
          if (!v855 && a12)
          {
            uint64_t v1501 = v28;
            uint64_t v1502 = a16;
            uint64_t v1503 = a15;
            uint64_t v1504 = a13;
            int v1505 = a11;
            int v1506 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1501 + a9 * v1503, a4 + a9 * v1502, a5, a6, a7, a8, v1506, v1505, v1504, v1500);
              int v1506 = a10;
              int v1505 = a11;
              uint64_t v1504 = a13;
              uint64_t v1503 = a15;
              uint64_t v1502 = a16;
              uint64_t v1501 = v28;
              int v1500 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5E:
        uint64_t v3049 = *(unsigned __int8 *)(a1 + 380);
        int v863 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3049 == 1)
        {
          if (v863 == 4)
          {
            char v2109 = a17;
            if (a12)
            {
              uint64_t v2110 = v28;
              uint64_t v2111 = a16;
              uint64_t v2112 = a15;
              uint64_t v2113 = a13;
              int v2114 = a11;
              int v2115 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2110 + a9 * v2112, a4 + a9 * v2111, a5, a6, a7, a8, v2115, v2114, v2113, v2109);
                int v2115 = a10;
                int v2114 = a11;
                uint64_t v2113 = a13;
                uint64_t v2112 = a15;
                uint64_t v2111 = a16;
                uint64_t v2110 = v28;
                char v2109 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v864 = a17;
            if (!v863 && a12)
            {
              uint64_t v865 = v28;
              uint64_t v866 = a16;
              uint64_t v867 = a15;
              uint64_t v868 = a13;
              int v869 = a11;
              int v870 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v865 + a9 * v867, a4 + a9 * v866, a5, a6, a7, a8, v870, v869, v868, v864);
                int v870 = a10;
                int v869 = a11;
                uint64_t v868 = a13;
                uint64_t v867 = a15;
                uint64_t v866 = a16;
                uint64_t v865 = v28;
                char v864 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v863 == 4)
        {
          int v2711 = a17;
          if (a12)
          {
            uint64_t v2712 = v28;
            uint64_t v2713 = a16;
            uint64_t v2714 = a15;
            uint64_t v2715 = a13;
            int v2716 = a11;
            int v2717 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2712 + a9 * v2714, a4 + a9 * v2713, a5, a6, a7, a8, v2717, v2716, v2715, v2711);
              int v2717 = a10;
              int v2716 = a11;
              uint64_t v2715 = a13;
              uint64_t v2714 = a15;
              uint64_t v2713 = a16;
              uint64_t v2712 = v28;
              int v2711 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1507 = a17;
          if (!v863 && a12)
          {
            uint64_t v1508 = v28;
            uint64_t v1509 = a16;
            uint64_t v1510 = a15;
            uint64_t v1511 = a13;
            int v1512 = a11;
            int v1513 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1508 + a9 * v1510, a4 + a9 * v1509, a5, a6, a7, a8, v1513, v1512, v1511, v1507);
              int v1513 = a10;
              int v1512 = a11;
              uint64_t v1511 = a13;
              uint64_t v1510 = a15;
              uint64_t v1509 = a16;
              uint64_t v1508 = v28;
              int v1507 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x67:
        uint64_t v3050 = *(unsigned __int8 *)(a1 + 380);
        int v871 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3050 == 1)
        {
          if (v871 == 4)
          {
            char v2116 = a17;
            if (a12)
            {
              uint64_t v2117 = v28;
              uint64_t v2118 = a16;
              uint64_t v2119 = a15;
              uint64_t v2120 = a13;
              int v2121 = a11;
              int v2122 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2117 + a9 * v2119, a4 + a9 * v2118, a5, a6, a7, a8, v2122, v2121, v2120, v2116);
                int v2122 = a10;
                int v2121 = a11;
                uint64_t v2120 = a13;
                uint64_t v2119 = a15;
                uint64_t v2118 = a16;
                uint64_t v2117 = v28;
                char v2116 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v872 = a17;
            if (!v871 && a12)
            {
              uint64_t v873 = v28;
              uint64_t v874 = a16;
              uint64_t v875 = a15;
              uint64_t v876 = a13;
              int v877 = a11;
              int v878 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v873 + a9 * v875, a4 + a9 * v874, a5, a6, a7, a8, v878, v877, v876, v872);
                int v878 = a10;
                int v877 = a11;
                uint64_t v876 = a13;
                uint64_t v875 = a15;
                uint64_t v874 = a16;
                uint64_t v873 = v28;
                char v872 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v871 == 4)
        {
          int v2718 = a17;
          if (a12)
          {
            uint64_t v2719 = v28;
            uint64_t v2720 = a16;
            uint64_t v2721 = a15;
            uint64_t v2722 = a13;
            int v2723 = a11;
            int v2724 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2719 + a9 * v2721, a4 + a9 * v2720, a5, a6, a7, a8, v2724, v2723, v2722, v2718);
              int v2724 = a10;
              int v2723 = a11;
              uint64_t v2722 = a13;
              uint64_t v2721 = a15;
              uint64_t v2720 = a16;
              uint64_t v2719 = v28;
              int v2718 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1514 = a17;
          if (!v871 && a12)
          {
            uint64_t v1515 = v28;
            uint64_t v1516 = a16;
            uint64_t v1517 = a15;
            uint64_t v1518 = a13;
            int v1519 = a11;
            int v1520 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1515 + a9 * v1517, a4 + a9 * v1516, a5, a6, a7, a8, v1520, v1519, v1518, v1514);
              int v1520 = a10;
              int v1519 = a11;
              uint64_t v1518 = a13;
              uint64_t v1517 = a15;
              uint64_t v1516 = a16;
              uint64_t v1515 = v28;
              int v1514 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x68:
        uint64_t v3051 = *(unsigned __int8 *)(a1 + 380);
        int v879 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3051 == 1)
        {
          if (v879 == 4)
          {
            char v2123 = a17;
            if (a12)
            {
              uint64_t v2124 = v28;
              uint64_t v2125 = a16;
              uint64_t v2126 = a15;
              uint64_t v2127 = a13;
              int v2128 = a11;
              int v2129 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2124 + a9 * v2126, a4 + a9 * v2125, a5, a6, a7, a8, v2129, v2128, v2127, v2123);
                int v2129 = a10;
                int v2128 = a11;
                uint64_t v2127 = a13;
                uint64_t v2126 = a15;
                uint64_t v2125 = a16;
                uint64_t v2124 = v28;
                char v2123 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v880 = a17;
            if (!v879 && a12)
            {
              uint64_t v881 = v28;
              uint64_t v882 = a16;
              uint64_t v883 = a15;
              uint64_t v884 = a13;
              int v885 = a11;
              int v886 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v881 + a9 * v883, a4 + a9 * v882, a5, a6, a7, a8, v886, v885, v884, v880);
                int v886 = a10;
                int v885 = a11;
                uint64_t v884 = a13;
                uint64_t v883 = a15;
                uint64_t v882 = a16;
                uint64_t v881 = v28;
                char v880 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v879 == 4)
        {
          int v2725 = a17;
          if (a12)
          {
            uint64_t v2726 = v28;
            uint64_t v2727 = a16;
            uint64_t v2728 = a15;
            uint64_t v2729 = a13;
            int v2730 = a11;
            int v2731 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2726 + a9 * v2728, a4 + a9 * v2727, a5, a6, a7, a8, v2731, v2730, v2729, v2725);
              int v2731 = a10;
              int v2730 = a11;
              uint64_t v2729 = a13;
              uint64_t v2728 = a15;
              uint64_t v2727 = a16;
              uint64_t v2726 = v28;
              int v2725 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1521 = a17;
          if (!v879 && a12)
          {
            uint64_t v1522 = v28;
            uint64_t v1523 = a16;
            uint64_t v1524 = a15;
            uint64_t v1525 = a13;
            int v1526 = a11;
            int v1527 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1522 + a9 * v1524, a4 + a9 * v1523, a5, a6, a7, a8, v1527, v1526, v1525, v1521);
              int v1527 = a10;
              int v1526 = a11;
              uint64_t v1525 = a13;
              uint64_t v1524 = a15;
              uint64_t v1523 = a16;
              uint64_t v1522 = v28;
              int v1521 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x69:
        uint64_t v3052 = *(unsigned __int8 *)(a1 + 380);
        int v887 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3052 == 1)
        {
          if (v887 == 4)
          {
            char v2130 = a17;
            if (a12)
            {
              uint64_t v2131 = v28;
              uint64_t v2132 = a16;
              uint64_t v2133 = a15;
              uint64_t v2134 = a13;
              int v2135 = a11;
              int v2136 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2131 + a9 * v2133, a4 + a9 * v2132, a5, a6, a7, a8, v2136, v2135, v2134, v2130);
                int v2136 = a10;
                int v2135 = a11;
                uint64_t v2134 = a13;
                uint64_t v2133 = a15;
                uint64_t v2132 = a16;
                uint64_t v2131 = v28;
                char v2130 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v888 = a17;
            if (!v887 && a12)
            {
              uint64_t v889 = v28;
              uint64_t v890 = a16;
              uint64_t v891 = a15;
              uint64_t v892 = a13;
              int v893 = a11;
              int v894 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v889 + a9 * v891, a4 + a9 * v890, a5, a6, a7, a8, v894, v893, v892, v888);
                int v894 = a10;
                int v893 = a11;
                uint64_t v892 = a13;
                uint64_t v891 = a15;
                uint64_t v890 = a16;
                uint64_t v889 = v28;
                char v888 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v887 == 4)
        {
          int v2732 = a17;
          if (a12)
          {
            uint64_t v2733 = v28;
            uint64_t v2734 = a16;
            uint64_t v2735 = a15;
            uint64_t v2736 = a13;
            int v2737 = a11;
            int v2738 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2733 + a9 * v2735, a4 + a9 * v2734, a5, a6, a7, a8, v2738, v2737, v2736, v2732);
              int v2738 = a10;
              int v2737 = a11;
              uint64_t v2736 = a13;
              uint64_t v2735 = a15;
              uint64_t v2734 = a16;
              uint64_t v2733 = v28;
              int v2732 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1528 = a17;
          if (!v887 && a12)
          {
            uint64_t v1529 = v28;
            uint64_t v1530 = a16;
            uint64_t v1531 = a15;
            uint64_t v1532 = a13;
            int v1533 = a11;
            int v1534 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1529 + a9 * v1531, a4 + a9 * v1530, a5, a6, a7, a8, v1534, v1533, v1532, v1528);
              int v1534 = a10;
              int v1533 = a11;
              uint64_t v1532 = a13;
              uint64_t v1531 = a15;
              uint64_t v1530 = a16;
              uint64_t v1529 = v28;
              int v1528 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x6E:
        uint64_t v3053 = *(unsigned __int8 *)(a1 + 380);
        int v895 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3053 == 1)
        {
          if (v895 == 4)
          {
            char v2137 = a17;
            if (a12)
            {
              uint64_t v2138 = v28;
              uint64_t v2139 = a16;
              uint64_t v2140 = a15;
              uint64_t v2141 = a13;
              int v2142 = a11;
              int v2143 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2138 + a9 * v2140, a4 + a9 * v2139, a5, a6, a7, a8, v2143, v2142, v2141, v2137);
                int v2143 = a10;
                int v2142 = a11;
                uint64_t v2141 = a13;
                uint64_t v2140 = a15;
                uint64_t v2139 = a16;
                uint64_t v2138 = v28;
                char v2137 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v896 = a17;
            if (!v895 && a12)
            {
              uint64_t v897 = v28;
              uint64_t v898 = a16;
              uint64_t v899 = a15;
              uint64_t v900 = a13;
              int v901 = a11;
              int v902 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v897 + a9 * v899, a4 + a9 * v898, a5, a6, a7, a8, v902, v901, v900, v896);
                int v902 = a10;
                int v901 = a11;
                uint64_t v900 = a13;
                uint64_t v899 = a15;
                uint64_t v898 = a16;
                uint64_t v897 = v28;
                char v896 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v895 == 4)
        {
          int v2739 = a17;
          if (a12)
          {
            uint64_t v2740 = v28;
            uint64_t v2741 = a16;
            uint64_t v2742 = a15;
            uint64_t v2743 = a13;
            int v2744 = a11;
            int v2745 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2740 + a9 * v2742, a4 + a9 * v2741, a5, a6, a7, a8, v2745, v2744, v2743, v2739);
              int v2745 = a10;
              int v2744 = a11;
              uint64_t v2743 = a13;
              uint64_t v2742 = a15;
              uint64_t v2741 = a16;
              uint64_t v2740 = v28;
              int v2739 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1535 = a17;
          if (!v895 && a12)
          {
            uint64_t v1536 = v28;
            uint64_t v1537 = a16;
            uint64_t v1538 = a15;
            uint64_t v1539 = a13;
            int v1540 = a11;
            int v1541 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1536 + a9 * v1538, a4 + a9 * v1537, a5, a6, a7, a8, v1541, v1540, v1539, v1535);
              int v1541 = a10;
              int v1540 = a11;
              uint64_t v1539 = a13;
              uint64_t v1538 = a15;
              uint64_t v1537 = a16;
              uint64_t v1536 = v28;
              int v1535 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x70:
        uint64_t v3054 = *(unsigned __int8 *)(a1 + 380);
        int v903 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3054 == 1)
        {
          if (v903 == 4)
          {
            char v2144 = a17;
            if (a12)
            {
              uint64_t v2145 = v28;
              uint64_t v2146 = a16;
              uint64_t v2147 = a15;
              uint64_t v2148 = a13;
              int v2149 = a11;
              int v2150 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2145 + a9 * v2147, a4 + a9 * v2146, a5, a6, a7, a8, v2150, v2149, v2148, v2144);
                int v2150 = a10;
                int v2149 = a11;
                uint64_t v2148 = a13;
                uint64_t v2147 = a15;
                uint64_t v2146 = a16;
                uint64_t v2145 = v28;
                char v2144 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v904 = a17;
            if (!v903 && a12)
            {
              uint64_t v905 = v28;
              uint64_t v906 = a16;
              uint64_t v907 = a15;
              uint64_t v908 = a13;
              int v909 = a11;
              int v910 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v905 + a9 * v907, a4 + a9 * v906, a5, a6, a7, a8, v910, v909, v908, v904);
                int v910 = a10;
                int v909 = a11;
                uint64_t v908 = a13;
                uint64_t v907 = a15;
                uint64_t v906 = a16;
                uint64_t v905 = v28;
                char v904 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v903 == 4)
        {
          int v2746 = a17;
          if (a12)
          {
            uint64_t v2747 = v28;
            uint64_t v2748 = a16;
            uint64_t v2749 = a15;
            uint64_t v2750 = a13;
            int v2751 = a11;
            int v2752 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2747 + a9 * v2749, a4 + a9 * v2748, a5, a6, a7, a8, v2752, v2751, v2750, v2746);
              int v2752 = a10;
              int v2751 = a11;
              uint64_t v2750 = a13;
              uint64_t v2749 = a15;
              uint64_t v2748 = a16;
              uint64_t v2747 = v28;
              int v2746 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1542 = a17;
          if (!v903 && a12)
          {
            uint64_t v1543 = v28;
            uint64_t v1544 = a16;
            uint64_t v1545 = a15;
            uint64_t v1546 = a13;
            int v1547 = a11;
            int v1548 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1543 + a9 * v1545, a4 + a9 * v1544, a5, a6, a7, a8, v1548, v1547, v1546, v1542);
              int v1548 = a10;
              int v1547 = a11;
              uint64_t v1546 = a13;
              uint64_t v1545 = a15;
              uint64_t v1544 = a16;
              uint64_t v1543 = v28;
              int v1542 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x71:
        uint64_t v3055 = *(unsigned __int8 *)(a1 + 380);
        int v911 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3055 == 1)
        {
          if (v911 == 4)
          {
            char v2151 = a17;
            if (a12)
            {
              uint64_t v2152 = v28;
              uint64_t v2153 = a16;
              uint64_t v2154 = a15;
              uint64_t v2155 = a13;
              int v2156 = a11;
              int v2157 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2152 + a9 * v2154, a4 + a9 * v2153, a5, a6, a7, a8, v2157, v2156, v2155, v2151);
                int v2157 = a10;
                int v2156 = a11;
                uint64_t v2155 = a13;
                uint64_t v2154 = a15;
                uint64_t v2153 = a16;
                uint64_t v2152 = v28;
                char v2151 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v912 = a17;
            if (!v911 && a12)
            {
              uint64_t v913 = v28;
              uint64_t v914 = a16;
              uint64_t v915 = a15;
              uint64_t v916 = a13;
              int v917 = a11;
              int v918 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v913 + a9 * v915, a4 + a9 * v914, a5, a6, a7, a8, v918, v917, v916, v912);
                int v918 = a10;
                int v917 = a11;
                uint64_t v916 = a13;
                uint64_t v915 = a15;
                uint64_t v914 = a16;
                uint64_t v913 = v28;
                char v912 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v911 == 4)
        {
          int v2753 = a17;
          if (a12)
          {
            uint64_t v2754 = v28;
            uint64_t v2755 = a16;
            uint64_t v2756 = a15;
            uint64_t v2757 = a13;
            int v2758 = a11;
            int v2759 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2754 + a9 * v2756, a4 + a9 * v2755, a5, a6, a7, a8, v2759, v2758, v2757, v2753);
              int v2759 = a10;
              int v2758 = a11;
              uint64_t v2757 = a13;
              uint64_t v2756 = a15;
              uint64_t v2755 = a16;
              uint64_t v2754 = v28;
              int v2753 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1549 = a17;
          if (!v911 && a12)
          {
            uint64_t v1550 = v28;
            uint64_t v1551 = a16;
            uint64_t v1552 = a15;
            uint64_t v1553 = a13;
            int v1554 = a11;
            int v1555 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1550 + a9 * v1552, a4 + a9 * v1551, a5, a6, a7, a8, v1555, v1554, v1553, v1549);
              int v1555 = a10;
              int v1554 = a11;
              uint64_t v1553 = a13;
              uint64_t v1552 = a15;
              uint64_t v1551 = a16;
              uint64_t v1550 = v28;
              int v1549 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x72:
        uint64_t v3056 = *(unsigned __int8 *)(a1 + 380);
        int v919 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3056 == 1)
        {
          if (v919 == 4)
          {
            char v2158 = a17;
            if (a12)
            {
              uint64_t v2159 = v28;
              uint64_t v2160 = a16;
              uint64_t v2161 = a15;
              uint64_t v2162 = a13;
              int v2163 = a11;
              int v2164 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2159 + a9 * v2161, a4 + a9 * v2160, a5, a6, a7, a8, v2164, v2163, v2162, v2158);
                int v2164 = a10;
                int v2163 = a11;
                uint64_t v2162 = a13;
                uint64_t v2161 = a15;
                uint64_t v2160 = a16;
                uint64_t v2159 = v28;
                char v2158 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v920 = a17;
            if (!v919 && a12)
            {
              uint64_t v921 = v28;
              uint64_t v922 = a16;
              uint64_t v923 = a15;
              uint64_t v924 = a13;
              int v925 = a11;
              int v926 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v921 + a9 * v923, a4 + a9 * v922, a5, a6, a7, a8, v926, v925, v924, v920);
                int v926 = a10;
                int v925 = a11;
                uint64_t v924 = a13;
                uint64_t v923 = a15;
                uint64_t v922 = a16;
                uint64_t v921 = v28;
                char v920 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v919 == 4)
        {
          int v2760 = a17;
          if (a12)
          {
            uint64_t v2761 = v28;
            uint64_t v2762 = a16;
            uint64_t v2763 = a15;
            uint64_t v2764 = a13;
            int v2765 = a11;
            int v2766 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2761 + a9 * v2763, a4 + a9 * v2762, a5, a6, a7, a8, v2766, v2765, v2764, v2760);
              int v2766 = a10;
              int v2765 = a11;
              uint64_t v2764 = a13;
              uint64_t v2763 = a15;
              uint64_t v2762 = a16;
              uint64_t v2761 = v28;
              int v2760 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1556 = a17;
          if (!v919 && a12)
          {
            uint64_t v1557 = v28;
            uint64_t v1558 = a16;
            uint64_t v1559 = a15;
            uint64_t v1560 = a13;
            int v1561 = a11;
            int v1562 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1557 + a9 * v1559, a4 + a9 * v1558, a5, a6, a7, a8, v1562, v1561, v1560, v1556);
              int v1562 = a10;
              int v1561 = a11;
              uint64_t v1560 = a13;
              uint64_t v1559 = a15;
              uint64_t v1558 = a16;
              uint64_t v1557 = v28;
              int v1556 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x73:
        uint64_t v3057 = *(unsigned __int8 *)(a1 + 380);
        int v927 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3057 == 1)
        {
          if (v927 == 4)
          {
            char v2165 = a17;
            if (a12)
            {
              uint64_t v2166 = v28;
              uint64_t v2167 = a16;
              uint64_t v2168 = a15;
              uint64_t v2169 = a13;
              int v2170 = a11;
              int v2171 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2166 + a9 * v2168, a4 + a9 * v2167, a5, a6, a7, a8, v2171, v2170, v2169, v2165);
                int v2171 = a10;
                int v2170 = a11;
                uint64_t v2169 = a13;
                uint64_t v2168 = a15;
                uint64_t v2167 = a16;
                uint64_t v2166 = v28;
                char v2165 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v928 = a17;
            if (!v927 && a12)
            {
              uint64_t v929 = v28;
              uint64_t v930 = a16;
              uint64_t v931 = a15;
              uint64_t v932 = a13;
              int v933 = a11;
              int v934 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v929 + a9 * v931, a4 + a9 * v930, a5, a6, a7, a8, v934, v933, v932, v928);
                int v934 = a10;
                int v933 = a11;
                uint64_t v932 = a13;
                uint64_t v931 = a15;
                uint64_t v930 = a16;
                uint64_t v929 = v28;
                char v928 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v927 == 4)
        {
          int v2767 = a17;
          if (a12)
          {
            uint64_t v2768 = v28;
            uint64_t v2769 = a16;
            uint64_t v2770 = a15;
            uint64_t v2771 = a13;
            int v2772 = a11;
            int v2773 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2768 + a9 * v2770, a4 + a9 * v2769, a5, a6, a7, a8, v2773, v2772, v2771, v2767);
              int v2773 = a10;
              int v2772 = a11;
              uint64_t v2771 = a13;
              uint64_t v2770 = a15;
              uint64_t v2769 = a16;
              uint64_t v2768 = v28;
              int v2767 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1563 = a17;
          if (!v927 && a12)
          {
            uint64_t v1564 = v28;
            uint64_t v1565 = a16;
            uint64_t v1566 = a15;
            uint64_t v1567 = a13;
            int v1568 = a11;
            int v1569 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1564 + a9 * v1566, a4 + a9 * v1565, a5, a6, a7, a8, v1569, v1568, v1567, v1563);
              int v1569 = a10;
              int v1568 = a11;
              uint64_t v1567 = a13;
              uint64_t v1566 = a15;
              uint64_t v1565 = a16;
              uint64_t v1564 = v28;
              int v1563 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x74:
        uint64_t v3058 = *(unsigned __int8 *)(a1 + 380);
        int v935 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3058 == 1)
        {
          if (v935 == 4)
          {
            char v2172 = a17;
            if (a12)
            {
              uint64_t v2173 = v28;
              uint64_t v2174 = a16;
              uint64_t v2175 = a15;
              uint64_t v2176 = a13;
              int v2177 = a11;
              int v2178 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2173 + a9 * v2175, a4 + a9 * v2174, a5, a6, a7, a8, v2178, v2177, v2176, v2172);
                int v2178 = a10;
                int v2177 = a11;
                uint64_t v2176 = a13;
                uint64_t v2175 = a15;
                uint64_t v2174 = a16;
                uint64_t v2173 = v28;
                char v2172 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v936 = a17;
            if (!v935 && a12)
            {
              uint64_t v937 = v28;
              uint64_t v938 = a16;
              uint64_t v939 = a15;
              uint64_t v940 = a13;
              int v941 = a11;
              int v942 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v937 + a9 * v939, a4 + a9 * v938, a5, a6, a7, a8, v942, v941, v940, v936);
                int v942 = a10;
                int v941 = a11;
                uint64_t v940 = a13;
                uint64_t v939 = a15;
                uint64_t v938 = a16;
                uint64_t v937 = v28;
                char v936 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v935 == 4)
        {
          int v2774 = a17;
          if (a12)
          {
            uint64_t v2775 = v28;
            uint64_t v2776 = a16;
            uint64_t v2777 = a15;
            uint64_t v2778 = a13;
            int v2779 = a11;
            int v2780 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2775 + a9 * v2777, a4 + a9 * v2776, a5, a6, a7, a8, v2780, v2779, v2778, v2774);
              int v2780 = a10;
              int v2779 = a11;
              uint64_t v2778 = a13;
              uint64_t v2777 = a15;
              uint64_t v2776 = a16;
              uint64_t v2775 = v28;
              int v2774 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1570 = a17;
          if (!v935 && a12)
          {
            uint64_t v1571 = v28;
            uint64_t v1572 = a16;
            uint64_t v1573 = a15;
            uint64_t v1574 = a13;
            int v1575 = a11;
            int v1576 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1571 + a9 * v1573, a4 + a9 * v1572, a5, a6, a7, a8, v1576, v1575, v1574, v1570);
              int v1576 = a10;
              int v1575 = a11;
              uint64_t v1574 = a13;
              uint64_t v1573 = a15;
              uint64_t v1572 = a16;
              uint64_t v1571 = v28;
              int v1570 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x7B:
        uint64_t v3059 = *(unsigned __int8 *)(a1 + 380);
        int v943 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3059 == 1)
        {
          if (v943 == 4)
          {
            char v2179 = a17;
            if (a12)
            {
              uint64_t v2180 = v28;
              uint64_t v2181 = a16;
              uint64_t v2182 = a15;
              uint64_t v2183 = a13;
              int v2184 = a11;
              int v2185 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2180 + a9 * v2182, a4 + a9 * v2181, a5, a6, a7, a8, v2185, v2184, v2183, v2179);
                int v2185 = a10;
                int v2184 = a11;
                uint64_t v2183 = a13;
                uint64_t v2182 = a15;
                uint64_t v2181 = a16;
                uint64_t v2180 = v28;
                char v2179 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v944 = a17;
            if (!v943 && a12)
            {
              uint64_t v945 = v28;
              uint64_t v946 = a16;
              uint64_t v947 = a15;
              uint64_t v948 = a13;
              int v949 = a11;
              int v950 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v945 + a9 * v947, a4 + a9 * v946, a5, a6, a7, a8, v950, v949, v948, v944);
                int v950 = a10;
                int v949 = a11;
                uint64_t v948 = a13;
                uint64_t v947 = a15;
                uint64_t v946 = a16;
                uint64_t v945 = v28;
                char v944 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v943 == 4)
        {
          int v2781 = a17;
          if (a12)
          {
            uint64_t v2782 = v28;
            uint64_t v2783 = a16;
            uint64_t v2784 = a15;
            uint64_t v2785 = a13;
            int v2786 = a11;
            int v2787 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2782 + a9 * v2784, a4 + a9 * v2783, a5, a6, a7, a8, v2787, v2786, v2785, v2781);
              int v2787 = a10;
              int v2786 = a11;
              uint64_t v2785 = a13;
              uint64_t v2784 = a15;
              uint64_t v2783 = a16;
              uint64_t v2782 = v28;
              int v2781 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1577 = a17;
          if (!v943 && a12)
          {
            uint64_t v1578 = v28;
            uint64_t v1579 = a16;
            uint64_t v1580 = a15;
            uint64_t v1581 = a13;
            int v1582 = a11;
            int v1583 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1578 + a9 * v1580, a4 + a9 * v1579, a5, a6, a7, a8, v1583, v1582, v1581, v1577);
              int v1583 = a10;
              int v1582 = a11;
              uint64_t v1581 = a13;
              uint64_t v1580 = a15;
              uint64_t v1579 = a16;
              uint64_t v1578 = v28;
              int v1577 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x7C:
        uint64_t v3060 = *(unsigned __int8 *)(a1 + 380);
        int v951 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3060 == 1)
        {
          if (v951 == 4)
          {
            char v2186 = a17;
            if (a12)
            {
              uint64_t v2187 = v28;
              uint64_t v2188 = a16;
              uint64_t v2189 = a15;
              uint64_t v2190 = a13;
              int v2191 = a11;
              int v2192 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2187 + a9 * v2189, a4 + a9 * v2188, a5, a6, a7, a8, v2192, v2191, v2190, v2186);
                int v2192 = a10;
                int v2191 = a11;
                uint64_t v2190 = a13;
                uint64_t v2189 = a15;
                uint64_t v2188 = a16;
                uint64_t v2187 = v28;
                char v2186 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v952 = a17;
            if (!v951 && a12)
            {
              uint64_t v953 = v28;
              uint64_t v954 = a16;
              uint64_t v955 = a15;
              uint64_t v956 = a13;
              int v957 = a11;
              int v958 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v953 + a9 * v955, a4 + a9 * v954, a5, a6, a7, a8, v958, v957, v956, v952);
                int v958 = a10;
                int v957 = a11;
                uint64_t v956 = a13;
                uint64_t v955 = a15;
                uint64_t v954 = a16;
                uint64_t v953 = v28;
                char v952 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v951 == 4)
        {
          int v2788 = a17;
          if (a12)
          {
            uint64_t v2789 = v28;
            uint64_t v2790 = a16;
            uint64_t v2791 = a15;
            uint64_t v2792 = a13;
            int v2793 = a11;
            int v2794 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2789 + a9 * v2791, a4 + a9 * v2790, a5, a6, a7, a8, v2794, v2793, v2792, v2788);
              int v2794 = a10;
              int v2793 = a11;
              uint64_t v2792 = a13;
              uint64_t v2791 = a15;
              uint64_t v2790 = a16;
              uint64_t v2789 = v28;
              int v2788 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1584 = a17;
          if (!v951 && a12)
          {
            uint64_t v1585 = v28;
            uint64_t v1586 = a16;
            uint64_t v1587 = a15;
            uint64_t v1588 = a13;
            int v1589 = a11;
            int v1590 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1585 + a9 * v1587, a4 + a9 * v1586, a5, a6, a7, a8, v1590, v1589, v1588, v1584);
              int v1590 = a10;
              int v1589 = a11;
              uint64_t v1588 = a13;
              uint64_t v1587 = a15;
              uint64_t v1586 = a16;
              uint64_t v1585 = v28;
              int v1584 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x7D:
        uint64_t v3061 = *(unsigned __int8 *)(a1 + 380);
        int v959 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3061 == 1)
        {
          if (v959 == 4)
          {
            char v2193 = a17;
            if (a12)
            {
              uint64_t v2194 = v28;
              uint64_t v2195 = a16;
              uint64_t v2196 = a15;
              uint64_t v2197 = a13;
              int v2198 = a11;
              int v2199 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2194 + a9 * v2196, a4 + a9 * v2195, a5, a6, a7, a8, v2199, v2198, v2197, v2193);
                int v2199 = a10;
                int v2198 = a11;
                uint64_t v2197 = a13;
                uint64_t v2196 = a15;
                uint64_t v2195 = a16;
                uint64_t v2194 = v28;
                char v2193 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v960 = a17;
            if (!v959 && a12)
            {
              uint64_t v961 = v28;
              uint64_t v962 = a16;
              uint64_t v963 = a15;
              uint64_t v964 = a13;
              int v965 = a11;
              int v966 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v961 + a9 * v963, a4 + a9 * v962, a5, a6, a7, a8, v966, v965, v964, v960);
                int v966 = a10;
                int v965 = a11;
                uint64_t v964 = a13;
                uint64_t v963 = a15;
                uint64_t v962 = a16;
                uint64_t v961 = v28;
                char v960 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v959 == 4)
        {
          int v2795 = a17;
          if (a12)
          {
            uint64_t v2796 = v28;
            uint64_t v2797 = a16;
            uint64_t v2798 = a15;
            uint64_t v2799 = a13;
            int v2800 = a11;
            int v2801 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2796 + a9 * v2798, a4 + a9 * v2797, a5, a6, a7, a8, v2801, v2800, v2799, v2795);
              int v2801 = a10;
              int v2800 = a11;
              uint64_t v2799 = a13;
              uint64_t v2798 = a15;
              uint64_t v2797 = a16;
              uint64_t v2796 = v28;
              int v2795 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1591 = a17;
          if (!v959 && a12)
          {
            uint64_t v1592 = v28;
            uint64_t v1593 = a16;
            uint64_t v1594 = a15;
            uint64_t v1595 = a13;
            int v1596 = a11;
            int v1597 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1592 + a9 * v1594, a4 + a9 * v1593, a5, a6, a7, a8, v1597, v1596, v1595, v1591);
              int v1597 = a10;
              int v1596 = a11;
              uint64_t v1595 = a13;
              uint64_t v1594 = a15;
              uint64_t v1593 = a16;
              uint64_t v1592 = v28;
              int v1591 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xFA:
        uint64_t v3062 = *(unsigned __int8 *)(a1 + 380);
        int v967 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3062 == 1)
        {
          if (v967 == 4)
          {
            char v2200 = a17;
            if (a12)
            {
              uint64_t v2201 = v28;
              uint64_t v2202 = a16;
              uint64_t v2203 = a15;
              uint64_t v2204 = a13;
              int v2205 = a11;
              int v2206 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2201 + a9 * v2203, a4 + a9 * v2202, a5, a6, a7, a8, v2206, v2205, v2204, v2200);
                int v2206 = a10;
                int v2205 = a11;
                uint64_t v2204 = a13;
                uint64_t v2203 = a15;
                uint64_t v2202 = a16;
                uint64_t v2201 = v28;
                char v2200 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v968 = a17;
            if (!v967 && a12)
            {
              uint64_t v969 = v28;
              uint64_t v970 = a16;
              uint64_t v971 = a15;
              uint64_t v972 = a13;
              int v973 = a11;
              int v974 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v969 + a9 * v971, a4 + a9 * v970, a5, a6, a7, a8, v974, v973, v972, v968);
                int v974 = a10;
                int v973 = a11;
                uint64_t v972 = a13;
                uint64_t v971 = a15;
                uint64_t v970 = a16;
                uint64_t v969 = v28;
                char v968 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v967 == 4)
        {
          int v2802 = a17;
          if (a12)
          {
            uint64_t v2803 = v28;
            uint64_t v2804 = a16;
            uint64_t v2805 = a15;
            uint64_t v2806 = a13;
            int v2807 = a11;
            int v2808 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2803 + a9 * v2805, a4 + a9 * v2804, a5, a6, a7, a8, v2808, v2807, v2806, v2802);
              int v2808 = a10;
              int v2807 = a11;
              uint64_t v2806 = a13;
              uint64_t v2805 = a15;
              uint64_t v2804 = a16;
              uint64_t v2803 = v28;
              int v2802 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1598 = a17;
          if (!v967 && a12)
          {
            uint64_t v1599 = v28;
            uint64_t v1600 = a16;
            uint64_t v1601 = a15;
            uint64_t v1602 = a13;
            int v1603 = a11;
            int v1604 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1599 + a9 * v1601, a4 + a9 * v1600, a5, a6, a7, a8, v1604, v1603, v1602, v1598);
              int v1604 = a10;
              int v1603 = a11;
              uint64_t v1602 = a13;
              uint64_t v1601 = a15;
              uint64_t v1600 = a16;
              uint64_t v1599 = v28;
              int v1598 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xFC:
        uint64_t v3063 = *(unsigned __int8 *)(a1 + 380);
        int v975 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3063 == 1)
        {
          if (v975 == 4)
          {
            char v2207 = a17;
            if (a12)
            {
              uint64_t v2208 = v28;
              uint64_t v2209 = a16;
              uint64_t v2210 = a15;
              uint64_t v2211 = a13;
              int v2212 = a11;
              int v2213 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2208 + a9 * v2210, a4 + a9 * v2209, a5, a6, a7, a8, v2213, v2212, v2211, v2207);
                int v2213 = a10;
                int v2212 = a11;
                uint64_t v2211 = a13;
                uint64_t v2210 = a15;
                uint64_t v2209 = a16;
                uint64_t v2208 = v28;
                char v2207 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v976 = a17;
            if (!v975 && a12)
            {
              uint64_t v977 = v28;
              uint64_t v978 = a16;
              uint64_t v979 = a15;
              uint64_t v980 = a13;
              int v981 = a11;
              int v982 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v977 + a9 * v979, a4 + a9 * v978, a5, a6, a7, a8, v982, v981, v980, v976);
                int v982 = a10;
                int v981 = a11;
                uint64_t v980 = a13;
                uint64_t v979 = a15;
                uint64_t v978 = a16;
                uint64_t v977 = v28;
                char v976 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v975 == 4)
        {
          int v2809 = a17;
          if (a12)
          {
            uint64_t v2810 = v28;
            uint64_t v2811 = a16;
            uint64_t v2812 = a15;
            uint64_t v2813 = a13;
            int v2814 = a11;
            int v2815 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2810 + a9 * v2812, a4 + a9 * v2811, a5, a6, a7, a8, v2815, v2814, v2813, v2809);
              int v2815 = a10;
              int v2814 = a11;
              uint64_t v2813 = a13;
              uint64_t v2812 = a15;
              uint64_t v2811 = a16;
              uint64_t v2810 = v28;
              int v2809 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1605 = a17;
          if (!v975 && a12)
          {
            uint64_t v1606 = v28;
            uint64_t v1607 = a16;
            uint64_t v1608 = a15;
            uint64_t v1609 = a13;
            int v1610 = a11;
            int v1611 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1606 + a9 * v1608, a4 + a9 * v1607, a5, a6, a7, a8, v1611, v1610, v1609, v1605);
              int v1611 = a10;
              int v1610 = a11;
              uint64_t v1609 = a13;
              uint64_t v1608 = a15;
              uint64_t v1607 = a16;
              uint64_t v1606 = v28;
              int v1605 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xFD:
        uint64_t v3064 = *(unsigned __int8 *)(a1 + 380);
        int v983 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3064 == 1)
        {
          if (v983 == 4)
          {
            char v2214 = a17;
            if (a12)
            {
              uint64_t v2215 = v28;
              uint64_t v2216 = a16;
              uint64_t v2217 = a15;
              uint64_t v2218 = a13;
              int v2219 = a11;
              int v2220 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2215 + a9 * v2217, a4 + a9 * v2216, a5, a6, a7, a8, v2220, v2219, v2218, v2214);
                int v2220 = a10;
                int v2219 = a11;
                uint64_t v2218 = a13;
                uint64_t v2217 = a15;
                uint64_t v2216 = a16;
                uint64_t v2215 = v28;
                char v2214 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v984 = a17;
            if (!v983 && a12)
            {
              uint64_t v985 = v28;
              uint64_t v986 = a16;
              uint64_t v987 = a15;
              uint64_t v988 = a13;
              int v989 = a11;
              int v990 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v985 + a9 * v987, a4 + a9 * v986, a5, a6, a7, a8, v990, v989, v988, v984);
                int v990 = a10;
                int v989 = a11;
                uint64_t v988 = a13;
                uint64_t v987 = a15;
                uint64_t v986 = a16;
                uint64_t v985 = v28;
                char v984 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v983 == 4)
        {
          int v2816 = a17;
          if (a12)
          {
            uint64_t v2817 = v28;
            uint64_t v2818 = a16;
            uint64_t v2819 = a15;
            uint64_t v2820 = a13;
            int v2821 = a11;
            int v2822 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2817 + a9 * v2819, a4 + a9 * v2818, a5, a6, a7, a8, v2822, v2821, v2820, v2816);
              int v2822 = a10;
              int v2821 = a11;
              uint64_t v2820 = a13;
              uint64_t v2819 = a15;
              uint64_t v2818 = a16;
              uint64_t v2817 = v28;
              int v2816 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1612 = a17;
          if (!v983 && a12)
          {
            uint64_t v1613 = v28;
            uint64_t v1614 = a16;
            uint64_t v1615 = a15;
            uint64_t v1616 = a13;
            int v1617 = a11;
            int v1618 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1613 + a9 * v1615, a4 + a9 * v1614, a5, a6, a7, a8, v1618, v1617, v1616, v1612);
              int v1618 = a10;
              int v1617 = a11;
              uint64_t v1616 = a13;
              uint64_t v1615 = a15;
              uint64_t v1614 = a16;
              uint64_t v1613 = v28;
              int v1612 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x105:
        uint64_t v3065 = *(unsigned __int8 *)(a1 + 380);
        int v991 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3065 == 1)
        {
          if (v991 == 4)
          {
            char v2221 = a17;
            if (a12)
            {
              uint64_t v2222 = v28;
              uint64_t v2223 = a16;
              uint64_t v2224 = a15;
              uint64_t v2225 = a13;
              int v2226 = a11;
              int v2227 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2222 + a9 * v2224, a4 + a9 * v2223, a5, a6, a7, a8, v2227, v2226, v2225, v2221);
                int v2227 = a10;
                int v2226 = a11;
                uint64_t v2225 = a13;
                uint64_t v2224 = a15;
                uint64_t v2223 = a16;
                uint64_t v2222 = v28;
                char v2221 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v992 = a17;
            if (!v991 && a12)
            {
              uint64_t v993 = v28;
              uint64_t v994 = a16;
              uint64_t v995 = a15;
              uint64_t v996 = a13;
              int v997 = a11;
              int v998 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v993 + a9 * v995, a4 + a9 * v994, a5, a6, a7, a8, v998, v997, v996, v992);
                int v998 = a10;
                int v997 = a11;
                uint64_t v996 = a13;
                uint64_t v995 = a15;
                uint64_t v994 = a16;
                uint64_t v993 = v28;
                char v992 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v991 == 4)
        {
          int v2823 = a17;
          if (a12)
          {
            uint64_t v2824 = v28;
            uint64_t v2825 = a16;
            uint64_t v2826 = a15;
            uint64_t v2827 = a13;
            int v2828 = a11;
            int v2829 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2824 + a9 * v2826, a4 + a9 * v2825, a5, a6, a7, a8, v2829, v2828, v2827, v2823);
              int v2829 = a10;
              int v2828 = a11;
              uint64_t v2827 = a13;
              uint64_t v2826 = a15;
              uint64_t v2825 = a16;
              uint64_t v2824 = v28;
              int v2823 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1619 = a17;
          if (!v991 && a12)
          {
            uint64_t v1620 = v28;
            uint64_t v1621 = a16;
            uint64_t v1622 = a15;
            uint64_t v1623 = a13;
            int v1624 = a11;
            int v1625 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1620 + a9 * v1622, a4 + a9 * v1621, a5, a6, a7, a8, v1625, v1624, v1623, v1619);
              int v1625 = a10;
              int v1624 = a11;
              uint64_t v1623 = a13;
              uint64_t v1622 = a15;
              uint64_t v1621 = a16;
              uint64_t v1620 = v28;
              int v1619 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12C:
        uint64_t v3066 = *(unsigned __int8 *)(a1 + 380);
        int v999 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3066 == 1)
        {
          if (v999 == 4)
          {
            char v2228 = a17;
            if (a12)
            {
              uint64_t v2229 = v28;
              uint64_t v2230 = a16;
              uint64_t v2231 = a15;
              uint64_t v2232 = a13;
              int v2233 = a11;
              int v2234 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2229 + a9 * v2231, a4 + a9 * v2230, a5, a6, a7, a8, v2234, v2233, v2232, v2228);
                int v2234 = a10;
                int v2233 = a11;
                uint64_t v2232 = a13;
                uint64_t v2231 = a15;
                uint64_t v2230 = a16;
                uint64_t v2229 = v28;
                char v2228 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1000 = a17;
            if (!v999 && a12)
            {
              uint64_t v1001 = v28;
              uint64_t v1002 = a16;
              uint64_t v1003 = a15;
              uint64_t v1004 = a13;
              int v1005 = a11;
              int v1006 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1001 + a9 * v1003, a4 + a9 * v1002, a5, a6, a7, a8, v1006, v1005, v1004, v1000);
                int v1006 = a10;
                int v1005 = a11;
                uint64_t v1004 = a13;
                uint64_t v1003 = a15;
                uint64_t v1002 = a16;
                uint64_t v1001 = v28;
                char v1000 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v999 == 4)
        {
          int v2830 = a17;
          if (a12)
          {
            uint64_t v2831 = v28;
            uint64_t v2832 = a16;
            uint64_t v2833 = a15;
            uint64_t v2834 = a13;
            int v2835 = a11;
            int v2836 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2831 + a9 * v2833, a4 + a9 * v2832, a5, a6, a7, a8, v2836, v2835, v2834, v2830);
              int v2836 = a10;
              int v2835 = a11;
              uint64_t v2834 = a13;
              uint64_t v2833 = a15;
              uint64_t v2832 = a16;
              uint64_t v2831 = v28;
              int v2830 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1626 = a17;
          if (!v999 && a12)
          {
            uint64_t v1627 = v28;
            uint64_t v1628 = a16;
            uint64_t v1629 = a15;
            uint64_t v1630 = a13;
            int v1631 = a11;
            int v1632 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1627 + a9 * v1629, a4 + a9 * v1628, a5, a6, a7, a8, v1632, v1631, v1630, v1626);
              int v1632 = a10;
              int v1631 = a11;
              uint64_t v1630 = a13;
              uint64_t v1629 = a15;
              uint64_t v1628 = a16;
              uint64_t v1627 = v28;
              int v1626 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12D:
        uint64_t v3067 = *(unsigned __int8 *)(a1 + 380);
        int v1007 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3067 == 1)
        {
          if (v1007 == 4)
          {
            char v2235 = a17;
            if (a12)
            {
              uint64_t v2236 = v28;
              uint64_t v2237 = a16;
              uint64_t v2238 = a15;
              uint64_t v2239 = a13;
              int v2240 = a11;
              int v2241 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2236 + a9 * v2238, a4 + a9 * v2237, a5, a6, a7, a8, v2241, v2240, v2239, v2235);
                int v2241 = a10;
                int v2240 = a11;
                uint64_t v2239 = a13;
                uint64_t v2238 = a15;
                uint64_t v2237 = a16;
                uint64_t v2236 = v28;
                char v2235 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1008 = a17;
            if (!v1007 && a12)
            {
              uint64_t v1009 = v28;
              uint64_t v1010 = a16;
              uint64_t v1011 = a15;
              uint64_t v1012 = a13;
              int v1013 = a11;
              int v1014 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1009 + a9 * v1011, a4 + a9 * v1010, a5, a6, a7, a8, v1014, v1013, v1012, v1008);
                int v1014 = a10;
                int v1013 = a11;
                uint64_t v1012 = a13;
                uint64_t v1011 = a15;
                uint64_t v1010 = a16;
                uint64_t v1009 = v28;
                char v1008 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1007 == 4)
        {
          int v2837 = a17;
          if (a12)
          {
            uint64_t v2838 = v28;
            uint64_t v2839 = a16;
            uint64_t v2840 = a15;
            uint64_t v2841 = a13;
            int v2842 = a11;
            int v2843 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2838 + a9 * v2840, a4 + a9 * v2839, a5, a6, a7, a8, v2843, v2842, v2841, v2837);
              int v2843 = a10;
              int v2842 = a11;
              uint64_t v2841 = a13;
              uint64_t v2840 = a15;
              uint64_t v2839 = a16;
              uint64_t v2838 = v28;
              int v2837 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1633 = a17;
          if (!v1007 && a12)
          {
            uint64_t v1634 = v28;
            uint64_t v1635 = a16;
            uint64_t v1636 = a15;
            uint64_t v1637 = a13;
            int v1638 = a11;
            int v1639 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1634 + a9 * v1636, a4 + a9 * v1635, a5, a6, a7, a8, v1639, v1638, v1637, v1633);
              int v1639 = a10;
              int v1638 = a11;
              uint64_t v1637 = a13;
              uint64_t v1636 = a15;
              uint64_t v1635 = a16;
              uint64_t v1634 = v28;
              int v1633 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12E:
        uint64_t v3068 = *(unsigned __int8 *)(a1 + 380);
        int v1015 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3068 == 1)
        {
          if (v1015 == 4)
          {
            char v2242 = a17;
            if (a12)
            {
              uint64_t v2243 = v28;
              uint64_t v2244 = a16;
              uint64_t v2245 = a15;
              uint64_t v2246 = a13;
              int v2247 = a11;
              int v2248 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2243 + a9 * v2245, a4 + a9 * v2244, a5, a6, a7, a8, v2248, v2247, v2246, v2242);
                int v2248 = a10;
                int v2247 = a11;
                uint64_t v2246 = a13;
                uint64_t v2245 = a15;
                uint64_t v2244 = a16;
                uint64_t v2243 = v28;
                char v2242 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1016 = a17;
            if (!v1015 && a12)
            {
              uint64_t v1017 = v28;
              uint64_t v1018 = a16;
              uint64_t v1019 = a15;
              uint64_t v1020 = a13;
              int v1021 = a11;
              int v1022 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1017 + a9 * v1019, a4 + a9 * v1018, a5, a6, a7, a8, v1022, v1021, v1020, v1016);
                int v1022 = a10;
                int v1021 = a11;
                uint64_t v1020 = a13;
                uint64_t v1019 = a15;
                uint64_t v1018 = a16;
                uint64_t v1017 = v28;
                char v1016 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1015 == 4)
        {
          int v2844 = a17;
          if (a12)
          {
            uint64_t v2845 = v28;
            uint64_t v2846 = a16;
            uint64_t v2847 = a15;
            uint64_t v2848 = a13;
            int v2849 = a11;
            int v2850 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2845 + a9 * v2847, a4 + a9 * v2846, a5, a6, a7, a8, v2850, v2849, v2848, v2844);
              int v2850 = a10;
              int v2849 = a11;
              uint64_t v2848 = a13;
              uint64_t v2847 = a15;
              uint64_t v2846 = a16;
              uint64_t v2845 = v28;
              int v2844 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1640 = a17;
          if (!v1015 && a12)
          {
            uint64_t v1641 = v28;
            uint64_t v1642 = a16;
            uint64_t v1643 = a15;
            uint64_t v1644 = a13;
            int v1645 = a11;
            int v1646 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1641 + a9 * v1643, a4 + a9 * v1642, a5, a6, a7, a8, v1646, v1645, v1644, v1640);
              int v1646 = a10;
              int v1645 = a11;
              uint64_t v1644 = a13;
              uint64_t v1643 = a15;
              uint64_t v1642 = a16;
              uint64_t v1641 = v28;
              int v1640 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12F:
        uint64_t v3069 = *(unsigned __int8 *)(a1 + 380);
        int v1023 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3069 == 1)
        {
          if (v1023 == 4)
          {
            char v2249 = a17;
            if (a12)
            {
              uint64_t v2250 = v28;
              uint64_t v2251 = a16;
              uint64_t v2252 = a15;
              uint64_t v2253 = a13;
              int v2254 = a11;
              int v2255 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2250 + a9 * v2252, a4 + a9 * v2251, a5, a6, a7, a8, v2255, v2254, v2253, v2249);
                int v2255 = a10;
                int v2254 = a11;
                uint64_t v2253 = a13;
                uint64_t v2252 = a15;
                uint64_t v2251 = a16;
                uint64_t v2250 = v28;
                char v2249 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1024 = a17;
            if (!v1023 && a12)
            {
              uint64_t v1025 = v28;
              uint64_t v1026 = a16;
              uint64_t v1027 = a15;
              uint64_t v1028 = a13;
              int v1029 = a11;
              int v1030 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1025 + a9 * v1027, a4 + a9 * v1026, a5, a6, a7, a8, v1030, v1029, v1028, v1024);
                int v1030 = a10;
                int v1029 = a11;
                uint64_t v1028 = a13;
                uint64_t v1027 = a15;
                uint64_t v1026 = a16;
                uint64_t v1025 = v28;
                char v1024 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1023 == 4)
        {
          int v2851 = a17;
          if (a12)
          {
            uint64_t v2852 = v28;
            uint64_t v2853 = a16;
            uint64_t v2854 = a15;
            uint64_t v2855 = a13;
            int v2856 = a11;
            int v2857 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2852 + a9 * v2854, a4 + a9 * v2853, a5, a6, a7, a8, v2857, v2856, v2855, v2851);
              int v2857 = a10;
              int v2856 = a11;
              uint64_t v2855 = a13;
              uint64_t v2854 = a15;
              uint64_t v2853 = a16;
              uint64_t v2852 = v28;
              int v2851 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1647 = a17;
          if (!v1023 && a12)
          {
            uint64_t v1648 = v28;
            uint64_t v1649 = a16;
            uint64_t v1650 = a15;
            uint64_t v1651 = a13;
            int v1652 = a11;
            int v1653 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1648 + a9 * v1650, a4 + a9 * v1649, a5, a6, a7, a8, v1653, v1652, v1651, v1647);
              int v1653 = a10;
              int v1652 = a11;
              uint64_t v1651 = a13;
              uint64_t v1650 = a15;
              uint64_t v1649 = a16;
              uint64_t v1648 = v28;
              int v1647 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x130:
        uint64_t v3070 = *(unsigned __int8 *)(a1 + 380);
        int v1031 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3070 == 1)
        {
          if (v1031 == 4)
          {
            char v2256 = a17;
            if (a12)
            {
              uint64_t v2257 = v28;
              uint64_t v2258 = a16;
              uint64_t v2259 = a15;
              uint64_t v2260 = a13;
              int v2261 = a11;
              int v2262 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2257 + a9 * v2259, a4 + a9 * v2258, a5, a6, a7, a8, v2262, v2261, v2260, v2256);
                int v2262 = a10;
                int v2261 = a11;
                uint64_t v2260 = a13;
                uint64_t v2259 = a15;
                uint64_t v2258 = a16;
                uint64_t v2257 = v28;
                char v2256 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1032 = a17;
            if (!v1031 && a12)
            {
              uint64_t v1033 = v28;
              uint64_t v1034 = a16;
              uint64_t v1035 = a15;
              uint64_t v1036 = a13;
              int v1037 = a11;
              int v1038 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1033 + a9 * v1035, a4 + a9 * v1034, a5, a6, a7, a8, v1038, v1037, v1036, v1032);
                int v1038 = a10;
                int v1037 = a11;
                uint64_t v1036 = a13;
                uint64_t v1035 = a15;
                uint64_t v1034 = a16;
                uint64_t v1033 = v28;
                char v1032 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1031 == 4)
        {
          int v2858 = a17;
          if (a12)
          {
            uint64_t v2859 = v28;
            uint64_t v2860 = a16;
            uint64_t v2861 = a15;
            uint64_t v2862 = a13;
            int v2863 = a11;
            int v2864 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2859 + a9 * v2861, a4 + a9 * v2860, a5, a6, a7, a8, v2864, v2863, v2862, v2858);
              int v2864 = a10;
              int v2863 = a11;
              uint64_t v2862 = a13;
              uint64_t v2861 = a15;
              uint64_t v2860 = a16;
              uint64_t v2859 = v28;
              int v2858 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1654 = a17;
          if (!v1031 && a12)
          {
            uint64_t v1655 = v28;
            uint64_t v1656 = a16;
            uint64_t v1657 = a15;
            uint64_t v1658 = a13;
            int v1659 = a11;
            int v1660 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1655 + a9 * v1657, a4 + a9 * v1656, a5, a6, a7, a8, v1660, v1659, v1658, v1654);
              int v1660 = a10;
              int v1659 = a11;
              uint64_t v1658 = a13;
              uint64_t v1657 = a15;
              uint64_t v1656 = a16;
              uint64_t v1655 = v28;
              int v1654 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x139:
        uint64_t v3071 = *(unsigned __int8 *)(a1 + 380);
        int v1039 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3071 == 1)
        {
          if (v1039 == 4)
          {
            char v2263 = a17;
            if (a12)
            {
              uint64_t v2264 = v28;
              uint64_t v2265 = a16;
              uint64_t v2266 = a15;
              uint64_t v2267 = a13;
              int v2268 = a11;
              int v2269 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2264 + a9 * v2266, a4 + a9 * v2265, a5, a6, a7, a8, v2269, v2268, v2267, v2263);
                int v2269 = a10;
                int v2268 = a11;
                uint64_t v2267 = a13;
                uint64_t v2266 = a15;
                uint64_t v2265 = a16;
                uint64_t v2264 = v28;
                char v2263 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1040 = a17;
            if (!v1039 && a12)
            {
              uint64_t v1041 = v28;
              uint64_t v1042 = a16;
              uint64_t v1043 = a15;
              uint64_t v1044 = a13;
              int v1045 = a11;
              int v1046 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1041 + a9 * v1043, a4 + a9 * v1042, a5, a6, a7, a8, v1046, v1045, v1044, v1040);
                int v1046 = a10;
                int v1045 = a11;
                uint64_t v1044 = a13;
                uint64_t v1043 = a15;
                uint64_t v1042 = a16;
                uint64_t v1041 = v28;
                char v1040 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1039 == 4)
        {
          int v2865 = a17;
          if (a12)
          {
            uint64_t v2866 = v28;
            uint64_t v2867 = a16;
            uint64_t v2868 = a15;
            uint64_t v2869 = a13;
            int v2870 = a11;
            int v2871 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2866 + a9 * v2868, a4 + a9 * v2867, a5, a6, a7, a8, v2871, v2870, v2869, v2865);
              int v2871 = a10;
              int v2870 = a11;
              uint64_t v2869 = a13;
              uint64_t v2868 = a15;
              uint64_t v2867 = a16;
              uint64_t v2866 = v28;
              int v2865 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1661 = a17;
          if (!v1039 && a12)
          {
            uint64_t v1662 = v28;
            uint64_t v1663 = a16;
            uint64_t v1664 = a15;
            uint64_t v1665 = a13;
            int v1666 = a11;
            int v1667 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1662 + a9 * v1664, a4 + a9 * v1663, a5, a6, a7, a8, v1667, v1666, v1665, v1661);
              int v1667 = a10;
              int v1666 = a11;
              uint64_t v1665 = a13;
              uint64_t v1664 = a15;
              uint64_t v1663 = a16;
              uint64_t v1662 = v28;
              int v1661 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x13A:
        uint64_t v3072 = *(unsigned __int8 *)(a1 + 380);
        int v1047 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3072 == 1)
        {
          if (v1047 == 4)
          {
            char v2270 = a17;
            if (a12)
            {
              uint64_t v2271 = v28;
              uint64_t v2272 = a16;
              uint64_t v2273 = a15;
              uint64_t v2274 = a13;
              int v2275 = a11;
              int v2276 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2271 + a9 * v2273, a4 + a9 * v2272, a5, a6, a7, a8, v2276, v2275, v2274, v2270);
                int v2276 = a10;
                int v2275 = a11;
                uint64_t v2274 = a13;
                uint64_t v2273 = a15;
                uint64_t v2272 = a16;
                uint64_t v2271 = v28;
                char v2270 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1048 = a17;
            if (!v1047 && a12)
            {
              uint64_t v1049 = v28;
              uint64_t v1050 = a16;
              uint64_t v1051 = a15;
              uint64_t v1052 = a13;
              int v1053 = a11;
              int v1054 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1049 + a9 * v1051, a4 + a9 * v1050, a5, a6, a7, a8, v1054, v1053, v1052, v1048);
                int v1054 = a10;
                int v1053 = a11;
                uint64_t v1052 = a13;
                uint64_t v1051 = a15;
                uint64_t v1050 = a16;
                uint64_t v1049 = v28;
                char v1048 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1047 == 4)
        {
          int v2872 = a17;
          if (a12)
          {
            uint64_t v2873 = v28;
            uint64_t v2874 = a16;
            uint64_t v2875 = a15;
            uint64_t v2876 = a13;
            int v2877 = a11;
            int v2878 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2873 + a9 * v2875, a4 + a9 * v2874, a5, a6, a7, a8, v2878, v2877, v2876, v2872);
              int v2878 = a10;
              int v2877 = a11;
              uint64_t v2876 = a13;
              uint64_t v2875 = a15;
              uint64_t v2874 = a16;
              uint64_t v2873 = v28;
              int v2872 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1668 = a17;
          if (!v1047 && a12)
          {
            uint64_t v1669 = v28;
            uint64_t v1670 = a16;
            uint64_t v1671 = a15;
            uint64_t v1672 = a13;
            int v1673 = a11;
            int v1674 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1669 + a9 * v1671, a4 + a9 * v1670, a5, a6, a7, a8, v1674, v1673, v1672, v1668);
              int v1674 = a10;
              int v1673 = a11;
              uint64_t v1672 = a13;
              uint64_t v1671 = a15;
              uint64_t v1670 = a16;
              uint64_t v1669 = v28;
              int v1668 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x13B:
        uint64_t v3073 = *(unsigned __int8 *)(a1 + 380);
        int v1055 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3073 == 1)
        {
          if (v1055 == 4)
          {
            char v2277 = a17;
            if (a12)
            {
              uint64_t v2278 = v28;
              uint64_t v2279 = a16;
              uint64_t v2280 = a15;
              uint64_t v2281 = a13;
              int v2282 = a11;
              int v2283 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2278 + a9 * v2280, a4 + a9 * v2279, a5, a6, a7, a8, v2283, v2282, v2281, v2277);
                int v2283 = a10;
                int v2282 = a11;
                uint64_t v2281 = a13;
                uint64_t v2280 = a15;
                uint64_t v2279 = a16;
                uint64_t v2278 = v28;
                char v2277 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1056 = a17;
            if (!v1055 && a12)
            {
              uint64_t v1057 = v28;
              uint64_t v1058 = a16;
              uint64_t v1059 = a15;
              uint64_t v1060 = a13;
              int v1061 = a11;
              int v1062 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1057 + a9 * v1059, a4 + a9 * v1058, a5, a6, a7, a8, v1062, v1061, v1060, v1056);
                int v1062 = a10;
                int v1061 = a11;
                uint64_t v1060 = a13;
                uint64_t v1059 = a15;
                uint64_t v1058 = a16;
                uint64_t v1057 = v28;
                char v1056 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1055 == 4)
        {
          int v2879 = a17;
          if (a12)
          {
            uint64_t v2880 = v28;
            uint64_t v2881 = a16;
            uint64_t v2882 = a15;
            uint64_t v2883 = a13;
            int v2884 = a11;
            int v2885 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2880 + a9 * v2882, a4 + a9 * v2881, a5, a6, a7, a8, v2885, v2884, v2883, v2879);
              int v2885 = a10;
              int v2884 = a11;
              uint64_t v2883 = a13;
              uint64_t v2882 = a15;
              uint64_t v2881 = a16;
              uint64_t v2880 = v28;
              int v2879 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1675 = a17;
          if (!v1055 && a12)
          {
            uint64_t v1676 = v28;
            uint64_t v1677 = a16;
            uint64_t v1678 = a15;
            uint64_t v1679 = a13;
            int v1680 = a11;
            int v1681 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1676 + a9 * v1678, a4 + a9 * v1677, a5, a6, a7, a8, v1681, v1680, v1679, v1675);
              int v1681 = a10;
              int v1680 = a11;
              uint64_t v1679 = a13;
              uint64_t v1678 = a15;
              uint64_t v1677 = a16;
              uint64_t v1676 = v28;
              int v1675 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x143:
        uint64_t v3074 = *(unsigned __int8 *)(a1 + 380);
        int v1063 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3074 == 1)
        {
          if (v1063 == 4)
          {
            char v2284 = a17;
            if (a12)
            {
              uint64_t v2285 = v28;
              uint64_t v2286 = a16;
              uint64_t v2287 = a15;
              uint64_t v2288 = a13;
              int v2289 = a11;
              int v2290 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2285 + a9 * v2287, a4 + a9 * v2286, a5, a6, a7, a8, v2290, v2289, v2288, v2284);
                int v2290 = a10;
                int v2289 = a11;
                uint64_t v2288 = a13;
                uint64_t v2287 = a15;
                uint64_t v2286 = a16;
                uint64_t v2285 = v28;
                char v2284 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1064 = a17;
            if (!v1063 && a12)
            {
              uint64_t v1065 = v28;
              uint64_t v1066 = a16;
              uint64_t v1067 = a15;
              uint64_t v1068 = a13;
              int v1069 = a11;
              int v1070 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1065 + a9 * v1067, a4 + a9 * v1066, a5, a6, a7, a8, v1070, v1069, v1068, v1064);
                int v1070 = a10;
                int v1069 = a11;
                uint64_t v1068 = a13;
                uint64_t v1067 = a15;
                uint64_t v1066 = a16;
                uint64_t v1065 = v28;
                char v1064 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1063 == 4)
        {
          int v2886 = a17;
          if (a12)
          {
            uint64_t v2887 = v28;
            uint64_t v2888 = a16;
            uint64_t v2889 = a15;
            uint64_t v2890 = a13;
            int v2891 = a11;
            int v2892 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2887 + a9 * v2889, a4 + a9 * v2888, a5, a6, a7, a8, v2892, v2891, v2890, v2886);
              int v2892 = a10;
              int v2891 = a11;
              uint64_t v2890 = a13;
              uint64_t v2889 = a15;
              uint64_t v2888 = a16;
              uint64_t v2887 = v28;
              int v2886 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1682 = a17;
          if (!v1063 && a12)
          {
            uint64_t v1683 = v28;
            uint64_t v1684 = a16;
            uint64_t v1685 = a15;
            uint64_t v1686 = a13;
            int v1687 = a11;
            int v1688 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1683 + a9 * v1685, a4 + a9 * v1684, a5, a6, a7, a8, v1688, v1687, v1686, v1682);
              int v1688 = a10;
              int v1687 = a11;
              uint64_t v1686 = a13;
              uint64_t v1685 = a15;
              uint64_t v1684 = a16;
              uint64_t v1683 = v28;
              int v1682 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x144:
        uint64_t v3075 = *(unsigned __int8 *)(a1 + 380);
        int v1071 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3075 == 1)
        {
          if (v1071 == 4)
          {
            char v2291 = a17;
            if (a12)
            {
              uint64_t v2292 = v28;
              uint64_t v2293 = a16;
              uint64_t v2294 = a15;
              uint64_t v2295 = a13;
              int v2296 = a11;
              int v2297 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2292 + a9 * v2294, a4 + a9 * v2293, a5, a6, a7, a8, v2297, v2296, v2295, v2291);
                int v2297 = a10;
                int v2296 = a11;
                uint64_t v2295 = a13;
                uint64_t v2294 = a15;
                uint64_t v2293 = a16;
                uint64_t v2292 = v28;
                char v2291 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1072 = a17;
            if (!v1071 && a12)
            {
              uint64_t v1073 = v28;
              uint64_t v1074 = a16;
              uint64_t v1075 = a15;
              uint64_t v1076 = a13;
              int v1077 = a11;
              int v1078 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1073 + a9 * v1075, a4 + a9 * v1074, a5, a6, a7, a8, v1078, v1077, v1076, v1072);
                int v1078 = a10;
                int v1077 = a11;
                uint64_t v1076 = a13;
                uint64_t v1075 = a15;
                uint64_t v1074 = a16;
                uint64_t v1073 = v28;
                char v1072 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1071 == 4)
        {
          int v2893 = a17;
          if (a12)
          {
            uint64_t v2894 = v28;
            uint64_t v2895 = a16;
            uint64_t v2896 = a15;
            uint64_t v2897 = a13;
            int v2898 = a11;
            int v2899 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2894 + a9 * v2896, a4 + a9 * v2895, a5, a6, a7, a8, v2899, v2898, v2897, v2893);
              int v2899 = a10;
              int v2898 = a11;
              uint64_t v2897 = a13;
              uint64_t v2896 = a15;
              uint64_t v2895 = a16;
              uint64_t v2894 = v28;
              int v2893 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1689 = a17;
          if (!v1071 && a12)
          {
            uint64_t v1690 = v28;
            uint64_t v1691 = a16;
            uint64_t v1692 = a15;
            uint64_t v1693 = a13;
            int v1694 = a11;
            int v1695 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1690 + a9 * v1692, a4 + a9 * v1691, a5, a6, a7, a8, v1695, v1694, v1693, v1689);
              int v1695 = a10;
              int v1694 = a11;
              uint64_t v1693 = a13;
              uint64_t v1692 = a15;
              uint64_t v1691 = a16;
              uint64_t v1690 = v28;
              int v1689 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x145:
        uint64_t v3076 = *(unsigned __int8 *)(a1 + 380);
        int v1079 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3076 == 1)
        {
          if (v1079 == 4)
          {
            char v2298 = a17;
            if (a12)
            {
              uint64_t v2299 = v28;
              uint64_t v2300 = a16;
              uint64_t v2301 = a15;
              uint64_t v2302 = a13;
              int v2303 = a11;
              int v2304 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2299 + a9 * v2301, a4 + a9 * v2300, a5, a6, a7, a8, v2304, v2303, v2302, v2298);
                int v2304 = a10;
                int v2303 = a11;
                uint64_t v2302 = a13;
                uint64_t v2301 = a15;
                uint64_t v2300 = a16;
                uint64_t v2299 = v28;
                char v2298 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1080 = a17;
            if (!v1079 && a12)
            {
              uint64_t v1081 = v28;
              uint64_t v1082 = a16;
              uint64_t v1083 = a15;
              uint64_t v1084 = a13;
              int v1085 = a11;
              int v1086 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1081 + a9 * v1083, a4 + a9 * v1082, a5, a6, a7, a8, v1086, v1085, v1084, v1080);
                int v1086 = a10;
                int v1085 = a11;
                uint64_t v1084 = a13;
                uint64_t v1083 = a15;
                uint64_t v1082 = a16;
                uint64_t v1081 = v28;
                char v1080 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1079 == 4)
        {
          int v2900 = a17;
          if (a12)
          {
            uint64_t v2901 = v28;
            uint64_t v2902 = a16;
            uint64_t v2903 = a15;
            uint64_t v2904 = a13;
            int v2905 = a11;
            int v2906 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2901 + a9 * v2903, a4 + a9 * v2902, a5, a6, a7, a8, v2906, v2905, v2904, v2900);
              int v2906 = a10;
              int v2905 = a11;
              uint64_t v2904 = a13;
              uint64_t v2903 = a15;
              uint64_t v2902 = a16;
              uint64_t v2901 = v28;
              int v2900 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1696 = a17;
          if (!v1079 && a12)
          {
            uint64_t v1697 = v28;
            uint64_t v1698 = a16;
            uint64_t v1699 = a15;
            uint64_t v1700 = a13;
            int v1701 = a11;
            int v1702 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1697 + a9 * v1699, a4 + a9 * v1698, a5, a6, a7, a8, v1702, v1701, v1700, v1696);
              int v1702 = a10;
              int v1701 = a11;
              uint64_t v1700 = a13;
              uint64_t v1699 = a15;
              uint64_t v1698 = a16;
              uint64_t v1697 = v28;
              int v1696 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x228:
        uint64_t v3077 = *(unsigned __int8 *)(a1 + 380);
        int v1087 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3077 == 1)
        {
          if (v1087 == 4)
          {
            char v2305 = a17;
            if (a12)
            {
              uint64_t v2306 = v28;
              uint64_t v2307 = a16;
              uint64_t v2308 = a15;
              uint64_t v2309 = a13;
              int v2310 = a11;
              int v2311 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2306 + a9 * v2308, a4 + a9 * v2307, a5, a6, a7, a8, v2311, v2310, v2309, v2305);
                int v2311 = a10;
                int v2310 = a11;
                uint64_t v2309 = a13;
                uint64_t v2308 = a15;
                uint64_t v2307 = a16;
                uint64_t v2306 = v28;
                char v2305 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1088 = a17;
            if (!v1087 && a12)
            {
              uint64_t v1089 = v28;
              uint64_t v1090 = a16;
              uint64_t v1091 = a15;
              uint64_t v1092 = a13;
              int v1093 = a11;
              int v1094 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1089 + a9 * v1091, a4 + a9 * v1090, a5, a6, a7, a8, v1094, v1093, v1092, v1088);
                int v1094 = a10;
                int v1093 = a11;
                uint64_t v1092 = a13;
                uint64_t v1091 = a15;
                uint64_t v1090 = a16;
                uint64_t v1089 = v28;
                char v1088 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1087 == 4)
        {
          int v2907 = a17;
          if (a12)
          {
            uint64_t v2908 = v28;
            uint64_t v2909 = a16;
            uint64_t v2910 = a15;
            uint64_t v2911 = a13;
            int v2912 = a11;
            int v2913 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2908 + a9 * v2910, a4 + a9 * v2909, a5, a6, a7, a8, v2913, v2912, v2911, v2907);
              int v2913 = a10;
              int v2912 = a11;
              uint64_t v2911 = a13;
              uint64_t v2910 = a15;
              uint64_t v2909 = a16;
              uint64_t v2908 = v28;
              int v2907 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1703 = a17;
          if (!v1087 && a12)
          {
            uint64_t v1704 = v28;
            uint64_t v1705 = a16;
            uint64_t v1706 = a15;
            uint64_t v1707 = a13;
            int v1708 = a11;
            int v1709 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1704 + a9 * v1706, a4 + a9 * v1705, a5, a6, a7, a8, v1709, v1708, v1707, v1703);
              int v1709 = a10;
              int v1708 = a11;
              uint64_t v1707 = a13;
              uint64_t v1706 = a15;
              uint64_t v1705 = a16;
              uint64_t v1704 = v28;
              int v1703 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x229:
        uint64_t v3078 = *(unsigned __int8 *)(a1 + 380);
        int v1095 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3078 == 1)
        {
          if (v1095 == 4)
          {
            char v2312 = a17;
            if (a12)
            {
              uint64_t v2313 = v28;
              uint64_t v2314 = a16;
              uint64_t v2315 = a15;
              uint64_t v2316 = a13;
              int v2317 = a11;
              int v2318 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2313 + a9 * v2315, a4 + a9 * v2314, a5, a6, a7, a8, v2318, v2317, v2316, v2312);
                int v2318 = a10;
                int v2317 = a11;
                uint64_t v2316 = a13;
                uint64_t v2315 = a15;
                uint64_t v2314 = a16;
                uint64_t v2313 = v28;
                char v2312 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1096 = a17;
            if (!v1095 && a12)
            {
              uint64_t v1097 = v28;
              uint64_t v1098 = a16;
              uint64_t v1099 = a15;
              uint64_t v1100 = a13;
              int v1101 = a11;
              int v1102 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1097 + a9 * v1099, a4 + a9 * v1098, a5, a6, a7, a8, v1102, v1101, v1100, v1096);
                int v1102 = a10;
                int v1101 = a11;
                uint64_t v1100 = a13;
                uint64_t v1099 = a15;
                uint64_t v1098 = a16;
                uint64_t v1097 = v28;
                char v1096 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1095 == 4)
        {
          int v2914 = a17;
          if (a12)
          {
            uint64_t v2915 = v28;
            uint64_t v2916 = a16;
            uint64_t v2917 = a15;
            uint64_t v2918 = a13;
            int v2919 = a11;
            int v2920 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2915 + a9 * v2917, a4 + a9 * v2916, a5, a6, a7, a8, v2920, v2919, v2918, v2914);
              int v2920 = a10;
              int v2919 = a11;
              uint64_t v2918 = a13;
              uint64_t v2917 = a15;
              uint64_t v2916 = a16;
              uint64_t v2915 = v28;
              int v2914 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1710 = a17;
          if (!v1095 && a12)
          {
            uint64_t v1711 = v28;
            uint64_t v1712 = a16;
            uint64_t v1713 = a15;
            uint64_t v1714 = a13;
            int v1715 = a11;
            int v1716 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1711 + a9 * v1713, a4 + a9 * v1712, a5, a6, a7, a8, v1716, v1715, v1714, v1710);
              int v1716 = a10;
              int v1715 = a11;
              uint64_t v1714 = a13;
              uint64_t v1713 = a15;
              uint64_t v1712 = a16;
              uint64_t v1711 = v28;
              int v1710 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22A:
        uint64_t v3079 = *(unsigned __int8 *)(a1 + 380);
        int v1103 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3079 == 1)
        {
          if (v1103 == 4)
          {
            char v2319 = a17;
            if (a12)
            {
              uint64_t v2320 = v28;
              uint64_t v2321 = a16;
              uint64_t v2322 = a15;
              uint64_t v2323 = a13;
              int v2324 = a11;
              int v2325 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2320 + a9 * v2322, a4 + a9 * v2321, a5, a6, a7, a8, v2325, v2324, v2323, v2319);
                int v2325 = a10;
                int v2324 = a11;
                uint64_t v2323 = a13;
                uint64_t v2322 = a15;
                uint64_t v2321 = a16;
                uint64_t v2320 = v28;
                char v2319 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1104 = a17;
            if (!v1103 && a12)
            {
              uint64_t v1105 = v28;
              uint64_t v1106 = a16;
              uint64_t v1107 = a15;
              uint64_t v1108 = a13;
              int v1109 = a11;
              int v1110 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1105 + a9 * v1107, a4 + a9 * v1106, a5, a6, a7, a8, v1110, v1109, v1108, v1104);
                int v1110 = a10;
                int v1109 = a11;
                uint64_t v1108 = a13;
                uint64_t v1107 = a15;
                uint64_t v1106 = a16;
                uint64_t v1105 = v28;
                char v1104 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1103 == 4)
        {
          int v2921 = a17;
          if (a12)
          {
            uint64_t v2922 = v28;
            uint64_t v2923 = a16;
            uint64_t v2924 = a15;
            uint64_t v2925 = a13;
            int v2926 = a11;
            int v2927 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2922 + a9 * v2924, a4 + a9 * v2923, a5, a6, a7, a8, v2927, v2926, v2925, v2921);
              int v2927 = a10;
              int v2926 = a11;
              uint64_t v2925 = a13;
              uint64_t v2924 = a15;
              uint64_t v2923 = a16;
              uint64_t v2922 = v28;
              int v2921 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1717 = a17;
          if (!v1103 && a12)
          {
            uint64_t v1718 = v28;
            uint64_t v1719 = a16;
            uint64_t v1720 = a15;
            uint64_t v1721 = a13;
            int v1722 = a11;
            int v1723 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1718 + a9 * v1720, a4 + a9 * v1719, a5, a6, a7, a8, v1723, v1722, v1721, v1717);
              int v1723 = a10;
              int v1722 = a11;
              uint64_t v1721 = a13;
              uint64_t v1720 = a15;
              uint64_t v1719 = a16;
              uint64_t v1718 = v28;
              int v1717 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22B:
        uint64_t v3080 = *(unsigned __int8 *)(a1 + 380);
        int v1111 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3080 == 1)
        {
          if (v1111 == 4)
          {
            char v2326 = a17;
            if (a12)
            {
              uint64_t v2327 = v28;
              uint64_t v2328 = a16;
              uint64_t v2329 = a15;
              uint64_t v2330 = a13;
              int v2331 = a11;
              int v2332 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2327 + a9 * v2329, a4 + a9 * v2328, a5, a6, a7, a8, v2332, v2331, v2330, v2326);
                int v2332 = a10;
                int v2331 = a11;
                uint64_t v2330 = a13;
                uint64_t v2329 = a15;
                uint64_t v2328 = a16;
                uint64_t v2327 = v28;
                char v2326 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1112 = a17;
            if (!v1111 && a12)
            {
              uint64_t v1113 = v28;
              uint64_t v1114 = a16;
              uint64_t v1115 = a15;
              uint64_t v1116 = a13;
              int v1117 = a11;
              int v1118 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1113 + a9 * v1115, a4 + a9 * v1114, a5, a6, a7, a8, v1118, v1117, v1116, v1112);
                int v1118 = a10;
                int v1117 = a11;
                uint64_t v1116 = a13;
                uint64_t v1115 = a15;
                uint64_t v1114 = a16;
                uint64_t v1113 = v28;
                char v1112 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1111 == 4)
        {
          int v2928 = a17;
          if (a12)
          {
            uint64_t v2929 = v28;
            uint64_t v2930 = a16;
            uint64_t v2931 = a15;
            uint64_t v2932 = a13;
            int v2933 = a11;
            int v2934 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2929 + a9 * v2931, a4 + a9 * v2930, a5, a6, a7, a8, v2934, v2933, v2932, v2928);
              int v2934 = a10;
              int v2933 = a11;
              uint64_t v2932 = a13;
              uint64_t v2931 = a15;
              uint64_t v2930 = a16;
              uint64_t v2929 = v28;
              int v2928 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1724 = a17;
          if (!v1111 && a12)
          {
            uint64_t v1725 = v28;
            uint64_t v1726 = a16;
            uint64_t v1727 = a15;
            uint64_t v1728 = a13;
            int v1729 = a11;
            int v1730 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1725 + a9 * v1727, a4 + a9 * v1726, a5, a6, a7, a8, v1730, v1729, v1728, v1724);
              int v1730 = a10;
              int v1729 = a11;
              uint64_t v1728 = a13;
              uint64_t v1727 = a15;
              uint64_t v1726 = a16;
              uint64_t v1725 = v28;
              int v1724 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22C:
        uint64_t v3081 = *(unsigned __int8 *)(a1 + 380);
        int v1119 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3081 == 1)
        {
          if (v1119 == 4)
          {
            char v2333 = a17;
            if (a12)
            {
              uint64_t v2334 = v28;
              uint64_t v2335 = a16;
              uint64_t v2336 = a15;
              uint64_t v2337 = a13;
              int v2338 = a11;
              int v2339 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2334 + a9 * v2336, a4 + a9 * v2335, a5, a6, a7, a8, v2339, v2338, v2337, v2333);
                int v2339 = a10;
                int v2338 = a11;
                uint64_t v2337 = a13;
                uint64_t v2336 = a15;
                uint64_t v2335 = a16;
                uint64_t v2334 = v28;
                char v2333 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1120 = a17;
            if (!v1119 && a12)
            {
              uint64_t v1121 = v28;
              uint64_t v1122 = a16;
              uint64_t v1123 = a15;
              uint64_t v1124 = a13;
              int v1125 = a11;
              int v1126 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1121 + a9 * v1123, a4 + a9 * v1122, a5, a6, a7, a8, v1126, v1125, v1124, v1120);
                int v1126 = a10;
                int v1125 = a11;
                uint64_t v1124 = a13;
                uint64_t v1123 = a15;
                uint64_t v1122 = a16;
                uint64_t v1121 = v28;
                char v1120 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1119 == 4)
        {
          int v2935 = a17;
          if (a12)
          {
            uint64_t v2936 = v28;
            uint64_t v2937 = a16;
            uint64_t v2938 = a15;
            uint64_t v2939 = a13;
            int v2940 = a11;
            int v2941 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2936 + a9 * v2938, a4 + a9 * v2937, a5, a6, a7, a8, v2941, v2940, v2939, v2935);
              int v2941 = a10;
              int v2940 = a11;
              uint64_t v2939 = a13;
              uint64_t v2938 = a15;
              uint64_t v2937 = a16;
              uint64_t v2936 = v28;
              int v2935 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1731 = a17;
          if (!v1119 && a12)
          {
            uint64_t v1732 = v28;
            uint64_t v1733 = a16;
            uint64_t v1734 = a15;
            uint64_t v1735 = a13;
            int v1736 = a11;
            int v1737 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1732 + a9 * v1734, a4 + a9 * v1733, a5, a6, a7, a8, v1737, v1736, v1735, v1731);
              int v1737 = a10;
              int v1736 = a11;
              uint64_t v1735 = a13;
              uint64_t v1734 = a15;
              uint64_t v1733 = a16;
              uint64_t v1732 = v28;
              int v1731 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x24A:
        uint64_t v3082 = *(unsigned __int8 *)(a1 + 380);
        int v1127 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3082 == 1)
        {
          if (v1127 == 4)
          {
            char v2340 = a17;
            if (a12)
            {
              uint64_t v2341 = v28;
              uint64_t v2342 = a16;
              uint64_t v2343 = a15;
              uint64_t v2344 = a13;
              int v2345 = a11;
              int v2346 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2341 + a9 * v2343, a4 + a9 * v2342, a5, a6, a7, a8, v2346, v2345, v2344, v2340);
                int v2346 = a10;
                int v2345 = a11;
                uint64_t v2344 = a13;
                uint64_t v2343 = a15;
                uint64_t v2342 = a16;
                uint64_t v2341 = v28;
                char v2340 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1128 = a17;
            if (!v1127 && a12)
            {
              uint64_t v1129 = v28;
              uint64_t v1130 = a16;
              uint64_t v1131 = a15;
              uint64_t v1132 = a13;
              int v1133 = a11;
              int v1134 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1129 + a9 * v1131, a4 + a9 * v1130, a5, a6, a7, a8, v1134, v1133, v1132, v1128);
                int v1134 = a10;
                int v1133 = a11;
                uint64_t v1132 = a13;
                uint64_t v1131 = a15;
                uint64_t v1130 = a16;
                uint64_t v1129 = v28;
                char v1128 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1127 == 4)
        {
          int v2942 = a17;
          if (a12)
          {
            uint64_t v2943 = v28;
            uint64_t v2944 = a16;
            uint64_t v2945 = a15;
            uint64_t v2946 = a13;
            int v2947 = a11;
            int v2948 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2943 + a9 * v2945, a4 + a9 * v2944, a5, a6, a7, a8, v2948, v2947, v2946, v2942);
              int v2948 = a10;
              int v2947 = a11;
              uint64_t v2946 = a13;
              uint64_t v2945 = a15;
              uint64_t v2944 = a16;
              uint64_t v2943 = v28;
              int v2942 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1738 = a17;
          if (!v1127 && a12)
          {
            uint64_t v1739 = v28;
            uint64_t v1740 = a16;
            uint64_t v1741 = a15;
            uint64_t v1742 = a13;
            int v1743 = a11;
            int v1744 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1739 + a9 * v1741, a4 + a9 * v1740, a5, a6, a7, a8, v1744, v1743, v1742, v1738);
              int v1744 = a10;
              int v1743 = a11;
              uint64_t v1742 = a13;
              uint64_t v1741 = a15;
              uint64_t v1740 = a16;
              uint64_t v1739 = v28;
              int v1738 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x24B:
        uint64_t v3083 = *(unsigned __int8 *)(a1 + 380);
        int v1135 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3083 == 1)
        {
          if (v1135 == 4)
          {
            char v2347 = a17;
            if (a12)
            {
              uint64_t v2348 = v28;
              uint64_t v2349 = a16;
              uint64_t v2350 = a15;
              uint64_t v2351 = a13;
              int v2352 = a11;
              int v2353 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2348 + a9 * v2350, a4 + a9 * v2349, a5, a6, a7, a8, v2353, v2352, v2351, v2347);
                int v2353 = a10;
                int v2352 = a11;
                uint64_t v2351 = a13;
                uint64_t v2350 = a15;
                uint64_t v2349 = a16;
                uint64_t v2348 = v28;
                char v2347 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1136 = a17;
            if (!v1135 && a12)
            {
              uint64_t v1137 = v28;
              uint64_t v1138 = a16;
              uint64_t v1139 = a15;
              uint64_t v1140 = a13;
              int v1141 = a11;
              int v1142 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1137 + a9 * v1139, a4 + a9 * v1138, a5, a6, a7, a8, v1142, v1141, v1140, v1136);
                int v1142 = a10;
                int v1141 = a11;
                uint64_t v1140 = a13;
                uint64_t v1139 = a15;
                uint64_t v1138 = a16;
                uint64_t v1137 = v28;
                char v1136 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1135 == 4)
        {
          int v2949 = a17;
          if (a12)
          {
            uint64_t v2950 = v28;
            uint64_t v2951 = a16;
            uint64_t v2952 = a15;
            uint64_t v2953 = a13;
            int v2954 = a11;
            int v2955 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2950 + a9 * v2952, a4 + a9 * v2951, a5, a6, a7, a8, v2955, v2954, v2953, v2949);
              int v2955 = a10;
              int v2954 = a11;
              uint64_t v2953 = a13;
              uint64_t v2952 = a15;
              uint64_t v2951 = a16;
              uint64_t v2950 = v28;
              int v2949 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1745 = a17;
          if (!v1135 && a12)
          {
            uint64_t v1746 = v28;
            uint64_t v1747 = a16;
            uint64_t v1748 = a15;
            uint64_t v1749 = a13;
            int v1750 = a11;
            int v1751 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1746 + a9 * v1748, a4 + a9 * v1747, a5, a6, a7, a8, v1751, v1750, v1749, v1745);
              int v1751 = a10;
              int v1750 = a11;
              uint64_t v1749 = a13;
              uint64_t v1748 = a15;
              uint64_t v1747 = a16;
              uint64_t v1746 = v28;
              int v1745 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x274:
        uint64_t v3084 = *(unsigned __int8 *)(a1 + 380);
        int v1143 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3084 == 1)
        {
          if (v1143 == 4)
          {
            char v2354 = a17;
            if (a12)
            {
              uint64_t v2355 = v28;
              uint64_t v2356 = a16;
              uint64_t v2357 = a15;
              uint64_t v2358 = a13;
              int v2359 = a11;
              int v2360 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2355 + a9 * v2357, a4 + a9 * v2356, a5, a6, a7, a8, v2360, v2359, v2358, v2354);
                int v2360 = a10;
                int v2359 = a11;
                uint64_t v2358 = a13;
                uint64_t v2357 = a15;
                uint64_t v2356 = a16;
                uint64_t v2355 = v28;
                char v2354 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1144 = a17;
            if (!v1143 && a12)
            {
              uint64_t v1145 = v28;
              uint64_t v1146 = a16;
              uint64_t v1147 = a15;
              uint64_t v1148 = a13;
              int v1149 = a11;
              int v1150 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1145 + a9 * v1147, a4 + a9 * v1146, a5, a6, a7, a8, v1150, v1149, v1148, v1144);
                int v1150 = a10;
                int v1149 = a11;
                uint64_t v1148 = a13;
                uint64_t v1147 = a15;
                uint64_t v1146 = a16;
                uint64_t v1145 = v28;
                char v1144 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1143 == 4)
        {
          int v2956 = a17;
          if (a12)
          {
            uint64_t v2957 = v28;
            uint64_t v2958 = a16;
            uint64_t v2959 = a15;
            uint64_t v2960 = a13;
            int v2961 = a11;
            int v2962 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2957 + a9 * v2959, a4 + a9 * v2958, a5, a6, a7, a8, v2962, v2961, v2960, v2956);
              int v2962 = a10;
              int v2961 = a11;
              uint64_t v2960 = a13;
              uint64_t v2959 = a15;
              uint64_t v2958 = a16;
              uint64_t v2957 = v28;
              int v2956 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1752 = a17;
          if (!v1143 && a12)
          {
            uint64_t v1753 = v28;
            uint64_t v1754 = a16;
            uint64_t v1755 = a15;
            uint64_t v1756 = a13;
            int v1757 = a11;
            int v1758 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1753 + a9 * v1755, a4 + a9 * v1754, a5, a6, a7, a8, v1758, v1757, v1756, v1752);
              int v1758 = a10;
              int v1757 = a11;
              uint64_t v1756 = a13;
              uint64_t v1755 = a15;
              uint64_t v1754 = a16;
              uint64_t v1753 = v28;
              int v1752 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x275:
        uint64_t v3085 = *(unsigned __int8 *)(a1 + 380);
        int v1151 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3085 == 1)
        {
          if (v1151 == 4)
          {
            char v2361 = a17;
            if (a12)
            {
              uint64_t v2362 = v28;
              uint64_t v2363 = a16;
              uint64_t v2364 = a15;
              uint64_t v2365 = a13;
              int v2366 = a11;
              int v2367 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2362 + a9 * v2364, a4 + a9 * v2363, a5, a6, a7, a8, v2367, v2366, v2365, v2361);
                int v2367 = a10;
                int v2366 = a11;
                uint64_t v2365 = a13;
                uint64_t v2364 = a15;
                uint64_t v2363 = a16;
                uint64_t v2362 = v28;
                char v2361 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1152 = a17;
            if (!v1151 && a12)
            {
              uint64_t v1153 = v28;
              uint64_t v1154 = a16;
              uint64_t v1155 = a15;
              uint64_t v1156 = a13;
              int v1157 = a11;
              int v1158 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1153 + a9 * v1155, a4 + a9 * v1154, a5, a6, a7, a8, v1158, v1157, v1156, v1152);
                int v1158 = a10;
                int v1157 = a11;
                uint64_t v1156 = a13;
                uint64_t v1155 = a15;
                uint64_t v1154 = a16;
                uint64_t v1153 = v28;
                char v1152 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1151 == 4)
        {
          int v2963 = a17;
          if (a12)
          {
            uint64_t v2964 = v28;
            uint64_t v2965 = a16;
            uint64_t v2966 = a15;
            uint64_t v2967 = a13;
            int v2968 = a11;
            int v2969 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2964 + a9 * v2966, a4 + a9 * v2965, a5, a6, a7, a8, v2969, v2968, v2967, v2963);
              int v2969 = a10;
              int v2968 = a11;
              uint64_t v2967 = a13;
              uint64_t v2966 = a15;
              uint64_t v2965 = a16;
              uint64_t v2964 = v28;
              int v2963 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1759 = a17;
          if (!v1151 && a12)
          {
            uint64_t v1760 = v28;
            uint64_t v1761 = a16;
            uint64_t v1762 = a15;
            uint64_t v1763 = a13;
            int v1764 = a11;
            int v1765 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1760 + a9 * v1762, a4 + a9 * v1761, a5, a6, a7, a8, v1765, v1764, v1763, v1759);
              int v1765 = a10;
              int v1764 = a11;
              uint64_t v1763 = a13;
              uint64_t v1762 = a15;
              uint64_t v1761 = a16;
              uint64_t v1760 = v28;
              int v1759 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x27D:
        uint64_t v3086 = *(unsigned __int8 *)(a1 + 380);
        int v1159 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3086 == 1)
        {
          if (v1159 == 4)
          {
            char v2368 = a17;
            if (a12)
            {
              uint64_t v2369 = v28;
              uint64_t v2370 = a16;
              uint64_t v2371 = a15;
              uint64_t v2372 = a13;
              int v2373 = a11;
              int v2374 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2369 + a9 * v2371, a4 + a9 * v2370, a5, a6, a7, a8, v2374, v2373, v2372, v2368);
                int v2374 = a10;
                int v2373 = a11;
                uint64_t v2372 = a13;
                uint64_t v2371 = a15;
                uint64_t v2370 = a16;
                uint64_t v2369 = v28;
                char v2368 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1160 = a17;
            if (!v1159 && a12)
            {
              uint64_t v1161 = v28;
              uint64_t v1162 = a16;
              uint64_t v1163 = a15;
              uint64_t v1164 = a13;
              int v1165 = a11;
              int v1166 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1161 + a9 * v1163, a4 + a9 * v1162, a5, a6, a7, a8, v1166, v1165, v1164, v1160);
                int v1166 = a10;
                int v1165 = a11;
                uint64_t v1164 = a13;
                uint64_t v1163 = a15;
                uint64_t v1162 = a16;
                uint64_t v1161 = v28;
                char v1160 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1159 == 4)
        {
          int v2970 = a17;
          if (a12)
          {
            uint64_t v2971 = v28;
            uint64_t v2972 = a16;
            uint64_t v2973 = a15;
            uint64_t v2974 = a13;
            int v2975 = a11;
            int v2976 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2971 + a9 * v2973, a4 + a9 * v2972, a5, a6, a7, a8, v2976, v2975, v2974, v2970);
              int v2976 = a10;
              int v2975 = a11;
              uint64_t v2974 = a13;
              uint64_t v2973 = a15;
              uint64_t v2972 = a16;
              uint64_t v2971 = v28;
              int v2970 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1766 = a17;
          if (!v1159 && a12)
          {
            uint64_t v1767 = v28;
            uint64_t v1768 = a16;
            uint64_t v1769 = a15;
            uint64_t v1770 = a13;
            int v1771 = a11;
            int v1772 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1767 + a9 * v1769, a4 + a9 * v1768, a5, a6, a7, a8, v1772, v1771, v1770, v1766);
              int v1772 = a10;
              int v1771 = a11;
              uint64_t v1770 = a13;
              uint64_t v1769 = a15;
              uint64_t v1768 = a16;
              uint64_t v1767 = v28;
              int v1766 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x27E:
        uint64_t v3087 = *(unsigned __int8 *)(a1 + 380);
        int v1167 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3087 == 1)
        {
          if (v1167 == 4)
          {
            char v2375 = a17;
            if (a12)
            {
              uint64_t v2376 = v28;
              uint64_t v2377 = a16;
              uint64_t v2378 = a15;
              uint64_t v2379 = a13;
              int v2380 = a11;
              int v2381 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2376 + a9 * v2378, a4 + a9 * v2377, a5, a6, a7, a8, v2381, v2380, v2379, v2375);
                int v2381 = a10;
                int v2380 = a11;
                uint64_t v2379 = a13;
                uint64_t v2378 = a15;
                uint64_t v2377 = a16;
                uint64_t v2376 = v28;
                char v2375 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1168 = a17;
            if (!v1167 && a12)
            {
              uint64_t v1169 = v28;
              uint64_t v1170 = a16;
              uint64_t v1171 = a15;
              uint64_t v1172 = a13;
              int v1173 = a11;
              int v1174 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1169 + a9 * v1171, a4 + a9 * v1170, a5, a6, a7, a8, v1174, v1173, v1172, v1168);
                int v1174 = a10;
                int v1173 = a11;
                uint64_t v1172 = a13;
                uint64_t v1171 = a15;
                uint64_t v1170 = a16;
                uint64_t v1169 = v28;
                char v1168 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1167 == 4)
        {
          int v2977 = a17;
          if (a12)
          {
            uint64_t v2978 = v28;
            uint64_t v2979 = a16;
            uint64_t v2980 = a15;
            uint64_t v2981 = a13;
            int v2982 = a11;
            int v2983 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2978 + a9 * v2980, a4 + a9 * v2979, a5, a6, a7, a8, v2983, v2982, v2981, v2977);
              int v2983 = a10;
              int v2982 = a11;
              uint64_t v2981 = a13;
              uint64_t v2980 = a15;
              uint64_t v2979 = a16;
              uint64_t v2978 = v28;
              int v2977 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1773 = a17;
          if (!v1167 && a12)
          {
            uint64_t v1774 = v28;
            uint64_t v1775 = a16;
            uint64_t v1776 = a15;
            uint64_t v1777 = a13;
            int v1778 = a11;
            int v1779 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1774 + a9 * v1776, a4 + a9 * v1775, a5, a6, a7, a8, v1779, v1778, v1777, v1773);
              int v1779 = a10;
              int v1778 = a11;
              uint64_t v1777 = a13;
              uint64_t v1776 = a15;
              uint64_t v1775 = a16;
              uint64_t v1774 = v28;
              int v1773 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x27F:
        uint64_t v3088 = *(unsigned __int8 *)(a1 + 380);
        int v1175 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3088 == 1)
        {
          if (v1175 == 4)
          {
            char v2382 = a17;
            if (a12)
            {
              uint64_t v2383 = v28;
              uint64_t v2384 = a16;
              uint64_t v2385 = a15;
              uint64_t v2386 = a13;
              int v2387 = a11;
              int v2388 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2383 + a9 * v2385, a4 + a9 * v2384, a5, a6, a7, a8, v2388, v2387, v2386, v2382);
                int v2388 = a10;
                int v2387 = a11;
                uint64_t v2386 = a13;
                uint64_t v2385 = a15;
                uint64_t v2384 = a16;
                uint64_t v2383 = v28;
                char v2382 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1176 = a17;
            if (!v1175 && a12)
            {
              uint64_t v1177 = v28;
              uint64_t v1178 = a16;
              uint64_t v1179 = a15;
              uint64_t v1180 = a13;
              int v1181 = a11;
              int v1182 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1177 + a9 * v1179, a4 + a9 * v1178, a5, a6, a7, a8, v1182, v1181, v1180, v1176);
                int v1182 = a10;
                int v1181 = a11;
                uint64_t v1180 = a13;
                uint64_t v1179 = a15;
                uint64_t v1178 = a16;
                uint64_t v1177 = v28;
                char v1176 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1175 == 4)
        {
          int v2984 = a17;
          if (a12)
          {
            uint64_t v2985 = v28;
            uint64_t v2986 = a16;
            uint64_t v2987 = a15;
            uint64_t v2988 = a13;
            int v2989 = a11;
            int v2990 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2985 + a9 * v2987, a4 + a9 * v2986, a5, a6, a7, a8, v2990, v2989, v2988, v2984);
              int v2990 = a10;
              int v2989 = a11;
              uint64_t v2988 = a13;
              uint64_t v2987 = a15;
              uint64_t v2986 = a16;
              uint64_t v2985 = v28;
              int v2984 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1780 = a17;
          if (!v1175 && a12)
          {
            uint64_t v1781 = v28;
            uint64_t v1782 = a16;
            uint64_t v1783 = a15;
            uint64_t v1784 = a13;
            int v1785 = a11;
            int v1786 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1781 + a9 * v1783, a4 + a9 * v1782, a5, a6, a7, a8, v1786, v1785, v1784, v1780);
              int v1786 = a10;
              int v1785 = a11;
              uint64_t v1784 = a13;
              uint64_t v1783 = a15;
              uint64_t v1782 = a16;
              uint64_t v1781 = v28;
              int v1780 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x280:
        uint64_t v3089 = *(unsigned __int8 *)(a1 + 380);
        int v1183 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3089 == 1)
        {
          if (v1183 == 4)
          {
            char v2389 = a17;
            if (a12)
            {
              uint64_t v2390 = v28;
              uint64_t v2391 = a16;
              uint64_t v2392 = a15;
              uint64_t v2393 = a13;
              int v2394 = a11;
              int v2395 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2390 + a9 * v2392, a4 + a9 * v2391, a5, a6, a7, a8, v2395, v2394, v2393, v2389);
                int v2395 = a10;
                int v2394 = a11;
                uint64_t v2393 = a13;
                uint64_t v2392 = a15;
                uint64_t v2391 = a16;
                uint64_t v2390 = v28;
                char v2389 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1184 = a17;
            if (!v1183 && a12)
            {
              uint64_t v1185 = v28;
              uint64_t v1186 = a16;
              uint64_t v1187 = a15;
              uint64_t v1188 = a13;
              int v1189 = a11;
              int v1190 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1185 + a9 * v1187, a4 + a9 * v1186, a5, a6, a7, a8, v1190, v1189, v1188, v1184);
                int v1190 = a10;
                int v1189 = a11;
                uint64_t v1188 = a13;
                uint64_t v1187 = a15;
                uint64_t v1186 = a16;
                uint64_t v1185 = v28;
                char v1184 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1183 == 4)
        {
          int v2991 = a17;
          if (a12)
          {
            uint64_t v2992 = v28;
            uint64_t v2993 = a16;
            uint64_t v2994 = a15;
            uint64_t v2995 = a13;
            int v2996 = a11;
            int v2997 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2992 + a9 * v2994, a4 + a9 * v2993, a5, a6, a7, a8, v2997, v2996, v2995, v2991);
              int v2997 = a10;
              int v2996 = a11;
              uint64_t v2995 = a13;
              uint64_t v2994 = a15;
              uint64_t v2993 = a16;
              uint64_t v2992 = v28;
              int v2991 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1787 = a17;
          if (!v1183 && a12)
          {
            uint64_t v1788 = v28;
            uint64_t v1789 = a16;
            uint64_t v1790 = a15;
            uint64_t v1791 = a13;
            int v1792 = a11;
            int v1793 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1788 + a9 * v1790, a4 + a9 * v1789, a5, a6, a7, a8, v1793, v1792, v1791, v1787);
              int v1793 = a10;
              int v1792 = a11;
              uint64_t v1791 = a13;
              uint64_t v1790 = a15;
              uint64_t v1789 = a16;
              uint64_t v1788 = v28;
              int v1787 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x281:
        uint64_t v3090 = *(unsigned __int8 *)(a1 + 380);
        int v1191 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v3090 == 1)
        {
          if (v1191 == 4)
          {
            char v2396 = a17;
            if (a12)
            {
              uint64_t v2397 = v28;
              uint64_t v2398 = a16;
              uint64_t v2399 = a15;
              uint64_t v2400 = a13;
              int v2401 = a11;
              int v2402 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v2397 + a9 * v2399, a4 + a9 * v2398, a5, a6, a7, a8, v2402, v2401, v2400, v2396);
                int v2402 = a10;
                int v2401 = a11;
                uint64_t v2400 = a13;
                uint64_t v2399 = a15;
                uint64_t v2398 = a16;
                uint64_t v2397 = v28;
                char v2396 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1192 = a17;
            if (!v1191 && a12)
            {
              uint64_t v1193 = v28;
              uint64_t v1194 = a16;
              uint64_t v1195 = a15;
              uint64_t v1196 = a13;
              int v1197 = a11;
              int v1198 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(a1, a3, v1193 + a9 * v1195, a4 + a9 * v1194, a5, a6, a7, a8, v1198, v1197, v1196, v1192);
                int v1198 = a10;
                int v1197 = a11;
                uint64_t v1196 = a13;
                uint64_t v1195 = a15;
                uint64_t v1194 = a16;
                uint64_t v1193 = v28;
                char v1192 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1191 == 4)
        {
          int v2998 = a17;
          if (a12)
          {
            uint64_t v2999 = v28;
            uint64_t v3000 = a16;
            uint64_t v3001 = a15;
            uint64_t v3002 = a13;
            int v3003 = a11;
            int v3004 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v2999 + a9 * v3001, a4 + a9 * v3000, a5, a6, a7, a8, v3004, v3003, v3002, v2998);
              int v3004 = a10;
              int v3003 = a11;
              uint64_t v3002 = a13;
              uint64_t v3001 = a15;
              uint64_t v3000 = a16;
              uint64_t v2999 = v28;
              int v2998 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1794 = a17;
          if (!v1191 && a12)
          {
            uint64_t v1795 = v28;
            uint64_t v1796 = a16;
            uint64_t v1797 = a15;
            uint64_t v1798 = a13;
            int v1799 = a11;
            int v1800 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(a1, a3, v1795 + a9 * v1797, a4 + a9 * v1796, a5, a6, a7, a8, v1800, v1799, v1798, v1794);
              int v1800 = a10;
              int v1799 = a11;
              uint64_t v1798 = a13;
              uint64_t v1797 = a15;
              uint64_t v1796 = a16;
              uint64_t v1795 = v28;
              int v1794 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      default:
        return;
    }
  }
}

uint64_t agxsTwiddle3DAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 1) >> 1;
        unsigned int v26 = (a3 + 3) >> 2;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 1, (a12 + 3) >> 2, (a13 + 1) >> 1, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v226 = a9;
        uint64_t v227 = v13;
        uint64_t v228 = v47;
        do
        {
          *v227++ = *(_OWORD *)(result + 16 * (v228 + v54));
          uint64_t v228 = (v228 - v29) & v29;
          --v226;
        }
        while (v226);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v254 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    double result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v257 = a8 >> v66;
    unsigned int v259 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v255 = a10 + a8;
    unsigned int v251 = (v69 - 1 + a10 + a8) >> v66;
    char v253 = v66;
    if (a8 >> v66 >= v251) {
      return result;
    }
    double result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v259 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v267 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v257;
LABEL_89:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v257;
    int v265 = v85 * v250;
    unsigned int v261 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v259;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v259 - v248;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v253;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v263 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v267;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v273 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v269;
      if (v273 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v271)
      {
        unsigned int v85 = v261;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v261 == v251) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      double result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      uint64_t v134 = (_OWORD *)((char *)&a2[v100 + ((v94 - v267) << v67) - v84] + v263);
      uint64_t v135 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v254;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          *v137++ = *(_OWORD *)(v135 + 16 * (v138 + v125));
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        double result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        uint64_t v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  double result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v240 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v234 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v234 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v145 = v254;
  unsigned int v147 = a8;
  int v146 = a10;
  unsigned int v233 = v282;
  if (v282)
  {
    unsigned int v148 = 1 << v23;
    unsigned int v149 = v283;
    int v264 = v280;
    BOOL v260 = v280 != 0;
    int v262 = v281;
    BOOL v258 = v281 != 0;
    int v232 = 1 << v234;
    if (1 << v234 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v234;
    }
    if (v148 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v268 = v153 != 0;
    unsigned int v270 = v154;
    BOOL v266 = v154 != 0;
    if (v283)
    {
      unsigned int v155 = 0;
      int v156 = 0;
      unsigned int v231 = a7 >> v234;
      unsigned int v252 = a8 >> v23;
      int v275 = v284;
      int v272 = v281 | v280;
      unsigned int v230 = a9 + a7;
      int v229 = v277;
      int v157 = v279;
      int v274 = v278;
      int v247 = (v148 - 1) & a8;
      int v249 = (v148 - 1) & (a10 + a8);
      unsigned int v245 = v148 - v247;
      int v158 = ~(-1 << v153);
      int v243 = v279;
      int v244 = v270 | v153;
      unsigned int v256 = v153;
      int v236 = 1 << v23;
      char v237 = v23;
      do
      {
        int v235 = v156;
        int v159 = 0;
        int v160 = 0;
        unsigned int v161 = (v155 + v231) << v234;
        int v162 = a9;
        if (v230 >= (v155 + v231 + 1) << v234) {
          int v162 = v232 - ((v232 - 1) & a7);
        }
        int v163 = 1 << v234;
        if (v230 < (v155 + v231 + 1) << v234) {
          int v163 = (v232 - 1) & (a9 + a7);
        }
        int v164 = v229 + v155;
        int v165 = v155 << v234;
        if (v161 >= v19) {
          int v166 = v163;
        }
        else {
          int v166 = v162;
        }
        if (v161 >= v19) {
          int v167 = 0;
        }
        else {
          int v167 = (v232 - 1) & a7;
        }
        int v239 = &v240[v167 + v165];
        do
        {
          int v168 = v274 + v159;
          if (v275)
          {
            int v169 = v272;
            if (v272)
            {
              int v170 = 0;
              int v169 = 0;
              int v171 = 1;
              BOOL v172 = v258;
              BOOL v173 = v260;
              int v175 = v262;
              int v174 = v264;
              do
              {
                --v174;
                if (v173) {
                  v169 |= (v171 & v164) << v170;
                }
                else {
                  int v174 = 0;
                }
                if (v173) {
                  ++v170;
                }
                --v175;
                if (v172) {
                  v169 |= (v171 & v168) << v170;
                }
                else {
                  int v175 = 0;
                }
                if (v172) {
                  ++v170;
                }
                v171 *= 2;
                --v170;
                BOOL v172 = v175 != 0;
                BOOL v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            int v169 = v272;
            if (v272)
            {
              int v176 = 0;
              int v169 = 0;
              int v177 = 1;
              BOOL v179 = v258;
              BOOL v178 = v260;
              int v180 = v262;
              int v181 = v264;
              do
              {
                --v180;
                if (v179) {
                  v169 |= (v177 & v168) << v176;
                }
                else {
                  int v180 = 0;
                }
                if (v179) {
                  ++v176;
                }
                --v181;
                if (v178) {
                  v169 |= (v177 & v164) << v176;
                }
                else {
                  int v181 = 0;
                }
                if (v178) {
                  ++v176;
                }
                v177 *= 2;
                --v176;
                BOOL v178 = v181 != 0;
                BOOL v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          int v182 = *(_DWORD *)(v145 + 4 * ((v169 + v157) | ((v169 + v157) >> 8 << 9)));
          if (v182 < 0)
          {
            unint64_t v183 = v145 - *((void *)a13 + 3) + ((unint64_t)(v182 & 0x1FFFFFFF) << 14);
            double result = *a13;
            unsigned int v184 = a13[2];
            if (result > v184)
            {
              double result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v256;
              unsigned int v148 = v236;
              char v23 = v237;
              uint64_t v17 = a11;
              unsigned int v147 = a8;
              int v146 = a10;
              uint64_t v145 = v254;
              v183 += result;
            }
            unsigned int v185 = (v159 + v252) << v23;
            unsigned int v186 = v245;
            if (a10 + a8 >= (v159 + v252 + 1) << v23)
            {
              unsigned int v187 = v148;
            }
            else
            {
              unsigned int v186 = v146;
              unsigned int v187 = v249;
            }
            if (v185 >= v147) {
              int v188 = 0;
            }
            else {
              int v188 = v247;
            }
            if (v185 >= v147) {
              unsigned int v186 = v187;
            }
            if (!v244)
            {
              uint64_t v206 = 0;
              uint64_t v190 = 0;
              uint64_t v197 = 0;
              uint64_t v213 = 0;
              int v157 = v243;
              if (!v186) {
                goto LABEL_191;
              }
LABEL_263:
              if (v166)
              {
                int v220 = 0;
                uint64_t v221 = (_OWORD *)((char *)v239 + (v188 + (v159 << v23)) * v17);
                do
                {
                  int v222 = v166;
                  int v223 = v221;
                  uint64_t v224 = v206;
                  do
                  {
                    double result = v224 + v213;
                    *v223++ = *(_OWORD *)(v183 + 16 * (v224 + v213));
                    uint64_t v224 = (v224 - v190) & v190;
                    --v222;
                  }
                  while (v222);
                  uint64_t v213 = (v213 - v197) & v197;
                  uint64_t v221 = (_OWORD *)((char *)v221 + v17);
                  ++v220;
                }
                while (v220 != v186);
              }
              goto LABEL_191;
            }
            unsigned int v189 = 0;
            uint64_t v190 = 0;
            int v191 = 1;
            BOOL v192 = v266;
            BOOL v193 = v268;
            unsigned int v194 = v153;
            unsigned int v195 = v270;
            do
            {
              --v194;
              if (v193) {
                v190 |= (unint64_t)(v191 & v158) << v189++;
              }
              else {
                unsigned int v194 = 0;
              }
              --v195;
              if (!v192) {
                unsigned int v195 = 0;
              }
              v191 *= 2;
              unsigned int v189 = (__PAIR64__(v189, v192) - 1) >> 32;
              BOOL v192 = v195 != 0;
              BOOL v193 = v194 != 0;
            }
            while (v195 | v194);
            int v196 = 0;
            uint64_t v197 = 0;
            int v198 = 1;
            BOOL v199 = v266;
            BOOL v200 = v268;
            unsigned int v201 = v153;
            unsigned int v202 = v270;
            do
            {
              --v201;
              int v203 = v200;
              if (!v203) {
                unsigned int v201 = 0;
              }
              int v204 = v196 + v203;
              --v202;
              if (v199) {
                v197 |= (unint64_t)(v198 & ~(-1 << v270)) << v204++;
              }
              else {
                unsigned int v202 = 0;
              }
              v198 *= 2;
              int v196 = v204 - 1;
              BOOL v199 = v202 != 0;
              BOOL v200 = v201 != 0;
            }
            while (v202 | v201);
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            int v207 = 1;
            BOOL v209 = v266;
            BOOL v208 = v268;
            unsigned int v210 = v153;
            unsigned int v211 = v270;
            do
            {
              --v210;
              if (v208) {
                v206 |= (unint64_t)(v207 & v167) << v205++;
              }
              else {
                unsigned int v210 = 0;
              }
              --v211;
              if (!v209) {
                unsigned int v211 = 0;
              }
              v207 *= 2;
              unsigned int v205 = (__PAIR64__(v205, v209) - 1) >> 32;
              BOOL v209 = v211 != 0;
              BOOL v208 = v210 != 0;
            }
            while (v211 | v210);
            int v212 = 0;
            uint64_t v213 = 0;
            int v214 = 1;
            LOBYTE(result) = v266;
            BOOL v215 = v268;
            unsigned int v216 = v153;
            unsigned int v217 = v270;
            do
            {
              --v216;
              int v218 = v215;
              if (!v218) {
                unsigned int v216 = 0;
              }
              int v219 = v212 + v218;
              --v217;
              if (result) {
                v213 |= (unint64_t)(v214 & v188) << v219++;
              }
              else {
                unsigned int v217 = 0;
              }
              v214 *= 2;
              int v212 = v219 - 1;
              double result = v217 != 0;
              BOOL v215 = v216 != 0;
            }
            while (v217 | v216);
            unsigned int v153 = v256;
            int v157 = v243;
            if (v186) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v159 = (unsigned __int16)++v160;
        }
        while (v149 > (unsigned __int16)v160);
        int v156 = v235 + 1;
        unsigned int v155 = (unsigned __int16)(v235 + 1);
        unsigned int v19 = a7;
      }
      while (v233 > v155);
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            int v18 = (_OWORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, void *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            int v18 = (void *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          int v18 = (void *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>>(uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        double result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(void *)(v16 + 8 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (void *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    double result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    double result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      double result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (void *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(void *)(v134 + 8 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          double result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (void *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  double result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        uint64_t v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            double result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              double result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (void *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    double result = *(void *)(v179 + 8 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (uint64_t *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              double result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            int v18 = (_DWORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          int v18 = (_DWORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)1>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        double result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(_DWORD *)(v16 + 4 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (_DWORD *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    double result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    double result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      double result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (_DWORD *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(_DWORD *)(v134 + 4 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          double result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (_DWORD *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  double result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        uint64_t v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            double result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              double result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (_DWORD *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    double result = *(unsigned int *)(v179 + 4 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (_DWORD *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              double result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            int v18 = (_WORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          int v18 = (_WORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        double result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(_WORD *)(v16 + 2 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (_WORD *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    double result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    double result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      double result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (_WORD *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(_WORD *)(v134 + 2 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          double result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (_WORD *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  double result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        uint64_t v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            double result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              double result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (_WORD *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    double result = *(unsigned __int16 *)(v179 + 2 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (_WORD *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              double result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    uint64_t v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)1>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = a11;
  int v19 = a9;
  int v18 = a10;
  unsigned int v240 = a7;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & v240) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        uint64_t v226 = 0;
        uint64_t v227 = v47;
        do
        {
          *(unsigned char *)(v13 + v226) = *(unsigned char *)(v54 + result + v227);
          uint64_t v227 = (v227 - v29) & v29;
          ++v226;
        }
        while (a9 != v226);
        uint64_t v54 = (v54 - v38) & v38;
        v13 += a11;
      }
    }
    return result;
  }
  uint64_t v254 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    double result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v255 = 1 << v66;
    int v76 = v69 - 1;
    char v250 = v66;
    unsigned int v251 = a10 + a8;
    unsigned int v253 = a8 >> v66;
    unsigned int v248 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v248) {
      return result;
    }
    double result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v271 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v255 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v265 = a7 >> v67;
    unsigned int v269 = (v77 + a9 + a7) >> v67;
    if (result >= v269) {
      return result;
    }
    unsigned int v246 = (v75 + ~(-1 << v67)) >> v67;
    unsigned int v84 = v77 & a7;
    int v267 = v77 & v271;
    int v85 = (1 << v67) - (v77 & a7);
    int v242 = v76 & v251;
    uint64_t v244 = v76 & a8;
    unsigned int v86 = v253;
    unsigned int v87 = v84;
    uint64_t v259 = a2 - v84;
LABEL_89:
    unsigned int v88 = v86;
    unsigned int v89 = v86 << v250;
    unsigned int v90 = v88 - v253;
    int v263 = v88 * v246;
    unsigned int v257 = v88 + 1;
    BOOL v91 = v251 >= (v88 + 1) << v250;
    unsigned int v92 = v255;
    if (!v91) {
      unsigned int v92 = v242;
    }
    int v93 = v255 - v244;
    if (!v91) {
      int v93 = v18;
    }
    int v94 = v90 << v250;
    if (v89 >= a8) {
      unsigned int v95 = 0;
    }
    else {
      unsigned int v95 = v244;
    }
    if (v89 >= a8) {
      unsigned int v96 = v92;
    }
    else {
      unsigned int v96 = v93;
    }
    uint64_t v261 = (v95 + v94 - v244) * a11;
    unsigned int v97 = v265;
    while (1)
    {
      unsigned int v98 = v97 << v67;
      unsigned int v99 = v97 + 1;
      if (v271 >= (v97 + 1) << v67) {
        int v100 = v85;
      }
      else {
        int v100 = v19;
      }
      int v101 = 1 << v67;
      if (v271 < v99 << v67) {
        int v101 = v267;
      }
      if (v98 >= a7) {
        unsigned int v102 = 0;
      }
      else {
        unsigned int v102 = v87;
      }
      if (v98 < a7) {
        int v101 = v100;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v121 = 0;
      uint64_t v104 = 0;
      uint64_t v111 = 0;
      uint64_t v128 = 0;
      if (v96) {
        goto LABEL_147;
      }
LABEL_100:
      unsigned int v97 = v99;
      int v19 = a9;
      if (v99 == v269)
      {
        unsigned int v86 = v257;
        int v18 = a10;
        if (v257 == v248) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v103 = 0;
    uint64_t v104 = 0;
    int v105 = 1;
    BOOL v106 = v81 != 0;
    BOOL v107 = v83 != 0;
    unsigned int v108 = v81;
    unsigned int v109 = v83;
    do
    {
      --v108;
      if (v106) {
        v104 |= (unint64_t)(v105 & ~(-1 << v81)) << v103++;
      }
      else {
        unsigned int v108 = 0;
      }
      --v109;
      if (!v107) {
        unsigned int v109 = 0;
      }
      v105 *= 2;
      unsigned int v103 = (__PAIR64__(v103, v107) - 1) >> 32;
      BOOL v107 = v109 != 0;
      BOOL v106 = v108 != 0;
    }
    while (v109 | v108);
    int v110 = 0;
    uint64_t v111 = 0;
    int v112 = 1;
    BOOL v113 = v81 != 0;
    BOOL v114 = v83 != 0;
    unsigned int v115 = v81;
    unsigned int v116 = v83;
    do
    {
      int v117 = v113;
      if (v117) {
        --v115;
      }
      else {
        unsigned int v115 = 0;
      }
      int v118 = v110 + v117;
      if (v114) {
        --v116;
      }
      else {
        unsigned int v116 = 0;
      }
      if (v114)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v118;
        int v119 = v118 + 1;
      }
      else
      {
        int v119 = v118;
      }
      v112 *= 2;
      int v110 = v119 - 1;
      BOOL v114 = v116 != 0;
      BOOL v113 = v115 != 0;
    }
    while (v116 | v115);
    unsigned int v120 = 0;
    uint64_t v121 = 0;
    int v122 = 1;
    BOOL v123 = v81 != 0;
    BOOL v124 = v83 != 0;
    unsigned int v125 = v81;
    unsigned int v126 = v83;
    do
    {
      --v125;
      if (v123)
      {
        v121 |= (unint64_t)(v122 & v102) << v120;
        unsigned int v127 = v120 + 1;
      }
      else
      {
        unsigned int v125 = 0;
        unsigned int v127 = v120;
      }
      --v126;
      if (!v124) {
        unsigned int v126 = 0;
      }
      v122 *= 2;
      unsigned int v120 = (__PAIR64__(v127, v124) - 1) >> 32;
      BOOL v124 = v126 != 0;
      BOOL v123 = v125 != 0;
    }
    while (v126 | v125);
    LODWORD(result) = 0;
    uint64_t v128 = 0;
    int v129 = 1;
    BOOL v130 = v81 != 0;
    BOOL v131 = v83 != 0;
    unsigned int v132 = v81;
    unsigned int v133 = v83;
    do
    {
      --v132;
      int v134 = v130;
      if (!v134) {
        unsigned int v132 = 0;
      }
      int v135 = result + v134;
      --v133;
      if (v131) {
        v128 |= (unint64_t)(v129 & v95) << v135++;
      }
      else {
        unsigned int v133 = 0;
      }
      v129 *= 2;
      double result = (v135 - 1);
      BOOL v131 = v133 != 0;
      BOOL v130 = v132 != 0;
    }
    while (v133 | v132);
    a7 = v240;
    if (!v96) {
      goto LABEL_100;
    }
LABEL_147:
    if (v101)
    {
      int v136 = 0;
      uint64_t v137 = v259 + v261 + v102 + ((v97 - v265) << v67);
      uint64_t v138 = (v97 + v263) * a12[3] * *((unsigned __int8 *)a12 + 9) + v254;
      do
      {
        double result = 0;
        uint64_t v139 = v121;
        do
        {
          *(unsigned char *)(v137 + result) = *(unsigned char *)(v138 + v128 + v139);
          uint64_t v139 = (v139 - v104) & v104;
          ++result;
        }
        while (v101 != result);
        uint64_t v128 = (v128 - v111) & v111;
        v137 += a11;
        ++v136;
      }
      while (v136 != v96);
    }
    goto LABEL_100;
  }
  double result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v274);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  uint64_t v233 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v140 = a6 >> v20;
    unsigned int v141 = 1 << v21;
    unsigned int v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v142 = 0;
    }
    BOOL v143 = v141 >= a5;
    if (v141 < a5) {
      char v144 = v21 + v20 + v142;
    }
    else {
      char v144 = *((unsigned char *)a12 + 12);
    }
    if (v143) {
      LOBYTE(v145) = *((unsigned char *)a12 + 13);
    }
    else {
      int v145 = -v142;
    }
    if (!v140) {
      char v21 = v144;
    }
    char v234 = v21;
    if (v140) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v145;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v234 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v146 = v254;
  int v147 = a10;
  unsigned int v148 = a8;
  unsigned int v232 = v280;
  if (v280)
  {
    uint64_t v149 = (1 << v23);
    unsigned int v150 = v281;
    int v151 = v278;
    BOOL v260 = v278 != 0;
    int v262 = v279;
    BOOL v258 = v279 != 0;
    int v231 = 1 << v234;
    if (1 << v234 >= a5) {
      unsigned int v152 = a5;
    }
    else {
      unsigned int v152 = 1 << v234;
    }
    if (v149 >= a6) {
      unsigned int v153 = a6;
    }
    else {
      unsigned int v153 = 1 << v23;
    }
    unsigned int v154 = 32 - __clz(v152 - 1);
    if (v152 >= 2) {
      unsigned int v155 = v154;
    }
    else {
      unsigned int v155 = 0;
    }
    unsigned int v156 = 32 - __clz(v153 - 1);
    if (v153 < 2) {
      unsigned int v156 = 0;
    }
    BOOL v266 = v155 != 0;
    unsigned int v268 = v156;
    BOOL v264 = v156 != 0;
    if (v281)
    {
      int v157 = 0;
      unsigned int v230 = v240 >> v234;
      unsigned int v252 = a8 >> v23;
      int v270 = v279 | v278;
      int v273 = v282;
      unsigned int v229 = a9 + v240;
      int v228 = v275;
      int v158 = v277;
      int v272 = v276;
      unsigned int v247 = (v149 - 1) & a8;
      int v249 = (v149 - 1) & (a10 + a8);
      int v245 = v149 - v247;
      int v159 = ~(-1 << v155);
      int v241 = v277;
      int v243 = v156 | v155;
      int v160 = ~(-1 << v156);
      unsigned int v256 = v155;
      unsigned int v236 = v281;
      char v237 = v23;
      do
      {
        int v161 = 0;
        int v162 = v228 + v157;
        unsigned int v163 = (v157 + v230) << v234;
        int v164 = v231 - ((v231 - 1) & v240);
        if (v229 < (v157 + v230 + 1) << v234) {
          int v164 = v19;
        }
        int v165 = 1 << v234;
        if (v229 < (v157 + v230 + 1) << v234) {
          int v165 = (v231 - 1) & (a9 + v240);
        }
        int v235 = v157;
        if (v163 >= v240) {
          int v166 = v165;
        }
        else {
          int v166 = v164;
        }
        if (v163 >= v240) {
          int v167 = 0;
        }
        else {
          int v167 = (v231 - 1) & v240;
        }
        uint64_t v238 = (v167 + (v157 << v234)) + v233;
        do
        {
          int v168 = v272 + v161;
          if (v273)
          {
            int v169 = v270;
            if (v270)
            {
              int v170 = 0;
              int v169 = 0;
              int v171 = 1;
              BOOL v172 = v258;
              BOOL v173 = v260;
              int v174 = v151;
              int v175 = v262;
              do
              {
                --v174;
                if (v173) {
                  v169 |= (v171 & v162) << v170;
                }
                else {
                  int v174 = 0;
                }
                if (v173) {
                  ++v170;
                }
                --v175;
                if (v172) {
                  v169 |= (v171 & v168) << v170;
                }
                else {
                  int v175 = 0;
                }
                if (v172) {
                  ++v170;
                }
                v171 *= 2;
                --v170;
                BOOL v172 = v175 != 0;
                BOOL v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            int v169 = v270;
            if (v270)
            {
              int v176 = 0;
              int v169 = 0;
              int v177 = 1;
              BOOL v179 = v258;
              BOOL v178 = v260;
              int v180 = v262;
              int v181 = v151;
              do
              {
                --v180;
                if (v179) {
                  v169 |= (v177 & v168) << v176;
                }
                else {
                  int v180 = 0;
                }
                if (v179) {
                  ++v176;
                }
                --v181;
                if (v178) {
                  v169 |= (v177 & v162) << v176;
                }
                else {
                  int v181 = 0;
                }
                if (v178) {
                  ++v176;
                }
                v177 *= 2;
                --v176;
                BOOL v178 = v181 != 0;
                BOOL v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          int v182 = *(_DWORD *)(v146 + 4 * ((v169 + v158) | ((v169 + v158) >> 8 << 9)));
          if (v182 < 0)
          {
            unint64_t v183 = v146 - *((void *)a13 + 3) + ((unint64_t)(v182 & 0x1FFFFFFF) << 14);
            double result = *a13;
            unsigned int v184 = a13[2];
            if (result > v184)
            {
              uint64_t v185 = v149;
              double result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v155 = v256;
              uint64_t v149 = v185;
              uint64_t v17 = a11;
              unsigned int v150 = v236;
              char v23 = v237;
              unsigned int v148 = a8;
              int v147 = a10;
              uint64_t v146 = v254;
              v183 += result;
            }
            unsigned int v186 = (v161 + v252) << v23;
            int v187 = v245;
            if (a10 + a8 >= (v161 + v252 + 1) << v23)
            {
              int v188 = v149;
            }
            else
            {
              int v187 = v147;
              int v188 = v249;
            }
            if (v186 >= v148) {
              unsigned int v189 = 0;
            }
            else {
              unsigned int v189 = v247;
            }
            if (v186 >= v148) {
              int v187 = v188;
            }
            if (!v243)
            {
              uint64_t v207 = 0;
              uint64_t v191 = 0;
              uint64_t v198 = 0;
              uint64_t v214 = 0;
              int v158 = v241;
              if (!v187) {
                goto LABEL_192;
              }
LABEL_264:
              if (v166)
              {
                int v221 = 0;
                uint64_t v222 = v238 + (v189 + (v161 << v23)) * v17;
                do
                {
                  uint64_t v223 = 0;
                  uint64_t v224 = v207;
                  do
                  {
                    double result = *(unsigned __int8 *)(v214 + v183 + v224);
                    *(unsigned char *)(v222 + v223) = result;
                    uint64_t v224 = (v224 - v191) & v191;
                    ++v223;
                  }
                  while (v166 != v223);
                  uint64_t v214 = (v214 - v198) & v198;
                  v222 += v17;
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_192;
            }
            unsigned int v190 = 0;
            uint64_t v191 = 0;
            int v192 = 1;
            BOOL v193 = v264;
            BOOL v194 = v266;
            unsigned int v195 = v155;
            unsigned int v196 = v268;
            do
            {
              --v195;
              if (v194) {
                v191 |= (unint64_t)(v192 & v159) << v190++;
              }
              else {
                unsigned int v195 = 0;
              }
              --v196;
              if (!v193) {
                unsigned int v196 = 0;
              }
              v192 *= 2;
              unsigned int v190 = (__PAIR64__(v190, v193) - 1) >> 32;
              BOOL v193 = v196 != 0;
              BOOL v194 = v195 != 0;
            }
            while (v196 | v195);
            int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v264;
            BOOL v201 = v266;
            unsigned int v202 = v155;
            unsigned int v203 = v268;
            do
            {
              --v202;
              int v204 = v201;
              if (!v204) {
                unsigned int v202 = 0;
              }
              int v205 = v197 + v204;
              --v203;
              if (v200) {
                v198 |= (unint64_t)(v199 & v160) << v205++;
              }
              else {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              int v197 = v205 - 1;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            unsigned int v206 = 0;
            uint64_t v207 = 0;
            int v208 = 1;
            BOOL v210 = v264;
            BOOL v209 = v266;
            unsigned int v211 = v155;
            unsigned int v212 = v268;
            do
            {
              --v211;
              if (v209) {
                v207 |= (unint64_t)(v208 & v167) << v206++;
              }
              else {
                unsigned int v211 = 0;
              }
              --v212;
              if (!v210) {
                unsigned int v212 = 0;
              }
              v208 *= 2;
              unsigned int v206 = (__PAIR64__(v206, v210) - 1) >> 32;
              BOOL v210 = v212 != 0;
              BOOL v209 = v211 != 0;
            }
            while (v212 | v211);
            int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            LOBYTE(result) = v264;
            BOOL v216 = v266;
            unsigned int v217 = v155;
            unsigned int v218 = v268;
            do
            {
              --v217;
              int v219 = v216;
              if (!v219) {
                unsigned int v217 = 0;
              }
              int v220 = v213 + v219;
              --v218;
              if (result) {
                v214 |= (unint64_t)(v215 & v189) << v220++;
              }
              else {
                unsigned int v218 = 0;
              }
              v215 *= 2;
              int v213 = v220 - 1;
              double result = v218 != 0;
              BOOL v216 = v217 != 0;
            }
            while (v218 | v217);
            unsigned int v155 = v256;
            int v158 = v241;
            if (v187) {
              goto LABEL_264;
            }
          }
LABEL_192:
          ++v161;
        }
        while (v150 > (unsigned __int16)v161);
        int v157 = v235 + 1;
        int v19 = a9;
      }
      while (v232 > (unsigned __int16)(v235 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)1>(uint64_t result, void *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 3) >> 2;
        unsigned int v26 = (a3 + 3) >> 2;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (void *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 11) / 0xCu;
        unsigned int v26 = (a3 + 11) / 0xCu;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xC, (a12 + 11) / 0xCu, (a13 + 11) / 0xCu, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 9) / 0xAu;
        unsigned int v26 = (a3 + 11) / 0xCu;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xA, (a12 + 11) / 0xCu, (a13 + 9) / 0xAu, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 9) / 0xAu;
        unsigned int v26 = (a3 + 9) / 0xAu;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 0xA, (a12 + 9) / 0xAu, (a13 + 9) / 0xAu, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 9) / 0xAu;
        unsigned int v25 = (a4 + 7) >> 3;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 >> 3, (a12 + 9) / 0xAu, (a13 + 7) >> 3, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 5) / 6u;
        unsigned int v26 = (a3 + 9) / 0xAu;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 6, (a12 + 9) / 0xAu, (a13 + 5) / 6u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 4) / 5u;
        unsigned int v26 = (a3 + 9) / 0xAu;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 5, (a12 + 9) / 0xAu, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 7) >> 3;
        unsigned int v26 = (a3 + 7) >> 3;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 3, (a12 + 7) >> 3, (a13 + 7) >> 3, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 7) >> 3;
        unsigned int v25 = (a4 + 5) / 6u;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 6, (a12 + 7) >> 3, (a13 + 5) / 6u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 7) >> 3;
        unsigned int v25 = (a4 + 4) / 5u;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 5, (a12 + 7) >> 3, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 3) >> 2;
        unsigned int v26 = (a3 + 7) >> 3;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 2, (a12 + 7) >> 3, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 5) / 6u;
        unsigned int v26 = (a3 + 5) / 6u;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 6, (a12 + 5) / 6u, (a13 + 5) / 6u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 4) / 5u;
        unsigned int v26 = (a3 + 5) / 6u;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 5, (a12 + 5) / 6u, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 4) / 5u;
        unsigned int v26 = (a3 + 4) / 5u;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 / 5, (a12 + 4) / 5u, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 4) / 5u;
        unsigned int v25 = (a4 + 3) >> 2;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 >> 2, (a12 + 4) / 5u, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 3) >> 2;
        unsigned int v26 = (a3 + 3) >> 2;
        do
        {
          double result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v133 = v21;
  uint64_t v134 = v22;
  uint64_t v121 = v23;
  uint64_t v24 = v12;
  uint64_t v161 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v138 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v120 = v14 + a10 - 1;
  unsigned int v122 = v120 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v141 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v132 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v131 = isLevelTiled;
  if (v25 <= v122)
  {
    unsigned int v130 = v16 + a9 - 1;
    unsigned int v119 = v16 >> 4;
    if (v16 >> 4 <= v130 >> 4)
    {
      unsigned int v116 = v20 - 1;
      unsigned int v118 = (v18 - 1) >> 4;
      int v139 = ((v20 - 1) & 0xF) + 1;
      unsigned int v140 = (v20 - 1) >> 4;
      int v117 = ((v18 - 1) & 0xF) + 1;
      uint64_t v123 = 8 * a11;
      uint64_t v124 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v129 = v36.i32[0] | v36.i32[1];
      BOOL v127 = v36.i32[1] != 0;
      int8x8_t v128 = v36;
      BOOL v126 = v36.i32[0] != 0;
      unint64_t v115 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (16 * v25) | 0xF;
        if (16 * v25 <= v138) {
          int v38 = v138;
        }
        else {
          int v38 = 16 * v25;
        }
        unsigned int v39 = v119;
        if (v120 < v37) {
          unsigned int v37 = v120;
        }
        int v125 = v38 - 16 * v25;
        int v136 = v37 - v38 + 1;
        unsigned int v137 = 16 * v25;
        int v40 = v117;
        if (v25 != v118) {
          int v40 = 16;
        }
        unsigned int v142 = v40;
        uint64_t v135 = v121 + (v38 - v138) * a11;
        do
        {
          unsigned int v41 = 16 * v39;
          unsigned int v42 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v39;
          }
          if (v130 < v42) {
            unsigned int v42 = v130;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v140) {
            unsigned int v45 = v139;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v137 >= v138 && v41 >= v16)
          {
            int v47 = v139;
            if (v39 != v140) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v136 != v142;
          }
          if (v131)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v115 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v106 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v107 = 0;
              if (v73) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v108 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v108 | v107) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v110 = 0;
            }
            else
            {
              unsigned int v107 = 32 - __clz(~(-1 << -(char)__clz(v106)));
              if ((v73 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v108 = 0;
              if (!v107) {
                goto LABEL_131;
              }
LABEL_120:
              int v109 = 0;
              uint64_t v110 = 0;
              int v111 = v39 & v106;
              BOOL v112 = v107 != 0;
              BOOL v113 = v108 != 0;
              int v114 = 1;
              do
              {
                --v107;
                if (v112) {
                  v110 |= (unint64_t)(v114 & v111) << v109++;
                }
                else {
                  unsigned int v107 = 0;
                }
                --v108;
                if (v113) {
                  v110 |= (unint64_t)(v114 & v25 & ((v74 >> 4) - 1)) << v109++;
                }
                else {
                  unsigned int v108 = 0;
                }
                v114 *= 2;
                --v109;
                BOOL v113 = v108 != 0;
                BOOL v112 = v107 != 0;
              }
              while (v108 | v107);
            }
            unint64_t v56 = ((unint64_t)(v41 / v70 + v137 / v74 * ((v70 + v116) / v70)) << 14) + (v110 << 10);
            goto LABEL_60;
          }
          if (v129)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v126;
            BOOL v53 = v127;
            __int32 v55 = v128.i32[0];
            __int32 v54 = v128.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 10;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          int v75 = (unsigned char *)(v133 + v56);
          if (v132)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v133 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v141;
            int v75 = __dst;
          }
          unsigned int v78 = (unsigned __int8 *)(v134 + 8 * v64);
          uint64_t v79 = v16;
          unsigned int v80 = (_OWORD *)(v135 + 8 * (v43 - v16));
          char v81 = v45 < 0x10 || v46;
          if ((v81 & 1) == 0 && v142 > 0xF)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            unint64_t v83 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80, a11, (unint64_t)v75, *v78, v82)];
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v124), a11, v83, v78[1], v82);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80 + 4, a11, v84, v78[2], v82);
            unint64_t v86 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v124 + 64), a11, v85, v78[3], v82);
            unsigned int v87 = (char *)v80 + v123;
            unint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v123), a11, v86, v78[4], v82);
            unsigned int v89 = (_OWORD *)((char *)v80 + 12 * a11);
            unint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v89, a11, v88, v78[5], v82);
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)v87 + 4, a11, v90, v78[6], v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v89 + 4, a11, v90 + v91, v78[7], v82);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v150 = v45;
          char v151 = v142;
          unsigned int v146 = v125;
          unsigned int v147 = v43 - v41;
          block[6] = v78;
          char v144 = v80;
          uint64_t v145 = a11;
          unsigned int v148 = v136;
          unsigned int v149 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v92 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          unint64_t v93 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v153, 128, (unint64_t)v75, *v78, v92)];
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v155, 128, v93, v78[1], v92);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v154, 128, v94, v78[2], v92);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v156, 128, v95, v78[3], v92);
          unint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v157, 128, v96, v78[4], v92);
          unint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v159, 128, v97, v78[5], v92);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v158, 128, v98, v78[6], v92);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v160, 128, v98 + v99, v78[7], v92);
          unint64_t v100 = v148;
          uint64_t v16 = v79;
          if (v148)
          {
            unint64_t v101 = 0;
            unsigned int v102 = (char *)&v153[8 * (unint64_t)v146] + 8 * v147;
            unsigned int v103 = v149;
            do
            {
              if (v103)
              {
                uint64_t v104 = 0;
                int v105 = (char *)v144 + v145 * v101;
                do
                {
                  v105[v104] = v102[v104];
                  ++v104;
                  unsigned int v103 = v149;
                }
                while (8 * (unint64_t)v149 > v104);
                unint64_t v100 = v148;
              }
              ++v101;
              v102 += 128;
            }
            while (v101 < v100);
          }
LABEL_28:
          BOOL v29 = v39++ == v130 >> 4;
          uint64_t v34 = v141;
        }
        while (!v29);
        BOOL v29 = v25++ == v122;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v250 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v231 = a8 + a10 - 1;
  unsigned int v233 = v231 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v244 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v233)
  {
    unsigned int v242 = a7 + a9 - 1;
    if (a7 >> 4 <= v242 >> 4)
    {
      unsigned int v25 = (a5 - 1) >> 4;
      unsigned int v230 = (a6 - 1) >> 4;
      int v251 = ((a5 - 1) & 0xF) + 1;
      unsigned int v228 = a5 - 1;
      int v229 = ((a6 - 1) & 0xF) + 1;
      uint64_t v234 = a11;
      uint64_t v235 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v241 = v27.i32[0] | v27.i32[1];
      int8x8_t v239 = v27;
      BOOL v237 = v27.i32[0] != 0;
      BOOL v238 = v27.i32[1] != 0;
      unint64_t v227 = 8 * v19 * (unint64_t)v18;
      uint64_t v253 = 2 * a11;
      unsigned int v240 = v25;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v250) {
          int v29 = v250;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = a7 >> 4;
        if (v231 < v28) {
          unsigned int v28 = v231;
        }
        int v236 = v29 - 16 * v17;
        int v248 = v28 - v29 + 1;
        unsigned int v249 = 16 * v17;
        int v31 = v229;
        if (v17 != v230) {
          int v31 = 16;
        }
        unsigned int v252 = v31;
        uint64_t v247 = a2 + (v29 - v250) * a11;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v242 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v25) {
            unsigned int v37 = v251;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v249 >= v250 && v33 >= a7)
          {
            int v39 = v251;
            if (v30 != v25) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v248 != v252;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v227 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v219 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v220 = 0;
              if (v63) {
                goto LABEL_272;
              }
LABEL_261:
              unsigned int v221 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v221 | v220) {
                goto LABEL_262;
              }
LABEL_273:
              uint64_t v223 = 0;
            }
            else
            {
              unsigned int v220 = 32 - __clz(~(-1 << -(char)__clz(v219)));
              if ((v63 & 1) == 0) {
                goto LABEL_261;
              }
LABEL_272:
              unsigned int v221 = 0;
              if (!v220) {
                goto LABEL_273;
              }
LABEL_262:
              int v222 = 0;
              uint64_t v223 = 0;
              BOOL v224 = v220 != 0;
              BOOL v225 = v221 != 0;
              int v226 = 1;
              do
              {
                --v220;
                if (v224) {
                  v223 |= (unint64_t)(v226 & v30 & v219) << v222++;
                }
                else {
                  unsigned int v220 = 0;
                }
                --v221;
                if (v225) {
                  v223 |= (unint64_t)(v226 & v17 & ((v64 >> 4) - 1)) << v222++;
                }
                else {
                  unsigned int v221 = 0;
                }
                v226 *= 2;
                --v222;
                BOOL v225 = v221 != 0;
                BOOL v224 = v220 != 0;
              }
              while (v221 | v220);
            }
            unint64_t v48 = ((unint64_t)(v33 / v60 + v249 / v64 * ((v60 + v228) / v60)) << 14) + (v223 << 7);
            goto LABEL_60;
          }
          if (v241)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v237;
            BOOL v45 = v238;
            __int32 v47 = v239.i32[0];
            __int32 v46 = v239.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 7;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_82:
              uint64_t v56 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_82;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v30) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v17) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_83:
          BOOL v65 = (_OWORD *)(a3 + v48);
          if (v244)
          {
            long long v66 = v65[13];
            v263[12] = v65[12];
            v263[13] = v66;
            long long v67 = v65[15];
            v263[14] = v65[14];
            v263[15] = v67;
            long long v68 = v65[9];
            v263[8] = v65[8];
            v263[9] = v68;
            long long v69 = v65[11];
            v263[10] = v65[10];
            v263[11] = v69;
            long long v70 = v65[5];
            v263[4] = v65[4];
            v263[5] = v70;
            long long v71 = v65[7];
            v263[6] = v65[6];
            v263[7] = v71;
            long long v72 = v65[1];
            v263[0] = *v65;
            v263[1] = v72;
            long long v73 = v65[2];
            long long v74 = v65[3];
            BOOL v65 = v263;
            v263[2] = v73;
            v263[3] = v74;
          }
          int v75 = (unsigned __int8 *)(a4 + 8 * v56);
          int v76 = (int8x8_t *)(v247 + v35 - a7);
          char v77 = v37 < 0x10 || v38;
          if ((v77 & 1) == 0 && v252 > 0xF)
          {
            uint64_t v78 = *(void *)(a1 + 208);
            int v79 = *(_DWORD *)(v78 + 52);
            unsigned int v80 = *v75;
            if (*v75)
            {
              if (v80 < 0xF0)
              {
                if (v80 == 31)
                {
                  int16x4_t v87 = *(int16x4_t *)v65;
                  int16x4_t v88 = *(int16x4_t *)((char *)v65 + 8);
                  int16x4_t v89 = (int16x4_t)v65[1];
                  int16x4_t v90 = *(int16x4_t *)((char *)v65 + 24);
                  *int v76 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v65, v89);
                  *(int16x4_t *)((char *)v76 + a11) = vuzp2_s16(v87, v89);
                  uint64_t v91 = (int16x4_t *)((char *)v76 + v253);
                  *uint64_t v91 = vuzp1_s16(v88, v90);
                  *(int16x4_t *)((char *)v91 + a11) = vuzp2_s16(v88, v90);
                  uint64_t v81 = 32;
                }
                else if (v80 == 96)
                {
                  int8x8_t v86 = vdup_lane_s8(*(int8x8_t *)v65, 0);
                  *int v76 = v86;
                  *(int8x8_t *)((char *)v76 + a11) = v86;
                  *(int8x8_t *)((char *)v76 + 2 * a11) = v86;
                  *(int8x8_t *)((char *)v76 + 3 * a11) = v86;
                  uint64_t v81 = 1;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v76, a11, (uint64_t)v65, v80);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v76, a11, (uint64_t)v65, v80, *(_DWORD *)(v78 + 52));
                uint64_t v81 = 16;
              }
            }
            else
            {
              uint64_t v81 = 0;
              *int v76 = 0;
              *(int8x8_t *)((char *)v76 + a11) = 0;
              *(int8x8_t *)((char *)v76 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v76 + 3 * a11) = 0;
            }
            int v92 = (int16x4_t *)((char *)v65 + v81);
            unint64_t v93 = (int16x4_t *)((char *)v76 + v235);
            unsigned int v94 = v75[1];
            if (v75[1])
            {
              if (v94 < 0xF0)
              {
                if (v94 == 31)
                {
                  int16x4_t v97 = *v92;
                  int16x4_t v98 = v92[1];
                  int16x4_t v99 = v92[2];
                  int16x4_t v100 = v92[3];
                  *unint64_t v93 = vuzp1_s16(*v92, v99);
                  *(int16x4_t *)((char *)v93 + a11) = vuzp2_s16(v97, v99);
                  unint64_t v101 = (int16x4_t *)((char *)v93 + v253);
                  *unint64_t v101 = vuzp1_s16(v98, v100);
                  *(int16x4_t *)((char *)v101 + a11) = vuzp2_s16(v98, v100);
                  uint64_t v95 = 32;
                }
                else if (v94 == 96)
                {
                  int8x8_t v96 = vdup_lane_s8((int8x8_t)*v92, 0);
                  *unint64_t v93 = (int16x4_t)v96;
                  *(int8x8_t *)((char *)v93 + a11) = v96;
                  *(int8x8_t *)((char *)v93 + 2 * a11) = v96;
                  *(int8x8_t *)((char *)v93 + 3 * a11) = v96;
                  uint64_t v95 = 1;
                }
                else
                {
                  uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v76 + v235), a11, (uint64_t)v92, v94);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((unsigned char *)v76 + v235, a11, (uint64_t)v92, v94, v79);
                uint64_t v95 = 16;
              }
            }
            else
            {
              uint64_t v95 = 0;
              *unint64_t v93 = 0;
              *(int16x4_t *)((char *)v93 + a11) = 0;
              *(int16x4_t *)((char *)v93 + 2 * a11) = 0;
              *(int16x4_t *)((char *)v93 + 3 * a11) = 0;
            }
            unsigned int v102 = (int16x4_t *)((char *)v92 + v95);
            unsigned int v103 = v76 + 1;
            unsigned int v104 = v75[2];
            if (v75[2])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 31)
                {
                  int16x4_t v107 = *v102;
                  int16x4_t v108 = v102[1];
                  int16x4_t v109 = v102[2];
                  int16x4_t v110 = v102[3];
                  *unsigned int v103 = (int8x8_t)vuzp1_s16(*v102, v109);
                  *(int16x4_t *)((char *)v103 + a11) = vuzp2_s16(v107, v109);
                  int v111 = (int16x4_t *)((char *)v103 + v253);
                  *int v111 = vuzp1_s16(v108, v110);
                  *(int16x4_t *)((char *)v111 + a11) = vuzp2_s16(v108, v110);
                  uint64_t v105 = 32;
                }
                else if (v104 == 96)
                {
                  int8x8_t v106 = vdup_lane_s8((int8x8_t)*v102, 0);
                  *unsigned int v103 = v106;
                  *(int8x8_t *)((char *)v103 + a11) = v106;
                  *(int8x8_t *)((char *)v103 + 2 * a11) = v106;
                  *(int8x8_t *)((char *)v103 + 3 * a11) = v106;
                  uint64_t v105 = 1;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v103, a11, (uint64_t)v102, v104);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v103, a11, (uint64_t)v102, v104, v79);
                uint64_t v105 = 16;
              }
            }
            else
            {
              uint64_t v105 = 0;
              *unsigned int v103 = 0;
              *(int8x8_t *)((char *)v103 + a11) = 0;
              *(int8x8_t *)((char *)v103 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v103 + 3 * a11) = 0;
            }
            BOOL v112 = (int16x4_t *)((char *)v102 + v105);
            BOOL v113 = (int8x8_t *)&v93[1];
            unsigned int v114 = v75[3];
            if (v75[3])
            {
              if (v114 < 0xF0)
              {
                if (v114 == 31)
                {
                  int16x4_t v117 = *v112;
                  int16x4_t v118 = v112[1];
                  int16x4_t v119 = v112[2];
                  int16x4_t v120 = v112[3];
                  *BOOL v113 = (int8x8_t)vuzp1_s16(*v112, v119);
                  *(int16x4_t *)((char *)v113 + a11) = vuzp2_s16(v117, v119);
                  uint64_t v121 = (int16x4_t *)((char *)v113 + v253);
                  *uint64_t v121 = vuzp1_s16(v118, v120);
                  *(int16x4_t *)((char *)v121 + a11) = vuzp2_s16(v118, v120);
                  uint64_t v115 = 32;
                }
                else if (v114 == 96)
                {
                  int8x8_t v116 = vdup_lane_s8((int8x8_t)*v112, 0);
                  *BOOL v113 = v116;
                  *(int8x8_t *)((char *)v113 + a11) = v116;
                  *(int8x8_t *)((char *)v113 + 2 * a11) = v116;
                  *(int8x8_t *)((char *)v113 + 3 * a11) = v116;
                  uint64_t v115 = 1;
                }
                else
                {
                  uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v113, a11, (uint64_t)v112, v114);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v113, a11, (uint64_t)v112, v114, v79);
                uint64_t v115 = 16;
              }
            }
            else
            {
              uint64_t v115 = 0;
              *BOOL v113 = 0;
              *(int8x8_t *)((char *)v113 + a11) = 0;
              *(int8x8_t *)((char *)v113 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v113 + 3 * a11) = 0;
            }
            unsigned int v122 = (int16x4_t *)((char *)v112 + v115);
            uint64_t v123 = (int16x4_t *)&v76[v234];
            unsigned int v124 = v75[4];
            if (v75[4])
            {
              if (v124 < 0xF0)
              {
                if (v124 == 31)
                {
                  int16x4_t v127 = *v122;
                  int16x4_t v128 = v122[1];
                  int16x4_t v129 = v122[2];
                  int16x4_t v130 = v122[3];
                  *uint64_t v123 = vuzp1_s16(*v122, v129);
                  *(int16x4_t *)((char *)v123 + a11) = vuzp2_s16(v127, v129);
                  BOOL v131 = (int16x4_t *)((char *)v123 + v253);
                  *BOOL v131 = vuzp1_s16(v128, v130);
                  *(int16x4_t *)((char *)v131 + a11) = vuzp2_s16(v128, v130);
                  uint64_t v125 = 32;
                }
                else if (v124 == 96)
                {
                  int8x8_t v126 = vdup_lane_s8((int8x8_t)*v122, 0);
                  *uint64_t v123 = (int16x4_t)v126;
                  *(int8x8_t *)((char *)v123 + a11) = v126;
                  *(int8x8_t *)((char *)v123 + 2 * a11) = v126;
                  *(int8x8_t *)((char *)v123 + 3 * a11) = v126;
                  uint64_t v125 = 1;
                }
                else
                {
                  uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v76[v234], a11, (uint64_t)v122, v124);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v76[v234], a11, (uint64_t)v122, v124, v79);
                uint64_t v125 = 16;
              }
            }
            else
            {
              uint64_t v125 = 0;
              *uint64_t v123 = 0;
              *(int16x4_t *)((char *)v123 + a11) = 0;
              *(int16x4_t *)((char *)v123 + 2 * a11) = 0;
              *(int16x4_t *)((char *)v123 + 3 * a11) = 0;
            }
            int v132 = (int16x4_t *)((char *)v122 + v125);
            uint64_t v133 = (int8x8_t *)((char *)v76 + 12 * a11);
            unsigned int v134 = v75[5];
            if (v75[5])
            {
              if (v134 < 0xF0)
              {
                if (v134 == 31)
                {
                  int16x4_t v137 = *v132;
                  int16x4_t v138 = v132[1];
                  int16x4_t v139 = v132[2];
                  int16x4_t v140 = v132[3];
                  *uint64_t v133 = (int8x8_t)vuzp1_s16(*v132, v139);
                  *(int16x4_t *)((char *)v133 + a11) = vuzp2_s16(v137, v139);
                  uint64_t v141 = (int16x4_t *)((char *)v133 + v253);
                  *uint64_t v141 = vuzp1_s16(v138, v140);
                  *(int16x4_t *)((char *)v141 + a11) = vuzp2_s16(v138, v140);
                  uint64_t v135 = 32;
                }
                else if (v134 == 96)
                {
                  int8x8_t v136 = vdup_lane_s8((int8x8_t)*v132, 0);
                  *uint64_t v133 = v136;
                  *(int8x8_t *)((char *)v133 + a11) = v136;
                  *(int8x8_t *)((char *)v133 + 2 * a11) = v136;
                  *(int8x8_t *)((char *)v133 + 3 * a11) = v136;
                  uint64_t v135 = 1;
                }
                else
                {
                  uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v133, a11, (uint64_t)v132, v134);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v133, a11, (uint64_t)v132, v134, v79);
                uint64_t v135 = 16;
              }
            }
            else
            {
              uint64_t v135 = 0;
              *uint64_t v133 = 0;
              *(int8x8_t *)((char *)v133 + a11) = 0;
              *(int8x8_t *)((char *)v133 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v133 + 3 * a11) = 0;
            }
            unsigned int v142 = (int16x4_t *)((char *)v132 + v135);
            BOOL v143 = (int8x8_t *)&v123[1];
            unsigned int v144 = v75[6];
            if (v75[6])
            {
              if (v144 < 0xF0)
              {
                if (v144 == 31)
                {
                  int16x4_t v147 = *v142;
                  int16x4_t v148 = v142[1];
                  int16x4_t v149 = v142[2];
                  int16x4_t v150 = v142[3];
                  *BOOL v143 = (int8x8_t)vuzp1_s16(*v142, v149);
                  *(int16x4_t *)((char *)v143 + a11) = vuzp2_s16(v147, v149);
                  char v151 = (int16x4_t *)((char *)v143 + v253);
                  *char v151 = vuzp1_s16(v148, v150);
                  *(int16x4_t *)((char *)v151 + a11) = vuzp2_s16(v148, v150);
                  uint64_t v145 = 32;
                }
                else if (v144 == 96)
                {
                  int8x8_t v146 = vdup_lane_s8((int8x8_t)*v142, 0);
                  *BOOL v143 = v146;
                  *(int8x8_t *)((char *)v143 + a11) = v146;
                  *(int8x8_t *)((char *)v143 + 2 * a11) = v146;
                  *(int8x8_t *)((char *)v143 + 3 * a11) = v146;
                  uint64_t v145 = 1;
                }
                else
                {
                  uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v143, a11, (uint64_t)v142, v144);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v143, a11, (uint64_t)v142, v144, v79);
                uint64_t v145 = 16;
              }
            }
            else
            {
              uint64_t v145 = 0;
              *BOOL v143 = 0;
              *(int8x8_t *)((char *)v143 + a11) = 0;
              *(int8x8_t *)((char *)v143 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v143 + 3 * a11) = 0;
            }
            unsigned int v152 = v133 + 1;
            unsigned int v153 = v75[7];
            if (v75[7])
            {
              unsigned int v154 = (int16x4_t *)((char *)v142 + v145);
              if (v153 < 0xF0)
              {
                if (v153 == 31)
                {
                  int16x4_t v156 = *v154;
                  int16x4_t v157 = v154[1];
                  int16x4_t v158 = v154[2];
                  int16x4_t v159 = v154[3];
                  *unsigned int v152 = (int8x8_t)vuzp1_s16(*v154, v158);
                  *(int16x4_t *)((char *)v152 + a11) = vuzp2_s16(v156, v158);
                  int v160 = (int16x4_t *)((char *)v152 + v253);
                  *int v160 = vuzp1_s16(v157, v159);
                  *(int16x4_t *)((char *)v160 + a11) = vuzp2_s16(v157, v159);
                  unsigned int v25 = v240;
                }
                else
                {
                  unsigned int v25 = v240;
                  if (v153 == 96)
                  {
                    int8x8_t v155 = vdup_lane_s8((int8x8_t)*v154, 0);
                    *unsigned int v152 = v155;
                    *(int8x8_t *)((char *)v152 + a11) = v155;
                    *(int8x8_t *)((char *)v152 + 2 * a11) = v155;
                    *(int8x8_t *)((char *)v152 + 3 * a11) = v155;
                  }
                  else
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v152, a11, (uint64_t)v154, v153);
                  }
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v152, a11, (uint64_t)v154, v153, v79);
                unsigned int v25 = v240;
              }
            }
            else
            {
              *unsigned int v152 = 0;
              *(int8x8_t *)((char *)v152 + a11) = 0;
              *(int8x8_t *)((char *)v152 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v152 + 3 * a11) = 0;
              unsigned int v25 = v240;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v261 = v37;
          char v262 = v252;
          int v257 = v236;
          unsigned int v258 = v35 - v33;
          block[6] = a4 + 8 * v56;
          uint64_t v255 = v247 + v35 - a7;
          uint64_t v256 = a11;
          unsigned int v259 = v248;
          unsigned int v260 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          uint64_t v82 = *(void *)(a1 + 208);
          int v83 = *(_DWORD *)(v82 + 52);
          unsigned int v84 = *v75;
          if (*v75)
          {
            if (v84 < 0xF0)
            {
              if (v84 == 31)
              {
                int16x4_t v161 = *(int16x4_t *)((char *)v65 + 8);
                int16x4_t v162 = (int16x4_t)v65[1];
                int16x4_t v163 = *(int16x4_t *)((char *)v65 + 24);
                int16x4_t v164 = vuzp2_s16(*(int16x4_t *)v65, v162);
                int16x4_t v264 = vuzp1_s16(*(int16x4_t *)v65, v162);
                int16x4_t v266 = v164;
                int16x4_t v268 = vuzp1_s16(v161, v163);
                int16x4_t v270 = vuzp2_s16(v161, v163);
                uint64_t v85 = 32;
              }
              else if (v84 == 96)
              {
                int16x4_t v264 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v65, 0);
                int16x4_t v266 = v264;
                int16x4_t v268 = v264;
                int16x4_t v270 = v264;
                uint64_t v85 = 1;
              }
              else
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v264, 16, (uint64_t)v65, v84);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v264, 16, (uint64_t)v65, v84, *(_DWORD *)(v82 + 52));
              uint64_t v85 = 16;
            }
          }
          else
          {
            uint64_t v85 = 0;
            int16x4_t v264 = 0;
            int16x4_t v266 = 0;
            int16x4_t v268 = 0;
            int16x4_t v270 = 0;
          }
          int v165 = (int16x4_t *)((char *)v65 + v85);
          unsigned int v166 = v75[1];
          if (v75[1])
          {
            if (v166 < 0xF0)
            {
              if (v166 == 31)
              {
                int16x4_t v168 = v165[1];
                int16x4_t v169 = v165[2];
                int16x4_t v170 = v165[3];
                int16x4_t v171 = vuzp2_s16(*v165, v169);
                int16x4_t v272 = vuzp1_s16(*v165, v169);
                int16x4_t v274 = v171;
                int16x4_t v276 = vuzp1_s16(v168, v170);
                int16x4_t v278 = vuzp2_s16(v168, v170);
                uint64_t v167 = 32;
              }
              else if (v166 == 96)
              {
                int16x4_t v272 = (int16x4_t)vdup_lane_s8((int8x8_t)*v165, 0);
                int16x4_t v274 = v272;
                int16x4_t v276 = v272;
                int16x4_t v278 = v272;
                uint64_t v167 = 1;
              }
              else
              {
                uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v272, 16, (uint64_t)v165, v166);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v272, 16, (uint64_t)v165, v166, v83);
              uint64_t v167 = 16;
            }
          }
          else
          {
            uint64_t v167 = 0;
            int16x4_t v272 = 0;
            int16x4_t v274 = 0;
            int16x4_t v276 = 0;
            int16x4_t v278 = 0;
          }
          BOOL v172 = (int16x4_t *)((char *)v165 + v167);
          unsigned int v173 = v75[2];
          if (v75[2])
          {
            if (v173 < 0xF0)
            {
              if (v173 == 31)
              {
                int16x4_t v175 = v172[1];
                int16x4_t v176 = v172[2];
                int16x4_t v177 = v172[3];
                int16x4_t v178 = vuzp2_s16(*v172, v176);
                int16x4_t v265 = vuzp1_s16(*v172, v176);
                int16x4_t v267 = v178;
                int16x4_t v269 = vuzp1_s16(v175, v177);
                int16x4_t v271 = vuzp2_s16(v175, v177);
                uint64_t v174 = 32;
              }
              else if (v173 == 96)
              {
                int16x4_t v265 = (int16x4_t)vdup_lane_s8((int8x8_t)*v172, 0);
                int16x4_t v267 = v265;
                int16x4_t v269 = v265;
                int16x4_t v271 = v265;
                uint64_t v174 = 1;
              }
              else
              {
                uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v265, 16, (uint64_t)v172, v173);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v265, 16, (uint64_t)v172, v173, v83);
              uint64_t v174 = 16;
            }
          }
          else
          {
            uint64_t v174 = 0;
            int16x4_t v265 = 0;
            int16x4_t v267 = 0;
            int16x4_t v269 = 0;
            int16x4_t v271 = 0;
          }
          BOOL v179 = (int16x4_t *)((char *)v172 + v174);
          unsigned int v180 = v75[3];
          if (v75[3])
          {
            if (v180 < 0xF0)
            {
              if (v180 == 31)
              {
                int16x4_t v182 = v179[1];
                int16x4_t v183 = v179[2];
                int16x4_t v184 = v179[3];
                int16x4_t v185 = vuzp2_s16(*v179, v183);
                int16x4_t v273 = vuzp1_s16(*v179, v183);
                int16x4_t v275 = v185;
                int16x4_t v277 = vuzp1_s16(v182, v184);
                int16x4_t v279 = vuzp2_s16(v182, v184);
                uint64_t v181 = 32;
              }
              else if (v180 == 96)
              {
                int16x4_t v273 = (int16x4_t)vdup_lane_s8((int8x8_t)*v179, 0);
                int16x4_t v275 = v273;
                int16x4_t v277 = v273;
                int16x4_t v279 = v273;
                uint64_t v181 = 1;
              }
              else
              {
                uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v273, 16, (uint64_t)v179, v180);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v273, 16, (uint64_t)v179, v180, v83);
              uint64_t v181 = 16;
            }
          }
          else
          {
            uint64_t v181 = 0;
            int16x4_t v273 = 0;
            int16x4_t v275 = 0;
            int16x4_t v277 = 0;
            int16x4_t v279 = 0;
          }
          unsigned int v186 = (int16x4_t *)((char *)v179 + v181);
          unsigned int v187 = v75[4];
          if (v75[4])
          {
            if (v187 < 0xF0)
            {
              if (v187 == 31)
              {
                int16x4_t v189 = v186[1];
                int16x4_t v190 = v186[2];
                int16x4_t v191 = v186[3];
                int16x4_t v192 = vuzp2_s16(*v186, v190);
                int16x4_t v280 = vuzp1_s16(*v186, v190);
                int16x4_t v282 = v192;
                int16x4_t v284 = vuzp1_s16(v189, v191);
                int16x4_t v286 = vuzp2_s16(v189, v191);
                uint64_t v188 = 32;
              }
              else if (v187 == 96)
              {
                int16x4_t v280 = (int16x4_t)vdup_lane_s8((int8x8_t)*v186, 0);
                int16x4_t v282 = v280;
                int16x4_t v284 = v280;
                int16x4_t v286 = v280;
                uint64_t v188 = 1;
              }
              else
              {
                uint64_t v188 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v280, 16, (uint64_t)v186, v187);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v280, 16, (uint64_t)v186, v187, v83);
              uint64_t v188 = 16;
            }
          }
          else
          {
            uint64_t v188 = 0;
            int16x4_t v280 = 0;
            int16x4_t v282 = 0;
            int16x4_t v284 = 0;
            int16x4_t v286 = 0;
          }
          BOOL v193 = (int16x4_t *)((char *)v186 + v188);
          unsigned int v194 = v75[5];
          if (v75[5])
          {
            if (v194 < 0xF0)
            {
              if (v194 == 31)
              {
                int16x4_t v196 = v193[1];
                int16x4_t v197 = v193[2];
                int16x4_t v198 = v193[3];
                int16x4_t v199 = vuzp2_s16(*v193, v197);
                int16x4_t v288 = vuzp1_s16(*v193, v197);
                int16x4_t v290 = v199;
                int16x4_t v292 = vuzp1_s16(v196, v198);
                int16x4_t v294 = vuzp2_s16(v196, v198);
                uint64_t v195 = 32;
              }
              else if (v194 == 96)
              {
                int16x4_t v288 = (int16x4_t)vdup_lane_s8((int8x8_t)*v193, 0);
                int16x4_t v290 = v288;
                int16x4_t v292 = v288;
                int16x4_t v294 = v288;
                uint64_t v195 = 1;
              }
              else
              {
                uint64_t v195 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v288, 16, (uint64_t)v193, v194);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v288, 16, (uint64_t)v193, v194, v83);
              uint64_t v195 = 16;
            }
          }
          else
          {
            uint64_t v195 = 0;
            int16x4_t v288 = 0;
            int16x4_t v290 = 0;
            int16x4_t v292 = 0;
            int16x4_t v294 = 0;
          }
          BOOL v200 = (int16x4_t *)((char *)v193 + v195);
          unsigned int v201 = v75[6];
          if (v75[6])
          {
            if (v201 < 0xF0)
            {
              if (v201 == 31)
              {
                int16x4_t v204 = v200[1];
                int16x4_t v205 = v200[2];
                int16x4_t v206 = v200[3];
                int16x4_t v207 = vuzp2_s16(*v200, v205);
                int16x4_t v281 = vuzp1_s16(*v200, v205);
                int16x4_t v283 = v207;
                int16x4_t v285 = vuzp1_s16(v204, v206);
                int16x4_t v287 = vuzp2_s16(v204, v206);
                uint64_t v202 = 32;
                unsigned int v203 = v75[7];
                if (!v75[7]) {
                  goto LABEL_234;
                }
              }
              else if (v201 == 96)
              {
                int16x4_t v281 = (int16x4_t)vdup_lane_s8((int8x8_t)*v200, 0);
                int16x4_t v283 = v281;
                int16x4_t v285 = v281;
                int16x4_t v287 = v281;
                uint64_t v202 = 1;
                unsigned int v203 = v75[7];
                if (!v75[7]) {
                  goto LABEL_234;
                }
              }
              else
              {
                uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v281, 16, (uint64_t)v200, v201);
                unsigned int v203 = v75[7];
                if (!v75[7])
                {
LABEL_234:
                  int16x4_t v289 = 0;
                  int16x4_t v291 = 0;
                  int16x4_t v293 = 0;
                  int16x4_t v295 = 0;
                  unsigned int v25 = v240;
                  goto LABEL_237;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v281, 16, (uint64_t)v200, v201, v83);
              uint64_t v202 = 16;
              unsigned int v203 = v75[7];
              if (!v75[7]) {
                goto LABEL_234;
              }
            }
          }
          else
          {
            uint64_t v202 = 0;
            int16x4_t v281 = 0;
            int16x4_t v283 = 0;
            int16x4_t v285 = 0;
            int16x4_t v287 = 0;
            unsigned int v203 = v75[7];
            if (!v75[7]) {
              goto LABEL_234;
            }
          }
          int v208 = (int16x4_t *)((char *)v200 + v202);
          if (v203 < 0xF0)
          {
            if (v203 == 31)
            {
              int16x4_t v209 = v208[1];
              int16x4_t v210 = v208[2];
              int16x4_t v211 = v208[3];
              int16x4_t v212 = vuzp2_s16(*v208, v210);
              int16x4_t v289 = vuzp1_s16(*v208, v210);
              int16x4_t v291 = v212;
              int16x4_t v293 = vuzp1_s16(v209, v211);
              int16x4_t v295 = vuzp2_s16(v209, v211);
              unsigned int v25 = v240;
            }
            else
            {
              unsigned int v25 = v240;
              if (v203 == 96)
              {
                int16x4_t v289 = (int16x4_t)vdup_lane_s8((int8x8_t)*v208, 0);
                int16x4_t v291 = v289;
                int16x4_t v293 = v289;
                int16x4_t v295 = v289;
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v289, 16, (uint64_t)v208, v203);
              }
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v289, 16, (uint64_t)v208, v203, v83);
            unsigned int v25 = v240;
          }
LABEL_237:
          unsigned int v32 = v30 + 1;
          unint64_t v213 = v259;
          if (v259 && v260)
          {
            unint64_t v214 = 0;
            int v215 = (char *)&v264 + 16 * v257 + v258;
            int v216 = 1;
            do
            {
              if (v216)
              {
                uint64_t v217 = 0;
                uint64_t v218 = v255 + v256 * v214;
                do
                {
                  *(unsigned char *)(v218 + v217) = v215[v217];
                  int v216 = v260;
                  ++v217;
                }
                while (v260 > v217);
                unint64_t v213 = v259;
              }
              ++v214;
              v215 += 16;
            }
            while (v214 < v213);
          }
LABEL_28:
          BOOL v21 = v30 == v242 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v233;
      }
      while (!v21);
    }
  }
}