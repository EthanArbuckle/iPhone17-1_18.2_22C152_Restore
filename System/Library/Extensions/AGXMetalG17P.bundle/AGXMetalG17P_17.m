void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint32x2_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  int v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  BOOL v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  BOOL v77;
  BOOL v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  int16x8_t *v82;
  int v83;
  unsigned int v84;
  BOOL v85;
  unsigned __int8 *v86;
  int16x8_t *v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  int16x8_t v91;
  __int8 *v92;
  unsigned int v93;
  uint64_t v94;
  int16x8_t v95;
  int16x8_t *v96;
  int16x8_t *v97;
  uint64_t v98;
  int16x8_t *v99;
  unsigned int v100;
  uint64_t v101;
  int16x8_t v102;
  __int8 *v103;
  int16x8_t *v104;
  __int8 *v105;
  uint64_t v106;
  int16x8_t *v107;
  unsigned int v108;
  uint64_t v109;
  int16x8_t v110;
  __int8 *v111;
  int16x8_t *v112;
  __int8 *v113;
  uint64_t v114;
  int16x8_t *v115;
  unsigned int v116;
  uint64_t v117;
  int16x8_t v118;
  __int8 *v119;
  int16x8_t *v120;
  __int8 *v121;
  uint64_t v122;
  int16x8_t *v123;
  unsigned int v124;
  uint64_t v125;
  int16x8_t v126;
  __int8 *v127;
  int16x8_t *v128;
  __int8 *v129;
  uint64_t v130;
  int16x8_t *v131;
  unsigned int v132;
  uint64_t v133;
  int16x8_t v134;
  __int8 *v135;
  int16x8_t *v136;
  int16x8_t *v137;
  uint64_t v138;
  int16x8_t *v139;
  unsigned int v140;
  uint64_t v141;
  int16x8_t v142;
  __int8 *v143;
  int16x8_t *v144;
  __int8 *v145;
  uint64_t v146;
  int16x8_t *v147;
  unsigned int v148;
  int16x8_t *v149;
  __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  int16x8_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int16x8_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  int16x8_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  int16x8_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  int16x8_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  int16x8_t v174;
  uint64_t v175;
  unsigned int v176;
  unint64_t v177;
  unint64_t v178;
  __int8 *v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v187;
  unsigned int v188;
  BOOL v189;
  BOOL v190;
  uint64_t v191;
  unsigned int v192;
  __int32 v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  BOOL v199;
  int v200;
  uint64_t v203;
  int v204;
  unsigned int v206;
  uint64_t v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  void block[7];
  int16x8_t *v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  char v218;
  char v219;
  unsigned char __dst[512];
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  uint64_t v253;

  v253 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  v206 = a8;
  v16 = a8 + a10;
  v17 = a1;
  v188 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    v18 = 0;
  }
  v19 = a5 - 1;
  v20 = a6 - 1;
  v21 = v206 >> 3;
  v187 = v188 >> 3;
  v22 = (v18 & 0xD00) == 0 || v18 == 768;
  v23 = v18 & 0xE00;
  v25 = !v22 && v23 != 1024;
  v200 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    v26 = *(unsigned __int8 *)(a1 + 255);
    v27 = *(unsigned __int8 *)(a1 + 254);
    v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          v31 = 0;
        }
        else {
          v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        v26 = -v31;
      }
    }
    else
    {
      v29 = 32 - __clz(~(-1 << -v28));
      v30 = v27 + v26;
      if (a5 < 2) {
        v29 = 0;
      }
      v26 = v30 - v29;
      v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      v199 = 0;
LABEL_32:
      v197 = v27 - 3;
      v192 = v26 - 3;
      v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      v185 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      v32 = 0;
    }
    else {
      v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    v199 = v32 >= v26;
    goto LABEL_32;
  }
  v199 = 0;
  v185 = 0;
  v192 = 0;
  v197 = 0;
LABEL_33:
  if (v21 <= v187)
  {
    v198 = a7 + a9 - 1;
    if (a7 >> 3 <= v198 >> 3)
    {
      v34 = a11;
      v209 = v19 >> 3;
      v184 = v20 >> 3;
      v208 = (v19 & 7) + 1;
      v183 = (v20 & 7) + 1;
      v194 = 4 * a11;
      v195 = 2 * a11;
      v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      v38.i64[0] = 0x1000000010;
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      v193 = v39.i32[0] | v39.i32[1];
      v191 = v39.i64[0];
      v189 = v39.i32[0] != 0;
      v190 = v39.i32[1] != 0;
      v207 = a1;
      do
      {
        v40 = (8 * v21) | 7;
        if (8 * v21 <= v206) {
          v41 = v206;
        }
        else {
          v41 = 8 * v21;
        }
        if (v188 < v40) {
          v40 = v188;
        }
        v196 = v41 - 8 * v21;
        v204 = v40 - v41 + 1;
        v42 = a7 >> 3;
        v43 = v183;
        if (v21 != v184) {
          v43 = 8;
        }
        v210 = v43;
        v203 = a2 + (v41 - v206) * v34;
        v44 = a7;
        do
        {
          v46 = 8 * v42;
          v47 = 8 * (v42 + 1) - 1;
          if (8 * v42 <= v44) {
            v48 = v44;
          }
          else {
            v48 = 8 * v42;
          }
          if (v198 < v47) {
            v47 = a7 + a9 - 1;
          }
          v49 = v47 - v48 + 1;
          if (v42 == v209) {
            v50 = v208;
          }
          else {
            v50 = 8;
          }
          v51 = 1;
          if (8 * v21 >= v206 && v46 >= v44)
          {
            v52 = v208;
            if (v42 != v209) {
              v52 = 8;
            }
            v51 = v49 != v52 || v204 != v210;
          }
          if (v199)
          {
            if (v197 | v192)
            {
              v54 = 0;
              v55 = 0;
              v56 = v192 != 0;
              v57 = 1;
              v59 = v197 != 0;
              v58 = v192;
              v60 = v197;
              do
              {
                --v60;
                if (v59) {
                  v55 |= (unint64_t)(v42 & ~(-1 << v197) & v57) << v54++;
                }
                else {
                  v60 = 0;
                }
                --v58;
                if (v56) {
                  v55 |= (unint64_t)(v21 & ~(-1 << v192) & v57) << v54++;
                }
                else {
                  v58 = 0;
                }
                v57 *= 2;
                --v54;
                v56 = v58 != 0;
                v59 = v60 != 0;
              }
              while (v58 | v60);
            }
            else
            {
              v55 = 0;
            }
            v68 = *(void *)(v17 + 320) * ((v42 >> v197) + (v21 >> v192) * v185) + (v55 << 9);
          }
          else
          {
            if (v193)
            {
              v61 = 0;
              v62 = 0;
              v63 = 1;
              v64 = v189;
              v65 = v190;
              v67 = v191;
              v66 = HIDWORD(v191);
              do
              {
                --v66;
                if (v65) {
                  v62 |= (unint64_t)(v63 & v42) << v61++;
                }
                else {
                  v66 = 0;
                }
                --v67;
                if (v64) {
                  v62 |= (unint64_t)(v63 & v21) << v61++;
                }
                else {
                  v67 = 0;
                }
                v63 *= 2;
                --v61;
                v64 = v67 != 0;
                v65 = v66 != 0;
              }
              while (v67 | v66);
            }
            else
            {
              v62 = 0;
            }
            v68 = v62 << 9;
          }
          v69 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v69 <= 1) {
            v69 = 1;
          }
          v70 = v69 + 7;
          if (v70 < 0x10) {
            v71 = 0;
          }
          else {
            v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
          }
          v72 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v72 <= 1) {
            v72 = 1;
          }
          v73 = v72 + 7;
          if (v73 < 0x10)
          {
            v74 = 0;
            if (!v71)
            {
LABEL_115:
              v76 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
            if (!(v74 | v71)) {
              goto LABEL_115;
            }
          }
          v75 = 0;
          v76 = 0;
          v77 = v71 != 0;
          v78 = v74 != 0;
          v79 = 1;
          do
          {
            --v71;
            v80 = !v77;
            if (v77)
            {
              v81 = ((unint64_t)(v79 & v42) << v75) | v76;
            }
            else
            {
              v71 = 0;
              v81 = v76;
            }
            if (!v80) {
              ++v75;
            }
            --v74;
            if (v78)
            {
              v76 = ((unint64_t)(v79 & v21) << v75) | v81;
            }
            else
            {
              v74 = 0;
              v76 = v81;
            }
            if (v78) {
              ++v75;
            }
            v79 *= 2;
            --v75;
            v78 = v74 != 0;
            v77 = v71 != 0;
          }
          while (v74 | v71);
LABEL_116:
          v82 = (int16x8_t *)(a3 + v68);
          if (v200)
          {
            v83 = v49;
            v84 = v50;
            v85 = v51;
            memcpy(__dst, (const void *)(a3 + v68), sizeof(__dst));
            v51 = v85;
            v50 = v84;
            v49 = v83;
            v82 = (int16x8_t *)__dst;
          }
          v86 = (unsigned __int8 *)(a4 + 8 * v76);
          v87 = (int16x8_t *)(v203 + 8 * (v48 - v44));
          v88 = v50 < 8 || v51;
          if ((v88 & 1) == 0 && v210 > 7)
          {
            v89 = *v86;
            if (v89 == 63)
            {
              v91 = *v82;
              v37 = v82[1];
              v38 = v82[2];
              v36 = v82[3];
              *v87 = *v82;
              v87[1] = v38;
              v34 = a11;
              v97 = (int16x8_t *)((char *)v87 + a11);
              *v97 = v37;
              v97[1] = v36;
              v90 = 64;
            }
            else
            {
              v34 = a11;
              if (v89 == 1)
              {
                v91 = vld1q_dup_s16(v82->i16);
                *v87 = v91;
                v87[1] = v91;
                v96 = (int16x8_t *)((char *)v87 + a11);
                *v96 = v91;
                v96[1] = v91;
                v90 = 2;
              }
              else if (*v86)
              {
                v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, (uint64_t)v82, v89, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v90 = 0;
                v91.i64[0] = 0;
                *v87 = 0u;
                v87[1] = 0u;
                v92 = &v87->i8[a11];
                *(_OWORD *)v92 = 0u;
                *((_OWORD *)v92 + 1) = 0u;
              }
            }
            v98 = (uint64_t)v82->i64 + v90;
            v99 = (int16x8_t *)((char *)v87 + v195);
            v100 = v86[1];
            if (v100 == 63)
            {
              v102 = *(int16x8_t *)v98;
              v37 = *(int16x8_t *)(v98 + 16);
              v38 = *(int16x8_t *)(v98 + 32);
              v36 = *(int16x8_t *)(v98 + 48);
              *v99 = *(int16x8_t *)v98;
              v99[1] = v38;
              v105 = &v99->i8[v34];
              *(int16x8_t *)v105 = v37;
              *((int16x8_t *)v105 + 1) = v36;
              v101 = 64;
            }
            else if (v100 == 1)
            {
              v102 = vld1q_dup_s16((const __int16 *)v98);
              *v99 = v102;
              v99[1] = v102;
              v104 = (int16x8_t *)((char *)v99 + v34);
              *v104 = v102;
              v104[1] = v102;
              v101 = 2;
            }
            else if (v86[1])
            {
              v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v87 + v195), v34, v98, v100, *(double *)v91.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v101 = 0;
              v102.i64[0] = 0;
              *v99 = 0u;
              v99[1] = 0u;
              v103 = &v99->i8[v34];
              *(_OWORD *)v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            v106 = v98 + v101;
            v107 = v87 + 2;
            v108 = v86[2];
            if (v108 == 63)
            {
              v110 = *(int16x8_t *)v106;
              v37 = *(int16x8_t *)(v106 + 16);
              v38 = *(int16x8_t *)(v106 + 32);
              v36 = *(int16x8_t *)(v106 + 48);
              v87[2] = *(int16x8_t *)v106;
              v87[3] = v38;
              v113 = &v107->i8[v34];
              *(int16x8_t *)v113 = v37;
              *((int16x8_t *)v113 + 1) = v36;
              v109 = 64;
            }
            else if (v108 == 1)
            {
              v110 = vld1q_dup_s16((const __int16 *)v106);
              v87[2] = v110;
              v87[3] = v110;
              v112 = (int16x8_t *)((char *)v107 + v34);
              *v112 = v110;
              v112[1] = v110;
              v109 = 2;
            }
            else if (v86[2])
            {
              v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v107, v34, v106, v108, *(double *)v102.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v109 = 0;
              v110.i64[0] = 0;
              *v107 = 0u;
              v87[3] = 0u;
              v111 = &v107->i8[v34];
              *(_OWORD *)v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
            }
            v114 = v106 + v109;
            v115 = v99 + 2;
            v116 = v86[3];
            if (v116 == 63)
            {
              v118 = *(int16x8_t *)v114;
              v37 = *(int16x8_t *)(v114 + 16);
              v38 = *(int16x8_t *)(v114 + 32);
              v36 = *(int16x8_t *)(v114 + 48);
              v99[2] = *(int16x8_t *)v114;
              v99[3] = v38;
              v121 = &v115->i8[v34];
              *(int16x8_t *)v121 = v37;
              *((int16x8_t *)v121 + 1) = v36;
              v117 = 64;
            }
            else if (v116 == 1)
            {
              v118 = vld1q_dup_s16((const __int16 *)v114);
              v99[2] = v118;
              v99[3] = v118;
              v120 = (int16x8_t *)((char *)v115 + v34);
              *v120 = v118;
              v120[1] = v118;
              v117 = 2;
            }
            else if (v86[3])
            {
              v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116, *(double *)v110.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v117 = 0;
              v118.i64[0] = 0;
              *v115 = 0u;
              v99[3] = 0u;
              v119 = &v115->i8[v34];
              *(_OWORD *)v119 = 0u;
              *((_OWORD *)v119 + 1) = 0u;
            }
            v122 = v114 + v117;
            v123 = (int16x8_t *)((char *)v87 + v194);
            v124 = v86[4];
            if (v124 == 63)
            {
              v126 = *(int16x8_t *)v122;
              v37 = *(int16x8_t *)(v122 + 16);
              v38 = *(int16x8_t *)(v122 + 32);
              v36 = *(int16x8_t *)(v122 + 48);
              *v123 = *(int16x8_t *)v122;
              v123[1] = v38;
              v129 = &v123->i8[v34];
              *(int16x8_t *)v129 = v37;
              *((int16x8_t *)v129 + 1) = v36;
              v125 = 64;
            }
            else if (v124 == 1)
            {
              v126 = vld1q_dup_s16((const __int16 *)v122);
              *v123 = v126;
              v123[1] = v126;
              v128 = (int16x8_t *)((char *)v123 + v34);
              *v128 = v126;
              v128[1] = v126;
              v125 = 2;
            }
            else if (v86[4])
            {
              v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v87 + v194), v34, v122, v124, *(double *)v118.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v125 = 0;
              v126.i64[0] = 0;
              *v123 = 0u;
              v123[1] = 0u;
              v127 = &v123->i8[v34];
              *(_OWORD *)v127 = 0u;
              *((_OWORD *)v127 + 1) = 0u;
            }
            v130 = v122 + v125;
            v131 = (int16x8_t *)((char *)v87 + 6 * a11);
            v132 = v86[5];
            if (v132 == 63)
            {
              v134 = *(int16x8_t *)v130;
              v37 = *(int16x8_t *)(v130 + 16);
              v38 = *(int16x8_t *)(v130 + 32);
              v36 = *(int16x8_t *)(v130 + 48);
              *v131 = *(int16x8_t *)v130;
              v131[1] = v38;
              v137 = (int16x8_t *)((char *)v131 + v34);
              *v137 = v37;
              v137[1] = v36;
              v133 = 64;
            }
            else if (v132 == 1)
            {
              v134 = vld1q_dup_s16((const __int16 *)v130);
              *v131 = v134;
              v131[1] = v134;
              v136 = (int16x8_t *)((char *)v131 + v34);
              *v136 = v134;
              v136[1] = v134;
              v133 = 2;
            }
            else if (v86[5])
            {
              v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v34, v130, v132, *(double *)v126.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v133 = 0;
              v134.i64[0] = 0;
              *v131 = 0u;
              v131[1] = 0u;
              v135 = &v131->i8[v34];
              *(_OWORD *)v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
            }
            v138 = v130 + v133;
            v139 = v123 + 2;
            v140 = v86[6];
            if (v140 == 63)
            {
              v142 = *(int16x8_t *)v138;
              v37 = *(int16x8_t *)(v138 + 16);
              v38 = *(int16x8_t *)(v138 + 32);
              v36 = *(int16x8_t *)(v138 + 48);
              v123[2] = *(int16x8_t *)v138;
              v123[3] = v38;
              v145 = &v139->i8[v34];
              *(int16x8_t *)v145 = v37;
              *((int16x8_t *)v145 + 1) = v36;
              v141 = 64;
            }
            else if (v140 == 1)
            {
              v142 = vld1q_dup_s16((const __int16 *)v138);
              v123[2] = v142;
              v123[3] = v142;
              v144 = (int16x8_t *)((char *)v139 + v34);
              *v144 = v142;
              v144[1] = v142;
              v141 = 2;
            }
            else if (v86[6])
            {
              v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v139, v34, v138, v140, *(double *)v134.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v141 = 0;
              v142.i64[0] = 0;
              *v139 = 0u;
              v123[3] = 0u;
              v143 = &v139->i8[v34];
              *(_OWORD *)v143 = 0u;
              *((_OWORD *)v143 + 1) = 0u;
            }
            v146 = v138 + v141;
            v147 = v131 + 2;
            v148 = v86[7];
            if (v148 == 63)
            {
              v39 = *(int16x8_t *)v146;
              v37 = *(int16x8_t *)(v146 + 16);
              v38 = *(int16x8_t *)(v146 + 32);
              v36 = *(int16x8_t *)(v146 + 48);
              v131[2] = *(int16x8_t *)v146;
              v131[3] = v38;
              v150 = &v147->i8[v34];
              *(int16x8_t *)v150 = v37;
              *((int16x8_t *)v150 + 1) = v36;
              v44 = a7;
              v17 = v207;
            }
            else
            {
              v17 = v207;
              if (v148 == 1)
              {
                v39 = vld1q_dup_s16((const __int16 *)v146);
                v131[2] = v39;
                v131[3] = v39;
LABEL_182:
                v149 = (int16x8_t *)((char *)v147 + v34);
                *v149 = v39;
                v149[1] = v39;
              }
              else
              {
                if (!v148)
                {
                  v39 = 0uLL;
                  *v147 = 0u;
                  v131[3] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v34, v146, v148, *(double *)v142.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              v44 = a7;
            }
LABEL_47:
            v45 = v42 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v207;
          block[5] = v82;
          v218 = v50;
          v219 = v210;
          v214 = v196;
          v215 = v48 - v46;
          block[6] = v86;
          v212 = v87;
          v34 = a11;
          v213 = a11;
          v216 = v204;
          v217 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v207 + 8) + 7384), block);
            v44 = a7;
            v17 = v207;
            goto LABEL_47;
          }
          v93 = *v86;
          if (v93 == 63)
          {
            v95 = *v82;
            v37 = v82[1];
            v38 = v82[2];
            v36 = v82[3];
            v221 = *v82;
            v222 = v38;
            v225 = v37;
            v226 = v36;
            v94 = 64;
          }
          else if (v93 == 1)
          {
            v95 = vld1q_dup_s16(v82->i16);
            v221 = v95;
            v222 = v95;
            v225 = v95;
            v226 = v95;
            v94 = 2;
          }
          else if (*v86)
          {
            v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, (uint64_t)v82, v93, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v94 = 0;
            v95.i64[0] = 0;
            v221 = 0u;
            v222 = 0u;
            v225 = 0u;
            v226 = 0u;
          }
          v151 = (uint64_t)v82->i64 + v94;
          v152 = v86[1];
          if (v152 == 63)
          {
            v154 = *(int16x8_t *)v151;
            v37 = *(int16x8_t *)(v151 + 16);
            v38 = *(int16x8_t *)(v151 + 32);
            v36 = *(int16x8_t *)(v151 + 48);
            v229 = *(int16x8_t *)v151;
            v230 = v38;
            v233 = v37;
            v234 = v36;
            v153 = 64;
          }
          else if (v152 == 1)
          {
            v154 = vld1q_dup_s16((const __int16 *)v151);
            v229 = v154;
            v230 = v154;
            v233 = v154;
            v234 = v154;
            v153 = 2;
          }
          else if (v86[1])
          {
            v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 64, v151, v152, *(double *)v95.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v153 = 0;
            v154.i64[0] = 0;
            v229 = 0u;
            v230 = 0u;
            v233 = 0u;
            v234 = 0u;
          }
          v155 = v151 + v153;
          v156 = v86[2];
          if (v156 == 63)
          {
            v158 = *(int16x8_t *)v155;
            v37 = *(int16x8_t *)(v155 + 16);
            v38 = *(int16x8_t *)(v155 + 32);
            v36 = *(int16x8_t *)(v155 + 48);
            v223 = *(int16x8_t *)v155;
            v224 = v38;
            v227 = v37;
            v228 = v36;
            v157 = 64;
          }
          else if (v156 == 1)
          {
            v158 = vld1q_dup_s16((const __int16 *)v155);
            v223 = v158;
            v224 = v158;
            v227 = v158;
            v228 = v158;
            v157 = 2;
          }
          else if (v86[2])
          {
            v157 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 64, v155, v156, *(double *)v154.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v157 = 0;
            v158.i64[0] = 0;
            v223 = 0u;
            v224 = 0u;
            v227 = 0u;
            v228 = 0u;
          }
          v159 = v155 + v157;
          v160 = v86[3];
          if (v160 == 63)
          {
            v162 = *(int16x8_t *)v159;
            v37 = *(int16x8_t *)(v159 + 16);
            v38 = *(int16x8_t *)(v159 + 32);
            v36 = *(int16x8_t *)(v159 + 48);
            v231 = *(int16x8_t *)v159;
            v232 = v38;
            v235 = v37;
            v236 = v36;
            v161 = 64;
          }
          else if (v160 == 1)
          {
            v162 = vld1q_dup_s16((const __int16 *)v159);
            v231 = v162;
            v232 = v162;
            v235 = v162;
            v236 = v162;
            v161 = 2;
          }
          else if (v86[3])
          {
            v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v159, v160, *(double *)v158.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v161 = 0;
            v162.i64[0] = 0;
            v231 = 0u;
            v232 = 0u;
            v235 = 0u;
            v236 = 0u;
          }
          v163 = v159 + v161;
          v164 = v86[4];
          if (v164 == 63)
          {
            v166 = *(int16x8_t *)v163;
            v37 = *(int16x8_t *)(v163 + 16);
            v38 = *(int16x8_t *)(v163 + 32);
            v36 = *(int16x8_t *)(v163 + 48);
            v237 = *(int16x8_t *)v163;
            v238 = v38;
            v241 = v37;
            v242 = v36;
            v165 = 64;
          }
          else if (v164 == 1)
          {
            v166 = vld1q_dup_s16((const __int16 *)v163);
            v237 = v166;
            v238 = v166;
            v241 = v166;
            v242 = v166;
            v165 = 2;
          }
          else if (v86[4])
          {
            v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 64, v163, v164, *(double *)v162.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v165 = 0;
            v166.i64[0] = 0;
            v237 = 0u;
            v238 = 0u;
            v241 = 0u;
            v242 = 0u;
          }
          v167 = v163 + v165;
          v168 = v86[5];
          if (v168 == 63)
          {
            v170 = *(int16x8_t *)v167;
            v37 = *(int16x8_t *)(v167 + 16);
            v38 = *(int16x8_t *)(v167 + 32);
            v36 = *(int16x8_t *)(v167 + 48);
            v245 = *(int16x8_t *)v167;
            v246 = v38;
            v249 = v37;
            v250 = v36;
            v169 = 64;
          }
          else if (v168 == 1)
          {
            v170 = vld1q_dup_s16((const __int16 *)v167);
            v245 = v170;
            v246 = v170;
            v249 = v170;
            v250 = v170;
            v169 = 2;
          }
          else if (v86[5])
          {
            v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 64, v167, v168, *(double *)v166.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v169 = 0;
            v170.i64[0] = 0;
            v245 = 0u;
            v246 = 0u;
            v249 = 0u;
            v250 = 0u;
          }
          v171 = v167 + v169;
          v172 = v86[6];
          if (v172 == 63)
          {
            v174 = *(int16x8_t *)v171;
            v37 = *(int16x8_t *)(v171 + 16);
            v38 = *(int16x8_t *)(v171 + 32);
            v36 = *(int16x8_t *)(v171 + 48);
            v239 = *(int16x8_t *)v171;
            v240 = v38;
            v243 = v37;
            v244 = v36;
            v173 = 64;
          }
          else if (v172 == 1)
          {
            v174 = vld1q_dup_s16((const __int16 *)v171);
            v239 = v174;
            v240 = v174;
            v243 = v174;
            v244 = v174;
            v173 = 2;
          }
          else if (v86[6])
          {
            v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 64, v171, v172, *(double *)v170.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            v173 = 0;
            v174.i64[0] = 0;
            v239 = 0u;
            v240 = 0u;
            v243 = 0u;
            v244 = 0u;
          }
          v175 = v171 + v173;
          v176 = v86[7];
          if (v176 == 63)
          {
            v39 = *(int16x8_t *)v175;
            v37 = *(int16x8_t *)(v175 + 16);
            v38 = *(int16x8_t *)(v175 + 32);
            v36 = *(int16x8_t *)(v175 + 48);
            v247 = *(int16x8_t *)v175;
            v248 = v38;
            v251 = v37;
            v252 = v36;
            v44 = a7;
            v17 = v207;
          }
          else
          {
            v44 = a7;
            v17 = v207;
            if (v176 == 1)
            {
              v39 = vld1q_dup_s16((const __int16 *)v175);
              v247 = v39;
              v248 = v39;
              v251 = v39;
              v252 = v39;
            }
            else if (v176)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 64, v175, v176, *(double *)v174.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v39.i64[0] = 0;
              v247 = 0u;
              v248 = 0u;
              v251 = 0u;
              v252 = 0u;
            }
          }
          v177 = v216;
          v45 = v42 + 1;
          if (v216)
          {
            v178 = 0;
            v179 = &v221.i8[64 * (unint64_t)v214 + 8 * v215];
            v180 = v217;
            do
            {
              if (v180)
              {
                v181 = 0;
                v182 = (uint64_t)v212->i64 + v213 * v178;
                do
                {
                  *(unsigned char *)(v182 + v181) = v179[v181];
                  ++v181;
                  v180 = v217;
                }
                while (8 * (unint64_t)v217 > v181);
                v177 = v216;
              }
              ++v178;
              v179 += 64;
            }
            while (v178 < v177);
          }
LABEL_48:
          v22 = v42 == v198 >> 3;
          v42 = v45;
        }
        while (!v22);
        v22 = v21++ == v187;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v253 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v206 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v188 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v206 >> 3;
  unsigned int v187 = v188 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v200 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v199 = 0;
LABEL_32:
      unsigned int v197 = v27 - 3;
      unsigned int v192 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v185 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v199 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v199 = 0;
  unsigned int v185 = 0;
  unsigned int v192 = 0;
  unsigned int v197 = 0;
LABEL_33:
  if (v21 <= v187)
  {
    unsigned int v198 = a7 + a9 - 1;
    if (a7 >> 3 <= v198 >> 3)
    {
      uint64_t v34 = a11;
      unsigned int v209 = v19 >> 3;
      unsigned int v184 = v20 >> 3;
      int v208 = (v19 & 7) + 1;
      int v183 = (v20 & 7) + 1;
      uint64_t v194 = 4 * a11;
      uint64_t v195 = 2 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      v38.i64[0] = 0x1000000010;
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v193 = v39.i32[0] | v39.i32[1];
      uint64_t v191 = v39.i64[0];
      BOOL v189 = v39.i32[0] != 0;
      BOOL v190 = v39.i32[1] != 0;
      uint64_t v207 = a1;
      do
      {
        unsigned int v40 = (8 * v21) | 7;
        if (8 * v21 <= v206) {
          int v41 = v206;
        }
        else {
          int v41 = 8 * v21;
        }
        if (v188 < v40) {
          unsigned int v40 = v188;
        }
        int v196 = v41 - 8 * v21;
        int v204 = v40 - v41 + 1;
        unsigned int v42 = a7 >> 3;
        int v43 = v183;
        if (v21 != v184) {
          int v43 = 8;
        }
        unsigned int v210 = v43;
        uint64_t v203 = a2 + (v41 - v206) * v34;
        unsigned int v44 = a7;
        do
        {
          unsigned int v46 = 8 * v42;
          unsigned int v47 = 8 * (v42 + 1) - 1;
          if (8 * v42 <= v44) {
            int v48 = v44;
          }
          else {
            int v48 = 8 * v42;
          }
          if (v198 < v47) {
            unsigned int v47 = a7 + a9 - 1;
          }
          int v49 = v47 - v48 + 1;
          if (v42 == v209) {
            unsigned int v50 = v208;
          }
          else {
            unsigned int v50 = 8;
          }
          BOOL v51 = 1;
          if (8 * v21 >= v206 && v46 >= v44)
          {
            int v52 = v208;
            if (v42 != v209) {
              int v52 = 8;
            }
            BOOL v51 = v49 != v52 || v204 != v210;
          }
          if (v199)
          {
            if (v197 | v192)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              BOOL v56 = v192 != 0;
              int v57 = 1;
              BOOL v59 = v197 != 0;
              unsigned int v58 = v192;
              unsigned int v60 = v197;
              do
              {
                --v60;
                if (v59) {
                  v55 |= (unint64_t)(v42 & ~(-1 << v197) & v57) << v54++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v58;
                if (v56) {
                  v55 |= (unint64_t)(v21 & ~(-1 << v192) & v57) << v54++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v57 *= 2;
                --v54;
                BOOL v56 = v58 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v58 | v60);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v68 = *(void *)(v17 + 320) * ((v42 >> v197) + (v21 >> v192) * v185) + (v55 << 9);
          }
          else
          {
            if (v193)
            {
              int v61 = 0;
              uint64_t v62 = 0;
              int v63 = 1;
              BOOL v64 = v189;
              BOOL v65 = v190;
              int v67 = v191;
              int v66 = HIDWORD(v191);
              do
              {
                --v66;
                if (v65) {
                  v62 |= (unint64_t)(v63 & v42) << v61++;
                }
                else {
                  int v66 = 0;
                }
                --v67;
                if (v64) {
                  v62 |= (unint64_t)(v63 & v21) << v61++;
                }
                else {
                  int v67 = 0;
                }
                v63 *= 2;
                --v61;
                BOOL v64 = v67 != 0;
                BOOL v65 = v66 != 0;
              }
              while (v67 | v66);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v68 = v62 << 9;
          }
          unsigned int v69 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
          }
          unsigned int v72 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10)
          {
            unsigned int v74 = 0;
            if (!v71)
            {
LABEL_115:
              unint64_t v76 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
            if (!(v74 | v71)) {
              goto LABEL_115;
            }
          }
          int v75 = 0;
          unint64_t v76 = 0;
          BOOL v77 = v71 != 0;
          BOOL v78 = v74 != 0;
          int v79 = 1;
          do
          {
            --v71;
            BOOL v80 = !v77;
            if (v77)
            {
              unint64_t v81 = ((unint64_t)(v79 & v42) << v75) | v76;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v81 = v76;
            }
            if (!v80) {
              ++v75;
            }
            --v74;
            if (v78)
            {
              unint64_t v76 = ((unint64_t)(v79 & v21) << v75) | v81;
            }
            else
            {
              unsigned int v74 = 0;
              unint64_t v76 = v81;
            }
            if (v78) {
              ++v75;
            }
            v79 *= 2;
            --v75;
            BOOL v78 = v74 != 0;
            BOOL v77 = v71 != 0;
          }
          while (v74 | v71);
LABEL_116:
          v82 = (int16x8_t *)(a3 + v68);
          if (v200)
          {
            int v83 = v49;
            unsigned int v84 = v50;
            BOOL v85 = v51;
            memcpy(__dst, (const void *)(a3 + v68), sizeof(__dst));
            BOOL v51 = v85;
            unsigned int v50 = v84;
            int v49 = v83;
            v82 = (int16x8_t *)__dst;
          }
          v86 = (unsigned __int8 *)(a4 + 8 * v76);
          v87 = (int16x8_t *)(v203 + 8 * (v48 - v44));
          char v88 = v50 < 8 || v51;
          if ((v88 & 1) == 0 && v210 > 7)
          {
            unsigned int v89 = *v86;
            if (v89 == 63)
            {
              int16x8_t v91 = *v82;
              int16x8_t v37 = v82[1];
              int16x8_t v38 = v82[2];
              int16x8_t v36 = v82[3];
              int16x8_t *v87 = *v82;
              v87[1] = v38;
              uint64_t v34 = a11;
              v97 = (int16x8_t *)((char *)v87 + a11);
              int16x8_t *v97 = v37;
              v97[1] = v36;
              uint64_t v90 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              if (v89 == 1)
              {
                int16x8_t v91 = vld1q_dup_s16(v82->i16);
                int16x8_t *v87 = v91;
                v87[1] = v91;
                v96 = (int16x8_t *)((char *)v87 + a11);
                int16x8_t *v96 = v91;
                v96[1] = v91;
                uint64_t v90 = 2;
              }
              else if (*v86)
              {
                uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, (uint64_t)v82, v89, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v90 = 0;
                v91.i64[0] = 0;
                int16x8_t *v87 = 0u;
                v87[1] = 0u;
                v92 = &v87->i8[a11];
                *(_OWORD *)v92 = 0u;
                *((_OWORD *)v92 + 1) = 0u;
              }
            }
            uint64_t v98 = (uint64_t)v82->i64 + v90;
            v99 = (int16x8_t *)((char *)v87 + v195);
            unsigned int v100 = v86[1];
            if (v100 == 63)
            {
              int16x8_t v102 = *(int16x8_t *)v98;
              int16x8_t v37 = *(int16x8_t *)(v98 + 16);
              int16x8_t v38 = *(int16x8_t *)(v98 + 32);
              int16x8_t v36 = *(int16x8_t *)(v98 + 48);
              int16x8_t *v99 = *(int16x8_t *)v98;
              v99[1] = v38;
              v105 = &v99->i8[v34];
              *(int16x8_t *)v105 = v37;
              *((int16x8_t *)v105 + 1) = v36;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v102 = vld1q_dup_s16((const __int16 *)v98);
              int16x8_t *v99 = v102;
              v99[1] = v102;
              v104 = (int16x8_t *)((char *)v99 + v34);
              int16x8_t *v104 = v102;
              v104[1] = v102;
              uint64_t v101 = 2;
            }
            else if (v86[1])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v87 + v195), v34, v98, v100, *(double *)v91.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v101 = 0;
              v102.i64[0] = 0;
              int16x8_t *v99 = 0u;
              v99[1] = 0u;
              v103 = &v99->i8[v34];
              *(_OWORD *)v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            uint64_t v106 = v98 + v101;
            v107 = v87 + 2;
            unsigned int v108 = v86[2];
            if (v108 == 63)
            {
              int16x8_t v110 = *(int16x8_t *)v106;
              int16x8_t v37 = *(int16x8_t *)(v106 + 16);
              int16x8_t v38 = *(int16x8_t *)(v106 + 32);
              int16x8_t v36 = *(int16x8_t *)(v106 + 48);
              v87[2] = *(int16x8_t *)v106;
              v87[3] = v38;
              v113 = &v107->i8[v34];
              *(int16x8_t *)v113 = v37;
              *((int16x8_t *)v113 + 1) = v36;
              uint64_t v109 = 64;
            }
            else if (v108 == 1)
            {
              int16x8_t v110 = vld1q_dup_s16((const __int16 *)v106);
              v87[2] = v110;
              v87[3] = v110;
              v112 = (int16x8_t *)((char *)v107 + v34);
              int16x8_t *v112 = v110;
              v112[1] = v110;
              uint64_t v109 = 2;
            }
            else if (v86[2])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v107, v34, v106, v108, *(double *)v102.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v109 = 0;
              v110.i64[0] = 0;
              int16x8_t *v107 = 0u;
              v87[3] = 0u;
              v111 = &v107->i8[v34];
              *(_OWORD *)v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
            }
            uint64_t v114 = v106 + v109;
            v115 = v99 + 2;
            unsigned int v116 = v86[3];
            if (v116 == 63)
            {
              int16x8_t v118 = *(int16x8_t *)v114;
              int16x8_t v37 = *(int16x8_t *)(v114 + 16);
              int16x8_t v38 = *(int16x8_t *)(v114 + 32);
              int16x8_t v36 = *(int16x8_t *)(v114 + 48);
              v99[2] = *(int16x8_t *)v114;
              v99[3] = v38;
              v121 = &v115->i8[v34];
              *(int16x8_t *)v121 = v37;
              *((int16x8_t *)v121 + 1) = v36;
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v114);
              v99[2] = v118;
              v99[3] = v118;
              v120 = (int16x8_t *)((char *)v115 + v34);
              int16x8_t *v120 = v118;
              v120[1] = v118;
              uint64_t v117 = 2;
            }
            else if (v86[3])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116, *(double *)v110.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v117 = 0;
              v118.i64[0] = 0;
              int16x8_t *v115 = 0u;
              v99[3] = 0u;
              v119 = &v115->i8[v34];
              *(_OWORD *)v119 = 0u;
              *((_OWORD *)v119 + 1) = 0u;
            }
            uint64_t v122 = v114 + v117;
            v123 = (int16x8_t *)((char *)v87 + v194);
            unsigned int v124 = v86[4];
            if (v124 == 63)
            {
              int16x8_t v126 = *(int16x8_t *)v122;
              int16x8_t v37 = *(int16x8_t *)(v122 + 16);
              int16x8_t v38 = *(int16x8_t *)(v122 + 32);
              int16x8_t v36 = *(int16x8_t *)(v122 + 48);
              int16x8_t *v123 = *(int16x8_t *)v122;
              v123[1] = v38;
              v129 = &v123->i8[v34];
              *(int16x8_t *)v129 = v37;
              *((int16x8_t *)v129 + 1) = v36;
              uint64_t v125 = 64;
            }
            else if (v124 == 1)
            {
              int16x8_t v126 = vld1q_dup_s16((const __int16 *)v122);
              int16x8_t *v123 = v126;
              v123[1] = v126;
              v128 = (int16x8_t *)((char *)v123 + v34);
              int16x8_t *v128 = v126;
              v128[1] = v126;
              uint64_t v125 = 2;
            }
            else if (v86[4])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v87 + v194), v34, v122, v124, *(double *)v118.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v125 = 0;
              v126.i64[0] = 0;
              int16x8_t *v123 = 0u;
              v123[1] = 0u;
              v127 = &v123->i8[v34];
              *(_OWORD *)v127 = 0u;
              *((_OWORD *)v127 + 1) = 0u;
            }
            uint64_t v130 = v122 + v125;
            v131 = (int16x8_t *)((char *)v87 + 6 * a11);
            unsigned int v132 = v86[5];
            if (v132 == 63)
            {
              int16x8_t v134 = *(int16x8_t *)v130;
              int16x8_t v37 = *(int16x8_t *)(v130 + 16);
              int16x8_t v38 = *(int16x8_t *)(v130 + 32);
              int16x8_t v36 = *(int16x8_t *)(v130 + 48);
              int16x8_t *v131 = *(int16x8_t *)v130;
              v131[1] = v38;
              v137 = (int16x8_t *)((char *)v131 + v34);
              int16x8_t *v137 = v37;
              v137[1] = v36;
              uint64_t v133 = 64;
            }
            else if (v132 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v130);
              int16x8_t *v131 = v134;
              v131[1] = v134;
              v136 = (int16x8_t *)((char *)v131 + v34);
              int16x8_t *v136 = v134;
              v136[1] = v134;
              uint64_t v133 = 2;
            }
            else if (v86[5])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v34, v130, v132, *(double *)v126.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v133 = 0;
              v134.i64[0] = 0;
              int16x8_t *v131 = 0u;
              v131[1] = 0u;
              v135 = &v131->i8[v34];
              *(_OWORD *)v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
            }
            uint64_t v138 = v130 + v133;
            v139 = v123 + 2;
            unsigned int v140 = v86[6];
            if (v140 == 63)
            {
              int16x8_t v142 = *(int16x8_t *)v138;
              int16x8_t v37 = *(int16x8_t *)(v138 + 16);
              int16x8_t v38 = *(int16x8_t *)(v138 + 32);
              int16x8_t v36 = *(int16x8_t *)(v138 + 48);
              v123[2] = *(int16x8_t *)v138;
              v123[3] = v38;
              v145 = &v139->i8[v34];
              *(int16x8_t *)v145 = v37;
              *((int16x8_t *)v145 + 1) = v36;
              uint64_t v141 = 64;
            }
            else if (v140 == 1)
            {
              int16x8_t v142 = vld1q_dup_s16((const __int16 *)v138);
              v123[2] = v142;
              v123[3] = v142;
              v144 = (int16x8_t *)((char *)v139 + v34);
              int16x8_t *v144 = v142;
              v144[1] = v142;
              uint64_t v141 = 2;
            }
            else if (v86[6])
            {
              uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v139, v34, v138, v140, *(double *)v134.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v141 = 0;
              v142.i64[0] = 0;
              int16x8_t *v139 = 0u;
              v123[3] = 0u;
              v143 = &v139->i8[v34];
              *(_OWORD *)v143 = 0u;
              *((_OWORD *)v143 + 1) = 0u;
            }
            uint64_t v146 = v138 + v141;
            v147 = v131 + 2;
            unsigned int v148 = v86[7];
            if (v148 == 63)
            {
              int16x8_t v39 = *(int16x8_t *)v146;
              int16x8_t v37 = *(int16x8_t *)(v146 + 16);
              int16x8_t v38 = *(int16x8_t *)(v146 + 32);
              int16x8_t v36 = *(int16x8_t *)(v146 + 48);
              v131[2] = *(int16x8_t *)v146;
              v131[3] = v38;
              v150 = &v147->i8[v34];
              *(int16x8_t *)v150 = v37;
              *((int16x8_t *)v150 + 1) = v36;
              unsigned int v44 = a7;
              uint64_t v17 = v207;
            }
            else
            {
              uint64_t v17 = v207;
              if (v148 == 1)
              {
                int16x8_t v39 = vld1q_dup_s16((const __int16 *)v146);
                v131[2] = v39;
                v131[3] = v39;
LABEL_182:
                v149 = (int16x8_t *)((char *)v147 + v34);
                int16x8_t *v149 = v39;
                v149[1] = v39;
              }
              else
              {
                if (!v148)
                {
                  int16x8_t v39 = 0uLL;
                  int16x8_t *v147 = 0u;
                  v131[3] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v34, v146, v148, *(double *)v142.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              unsigned int v44 = a7;
            }
LABEL_47:
            unsigned int v45 = v42 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v207;
          block[5] = v82;
          char v218 = v50;
          char v219 = v210;
          unsigned int v214 = v196;
          unsigned int v215 = v48 - v46;
          block[6] = v86;
          v212 = v87;
          uint64_t v34 = a11;
          uint64_t v213 = a11;
          unsigned int v216 = v204;
          unsigned int v217 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v207 + 8) + 7384), block);
            unsigned int v44 = a7;
            uint64_t v17 = v207;
            goto LABEL_47;
          }
          unsigned int v93 = *v86;
          if (v93 == 63)
          {
            int16x8_t v95 = *v82;
            int16x8_t v37 = v82[1];
            int16x8_t v38 = v82[2];
            int16x8_t v36 = v82[3];
            int16x8_t v221 = *v82;
            int16x8_t v222 = v38;
            int16x8_t v225 = v37;
            int16x8_t v226 = v36;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v95 = vld1q_dup_s16(v82->i16);
            int16x8_t v221 = v95;
            int16x8_t v222 = v95;
            int16x8_t v225 = v95;
            int16x8_t v226 = v95;
            uint64_t v94 = 2;
          }
          else if (*v86)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 64, (uint64_t)v82, v93, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v94 = 0;
            v95.i64[0] = 0;
            int16x8_t v221 = 0u;
            int16x8_t v222 = 0u;
            int16x8_t v225 = 0u;
            int16x8_t v226 = 0u;
          }
          uint64_t v151 = (uint64_t)v82->i64 + v94;
          unsigned int v152 = v86[1];
          if (v152 == 63)
          {
            int16x8_t v154 = *(int16x8_t *)v151;
            int16x8_t v37 = *(int16x8_t *)(v151 + 16);
            int16x8_t v38 = *(int16x8_t *)(v151 + 32);
            int16x8_t v36 = *(int16x8_t *)(v151 + 48);
            int16x8_t v229 = *(int16x8_t *)v151;
            int16x8_t v230 = v38;
            int16x8_t v233 = v37;
            int16x8_t v234 = v36;
            uint64_t v153 = 64;
          }
          else if (v152 == 1)
          {
            int16x8_t v154 = vld1q_dup_s16((const __int16 *)v151);
            int16x8_t v229 = v154;
            int16x8_t v230 = v154;
            int16x8_t v233 = v154;
            int16x8_t v234 = v154;
            uint64_t v153 = 2;
          }
          else if (v86[1])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 64, v151, v152, *(double *)v95.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v153 = 0;
            v154.i64[0] = 0;
            int16x8_t v229 = 0u;
            int16x8_t v230 = 0u;
            int16x8_t v233 = 0u;
            int16x8_t v234 = 0u;
          }
          uint64_t v155 = v151 + v153;
          unsigned int v156 = v86[2];
          if (v156 == 63)
          {
            int16x8_t v158 = *(int16x8_t *)v155;
            int16x8_t v37 = *(int16x8_t *)(v155 + 16);
            int16x8_t v38 = *(int16x8_t *)(v155 + 32);
            int16x8_t v36 = *(int16x8_t *)(v155 + 48);
            int16x8_t v223 = *(int16x8_t *)v155;
            int16x8_t v224 = v38;
            int16x8_t v227 = v37;
            int16x8_t v228 = v36;
            uint64_t v157 = 64;
          }
          else if (v156 == 1)
          {
            int16x8_t v158 = vld1q_dup_s16((const __int16 *)v155);
            int16x8_t v223 = v158;
            int16x8_t v224 = v158;
            int16x8_t v227 = v158;
            int16x8_t v228 = v158;
            uint64_t v157 = 2;
          }
          else if (v86[2])
          {
            uint64_t v157 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 64, v155, v156, *(double *)v154.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v157 = 0;
            v158.i64[0] = 0;
            int16x8_t v223 = 0u;
            int16x8_t v224 = 0u;
            int16x8_t v227 = 0u;
            int16x8_t v228 = 0u;
          }
          uint64_t v159 = v155 + v157;
          unsigned int v160 = v86[3];
          if (v160 == 63)
          {
            int16x8_t v162 = *(int16x8_t *)v159;
            int16x8_t v37 = *(int16x8_t *)(v159 + 16);
            int16x8_t v38 = *(int16x8_t *)(v159 + 32);
            int16x8_t v36 = *(int16x8_t *)(v159 + 48);
            int16x8_t v231 = *(int16x8_t *)v159;
            int16x8_t v232 = v38;
            int16x8_t v235 = v37;
            int16x8_t v236 = v36;
            uint64_t v161 = 64;
          }
          else if (v160 == 1)
          {
            int16x8_t v162 = vld1q_dup_s16((const __int16 *)v159);
            int16x8_t v231 = v162;
            int16x8_t v232 = v162;
            int16x8_t v235 = v162;
            int16x8_t v236 = v162;
            uint64_t v161 = 2;
          }
          else if (v86[3])
          {
            uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 64, v159, v160, *(double *)v158.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v161 = 0;
            v162.i64[0] = 0;
            int16x8_t v231 = 0u;
            int16x8_t v232 = 0u;
            int16x8_t v235 = 0u;
            int16x8_t v236 = 0u;
          }
          uint64_t v163 = v159 + v161;
          unsigned int v164 = v86[4];
          if (v164 == 63)
          {
            int16x8_t v166 = *(int16x8_t *)v163;
            int16x8_t v37 = *(int16x8_t *)(v163 + 16);
            int16x8_t v38 = *(int16x8_t *)(v163 + 32);
            int16x8_t v36 = *(int16x8_t *)(v163 + 48);
            int16x8_t v237 = *(int16x8_t *)v163;
            int16x8_t v238 = v38;
            int16x8_t v241 = v37;
            int16x8_t v242 = v36;
            uint64_t v165 = 64;
          }
          else if (v164 == 1)
          {
            int16x8_t v166 = vld1q_dup_s16((const __int16 *)v163);
            int16x8_t v237 = v166;
            int16x8_t v238 = v166;
            int16x8_t v241 = v166;
            int16x8_t v242 = v166;
            uint64_t v165 = 2;
          }
          else if (v86[4])
          {
            uint64_t v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 64, v163, v164, *(double *)v162.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v165 = 0;
            v166.i64[0] = 0;
            int16x8_t v237 = 0u;
            int16x8_t v238 = 0u;
            int16x8_t v241 = 0u;
            int16x8_t v242 = 0u;
          }
          uint64_t v167 = v163 + v165;
          unsigned int v168 = v86[5];
          if (v168 == 63)
          {
            int16x8_t v170 = *(int16x8_t *)v167;
            int16x8_t v37 = *(int16x8_t *)(v167 + 16);
            int16x8_t v38 = *(int16x8_t *)(v167 + 32);
            int16x8_t v36 = *(int16x8_t *)(v167 + 48);
            int16x8_t v245 = *(int16x8_t *)v167;
            int16x8_t v246 = v38;
            int16x8_t v249 = v37;
            int16x8_t v250 = v36;
            uint64_t v169 = 64;
          }
          else if (v168 == 1)
          {
            int16x8_t v170 = vld1q_dup_s16((const __int16 *)v167);
            int16x8_t v245 = v170;
            int16x8_t v246 = v170;
            int16x8_t v249 = v170;
            int16x8_t v250 = v170;
            uint64_t v169 = 2;
          }
          else if (v86[5])
          {
            uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 64, v167, v168, *(double *)v166.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v169 = 0;
            v170.i64[0] = 0;
            int16x8_t v245 = 0u;
            int16x8_t v246 = 0u;
            int16x8_t v249 = 0u;
            int16x8_t v250 = 0u;
          }
          uint64_t v171 = v167 + v169;
          unsigned int v172 = v86[6];
          if (v172 == 63)
          {
            int16x8_t v174 = *(int16x8_t *)v171;
            int16x8_t v37 = *(int16x8_t *)(v171 + 16);
            int16x8_t v38 = *(int16x8_t *)(v171 + 32);
            int16x8_t v36 = *(int16x8_t *)(v171 + 48);
            int16x8_t v239 = *(int16x8_t *)v171;
            int16x8_t v240 = v38;
            int16x8_t v243 = v37;
            int16x8_t v244 = v36;
            uint64_t v173 = 64;
          }
          else if (v172 == 1)
          {
            int16x8_t v174 = vld1q_dup_s16((const __int16 *)v171);
            int16x8_t v239 = v174;
            int16x8_t v240 = v174;
            int16x8_t v243 = v174;
            int16x8_t v244 = v174;
            uint64_t v173 = 2;
          }
          else if (v86[6])
          {
            uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 64, v171, v172, *(double *)v170.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v173 = 0;
            v174.i64[0] = 0;
            int16x8_t v239 = 0u;
            int16x8_t v240 = 0u;
            int16x8_t v243 = 0u;
            int16x8_t v244 = 0u;
          }
          uint64_t v175 = v171 + v173;
          unsigned int v176 = v86[7];
          if (v176 == 63)
          {
            int16x8_t v39 = *(int16x8_t *)v175;
            int16x8_t v37 = *(int16x8_t *)(v175 + 16);
            int16x8_t v38 = *(int16x8_t *)(v175 + 32);
            int16x8_t v36 = *(int16x8_t *)(v175 + 48);
            int16x8_t v247 = *(int16x8_t *)v175;
            int16x8_t v248 = v38;
            int16x8_t v251 = v37;
            int16x8_t v252 = v36;
            unsigned int v44 = a7;
            uint64_t v17 = v207;
          }
          else
          {
            unsigned int v44 = a7;
            uint64_t v17 = v207;
            if (v176 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v175);
              int16x8_t v247 = v39;
              int16x8_t v248 = v39;
              int16x8_t v251 = v39;
              int16x8_t v252 = v39;
            }
            else if (v176)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 64, v175, v176, *(double *)v174.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              v39.i64[0] = 0;
              int16x8_t v247 = 0u;
              int16x8_t v248 = 0u;
              int16x8_t v251 = 0u;
              int16x8_t v252 = 0u;
            }
          }
          unint64_t v177 = v216;
          unsigned int v45 = v42 + 1;
          if (v216)
          {
            unint64_t v178 = 0;
            v179 = &v221.i8[64 * (unint64_t)v214 + 8 * v215];
            unsigned int v180 = v217;
            do
            {
              if (v180)
              {
                uint64_t v181 = 0;
                uint64_t v182 = (uint64_t)v212->i64 + v213 * v178;
                do
                {
                  *(unsigned char *)(v182 + v181) = v179[v181];
                  ++v181;
                  unsigned int v180 = v217;
                }
                while (8 * (unint64_t)v217 > v181);
                unint64_t v177 = v216;
              }
              ++v178;
              v179 += 64;
            }
            while (v178 < v177);
          }
LABEL_48:
          BOOL v22 = v42 == v198 >> 3;
          unsigned int v42 = v45;
        }
        while (!v22);
        BOOL v22 = v21++ == v187;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v250 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v203 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v184 = a8 + a10 - 1;
  unsigned int v186 = v184 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v197 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v186)
  {
    unsigned int v195 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 3;
    if (a7 >> 3 <= v195 >> 3)
    {
      uint64_t v25 = a11;
      unsigned int v180 = a5 - 1;
      unsigned int v206 = (a5 - 1) >> 3;
      int v205 = ((a5 - 1) & 7) + 1;
      int v181 = ((a6 - 1) & 7) + 1;
      unsigned int v182 = (a6 - 1) >> 3;
      uint64_t v187 = 4 * a11;
      uint64_t v188 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL)))))));
      v29.i64[0] = 0x1000000010;
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v193 = v30.i32[0] | v30.i32[1];
      BOOL v191 = v30.i32[1] != 0;
      uint64_t v192 = v30.i64[0];
      BOOL v190 = v30.i32[0] != 0;
      unint64_t v179 = 8 * v19 * (unint64_t)v18;
      unsigned int v194 = a7;
      uint64_t v204 = v16;
      do
      {
        unsigned int v31 = (8 * v17) | 7;
        if (8 * v17 <= v203) {
          int v32 = v203;
        }
        else {
          int v32 = 8 * v17;
        }
        unsigned int v33 = v183;
        if (v184 < v31) {
          unsigned int v31 = v184;
        }
        unsigned int v202 = 8 * v17;
        int v189 = v32 - 8 * v17;
        int v201 = v31 - v32 + 1;
        int v34 = v181;
        if (v17 != v182) {
          int v34 = 8;
        }
        unsigned int v207 = v34;
        uint64_t v200 = a2 + (v32 - v203) * v25;
        do
        {
          unsigned int v36 = 8 * v33;
          unsigned int v37 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v33;
          }
          if (v195 < v37) {
            unsigned int v37 = v195;
          }
          int v39 = v37 - v38 + 1;
          if (v33 == v206) {
            unsigned int v40 = v205;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v202 >= v203 && v36 >= a7)
          {
            int v42 = v205;
            if (v33 != v206) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v201 != v207;
          }
          if (isLevelTiled)
          {
            unsigned int v163 = 0;
            uint64_t v164 = v179 >> (*(unsigned char *)(v16 + 57) != 0);
            char v165 = 1;
            if (v164 > 127)
            {
              if (v164 > 511)
              {
                if (v164 == 512)
                {
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v163 = 16;
                  unsigned int v167 = 16;
                }
                else
                {
                  char v166 = 1;
                  unsigned int v167 = 0;
                  if (v164 == 1024)
                  {
                    char v165 = 0;
                    unsigned int v167 = 8;
                    unsigned int v163 = 16;
                  }
                }
              }
              else if (v164 == 128)
              {
                char v165 = 0;
                char v166 = 0;
                unsigned int v163 = 32;
                unsigned int v167 = 32;
              }
              else
              {
                char v166 = 1;
                unsigned int v167 = 0;
                if (v164 == 256)
                {
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v167 = 16;
                  unsigned int v163 = 32;
                }
              }
            }
            else
            {
              char v166 = 1;
              unsigned int v167 = 0;
              switch(v164)
              {
                case 4:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v167 = 128;
                  unsigned int v163 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v163 = 128;
                  unsigned int v167 = 128;
                  break;
                case 16:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v167 = 64;
                  unsigned int v163 = 128;
                  break;
                case 32:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v163 = 64;
                  unsigned int v167 = 64;
                  break;
                default:
                  if (v164 == 64)
                  {
                    char v165 = 0;
                    char v166 = 0;
                    unsigned int v167 = 32;
                    unsigned int v163 = 64;
                  }
                  break;
              }
            }
            unsigned int v168 = (v163 >> 3) - 1;
            if (v165) {
              unsigned int v169 = 0;
            }
            else {
              unsigned int v169 = 32 - __clz(~(-1 << -(char)__clz(v168)));
            }
            unsigned int v170 = (v167 >> 3) - 1;
            if (v166)
            {
              unsigned int v171 = 0;
              if (v169) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v171 = 32 - __clz(~(-1 << -(char)__clz(v170)));
              if (v171 | v169)
              {
LABEL_234:
                int v172 = 0;
                uint64_t v173 = 0;
                int v174 = v33 & v168;
                int v175 = v17 & v170;
                BOOL v176 = v169 != 0;
                BOOL v177 = v171 != 0;
                int v178 = 1;
                do
                {
                  --v169;
                  if (v176) {
                    v173 |= (unint64_t)(v178 & v174) << v172++;
                  }
                  else {
                    unsigned int v169 = 0;
                  }
                  --v171;
                  if (v177) {
                    v173 |= (unint64_t)(v178 & v175) << v172++;
                  }
                  else {
                    unsigned int v171 = 0;
                  }
                  v178 *= 2;
                  --v172;
                  BOOL v177 = v171 != 0;
                  BOOL v176 = v169 != 0;
                }
                while (v171 | v169);
                goto LABEL_246;
              }
            }
            uint64_t v173 = 0;
LABEL_246:
            unint64_t v51 = ((unint64_t)(v36 / v163 + v202 / v167 * ((v163 + v180) / v163)) << 14) + (v173 << 9);
            goto LABEL_59;
          }
          if (v193)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v190;
            BOOL v48 = v191;
            int v50 = v192;
            int v49 = HIDWORD(v192);
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v33) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          if (v57 | v54)
          {
            int v58 = 0;
            unint64_t v59 = 0;
            BOOL v60 = v54 != 0;
            BOOL v61 = v57 != 0;
            int v62 = 1;
            do
            {
              --v54;
              BOOL v63 = !v60;
              if (v60)
              {
                unint64_t v64 = ((unint64_t)(v62 & v33) << v58) | v59;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v64 = v59;
              }
              if (!v63) {
                ++v58;
              }
              --v57;
              if (v61)
              {
                unint64_t v59 = ((unint64_t)(v62 & v17) << v58) | v64;
              }
              else
              {
                unsigned int v57 = 0;
                unint64_t v59 = v64;
              }
              if (v61) {
                ++v58;
              }
              v62 *= 2;
              --v58;
              BOOL v61 = v57 != 0;
              BOOL v60 = v54 != 0;
            }
            while (v57 | v54);
          }
          else
          {
            unint64_t v59 = 0;
          }
          BOOL v65 = (int16x8_t *)(a3 + v51);
          if (v197)
          {
            memcpy(__dst, v65, sizeof(__dst));
            BOOL v65 = (int16x8_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(a4 + 8 * v59);
          int v67 = (int16x8_t *)(v200 + 8 * (v38 - a7));
          char v68 = v40 < 8 || v41;
          if ((v68 & 1) == 0 && v207 > 7)
          {
            unsigned int v69 = *v66;
            if (v69 == 63)
            {
              int16x8_t v71 = *v65;
              int16x8_t v28 = v65[1];
              int16x8_t v29 = v65[2];
              int16x8_t v27 = v65[3];
              *int v67 = *v65;
              v67[1] = v29;
              uint64_t v25 = a11;
              BOOL v77 = (int16x8_t *)((char *)v67 + a11);
              *BOOL v77 = v28;
              v77[1] = v27;
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              if (v69 == 1)
              {
                int16x8_t v71 = vld1q_dup_s16(v65->i16);
                *int v67 = v71;
                v67[1] = v71;
                unint64_t v76 = (int16x8_t *)((char *)v67 + a11);
                *unint64_t v76 = v71;
                v76[1] = v71;
                uint64_t v70 = 2;
              }
              else if (*v66)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v67, a11, (uint64_t)v65, v69, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v70 = 0;
                v71.i64[0] = 0;
                *int v67 = 0u;
                v67[1] = 0u;
                unsigned int v72 = &v67->i8[a11];
                *(_OWORD *)unsigned int v72 = 0u;
                *((_OWORD *)v72 + 1) = 0u;
              }
            }
            uint64_t v78 = (uint64_t)v65->i64 + v70;
            int v79 = (int16x8_t *)((char *)v67 + v188);
            unsigned int v80 = v66[1];
            if (v80 == 63)
            {
              int16x8_t v82 = *(int16x8_t *)v78;
              int16x8_t v28 = *(int16x8_t *)(v78 + 16);
              int16x8_t v29 = *(int16x8_t *)(v78 + 32);
              int16x8_t v27 = *(int16x8_t *)(v78 + 48);
              *int v79 = *(int16x8_t *)v78;
              v79[1] = v29;
              BOOL v85 = (int16x8_t *)((char *)v79 + v25);
              *BOOL v85 = v28;
              v85[1] = v27;
              uint64_t v81 = 64;
            }
            else if (v80 == 1)
            {
              int16x8_t v82 = vld1q_dup_s16((const __int16 *)v78);
              *int v79 = v82;
              v79[1] = v82;
              unsigned int v84 = (int16x8_t *)((char *)v79 + v25);
              *unsigned int v84 = v82;
              v84[1] = v82;
              uint64_t v81 = 2;
            }
            else if (v66[1])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v67 + v188), v25, v78, v80, *(double *)v71.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v81 = 0;
              v82.i64[0] = 0;
              *int v79 = 0u;
              v79[1] = 0u;
              int v83 = &v79->i8[v25];
              *(_OWORD *)int v83 = 0u;
              *((_OWORD *)v83 + 1) = 0u;
            }
            uint64_t v86 = v78 + v81;
            v87 = v67 + 2;
            unsigned int v88 = v66[2];
            if (v88 == 63)
            {
              int16x8_t v90 = *(int16x8_t *)v86;
              int16x8_t v28 = *(int16x8_t *)(v86 + 16);
              int16x8_t v29 = *(int16x8_t *)(v86 + 32);
              int16x8_t v27 = *(int16x8_t *)(v86 + 48);
              v67[2] = *(int16x8_t *)v86;
              v67[3] = v29;
              unsigned int v93 = &v87->i8[v25];
              *(int16x8_t *)unsigned int v93 = v28;
              *((int16x8_t *)v93 + 1) = v27;
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v90 = vld1q_dup_s16((const __int16 *)v86);
              v67[2] = v90;
              v67[3] = v90;
              v92 = (int16x8_t *)((char *)v87 + v25);
              int16x8_t *v92 = v90;
              v92[1] = v90;
              uint64_t v89 = 2;
            }
            else if (v66[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, v25, v86, v88, *(double *)v82.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v89 = 0;
              v90.i64[0] = 0;
              int16x8_t *v87 = 0u;
              v67[3] = 0u;
              int16x8_t v91 = &v87->i8[v25];
              *(_OWORD *)int16x8_t v91 = 0u;
              *((_OWORD *)v91 + 1) = 0u;
            }
            uint64_t v94 = v86 + v89;
            int16x8_t v95 = v79 + 2;
            unsigned int v96 = v66[3];
            if (v96 == 63)
            {
              int16x8_t v98 = *(int16x8_t *)v94;
              int16x8_t v28 = *(int16x8_t *)(v94 + 16);
              int16x8_t v29 = *(int16x8_t *)(v94 + 32);
              int16x8_t v27 = *(int16x8_t *)(v94 + 48);
              v79[2] = *(int16x8_t *)v94;
              v79[3] = v29;
              uint64_t v101 = &v95->i8[v25];
              *(int16x8_t *)uint64_t v101 = v28;
              *((int16x8_t *)v101 + 1) = v27;
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v98 = vld1q_dup_s16((const __int16 *)v94);
              v79[2] = v98;
              v79[3] = v98;
              unsigned int v100 = (int16x8_t *)((char *)v95 + v25);
              *unsigned int v100 = v98;
              v100[1] = v98;
              uint64_t v97 = 2;
            }
            else if (v66[3])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96, *(double *)v90.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v97 = 0;
              v98.i64[0] = 0;
              *int16x8_t v95 = 0u;
              v79[3] = 0u;
              v99 = &v95->i8[v25];
              *(_OWORD *)v99 = 0u;
              *((_OWORD *)v99 + 1) = 0u;
            }
            uint64_t v102 = v94 + v97;
            v103 = (int16x8_t *)((char *)v67 + v187);
            unsigned int v104 = v66[4];
            if (v104 == 63)
            {
              int16x8_t v106 = *(int16x8_t *)v102;
              int16x8_t v28 = *(int16x8_t *)(v102 + 16);
              int16x8_t v29 = *(int16x8_t *)(v102 + 32);
              int16x8_t v27 = *(int16x8_t *)(v102 + 48);
              int16x8_t *v103 = *(int16x8_t *)v102;
              v103[1] = v29;
              uint64_t v109 = (int16x8_t *)((char *)v103 + v25);
              *uint64_t v109 = v28;
              v109[1] = v27;
              uint64_t v105 = 64;
            }
            else if (v104 == 1)
            {
              int16x8_t v106 = vld1q_dup_s16((const __int16 *)v102);
              int16x8_t *v103 = v106;
              v103[1] = v106;
              unsigned int v108 = (int16x8_t *)((char *)v103 + v25);
              *unsigned int v108 = v106;
              v108[1] = v106;
              uint64_t v105 = 2;
            }
            else if (v66[4])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v67 + v187), v25, v102, v104, *(double *)v98.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v105 = 0;
              v106.i64[0] = 0;
              int16x8_t *v103 = 0u;
              v103[1] = 0u;
              v107 = &v103->i8[v25];
              *(_OWORD *)v107 = 0u;
              *((_OWORD *)v107 + 1) = 0u;
            }
            uint64_t v110 = v102 + v105;
            v111 = (int16x8_t *)((char *)v67 + 6 * a11);
            unsigned int v112 = v66[5];
            if (v112 == 63)
            {
              int16x8_t v114 = *(int16x8_t *)v110;
              int16x8_t v28 = *(int16x8_t *)(v110 + 16);
              int16x8_t v29 = *(int16x8_t *)(v110 + 32);
              int16x8_t v27 = *(int16x8_t *)(v110 + 48);
              int16x8_t *v111 = *(int16x8_t *)v110;
              v111[1] = v29;
              uint64_t v117 = (int16x8_t *)((char *)v111 + v25);
              *uint64_t v117 = v28;
              v117[1] = v27;
              uint64_t v113 = 64;
            }
            else if (v112 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v110);
              int16x8_t *v111 = v114;
              v111[1] = v114;
              unsigned int v116 = (int16x8_t *)((char *)v111 + v25);
              *unsigned int v116 = v114;
              v116[1] = v114;
              uint64_t v113 = 2;
            }
            else if (v66[5])
            {
              uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v111, v25, v110, v112, *(double *)v106.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v113 = 0;
              v114.i64[0] = 0;
              int16x8_t *v111 = 0u;
              v111[1] = 0u;
              v115 = &v111->i8[v25];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v118 = v110 + v113;
            v119 = v103 + 2;
            unsigned int v120 = v66[6];
            if (v120 == 63)
            {
              int16x8_t v122 = *(int16x8_t *)v118;
              int16x8_t v28 = *(int16x8_t *)(v118 + 16);
              int16x8_t v29 = *(int16x8_t *)(v118 + 32);
              int16x8_t v27 = *(int16x8_t *)(v118 + 48);
              v103[2] = *(int16x8_t *)v118;
              v103[3] = v29;
              uint64_t v125 = &v119->i8[v25];
              *(int16x8_t *)uint64_t v125 = v28;
              *((int16x8_t *)v125 + 1) = v27;
              uint64_t v121 = 64;
            }
            else if (v120 == 1)
            {
              int16x8_t v122 = vld1q_dup_s16((const __int16 *)v118);
              v103[2] = v122;
              v103[3] = v122;
              unsigned int v124 = (int16x8_t *)((char *)v119 + v25);
              *unsigned int v124 = v122;
              v124[1] = v122;
              uint64_t v121 = 2;
            }
            else if (v66[6])
            {
              uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v119, v25, v118, v120, *(double *)v114.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v121 = 0;
              v122.i64[0] = 0;
              int16x8_t *v119 = 0u;
              v103[3] = 0u;
              v123 = &v119->i8[v25];
              *(_OWORD *)v123 = 0u;
              *((_OWORD *)v123 + 1) = 0u;
            }
            unsigned int v35 = v33 + 1;
            uint64_t v126 = v118 + v121;
            v127 = v111 + 2;
            unsigned int v128 = v66[7];
            if (v128 == 63)
            {
              int16x8_t v30 = *(int16x8_t *)v126;
              int16x8_t v28 = *(int16x8_t *)(v126 + 16);
              int16x8_t v29 = *(int16x8_t *)(v126 + 32);
              int16x8_t v27 = *(int16x8_t *)(v126 + 48);
              v111[2] = *(int16x8_t *)v126;
              v111[3] = v29;
              uint64_t v130 = &v127->i8[v25];
              *(int16x8_t *)uint64_t v130 = v28;
              *((int16x8_t *)v130 + 1) = v27;
              a7 = v194;
              uint64_t v16 = v204;
              goto LABEL_27;
            }
            uint64_t v16 = v204;
            if (v128 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v126);
              v111[2] = v30;
              v111[3] = v30;
LABEL_148:
              v129 = (int16x8_t *)((char *)v127 + v25);
              int16x8_t *v129 = v30;
              v129[1] = v30;
            }
            else
            {
              if (!v128)
              {
                int16x8_t v30 = 0uLL;
                int16x8_t *v127 = 0u;
                v111[3] = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v127, v25, v126, v128, *(double *)v122.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            a7 = v194;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v204;
          block[5] = v65;
          char v215 = v40;
          char v216 = v207;
          unsigned int v211 = v189;
          unsigned int v212 = v38 - v36;
          block[6] = v66;
          unsigned int v209 = v67;
          uint64_t v25 = a11;
          uint64_t v210 = a11;
          unsigned int v213 = v201;
          unsigned int v214 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v204 + 8) + 7384), block);
            a7 = v194;
            uint64_t v16 = v204;
            unsigned int v35 = v33 + 1;
          }
          else
          {
            unsigned int v73 = *v66;
            a7 = v194;
            if (v73 == 63)
            {
              int16x8_t v75 = *v65;
              int16x8_t v28 = v65[1];
              int16x8_t v29 = v65[2];
              int16x8_t v27 = v65[3];
              int16x8_t v218 = *v65;
              int16x8_t v219 = v29;
              int16x8_t v222 = v28;
              int16x8_t v223 = v27;
              uint64_t v74 = 64;
            }
            else if (v73 == 1)
            {
              int16x8_t v75 = vld1q_dup_s16(v65->i16);
              int16x8_t v218 = v75;
              int16x8_t v219 = v75;
              int16x8_t v222 = v75;
              int16x8_t v223 = v75;
              uint64_t v74 = 2;
            }
            else if (*v66)
            {
              uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, (uint64_t)v65, v73, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v74 = 0;
              v75.i64[0] = 0;
              int16x8_t v218 = 0u;
              int16x8_t v219 = 0u;
              int16x8_t v222 = 0u;
              int16x8_t v223 = 0u;
            }
            uint64_t v131 = (uint64_t)v65->i64 + v74;
            unsigned int v132 = v66[1];
            if (v132 == 63)
            {
              int16x8_t v134 = *(int16x8_t *)v131;
              int16x8_t v28 = *(int16x8_t *)(v131 + 16);
              int16x8_t v29 = *(int16x8_t *)(v131 + 32);
              int16x8_t v27 = *(int16x8_t *)(v131 + 48);
              int16x8_t v226 = *(int16x8_t *)v131;
              int16x8_t v227 = v29;
              int16x8_t v230 = v28;
              int16x8_t v231 = v27;
              uint64_t v133 = 64;
            }
            else if (v132 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v131);
              int16x8_t v226 = v134;
              int16x8_t v227 = v134;
              int16x8_t v230 = v134;
              int16x8_t v231 = v134;
              uint64_t v133 = 2;
            }
            else if (v66[1])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 64, v131, v132, *(double *)v75.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v133 = 0;
              v134.i64[0] = 0;
              int16x8_t v226 = 0u;
              int16x8_t v227 = 0u;
              int16x8_t v230 = 0u;
              int16x8_t v231 = 0u;
            }
            uint64_t v135 = v131 + v133;
            unsigned int v136 = v66[2];
            if (v136 == 63)
            {
              int16x8_t v138 = *(int16x8_t *)v135;
              int16x8_t v28 = *(int16x8_t *)(v135 + 16);
              int16x8_t v29 = *(int16x8_t *)(v135 + 32);
              int16x8_t v27 = *(int16x8_t *)(v135 + 48);
              int16x8_t v220 = *(int16x8_t *)v135;
              int16x8_t v221 = v29;
              int16x8_t v224 = v28;
              int16x8_t v225 = v27;
              uint64_t v137 = 64;
            }
            else if (v136 == 1)
            {
              int16x8_t v138 = vld1q_dup_s16((const __int16 *)v135);
              int16x8_t v220 = v138;
              int16x8_t v221 = v138;
              int16x8_t v224 = v138;
              int16x8_t v225 = v138;
              uint64_t v137 = 2;
            }
            else if (v66[2])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v135, v136, *(double *)v134.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v137 = 0;
              v138.i64[0] = 0;
              int16x8_t v220 = 0u;
              int16x8_t v221 = 0u;
              int16x8_t v224 = 0u;
              int16x8_t v225 = 0u;
            }
            uint64_t v139 = v135 + v137;
            unsigned int v140 = v66[3];
            if (v140 == 63)
            {
              int16x8_t v142 = *(int16x8_t *)v139;
              int16x8_t v28 = *(int16x8_t *)(v139 + 16);
              int16x8_t v29 = *(int16x8_t *)(v139 + 32);
              int16x8_t v27 = *(int16x8_t *)(v139 + 48);
              int16x8_t v228 = *(int16x8_t *)v139;
              int16x8_t v229 = v29;
              int16x8_t v232 = v28;
              int16x8_t v233 = v27;
              uint64_t v141 = 64;
            }
            else if (v140 == 1)
            {
              int16x8_t v142 = vld1q_dup_s16((const __int16 *)v139);
              int16x8_t v228 = v142;
              int16x8_t v229 = v142;
              int16x8_t v232 = v142;
              int16x8_t v233 = v142;
              uint64_t v141 = 2;
            }
            else if (v66[3])
            {
              uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 64, v139, v140, *(double *)v138.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v141 = 0;
              v142.i64[0] = 0;
              int16x8_t v228 = 0u;
              int16x8_t v229 = 0u;
              int16x8_t v232 = 0u;
              int16x8_t v233 = 0u;
            }
            uint64_t v143 = v139 + v141;
            unsigned int v144 = v66[4];
            if (v144 == 63)
            {
              int16x8_t v146 = *(int16x8_t *)v143;
              int16x8_t v28 = *(int16x8_t *)(v143 + 16);
              int16x8_t v29 = *(int16x8_t *)(v143 + 32);
              int16x8_t v27 = *(int16x8_t *)(v143 + 48);
              int16x8_t v234 = *(int16x8_t *)v143;
              int16x8_t v235 = v29;
              int16x8_t v238 = v28;
              int16x8_t v239 = v27;
              uint64_t v145 = 64;
            }
            else if (v144 == 1)
            {
              int16x8_t v146 = vld1q_dup_s16((const __int16 *)v143);
              int16x8_t v234 = v146;
              int16x8_t v235 = v146;
              int16x8_t v238 = v146;
              int16x8_t v239 = v146;
              uint64_t v145 = 2;
            }
            else if (v66[4])
            {
              uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v143, v144, *(double *)v142.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v145 = 0;
              v146.i64[0] = 0;
              int16x8_t v234 = 0u;
              int16x8_t v235 = 0u;
              int16x8_t v238 = 0u;
              int16x8_t v239 = 0u;
            }
            uint64_t v147 = v143 + v145;
            unsigned int v148 = v66[5];
            if (v148 == 63)
            {
              int16x8_t v150 = *(int16x8_t *)v147;
              int16x8_t v28 = *(int16x8_t *)(v147 + 16);
              int16x8_t v29 = *(int16x8_t *)(v147 + 32);
              int16x8_t v27 = *(int16x8_t *)(v147 + 48);
              int16x8_t v242 = *(int16x8_t *)v147;
              int16x8_t v243 = v29;
              int16x8_t v246 = v28;
              int16x8_t v247 = v27;
              uint64_t v149 = 64;
            }
            else if (v148 == 1)
            {
              int16x8_t v150 = vld1q_dup_s16((const __int16 *)v147);
              int16x8_t v242 = v150;
              int16x8_t v243 = v150;
              int16x8_t v246 = v150;
              int16x8_t v247 = v150;
              uint64_t v149 = 2;
            }
            else if (v66[5])
            {
              uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 64, v147, v148, *(double *)v146.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v149 = 0;
              v150.i64[0] = 0;
              int16x8_t v242 = 0u;
              int16x8_t v243 = 0u;
              int16x8_t v246 = 0u;
              int16x8_t v247 = 0u;
            }
            uint64_t v151 = v147 + v149;
            unsigned int v152 = v66[6];
            if (v152 == 63)
            {
              int16x8_t v154 = *(int16x8_t *)v151;
              int16x8_t v28 = *(int16x8_t *)(v151 + 16);
              int16x8_t v29 = *(int16x8_t *)(v151 + 32);
              int16x8_t v27 = *(int16x8_t *)(v151 + 48);
              int16x8_t v236 = *(int16x8_t *)v151;
              int16x8_t v237 = v29;
              int16x8_t v240 = v28;
              int16x8_t v241 = v27;
              uint64_t v153 = 64;
            }
            else if (v152 == 1)
            {
              int16x8_t v154 = vld1q_dup_s16((const __int16 *)v151);
              int16x8_t v236 = v154;
              int16x8_t v237 = v154;
              int16x8_t v240 = v154;
              int16x8_t v241 = v154;
              uint64_t v153 = 2;
            }
            else if (v66[6])
            {
              uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v151, v152, *(double *)v150.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v153 = 0;
              v154.i64[0] = 0;
              int16x8_t v236 = 0u;
              int16x8_t v237 = 0u;
              int16x8_t v240 = 0u;
              int16x8_t v241 = 0u;
            }
            uint64_t v155 = v151 + v153;
            unsigned int v156 = v66[7];
            if (v156 == 63)
            {
              int16x8_t v30 = *(int16x8_t *)v155;
              int16x8_t v28 = *(int16x8_t *)(v155 + 16);
              int16x8_t v29 = *(int16x8_t *)(v155 + 32);
              int16x8_t v27 = *(int16x8_t *)(v155 + 48);
              int16x8_t v244 = *(int16x8_t *)v155;
              int16x8_t v245 = v29;
              int16x8_t v248 = v28;
              int16x8_t v249 = v27;
              uint64_t v16 = v204;
              unsigned int v35 = v33 + 1;
            }
            else
            {
              uint64_t v16 = v204;
              unsigned int v35 = v33 + 1;
              if (v156 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v155);
                int16x8_t v244 = v30;
                int16x8_t v245 = v30;
                int16x8_t v248 = v30;
                int16x8_t v249 = v30;
              }
              else if (v156)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v155, v156, *(double *)v154.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v30.i64[0] = 0;
                int16x8_t v244 = 0u;
                int16x8_t v245 = 0u;
                int16x8_t v248 = 0u;
                int16x8_t v249 = 0u;
              }
            }
            unint64_t v157 = v213;
            if (v213)
            {
              unint64_t v158 = 0;
              uint64_t v159 = &v218.i8[64 * (unint64_t)v211 + 8 * v212];
              unsigned int v160 = v214;
              do
              {
                if (v160)
                {
                  uint64_t v161 = 0;
                  uint64_t v162 = (uint64_t)v209->i64 + v210 * v158;
                  do
                  {
                    *(unsigned char *)(v162 + v161) = v159[v161];
                    ++v161;
                    unsigned int v160 = v214;
                  }
                  while (8 * (unint64_t)v214 > v161);
                  unint64_t v157 = v213;
                }
                ++v158;
                v159 += 64;
              }
              while (v158 < v157);
            }
          }
LABEL_27:
          BOOL v21 = v33 == v195 >> 3;
          unsigned int v33 = v35;
        }
        while (!v21);
        BOOL v21 = v17++ == v186;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v250 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v203 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v184 = a8 + a10 - 1;
  unsigned int v186 = v184 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v197 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v186)
  {
    unsigned int v195 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 3;
    if (a7 >> 3 <= v195 >> 3)
    {
      uint64_t v25 = a11;
      unsigned int v180 = a5 - 1;
      unsigned int v206 = (a5 - 1) >> 3;
      int v205 = ((a5 - 1) & 7) + 1;
      int v181 = ((a6 - 1) & 7) + 1;
      unsigned int v182 = (a6 - 1) >> 3;
      uint64_t v187 = 4 * a11;
      uint64_t v188 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL)))))));
      v29.i64[0] = 0x1000000010;
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v193 = v30.i32[0] | v30.i32[1];
      BOOL v191 = v30.i32[1] != 0;
      uint64_t v192 = v30.i64[0];
      BOOL v190 = v30.i32[0] != 0;
      unint64_t v179 = 8 * v19 * (unint64_t)v18;
      unsigned int v194 = a7;
      uint64_t v204 = v16;
      do
      {
        unsigned int v31 = (8 * v17) | 7;
        if (8 * v17 <= v203) {
          int v32 = v203;
        }
        else {
          int v32 = 8 * v17;
        }
        unsigned int v33 = v183;
        if (v184 < v31) {
          unsigned int v31 = v184;
        }
        unsigned int v202 = 8 * v17;
        int v189 = v32 - 8 * v17;
        int v201 = v31 - v32 + 1;
        int v34 = v181;
        if (v17 != v182) {
          int v34 = 8;
        }
        unsigned int v207 = v34;
        uint64_t v200 = a2 + (v32 - v203) * v25;
        do
        {
          unsigned int v36 = 8 * v33;
          unsigned int v37 = 8 * (v33 + 1) - 1;
          if (8 * v33 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 8 * v33;
          }
          if (v195 < v37) {
            unsigned int v37 = v195;
          }
          int v39 = v37 - v38 + 1;
          if (v33 == v206) {
            unsigned int v40 = v205;
          }
          else {
            unsigned int v40 = 8;
          }
          BOOL v41 = 1;
          if (v202 >= v203 && v36 >= a7)
          {
            int v42 = v205;
            if (v33 != v206) {
              int v42 = 8;
            }
            BOOL v41 = v39 != v42 || v201 != v207;
          }
          if (isLevelTiled)
          {
            unsigned int v163 = 0;
            uint64_t v164 = v179 >> (*(unsigned char *)(v16 + 57) != 0);
            char v165 = 1;
            if (v164 > 127)
            {
              if (v164 > 511)
              {
                if (v164 == 512)
                {
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v163 = 16;
                  unsigned int v167 = 16;
                }
                else
                {
                  char v166 = 1;
                  unsigned int v167 = 0;
                  if (v164 == 1024)
                  {
                    char v165 = 0;
                    unsigned int v167 = 8;
                    unsigned int v163 = 16;
                  }
                }
              }
              else if (v164 == 128)
              {
                char v165 = 0;
                char v166 = 0;
                unsigned int v163 = 32;
                unsigned int v167 = 32;
              }
              else
              {
                char v166 = 1;
                unsigned int v167 = 0;
                if (v164 == 256)
                {
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v167 = 16;
                  unsigned int v163 = 32;
                }
              }
            }
            else
            {
              char v166 = 1;
              unsigned int v167 = 0;
              switch(v164)
              {
                case 4:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v167 = 128;
                  unsigned int v163 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v163 = 128;
                  unsigned int v167 = 128;
                  break;
                case 16:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v167 = 64;
                  unsigned int v163 = 128;
                  break;
                case 32:
                  char v165 = 0;
                  char v166 = 0;
                  unsigned int v163 = 64;
                  unsigned int v167 = 64;
                  break;
                default:
                  if (v164 == 64)
                  {
                    char v165 = 0;
                    char v166 = 0;
                    unsigned int v167 = 32;
                    unsigned int v163 = 64;
                  }
                  break;
              }
            }
            unsigned int v168 = (v163 >> 3) - 1;
            if (v165) {
              unsigned int v169 = 0;
            }
            else {
              unsigned int v169 = 32 - __clz(~(-1 << -(char)__clz(v168)));
            }
            unsigned int v170 = (v167 >> 3) - 1;
            if (v166)
            {
              unsigned int v171 = 0;
              if (v169) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v171 = 32 - __clz(~(-1 << -(char)__clz(v170)));
              if (v171 | v169)
              {
LABEL_234:
                int v172 = 0;
                uint64_t v173 = 0;
                int v174 = v33 & v168;
                int v175 = v17 & v170;
                BOOL v176 = v169 != 0;
                BOOL v177 = v171 != 0;
                int v178 = 1;
                do
                {
                  --v169;
                  if (v176) {
                    v173 |= (unint64_t)(v178 & v174) << v172++;
                  }
                  else {
                    unsigned int v169 = 0;
                  }
                  --v171;
                  if (v177) {
                    v173 |= (unint64_t)(v178 & v175) << v172++;
                  }
                  else {
                    unsigned int v171 = 0;
                  }
                  v178 *= 2;
                  --v172;
                  BOOL v177 = v171 != 0;
                  BOOL v176 = v169 != 0;
                }
                while (v171 | v169);
                goto LABEL_246;
              }
            }
            uint64_t v173 = 0;
LABEL_246:
            unint64_t v51 = ((unint64_t)(v36 / v163 + v202 / v167 * ((v163 + v180) / v163)) << 14) + (v173 << 9);
            goto LABEL_59;
          }
          if (v193)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v190;
            BOOL v48 = v191;
            int v50 = v192;
            int v49 = HIDWORD(v192);
            do
            {
              --v49;
              if (v48) {
                v45 |= (unint64_t)(v46 & v33) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v47) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v47 = v50 != 0;
              BOOL v48 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_59:
          unsigned int v52 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          if (v57 | v54)
          {
            int v58 = 0;
            unint64_t v59 = 0;
            BOOL v60 = v54 != 0;
            BOOL v61 = v57 != 0;
            int v62 = 1;
            do
            {
              --v54;
              BOOL v63 = !v60;
              if (v60)
              {
                unint64_t v64 = ((unint64_t)(v62 & v33) << v58) | v59;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v64 = v59;
              }
              if (!v63) {
                ++v58;
              }
              --v57;
              if (v61)
              {
                unint64_t v59 = ((unint64_t)(v62 & v17) << v58) | v64;
              }
              else
              {
                unsigned int v57 = 0;
                unint64_t v59 = v64;
              }
              if (v61) {
                ++v58;
              }
              v62 *= 2;
              --v58;
              BOOL v61 = v57 != 0;
              BOOL v60 = v54 != 0;
            }
            while (v57 | v54);
          }
          else
          {
            unint64_t v59 = 0;
          }
          BOOL v65 = (int16x8_t *)(a3 + v51);
          if (v197)
          {
            memcpy(__dst, v65, sizeof(__dst));
            BOOL v65 = (int16x8_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(a4 + 8 * v59);
          int v67 = (int16x8_t *)(v200 + 8 * (v38 - a7));
          char v68 = v40 < 8 || v41;
          if ((v68 & 1) == 0 && v207 > 7)
          {
            unsigned int v69 = *v66;
            if (v69 == 63)
            {
              int16x8_t v71 = *v65;
              int16x8_t v28 = v65[1];
              int16x8_t v29 = v65[2];
              int16x8_t v27 = v65[3];
              *int v67 = *v65;
              v67[1] = v29;
              uint64_t v25 = a11;
              BOOL v77 = (int16x8_t *)((char *)v67 + a11);
              *BOOL v77 = v28;
              v77[1] = v27;
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              if (v69 == 1)
              {
                int16x8_t v71 = vld1q_dup_s16(v65->i16);
                *int v67 = v71;
                v67[1] = v71;
                unint64_t v76 = (int16x8_t *)((char *)v67 + a11);
                *unint64_t v76 = v71;
                v76[1] = v71;
                uint64_t v70 = 2;
              }
              else if (*v66)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v67, a11, (uint64_t)v65, v69, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v70 = 0;
                v71.i64[0] = 0;
                *int v67 = 0u;
                v67[1] = 0u;
                unsigned int v72 = &v67->i8[a11];
                *(_OWORD *)unsigned int v72 = 0u;
                *((_OWORD *)v72 + 1) = 0u;
              }
            }
            uint64_t v78 = (uint64_t)v65->i64 + v70;
            int v79 = (int16x8_t *)((char *)v67 + v188);
            unsigned int v80 = v66[1];
            if (v80 == 63)
            {
              int16x8_t v82 = *(int16x8_t *)v78;
              int16x8_t v28 = *(int16x8_t *)(v78 + 16);
              int16x8_t v29 = *(int16x8_t *)(v78 + 32);
              int16x8_t v27 = *(int16x8_t *)(v78 + 48);
              *int v79 = *(int16x8_t *)v78;
              v79[1] = v29;
              BOOL v85 = (int16x8_t *)((char *)v79 + v25);
              *BOOL v85 = v28;
              v85[1] = v27;
              uint64_t v81 = 64;
            }
            else if (v80 == 1)
            {
              int16x8_t v82 = vld1q_dup_s16((const __int16 *)v78);
              *int v79 = v82;
              v79[1] = v82;
              unsigned int v84 = (int16x8_t *)((char *)v79 + v25);
              *unsigned int v84 = v82;
              v84[1] = v82;
              uint64_t v81 = 2;
            }
            else if (v66[1])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v67 + v188), v25, v78, v80, *(double *)v71.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v81 = 0;
              v82.i64[0] = 0;
              *int v79 = 0u;
              v79[1] = 0u;
              int v83 = &v79->i8[v25];
              *(_OWORD *)int v83 = 0u;
              *((_OWORD *)v83 + 1) = 0u;
            }
            uint64_t v86 = v78 + v81;
            v87 = v67 + 2;
            unsigned int v88 = v66[2];
            if (v88 == 63)
            {
              int16x8_t v90 = *(int16x8_t *)v86;
              int16x8_t v28 = *(int16x8_t *)(v86 + 16);
              int16x8_t v29 = *(int16x8_t *)(v86 + 32);
              int16x8_t v27 = *(int16x8_t *)(v86 + 48);
              v67[2] = *(int16x8_t *)v86;
              v67[3] = v29;
              unsigned int v93 = &v87->i8[v25];
              *(int16x8_t *)unsigned int v93 = v28;
              *((int16x8_t *)v93 + 1) = v27;
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v90 = vld1q_dup_s16((const __int16 *)v86);
              v67[2] = v90;
              v67[3] = v90;
              v92 = (int16x8_t *)((char *)v87 + v25);
              int16x8_t *v92 = v90;
              v92[1] = v90;
              uint64_t v89 = 2;
            }
            else if (v66[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, v25, v86, v88, *(double *)v82.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v89 = 0;
              v90.i64[0] = 0;
              int16x8_t *v87 = 0u;
              v67[3] = 0u;
              int16x8_t v91 = &v87->i8[v25];
              *(_OWORD *)int16x8_t v91 = 0u;
              *((_OWORD *)v91 + 1) = 0u;
            }
            uint64_t v94 = v86 + v89;
            int16x8_t v95 = v79 + 2;
            unsigned int v96 = v66[3];
            if (v96 == 63)
            {
              int16x8_t v98 = *(int16x8_t *)v94;
              int16x8_t v28 = *(int16x8_t *)(v94 + 16);
              int16x8_t v29 = *(int16x8_t *)(v94 + 32);
              int16x8_t v27 = *(int16x8_t *)(v94 + 48);
              v79[2] = *(int16x8_t *)v94;
              v79[3] = v29;
              uint64_t v101 = &v95->i8[v25];
              *(int16x8_t *)uint64_t v101 = v28;
              *((int16x8_t *)v101 + 1) = v27;
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v98 = vld1q_dup_s16((const __int16 *)v94);
              v79[2] = v98;
              v79[3] = v98;
              unsigned int v100 = (int16x8_t *)((char *)v95 + v25);
              *unsigned int v100 = v98;
              v100[1] = v98;
              uint64_t v97 = 2;
            }
            else if (v66[3])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96, *(double *)v90.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v97 = 0;
              v98.i64[0] = 0;
              *int16x8_t v95 = 0u;
              v79[3] = 0u;
              v99 = &v95->i8[v25];
              *(_OWORD *)v99 = 0u;
              *((_OWORD *)v99 + 1) = 0u;
            }
            uint64_t v102 = v94 + v97;
            v103 = (int16x8_t *)((char *)v67 + v187);
            unsigned int v104 = v66[4];
            if (v104 == 63)
            {
              int16x8_t v106 = *(int16x8_t *)v102;
              int16x8_t v28 = *(int16x8_t *)(v102 + 16);
              int16x8_t v29 = *(int16x8_t *)(v102 + 32);
              int16x8_t v27 = *(int16x8_t *)(v102 + 48);
              int16x8_t *v103 = *(int16x8_t *)v102;
              v103[1] = v29;
              uint64_t v109 = (int16x8_t *)((char *)v103 + v25);
              *uint64_t v109 = v28;
              v109[1] = v27;
              uint64_t v105 = 64;
            }
            else if (v104 == 1)
            {
              int16x8_t v106 = vld1q_dup_s16((const __int16 *)v102);
              int16x8_t *v103 = v106;
              v103[1] = v106;
              unsigned int v108 = (int16x8_t *)((char *)v103 + v25);
              *unsigned int v108 = v106;
              v108[1] = v106;
              uint64_t v105 = 2;
            }
            else if (v66[4])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v67 + v187), v25, v102, v104, *(double *)v98.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v105 = 0;
              v106.i64[0] = 0;
              int16x8_t *v103 = 0u;
              v103[1] = 0u;
              v107 = &v103->i8[v25];
              *(_OWORD *)v107 = 0u;
              *((_OWORD *)v107 + 1) = 0u;
            }
            uint64_t v110 = v102 + v105;
            v111 = (int16x8_t *)((char *)v67 + 6 * a11);
            unsigned int v112 = v66[5];
            if (v112 == 63)
            {
              int16x8_t v114 = *(int16x8_t *)v110;
              int16x8_t v28 = *(int16x8_t *)(v110 + 16);
              int16x8_t v29 = *(int16x8_t *)(v110 + 32);
              int16x8_t v27 = *(int16x8_t *)(v110 + 48);
              int16x8_t *v111 = *(int16x8_t *)v110;
              v111[1] = v29;
              uint64_t v117 = (int16x8_t *)((char *)v111 + v25);
              *uint64_t v117 = v28;
              v117[1] = v27;
              uint64_t v113 = 64;
            }
            else if (v112 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v110);
              int16x8_t *v111 = v114;
              v111[1] = v114;
              unsigned int v116 = (int16x8_t *)((char *)v111 + v25);
              *unsigned int v116 = v114;
              v116[1] = v114;
              uint64_t v113 = 2;
            }
            else if (v66[5])
            {
              uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v111, v25, v110, v112, *(double *)v106.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v113 = 0;
              v114.i64[0] = 0;
              int16x8_t *v111 = 0u;
              v111[1] = 0u;
              v115 = &v111->i8[v25];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v118 = v110 + v113;
            v119 = v103 + 2;
            unsigned int v120 = v66[6];
            if (v120 == 63)
            {
              int16x8_t v122 = *(int16x8_t *)v118;
              int16x8_t v28 = *(int16x8_t *)(v118 + 16);
              int16x8_t v29 = *(int16x8_t *)(v118 + 32);
              int16x8_t v27 = *(int16x8_t *)(v118 + 48);
              v103[2] = *(int16x8_t *)v118;
              v103[3] = v29;
              uint64_t v125 = &v119->i8[v25];
              *(int16x8_t *)uint64_t v125 = v28;
              *((int16x8_t *)v125 + 1) = v27;
              uint64_t v121 = 64;
            }
            else if (v120 == 1)
            {
              int16x8_t v122 = vld1q_dup_s16((const __int16 *)v118);
              v103[2] = v122;
              v103[3] = v122;
              unsigned int v124 = (int16x8_t *)((char *)v119 + v25);
              *unsigned int v124 = v122;
              v124[1] = v122;
              uint64_t v121 = 2;
            }
            else if (v66[6])
            {
              uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v119, v25, v118, v120, *(double *)v114.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v121 = 0;
              v122.i64[0] = 0;
              int16x8_t *v119 = 0u;
              v103[3] = 0u;
              v123 = &v119->i8[v25];
              *(_OWORD *)v123 = 0u;
              *((_OWORD *)v123 + 1) = 0u;
            }
            unsigned int v35 = v33 + 1;
            uint64_t v126 = v118 + v121;
            v127 = v111 + 2;
            unsigned int v128 = v66[7];
            if (v128 == 63)
            {
              int16x8_t v30 = *(int16x8_t *)v126;
              int16x8_t v28 = *(int16x8_t *)(v126 + 16);
              int16x8_t v29 = *(int16x8_t *)(v126 + 32);
              int16x8_t v27 = *(int16x8_t *)(v126 + 48);
              v111[2] = *(int16x8_t *)v126;
              v111[3] = v29;
              uint64_t v130 = &v127->i8[v25];
              *(int16x8_t *)uint64_t v130 = v28;
              *((int16x8_t *)v130 + 1) = v27;
              a7 = v194;
              uint64_t v16 = v204;
              goto LABEL_27;
            }
            uint64_t v16 = v204;
            if (v128 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v126);
              v111[2] = v30;
              v111[3] = v30;
LABEL_148:
              v129 = (int16x8_t *)((char *)v127 + v25);
              int16x8_t *v129 = v30;
              v129[1] = v30;
            }
            else
            {
              if (!v128)
              {
                int16x8_t v30 = 0uLL;
                int16x8_t *v127 = 0u;
                v111[3] = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v127, v25, v126, v128, *(double *)v122.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            a7 = v194;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v204;
          block[5] = v65;
          char v215 = v40;
          char v216 = v207;
          unsigned int v211 = v189;
          unsigned int v212 = v38 - v36;
          block[6] = v66;
          unsigned int v209 = v67;
          uint64_t v25 = a11;
          uint64_t v210 = a11;
          unsigned int v213 = v201;
          unsigned int v214 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v204 + 8) + 7384), block);
            a7 = v194;
            uint64_t v16 = v204;
            unsigned int v35 = v33 + 1;
          }
          else
          {
            unsigned int v73 = *v66;
            a7 = v194;
            if (v73 == 63)
            {
              int16x8_t v75 = *v65;
              int16x8_t v28 = v65[1];
              int16x8_t v29 = v65[2];
              int16x8_t v27 = v65[3];
              int16x8_t v218 = *v65;
              int16x8_t v219 = v29;
              int16x8_t v222 = v28;
              int16x8_t v223 = v27;
              uint64_t v74 = 64;
            }
            else if (v73 == 1)
            {
              int16x8_t v75 = vld1q_dup_s16(v65->i16);
              int16x8_t v218 = v75;
              int16x8_t v219 = v75;
              int16x8_t v222 = v75;
              int16x8_t v223 = v75;
              uint64_t v74 = 2;
            }
            else if (*v66)
            {
              uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 64, (uint64_t)v65, v73, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v74 = 0;
              v75.i64[0] = 0;
              int16x8_t v218 = 0u;
              int16x8_t v219 = 0u;
              int16x8_t v222 = 0u;
              int16x8_t v223 = 0u;
            }
            uint64_t v131 = (uint64_t)v65->i64 + v74;
            unsigned int v132 = v66[1];
            if (v132 == 63)
            {
              int16x8_t v134 = *(int16x8_t *)v131;
              int16x8_t v28 = *(int16x8_t *)(v131 + 16);
              int16x8_t v29 = *(int16x8_t *)(v131 + 32);
              int16x8_t v27 = *(int16x8_t *)(v131 + 48);
              int16x8_t v226 = *(int16x8_t *)v131;
              int16x8_t v227 = v29;
              int16x8_t v230 = v28;
              int16x8_t v231 = v27;
              uint64_t v133 = 64;
            }
            else if (v132 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v131);
              int16x8_t v226 = v134;
              int16x8_t v227 = v134;
              int16x8_t v230 = v134;
              int16x8_t v231 = v134;
              uint64_t v133 = 2;
            }
            else if (v66[1])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 64, v131, v132, *(double *)v75.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v133 = 0;
              v134.i64[0] = 0;
              int16x8_t v226 = 0u;
              int16x8_t v227 = 0u;
              int16x8_t v230 = 0u;
              int16x8_t v231 = 0u;
            }
            uint64_t v135 = v131 + v133;
            unsigned int v136 = v66[2];
            if (v136 == 63)
            {
              int16x8_t v138 = *(int16x8_t *)v135;
              int16x8_t v28 = *(int16x8_t *)(v135 + 16);
              int16x8_t v29 = *(int16x8_t *)(v135 + 32);
              int16x8_t v27 = *(int16x8_t *)(v135 + 48);
              int16x8_t v220 = *(int16x8_t *)v135;
              int16x8_t v221 = v29;
              int16x8_t v224 = v28;
              int16x8_t v225 = v27;
              uint64_t v137 = 64;
            }
            else if (v136 == 1)
            {
              int16x8_t v138 = vld1q_dup_s16((const __int16 *)v135);
              int16x8_t v220 = v138;
              int16x8_t v221 = v138;
              int16x8_t v224 = v138;
              int16x8_t v225 = v138;
              uint64_t v137 = 2;
            }
            else if (v66[2])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 64, v135, v136, *(double *)v134.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v137 = 0;
              v138.i64[0] = 0;
              int16x8_t v220 = 0u;
              int16x8_t v221 = 0u;
              int16x8_t v224 = 0u;
              int16x8_t v225 = 0u;
            }
            uint64_t v139 = v135 + v137;
            unsigned int v140 = v66[3];
            if (v140 == 63)
            {
              int16x8_t v142 = *(int16x8_t *)v139;
              int16x8_t v28 = *(int16x8_t *)(v139 + 16);
              int16x8_t v29 = *(int16x8_t *)(v139 + 32);
              int16x8_t v27 = *(int16x8_t *)(v139 + 48);
              int16x8_t v228 = *(int16x8_t *)v139;
              int16x8_t v229 = v29;
              int16x8_t v232 = v28;
              int16x8_t v233 = v27;
              uint64_t v141 = 64;
            }
            else if (v140 == 1)
            {
              int16x8_t v142 = vld1q_dup_s16((const __int16 *)v139);
              int16x8_t v228 = v142;
              int16x8_t v229 = v142;
              int16x8_t v232 = v142;
              int16x8_t v233 = v142;
              uint64_t v141 = 2;
            }
            else if (v66[3])
            {
              uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 64, v139, v140, *(double *)v138.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v141 = 0;
              v142.i64[0] = 0;
              int16x8_t v228 = 0u;
              int16x8_t v229 = 0u;
              int16x8_t v232 = 0u;
              int16x8_t v233 = 0u;
            }
            uint64_t v143 = v139 + v141;
            unsigned int v144 = v66[4];
            if (v144 == 63)
            {
              int16x8_t v146 = *(int16x8_t *)v143;
              int16x8_t v28 = *(int16x8_t *)(v143 + 16);
              int16x8_t v29 = *(int16x8_t *)(v143 + 32);
              int16x8_t v27 = *(int16x8_t *)(v143 + 48);
              int16x8_t v234 = *(int16x8_t *)v143;
              int16x8_t v235 = v29;
              int16x8_t v238 = v28;
              int16x8_t v239 = v27;
              uint64_t v145 = 64;
            }
            else if (v144 == 1)
            {
              int16x8_t v146 = vld1q_dup_s16((const __int16 *)v143);
              int16x8_t v234 = v146;
              int16x8_t v235 = v146;
              int16x8_t v238 = v146;
              int16x8_t v239 = v146;
              uint64_t v145 = 2;
            }
            else if (v66[4])
            {
              uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 64, v143, v144, *(double *)v142.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v145 = 0;
              v146.i64[0] = 0;
              int16x8_t v234 = 0u;
              int16x8_t v235 = 0u;
              int16x8_t v238 = 0u;
              int16x8_t v239 = 0u;
            }
            uint64_t v147 = v143 + v145;
            unsigned int v148 = v66[5];
            if (v148 == 63)
            {
              int16x8_t v150 = *(int16x8_t *)v147;
              int16x8_t v28 = *(int16x8_t *)(v147 + 16);
              int16x8_t v29 = *(int16x8_t *)(v147 + 32);
              int16x8_t v27 = *(int16x8_t *)(v147 + 48);
              int16x8_t v242 = *(int16x8_t *)v147;
              int16x8_t v243 = v29;
              int16x8_t v246 = v28;
              int16x8_t v247 = v27;
              uint64_t v149 = 64;
            }
            else if (v148 == 1)
            {
              int16x8_t v150 = vld1q_dup_s16((const __int16 *)v147);
              int16x8_t v242 = v150;
              int16x8_t v243 = v150;
              int16x8_t v246 = v150;
              int16x8_t v247 = v150;
              uint64_t v149 = 2;
            }
            else if (v66[5])
            {
              uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 64, v147, v148, *(double *)v146.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v149 = 0;
              v150.i64[0] = 0;
              int16x8_t v242 = 0u;
              int16x8_t v243 = 0u;
              int16x8_t v246 = 0u;
              int16x8_t v247 = 0u;
            }
            uint64_t v151 = v147 + v149;
            unsigned int v152 = v66[6];
            if (v152 == 63)
            {
              int16x8_t v154 = *(int16x8_t *)v151;
              int16x8_t v28 = *(int16x8_t *)(v151 + 16);
              int16x8_t v29 = *(int16x8_t *)(v151 + 32);
              int16x8_t v27 = *(int16x8_t *)(v151 + 48);
              int16x8_t v236 = *(int16x8_t *)v151;
              int16x8_t v237 = v29;
              int16x8_t v240 = v28;
              int16x8_t v241 = v27;
              uint64_t v153 = 64;
            }
            else if (v152 == 1)
            {
              int16x8_t v154 = vld1q_dup_s16((const __int16 *)v151);
              int16x8_t v236 = v154;
              int16x8_t v237 = v154;
              int16x8_t v240 = v154;
              int16x8_t v241 = v154;
              uint64_t v153 = 2;
            }
            else if (v66[6])
            {
              uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, v151, v152, *(double *)v150.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v153 = 0;
              v154.i64[0] = 0;
              int16x8_t v236 = 0u;
              int16x8_t v237 = 0u;
              int16x8_t v240 = 0u;
              int16x8_t v241 = 0u;
            }
            uint64_t v155 = v151 + v153;
            unsigned int v156 = v66[7];
            if (v156 == 63)
            {
              int16x8_t v30 = *(int16x8_t *)v155;
              int16x8_t v28 = *(int16x8_t *)(v155 + 16);
              int16x8_t v29 = *(int16x8_t *)(v155 + 32);
              int16x8_t v27 = *(int16x8_t *)(v155 + 48);
              int16x8_t v244 = *(int16x8_t *)v155;
              int16x8_t v245 = v29;
              int16x8_t v248 = v28;
              int16x8_t v249 = v27;
              uint64_t v16 = v204;
              unsigned int v35 = v33 + 1;
            }
            else
            {
              uint64_t v16 = v204;
              unsigned int v35 = v33 + 1;
              if (v156 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v155);
                int16x8_t v244 = v30;
                int16x8_t v245 = v30;
                int16x8_t v248 = v30;
                int16x8_t v249 = v30;
              }
              else if (v156)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v155, v156, *(double *)v154.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v30.i64[0] = 0;
                int16x8_t v244 = 0u;
                int16x8_t v245 = 0u;
                int16x8_t v248 = 0u;
                int16x8_t v249 = 0u;
              }
            }
            unint64_t v157 = v213;
            if (v213)
            {
              unint64_t v158 = 0;
              uint64_t v159 = &v218.i8[64 * (unint64_t)v211 + 8 * v212];
              unsigned int v160 = v214;
              do
              {
                if (v160)
                {
                  uint64_t v161 = 0;
                  uint64_t v162 = (uint64_t)v209->i64 + v210 * v158;
                  do
                  {
                    *(unsigned char *)(v162 + v161) = v159[v161];
                    ++v161;
                    unsigned int v160 = v214;
                  }
                  while (8 * (unint64_t)v214 > v161);
                  unint64_t v157 = v213;
                }
                ++v158;
                v159 += 64;
              }
              while (v158 < v157);
            }
          }
LABEL_27:
          BOOL v21 = v33 == v195 >> 3;
          unsigned int v33 = v35;
        }
        while (!v21);
        BOOL v21 = v17++ == v186;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          int16x8_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            int16x8_t v75 = __dst;
          }
          BOOL v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int16x8_t v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          int16x8_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            int16x8_t v75 = __dst;
          }
          BOOL v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int16x8_t v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v383 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v304 = a8;
  unsigned int v286 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v285 = v286 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v298 = v24;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v297 = 0;
LABEL_32:
      unsigned int v295 = v26 - 3;
      unsigned int v290 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v283 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v297 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v297 = 0;
  unsigned int v283 = 0;
  unsigned int v290 = 0;
  unsigned int v295 = 0;
LABEL_33:
  if (v20 <= v285)
  {
    unsigned int v296 = a7 + a9 - 1;
    if (a7 >> 3 <= v296 >> 3)
    {
      uint64_t v33 = a11;
      unsigned int v307 = v18 >> 3;
      unsigned int v282 = v19 >> 3;
      int v306 = (v18 & 7) + 1;
      int v281 = (v19 & 7) + 1;
      uint64_t v292 = 4 * a11;
      uint64_t v293 = 2 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v35.i64[1] = -1;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v291 = v16.i32[0] | v16.i32[1];
      BOOL v288 = v16.i32[1] != 0;
      uint64_t v289 = v16.i64[0];
      BOOL v287 = v16.i32[0] != 0;
      uint64_t v305 = v15;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v304) {
          int v37 = v304;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v286 < v36) {
          unsigned int v36 = v286;
        }
        int v294 = v37 - 8 * v20;
        int v302 = v36 - v37 + 1;
        unsigned int v38 = a7 >> 3;
        int v39 = v281;
        if (v20 != v282) {
          int v39 = 8;
        }
        unsigned int v308 = v39;
        uint64_t v40 = v20 & ~(-1 << v290);
        uint64_t v301 = a2 + (v37 - v304) * v33;
        unsigned int v41 = a7;
        do
        {
          unsigned int v43 = 8 * v38;
          unsigned int v44 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= v41) {
            int v45 = v41;
          }
          else {
            int v45 = 8 * v38;
          }
          if (v296 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v38 == v307) {
            unsigned int v47 = v306;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v304 && v43 >= v41)
          {
            int v49 = v306;
            if (v38 != v307) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v302 != v308;
          }
          if (v297)
          {
            if (v295 | v290)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v295 != 0;
              BOOL v55 = v290 != 0;
              unsigned int v56 = v295;
              unsigned int v57 = v290;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v38 & ~(-1 << v295) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v40 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v15 + 320) * ((v38 >> v295) + (v20 >> v290) * v283) + (v52 << 10);
          }
          else
          {
            if (v291)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v288;
              BOOL v62 = v287;
              int v63 = HIDWORD(v289);
              int v64 = v289;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v38) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_115:
              unint64_t v73 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_115;
            }
          }
          int v72 = 0;
          unint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            BOOL v77 = !v74;
            if (v74)
            {
              unint64_t v78 = ((unint64_t)(v76 & v38) << v72) | v73;
            }
            else
            {
              unsigned int v68 = 0;
              unint64_t v78 = v73;
            }
            if (!v77) {
              ++v72;
            }
            --v71;
            if (v75)
            {
              unint64_t v73 = ((unint64_t)(v76 & v20) << v72) | v78;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v73 = v78;
            }
            if (v75) {
              ++v72;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_116:
          uint64_t v79 = (int32x4_t *)(a3 + v65);
          if (v298)
          {
            uint64_t v80 = v40;
            int v81 = v46;
            BOOL v82 = v48;
            memcpy(__dst, (const void *)(a3 + v65), sizeof(__dst));
            BOOL v48 = v82;
            int v46 = v81;
            uint64_t v40 = v80;
            uint64_t v79 = (int32x4_t *)__dst;
          }
          uint64_t v83 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v84 = v301 + 16 * (v45 - v41);
          char v85 = v47 < 8 || v48;
          if ((v85 & 1) == 0 && v308 > 7)
          {
            unsigned int v86 = *v83;
            if (v86 == 127)
            {
              int32x4_t v88 = *v79;
              int32x4_t v35 = v79[1];
              int32x4_t v94 = v79[2];
              int32x4_t v95 = v79[3];
              int32x4_t v96 = v79[4];
              int32x4_t v97 = v79[5];
              int32x4_t v98 = v79[6];
              int32x4_t v99 = v79[7];
              uint64_t v33 = a11;
              *(int32x4_t *)uint64_t v84 = *v79;
              *(int32x4_t *)(v84 + 16) = v35;
              int v100 = (int32x4_t *)(v84 + a11);
              *(int32x4_t *)(v84 + 32) = v96;
              *(int32x4_t *)(v84 + 48) = v97;
              *int v100 = v94;
              v100[1] = v95;
              int v101 = (int32x4_t *)(v84 + a11 + 32);
              *int v101 = v98;
              v101[1] = v99;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v33 = a11;
              if (v86 == 3)
              {
                int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
                *(int32x4_t *)uint64_t v84 = v88;
                *(int32x4_t *)(v84 + 16) = v88;
                *(int32x4_t *)(v84 + 32) = v88;
                *(int32x4_t *)(v84 + 48) = v88;
                uint64_t v93 = (int32x4_t *)(v84 + a11);
                *uint64_t v93 = v88;
                v93[1] = v88;
                v93[2] = v88;
                v93[3] = v88;
                uint64_t v87 = 4;
              }
              else if (*v83)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v84, a11, (uint64_t)v79, v86, v16, v35);
              }
              else
              {
                uint64_t v87 = 0;
                int32x4_t v88 = 0uLL;
                *(_OWORD *)(v84 + 32) = 0u;
                *(_OWORD *)(v84 + 48) = 0u;
                *(_OWORD *)uint64_t v84 = 0u;
                *(_OWORD *)(v84 + 16) = 0u;
                unint64_t v89 = (_OWORD *)(v84 + a11);
                v89[2] = 0u;
                v89[3] = 0u;
                *unint64_t v89 = 0u;
                v89[1] = 0u;
              }
            }
            uint64_t v102 = (uint64_t)v79->i64 + v87;
            BOOL v103 = (int32x4_t *)(v84 + v293);
            unsigned int v104 = v83[1];
            if (v104 == 127)
            {
              int32x4_t v106 = *(int32x4_t *)v102;
              int32x4_t v35 = *(int32x4_t *)(v102 + 16);
              long long v109 = *(_OWORD *)(v102 + 32);
              long long v110 = *(_OWORD *)(v102 + 48);
              int32x4_t v111 = *(int32x4_t *)(v102 + 64);
              int32x4_t v112 = *(int32x4_t *)(v102 + 80);
              long long v113 = *(_OWORD *)(v102 + 96);
              long long v114 = *(_OWORD *)(v102 + 112);
              int32x4_t *v103 = *(int32x4_t *)v102;
              v103[1] = v35;
              int v115 = &v103->i8[v33];
              v103[2] = v111;
              v103[3] = v112;
              *(_OWORD *)int v115 = v109;
              *((_OWORD *)v115 + 1) = v110;
              BOOL v116 = &v103[2].i8[v33];
              *(_OWORD *)BOOL v116 = v113;
              *((_OWORD *)v116 + 1) = v114;
              uint64_t v105 = 128;
            }
            else if (v104 == 3)
            {
              int32x4_t v106 = (int32x4_t)vld1q_dup_f32((const float *)v102);
              int32x4_t *v103 = v106;
              v103[1] = v106;
              v103[2] = v106;
              v103[3] = v106;
              unsigned int v108 = (int32x4_t *)((char *)v103 + v33);
              *unsigned int v108 = v106;
              v108[1] = v106;
              v108[2] = v106;
              v108[3] = v106;
              uint64_t v105 = 4;
            }
            else if (v83[1])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v84 + v293), v33, v102, v104, v88, v35);
            }
            else
            {
              uint64_t v105 = 0;
              int32x4_t v106 = 0uLL;
              v103[2] = 0u;
              v103[3] = 0u;
              int32x4_t *v103 = 0u;
              v103[1] = 0u;
              int v107 = &v103->i8[v33];
              *((_OWORD *)v107 + 2) = 0u;
              *((_OWORD *)v107 + 3) = 0u;
              *(_OWORD *)int v107 = 0u;
              *((_OWORD *)v107 + 1) = 0u;
            }
            uint64_t v117 = v102 + v105;
            int8x8_t v118 = (int16x8_t *)(v84 + 64);
            unsigned int v119 = v83[2];
            if (v119 == 127)
            {
              int32x4_t v121 = *(int32x4_t *)v117;
              int32x4_t v35 = *(int32x4_t *)(v117 + 16);
              long long v124 = *(_OWORD *)(v117 + 32);
              long long v125 = *(_OWORD *)(v117 + 48);
              long long v126 = *(_OWORD *)(v117 + 64);
              long long v127 = *(_OWORD *)(v117 + 80);
              long long v128 = *(_OWORD *)(v117 + 96);
              long long v129 = *(_OWORD *)(v117 + 112);
              *int8x8_t v118 = *(int16x8_t *)v117;
              *(int32x4_t *)(v84 + 80) = v35;
              unsigned int v130 = &v118->i8[v33];
              *(_OWORD *)(v84 + 96) = v126;
              *(_OWORD *)(v84 + 112) = v127;
              *(_OWORD *)unsigned int v130 = v124;
              *((_OWORD *)v130 + 1) = v125;
              v130 += 32;
              *(_OWORD *)unsigned int v130 = v128;
              *((_OWORD *)v130 + 1) = v129;
              uint64_t v120 = 128;
            }
            else if (v119 == 3)
            {
              int32x4_t v121 = (int32x4_t)vld1q_dup_f32((const float *)v117);
              *(int32x4_t *)(v84 + 64) = v121;
              *(int32x4_t *)(v84 + 80) = v121;
              *(int32x4_t *)(v84 + 96) = v121;
              *(int32x4_t *)(v84 + 112) = v121;
              uint64_t v123 = (int32x4_t *)&v118->i8[v33];
              int32x4_t *v123 = v121;
              v123[1] = v121;
              v123[2] = v121;
              v123[3] = v121;
              uint64_t v120 = 4;
            }
            else if (v83[2])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v33, v117, v119, v106, v35);
            }
            else
            {
              uint64_t v120 = 0;
              int32x4_t v121 = 0uLL;
              *(_OWORD *)(v84 + 96) = 0u;
              *(_OWORD *)(v84 + 112) = 0u;
              *int8x8_t v118 = 0u;
              *(_OWORD *)(v84 + 80) = 0u;
              int v122 = &v118->i8[v33];
              *((_OWORD *)v122 + 2) = 0u;
              *((_OWORD *)v122 + 3) = 0u;
              *(_OWORD *)int v122 = 0u;
              *((_OWORD *)v122 + 1) = 0u;
            }
            uint64_t v131 = v117 + v120;
            uint64_t v132 = (int16x8_t *)&v103[4];
            unsigned int v133 = v83[3];
            if (v133 == 127)
            {
              int32x4_t v135 = *(int32x4_t *)v131;
              int32x4_t v35 = *(int32x4_t *)(v131 + 16);
              long long v138 = *(_OWORD *)(v131 + 32);
              long long v139 = *(_OWORD *)(v131 + 48);
              int32x4_t v140 = *(int32x4_t *)(v131 + 64);
              int32x4_t v141 = *(int32x4_t *)(v131 + 80);
              long long v142 = *(_OWORD *)(v131 + 96);
              long long v143 = *(_OWORD *)(v131 + 112);
              *uint64_t v132 = *(int16x8_t *)v131;
              v103[5] = v35;
              uint64_t v144 = &v132->i8[v33];
              v103[6] = v140;
              v103[7] = v141;
              *(_OWORD *)uint64_t v144 = v138;
              *((_OWORD *)v144 + 1) = v139;
              v144 += 32;
              *(_OWORD *)uint64_t v144 = v142;
              *((_OWORD *)v144 + 1) = v143;
              uint64_t v134 = 128;
            }
            else if (v133 == 3)
            {
              int32x4_t v135 = (int32x4_t)vld1q_dup_f32((const float *)v131);
              v103[4] = v135;
              v103[5] = v135;
              v103[6] = v135;
              v103[7] = v135;
              unsigned int v137 = (int32x4_t *)&v132->i8[v33];
              int32x4_t *v137 = v135;
              v137[1] = v135;
              v137[2] = v135;
              v137[3] = v135;
              uint64_t v134 = 4;
            }
            else if (v83[3])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v132, v33, v131, v133, v121, v35);
            }
            else
            {
              uint64_t v134 = 0;
              int32x4_t v135 = 0uLL;
              v103[6] = 0u;
              v103[7] = 0u;
              *uint64_t v132 = 0u;
              v103[5] = 0u;
              unsigned int v136 = &v132->i8[v33];
              *((_OWORD *)v136 + 2) = 0u;
              *((_OWORD *)v136 + 3) = 0u;
              *(_OWORD *)unsigned int v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v145 = v131 + v134;
            uint64_t v146 = (int32x4_t *)(v84 + v292);
            unsigned int v147 = v83[4];
            if (v147 == 127)
            {
              int32x4_t v149 = *(int32x4_t *)v145;
              int32x4_t v35 = *(int32x4_t *)(v145 + 16);
              long long v152 = *(_OWORD *)(v145 + 32);
              long long v153 = *(_OWORD *)(v145 + 48);
              int32x4_t v154 = *(int32x4_t *)(v145 + 64);
              int32x4_t v155 = *(int32x4_t *)(v145 + 80);
              long long v156 = *(_OWORD *)(v145 + 96);
              long long v157 = *(_OWORD *)(v145 + 112);
              *uint64_t v146 = *(int32x4_t *)v145;
              v146[1] = v35;
              unint64_t v158 = &v146->i8[v33];
              v146[2] = v154;
              v146[3] = v155;
              *(_OWORD *)unint64_t v158 = v152;
              *((_OWORD *)v158 + 1) = v153;
              uint64_t v159 = &v146[2].i8[v33];
              *(_OWORD *)uint64_t v159 = v156;
              *((_OWORD *)v159 + 1) = v157;
              uint64_t v148 = 128;
            }
            else if (v147 == 3)
            {
              int32x4_t v149 = (int32x4_t)vld1q_dup_f32((const float *)v145);
              *uint64_t v146 = v149;
              v146[1] = v149;
              v146[2] = v149;
              v146[3] = v149;
              uint64_t v151 = (int32x4_t *)((char *)v146 + v33);
              *uint64_t v151 = v149;
              v151[1] = v149;
              v151[2] = v149;
              v151[3] = v149;
              uint64_t v148 = 4;
            }
            else if (v83[4])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v84 + v292), v33, v145, v147, v135, v35);
            }
            else
            {
              uint64_t v148 = 0;
              int32x4_t v149 = 0uLL;
              v146[2] = 0u;
              v146[3] = 0u;
              *uint64_t v146 = 0u;
              v146[1] = 0u;
              int16x8_t v150 = &v146->i8[v33];
              *((_OWORD *)v150 + 2) = 0u;
              *((_OWORD *)v150 + 3) = 0u;
              *(_OWORD *)int16x8_t v150 = 0u;
              *((_OWORD *)v150 + 1) = 0u;
            }
            uint64_t v160 = v145 + v148;
            uint64_t v161 = v84 + 6 * a11;
            unsigned int v162 = v83[5];
            if (v162 == 127)
            {
              int32x4_t v164 = *(int32x4_t *)v160;
              int32x4_t v35 = *(int32x4_t *)(v160 + 16);
              long long v167 = *(_OWORD *)(v160 + 32);
              long long v168 = *(_OWORD *)(v160 + 48);
              long long v169 = *(_OWORD *)(v160 + 64);
              long long v170 = *(_OWORD *)(v160 + 80);
              long long v171 = *(_OWORD *)(v160 + 96);
              long long v172 = *(_OWORD *)(v160 + 112);
              *(_OWORD *)uint64_t v161 = *(_OWORD *)v160;
              *(int32x4_t *)(v161 + 16) = v35;
              uint64_t v173 = (_OWORD *)(v161 + v33);
              *(_OWORD *)(v161 + 32) = v169;
              *(_OWORD *)(v161 + 48) = v170;
              *uint64_t v173 = v167;
              v173[1] = v168;
              int v174 = (_OWORD *)(v161 + v33 + 32);
              *int v174 = v171;
              v174[1] = v172;
              uint64_t v163 = 128;
            }
            else if (v162 == 3)
            {
              int32x4_t v164 = (int32x4_t)vld1q_dup_f32((const float *)v160);
              *(int32x4_t *)uint64_t v161 = v164;
              *(int32x4_t *)(v161 + 16) = v164;
              *(int32x4_t *)(v161 + 32) = v164;
              *(int32x4_t *)(v161 + 48) = v164;
              char v166 = (int32x4_t *)(v161 + v33);
              *char v166 = v164;
              v166[1] = v164;
              v166[2] = v164;
              v166[3] = v164;
              uint64_t v163 = 4;
            }
            else if (v83[5])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v161, v33, v160, v162, v149, v35);
            }
            else
            {
              uint64_t v163 = 0;
              int32x4_t v164 = 0uLL;
              *(_OWORD *)(v161 + 32) = 0u;
              *(_OWORD *)(v161 + 48) = 0u;
              *(_OWORD *)uint64_t v161 = 0u;
              *(_OWORD *)(v161 + 16) = 0u;
              char v165 = (_OWORD *)(v161 + v33);
              v165[2] = 0u;
              v165[3] = 0u;
              *char v165 = 0u;
              v165[1] = 0u;
            }
            uint64_t v175 = v160 + v163;
            BOOL v176 = (int16x8_t *)&v146[4];
            unsigned int v177 = v83[6];
            if (v177 == 127)
            {
              int32x4_t v179 = *(int32x4_t *)v175;
              int32x4_t v35 = *(int32x4_t *)(v175 + 16);
              long long v182 = *(_OWORD *)(v175 + 32);
              long long v183 = *(_OWORD *)(v175 + 48);
              int32x4_t v184 = *(int32x4_t *)(v175 + 64);
              int32x4_t v185 = *(int32x4_t *)(v175 + 80);
              long long v186 = *(_OWORD *)(v175 + 96);
              long long v187 = *(_OWORD *)(v175 + 112);
              *BOOL v176 = *(int16x8_t *)v175;
              v146[5] = v35;
              uint64_t v188 = &v176->i8[v33];
              v146[6] = v184;
              v146[7] = v185;
              *(_OWORD *)uint64_t v188 = v182;
              *((_OWORD *)v188 + 1) = v183;
              v188 += 32;
              *(_OWORD *)uint64_t v188 = v186;
              *((_OWORD *)v188 + 1) = v187;
              uint64_t v178 = 128;
            }
            else if (v177 == 3)
            {
              int32x4_t v179 = (int32x4_t)vld1q_dup_f32((const float *)v175);
              v146[4] = v179;
              v146[5] = v179;
              v146[6] = v179;
              v146[7] = v179;
              int v181 = (int32x4_t *)&v176->i8[v33];
              *int v181 = v179;
              v181[1] = v179;
              v181[2] = v179;
              v181[3] = v179;
              uint64_t v178 = 4;
            }
            else if (v83[6])
            {
              uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v176, v33, v175, v177, v164, v35);
            }
            else
            {
              uint64_t v178 = 0;
              int32x4_t v179 = 0uLL;
              v146[6] = 0u;
              v146[7] = 0u;
              *BOOL v176 = 0u;
              v146[5] = 0u;
              unsigned int v180 = &v176->i8[v33];
              *((_OWORD *)v180 + 2) = 0u;
              *((_OWORD *)v180 + 3) = 0u;
              *(_OWORD *)unsigned int v180 = 0u;
              *((_OWORD *)v180 + 1) = 0u;
            }
            uint64_t v189 = v175 + v178;
            BOOL v190 = (int16x8_t *)(v161 + 64);
            unsigned int v191 = v83[7];
            if (v191 == 127)
            {
              int32x4_t v16 = *(int32x4_t *)v189;
              int32x4_t v35 = *(int32x4_t *)(v189 + 16);
              long long v194 = *(_OWORD *)(v189 + 32);
              long long v195 = *(_OWORD *)(v189 + 48);
              long long v196 = *(_OWORD *)(v189 + 64);
              long long v197 = *(_OWORD *)(v189 + 80);
              long long v198 = *(_OWORD *)(v189 + 96);
              long long v199 = *(_OWORD *)(v189 + 112);
              *BOOL v190 = *(int16x8_t *)v189;
              *(int32x4_t *)(v161 + 80) = v35;
              uint64_t v200 = &v190->i8[v33];
              *(_OWORD *)(v161 + 96) = v196;
              *(_OWORD *)(v161 + 112) = v197;
              *(_OWORD *)uint64_t v200 = v194;
              *((_OWORD *)v200 + 1) = v195;
              v200 += 32;
              *(_OWORD *)uint64_t v200 = v198;
              *((_OWORD *)v200 + 1) = v199;
              unsigned int v41 = a7;
              uint64_t v15 = v305;
            }
            else
            {
              uint64_t v15 = v305;
              if (v191 == 3)
              {
                int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v189);
                *(int32x4_t *)(v161 + 64) = v16;
                *(int32x4_t *)(v161 + 80) = v16;
                *(int32x4_t *)(v161 + 96) = v16;
                *(int32x4_t *)(v161 + 112) = v16;
                __int32 v193 = (int32x4_t *)&v190->i8[v33];
                *__int32 v193 = v16;
                v193[1] = v16;
                v193[2] = v16;
                v193[3] = v16;
              }
              else if (v191)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v190, v33, v189, v191, v179, v35);
              }
              else
              {
                int32x4_t v16 = 0uLL;
                *(_OWORD *)(v161 + 96) = 0u;
                *(_OWORD *)(v161 + 112) = 0u;
                *BOOL v190 = 0u;
                *(_OWORD *)(v161 + 80) = 0u;
                uint64_t v192 = &v190->i8[v33];
                *((_OWORD *)v192 + 2) = 0u;
                *((_OWORD *)v192 + 3) = 0u;
                *(_OWORD *)uint64_t v192 = 0u;
                *((_OWORD *)v192 + 1) = 0u;
              }
              unsigned int v41 = a7;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v305;
          block[5] = v79;
          char v316 = v47;
          char v317 = v308;
          unsigned int v312 = v294;
          unsigned int v313 = v45 - v43;
          block[6] = v83;
          uint64_t v310 = v84;
          uint64_t v33 = a11;
          uint64_t v311 = a11;
          unsigned int v314 = v302;
          unsigned int v315 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v305 + 8) + 7384), block);
            unsigned int v41 = a7;
            uint64_t v15 = v305;
LABEL_47:
            unsigned int v42 = v38 + 1;
            goto LABEL_48;
          }
          unsigned int v90 = *v83;
          if (v90 == 127)
          {
            int32x4_t v92 = *v79;
            int32x4_t v35 = v79[1];
            int32x4_t v201 = v79[2];
            int32x4_t v202 = v79[3];
            int32x4_t v203 = v79[4];
            int32x4_t v204 = v79[5];
            int32x4_t v205 = v79[6];
            int32x4_t v206 = v79[7];
            int16x8_t v319 = *(int16x8_t *)v79;
            int32x4_t v320 = v35;
            int32x4_t v321 = v203;
            int32x4_t v322 = v204;
            int32x4_t v327 = v201;
            int32x4_t v328 = v202;
            int32x4_t v329 = v205;
            int32x4_t v330 = v206;
            uint64_t v91 = 128;
          }
          else if (v90 == 3)
          {
            int32x4_t v92 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
            int16x8_t v319 = (int16x8_t)v92;
            int32x4_t v320 = v92;
            int32x4_t v321 = v92;
            int32x4_t v322 = v92;
            int32x4_t v327 = v92;
            int32x4_t v328 = v92;
            int32x4_t v329 = v92;
            int32x4_t v330 = v92;
            uint64_t v91 = 4;
          }
          else if (*v83)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v319, 128, (uint64_t)v79, v90, v16, v35);
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v92 = 0uLL;
            int32x4_t v322 = 0u;
            int32x4_t v321 = 0u;
            int32x4_t v320 = 0u;
            int16x8_t v319 = 0u;
            int32x4_t v327 = 0u;
            int32x4_t v328 = 0u;
            int32x4_t v329 = 0u;
            int32x4_t v330 = 0u;
          }
          uint64_t v207 = (uint64_t)v79->i64 + v91;
          unsigned int v208 = v83[1];
          if (v208 == 127)
          {
            int32x4_t v210 = *(int32x4_t *)v207;
            int32x4_t v35 = *(int32x4_t *)(v207 + 16);
            int32x4_t v211 = *(int32x4_t *)(v207 + 32);
            int32x4_t v212 = *(int32x4_t *)(v207 + 48);
            int32x4_t v213 = *(int32x4_t *)(v207 + 64);
            int32x4_t v214 = *(int32x4_t *)(v207 + 80);
            int32x4_t v215 = *(int32x4_t *)(v207 + 96);
            int32x4_t v216 = *(int32x4_t *)(v207 + 112);
            int16x8_t v335 = *(int16x8_t *)v207;
            int32x4_t v336 = v35;
            int32x4_t v337 = v213;
            int32x4_t v338 = v214;
            int32x4_t v343 = v211;
            int32x4_t v344 = v212;
            int32x4_t v345 = v215;
            int32x4_t v346 = v216;
            uint64_t v209 = 128;
          }
          else if (v208 == 3)
          {
            int32x4_t v210 = (int32x4_t)vld1q_dup_f32((const float *)v207);
            int16x8_t v335 = (int16x8_t)v210;
            int32x4_t v336 = v210;
            int32x4_t v337 = v210;
            int32x4_t v338 = v210;
            int32x4_t v343 = v210;
            int32x4_t v344 = v210;
            int32x4_t v345 = v210;
            int32x4_t v346 = v210;
            uint64_t v209 = 4;
          }
          else if (v83[1])
          {
            uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v335, 128, v207, v208, v92, v35);
          }
          else
          {
            uint64_t v209 = 0;
            int32x4_t v210 = 0uLL;
            int32x4_t v337 = 0u;
            int32x4_t v338 = 0u;
            int16x8_t v335 = 0u;
            int32x4_t v336 = 0u;
            int32x4_t v343 = 0u;
            int32x4_t v344 = 0u;
            int32x4_t v345 = 0u;
            int32x4_t v346 = 0u;
          }
          uint64_t v217 = v207 + v209;
          unsigned int v218 = v83[2];
          if (v218 == 127)
          {
            int32x4_t v220 = *(int32x4_t *)v217;
            int32x4_t v35 = *(int32x4_t *)(v217 + 16);
            int32x4_t v221 = *(int32x4_t *)(v217 + 32);
            int32x4_t v222 = *(int32x4_t *)(v217 + 48);
            int32x4_t v223 = *(int32x4_t *)(v217 + 64);
            int32x4_t v224 = *(int32x4_t *)(v217 + 80);
            int32x4_t v225 = *(int32x4_t *)(v217 + 96);
            int32x4_t v226 = *(int32x4_t *)(v217 + 112);
            int16x8_t v323 = *(int16x8_t *)v217;
            int32x4_t v324 = v35;
            int32x4_t v325 = v223;
            int32x4_t v326 = v224;
            int32x4_t v331 = v221;
            int32x4_t v332 = v222;
            int32x4_t v333 = v225;
            int32x4_t v334 = v226;
            uint64_t v219 = 128;
          }
          else if (v218 == 3)
          {
            int32x4_t v220 = (int32x4_t)vld1q_dup_f32((const float *)v217);
            int16x8_t v323 = (int16x8_t)v220;
            int32x4_t v324 = v220;
            int32x4_t v325 = v220;
            int32x4_t v326 = v220;
            int32x4_t v331 = v220;
            int32x4_t v332 = v220;
            int32x4_t v333 = v220;
            int32x4_t v334 = v220;
            uint64_t v219 = 4;
          }
          else if (v83[2])
          {
            uint64_t v219 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v323, 128, v217, v218, v210, v35);
          }
          else
          {
            uint64_t v219 = 0;
            int32x4_t v220 = 0uLL;
            int32x4_t v325 = 0u;
            int32x4_t v326 = 0u;
            int16x8_t v323 = 0u;
            int32x4_t v324 = 0u;
            int32x4_t v331 = 0u;
            int32x4_t v332 = 0u;
            int32x4_t v333 = 0u;
            int32x4_t v334 = 0u;
          }
          uint64_t v227 = v217 + v219;
          unsigned int v228 = v83[3];
          if (v228 == 127)
          {
            int32x4_t v230 = *(int32x4_t *)v227;
            int32x4_t v35 = *(int32x4_t *)(v227 + 16);
            int32x4_t v231 = *(int32x4_t *)(v227 + 32);
            int32x4_t v232 = *(int32x4_t *)(v227 + 48);
            int32x4_t v233 = *(int32x4_t *)(v227 + 64);
            int32x4_t v234 = *(int32x4_t *)(v227 + 80);
            int32x4_t v235 = *(int32x4_t *)(v227 + 96);
            int32x4_t v236 = *(int32x4_t *)(v227 + 112);
            int16x8_t v339 = *(int16x8_t *)v227;
            int32x4_t v340 = v35;
            int32x4_t v341 = v233;
            int32x4_t v342 = v234;
            int32x4_t v347 = v231;
            int32x4_t v348 = v232;
            int32x4_t v349 = v235;
            int32x4_t v350 = v236;
            uint64_t v229 = 128;
          }
          else if (v228 == 3)
          {
            int32x4_t v230 = (int32x4_t)vld1q_dup_f32((const float *)v227);
            int16x8_t v339 = (int16x8_t)v230;
            int32x4_t v340 = v230;
            int32x4_t v341 = v230;
            int32x4_t v342 = v230;
            int32x4_t v347 = v230;
            int32x4_t v348 = v230;
            int32x4_t v349 = v230;
            int32x4_t v350 = v230;
            uint64_t v229 = 4;
          }
          else if (v83[3])
          {
            uint64_t v229 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v339, 128, v227, v228, v220, v35);
          }
          else
          {
            uint64_t v229 = 0;
            int32x4_t v230 = 0uLL;
            int32x4_t v341 = 0u;
            int32x4_t v342 = 0u;
            int16x8_t v339 = 0u;
            int32x4_t v340 = 0u;
            int32x4_t v347 = 0u;
            int32x4_t v348 = 0u;
            int32x4_t v349 = 0u;
            int32x4_t v350 = 0u;
          }
          uint64_t v237 = v227 + v229;
          unsigned int v238 = v83[4];
          if (v238 == 127)
          {
            int32x4_t v240 = *(int32x4_t *)v237;
            int32x4_t v35 = *(int32x4_t *)(v237 + 16);
            int32x4_t v241 = *(int32x4_t *)(v237 + 32);
            int32x4_t v242 = *(int32x4_t *)(v237 + 48);
            int32x4_t v243 = *(int32x4_t *)(v237 + 64);
            int32x4_t v244 = *(int32x4_t *)(v237 + 80);
            int32x4_t v245 = *(int32x4_t *)(v237 + 96);
            int32x4_t v246 = *(int32x4_t *)(v237 + 112);
            int16x8_t v351 = *(int16x8_t *)v237;
            int32x4_t v352 = v35;
            int32x4_t v353 = v243;
            int32x4_t v354 = v244;
            int32x4_t v359 = v241;
            int32x4_t v360 = v242;
            int32x4_t v361 = v245;
            int32x4_t v362 = v246;
            uint64_t v239 = 128;
          }
          else if (v238 == 3)
          {
            int32x4_t v240 = (int32x4_t)vld1q_dup_f32((const float *)v237);
            int16x8_t v351 = (int16x8_t)v240;
            int32x4_t v352 = v240;
            int32x4_t v353 = v240;
            int32x4_t v354 = v240;
            int32x4_t v359 = v240;
            int32x4_t v360 = v240;
            int32x4_t v361 = v240;
            int32x4_t v362 = v240;
            uint64_t v239 = 4;
          }
          else if (v83[4])
          {
            uint64_t v239 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v351, 128, v237, v238, v230, v35);
          }
          else
          {
            uint64_t v239 = 0;
            int32x4_t v240 = 0uLL;
            int32x4_t v353 = 0u;
            int32x4_t v354 = 0u;
            int16x8_t v351 = 0u;
            int32x4_t v352 = 0u;
            int32x4_t v359 = 0u;
            int32x4_t v360 = 0u;
            int32x4_t v361 = 0u;
            int32x4_t v362 = 0u;
          }
          uint64_t v247 = v237 + v239;
          unsigned int v248 = v83[5];
          if (v248 == 127)
          {
            int32x4_t v250 = *(int32x4_t *)v247;
            int32x4_t v35 = *(int32x4_t *)(v247 + 16);
            int32x4_t v251 = *(int32x4_t *)(v247 + 32);
            int32x4_t v252 = *(int32x4_t *)(v247 + 48);
            int32x4_t v253 = *(int32x4_t *)(v247 + 64);
            int32x4_t v254 = *(int32x4_t *)(v247 + 80);
            int32x4_t v255 = *(int32x4_t *)(v247 + 96);
            int32x4_t v256 = *(int32x4_t *)(v247 + 112);
            int16x8_t v367 = *(int16x8_t *)v247;
            int32x4_t v368 = v35;
            int32x4_t v369 = v253;
            int32x4_t v370 = v254;
            int32x4_t v375 = v251;
            int32x4_t v376 = v252;
            int32x4_t v377 = v255;
            int32x4_t v378 = v256;
            uint64_t v249 = 128;
          }
          else if (v248 == 3)
          {
            int32x4_t v250 = (int32x4_t)vld1q_dup_f32((const float *)v247);
            int16x8_t v367 = (int16x8_t)v250;
            int32x4_t v368 = v250;
            int32x4_t v369 = v250;
            int32x4_t v370 = v250;
            int32x4_t v375 = v250;
            int32x4_t v376 = v250;
            int32x4_t v377 = v250;
            int32x4_t v378 = v250;
            uint64_t v249 = 4;
          }
          else if (v83[5])
          {
            uint64_t v249 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v367, 128, v247, v248, v240, v35);
          }
          else
          {
            uint64_t v249 = 0;
            int32x4_t v250 = 0uLL;
            int32x4_t v369 = 0u;
            int32x4_t v370 = 0u;
            int16x8_t v367 = 0u;
            int32x4_t v368 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v378 = 0u;
          }
          uint64_t v257 = v247 + v249;
          unsigned int v258 = v83[6];
          if (v258 == 127)
          {
            int32x4_t v260 = *(int32x4_t *)v257;
            int32x4_t v35 = *(int32x4_t *)(v257 + 16);
            int32x4_t v261 = *(int32x4_t *)(v257 + 32);
            int32x4_t v262 = *(int32x4_t *)(v257 + 48);
            int32x4_t v263 = *(int32x4_t *)(v257 + 64);
            int32x4_t v264 = *(int32x4_t *)(v257 + 80);
            int32x4_t v265 = *(int32x4_t *)(v257 + 96);
            int32x4_t v266 = *(int32x4_t *)(v257 + 112);
            int16x8_t v355 = *(int16x8_t *)v257;
            int32x4_t v356 = v35;
            int32x4_t v357 = v263;
            int32x4_t v358 = v264;
            int32x4_t v363 = v261;
            int32x4_t v364 = v262;
            int32x4_t v365 = v265;
            int32x4_t v366 = v266;
            uint64_t v259 = 128;
          }
          else if (v258 == 3)
          {
            int32x4_t v260 = (int32x4_t)vld1q_dup_f32((const float *)v257);
            int16x8_t v355 = (int16x8_t)v260;
            int32x4_t v356 = v260;
            int32x4_t v357 = v260;
            int32x4_t v358 = v260;
            int32x4_t v363 = v260;
            int32x4_t v364 = v260;
            int32x4_t v365 = v260;
            int32x4_t v366 = v260;
            uint64_t v259 = 4;
          }
          else if (v83[6])
          {
            uint64_t v259 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v355, 128, v257, v258, v250, v35);
          }
          else
          {
            uint64_t v259 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v357 = 0u;
            int32x4_t v358 = 0u;
            int16x8_t v355 = 0u;
            int32x4_t v356 = 0u;
            int32x4_t v363 = 0u;
            int32x4_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v366 = 0u;
          }
          uint64_t v267 = v257 + v259;
          unsigned int v268 = v83[7];
          if (v268 == 127)
          {
            int32x4_t v16 = *(int32x4_t *)v267;
            int32x4_t v35 = *(int32x4_t *)(v267 + 16);
            int32x4_t v269 = *(int32x4_t *)(v267 + 32);
            int32x4_t v270 = *(int32x4_t *)(v267 + 48);
            int32x4_t v271 = *(int32x4_t *)(v267 + 64);
            int32x4_t v272 = *(int32x4_t *)(v267 + 80);
            int32x4_t v273 = *(int32x4_t *)(v267 + 96);
            int32x4_t v274 = *(int32x4_t *)(v267 + 112);
            int16x8_t v371 = *(int16x8_t *)v267;
            int32x4_t v372 = v35;
            int32x4_t v373 = v271;
            int32x4_t v374 = v272;
            int32x4_t v379 = v269;
            int32x4_t v380 = v270;
            int32x4_t v381 = v273;
            int32x4_t v382 = v274;
            unsigned int v41 = a7;
            uint64_t v15 = v305;
          }
          else
          {
            unsigned int v41 = a7;
            uint64_t v15 = v305;
            if (v268 == 3)
            {
              int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v267);
              int16x8_t v371 = (int16x8_t)v16;
              int32x4_t v372 = v16;
              int32x4_t v373 = v16;
              int32x4_t v374 = v16;
              int32x4_t v379 = v16;
              int32x4_t v380 = v16;
              int32x4_t v381 = v16;
              int32x4_t v382 = v16;
            }
            else if (v268)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v371, 128, v267, v268, v260, v35);
            }
            else
            {
              int32x4_t v16 = 0uLL;
              int32x4_t v373 = 0u;
              int32x4_t v374 = 0u;
              int16x8_t v371 = 0u;
              int32x4_t v372 = 0u;
              int32x4_t v379 = 0u;
              int32x4_t v380 = 0u;
              int32x4_t v381 = 0u;
              int32x4_t v382 = 0u;
            }
          }
          unint64_t v275 = v314;
          unsigned int v42 = v38 + 1;
          if (v314)
          {
            unint64_t v276 = 0;
            v277 = &v319 + 8 * (unint64_t)v312 + v313;
            unsigned int v278 = v315;
            do
            {
              if (v278)
              {
                uint64_t v279 = 0;
                uint64_t v280 = v310 + v311 * v276;
                do
                {
                  *(unsigned char *)(v280 + v279) = v277->i8[v279];
                  ++v279;
                  unsigned int v278 = v315;
                }
                while (16 * (unint64_t)v315 > v279);
                unint64_t v275 = v314;
              }
              ++v276;
              v277 += 8;
            }
            while (v276 < v275);
          }
LABEL_48:
          BOOL v21 = v38 == v296 >> 3;
          unsigned int v38 = v42;
        }
        while (!v21);
        BOOL v21 = v20++ == v285;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v383 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v304 = a8;
  unsigned int v286 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v285 = v286 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v298 = v24;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v297 = 0;
LABEL_32:
      unsigned int v295 = v26 - 3;
      unsigned int v290 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v283 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v297 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v297 = 0;
  unsigned int v283 = 0;
  unsigned int v290 = 0;
  unsigned int v295 = 0;
LABEL_33:
  if (v20 <= v285)
  {
    unsigned int v296 = a7 + a9 - 1;
    if (a7 >> 3 <= v296 >> 3)
    {
      uint64_t v33 = a11;
      unsigned int v307 = v18 >> 3;
      unsigned int v282 = v19 >> 3;
      int v306 = (v18 & 7) + 1;
      int v281 = (v19 & 7) + 1;
      uint64_t v292 = 4 * a11;
      uint64_t v293 = 2 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v35.i64[1] = -1;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v291 = v16.i32[0] | v16.i32[1];
      BOOL v288 = v16.i32[1] != 0;
      uint64_t v289 = v16.i64[0];
      BOOL v287 = v16.i32[0] != 0;
      uint64_t v305 = v15;
      do
      {
        unsigned int v36 = (8 * v20) | 7;
        if (8 * v20 <= v304) {
          int v37 = v304;
        }
        else {
          int v37 = 8 * v20;
        }
        if (v286 < v36) {
          unsigned int v36 = v286;
        }
        int v294 = v37 - 8 * v20;
        int v302 = v36 - v37 + 1;
        unsigned int v38 = a7 >> 3;
        int v39 = v281;
        if (v20 != v282) {
          int v39 = 8;
        }
        unsigned int v308 = v39;
        uint64_t v40 = v20 & ~(-1 << v290);
        uint64_t v301 = a2 + (v37 - v304) * v33;
        unsigned int v41 = a7;
        do
        {
          unsigned int v43 = 8 * v38;
          unsigned int v44 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= v41) {
            int v45 = v41;
          }
          else {
            int v45 = 8 * v38;
          }
          if (v296 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v38 == v307) {
            unsigned int v47 = v306;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (8 * v20 >= v304 && v43 >= v41)
          {
            int v49 = v306;
            if (v38 != v307) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v302 != v308;
          }
          if (v297)
          {
            if (v295 | v290)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v295 != 0;
              BOOL v55 = v290 != 0;
              unsigned int v56 = v295;
              unsigned int v57 = v290;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v38 & ~(-1 << v295) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v40 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v15 + 320) * ((v38 >> v295) + (v20 >> v290) * v283) + (v52 << 10);
          }
          else
          {
            if (v291)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v288;
              BOOL v62 = v287;
              int v63 = HIDWORD(v289);
              int v64 = v289;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v38) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_115:
              unint64_t v73 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_115;
            }
          }
          int v72 = 0;
          unint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            BOOL v77 = !v74;
            if (v74)
            {
              unint64_t v78 = ((unint64_t)(v76 & v38) << v72) | v73;
            }
            else
            {
              unsigned int v68 = 0;
              unint64_t v78 = v73;
            }
            if (!v77) {
              ++v72;
            }
            --v71;
            if (v75)
            {
              unint64_t v73 = ((unint64_t)(v76 & v20) << v72) | v78;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v73 = v78;
            }
            if (v75) {
              ++v72;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_116:
          uint64_t v79 = (int32x4_t *)(a3 + v65);
          if (v298)
          {
            uint64_t v80 = v40;
            int v81 = v46;
            BOOL v82 = v48;
            memcpy(__dst, (const void *)(a3 + v65), sizeof(__dst));
            BOOL v48 = v82;
            int v46 = v81;
            uint64_t v40 = v80;
            uint64_t v79 = (int32x4_t *)__dst;
          }
          uint64_t v83 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v84 = v301 + 16 * (v45 - v41);
          char v85 = v47 < 8 || v48;
          if ((v85 & 1) == 0 && v308 > 7)
          {
            unsigned int v86 = *v83;
            if (v86 == 127)
            {
              int32x4_t v88 = *v79;
              int32x4_t v35 = v79[1];
              int32x4_t v94 = v79[2];
              int32x4_t v95 = v79[3];
              int32x4_t v96 = v79[4];
              int32x4_t v97 = v79[5];
              int32x4_t v98 = v79[6];
              int32x4_t v99 = v79[7];
              uint64_t v33 = a11;
              *(int32x4_t *)uint64_t v84 = *v79;
              *(int32x4_t *)(v84 + 16) = v35;
              int v100 = (int32x4_t *)(v84 + a11);
              *(int32x4_t *)(v84 + 32) = v96;
              *(int32x4_t *)(v84 + 48) = v97;
              *int v100 = v94;
              v100[1] = v95;
              int v101 = (int32x4_t *)(v84 + a11 + 32);
              *int v101 = v98;
              v101[1] = v99;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v33 = a11;
              if (v86 == 3)
              {
                int32x4_t v88 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
                *(int32x4_t *)uint64_t v84 = v88;
                *(int32x4_t *)(v84 + 16) = v88;
                *(int32x4_t *)(v84 + 32) = v88;
                *(int32x4_t *)(v84 + 48) = v88;
                uint64_t v93 = (int32x4_t *)(v84 + a11);
                *uint64_t v93 = v88;
                v93[1] = v88;
                v93[2] = v88;
                v93[3] = v88;
                uint64_t v87 = 4;
              }
              else if (*v83)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v84, a11, (uint64_t)v79, v86, v16, v35);
              }
              else
              {
                uint64_t v87 = 0;
                int32x4_t v88 = 0uLL;
                *(_OWORD *)(v84 + 32) = 0u;
                *(_OWORD *)(v84 + 48) = 0u;
                *(_OWORD *)uint64_t v84 = 0u;
                *(_OWORD *)(v84 + 16) = 0u;
                unint64_t v89 = (_OWORD *)(v84 + a11);
                v89[2] = 0u;
                v89[3] = 0u;
                *unint64_t v89 = 0u;
                v89[1] = 0u;
              }
            }
            uint64_t v102 = (uint64_t)v79->i64 + v87;
            BOOL v103 = (int32x4_t *)(v84 + v293);
            unsigned int v104 = v83[1];
            if (v104 == 127)
            {
              int32x4_t v106 = *(int32x4_t *)v102;
              int32x4_t v35 = *(int32x4_t *)(v102 + 16);
              long long v109 = *(_OWORD *)(v102 + 32);
              long long v110 = *(_OWORD *)(v102 + 48);
              int32x4_t v111 = *(int32x4_t *)(v102 + 64);
              int32x4_t v112 = *(int32x4_t *)(v102 + 80);
              long long v113 = *(_OWORD *)(v102 + 96);
              long long v114 = *(_OWORD *)(v102 + 112);
              int32x4_t *v103 = *(int32x4_t *)v102;
              v103[1] = v35;
              int v115 = &v103->i8[v33];
              v103[2] = v111;
              v103[3] = v112;
              *(_OWORD *)int v115 = v109;
              *((_OWORD *)v115 + 1) = v110;
              BOOL v116 = &v103[2].i8[v33];
              *(_OWORD *)BOOL v116 = v113;
              *((_OWORD *)v116 + 1) = v114;
              uint64_t v105 = 128;
            }
            else if (v104 == 3)
            {
              int32x4_t v106 = (int32x4_t)vld1q_dup_f32((const float *)v102);
              int32x4_t *v103 = v106;
              v103[1] = v106;
              v103[2] = v106;
              v103[3] = v106;
              unsigned int v108 = (int32x4_t *)((char *)v103 + v33);
              *unsigned int v108 = v106;
              v108[1] = v106;
              v108[2] = v106;
              v108[3] = v106;
              uint64_t v105 = 4;
            }
            else if (v83[1])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v84 + v293), v33, v102, v104, v88, v35);
            }
            else
            {
              uint64_t v105 = 0;
              int32x4_t v106 = 0uLL;
              v103[2] = 0u;
              v103[3] = 0u;
              int32x4_t *v103 = 0u;
              v103[1] = 0u;
              int v107 = &v103->i8[v33];
              *((_OWORD *)v107 + 2) = 0u;
              *((_OWORD *)v107 + 3) = 0u;
              *(_OWORD *)int v107 = 0u;
              *((_OWORD *)v107 + 1) = 0u;
            }
            uint64_t v117 = v102 + v105;
            int8x8_t v118 = (int16x8_t *)(v84 + 64);
            unsigned int v119 = v83[2];
            if (v119 == 127)
            {
              int32x4_t v121 = *(int32x4_t *)v117;
              int32x4_t v35 = *(int32x4_t *)(v117 + 16);
              long long v124 = *(_OWORD *)(v117 + 32);
              long long v125 = *(_OWORD *)(v117 + 48);
              long long v126 = *(_OWORD *)(v117 + 64);
              long long v127 = *(_OWORD *)(v117 + 80);
              long long v128 = *(_OWORD *)(v117 + 96);
              long long v129 = *(_OWORD *)(v117 + 112);
              *int8x8_t v118 = *(int16x8_t *)v117;
              *(int32x4_t *)(v84 + 80) = v35;
              unsigned int v130 = &v118->i8[v33];
              *(_OWORD *)(v84 + 96) = v126;
              *(_OWORD *)(v84 + 112) = v127;
              *(_OWORD *)unsigned int v130 = v124;
              *((_OWORD *)v130 + 1) = v125;
              v130 += 32;
              *(_OWORD *)unsigned int v130 = v128;
              *((_OWORD *)v130 + 1) = v129;
              uint64_t v120 = 128;
            }
            else if (v119 == 3)
            {
              int32x4_t v121 = (int32x4_t)vld1q_dup_f32((const float *)v117);
              *(int32x4_t *)(v84 + 64) = v121;
              *(int32x4_t *)(v84 + 80) = v121;
              *(int32x4_t *)(v84 + 96) = v121;
              *(int32x4_t *)(v84 + 112) = v121;
              uint64_t v123 = (int32x4_t *)&v118->i8[v33];
              int32x4_t *v123 = v121;
              v123[1] = v121;
              v123[2] = v121;
              v123[3] = v121;
              uint64_t v120 = 4;
            }
            else if (v83[2])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v33, v117, v119, v106, v35);
            }
            else
            {
              uint64_t v120 = 0;
              int32x4_t v121 = 0uLL;
              *(_OWORD *)(v84 + 96) = 0u;
              *(_OWORD *)(v84 + 112) = 0u;
              *int8x8_t v118 = 0u;
              *(_OWORD *)(v84 + 80) = 0u;
              int v122 = &v118->i8[v33];
              *((_OWORD *)v122 + 2) = 0u;
              *((_OWORD *)v122 + 3) = 0u;
              *(_OWORD *)int v122 = 0u;
              *((_OWORD *)v122 + 1) = 0u;
            }
            uint64_t v131 = v117 + v120;
            uint64_t v132 = (int16x8_t *)&v103[4];
            unsigned int v133 = v83[3];
            if (v133 == 127)
            {
              int32x4_t v135 = *(int32x4_t *)v131;
              int32x4_t v35 = *(int32x4_t *)(v131 + 16);
              long long v138 = *(_OWORD *)(v131 + 32);
              long long v139 = *(_OWORD *)(v131 + 48);
              int32x4_t v140 = *(int32x4_t *)(v131 + 64);
              int32x4_t v141 = *(int32x4_t *)(v131 + 80);
              long long v142 = *(_OWORD *)(v131 + 96);
              long long v143 = *(_OWORD *)(v131 + 112);
              *uint64_t v132 = *(int16x8_t *)v131;
              v103[5] = v35;
              uint64_t v144 = &v132->i8[v33];
              v103[6] = v140;
              v103[7] = v141;
              *(_OWORD *)uint64_t v144 = v138;
              *((_OWORD *)v144 + 1) = v139;
              v144 += 32;
              *(_OWORD *)uint64_t v144 = v142;
              *((_OWORD *)v144 + 1) = v143;
              uint64_t v134 = 128;
            }
            else if (v133 == 3)
            {
              int32x4_t v135 = (int32x4_t)vld1q_dup_f32((const float *)v131);
              v103[4] = v135;
              v103[5] = v135;
              v103[6] = v135;
              v103[7] = v135;
              unsigned int v137 = (int32x4_t *)&v132->i8[v33];
              int32x4_t *v137 = v135;
              v137[1] = v135;
              v137[2] = v135;
              v137[3] = v135;
              uint64_t v134 = 4;
            }
            else if (v83[3])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v132, v33, v131, v133, v121, v35);
            }
            else
            {
              uint64_t v134 = 0;
              int32x4_t v135 = 0uLL;
              v103[6] = 0u;
              v103[7] = 0u;
              *uint64_t v132 = 0u;
              v103[5] = 0u;
              unsigned int v136 = &v132->i8[v33];
              *((_OWORD *)v136 + 2) = 0u;
              *((_OWORD *)v136 + 3) = 0u;
              *(_OWORD *)unsigned int v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v145 = v131 + v134;
            uint64_t v146 = (int32x4_t *)(v84 + v292);
            unsigned int v147 = v83[4];
            if (v147 == 127)
            {
              int32x4_t v149 = *(int32x4_t *)v145;
              int32x4_t v35 = *(int32x4_t *)(v145 + 16);
              long long v152 = *(_OWORD *)(v145 + 32);
              long long v153 = *(_OWORD *)(v145 + 48);
              int32x4_t v154 = *(int32x4_t *)(v145 + 64);
              int32x4_t v155 = *(int32x4_t *)(v145 + 80);
              long long v156 = *(_OWORD *)(v145 + 96);
              long long v157 = *(_OWORD *)(v145 + 112);
              *uint64_t v146 = *(int32x4_t *)v145;
              v146[1] = v35;
              unint64_t v158 = &v146->i8[v33];
              v146[2] = v154;
              v146[3] = v155;
              *(_OWORD *)unint64_t v158 = v152;
              *((_OWORD *)v158 + 1) = v153;
              uint64_t v159 = &v146[2].i8[v33];
              *(_OWORD *)uint64_t v159 = v156;
              *((_OWORD *)v159 + 1) = v157;
              uint64_t v148 = 128;
            }
            else if (v147 == 3)
            {
              int32x4_t v149 = (int32x4_t)vld1q_dup_f32((const float *)v145);
              *uint64_t v146 = v149;
              v146[1] = v149;
              v146[2] = v149;
              v146[3] = v149;
              uint64_t v151 = (int32x4_t *)((char *)v146 + v33);
              *uint64_t v151 = v149;
              v151[1] = v149;
              v151[2] = v149;
              v151[3] = v149;
              uint64_t v148 = 4;
            }
            else if (v83[4])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v84 + v292), v33, v145, v147, v135, v35);
            }
            else
            {
              uint64_t v148 = 0;
              int32x4_t v149 = 0uLL;
              v146[2] = 0u;
              v146[3] = 0u;
              *uint64_t v146 = 0u;
              v146[1] = 0u;
              int16x8_t v150 = &v146->i8[v33];
              *((_OWORD *)v150 + 2) = 0u;
              *((_OWORD *)v150 + 3) = 0u;
              *(_OWORD *)int16x8_t v150 = 0u;
              *((_OWORD *)v150 + 1) = 0u;
            }
            uint64_t v160 = v145 + v148;
            uint64_t v161 = v84 + 6 * a11;
            unsigned int v162 = v83[5];
            if (v162 == 127)
            {
              int32x4_t v164 = *(int32x4_t *)v160;
              int32x4_t v35 = *(int32x4_t *)(v160 + 16);
              long long v167 = *(_OWORD *)(v160 + 32);
              long long v168 = *(_OWORD *)(v160 + 48);
              long long v169 = *(_OWORD *)(v160 + 64);
              long long v170 = *(_OWORD *)(v160 + 80);
              long long v171 = *(_OWORD *)(v160 + 96);
              long long v172 = *(_OWORD *)(v160 + 112);
              *(_OWORD *)uint64_t v161 = *(_OWORD *)v160;
              *(int32x4_t *)(v161 + 16) = v35;
              uint64_t v173 = (_OWORD *)(v161 + v33);
              *(_OWORD *)(v161 + 32) = v169;
              *(_OWORD *)(v161 + 48) = v170;
              *uint64_t v173 = v167;
              v173[1] = v168;
              int v174 = (_OWORD *)(v161 + v33 + 32);
              *int v174 = v171;
              v174[1] = v172;
              uint64_t v163 = 128;
            }
            else if (v162 == 3)
            {
              int32x4_t v164 = (int32x4_t)vld1q_dup_f32((const float *)v160);
              *(int32x4_t *)uint64_t v161 = v164;
              *(int32x4_t *)(v161 + 16) = v164;
              *(int32x4_t *)(v161 + 32) = v164;
              *(int32x4_t *)(v161 + 48) = v164;
              char v166 = (int32x4_t *)(v161 + v33);
              *char v166 = v164;
              v166[1] = v164;
              v166[2] = v164;
              v166[3] = v164;
              uint64_t v163 = 4;
            }
            else if (v83[5])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v161, v33, v160, v162, v149, v35);
            }
            else
            {
              uint64_t v163 = 0;
              int32x4_t v164 = 0uLL;
              *(_OWORD *)(v161 + 32) = 0u;
              *(_OWORD *)(v161 + 48) = 0u;
              *(_OWORD *)uint64_t v161 = 0u;
              *(_OWORD *)(v161 + 16) = 0u;
              char v165 = (_OWORD *)(v161 + v33);
              v165[2] = 0u;
              v165[3] = 0u;
              *char v165 = 0u;
              v165[1] = 0u;
            }
            uint64_t v175 = v160 + v163;
            BOOL v176 = (int16x8_t *)&v146[4];
            unsigned int v177 = v83[6];
            if (v177 == 127)
            {
              int32x4_t v179 = *(int32x4_t *)v175;
              int32x4_t v35 = *(int32x4_t *)(v175 + 16);
              long long v182 = *(_OWORD *)(v175 + 32);
              long long v183 = *(_OWORD *)(v175 + 48);
              int32x4_t v184 = *(int32x4_t *)(v175 + 64);
              int32x4_t v185 = *(int32x4_t *)(v175 + 80);
              long long v186 = *(_OWORD *)(v175 + 96);
              long long v187 = *(_OWORD *)(v175 + 112);
              *BOOL v176 = *(int16x8_t *)v175;
              v146[5] = v35;
              uint64_t v188 = &v176->i8[v33];
              v146[6] = v184;
              v146[7] = v185;
              *(_OWORD *)uint64_t v188 = v182;
              *((_OWORD *)v188 + 1) = v183;
              v188 += 32;
              *(_OWORD *)uint64_t v188 = v186;
              *((_OWORD *)v188 + 1) = v187;
              uint64_t v178 = 128;
            }
            else if (v177 == 3)
            {
              int32x4_t v179 = (int32x4_t)vld1q_dup_f32((const float *)v175);
              v146[4] = v179;
              v146[5] = v179;
              v146[6] = v179;
              v146[7] = v179;
              int v181 = (int32x4_t *)&v176->i8[v33];
              *int v181 = v179;
              v181[1] = v179;
              v181[2] = v179;
              v181[3] = v179;
              uint64_t v178 = 4;
            }
            else if (v83[6])
            {
              uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v176, v33, v175, v177, v164, v35);
            }
            else
            {
              uint64_t v178 = 0;
              int32x4_t v179 = 0uLL;
              v146[6] = 0u;
              v146[7] = 0u;
              *BOOL v176 = 0u;
              v146[5] = 0u;
              unsigned int v180 = &v176->i8[v33];
              *((_OWORD *)v180 + 2) = 0u;
              *((_OWORD *)v180 + 3) = 0u;
              *(_OWORD *)unsigned int v180 = 0u;
              *((_OWORD *)v180 + 1) = 0u;
            }
            uint64_t v189 = v175 + v178;
            BOOL v190 = (int16x8_t *)(v161 + 64);
            unsigned int v191 = v83[7];
            if (v191 == 127)
            {
              int32x4_t v16 = *(int32x4_t *)v189;
              int32x4_t v35 = *(int32x4_t *)(v189 + 16);
              long long v194 = *(_OWORD *)(v189 + 32);
              long long v195 = *(_OWORD *)(v189 + 48);
              long long v196 = *(_OWORD *)(v189 + 64);
              long long v197 = *(_OWORD *)(v189 + 80);
              long long v198 = *(_OWORD *)(v189 + 96);
              long long v199 = *(_OWORD *)(v189 + 112);
              *BOOL v190 = *(int16x8_t *)v189;
              *(int32x4_t *)(v161 + 80) = v35;
              uint64_t v200 = &v190->i8[v33];
              *(_OWORD *)(v161 + 96) = v196;
              *(_OWORD *)(v161 + 112) = v197;
              *(_OWORD *)uint64_t v200 = v194;
              *((_OWORD *)v200 + 1) = v195;
              v200 += 32;
              *(_OWORD *)uint64_t v200 = v198;
              *((_OWORD *)v200 + 1) = v199;
              unsigned int v41 = a7;
              uint64_t v15 = v305;
            }
            else
            {
              uint64_t v15 = v305;
              if (v191 == 3)
              {
                int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v189);
                *(int32x4_t *)(v161 + 64) = v16;
                *(int32x4_t *)(v161 + 80) = v16;
                *(int32x4_t *)(v161 + 96) = v16;
                *(int32x4_t *)(v161 + 112) = v16;
                __int32 v193 = (int32x4_t *)&v190->i8[v33];
                *__int32 v193 = v16;
                v193[1] = v16;
                v193[2] = v16;
                v193[3] = v16;
              }
              else if (v191)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v190, v33, v189, v191, v179, v35);
              }
              else
              {
                int32x4_t v16 = 0uLL;
                *(_OWORD *)(v161 + 96) = 0u;
                *(_OWORD *)(v161 + 112) = 0u;
                *BOOL v190 = 0u;
                *(_OWORD *)(v161 + 80) = 0u;
                uint64_t v192 = &v190->i8[v33];
                *((_OWORD *)v192 + 2) = 0u;
                *((_OWORD *)v192 + 3) = 0u;
                *(_OWORD *)uint64_t v192 = 0u;
                *((_OWORD *)v192 + 1) = 0u;
              }
              unsigned int v41 = a7;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v305;
          block[5] = v79;
          char v316 = v47;
          char v317 = v308;
          unsigned int v312 = v294;
          unsigned int v313 = v45 - v43;
          block[6] = v83;
          uint64_t v310 = v84;
          uint64_t v33 = a11;
          uint64_t v311 = a11;
          unsigned int v314 = v302;
          unsigned int v315 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v305 + 8) + 7384), block);
            unsigned int v41 = a7;
            uint64_t v15 = v305;
LABEL_47:
            unsigned int v42 = v38 + 1;
            goto LABEL_48;
          }
          unsigned int v90 = *v83;
          if (v90 == 127)
          {
            int32x4_t v92 = *v79;
            int32x4_t v35 = v79[1];
            int32x4_t v201 = v79[2];
            int32x4_t v202 = v79[3];
            int32x4_t v203 = v79[4];
            int32x4_t v204 = v79[5];
            int32x4_t v205 = v79[6];
            int32x4_t v206 = v79[7];
            int16x8_t v319 = *(int16x8_t *)v79;
            int32x4_t v320 = v35;
            int32x4_t v321 = v203;
            int32x4_t v322 = v204;
            int32x4_t v327 = v201;
            int32x4_t v328 = v202;
            int32x4_t v329 = v205;
            int32x4_t v330 = v206;
            uint64_t v91 = 128;
          }
          else if (v90 == 3)
          {
            int32x4_t v92 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
            int16x8_t v319 = (int16x8_t)v92;
            int32x4_t v320 = v92;
            int32x4_t v321 = v92;
            int32x4_t v322 = v92;
            int32x4_t v327 = v92;
            int32x4_t v328 = v92;
            int32x4_t v329 = v92;
            int32x4_t v330 = v92;
            uint64_t v91 = 4;
          }
          else if (*v83)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v319, 128, (uint64_t)v79, v90, v16, v35);
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v92 = 0uLL;
            int32x4_t v322 = 0u;
            int32x4_t v321 = 0u;
            int32x4_t v320 = 0u;
            int16x8_t v319 = 0u;
            int32x4_t v327 = 0u;
            int32x4_t v328 = 0u;
            int32x4_t v329 = 0u;
            int32x4_t v330 = 0u;
          }
          uint64_t v207 = (uint64_t)v79->i64 + v91;
          unsigned int v208 = v83[1];
          if (v208 == 127)
          {
            int32x4_t v210 = *(int32x4_t *)v207;
            int32x4_t v35 = *(int32x4_t *)(v207 + 16);
            int32x4_t v211 = *(int32x4_t *)(v207 + 32);
            int32x4_t v212 = *(int32x4_t *)(v207 + 48);
            int32x4_t v213 = *(int32x4_t *)(v207 + 64);
            int32x4_t v214 = *(int32x4_t *)(v207 + 80);
            int32x4_t v215 = *(int32x4_t *)(v207 + 96);
            int32x4_t v216 = *(int32x4_t *)(v207 + 112);
            int16x8_t v335 = *(int16x8_t *)v207;
            int32x4_t v336 = v35;
            int32x4_t v337 = v213;
            int32x4_t v338 = v214;
            int32x4_t v343 = v211;
            int32x4_t v344 = v212;
            int32x4_t v345 = v215;
            int32x4_t v346 = v216;
            uint64_t v209 = 128;
          }
          else if (v208 == 3)
          {
            int32x4_t v210 = (int32x4_t)vld1q_dup_f32((const float *)v207);
            int16x8_t v335 = (int16x8_t)v210;
            int32x4_t v336 = v210;
            int32x4_t v337 = v210;
            int32x4_t v338 = v210;
            int32x4_t v343 = v210;
            int32x4_t v344 = v210;
            int32x4_t v345 = v210;
            int32x4_t v346 = v210;
            uint64_t v209 = 4;
          }
          else if (v83[1])
          {
            uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v335, 128, v207, v208, v92, v35);
          }
          else
          {
            uint64_t v209 = 0;
            int32x4_t v210 = 0uLL;
            int32x4_t v337 = 0u;
            int32x4_t v338 = 0u;
            int16x8_t v335 = 0u;
            int32x4_t v336 = 0u;
            int32x4_t v343 = 0u;
            int32x4_t v344 = 0u;
            int32x4_t v345 = 0u;
            int32x4_t v346 = 0u;
          }
          uint64_t v217 = v207 + v209;
          unsigned int v218 = v83[2];
          if (v218 == 127)
          {
            int32x4_t v220 = *(int32x4_t *)v217;
            int32x4_t v35 = *(int32x4_t *)(v217 + 16);
            int32x4_t v221 = *(int32x4_t *)(v217 + 32);
            int32x4_t v222 = *(int32x4_t *)(v217 + 48);
            int32x4_t v223 = *(int32x4_t *)(v217 + 64);
            int32x4_t v224 = *(int32x4_t *)(v217 + 80);
            int32x4_t v225 = *(int32x4_t *)(v217 + 96);
            int32x4_t v226 = *(int32x4_t *)(v217 + 112);
            int16x8_t v323 = *(int16x8_t *)v217;
            int32x4_t v324 = v35;
            int32x4_t v325 = v223;
            int32x4_t v326 = v224;
            int32x4_t v331 = v221;
            int32x4_t v332 = v222;
            int32x4_t v333 = v225;
            int32x4_t v334 = v226;
            uint64_t v219 = 128;
          }
          else if (v218 == 3)
          {
            int32x4_t v220 = (int32x4_t)vld1q_dup_f32((const float *)v217);
            int16x8_t v323 = (int16x8_t)v220;
            int32x4_t v324 = v220;
            int32x4_t v325 = v220;
            int32x4_t v326 = v220;
            int32x4_t v331 = v220;
            int32x4_t v332 = v220;
            int32x4_t v333 = v220;
            int32x4_t v334 = v220;
            uint64_t v219 = 4;
          }
          else if (v83[2])
          {
            uint64_t v219 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v323, 128, v217, v218, v210, v35);
          }
          else
          {
            uint64_t v219 = 0;
            int32x4_t v220 = 0uLL;
            int32x4_t v325 = 0u;
            int32x4_t v326 = 0u;
            int16x8_t v323 = 0u;
            int32x4_t v324 = 0u;
            int32x4_t v331 = 0u;
            int32x4_t v332 = 0u;
            int32x4_t v333 = 0u;
            int32x4_t v334 = 0u;
          }
          uint64_t v227 = v217 + v219;
          unsigned int v228 = v83[3];
          if (v228 == 127)
          {
            int32x4_t v230 = *(int32x4_t *)v227;
            int32x4_t v35 = *(int32x4_t *)(v227 + 16);
            int32x4_t v231 = *(int32x4_t *)(v227 + 32);
            int32x4_t v232 = *(int32x4_t *)(v227 + 48);
            int32x4_t v233 = *(int32x4_t *)(v227 + 64);
            int32x4_t v234 = *(int32x4_t *)(v227 + 80);
            int32x4_t v235 = *(int32x4_t *)(v227 + 96);
            int32x4_t v236 = *(int32x4_t *)(v227 + 112);
            int16x8_t v339 = *(int16x8_t *)v227;
            int32x4_t v340 = v35;
            int32x4_t v341 = v233;
            int32x4_t v342 = v234;
            int32x4_t v347 = v231;
            int32x4_t v348 = v232;
            int32x4_t v349 = v235;
            int32x4_t v350 = v236;
            uint64_t v229 = 128;
          }
          else if (v228 == 3)
          {
            int32x4_t v230 = (int32x4_t)vld1q_dup_f32((const float *)v227);
            int16x8_t v339 = (int16x8_t)v230;
            int32x4_t v340 = v230;
            int32x4_t v341 = v230;
            int32x4_t v342 = v230;
            int32x4_t v347 = v230;
            int32x4_t v348 = v230;
            int32x4_t v349 = v230;
            int32x4_t v350 = v230;
            uint64_t v229 = 4;
          }
          else if (v83[3])
          {
            uint64_t v229 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v339, 128, v227, v228, v220, v35);
          }
          else
          {
            uint64_t v229 = 0;
            int32x4_t v230 = 0uLL;
            int32x4_t v341 = 0u;
            int32x4_t v342 = 0u;
            int16x8_t v339 = 0u;
            int32x4_t v340 = 0u;
            int32x4_t v347 = 0u;
            int32x4_t v348 = 0u;
            int32x4_t v349 = 0u;
            int32x4_t v350 = 0u;
          }
          uint64_t v237 = v227 + v229;
          unsigned int v238 = v83[4];
          if (v238 == 127)
          {
            int32x4_t v240 = *(int32x4_t *)v237;
            int32x4_t v35 = *(int32x4_t *)(v237 + 16);
            int32x4_t v241 = *(int32x4_t *)(v237 + 32);
            int32x4_t v242 = *(int32x4_t *)(v237 + 48);
            int32x4_t v243 = *(int32x4_t *)(v237 + 64);
            int32x4_t v244 = *(int32x4_t *)(v237 + 80);
            int32x4_t v245 = *(int32x4_t *)(v237 + 96);
            int32x4_t v246 = *(int32x4_t *)(v237 + 112);
            int16x8_t v351 = *(int16x8_t *)v237;
            int32x4_t v352 = v35;
            int32x4_t v353 = v243;
            int32x4_t v354 = v244;
            int32x4_t v359 = v241;
            int32x4_t v360 = v242;
            int32x4_t v361 = v245;
            int32x4_t v362 = v246;
            uint64_t v239 = 128;
          }
          else if (v238 == 3)
          {
            int32x4_t v240 = (int32x4_t)vld1q_dup_f32((const float *)v237);
            int16x8_t v351 = (int16x8_t)v240;
            int32x4_t v352 = v240;
            int32x4_t v353 = v240;
            int32x4_t v354 = v240;
            int32x4_t v359 = v240;
            int32x4_t v360 = v240;
            int32x4_t v361 = v240;
            int32x4_t v362 = v240;
            uint64_t v239 = 4;
          }
          else if (v83[4])
          {
            uint64_t v239 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v351, 128, v237, v238, v230, v35);
          }
          else
          {
            uint64_t v239 = 0;
            int32x4_t v240 = 0uLL;
            int32x4_t v353 = 0u;
            int32x4_t v354 = 0u;
            int16x8_t v351 = 0u;
            int32x4_t v352 = 0u;
            int32x4_t v359 = 0u;
            int32x4_t v360 = 0u;
            int32x4_t v361 = 0u;
            int32x4_t v362 = 0u;
          }
          uint64_t v247 = v237 + v239;
          unsigned int v248 = v83[5];
          if (v248 == 127)
          {
            int32x4_t v250 = *(int32x4_t *)v247;
            int32x4_t v35 = *(int32x4_t *)(v247 + 16);
            int32x4_t v251 = *(int32x4_t *)(v247 + 32);
            int32x4_t v252 = *(int32x4_t *)(v247 + 48);
            int32x4_t v253 = *(int32x4_t *)(v247 + 64);
            int32x4_t v254 = *(int32x4_t *)(v247 + 80);
            int32x4_t v255 = *(int32x4_t *)(v247 + 96);
            int32x4_t v256 = *(int32x4_t *)(v247 + 112);
            int16x8_t v367 = *(int16x8_t *)v247;
            int32x4_t v368 = v35;
            int32x4_t v369 = v253;
            int32x4_t v370 = v254;
            int32x4_t v375 = v251;
            int32x4_t v376 = v252;
            int32x4_t v377 = v255;
            int32x4_t v378 = v256;
            uint64_t v249 = 128;
          }
          else if (v248 == 3)
          {
            int32x4_t v250 = (int32x4_t)vld1q_dup_f32((const float *)v247);
            int16x8_t v367 = (int16x8_t)v250;
            int32x4_t v368 = v250;
            int32x4_t v369 = v250;
            int32x4_t v370 = v250;
            int32x4_t v375 = v250;
            int32x4_t v376 = v250;
            int32x4_t v377 = v250;
            int32x4_t v378 = v250;
            uint64_t v249 = 4;
          }
          else if (v83[5])
          {
            uint64_t v249 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v367, 128, v247, v248, v240, v35);
          }
          else
          {
            uint64_t v249 = 0;
            int32x4_t v250 = 0uLL;
            int32x4_t v369 = 0u;
            int32x4_t v370 = 0u;
            int16x8_t v367 = 0u;
            int32x4_t v368 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v378 = 0u;
          }
          uint64_t v257 = v247 + v249;
          unsigned int v258 = v83[6];
          if (v258 == 127)
          {
            int32x4_t v260 = *(int32x4_t *)v257;
            int32x4_t v35 = *(int32x4_t *)(v257 + 16);
            int32x4_t v261 = *(int32x4_t *)(v257 + 32);
            int32x4_t v262 = *(int32x4_t *)(v257 + 48);
            int32x4_t v263 = *(int32x4_t *)(v257 + 64);
            int32x4_t v264 = *(int32x4_t *)(v257 + 80);
            int32x4_t v265 = *(int32x4_t *)(v257 + 96);
            int32x4_t v266 = *(int32x4_t *)(v257 + 112);
            int16x8_t v355 = *(int16x8_t *)v257;
            int32x4_t v356 = v35;
            int32x4_t v357 = v263;
            int32x4_t v358 = v264;
            int32x4_t v363 = v261;
            int32x4_t v364 = v262;
            int32x4_t v365 = v265;
            int32x4_t v366 = v266;
            uint64_t v259 = 128;
          }
          else if (v258 == 3)
          {
            int32x4_t v260 = (int32x4_t)vld1q_dup_f32((const float *)v257);
            int16x8_t v355 = (int16x8_t)v260;
            int32x4_t v356 = v260;
            int32x4_t v357 = v260;
            int32x4_t v358 = v260;
            int32x4_t v363 = v260;
            int32x4_t v364 = v260;
            int32x4_t v365 = v260;
            int32x4_t v366 = v260;
            uint64_t v259 = 4;
          }
          else if (v83[6])
          {
            uint64_t v259 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v355, 128, v257, v258, v250, v35);
          }
          else
          {
            uint64_t v259 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v357 = 0u;
            int32x4_t v358 = 0u;
            int16x8_t v355 = 0u;
            int32x4_t v356 = 0u;
            int32x4_t v363 = 0u;
            int32x4_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v366 = 0u;
          }
          uint64_t v267 = v257 + v259;
          unsigned int v268 = v83[7];
          if (v268 == 127)
          {
            int32x4_t v16 = *(int32x4_t *)v267;
            int32x4_t v35 = *(int32x4_t *)(v267 + 16);
            int32x4_t v269 = *(int32x4_t *)(v267 + 32);
            int32x4_t v270 = *(int32x4_t *)(v267 + 48);
            int32x4_t v271 = *(int32x4_t *)(v267 + 64);
            int32x4_t v272 = *(int32x4_t *)(v267 + 80);
            int32x4_t v273 = *(int32x4_t *)(v267 + 96);
            int32x4_t v274 = *(int32x4_t *)(v267 + 112);
            int16x8_t v371 = *(int16x8_t *)v267;
            int32x4_t v372 = v35;
            int32x4_t v373 = v271;
            int32x4_t v374 = v272;
            int32x4_t v379 = v269;
            int32x4_t v380 = v270;
            int32x4_t v381 = v273;
            int32x4_t v382 = v274;
            unsigned int v41 = a7;
            uint64_t v15 = v305;
          }
          else
          {
            unsigned int v41 = a7;
            uint64_t v15 = v305;
            if (v268 == 3)
            {
              int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v267);
              int16x8_t v371 = (int16x8_t)v16;
              int32x4_t v372 = v16;
              int32x4_t v373 = v16;
              int32x4_t v374 = v16;
              int32x4_t v379 = v16;
              int32x4_t v380 = v16;
              int32x4_t v381 = v16;
              int32x4_t v382 = v16;
            }
            else if (v268)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v371, 128, v267, v268, v260, v35);
            }
            else
            {
              int32x4_t v16 = 0uLL;
              int32x4_t v373 = 0u;
              int32x4_t v374 = 0u;
              int16x8_t v371 = 0u;
              int32x4_t v372 = 0u;
              int32x4_t v379 = 0u;
              int32x4_t v380 = 0u;
              int32x4_t v381 = 0u;
              int32x4_t v382 = 0u;
            }
          }
          unint64_t v275 = v314;
          unsigned int v42 = v38 + 1;
          if (v314)
          {
            unint64_t v276 = 0;
            v277 = &v319 + 8 * (unint64_t)v312 + v313;
            unsigned int v278 = v315;
            do
            {
              if (v278)
              {
                uint64_t v279 = 0;
                uint64_t v280 = v310 + v311 * v276;
                do
                {
                  *(unsigned char *)(v280 + v279) = v277->i8[v279];
                  ++v279;
                  unsigned int v278 = v315;
                }
                while (16 * (unint64_t)v315 > v279);
                unint64_t v275 = v314;
              }
              ++v276;
              v277 += 8;
            }
            while (v276 < v275);
          }
LABEL_48:
          BOOL v21 = v38 == v296 >> 3;
          unsigned int v38 = v42;
        }
        while (!v21);
        BOOL v21 = v20++ == v285;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v381 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v302 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v283 = a8 + a10 - 1;
  unsigned int v285 = v283 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v296 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v285)
  {
    unsigned int v294 = a7 + a9 - 1;
    unsigned int v282 = a7 >> 3;
    if (a7 >> 3 <= v294 >> 3)
    {
      uint64_t v26 = a11;
      unsigned int v279 = a5 - 1;
      unsigned int v305 = (a5 - 1) >> 3;
      int v304 = ((a5 - 1) & 7) + 1;
      int v280 = ((a6 - 1) & 7) + 1;
      unsigned int v281 = (a6 - 1) >> 3;
      uint64_t v286 = 4 * a11;
      uint64_t v287 = 2 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v28.i64[1] = -1;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 3uLL)))))));
      *(int8x8_t *)v25.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v27));
      __int32 v292 = v25.i32[0] | v25.i32[1];
      BOOL v290 = v25.i32[1] != 0;
      uint64_t v291 = v25.i64[0];
      BOOL v289 = v25.i32[0] != 0;
      unint64_t v278 = 8 * v19 * (unint64_t)v18;
      unsigned int v293 = a7;
      uint64_t v303 = v16;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v302) {
          int v30 = v302;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v282;
        if (v283 < v29) {
          unsigned int v29 = v283;
        }
        unsigned int v301 = 8 * v17;
        int v288 = v30 - 8 * v17;
        int v300 = v29 - v30 + 1;
        int v32 = v280;
        if (v17 != v281) {
          int v32 = 8;
        }
        unsigned int v306 = v32;
        uint64_t v299 = a2 + (v30 - v302) * v26;
        do
        {
          unsigned int v34 = 8 * v31;
          unsigned int v35 = 8 * (v31 + 1) - 1;
          if (8 * v31 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 8 * v31;
          }
          if (v294 < v35) {
            unsigned int v35 = v294;
          }
          int v37 = v35 - v36 + 1;
          if (v31 == v305) {
            unsigned int v38 = v304;
          }
          else {
            unsigned int v38 = 8;
          }
          BOOL v39 = 1;
          if (v301 >= v302 && v34 >= a7)
          {
            int v40 = v304;
            if (v31 != v305) {
              int v40 = 8;
            }
            BOOL v39 = v37 != v40 || v300 != v306;
          }
          if (isLevelTiled)
          {
            unsigned int v262 = 0;
            uint64_t v263 = v278 >> (*(unsigned char *)(v16 + 57) != 0);
            char v264 = 1;
            if (v263 > 127)
            {
              if (v263 > 511)
              {
                if (v263 == 512)
                {
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v262 = 16;
                  unsigned int v266 = 16;
                }
                else
                {
                  char v265 = 1;
                  unsigned int v266 = 0;
                  if (v263 == 1024)
                  {
                    char v264 = 0;
                    unsigned int v266 = 8;
                    unsigned int v262 = 16;
                  }
                }
              }
              else if (v263 == 128)
              {
                char v264 = 0;
                char v265 = 0;
                unsigned int v262 = 32;
                unsigned int v266 = 32;
              }
              else
              {
                char v265 = 1;
                unsigned int v266 = 0;
                if (v263 == 256)
                {
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v266 = 16;
                  unsigned int v262 = 32;
                }
              }
            }
            else
            {
              char v265 = 1;
              unsigned int v266 = 0;
              switch(v263)
              {
                case 4:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v266 = 128;
                  unsigned int v262 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v262 = 128;
                  unsigned int v266 = 128;
                  break;
                case 16:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v266 = 64;
                  unsigned int v262 = 128;
                  break;
                case 32:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v262 = 64;
                  unsigned int v266 = 64;
                  break;
                default:
                  if (v263 == 64)
                  {
                    char v264 = 0;
                    char v265 = 0;
                    unsigned int v266 = 32;
                    unsigned int v262 = 64;
                  }
                  break;
              }
            }
            unsigned int v267 = (v262 >> 3) - 1;
            if (v264) {
              unsigned int v268 = 0;
            }
            else {
              unsigned int v268 = 32 - __clz(~(-1 << -(char)__clz(v267)));
            }
            unsigned int v269 = (v266 >> 3) - 1;
            if (v265)
            {
              unsigned int v270 = 0;
              if (v268) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v270 = 32 - __clz(~(-1 << -(char)__clz(v269)));
              if (v270 | v268)
              {
LABEL_233:
                int v271 = 0;
                uint64_t v272 = 0;
                int v273 = v31 & v267;
                int v274 = v17 & v269;
                BOOL v275 = v268 != 0;
                BOOL v276 = v270 != 0;
                int v277 = 1;
                do
                {
                  --v268;
                  if (v275) {
                    v272 |= (unint64_t)(v277 & v273) << v271++;
                  }
                  else {
                    unsigned int v268 = 0;
                  }
                  --v270;
                  if (v276) {
                    v272 |= (unint64_t)(v277 & v274) << v271++;
                  }
                  else {
                    unsigned int v270 = 0;
                  }
                  v277 *= 2;
                  --v271;
                  BOOL v276 = v270 != 0;
                  BOOL v275 = v268 != 0;
                }
                while (v270 | v268);
                goto LABEL_245;
              }
            }
            uint64_t v272 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v262 + v301 / v266 * ((v262 + v279) / v262)) << 14) + (v272 << 10);
            goto LABEL_59;
          }
          if (v292)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v290;
            BOOL v46 = v289;
            int v47 = HIDWORD(v291);
            int v48 = v291;
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v31) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 10;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v31) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(a3 + v49);
          if (v296)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int32x4_t *)__dst;
          }
          int v64 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v65 = v299 + 16 * (v36 - a7);
          char v66 = v38 < 8 || v39;
          if ((v66 & 1) != 0 || v306 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v303;
            block[5] = v63;
            char v314 = v38;
            char v315 = v306;
            unsigned int v310 = v288;
            unsigned int v311 = v36 - v34;
            block[6] = v64;
            uint64_t v308 = v65;
            uint64_t v26 = a11;
            uint64_t v309 = a11;
            unsigned int v312 = v300;
            unsigned int v313 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v303 + 8) + 7384), block);
              a7 = v293;
              uint64_t v16 = v303;
              unsigned int v33 = v31 + 1;
            }
            else
            {
              unsigned int v71 = *v64;
              a7 = v293;
              if (v71 == 127)
              {
                int32x4_t v73 = *v63;
                int32x4_t v28 = v63[1];
                int32x4_t v182 = v63[2];
                int32x4_t v183 = v63[3];
                int32x4_t v184 = v63[4];
                int32x4_t v185 = v63[5];
                int32x4_t v186 = v63[6];
                int32x4_t v187 = v63[7];
                int16x8_t v317 = *(int16x8_t *)v63;
                int32x4_t v318 = v28;
                int32x4_t v319 = v184;
                int32x4_t v320 = v185;
                int32x4_t v325 = v182;
                int32x4_t v326 = v183;
                int32x4_t v327 = v186;
                int32x4_t v328 = v187;
                uint64_t v72 = 128;
              }
              else if (v71 == 3)
              {
                int32x4_t v73 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                int16x8_t v317 = (int16x8_t)v73;
                int32x4_t v318 = v73;
                int32x4_t v319 = v73;
                int32x4_t v320 = v73;
                int32x4_t v325 = v73;
                int32x4_t v326 = v73;
                int32x4_t v327 = v73;
                int32x4_t v328 = v73;
                uint64_t v72 = 4;
              }
              else if (*v64)
              {
                uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v317, 128, (uint64_t)v63, v71, v25, v28);
              }
              else
              {
                uint64_t v72 = 0;
                int32x4_t v73 = 0uLL;
                int32x4_t v320 = 0u;
                int32x4_t v319 = 0u;
                int32x4_t v318 = 0u;
                int16x8_t v317 = 0u;
                int32x4_t v325 = 0u;
                int32x4_t v326 = 0u;
                int32x4_t v327 = 0u;
                int32x4_t v328 = 0u;
              }
              uint64_t v188 = (uint64_t)v63->i64 + v72;
              unsigned int v189 = v64[1];
              if (v189 == 127)
              {
                int32x4_t v191 = *(int32x4_t *)v188;
                int32x4_t v28 = *(int32x4_t *)(v188 + 16);
                int32x4_t v192 = *(int32x4_t *)(v188 + 32);
                int32x4_t v193 = *(int32x4_t *)(v188 + 48);
                int32x4_t v194 = *(int32x4_t *)(v188 + 64);
                int32x4_t v195 = *(int32x4_t *)(v188 + 80);
                int32x4_t v196 = *(int32x4_t *)(v188 + 96);
                int32x4_t v197 = *(int32x4_t *)(v188 + 112);
                int16x8_t v333 = *(int16x8_t *)v188;
                int32x4_t v334 = v28;
                int32x4_t v335 = v194;
                int32x4_t v336 = v195;
                int32x4_t v341 = v192;
                int32x4_t v342 = v193;
                int32x4_t v343 = v196;
                int32x4_t v344 = v197;
                uint64_t v190 = 128;
              }
              else if (v189 == 3)
              {
                int32x4_t v191 = (int32x4_t)vld1q_dup_f32((const float *)v188);
                int16x8_t v333 = (int16x8_t)v191;
                int32x4_t v334 = v191;
                int32x4_t v335 = v191;
                int32x4_t v336 = v191;
                int32x4_t v341 = v191;
                int32x4_t v342 = v191;
                int32x4_t v343 = v191;
                int32x4_t v344 = v191;
                uint64_t v190 = 4;
              }
              else if (v64[1])
              {
                uint64_t v190 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v333, 128, v188, v189, v73, v28);
              }
              else
              {
                uint64_t v190 = 0;
                int32x4_t v191 = 0uLL;
                int32x4_t v335 = 0u;
                int32x4_t v336 = 0u;
                int16x8_t v333 = 0u;
                int32x4_t v334 = 0u;
                int32x4_t v341 = 0u;
                int32x4_t v342 = 0u;
                int32x4_t v343 = 0u;
                int32x4_t v344 = 0u;
              }
              uint64_t v198 = v188 + v190;
              unsigned int v199 = v64[2];
              if (v199 == 127)
              {
                int32x4_t v201 = *(int32x4_t *)v198;
                int32x4_t v28 = *(int32x4_t *)(v198 + 16);
                int32x4_t v202 = *(int32x4_t *)(v198 + 32);
                int32x4_t v203 = *(int32x4_t *)(v198 + 48);
                int32x4_t v204 = *(int32x4_t *)(v198 + 64);
                int32x4_t v205 = *(int32x4_t *)(v198 + 80);
                int32x4_t v206 = *(int32x4_t *)(v198 + 96);
                int32x4_t v207 = *(int32x4_t *)(v198 + 112);
                int16x8_t v321 = *(int16x8_t *)v198;
                int32x4_t v322 = v28;
                int32x4_t v323 = v204;
                int32x4_t v324 = v205;
                int32x4_t v329 = v202;
                int32x4_t v330 = v203;
                int32x4_t v331 = v206;
                int32x4_t v332 = v207;
                uint64_t v200 = 128;
              }
              else if (v199 == 3)
              {
                int32x4_t v201 = (int32x4_t)vld1q_dup_f32((const float *)v198);
                int16x8_t v321 = (int16x8_t)v201;
                int32x4_t v322 = v201;
                int32x4_t v323 = v201;
                int32x4_t v324 = v201;
                int32x4_t v329 = v201;
                int32x4_t v330 = v201;
                int32x4_t v331 = v201;
                int32x4_t v332 = v201;
                uint64_t v200 = 4;
              }
              else if (v64[2])
              {
                uint64_t v200 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 128, v198, v199, v191, v28);
              }
              else
              {
                uint64_t v200 = 0;
                int32x4_t v201 = 0uLL;
                int32x4_t v323 = 0u;
                int32x4_t v324 = 0u;
                int16x8_t v321 = 0u;
                int32x4_t v322 = 0u;
                int32x4_t v329 = 0u;
                int32x4_t v330 = 0u;
                int32x4_t v331 = 0u;
                int32x4_t v332 = 0u;
              }
              uint64_t v208 = v198 + v200;
              unsigned int v209 = v64[3];
              if (v209 == 127)
              {
                int32x4_t v211 = *(int32x4_t *)v208;
                int32x4_t v28 = *(int32x4_t *)(v208 + 16);
                int32x4_t v212 = *(int32x4_t *)(v208 + 32);
                int32x4_t v213 = *(int32x4_t *)(v208 + 48);
                int32x4_t v214 = *(int32x4_t *)(v208 + 64);
                int32x4_t v215 = *(int32x4_t *)(v208 + 80);
                int32x4_t v216 = *(int32x4_t *)(v208 + 96);
                int32x4_t v217 = *(int32x4_t *)(v208 + 112);
                int16x8_t v337 = *(int16x8_t *)v208;
                int32x4_t v338 = v28;
                int32x4_t v339 = v214;
                int32x4_t v340 = v215;
                int32x4_t v345 = v212;
                int32x4_t v346 = v213;
                int32x4_t v347 = v216;
                int32x4_t v348 = v217;
                uint64_t v210 = 128;
              }
              else if (v209 == 3)
              {
                int32x4_t v211 = (int32x4_t)vld1q_dup_f32((const float *)v208);
                int16x8_t v337 = (int16x8_t)v211;
                int32x4_t v338 = v211;
                int32x4_t v339 = v211;
                int32x4_t v340 = v211;
                int32x4_t v345 = v211;
                int32x4_t v346 = v211;
                int32x4_t v347 = v211;
                int32x4_t v348 = v211;
                uint64_t v210 = 4;
              }
              else if (v64[3])
              {
                uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v337, 128, v208, v209, v201, v28);
              }
              else
              {
                uint64_t v210 = 0;
                int32x4_t v211 = 0uLL;
                int32x4_t v339 = 0u;
                int32x4_t v340 = 0u;
                int16x8_t v337 = 0u;
                int32x4_t v338 = 0u;
                int32x4_t v345 = 0u;
                int32x4_t v346 = 0u;
                int32x4_t v347 = 0u;
                int32x4_t v348 = 0u;
              }
              uint64_t v218 = v208 + v210;
              unsigned int v219 = v64[4];
              if (v219 == 127)
              {
                int32x4_t v221 = *(int32x4_t *)v218;
                int32x4_t v28 = *(int32x4_t *)(v218 + 16);
                int32x4_t v222 = *(int32x4_t *)(v218 + 32);
                int32x4_t v223 = *(int32x4_t *)(v218 + 48);
                int32x4_t v224 = *(int32x4_t *)(v218 + 64);
                int32x4_t v225 = *(int32x4_t *)(v218 + 80);
                int32x4_t v226 = *(int32x4_t *)(v218 + 96);
                int32x4_t v227 = *(int32x4_t *)(v218 + 112);
                int16x8_t v349 = *(int16x8_t *)v218;
                int32x4_t v350 = v28;
                int32x4_t v351 = v224;
                int32x4_t v352 = v225;
                int32x4_t v357 = v222;
                int32x4_t v358 = v223;
                int32x4_t v359 = v226;
                int32x4_t v360 = v227;
                uint64_t v220 = 128;
              }
              else if (v219 == 3)
              {
                int32x4_t v221 = (int32x4_t)vld1q_dup_f32((const float *)v218);
                int16x8_t v349 = (int16x8_t)v221;
                int32x4_t v350 = v221;
                int32x4_t v351 = v221;
                int32x4_t v352 = v221;
                int32x4_t v357 = v221;
                int32x4_t v358 = v221;
                int32x4_t v359 = v221;
                int32x4_t v360 = v221;
                uint64_t v220 = 4;
              }
              else if (v64[4])
              {
                uint64_t v220 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v349, 128, v218, v219, v211, v28);
              }
              else
              {
                uint64_t v220 = 0;
                int32x4_t v221 = 0uLL;
                int32x4_t v351 = 0u;
                int32x4_t v352 = 0u;
                int16x8_t v349 = 0u;
                int32x4_t v350 = 0u;
                int32x4_t v357 = 0u;
                int32x4_t v358 = 0u;
                int32x4_t v359 = 0u;
                int32x4_t v360 = 0u;
              }
              uint64_t v228 = v218 + v220;
              unsigned int v229 = v64[5];
              if (v229 == 127)
              {
                int32x4_t v231 = *(int32x4_t *)v228;
                int32x4_t v28 = *(int32x4_t *)(v228 + 16);
                int32x4_t v232 = *(int32x4_t *)(v228 + 32);
                int32x4_t v233 = *(int32x4_t *)(v228 + 48);
                int32x4_t v234 = *(int32x4_t *)(v228 + 64);
                int32x4_t v235 = *(int32x4_t *)(v228 + 80);
                int32x4_t v236 = *(int32x4_t *)(v228 + 96);
                int32x4_t v237 = *(int32x4_t *)(v228 + 112);
                int16x8_t v365 = *(int16x8_t *)v228;
                int32x4_t v366 = v28;
                int32x4_t v367 = v234;
                int32x4_t v368 = v235;
                int32x4_t v373 = v232;
                int32x4_t v374 = v233;
                int32x4_t v375 = v236;
                int32x4_t v376 = v237;
                uint64_t v230 = 128;
              }
              else if (v229 == 3)
              {
                int32x4_t v231 = (int32x4_t)vld1q_dup_f32((const float *)v228);
                int16x8_t v365 = (int16x8_t)v231;
                int32x4_t v366 = v231;
                int32x4_t v367 = v231;
                int32x4_t v368 = v231;
                int32x4_t v373 = v231;
                int32x4_t v374 = v231;
                int32x4_t v375 = v231;
                int32x4_t v376 = v231;
                uint64_t v230 = 4;
              }
              else if (v64[5])
              {
                uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v365, 128, v228, v229, v221, v28);
              }
              else
              {
                uint64_t v230 = 0;
                int32x4_t v231 = 0uLL;
                int32x4_t v367 = 0u;
                int32x4_t v368 = 0u;
                int16x8_t v365 = 0u;
                int32x4_t v366 = 0u;
                int32x4_t v373 = 0u;
                int32x4_t v374 = 0u;
                int32x4_t v375 = 0u;
                int32x4_t v376 = 0u;
              }
              uint64_t v238 = v228 + v230;
              unsigned int v239 = v64[6];
              if (v239 == 127)
              {
                int32x4_t v241 = *(int32x4_t *)v238;
                int32x4_t v28 = *(int32x4_t *)(v238 + 16);
                int32x4_t v242 = *(int32x4_t *)(v238 + 32);
                int32x4_t v243 = *(int32x4_t *)(v238 + 48);
                int32x4_t v244 = *(int32x4_t *)(v238 + 64);
                int32x4_t v245 = *(int32x4_t *)(v238 + 80);
                int32x4_t v246 = *(int32x4_t *)(v238 + 96);
                int32x4_t v247 = *(int32x4_t *)(v238 + 112);
                int16x8_t v353 = *(int16x8_t *)v238;
                int32x4_t v354 = v28;
                int32x4_t v355 = v244;
                int32x4_t v356 = v245;
                int32x4_t v361 = v242;
                int32x4_t v362 = v243;
                int32x4_t v363 = v246;
                int32x4_t v364 = v247;
                uint64_t v240 = 128;
              }
              else if (v239 == 3)
              {
                int32x4_t v241 = (int32x4_t)vld1q_dup_f32((const float *)v238);
                int16x8_t v353 = (int16x8_t)v241;
                int32x4_t v354 = v241;
                int32x4_t v355 = v241;
                int32x4_t v356 = v241;
                int32x4_t v361 = v241;
                int32x4_t v362 = v241;
                int32x4_t v363 = v241;
                int32x4_t v364 = v241;
                uint64_t v240 = 4;
              }
              else if (v64[6])
              {
                uint64_t v240 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v353, 128, v238, v239, v231, v28);
              }
              else
              {
                uint64_t v240 = 0;
                int32x4_t v241 = 0uLL;
                int32x4_t v355 = 0u;
                int32x4_t v356 = 0u;
                int16x8_t v353 = 0u;
                int32x4_t v354 = 0u;
                int32x4_t v361 = 0u;
                int32x4_t v362 = 0u;
                int32x4_t v363 = 0u;
                int32x4_t v364 = 0u;
              }
              uint64_t v248 = v238 + v240;
              unsigned int v249 = v64[7];
              if (v249 == 127)
              {
                int32x4_t v25 = *(int32x4_t *)v248;
                int32x4_t v28 = *(int32x4_t *)(v248 + 16);
                int32x4_t v250 = *(int32x4_t *)(v248 + 32);
                int32x4_t v251 = *(int32x4_t *)(v248 + 48);
                int32x4_t v252 = *(int32x4_t *)(v248 + 64);
                int32x4_t v253 = *(int32x4_t *)(v248 + 80);
                int32x4_t v254 = *(int32x4_t *)(v248 + 96);
                int32x4_t v255 = *(int32x4_t *)(v248 + 112);
                int16x8_t v369 = *(int16x8_t *)v248;
                int32x4_t v370 = v28;
                int32x4_t v371 = v252;
                int32x4_t v372 = v253;
                int32x4_t v377 = v250;
                int32x4_t v378 = v251;
                int32x4_t v379 = v254;
                int32x4_t v380 = v255;
                uint64_t v16 = v303;
                unsigned int v33 = v31 + 1;
              }
              else
              {
                uint64_t v16 = v303;
                unsigned int v33 = v31 + 1;
                if (v249 == 3)
                {
                  int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v248);
                  int16x8_t v369 = (int16x8_t)v25;
                  int32x4_t v370 = v25;
                  int32x4_t v371 = v25;
                  int32x4_t v372 = v25;
                  int32x4_t v377 = v25;
                  int32x4_t v378 = v25;
                  int32x4_t v379 = v25;
                  int32x4_t v380 = v25;
                }
                else if (v249)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v369, 128, v248, v249, v241, v28);
                }
                else
                {
                  int32x4_t v25 = 0uLL;
                  int32x4_t v371 = 0u;
                  int32x4_t v372 = 0u;
                  int16x8_t v369 = 0u;
                  int32x4_t v370 = 0u;
                  int32x4_t v377 = 0u;
                  int32x4_t v378 = 0u;
                  int32x4_t v379 = 0u;
                  int32x4_t v380 = 0u;
                }
              }
              unint64_t v256 = v312;
              if (v312)
              {
                unint64_t v257 = 0;
                unsigned int v258 = &v317 + 8 * (unint64_t)v310 + v311;
                unsigned int v259 = v313;
                do
                {
                  if (v259)
                  {
                    uint64_t v260 = 0;
                    uint64_t v261 = v308 + v309 * v257;
                    do
                    {
                      *(unsigned char *)(v261 + v260) = v258->i8[v260];
                      ++v260;
                      unsigned int v259 = v313;
                    }
                    while (16 * (unint64_t)v313 > v260);
                    unint64_t v256 = v312;
                  }
                  ++v257;
                  v258 += 8;
                }
                while (v257 < v256);
              }
            }
          }
          else
          {
            unsigned int v67 = *v64;
            if (v67 == 127)
            {
              int32x4_t v69 = *v63;
              int32x4_t v28 = v63[1];
              int32x4_t v75 = v63[2];
              int32x4_t v76 = v63[3];
              int32x4_t v77 = v63[4];
              int32x4_t v78 = v63[5];
              int32x4_t v79 = v63[6];
              int32x4_t v80 = v63[7];
              uint64_t v26 = a11;
              *(int32x4_t *)uint64_t v65 = *v63;
              *(int32x4_t *)(v65 + 16) = v28;
              int v81 = (int32x4_t *)(v65 + a11);
              *(int32x4_t *)(v65 + 32) = v77;
              *(int32x4_t *)(v65 + 48) = v78;
              *int v81 = v75;
              v81[1] = v76;
              BOOL v82 = (int32x4_t *)(v65 + a11 + 32);
              int32x4_t *v82 = v79;
              v82[1] = v80;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v26 = a11;
              if (v67 == 3)
              {
                int32x4_t v69 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                *(int32x4_t *)uint64_t v65 = v69;
                *(int32x4_t *)(v65 + 16) = v69;
                *(int32x4_t *)(v65 + 32) = v69;
                *(int32x4_t *)(v65 + 48) = v69;
                BOOL v74 = (int32x4_t *)(v65 + a11);
                *BOOL v74 = v69;
                v74[1] = v69;
                v74[2] = v69;
                v74[3] = v69;
                uint64_t v68 = 4;
              }
              else if (*v64)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v65, a11, (uint64_t)v63, v67, v25, v28);
              }
              else
              {
                uint64_t v68 = 0;
                int32x4_t v69 = 0uLL;
                *(_OWORD *)(v65 + 32) = 0u;
                *(_OWORD *)(v65 + 48) = 0u;
                *(_OWORD *)uint64_t v65 = 0u;
                *(_OWORD *)(v65 + 16) = 0u;
                unsigned int v70 = (_OWORD *)(v65 + a11);
                v70[2] = 0u;
                v70[3] = 0u;
                *unsigned int v70 = 0u;
                v70[1] = 0u;
              }
            }
            uint64_t v83 = (uint64_t)v63->i64 + v68;
            uint64_t v84 = (int32x4_t *)(v65 + v287);
            unsigned int v85 = v64[1];
            if (v85 == 127)
            {
              int32x4_t v87 = *(int32x4_t *)v83;
              int32x4_t v28 = *(int32x4_t *)(v83 + 16);
              long long v90 = *(_OWORD *)(v83 + 32);
              long long v91 = *(_OWORD *)(v83 + 48);
              int32x4_t v92 = *(int32x4_t *)(v83 + 64);
              int32x4_t v93 = *(int32x4_t *)(v83 + 80);
              long long v94 = *(_OWORD *)(v83 + 96);
              long long v95 = *(_OWORD *)(v83 + 112);
              *uint64_t v84 = *(int32x4_t *)v83;
              v84[1] = v28;
              int32x4_t v96 = &v84->i8[v26];
              v84[2] = v92;
              v84[3] = v93;
              *(_OWORD *)int32x4_t v96 = v90;
              *((_OWORD *)v96 + 1) = v91;
              int32x4_t v97 = &v84[2].i8[v26];
              *(_OWORD *)int32x4_t v97 = v94;
              *((_OWORD *)v97 + 1) = v95;
              uint64_t v86 = 128;
            }
            else if (v85 == 3)
            {
              int32x4_t v87 = (int32x4_t)vld1q_dup_f32((const float *)v83);
              *uint64_t v84 = v87;
              v84[1] = v87;
              v84[2] = v87;
              v84[3] = v87;
              unint64_t v89 = (int32x4_t *)((char *)v84 + v26);
              *unint64_t v89 = v87;
              v89[1] = v87;
              v89[2] = v87;
              v89[3] = v87;
              uint64_t v86 = 4;
            }
            else if (v64[1])
            {
              uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v65 + v287), v26, v83, v85, v69, v28);
            }
            else
            {
              uint64_t v86 = 0;
              int32x4_t v87 = 0uLL;
              v84[2] = 0u;
              v84[3] = 0u;
              *uint64_t v84 = 0u;
              v84[1] = 0u;
              int32x4_t v88 = &v84->i8[v26];
              *((_OWORD *)v88 + 2) = 0u;
              *((_OWORD *)v88 + 3) = 0u;
              *(_OWORD *)int32x4_t v88 = 0u;
              *((_OWORD *)v88 + 1) = 0u;
            }
            uint64_t v98 = v83 + v86;
            int32x4_t v99 = (int16x8_t *)(v65 + 64);
            unsigned int v100 = v64[2];
            if (v100 == 127)
            {
              int32x4_t v102 = *(int32x4_t *)v98;
              int32x4_t v28 = *(int32x4_t *)(v98 + 16);
              long long v105 = *(_OWORD *)(v98 + 32);
              long long v106 = *(_OWORD *)(v98 + 48);
              long long v107 = *(_OWORD *)(v98 + 64);
              long long v108 = *(_OWORD *)(v98 + 80);
              long long v109 = *(_OWORD *)(v98 + 96);
              long long v110 = *(_OWORD *)(v98 + 112);
              int16x8_t *v99 = *(int16x8_t *)v98;
              *(int32x4_t *)(v65 + 80) = v28;
              int32x4_t v111 = &v99->i8[v26];
              *(_OWORD *)(v65 + 96) = v107;
              *(_OWORD *)(v65 + 112) = v108;
              *(_OWORD *)int32x4_t v111 = v105;
              *((_OWORD *)v111 + 1) = v106;
              v111 += 32;
              *(_OWORD *)int32x4_t v111 = v109;
              *((_OWORD *)v111 + 1) = v110;
              uint64_t v101 = 128;
            }
            else if (v100 == 3)
            {
              int32x4_t v102 = (int32x4_t)vld1q_dup_f32((const float *)v98);
              *(int32x4_t *)(v65 + 64) = v102;
              *(int32x4_t *)(v65 + 80) = v102;
              *(int32x4_t *)(v65 + 96) = v102;
              *(int32x4_t *)(v65 + 112) = v102;
              unsigned int v104 = (int32x4_t *)&v99->i8[v26];
              int32x4_t *v104 = v102;
              v104[1] = v102;
              v104[2] = v102;
              v104[3] = v102;
              uint64_t v101 = 4;
            }
            else if (v64[2])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v99, v26, v98, v100, v87, v28);
            }
            else
            {
              uint64_t v101 = 0;
              int32x4_t v102 = 0uLL;
              *(_OWORD *)(v65 + 96) = 0u;
              *(_OWORD *)(v65 + 112) = 0u;
              int16x8_t *v99 = 0u;
              *(_OWORD *)(v65 + 80) = 0u;
              BOOL v103 = &v99->i8[v26];
              *((_OWORD *)v103 + 2) = 0u;
              *((_OWORD *)v103 + 3) = 0u;
              *(_OWORD *)BOOL v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            uint64_t v112 = v98 + v101;
            long long v113 = (int16x8_t *)&v84[4];
            unsigned int v114 = v64[3];
            if (v114 == 127)
            {
              int32x4_t v116 = *(int32x4_t *)v112;
              int32x4_t v28 = *(int32x4_t *)(v112 + 16);
              long long v119 = *(_OWORD *)(v112 + 32);
              long long v120 = *(_OWORD *)(v112 + 48);
              int32x4_t v121 = *(int32x4_t *)(v112 + 64);
              int32x4_t v122 = *(int32x4_t *)(v112 + 80);
              long long v123 = *(_OWORD *)(v112 + 96);
              long long v124 = *(_OWORD *)(v112 + 112);
              int16x8_t *v113 = *(int16x8_t *)v112;
              v84[5] = v28;
              long long v125 = &v113->i8[v26];
              v84[6] = v121;
              v84[7] = v122;
              *(_OWORD *)long long v125 = v119;
              *((_OWORD *)v125 + 1) = v120;
              v125 += 32;
              *(_OWORD *)long long v125 = v123;
              *((_OWORD *)v125 + 1) = v124;
              uint64_t v115 = 128;
            }
            else if (v114 == 3)
            {
              int32x4_t v116 = (int32x4_t)vld1q_dup_f32((const float *)v112);
              v84[4] = v116;
              v84[5] = v116;
              v84[6] = v116;
              v84[7] = v116;
              int8x8_t v118 = (int32x4_t *)&v113->i8[v26];
              *int8x8_t v118 = v116;
              v118[1] = v116;
              v118[2] = v116;
              v118[3] = v116;
              uint64_t v115 = 4;
            }
            else if (v64[3])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v113, v26, v112, v114, v102, v28);
            }
            else
            {
              uint64_t v115 = 0;
              int32x4_t v116 = 0uLL;
              v84[6] = 0u;
              v84[7] = 0u;
              int16x8_t *v113 = 0u;
              v84[5] = 0u;
              uint64_t v117 = &v113->i8[v26];
              *((_OWORD *)v117 + 2) = 0u;
              *((_OWORD *)v117 + 3) = 0u;
              *(_OWORD *)uint64_t v117 = 0u;
              *((_OWORD *)v117 + 1) = 0u;
            }
            uint64_t v126 = v112 + v115;
            long long v127 = (int32x4_t *)(v65 + v286);
            unsigned int v128 = v64[4];
            if (v128 == 127)
            {
              int32x4_t v130 = *(int32x4_t *)v126;
              int32x4_t v28 = *(int32x4_t *)(v126 + 16);
              long long v133 = *(_OWORD *)(v126 + 32);
              long long v134 = *(_OWORD *)(v126 + 48);
              int32x4_t v135 = *(int32x4_t *)(v126 + 64);
              int32x4_t v136 = *(int32x4_t *)(v126 + 80);
              long long v137 = *(_OWORD *)(v126 + 96);
              long long v138 = *(_OWORD *)(v126 + 112);
              int32x4_t *v127 = *(int32x4_t *)v126;
              v127[1] = v28;
              long long v139 = &v127->i8[v26];
              v127[2] = v135;
              v127[3] = v136;
              *(_OWORD *)long long v139 = v133;
              *((_OWORD *)v139 + 1) = v134;
              int32x4_t v140 = &v127[2].i8[v26];
              *(_OWORD *)int32x4_t v140 = v137;
              *((_OWORD *)v140 + 1) = v138;
              uint64_t v129 = 128;
            }
            else if (v128 == 3)
            {
              int32x4_t v130 = (int32x4_t)vld1q_dup_f32((const float *)v126);
              int32x4_t *v127 = v130;
              v127[1] = v130;
              v127[2] = v130;
              v127[3] = v130;
              uint64_t v132 = (int32x4_t *)((char *)v127 + v26);
              *uint64_t v132 = v130;
              v132[1] = v130;
              v132[2] = v130;
              v132[3] = v130;
              uint64_t v129 = 4;
            }
            else if (v64[4])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v65 + v286), v26, v126, v128, v116, v28);
            }
            else
            {
              uint64_t v129 = 0;
              int32x4_t v130 = 0uLL;
              v127[2] = 0u;
              v127[3] = 0u;
              int32x4_t *v127 = 0u;
              v127[1] = 0u;
              uint64_t v131 = &v127->i8[v26];
              *((_OWORD *)v131 + 2) = 0u;
              *((_OWORD *)v131 + 3) = 0u;
              *(_OWORD *)uint64_t v131 = 0u;
              *((_OWORD *)v131 + 1) = 0u;
            }
            uint64_t v141 = v126 + v129;
            uint64_t v142 = v65 + 6 * a11;
            unsigned int v143 = v64[5];
            if (v143 == 127)
            {
              int32x4_t v145 = *(int32x4_t *)v141;
              int32x4_t v28 = *(int32x4_t *)(v141 + 16);
              long long v148 = *(_OWORD *)(v141 + 32);
              long long v149 = *(_OWORD *)(v141 + 48);
              long long v150 = *(_OWORD *)(v141 + 64);
              long long v151 = *(_OWORD *)(v141 + 80);
              long long v152 = *(_OWORD *)(v141 + 96);
              long long v153 = *(_OWORD *)(v141 + 112);
              *(_OWORD *)uint64_t v142 = *(_OWORD *)v141;
              *(int32x4_t *)(v142 + 16) = v28;
              int32x4_t v154 = (_OWORD *)(v142 + v26);
              *(_OWORD *)(v142 + 32) = v150;
              *(_OWORD *)(v142 + 48) = v151;
              *int32x4_t v154 = v148;
              v154[1] = v149;
              int32x4_t v155 = (_OWORD *)(v142 + v26 + 32);
              *int32x4_t v155 = v152;
              v155[1] = v153;
              uint64_t v144 = 128;
            }
            else if (v143 == 3)
            {
              int32x4_t v145 = (int32x4_t)vld1q_dup_f32((const float *)v141);
              *(int32x4_t *)uint64_t v142 = v145;
              *(int32x4_t *)(v142 + 16) = v145;
              *(int32x4_t *)(v142 + 32) = v145;
              *(int32x4_t *)(v142 + 48) = v145;
              unsigned int v147 = (int32x4_t *)(v142 + v26);
              int32x4_t *v147 = v145;
              v147[1] = v145;
              v147[2] = v145;
              v147[3] = v145;
              uint64_t v144 = 4;
            }
            else if (v64[5])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v142, v26, v141, v143, v130, v28);
            }
            else
            {
              uint64_t v144 = 0;
              int32x4_t v145 = 0uLL;
              *(_OWORD *)(v142 + 32) = 0u;
              *(_OWORD *)(v142 + 48) = 0u;
              *(_OWORD *)uint64_t v142 = 0u;
              *(_OWORD *)(v142 + 16) = 0u;
              uint64_t v146 = (_OWORD *)(v142 + v26);
              v146[2] = 0u;
              v146[3] = 0u;
              *uint64_t v146 = 0u;
              v146[1] = 0u;
            }
            uint64_t v156 = v141 + v144;
            long long v157 = (int16x8_t *)&v127[4];
            unsigned int v158 = v64[6];
            if (v158 == 127)
            {
              int32x4_t v160 = *(int32x4_t *)v156;
              int32x4_t v28 = *(int32x4_t *)(v156 + 16);
              long long v163 = *(_OWORD *)(v156 + 32);
              long long v164 = *(_OWORD *)(v156 + 48);
              int32x4_t v165 = *(int32x4_t *)(v156 + 64);
              int32x4_t v166 = *(int32x4_t *)(v156 + 80);
              long long v167 = *(_OWORD *)(v156 + 96);
              long long v168 = *(_OWORD *)(v156 + 112);
              *long long v157 = *(int16x8_t *)v156;
              v127[5] = v28;
              long long v169 = &v157->i8[v26];
              v127[6] = v165;
              v127[7] = v166;
              *(_OWORD *)long long v169 = v163;
              *((_OWORD *)v169 + 1) = v164;
              v169 += 32;
              *(_OWORD *)long long v169 = v167;
              *((_OWORD *)v169 + 1) = v168;
              uint64_t v159 = 128;
            }
            else if (v158 == 3)
            {
              int32x4_t v160 = (int32x4_t)vld1q_dup_f32((const float *)v156);
              v127[4] = v160;
              v127[5] = v160;
              v127[6] = v160;
              v127[7] = v160;
              unsigned int v162 = (int32x4_t *)&v157->i8[v26];
              *unsigned int v162 = v160;
              v162[1] = v160;
              v162[2] = v160;
              v162[3] = v160;
              uint64_t v159 = 4;
            }
            else if (v64[6])
            {
              uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v157, v26, v156, v158, v145, v28);
            }
            else
            {
              uint64_t v159 = 0;
              int32x4_t v160 = 0uLL;
              v127[6] = 0u;
              v127[7] = 0u;
              *long long v157 = 0u;
              v127[5] = 0u;
              uint64_t v161 = &v157->i8[v26];
              *((_OWORD *)v161 + 2) = 0u;
              *((_OWORD *)v161 + 3) = 0u;
              *(_OWORD *)uint64_t v161 = 0u;
              *((_OWORD *)v161 + 1) = 0u;
            }
            unsigned int v33 = v31 + 1;
            uint64_t v170 = v156 + v159;
            long long v171 = (int16x8_t *)(v142 + 64);
            unsigned int v172 = v64[7];
            if (v172 == 127)
            {
              int32x4_t v25 = *(int32x4_t *)v170;
              int32x4_t v28 = *(int32x4_t *)(v170 + 16);
              long long v175 = *(_OWORD *)(v170 + 32);
              long long v176 = *(_OWORD *)(v170 + 48);
              long long v177 = *(_OWORD *)(v170 + 64);
              long long v178 = *(_OWORD *)(v170 + 80);
              long long v179 = *(_OWORD *)(v170 + 96);
              long long v180 = *(_OWORD *)(v170 + 112);
              *long long v171 = *(int16x8_t *)v170;
              *(int32x4_t *)(v142 + 80) = v28;
              int v181 = &v171->i8[v26];
              *(_OWORD *)(v142 + 96) = v177;
              *(_OWORD *)(v142 + 112) = v178;
              *(_OWORD *)int v181 = v175;
              *((_OWORD *)v181 + 1) = v176;
              v181 += 32;
              *(_OWORD *)int v181 = v179;
              *((_OWORD *)v181 + 1) = v180;
              a7 = v293;
              uint64_t v16 = v303;
            }
            else
            {
              uint64_t v16 = v303;
              if (v172 == 3)
              {
                int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v170);
                *(int32x4_t *)(v142 + 64) = v25;
                *(int32x4_t *)(v142 + 80) = v25;
                *(int32x4_t *)(v142 + 96) = v25;
                *(int32x4_t *)(v142 + 112) = v25;
                int v174 = (int32x4_t *)&v171->i8[v26];
                *int v174 = v25;
                v174[1] = v25;
                v174[2] = v25;
                v174[3] = v25;
              }
              else if (v172)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v26, v170, v172, v160, v28);
              }
              else
              {
                int32x4_t v25 = 0uLL;
                *(_OWORD *)(v142 + 96) = 0u;
                *(_OWORD *)(v142 + 112) = 0u;
                *long long v171 = 0u;
                *(_OWORD *)(v142 + 80) = 0u;
                uint64_t v173 = &v171->i8[v26];
                *((_OWORD *)v173 + 2) = 0u;
                *((_OWORD *)v173 + 3) = 0u;
                *(_OWORD *)uint64_t v173 = 0u;
                *((_OWORD *)v173 + 1) = 0u;
              }
              a7 = v293;
            }
          }
          BOOL v21 = v31 == v294 >> 3;
          unsigned int v31 = v33;
        }
        while (!v21);
        BOOL v21 = v17++ == v285;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v381 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v302 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v283 = a8 + a10 - 1;
  unsigned int v285 = v283 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v296 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v285)
  {
    unsigned int v294 = a7 + a9 - 1;
    unsigned int v282 = a7 >> 3;
    if (a7 >> 3 <= v294 >> 3)
    {
      uint64_t v26 = a11;
      unsigned int v279 = a5 - 1;
      unsigned int v305 = (a5 - 1) >> 3;
      int v304 = ((a5 - 1) & 7) + 1;
      int v280 = ((a6 - 1) & 7) + 1;
      unsigned int v281 = (a6 - 1) >> 3;
      uint64_t v286 = 4 * a11;
      uint64_t v287 = 2 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v28.i64[1] = -1;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 3uLL)))))));
      *(int8x8_t *)v25.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v27));
      __int32 v292 = v25.i32[0] | v25.i32[1];
      BOOL v290 = v25.i32[1] != 0;
      uint64_t v291 = v25.i64[0];
      BOOL v289 = v25.i32[0] != 0;
      unint64_t v278 = 8 * v19 * (unint64_t)v18;
      unsigned int v293 = a7;
      uint64_t v303 = v16;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v302) {
          int v30 = v302;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v282;
        if (v283 < v29) {
          unsigned int v29 = v283;
        }
        unsigned int v301 = 8 * v17;
        int v288 = v30 - 8 * v17;
        int v300 = v29 - v30 + 1;
        int v32 = v280;
        if (v17 != v281) {
          int v32 = 8;
        }
        unsigned int v306 = v32;
        uint64_t v299 = a2 + (v30 - v302) * v26;
        do
        {
          unsigned int v34 = 8 * v31;
          unsigned int v35 = 8 * (v31 + 1) - 1;
          if (8 * v31 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 8 * v31;
          }
          if (v294 < v35) {
            unsigned int v35 = v294;
          }
          int v37 = v35 - v36 + 1;
          if (v31 == v305) {
            unsigned int v38 = v304;
          }
          else {
            unsigned int v38 = 8;
          }
          BOOL v39 = 1;
          if (v301 >= v302 && v34 >= a7)
          {
            int v40 = v304;
            if (v31 != v305) {
              int v40 = 8;
            }
            BOOL v39 = v37 != v40 || v300 != v306;
          }
          if (isLevelTiled)
          {
            unsigned int v262 = 0;
            uint64_t v263 = v278 >> (*(unsigned char *)(v16 + 57) != 0);
            char v264 = 1;
            if (v263 > 127)
            {
              if (v263 > 511)
              {
                if (v263 == 512)
                {
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v262 = 16;
                  unsigned int v266 = 16;
                }
                else
                {
                  char v265 = 1;
                  unsigned int v266 = 0;
                  if (v263 == 1024)
                  {
                    char v264 = 0;
                    unsigned int v266 = 8;
                    unsigned int v262 = 16;
                  }
                }
              }
              else if (v263 == 128)
              {
                char v264 = 0;
                char v265 = 0;
                unsigned int v262 = 32;
                unsigned int v266 = 32;
              }
              else
              {
                char v265 = 1;
                unsigned int v266 = 0;
                if (v263 == 256)
                {
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v266 = 16;
                  unsigned int v262 = 32;
                }
              }
            }
            else
            {
              char v265 = 1;
              unsigned int v266 = 0;
              switch(v263)
              {
                case 4:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v266 = 128;
                  unsigned int v262 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v262 = 128;
                  unsigned int v266 = 128;
                  break;
                case 16:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v266 = 64;
                  unsigned int v262 = 128;
                  break;
                case 32:
                  char v264 = 0;
                  char v265 = 0;
                  unsigned int v262 = 64;
                  unsigned int v266 = 64;
                  break;
                default:
                  if (v263 == 64)
                  {
                    char v264 = 0;
                    char v265 = 0;
                    unsigned int v266 = 32;
                    unsigned int v262 = 64;
                  }
                  break;
              }
            }
            unsigned int v267 = (v262 >> 3) - 1;
            if (v264) {
              unsigned int v268 = 0;
            }
            else {
              unsigned int v268 = 32 - __clz(~(-1 << -(char)__clz(v267)));
            }
            unsigned int v269 = (v266 >> 3) - 1;
            if (v265)
            {
              unsigned int v270 = 0;
              if (v268) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v270 = 32 - __clz(~(-1 << -(char)__clz(v269)));
              if (v270 | v268)
              {
LABEL_233:
                int v271 = 0;
                uint64_t v272 = 0;
                int v273 = v31 & v267;
                int v274 = v17 & v269;
                BOOL v275 = v268 != 0;
                BOOL v276 = v270 != 0;
                int v277 = 1;
                do
                {
                  --v268;
                  if (v275) {
                    v272 |= (unint64_t)(v277 & v273) << v271++;
                  }
                  else {
                    unsigned int v268 = 0;
                  }
                  --v270;
                  if (v276) {
                    v272 |= (unint64_t)(v277 & v274) << v271++;
                  }
                  else {
                    unsigned int v270 = 0;
                  }
                  v277 *= 2;
                  --v271;
                  BOOL v276 = v270 != 0;
                  BOOL v275 = v268 != 0;
                }
                while (v270 | v268);
                goto LABEL_245;
              }
            }
            uint64_t v272 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v262 + v301 / v266 * ((v262 + v279) / v262)) << 14) + (v272 << 10);
            goto LABEL_59;
          }
          if (v292)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v290;
            BOOL v46 = v289;
            int v47 = HIDWORD(v291);
            int v48 = v291;
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v31) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 10;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v31) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(a3 + v49);
          if (v296)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int32x4_t *)__dst;
          }
          int v64 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v65 = v299 + 16 * (v36 - a7);
          char v66 = v38 < 8 || v39;
          if ((v66 & 1) != 0 || v306 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v303;
            block[5] = v63;
            char v314 = v38;
            char v315 = v306;
            unsigned int v310 = v288;
            unsigned int v311 = v36 - v34;
            block[6] = v64;
            uint64_t v308 = v65;
            uint64_t v26 = a11;
            uint64_t v309 = a11;
            unsigned int v312 = v300;
            unsigned int v313 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v303 + 8) + 7384), block);
              a7 = v293;
              uint64_t v16 = v303;
              unsigned int v33 = v31 + 1;
            }
            else
            {
              unsigned int v71 = *v64;
              a7 = v293;
              if (v71 == 127)
              {
                int32x4_t v73 = *v63;
                int32x4_t v28 = v63[1];
                int32x4_t v182 = v63[2];
                int32x4_t v183 = v63[3];
                int32x4_t v184 = v63[4];
                int32x4_t v185 = v63[5];
                int32x4_t v186 = v63[6];
                int32x4_t v187 = v63[7];
                int16x8_t v317 = *(int16x8_t *)v63;
                int32x4_t v318 = v28;
                int32x4_t v319 = v184;
                int32x4_t v320 = v185;
                int32x4_t v325 = v182;
                int32x4_t v326 = v183;
                int32x4_t v327 = v186;
                int32x4_t v328 = v187;
                uint64_t v72 = 128;
              }
              else if (v71 == 3)
              {
                int32x4_t v73 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                int16x8_t v317 = (int16x8_t)v73;
                int32x4_t v318 = v73;
                int32x4_t v319 = v73;
                int32x4_t v320 = v73;
                int32x4_t v325 = v73;
                int32x4_t v326 = v73;
                int32x4_t v327 = v73;
                int32x4_t v328 = v73;
                uint64_t v72 = 4;
              }
              else if (*v64)
              {
                uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v317, 128, (uint64_t)v63, v71, v25, v28);
              }
              else
              {
                uint64_t v72 = 0;
                int32x4_t v73 = 0uLL;
                int32x4_t v320 = 0u;
                int32x4_t v319 = 0u;
                int32x4_t v318 = 0u;
                int16x8_t v317 = 0u;
                int32x4_t v325 = 0u;
                int32x4_t v326 = 0u;
                int32x4_t v327 = 0u;
                int32x4_t v328 = 0u;
              }
              uint64_t v188 = (uint64_t)v63->i64 + v72;
              unsigned int v189 = v64[1];
              if (v189 == 127)
              {
                int32x4_t v191 = *(int32x4_t *)v188;
                int32x4_t v28 = *(int32x4_t *)(v188 + 16);
                int32x4_t v192 = *(int32x4_t *)(v188 + 32);
                int32x4_t v193 = *(int32x4_t *)(v188 + 48);
                int32x4_t v194 = *(int32x4_t *)(v188 + 64);
                int32x4_t v195 = *(int32x4_t *)(v188 + 80);
                int32x4_t v196 = *(int32x4_t *)(v188 + 96);
                int32x4_t v197 = *(int32x4_t *)(v188 + 112);
                int16x8_t v333 = *(int16x8_t *)v188;
                int32x4_t v334 = v28;
                int32x4_t v335 = v194;
                int32x4_t v336 = v195;
                int32x4_t v341 = v192;
                int32x4_t v342 = v193;
                int32x4_t v343 = v196;
                int32x4_t v344 = v197;
                uint64_t v190 = 128;
              }
              else if (v189 == 3)
              {
                int32x4_t v191 = (int32x4_t)vld1q_dup_f32((const float *)v188);
                int16x8_t v333 = (int16x8_t)v191;
                int32x4_t v334 = v191;
                int32x4_t v335 = v191;
                int32x4_t v336 = v191;
                int32x4_t v341 = v191;
                int32x4_t v342 = v191;
                int32x4_t v343 = v191;
                int32x4_t v344 = v191;
                uint64_t v190 = 4;
              }
              else if (v64[1])
              {
                uint64_t v190 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v333, 128, v188, v189, v73, v28);
              }
              else
              {
                uint64_t v190 = 0;
                int32x4_t v191 = 0uLL;
                int32x4_t v335 = 0u;
                int32x4_t v336 = 0u;
                int16x8_t v333 = 0u;
                int32x4_t v334 = 0u;
                int32x4_t v341 = 0u;
                int32x4_t v342 = 0u;
                int32x4_t v343 = 0u;
                int32x4_t v344 = 0u;
              }
              uint64_t v198 = v188 + v190;
              unsigned int v199 = v64[2];
              if (v199 == 127)
              {
                int32x4_t v201 = *(int32x4_t *)v198;
                int32x4_t v28 = *(int32x4_t *)(v198 + 16);
                int32x4_t v202 = *(int32x4_t *)(v198 + 32);
                int32x4_t v203 = *(int32x4_t *)(v198 + 48);
                int32x4_t v204 = *(int32x4_t *)(v198 + 64);
                int32x4_t v205 = *(int32x4_t *)(v198 + 80);
                int32x4_t v206 = *(int32x4_t *)(v198 + 96);
                int32x4_t v207 = *(int32x4_t *)(v198 + 112);
                int16x8_t v321 = *(int16x8_t *)v198;
                int32x4_t v322 = v28;
                int32x4_t v323 = v204;
                int32x4_t v324 = v205;
                int32x4_t v329 = v202;
                int32x4_t v330 = v203;
                int32x4_t v331 = v206;
                int32x4_t v332 = v207;
                uint64_t v200 = 128;
              }
              else if (v199 == 3)
              {
                int32x4_t v201 = (int32x4_t)vld1q_dup_f32((const float *)v198);
                int16x8_t v321 = (int16x8_t)v201;
                int32x4_t v322 = v201;
                int32x4_t v323 = v201;
                int32x4_t v324 = v201;
                int32x4_t v329 = v201;
                int32x4_t v330 = v201;
                int32x4_t v331 = v201;
                int32x4_t v332 = v201;
                uint64_t v200 = 4;
              }
              else if (v64[2])
              {
                uint64_t v200 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 128, v198, v199, v191, v28);
              }
              else
              {
                uint64_t v200 = 0;
                int32x4_t v201 = 0uLL;
                int32x4_t v323 = 0u;
                int32x4_t v324 = 0u;
                int16x8_t v321 = 0u;
                int32x4_t v322 = 0u;
                int32x4_t v329 = 0u;
                int32x4_t v330 = 0u;
                int32x4_t v331 = 0u;
                int32x4_t v332 = 0u;
              }
              uint64_t v208 = v198 + v200;
              unsigned int v209 = v64[3];
              if (v209 == 127)
              {
                int32x4_t v211 = *(int32x4_t *)v208;
                int32x4_t v28 = *(int32x4_t *)(v208 + 16);
                int32x4_t v212 = *(int32x4_t *)(v208 + 32);
                int32x4_t v213 = *(int32x4_t *)(v208 + 48);
                int32x4_t v214 = *(int32x4_t *)(v208 + 64);
                int32x4_t v215 = *(int32x4_t *)(v208 + 80);
                int32x4_t v216 = *(int32x4_t *)(v208 + 96);
                int32x4_t v217 = *(int32x4_t *)(v208 + 112);
                int16x8_t v337 = *(int16x8_t *)v208;
                int32x4_t v338 = v28;
                int32x4_t v339 = v214;
                int32x4_t v340 = v215;
                int32x4_t v345 = v212;
                int32x4_t v346 = v213;
                int32x4_t v347 = v216;
                int32x4_t v348 = v217;
                uint64_t v210 = 128;
              }
              else if (v209 == 3)
              {
                int32x4_t v211 = (int32x4_t)vld1q_dup_f32((const float *)v208);
                int16x8_t v337 = (int16x8_t)v211;
                int32x4_t v338 = v211;
                int32x4_t v339 = v211;
                int32x4_t v340 = v211;
                int32x4_t v345 = v211;
                int32x4_t v346 = v211;
                int32x4_t v347 = v211;
                int32x4_t v348 = v211;
                uint64_t v210 = 4;
              }
              else if (v64[3])
              {
                uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v337, 128, v208, v209, v201, v28);
              }
              else
              {
                uint64_t v210 = 0;
                int32x4_t v211 = 0uLL;
                int32x4_t v339 = 0u;
                int32x4_t v340 = 0u;
                int16x8_t v337 = 0u;
                int32x4_t v338 = 0u;
                int32x4_t v345 = 0u;
                int32x4_t v346 = 0u;
                int32x4_t v347 = 0u;
                int32x4_t v348 = 0u;
              }
              uint64_t v218 = v208 + v210;
              unsigned int v219 = v64[4];
              if (v219 == 127)
              {
                int32x4_t v221 = *(int32x4_t *)v218;
                int32x4_t v28 = *(int32x4_t *)(v218 + 16);
                int32x4_t v222 = *(int32x4_t *)(v218 + 32);
                int32x4_t v223 = *(int32x4_t *)(v218 + 48);
                int32x4_t v224 = *(int32x4_t *)(v218 + 64);
                int32x4_t v225 = *(int32x4_t *)(v218 + 80);
                int32x4_t v226 = *(int32x4_t *)(v218 + 96);
                int32x4_t v227 = *(int32x4_t *)(v218 + 112);
                int16x8_t v349 = *(int16x8_t *)v218;
                int32x4_t v350 = v28;
                int32x4_t v351 = v224;
                int32x4_t v352 = v225;
                int32x4_t v357 = v222;
                int32x4_t v358 = v223;
                int32x4_t v359 = v226;
                int32x4_t v360 = v227;
                uint64_t v220 = 128;
              }
              else if (v219 == 3)
              {
                int32x4_t v221 = (int32x4_t)vld1q_dup_f32((const float *)v218);
                int16x8_t v349 = (int16x8_t)v221;
                int32x4_t v350 = v221;
                int32x4_t v351 = v221;
                int32x4_t v352 = v221;
                int32x4_t v357 = v221;
                int32x4_t v358 = v221;
                int32x4_t v359 = v221;
                int32x4_t v360 = v221;
                uint64_t v220 = 4;
              }
              else if (v64[4])
              {
                uint64_t v220 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v349, 128, v218, v219, v211, v28);
              }
              else
              {
                uint64_t v220 = 0;
                int32x4_t v221 = 0uLL;
                int32x4_t v351 = 0u;
                int32x4_t v352 = 0u;
                int16x8_t v349 = 0u;
                int32x4_t v350 = 0u;
                int32x4_t v357 = 0u;
                int32x4_t v358 = 0u;
                int32x4_t v359 = 0u;
                int32x4_t v360 = 0u;
              }
              uint64_t v228 = v218 + v220;
              unsigned int v229 = v64[5];
              if (v229 == 127)
              {
                int32x4_t v231 = *(int32x4_t *)v228;
                int32x4_t v28 = *(int32x4_t *)(v228 + 16);
                int32x4_t v232 = *(int32x4_t *)(v228 + 32);
                int32x4_t v233 = *(int32x4_t *)(v228 + 48);
                int32x4_t v234 = *(int32x4_t *)(v228 + 64);
                int32x4_t v235 = *(int32x4_t *)(v228 + 80);
                int32x4_t v236 = *(int32x4_t *)(v228 + 96);
                int32x4_t v237 = *(int32x4_t *)(v228 + 112);
                int16x8_t v365 = *(int16x8_t *)v228;
                int32x4_t v366 = v28;
                int32x4_t v367 = v234;
                int32x4_t v368 = v235;
                int32x4_t v373 = v232;
                int32x4_t v374 = v233;
                int32x4_t v375 = v236;
                int32x4_t v376 = v237;
                uint64_t v230 = 128;
              }
              else if (v229 == 3)
              {
                int32x4_t v231 = (int32x4_t)vld1q_dup_f32((const float *)v228);
                int16x8_t v365 = (int16x8_t)v231;
                int32x4_t v366 = v231;
                int32x4_t v367 = v231;
                int32x4_t v368 = v231;
                int32x4_t v373 = v231;
                int32x4_t v374 = v231;
                int32x4_t v375 = v231;
                int32x4_t v376 = v231;
                uint64_t v230 = 4;
              }
              else if (v64[5])
              {
                uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v365, 128, v228, v229, v221, v28);
              }
              else
              {
                uint64_t v230 = 0;
                int32x4_t v231 = 0uLL;
                int32x4_t v367 = 0u;
                int32x4_t v368 = 0u;
                int16x8_t v365 = 0u;
                int32x4_t v366 = 0u;
                int32x4_t v373 = 0u;
                int32x4_t v374 = 0u;
                int32x4_t v375 = 0u;
                int32x4_t v376 = 0u;
              }
              uint64_t v238 = v228 + v230;
              unsigned int v239 = v64[6];
              if (v239 == 127)
              {
                int32x4_t v241 = *(int32x4_t *)v238;
                int32x4_t v28 = *(int32x4_t *)(v238 + 16);
                int32x4_t v242 = *(int32x4_t *)(v238 + 32);
                int32x4_t v243 = *(int32x4_t *)(v238 + 48);
                int32x4_t v244 = *(int32x4_t *)(v238 + 64);
                int32x4_t v245 = *(int32x4_t *)(v238 + 80);
                int32x4_t v246 = *(int32x4_t *)(v238 + 96);
                int32x4_t v247 = *(int32x4_t *)(v238 + 112);
                int16x8_t v353 = *(int16x8_t *)v238;
                int32x4_t v354 = v28;
                int32x4_t v355 = v244;
                int32x4_t v356 = v245;
                int32x4_t v361 = v242;
                int32x4_t v362 = v243;
                int32x4_t v363 = v246;
                int32x4_t v364 = v247;
                uint64_t v240 = 128;
              }
              else if (v239 == 3)
              {
                int32x4_t v241 = (int32x4_t)vld1q_dup_f32((const float *)v238);
                int16x8_t v353 = (int16x8_t)v241;
                int32x4_t v354 = v241;
                int32x4_t v355 = v241;
                int32x4_t v356 = v241;
                int32x4_t v361 = v241;
                int32x4_t v362 = v241;
                int32x4_t v363 = v241;
                int32x4_t v364 = v241;
                uint64_t v240 = 4;
              }
              else if (v64[6])
              {
                uint64_t v240 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v353, 128, v238, v239, v231, v28);
              }
              else
              {
                uint64_t v240 = 0;
                int32x4_t v241 = 0uLL;
                int32x4_t v355 = 0u;
                int32x4_t v356 = 0u;
                int16x8_t v353 = 0u;
                int32x4_t v354 = 0u;
                int32x4_t v361 = 0u;
                int32x4_t v362 = 0u;
                int32x4_t v363 = 0u;
                int32x4_t v364 = 0u;
              }
              uint64_t v248 = v238 + v240;
              unsigned int v249 = v64[7];
              if (v249 == 127)
              {
                int32x4_t v25 = *(int32x4_t *)v248;
                int32x4_t v28 = *(int32x4_t *)(v248 + 16);
                int32x4_t v250 = *(int32x4_t *)(v248 + 32);
                int32x4_t v251 = *(int32x4_t *)(v248 + 48);
                int32x4_t v252 = *(int32x4_t *)(v248 + 64);
                int32x4_t v253 = *(int32x4_t *)(v248 + 80);
                int32x4_t v254 = *(int32x4_t *)(v248 + 96);
                int32x4_t v255 = *(int32x4_t *)(v248 + 112);
                int16x8_t v369 = *(int16x8_t *)v248;
                int32x4_t v370 = v28;
                int32x4_t v371 = v252;
                int32x4_t v372 = v253;
                int32x4_t v377 = v250;
                int32x4_t v378 = v251;
                int32x4_t v379 = v254;
                int32x4_t v380 = v255;
                uint64_t v16 = v303;
                unsigned int v33 = v31 + 1;
              }
              else
              {
                uint64_t v16 = v303;
                unsigned int v33 = v31 + 1;
                if (v249 == 3)
                {
                  int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v248);
                  int16x8_t v369 = (int16x8_t)v25;
                  int32x4_t v370 = v25;
                  int32x4_t v371 = v25;
                  int32x4_t v372 = v25;
                  int32x4_t v377 = v25;
                  int32x4_t v378 = v25;
                  int32x4_t v379 = v25;
                  int32x4_t v380 = v25;
                }
                else if (v249)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v369, 128, v248, v249, v241, v28);
                }
                else
                {
                  int32x4_t v25 = 0uLL;
                  int32x4_t v371 = 0u;
                  int32x4_t v372 = 0u;
                  int16x8_t v369 = 0u;
                  int32x4_t v370 = 0u;
                  int32x4_t v377 = 0u;
                  int32x4_t v378 = 0u;
                  int32x4_t v379 = 0u;
                  int32x4_t v380 = 0u;
                }
              }
              unint64_t v256 = v312;
              if (v312)
              {
                unint64_t v257 = 0;
                unsigned int v258 = &v317 + 8 * (unint64_t)v310 + v311;
                unsigned int v259 = v313;
                do
                {
                  if (v259)
                  {
                    uint64_t v260 = 0;
                    uint64_t v261 = v308 + v309 * v257;
                    do
                    {
                      *(unsigned char *)(v261 + v260) = v258->i8[v260];
                      ++v260;
                      unsigned int v259 = v313;
                    }
                    while (16 * (unint64_t)v313 > v260);
                    unint64_t v256 = v312;
                  }
                  ++v257;
                  v258 += 8;
                }
                while (v257 < v256);
              }
            }
          }
          else
          {
            unsigned int v67 = *v64;
            if (v67 == 127)
            {
              int32x4_t v69 = *v63;
              int32x4_t v28 = v63[1];
              int32x4_t v75 = v63[2];
              int32x4_t v76 = v63[3];
              int32x4_t v77 = v63[4];
              int32x4_t v78 = v63[5];
              int32x4_t v79 = v63[6];
              int32x4_t v80 = v63[7];
              uint64_t v26 = a11;
              *(int32x4_t *)uint64_t v65 = *v63;
              *(int32x4_t *)(v65 + 16) = v28;
              int v81 = (int32x4_t *)(v65 + a11);
              *(int32x4_t *)(v65 + 32) = v77;
              *(int32x4_t *)(v65 + 48) = v78;
              *int v81 = v75;
              v81[1] = v76;
              BOOL v82 = (int32x4_t *)(v65 + a11 + 32);
              int32x4_t *v82 = v79;
              v82[1] = v80;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v26 = a11;
              if (v67 == 3)
              {
                int32x4_t v69 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                *(int32x4_t *)uint64_t v65 = v69;
                *(int32x4_t *)(v65 + 16) = v69;
                *(int32x4_t *)(v65 + 32) = v69;
                *(int32x4_t *)(v65 + 48) = v69;
                BOOL v74 = (int32x4_t *)(v65 + a11);
                *BOOL v74 = v69;
                v74[1] = v69;
                v74[2] = v69;
                v74[3] = v69;
                uint64_t v68 = 4;
              }
              else if (*v64)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v65, a11, (uint64_t)v63, v67, v25, v28);
              }
              else
              {
                uint64_t v68 = 0;
                int32x4_t v69 = 0uLL;
                *(_OWORD *)(v65 + 32) = 0u;
                *(_OWORD *)(v65 + 48) = 0u;
                *(_OWORD *)uint64_t v65 = 0u;
                *(_OWORD *)(v65 + 16) = 0u;
                unsigned int v70 = (_OWORD *)(v65 + a11);
                v70[2] = 0u;
                v70[3] = 0u;
                *unsigned int v70 = 0u;
                v70[1] = 0u;
              }
            }
            uint64_t v83 = (uint64_t)v63->i64 + v68;
            uint64_t v84 = (int32x4_t *)(v65 + v287);
            unsigned int v85 = v64[1];
            if (v85 == 127)
            {
              int32x4_t v87 = *(int32x4_t *)v83;
              int32x4_t v28 = *(int32x4_t *)(v83 + 16);
              long long v90 = *(_OWORD *)(v83 + 32);
              long long v91 = *(_OWORD *)(v83 + 48);
              int32x4_t v92 = *(int32x4_t *)(v83 + 64);
              int32x4_t v93 = *(int32x4_t *)(v83 + 80);
              long long v94 = *(_OWORD *)(v83 + 96);
              long long v95 = *(_OWORD *)(v83 + 112);
              *uint64_t v84 = *(int32x4_t *)v83;
              v84[1] = v28;
              int32x4_t v96 = &v84->i8[v26];
              v84[2] = v92;
              v84[3] = v93;
              *(_OWORD *)int32x4_t v96 = v90;
              *((_OWORD *)v96 + 1) = v91;
              int32x4_t v97 = &v84[2].i8[v26];
              *(_OWORD *)int32x4_t v97 = v94;
              *((_OWORD *)v97 + 1) = v95;
              uint64_t v86 = 128;
            }
            else if (v85 == 3)
            {
              int32x4_t v87 = (int32x4_t)vld1q_dup_f32((const float *)v83);
              *uint64_t v84 = v87;
              v84[1] = v87;
              v84[2] = v87;
              v84[3] = v87;
              unint64_t v89 = (int32x4_t *)((char *)v84 + v26);
              *unint64_t v89 = v87;
              v89[1] = v87;
              v89[2] = v87;
              v89[3] = v87;
              uint64_t v86 = 4;
            }
            else if (v64[1])
            {
              uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v65 + v287), v26, v83, v85, v69, v28);
            }
            else
            {
              uint64_t v86 = 0;
              int32x4_t v87 = 0uLL;
              v84[2] = 0u;
              v84[3] = 0u;
              *uint64_t v84 = 0u;
              v84[1] = 0u;
              int32x4_t v88 = &v84->i8[v26];
              *((_OWORD *)v88 + 2) = 0u;
              *((_OWORD *)v88 + 3) = 0u;
              *(_OWORD *)int32x4_t v88 = 0u;
              *((_OWORD *)v88 + 1) = 0u;
            }
            uint64_t v98 = v83 + v86;
            int32x4_t v99 = (int16x8_t *)(v65 + 64);
            unsigned int v100 = v64[2];
            if (v100 == 127)
            {
              int32x4_t v102 = *(int32x4_t *)v98;
              int32x4_t v28 = *(int32x4_t *)(v98 + 16);
              long long v105 = *(_OWORD *)(v98 + 32);
              long long v106 = *(_OWORD *)(v98 + 48);
              long long v107 = *(_OWORD *)(v98 + 64);
              long long v108 = *(_OWORD *)(v98 + 80);
              long long v109 = *(_OWORD *)(v98 + 96);
              long long v110 = *(_OWORD *)(v98 + 112);
              int16x8_t *v99 = *(int16x8_t *)v98;
              *(int32x4_t *)(v65 + 80) = v28;
              int32x4_t v111 = &v99->i8[v26];
              *(_OWORD *)(v65 + 96) = v107;
              *(_OWORD *)(v65 + 112) = v108;
              *(_OWORD *)int32x4_t v111 = v105;
              *((_OWORD *)v111 + 1) = v106;
              v111 += 32;
              *(_OWORD *)int32x4_t v111 = v109;
              *((_OWORD *)v111 + 1) = v110;
              uint64_t v101 = 128;
            }
            else if (v100 == 3)
            {
              int32x4_t v102 = (int32x4_t)vld1q_dup_f32((const float *)v98);
              *(int32x4_t *)(v65 + 64) = v102;
              *(int32x4_t *)(v65 + 80) = v102;
              *(int32x4_t *)(v65 + 96) = v102;
              *(int32x4_t *)(v65 + 112) = v102;
              unsigned int v104 = (int32x4_t *)&v99->i8[v26];
              int32x4_t *v104 = v102;
              v104[1] = v102;
              v104[2] = v102;
              v104[3] = v102;
              uint64_t v101 = 4;
            }
            else if (v64[2])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v99, v26, v98, v100, v87, v28);
            }
            else
            {
              uint64_t v101 = 0;
              int32x4_t v102 = 0uLL;
              *(_OWORD *)(v65 + 96) = 0u;
              *(_OWORD *)(v65 + 112) = 0u;
              int16x8_t *v99 = 0u;
              *(_OWORD *)(v65 + 80) = 0u;
              BOOL v103 = &v99->i8[v26];
              *((_OWORD *)v103 + 2) = 0u;
              *((_OWORD *)v103 + 3) = 0u;
              *(_OWORD *)BOOL v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            uint64_t v112 = v98 + v101;
            long long v113 = (int16x8_t *)&v84[4];
            unsigned int v114 = v64[3];
            if (v114 == 127)
            {
              int32x4_t v116 = *(int32x4_t *)v112;
              int32x4_t v28 = *(int32x4_t *)(v112 + 16);
              long long v119 = *(_OWORD *)(v112 + 32);
              long long v120 = *(_OWORD *)(v112 + 48);
              int32x4_t v121 = *(int32x4_t *)(v112 + 64);
              int32x4_t v122 = *(int32x4_t *)(v112 + 80);
              long long v123 = *(_OWORD *)(v112 + 96);
              long long v124 = *(_OWORD *)(v112 + 112);
              int16x8_t *v113 = *(int16x8_t *)v112;
              v84[5] = v28;
              long long v125 = &v113->i8[v26];
              v84[6] = v121;
              v84[7] = v122;
              *(_OWORD *)long long v125 = v119;
              *((_OWORD *)v125 + 1) = v120;
              v125 += 32;
              *(_OWORD *)long long v125 = v123;
              *((_OWORD *)v125 + 1) = v124;
              uint64_t v115 = 128;
            }
            else if (v114 == 3)
            {
              int32x4_t v116 = (int32x4_t)vld1q_dup_f32((const float *)v112);
              v84[4] = v116;
              v84[5] = v116;
              v84[6] = v116;
              v84[7] = v116;
              int8x8_t v118 = (int32x4_t *)&v113->i8[v26];
              *int8x8_t v118 = v116;
              v118[1] = v116;
              v118[2] = v116;
              v118[3] = v116;
              uint64_t v115 = 4;
            }
            else if (v64[3])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v113, v26, v112, v114, v102, v28);
            }
            else
            {
              uint64_t v115 = 0;
              int32x4_t v116 = 0uLL;
              v84[6] = 0u;
              v84[7] = 0u;
              int16x8_t *v113 = 0u;
              v84[5] = 0u;
              uint64_t v117 = &v113->i8[v26];
              *((_OWORD *)v117 + 2) = 0u;
              *((_OWORD *)v117 + 3) = 0u;
              *(_OWORD *)uint64_t v117 = 0u;
              *((_OWORD *)v117 + 1) = 0u;
            }
            uint64_t v126 = v112 + v115;
            long long v127 = (int32x4_t *)(v65 + v286);
            unsigned int v128 = v64[4];
            if (v128 == 127)
            {
              int32x4_t v130 = *(int32x4_t *)v126;
              int32x4_t v28 = *(int32x4_t *)(v126 + 16);
              long long v133 = *(_OWORD *)(v126 + 32);
              long long v134 = *(_OWORD *)(v126 + 48);
              int32x4_t v135 = *(int32x4_t *)(v126 + 64);
              int32x4_t v136 = *(int32x4_t *)(v126 + 80);
              long long v137 = *(_OWORD *)(v126 + 96);
              long long v138 = *(_OWORD *)(v126 + 112);
              int32x4_t *v127 = *(int32x4_t *)v126;
              v127[1] = v28;
              long long v139 = &v127->i8[v26];
              v127[2] = v135;
              v127[3] = v136;
              *(_OWORD *)long long v139 = v133;
              *((_OWORD *)v139 + 1) = v134;
              int32x4_t v140 = &v127[2].i8[v26];
              *(_OWORD *)int32x4_t v140 = v137;
              *((_OWORD *)v140 + 1) = v138;
              uint64_t v129 = 128;
            }
            else if (v128 == 3)
            {
              int32x4_t v130 = (int32x4_t)vld1q_dup_f32((const float *)v126);
              int32x4_t *v127 = v130;
              v127[1] = v130;
              v127[2] = v130;
              v127[3] = v130;
              uint64_t v132 = (int32x4_t *)((char *)v127 + v26);
              *uint64_t v132 = v130;
              v132[1] = v130;
              v132[2] = v130;
              v132[3] = v130;
              uint64_t v129 = 4;
            }
            else if (v64[4])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v65 + v286), v26, v126, v128, v116, v28);
            }
            else
            {
              uint64_t v129 = 0;
              int32x4_t v130 = 0uLL;
              v127[2] = 0u;
              v127[3] = 0u;
              int32x4_t *v127 = 0u;
              v127[1] = 0u;
              uint64_t v131 = &v127->i8[v26];
              *((_OWORD *)v131 + 2) = 0u;
              *((_OWORD *)v131 + 3) = 0u;
              *(_OWORD *)uint64_t v131 = 0u;
              *((_OWORD *)v131 + 1) = 0u;
            }
            uint64_t v141 = v126 + v129;
            uint64_t v142 = v65 + 6 * a11;
            unsigned int v143 = v64[5];
            if (v143 == 127)
            {
              int32x4_t v145 = *(int32x4_t *)v141;
              int32x4_t v28 = *(int32x4_t *)(v141 + 16);
              long long v148 = *(_OWORD *)(v141 + 32);
              long long v149 = *(_OWORD *)(v141 + 48);
              long long v150 = *(_OWORD *)(v141 + 64);
              long long v151 = *(_OWORD *)(v141 + 80);
              long long v152 = *(_OWORD *)(v141 + 96);
              long long v153 = *(_OWORD *)(v141 + 112);
              *(_OWORD *)uint64_t v142 = *(_OWORD *)v141;
              *(int32x4_t *)(v142 + 16) = v28;
              int32x4_t v154 = (_OWORD *)(v142 + v26);
              *(_OWORD *)(v142 + 32) = v150;
              *(_OWORD *)(v142 + 48) = v151;
              *int32x4_t v154 = v148;
              v154[1] = v149;
              int32x4_t v155 = (_OWORD *)(v142 + v26 + 32);
              *int32x4_t v155 = v152;
              v155[1] = v153;
              uint64_t v144 = 128;
            }
            else if (v143 == 3)
            {
              int32x4_t v145 = (int32x4_t)vld1q_dup_f32((const float *)v141);
              *(int32x4_t *)uint64_t v142 = v145;
              *(int32x4_t *)(v142 + 16) = v145;
              *(int32x4_t *)(v142 + 32) = v145;
              *(int32x4_t *)(v142 + 48) = v145;
              unsigned int v147 = (int32x4_t *)(v142 + v26);
              int32x4_t *v147 = v145;
              v147[1] = v145;
              v147[2] = v145;
              v147[3] = v145;
              uint64_t v144 = 4;
            }
            else if (v64[5])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v142, v26, v141, v143, v130, v28);
            }
            else
            {
              uint64_t v144 = 0;
              int32x4_t v145 = 0uLL;
              *(_OWORD *)(v142 + 32) = 0u;
              *(_OWORD *)(v142 + 48) = 0u;
              *(_OWORD *)uint64_t v142 = 0u;
              *(_OWORD *)(v142 + 16) = 0u;
              uint64_t v146 = (_OWORD *)(v142 + v26);
              v146[2] = 0u;
              v146[3] = 0u;
              *uint64_t v146 = 0u;
              v146[1] = 0u;
            }
            uint64_t v156 = v141 + v144;
            long long v157 = (int16x8_t *)&v127[4];
            unsigned int v158 = v64[6];
            if (v158 == 127)
            {
              int32x4_t v160 = *(int32x4_t *)v156;
              int32x4_t v28 = *(int32x4_t *)(v156 + 16);
              long long v163 = *(_OWORD *)(v156 + 32);
              long long v164 = *(_OWORD *)(v156 + 48);
              int32x4_t v165 = *(int32x4_t *)(v156 + 64);
              int32x4_t v166 = *(int32x4_t *)(v156 + 80);
              long long v167 = *(_OWORD *)(v156 + 96);
              long long v168 = *(_OWORD *)(v156 + 112);
              *long long v157 = *(int16x8_t *)v156;
              v127[5] = v28;
              long long v169 = &v157->i8[v26];
              v127[6] = v165;
              v127[7] = v166;
              *(_OWORD *)long long v169 = v163;
              *((_OWORD *)v169 + 1) = v164;
              v169 += 32;
              *(_OWORD *)long long v169 = v167;
              *((_OWORD *)v169 + 1) = v168;
              uint64_t v159 = 128;
            }
            else if (v158 == 3)
            {
              int32x4_t v160 = (int32x4_t)vld1q_dup_f32((const float *)v156);
              v127[4] = v160;
              v127[5] = v160;
              v127[6] = v160;
              v127[7] = v160;
              unsigned int v162 = (int32x4_t *)&v157->i8[v26];
              *unsigned int v162 = v160;
              v162[1] = v160;
              v162[2] = v160;
              v162[3] = v160;
              uint64_t v159 = 4;
            }
            else if (v64[6])
            {
              uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v157, v26, v156, v158, v145, v28);
            }
            else
            {
              uint64_t v159 = 0;
              int32x4_t v160 = 0uLL;
              v127[6] = 0u;
              v127[7] = 0u;
              *long long v157 = 0u;
              v127[5] = 0u;
              uint64_t v161 = &v157->i8[v26];
              *((_OWORD *)v161 + 2) = 0u;
              *((_OWORD *)v161 + 3) = 0u;
              *(_OWORD *)uint64_t v161 = 0u;
              *((_OWORD *)v161 + 1) = 0u;
            }
            unsigned int v33 = v31 + 1;
            uint64_t v170 = v156 + v159;
            long long v171 = (int16x8_t *)(v142 + 64);
            unsigned int v172 = v64[7];
            if (v172 == 127)
            {
              int32x4_t v25 = *(int32x4_t *)v170;
              int32x4_t v28 = *(int32x4_t *)(v170 + 16);
              long long v175 = *(_OWORD *)(v170 + 32);
              long long v176 = *(_OWORD *)(v170 + 48);
              long long v177 = *(_OWORD *)(v170 + 64);
              long long v178 = *(_OWORD *)(v170 + 80);
              long long v179 = *(_OWORD *)(v170 + 96);
              long long v180 = *(_OWORD *)(v170 + 112);
              *long long v171 = *(int16x8_t *)v170;
              *(int32x4_t *)(v142 + 80) = v28;
              int v181 = &v171->i8[v26];
              *(_OWORD *)(v142 + 96) = v177;
              *(_OWORD *)(v142 + 112) = v178;
              *(_OWORD *)int v181 = v175;
              *((_OWORD *)v181 + 1) = v176;
              v181 += 32;
              *(_OWORD *)int v181 = v179;
              *((_OWORD *)v181 + 1) = v180;
              a7 = v293;
              uint64_t v16 = v303;
            }
            else
            {
              uint64_t v16 = v303;
              if (v172 == 3)
              {
                int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v170);
                *(int32x4_t *)(v142 + 64) = v25;
                *(int32x4_t *)(v142 + 80) = v25;
                *(int32x4_t *)(v142 + 96) = v25;
                *(int32x4_t *)(v142 + 112) = v25;
                int v174 = (int32x4_t *)&v171->i8[v26];
                *int v174 = v25;
                v174[1] = v25;
                v174[2] = v25;
                v174[3] = v25;
              }
              else if (v172)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v26, v170, v172, v160, v28);
              }
              else
              {
                int32x4_t v25 = 0uLL;
                *(_OWORD *)(v142 + 96) = 0u;
                *(_OWORD *)(v142 + 112) = 0u;
                *long long v171 = 0u;
                *(_OWORD *)(v142 + 80) = 0u;
                uint64_t v173 = &v171->i8[v26];
                *((_OWORD *)v173 + 2) = 0u;
                *((_OWORD *)v173 + 3) = 0u;
                *(_OWORD *)uint64_t v173 = 0u;
                *((_OWORD *)v173 + 1) = 0u;
              }
              a7 = v293;
            }
          }
          BOOL v21 = v31 == v294 >> 3;
          unsigned int v31 = v33;
        }
        while (!v21);
        BOOL v21 = v17++ == v285;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v150 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v143 = v20;
  uint64_t v144 = v21;
  uint64_t v127 = v22;
  uint64_t v23 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v147 = v14;
  unsigned int v129 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v128 = v129 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v142 = v31;
  unsigned int v32 = v150;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v141 = 0;
LABEL_32:
      unsigned int v138 = v34 - 3;
      unsigned int v133 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v126 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v141 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v141 = 0;
  unsigned int v126 = 0;
  unsigned int v133 = 0;
  unsigned int v138 = 0;
LABEL_33:
  if (v27 <= v128)
  {
    unsigned int v140 = v150 + a9 - 1;
    if (v150 >> 3 <= v140 >> 3)
    {
      unsigned int v149 = v25 >> 3;
      unsigned int v125 = v26 >> 3;
      int v148 = (v25 & 7) + 1;
      int v124 = (v26 & 7) + 1;
      uint64_t v135 = 4 * a11;
      uint64_t v136 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v134 = v42.i32[0] | v42.i32[1];
      int8x8_t v132 = v42;
      BOOL v130 = v42.i32[0] != 0;
      BOOL v131 = v42.i32[1] != 0;
      uint64_t v139 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v147) {
          int v44 = v147;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v129 < v43) {
          unsigned int v43 = v129;
        }
        int v137 = v44 - 8 * v27;
        int v146 = v43 - v44 + 1;
        unsigned int v45 = v150 >> 3;
        int v46 = v124;
        if (v27 != v125) {
          int v46 = 8;
        }
        unsigned int v151 = v46;
        uint64_t v145 = v127 + (v44 - v147) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v140 < v48) {
            unsigned int v48 = v150 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v149) {
            unsigned int v51 = v148;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v147 && v47 >= v32)
          {
            int v53 = v148;
            if (v45 != v149) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v146 != v151;
          }
          if (v141)
          {
            if (v138 | v133)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v133 != 0;
              int v58 = 1;
              BOOL v60 = v138 != 0;
              unsigned int v59 = v133;
              unsigned int v61 = v138;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v138) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v133) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v138) + (v27 >> v133) * v126) + (v56 << 11);
          }
          else
          {
            if (v134)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v130;
              BOOL v66 = v131;
              __int32 v68 = v132.i32[0];
              __int32 v67 = v132.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v143 + v69);
          if (v142)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v150;
            uint64_t v83 = __dst;
          }
          unsigned int v85 = (unsigned __int8 *)(v144 + 8 * v77);
          uint64_t v86 = (float64x2_t *)(v145 + 32 * (v49 - v32));
          char v87 = v51 < 8 || v52;
          if ((v87 & 1) != 0 || v151 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v139;
            block[5] = v83;
            char v159 = v51;
            char v160 = v151;
            unsigned int v155 = v137;
            unsigned int v156 = v49 - v47;
            block[6] = v85;
            uint64_t v153 = v145 + 32 * (v49 - v32);
            uint64_t v154 = a11;
            unsigned int v157 = v146;
            unsigned int v158 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v139 + 8) + 7384), block);
              unsigned int v32 = v150;
              uint64_t v23 = v139;
            }
            else
            {
              uint64_t v104 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 256, (uint64_t)v83, *v85, v42)];
              uint64_t v106 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, v104, v85[1], v105);
              uint64_t v108 = v106
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 256, v106, v85[2], v107);
              uint64_t v110 = v108
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v108, v85[3], v109);
              uint64_t v112 = v110
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v110, v85[4], v111);
              uint64_t v114 = v112
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v112, v85[5], v113);
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v114, v85[6], v115);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 256, v114 + v116, v85[7], v117);
              unint64_t v118 = v157;
              uint64_t v23 = v139;
              if (v157)
              {
                unint64_t v119 = 0;
                long long v120 = &v162[16 * (unint64_t)v155 + 2 * v156];
                unsigned int v121 = v158;
                do
                {
                  if (v121)
                  {
                    uint64_t v122 = 0;
                    uint64_t v123 = v153 + v154 * v119;
                    do
                    {
                      *(unsigned char *)(v123 + v122) = *((unsigned char *)v120->f64 + v122);
                      ++v122;
                      unsigned int v121 = v158;
                    }
                    while (32 * (unint64_t)v158 > v122);
                    unint64_t v118 = v157;
                  }
                  ++v119;
                  v120 += 16;
                }
                while (v119 < v118);
              }
              unsigned int v32 = v150;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85, v42)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136), a11, v88, v85[1], v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v90, v85[2], v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136 + 128), a11, v92, v85[3], v93);
            long long v95 = (float64x2_t *)((char *)v86 + v135);
            uint64_t v97 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v135), a11, v94, v85[4], v96);
            uint64_t v98 = (float64x2_t *)((char *)v86 + 6 * a11);
            uint64_t v100 = v97
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98, a11, v97, v85[5], v99);
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v95 + 8, a11, v100, v85[6], v101);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98 + 8, a11, v100 + v102, v85[7], v103);
            unsigned int v32 = v150;
            uint64_t v23 = v139;
          }
          BOOL v28 = v45++ == v140 >> 3;
        }
        while (!v28);
        BOOL v28 = v27++ == v128;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v150 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v143 = v20;
  uint64_t v144 = v21;
  uint64_t v127 = v22;
  uint64_t v23 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v147 = v14;
  unsigned int v129 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v128 = v129 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v142 = v31;
  unsigned int v32 = v150;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v141 = 0;
LABEL_32:
      unsigned int v138 = v34 - 3;
      unsigned int v133 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v126 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v141 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v141 = 0;
  unsigned int v126 = 0;
  unsigned int v133 = 0;
  unsigned int v138 = 0;
LABEL_33:
  if (v27 <= v128)
  {
    unsigned int v140 = v150 + a9 - 1;
    if (v150 >> 3 <= v140 >> 3)
    {
      unsigned int v149 = v25 >> 3;
      unsigned int v125 = v26 >> 3;
      int v148 = (v25 & 7) + 1;
      int v124 = (v26 & 7) + 1;
      uint64_t v135 = 4 * a11;
      uint64_t v136 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v134 = v42.i32[0] | v42.i32[1];
      int8x8_t v132 = v42;
      BOOL v130 = v42.i32[0] != 0;
      BOOL v131 = v42.i32[1] != 0;
      uint64_t v139 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v147) {
          int v44 = v147;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v129 < v43) {
          unsigned int v43 = v129;
        }
        int v137 = v44 - 8 * v27;
        int v146 = v43 - v44 + 1;
        unsigned int v45 = v150 >> 3;
        int v46 = v124;
        if (v27 != v125) {
          int v46 = 8;
        }
        unsigned int v151 = v46;
        uint64_t v145 = v127 + (v44 - v147) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v140 < v48) {
            unsigned int v48 = v150 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v149) {
            unsigned int v51 = v148;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v147 && v47 >= v32)
          {
            int v53 = v148;
            if (v45 != v149) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v146 != v151;
          }
          if (v141)
          {
            if (v138 | v133)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v133 != 0;
              int v58 = 1;
              BOOL v60 = v138 != 0;
              unsigned int v59 = v133;
              unsigned int v61 = v138;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v138) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v133) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v138) + (v27 >> v133) * v126) + (v56 << 11);
          }
          else
          {
            if (v134)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v130;
              BOOL v66 = v131;
              __int32 v68 = v132.i32[0];
              __int32 v67 = v132.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v143 + v69);
          if (v142)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v150;
            uint64_t v83 = __dst;
          }
          unsigned int v85 = (unsigned __int8 *)(v144 + 8 * v77);
          uint64_t v86 = (float64x2_t *)(v145 + 32 * (v49 - v32));
          char v87 = v51 < 8 || v52;
          if ((v87 & 1) != 0 || v151 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v139;
            block[5] = v83;
            char v159 = v51;
            char v160 = v151;
            unsigned int v155 = v137;
            unsigned int v156 = v49 - v47;
            block[6] = v85;
            uint64_t v153 = v145 + 32 * (v49 - v32);
            uint64_t v154 = a11;
            unsigned int v157 = v146;
            unsigned int v158 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v139 + 8) + 7384), block);
              unsigned int v32 = v150;
              uint64_t v23 = v139;
            }
            else
            {
              uint64_t v104 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 256, (uint64_t)v83, *v85, v42)];
              uint64_t v106 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, v104, v85[1], v105);
              uint64_t v108 = v106
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 256, v106, v85[2], v107);
              uint64_t v110 = v108
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v108, v85[3], v109);
              uint64_t v112 = v110
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v110, v85[4], v111);
              uint64_t v114 = v112
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v112, v85[5], v113);
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v114, v85[6], v115);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 256, v114 + v116, v85[7], v117);
              unint64_t v118 = v157;
              uint64_t v23 = v139;
              if (v157)
              {
                unint64_t v119 = 0;
                long long v120 = &v162[16 * (unint64_t)v155 + 2 * v156];
                unsigned int v121 = v158;
                do
                {
                  if (v121)
                  {
                    uint64_t v122 = 0;
                    uint64_t v123 = v153 + v154 * v119;
                    do
                    {
                      *(unsigned char *)(v123 + v122) = *((unsigned char *)v120->f64 + v122);
                      ++v122;
                      unsigned int v121 = v158;
                    }
                    while (32 * (unint64_t)v158 > v122);
                    unint64_t v118 = v157;
                  }
                  ++v119;
                  v120 += 16;
                }
                while (v119 < v118);
              }
              unsigned int v32 = v150;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85, v42)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136), a11, v88, v85[1], v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v90, v85[2], v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136 + 128), a11, v92, v85[3], v93);
            long long v95 = (float64x2_t *)((char *)v86 + v135);
            uint64_t v97 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v135), a11, v94, v85[4], v96);
            uint64_t v98 = (float64x2_t *)((char *)v86 + 6 * a11);
            uint64_t v100 = v97
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98, a11, v97, v85[5], v99);
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v95 + 8, a11, v100, v85[6], v101);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98 + 8, a11, v100 + v102, v85[7], v103);
            unsigned int v32 = v150;
            uint64_t v23 = v139;
          }
          BOOL v28 = v45++ == v140 >> 3;
        }
        while (!v28);
        BOOL v28 = v27++ == v128;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v133 = v23;
  uint64_t v24 = v12;
  uint64_t v172 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v150 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v132 = v14 + a10 - 1;
  unsigned int v134 = v132 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v144 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v134)
  {
    unsigned int v142 = v16 + a9 - 1;
    unsigned int v131 = v16 >> 3;
    if (v16 >> 3 <= v142 >> 3)
    {
      unsigned int v128 = v20 - 1;
      unsigned int v130 = (v18 - 1) >> 3;
      int v151 = ((v20 - 1) & 7) + 1;
      unsigned int v152 = (v20 - 1) >> 3;
      int v129 = ((v18 - 1) & 7) + 1;
      uint64_t v135 = 4 * a11;
      uint64_t v136 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v141 = v34.i32[0] | v34.i32[1];
      BOOL v139 = v34.i32[1] != 0;
      int8x8_t v140 = v34;
      BOOL v138 = v34.i32[0] != 0;
      unint64_t v127 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v150) {
          int v36 = v150;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v131;
        if (v132 < v35) {
          unsigned int v35 = v132;
        }
        int v137 = v36 - 8 * v25;
        int v148 = v35 - v36 + 1;
        unsigned int v149 = 8 * v25;
        int v38 = v129;
        if (v25 != v130) {
          int v38 = 8;
        }
        unsigned int v153 = v38;
        uint64_t v147 = v133 + (v36 - v150) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v142 < v40) {
            unsigned int v40 = v142;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v152) {
            unsigned int v43 = v151;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v149 >= v150 && v39 >= v16)
          {
            int v45 = v151;
            if (v37 != v152) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v148 != v153;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v127 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v116 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v117 = 0;
            }
            else {
              unsigned int v117 = 32 - __clz(~(-1 << -(char)__clz(v116)));
            }
            unsigned int v118 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v119 = 0;
              if (v117) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
              if (v119 | v117)
              {
LABEL_121:
                int v120 = 0;
                uint64_t v121 = 0;
                int v122 = v37 & v116;
                int v123 = v25 & v118;
                BOOL v124 = v117 != 0;
                BOOL v125 = v119 != 0;
                int v126 = 1;
                do
                {
                  --v117;
                  if (v124) {
                    v121 |= (unint64_t)(v126 & v122) << v120++;
                  }
                  else {
                    unsigned int v117 = 0;
                  }
                  --v119;
                  if (v125) {
                    v121 |= (unint64_t)(v126 & v123) << v120++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  v126 *= 2;
                  --v120;
                  BOOL v125 = v119 != 0;
                  BOOL v124 = v117 != 0;
                }
                while (v119 | v117);
                goto LABEL_133;
              }
            }
            uint64_t v121 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v149 / v72 * ((v68 + v128) / v68)) << 14) + (v121 << 11);
            goto LABEL_60;
          }
          if (v141)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v138;
            BOOL v51 = v139;
            __int32 v53 = v140.i32[0];
            __int32 v52 = v140.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v145 + v54);
          if (v144)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v145 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v146 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (float64x2_t *)(v147 + 32 * (v41 - v16));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) == 0 && v153 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76, v34)];
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v136), a11, v80, v76[1], v81);
            uint64_t v84 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v82, v76[2], v83);
            uint64_t v86 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v136 + 128), a11, v84, v76[3], v85);
            char v87 = (float64x2_t *)((char *)v78 + v135);
            uint64_t v89 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v135), a11, v86, v76[4], v88);
            uint64_t v90 = (float64x2_t *)((char *)v78 + 6 * a11);
            uint64_t v92 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90, a11, v89, v76[5], v91);
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v87 + 8, a11, v92, v76[6], v93);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 8, a11, v92 + v94, v76[7], v95);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v161 = v43;
          char v162 = v153;
          unsigned int v157 = v137;
          unsigned int v158 = v41 - v39;
          block[6] = v76;
          unsigned int v155 = v78;
          uint64_t v156 = a11;
          unsigned int v159 = v148;
          unsigned int v160 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v96 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, (uint64_t)v73, *v76, v34)];
          uint64_t v98 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v96, v76[1], v97);
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v98, v76[2], v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v100, v76[3], v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v102, v76[4], v103);
          uint64_t v106 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 256, v104, v76[5], v105);
          uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 256, v106, v76[6], v107);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 256, v106 + v108, v76[7], v109);
          unint64_t v110 = v159;
          uint64_t v16 = v77;
          if (v159)
          {
            unint64_t v111 = 0;
            uint64_t v112 = &v164[16 * (unint64_t)v157 + 2 * v158];
            unsigned int v113 = v160;
            do
            {
              if (v113)
              {
                uint64_t v114 = 0;
                int8x8_t v115 = (char *)v155 + v156 * v111;
                do
                {
                  v115[v114] = *((unsigned char *)v112->f64 + v114);
                  ++v114;
                  unsigned int v113 = v160;
                }
                while (32 * (unint64_t)v160 > v114);
                unint64_t v110 = v159;
              }
              ++v111;
              v112 += 16;
            }
            while (v111 < v110);
          }
LABEL_28:
          BOOL v29 = v37++ == v142 >> 3;
        }
        while (!v29);
        BOOL v29 = v25++ == v134;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v145 = v21;
  uint64_t v146 = v22;
  uint64_t v133 = v23;
  uint64_t v24 = v12;
  uint64_t v172 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v150 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v132 = v14 + a10 - 1;
  unsigned int v134 = v132 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v144 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v134)
  {
    unsigned int v142 = v16 + a9 - 1;
    unsigned int v131 = v16 >> 3;
    if (v16 >> 3 <= v142 >> 3)
    {
      unsigned int v128 = v20 - 1;
      unsigned int v130 = (v18 - 1) >> 3;
      int v151 = ((v20 - 1) & 7) + 1;
      unsigned int v152 = (v20 - 1) >> 3;
      int v129 = ((v18 - 1) & 7) + 1;
      uint64_t v135 = 4 * a11;
      uint64_t v136 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v141 = v34.i32[0] | v34.i32[1];
      BOOL v139 = v34.i32[1] != 0;
      int8x8_t v140 = v34;
      BOOL v138 = v34.i32[0] != 0;
      unint64_t v127 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v150) {
          int v36 = v150;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v131;
        if (v132 < v35) {
          unsigned int v35 = v132;
        }
        int v137 = v36 - 8 * v25;
        int v148 = v35 - v36 + 1;
        unsigned int v149 = 8 * v25;
        int v38 = v129;
        if (v25 != v130) {
          int v38 = 8;
        }
        unsigned int v153 = v38;
        uint64_t v147 = v133 + (v36 - v150) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v142 < v40) {
            unsigned int v40 = v142;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v152) {
            unsigned int v43 = v151;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v149 >= v150 && v39 >= v16)
          {
            int v45 = v151;
            if (v37 != v152) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v148 != v153;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v127 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v116 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v117 = 0;
            }
            else {
              unsigned int v117 = 32 - __clz(~(-1 << -(char)__clz(v116)));
            }
            unsigned int v118 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v119 = 0;
              if (v117) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
              if (v119 | v117)
              {
LABEL_121:
                int v120 = 0;
                uint64_t v121 = 0;
                int v122 = v37 & v116;
                int v123 = v25 & v118;
                BOOL v124 = v117 != 0;
                BOOL v125 = v119 != 0;
                int v126 = 1;
                do
                {
                  --v117;
                  if (v124) {
                    v121 |= (unint64_t)(v126 & v122) << v120++;
                  }
                  else {
                    unsigned int v117 = 0;
                  }
                  --v119;
                  if (v125) {
                    v121 |= (unint64_t)(v126 & v123) << v120++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  v126 *= 2;
                  --v120;
                  BOOL v125 = v119 != 0;
                  BOOL v124 = v117 != 0;
                }
                while (v119 | v117);
                goto LABEL_133;
              }
            }
            uint64_t v121 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v149 / v72 * ((v68 + v128) / v68)) << 14) + (v121 << 11);
            goto LABEL_60;
          }
          if (v141)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v138;
            BOOL v51 = v139;
            __int32 v53 = v140.i32[0];
            __int32 v52 = v140.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v145 + v54);
          if (v144)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v145 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v146 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (float64x2_t *)(v147 + 32 * (v41 - v16));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) == 0 && v153 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76, v34)];
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v136), a11, v80, v76[1], v81);
            uint64_t v84 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v82, v76[2], v83);
            uint64_t v86 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v136 + 128), a11, v84, v76[3], v85);
            char v87 = (float64x2_t *)((char *)v78 + v135);
            uint64_t v89 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v135), a11, v86, v76[4], v88);
            uint64_t v90 = (float64x2_t *)((char *)v78 + 6 * a11);
            uint64_t v92 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90, a11, v89, v76[5], v91);
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v87 + 8, a11, v92, v76[6], v93);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 8, a11, v92 + v94, v76[7], v95);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v161 = v43;
          char v162 = v153;
          unsigned int v157 = v137;
          unsigned int v158 = v41 - v39;
          block[6] = v76;
          unsigned int v155 = v78;
          uint64_t v156 = a11;
          unsigned int v159 = v148;
          unsigned int v160 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v96 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, (uint64_t)v73, *v76, v34)];
          uint64_t v98 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v96, v76[1], v97);
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v98, v76[2], v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v100, v76[3], v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v102, v76[4], v103);
          uint64_t v106 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 256, v104, v76[5], v105);
          uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 256, v106, v76[6], v107);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 256, v106 + v108, v76[7], v109);
          unint64_t v110 = v159;
          uint64_t v16 = v77;
          if (v159)
          {
            unint64_t v111 = 0;
            uint64_t v112 = &v164[16 * (unint64_t)v157 + 2 * v158];
            unsigned int v113 = v160;
            do
            {
              if (v113)
              {
                uint64_t v114 = 0;
                int8x8_t v115 = (char *)v155 + v156 * v111;
                do
                {
                  v115[v114] = *((unsigned char *)v112->f64 + v114);
                  ++v114;
                  unsigned int v113 = v160;
                }
                while (32 * (unint64_t)v160 > v114);
                unint64_t v110 = v159;
              }
              ++v111;
              v112 += 16;
            }
            while (v111 < v110);
          }
LABEL_28:
          BOOL v29 = v37++ == v142 >> 3;
        }
        while (!v29);
        BOOL v29 = v25++ == v134;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v268 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v221 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v203 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v221 >> 3;
  unsigned int v202 = v203 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v215 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v214 = 0;
LABEL_32:
      unsigned int v212 = v27 - 3;
      unsigned int v207 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v200 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v214 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v214 = 0;
  unsigned int v200 = 0;
  unsigned int v207 = 0;
  unsigned int v212 = 0;
LABEL_33:
  if (v21 <= v202)
  {
    unsigned int v213 = a7 + a9 - 1;
    if (a7 >> 3 <= v213 >> 3)
    {
      uint64_t v34 = a11;
      unsigned int v224 = v19 >> 3;
      unsigned int v199 = v20 >> 3;
      int v223 = (v19 & 7) + 1;
      int v198 = (v20 & 7) + 1;
      uint64_t v209 = 4 * a11;
      uint64_t v210 = 2 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      v37.i64[0] = 0x1000000010;
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v208 = v38.i32[0] | v38.i32[1];
      uint64_t v206 = v38.i64[0];
      BOOL v204 = v38.i32[0] != 0;
      BOOL v205 = v38.i32[1] != 0;
      uint64_t v222 = a1;
      do
      {
        unsigned int v39 = (8 * v21) | 7;
        if (8 * v21 <= v221) {
          int v40 = v221;
        }
        else {
          int v40 = 8 * v21;
        }
        if (v203 < v39) {
          unsigned int v39 = v203;
        }
        int v211 = v40 - 8 * v21;
        int v219 = v39 - v40 + 1;
        unsigned int v41 = a7 >> 3;
        int v42 = v198;
        if (v21 != v199) {
          int v42 = 8;
        }
        unsigned int v225 = v42;
        uint64_t v218 = a2 + (v40 - v221) * v34;
        unsigned int v43 = a7;
        do
        {
          unsigned int v45 = 8 * v41;
          unsigned int v46 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v43) {
            int v47 = v43;
          }
          else {
            int v47 = 8 * v41;
          }
          if (v213 < v46) {
            unsigned int v46 = a7 + a9 - 1;
          }
          int v48 = v46 - v47 + 1;
          if (v41 == v224) {
            unsigned int v49 = v223;
          }
          else {
            unsigned int v49 = 8;
          }
          BOOL v50 = 1;
          if (8 * v21 >= v221 && v45 >= v43)
          {
            int v51 = v223;
            if (v41 != v224) {
              int v51 = 8;
            }
            BOOL v50 = v48 != v51 || v219 != v225;
          }
          if (v214)
          {
            if (v212 | v207)
            {
              int v53 = 0;
              uint64_t v54 = 0;
              BOOL v55 = v207 != 0;
              int v56 = 1;
              BOOL v58 = v212 != 0;
              unsigned int v57 = v207;
              unsigned int v59 = v212;
              do
              {
                --v59;
                if (v58) {
                  v54 |= (unint64_t)(v41 & ~(-1 << v212) & v56) << v53++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v57;
                if (v55) {
                  v54 |= (unint64_t)(v21 & ~(-1 << v207) & v56) << v53++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v56 *= 2;
                --v53;
                BOOL v55 = v57 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v57 | v59);
            }
            else
            {
              uint64_t v54 = 0;
            }
            uint64_t v67 = *(void *)(v17 + 320) * ((v41 >> v212) + (v21 >> v207) * v200) + (v54 << 9);
          }
          else
          {
            if (v208)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              int v62 = 1;
              BOOL v63 = v204;
              BOOL v64 = v205;
              int v66 = v206;
              int v65 = HIDWORD(v206);
              do
              {
                --v65;
                if (v64) {
                  v61 |= (unint64_t)(v62 & v41) << v60++;
                }
                else {
                  int v65 = 0;
                }
                --v66;
                if (v63) {
                  v61 |= (unint64_t)(v62 & v21) << v60++;
                }
                else {
                  int v66 = 0;
                }
                v62 *= 2;
                --v60;
                BOOL v63 = v66 != 0;
                BOOL v64 = v65 != 0;
              }
              while (v66 | v65);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v67 = v61 << 9;
          }
          unsigned int v68 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
          }
          unsigned int v71 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 7;
          if (v72 < 0x10)
          {
            unsigned int v73 = 0;
            if (!v70)
            {
LABEL_115:
              unint64_t v75 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 3) - 1)));
            if (!(v73 | v70)) {
              goto LABEL_115;
            }
          }
          int v74 = 0;
          unint64_t v75 = 0;
          BOOL v76 = v70 != 0;
          BOOL v77 = v73 != 0;
          int v78 = 1;
          do
          {
            --v70;
            BOOL v79 = !v76;
            if (v76)
            {
              unint64_t v80 = ((unint64_t)(v78 & v41) << v74) | v75;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v80 = v75;
            }
            if (!v79) {
              ++v74;
            }
            --v73;
            if (v77)
            {
              unint64_t v75 = ((unint64_t)(v78 & v21) << v74) | v80;
            }
            else
            {
              unsigned int v73 = 0;
              unint64_t v75 = v80;
            }
            if (v77) {
              ++v74;
            }
            v78 *= 2;
            --v74;
            BOOL v77 = v73 != 0;
            BOOL v76 = v70 != 0;
          }
          while (v73 | v70);
LABEL_116:
          int8x8_t v81 = (int16x8_t *)(a3 + v67);
          if (v215)
          {
            int v82 = v48;
            unsigned int v83 = v49;
            BOOL v84 = v50;
            memcpy(__dst, (const void *)(a3 + v67), sizeof(__dst));
            BOOL v50 = v84;
            unsigned int v49 = v83;
            int v48 = v82;
            int8x8_t v81 = (int16x8_t *)__dst;
          }
          int8x8_t v85 = (unsigned __int8 *)(a4 + 8 * v75);
          uint64_t v86 = v218 + 8 * (v47 - v43);
          char v87 = v49 < 8 || v50;
          if ((v87 & 1) == 0 && v225 > 7)
          {
            unsigned int v88 = *v85;
            if (v88 == 63)
            {
              int16x8_t v90 = *v81;
              int16x8_t v36 = v81[1];
              int16x8_t v37 = v81[2];
              int16x8_t v96 = v81[3];
              *(int16x8_t *)uint64_t v86 = *v81;
              *(int16x8_t *)(v86 + 16) = v37;
              uint64_t v34 = a11;
              int8x8_t v97 = (int16x8_t *)(v86 + a11);
              int16x8_t *v97 = v36;
              v97[1] = v96;
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              if (v88 == 1)
              {
                int16x8_t v90 = vld1q_dup_s16(v81->i16);
                *(int16x8_t *)uint64_t v86 = v90;
                *(int16x8_t *)(v86 + 16) = v90;
                int8x8_t v95 = (int16x8_t *)(v86 + a11);
                *int8x8_t v95 = v90;
                v95[1] = v90;
                uint64_t v89 = 2;
              }
              else if (*v85)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v86, a11, (uint64_t)v81, v88, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              else
              {
                uint64_t v89 = 0;
                v90.i64[0] = 0;
                *(_OWORD *)uint64_t v86 = 0u;
                *(_OWORD *)(v86 + 16) = 0u;
                int8x8_t v91 = (_OWORD *)(v86 + a11);
                *int8x8_t v91 = 0u;
                v91[1] = 0u;
              }
            }
            uint64_t v98 = (uint64_t)v81->i64 + v89;
            int8x8_t v99 = (int16x8_t *)(v86 + v210);
            unsigned int v100 = v85[1];
            if (v100 == 63)
            {
              int16x8_t v102 = *(int16x8_t *)v98;
              int16x8_t v36 = *(int16x8_t *)(v98 + 16);
              int16x8_t v37 = *(int16x8_t *)(v98 + 32);
              long long v105 = *(_OWORD *)(v98 + 48);
              int16x8_t *v99 = *(int16x8_t *)v98;
              v99[1] = v37;
              uint64_t v106 = &v99->i8[v34];
              *(int16x8_t *)uint64_t v106 = v36;
              *((_OWORD *)v106 + 1) = v105;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v102 = vld1q_dup_s16((const __int16 *)v98);
              int16x8_t *v99 = v102;
              v99[1] = v102;
              uint64_t v104 = (int16x8_t *)((char *)v99 + v34);
              int16x8_t *v104 = v102;
              v104[1] = v102;
              uint64_t v101 = 2;
            }
            else if (v85[1])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v86 + v210), v34, v98, v100, *(int8x8_t *)v90.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v101 = 0;
              v102.i64[0] = 0;
              int16x8_t *v99 = 0u;
              v99[1] = 0u;
              int8x8_t v103 = &v99->i8[v34];
              *(_OWORD *)int8x8_t v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            uint64_t v107 = v98 + v101;
            uint64_t v108 = (int8x16_t *)(v86 + 32);
            unsigned int v109 = v85[2];
            if (v109 == 63)
            {
              int16x8_t v111 = *(int16x8_t *)v107;
              int16x8_t v36 = *(int16x8_t *)(v107 + 16);
              int16x8_t v37 = *(int16x8_t *)(v107 + 32);
              long long v114 = *(_OWORD *)(v107 + 48);
              *(_OWORD *)(v86 + 32) = *(_OWORD *)v107;
              *(int16x8_t *)(v86 + 48) = v37;
              int8x8_t v115 = &v108->i8[v34];
              *(int16x8_t *)int8x8_t v115 = v36;
              *((_OWORD *)v115 + 1) = v114;
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v111 = vld1q_dup_s16((const __int16 *)v107);
              *(int16x8_t *)(v86 + 32) = v111;
              *(int16x8_t *)(v86 + 48) = v111;
              unsigned int v113 = (int16x8_t *)&v108->i8[v34];
              int16x8_t *v113 = v111;
              v113[1] = v111;
              uint64_t v110 = 2;
            }
            else if (v85[2])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v34, v107, v109, *(int8x8_t *)v102.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v110 = 0;
              v111.i64[0] = 0;
              *uint64_t v108 = 0u;
              *(_OWORD *)(v86 + 48) = 0u;
              uint64_t v112 = &v108->i8[v34];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
            }
            uint64_t v116 = v107 + v110;
            unsigned int v117 = (int8x16_t *)&v99[2];
            unsigned int v118 = v85[3];
            if (v118 == 63)
            {
              int16x8_t v120 = *(int16x8_t *)v116;
              int16x8_t v36 = *(int16x8_t *)(v116 + 16);
              int16x8_t v37 = *(int16x8_t *)(v116 + 32);
              long long v123 = *(_OWORD *)(v116 + 48);
              v99[2] = *(int16x8_t *)v116;
              v99[3] = v37;
              BOOL v124 = &v117->i8[v34];
              *(int16x8_t *)BOOL v124 = v36;
              *((_OWORD *)v124 + 1) = v123;
              uint64_t v119 = 64;
            }
            else if (v118 == 1)
            {
              int16x8_t v120 = vld1q_dup_s16((const __int16 *)v116);
              v99[2] = v120;
              v99[3] = v120;
              int v122 = (int16x8_t *)&v117->i8[v34];
              *int v122 = v120;
              v122[1] = v120;
              uint64_t v119 = 2;
            }
            else if (v85[3])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, v34, v116, v118, *(int8x8_t *)v111.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v119 = 0;
              v120.i64[0] = 0;
              *unsigned int v117 = 0u;
              v99[3] = 0u;
              uint64_t v121 = &v117->i8[v34];
              *(_OWORD *)uint64_t v121 = 0u;
              *((_OWORD *)v121 + 1) = 0u;
            }
            uint64_t v125 = v116 + v119;
            int v126 = (int16x8_t *)(v86 + v209);
            unsigned int v127 = v85[4];
            if (v127 == 63)
            {
              int16x8_t v129 = *(int16x8_t *)v125;
              int16x8_t v36 = *(int16x8_t *)(v125 + 16);
              int16x8_t v37 = *(int16x8_t *)(v125 + 32);
              long long v132 = *(_OWORD *)(v125 + 48);
              *int v126 = *(int16x8_t *)v125;
              v126[1] = v37;
              uint64_t v133 = &v126->i8[v34];
              *(int16x8_t *)uint64_t v133 = v36;
              *((_OWORD *)v133 + 1) = v132;
              uint64_t v128 = 64;
            }
            else if (v127 == 1)
            {
              int16x8_t v129 = vld1q_dup_s16((const __int16 *)v125);
              *int v126 = v129;
              v126[1] = v129;
              unsigned int v131 = (int16x8_t *)((char *)v126 + v34);
              int16x8_t *v131 = v129;
              v131[1] = v129;
              uint64_t v128 = 2;
            }
            else if (v85[4])
            {
              uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v86 + v209), v34, v125, v127, *(int8x8_t *)v120.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v128 = 0;
              v129.i64[0] = 0;
              *int v126 = 0u;
              v126[1] = 0u;
              unsigned int v130 = &v126->i8[v34];
              *(_OWORD *)unsigned int v130 = 0u;
              *((_OWORD *)v130 + 1) = 0u;
            }
            uint64_t v134 = v125 + v128;
            uint64_t v135 = v86 + 6 * a11;
            unsigned int v136 = v85[5];
            if (v136 == 63)
            {
              int16x8_t v138 = *(int16x8_t *)v134;
              int16x8_t v36 = *(int16x8_t *)(v134 + 16);
              int16x8_t v37 = *(int16x8_t *)(v134 + 32);
              int16x8_t v141 = *(int16x8_t *)(v134 + 48);
              *(_OWORD *)uint64_t v135 = *(_OWORD *)v134;
              *(int16x8_t *)(v135 + 16) = v37;
              unsigned int v142 = (int16x8_t *)(v135 + v34);
              *unsigned int v142 = v36;
              v142[1] = v141;
              uint64_t v137 = 64;
            }
            else if (v136 == 1)
            {
              int16x8_t v138 = vld1q_dup_s16((const __int16 *)v134);
              *(int16x8_t *)uint64_t v135 = v138;
              *(int16x8_t *)(v135 + 16) = v138;
              int8x8_t v140 = (int16x8_t *)(v135 + v34);
              *int8x8_t v140 = v138;
              v140[1] = v138;
              uint64_t v137 = 2;
            }
            else if (v85[5])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v135, v34, v134, v136, *(int8x8_t *)v129.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v137 = 0;
              v138.i64[0] = 0;
              *(_OWORD *)uint64_t v135 = 0u;
              *(_OWORD *)(v135 + 16) = 0u;
              BOOL v139 = (_OWORD *)(v135 + v34);
              _OWORD *v139 = 0u;
              v139[1] = 0u;
            }
            uint64_t v143 = v134 + v137;
            int v144 = (int8x16_t *)&v126[2];
            unsigned int v145 = v85[6];
            if (v145 == 63)
            {
              int16x8_t v147 = *(int16x8_t *)v143;
              int16x8_t v36 = *(int16x8_t *)(v143 + 16);
              int16x8_t v37 = *(int16x8_t *)(v143 + 32);
              long long v150 = *(_OWORD *)(v143 + 48);
              v126[2] = *(int16x8_t *)v143;
              v126[3] = v37;
              int v151 = &v144->i8[v34];
              *(int16x8_t *)int v151 = v36;
              *((_OWORD *)v151 + 1) = v150;
              uint64_t v146 = 64;
            }
            else if (v145 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v143);
              v126[2] = v147;
              v126[3] = v147;
              unsigned int v149 = (int16x8_t *)&v144->i8[v34];
              int16x8_t *v149 = v147;
              v149[1] = v147;
              uint64_t v146 = 2;
            }
            else if (v85[6])
            {
              uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v144, v34, v143, v145, *(int8x8_t *)v138.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v146 = 0;
              v147.i64[0] = 0;
              int8x16_t *v144 = 0u;
              v126[3] = 0u;
              int v148 = &v144->i8[v34];
              *(_OWORD *)int v148 = 0u;
              *((_OWORD *)v148 + 1) = 0u;
            }
            uint64_t v152 = v143 + v146;
            unsigned int v153 = (int8x16_t *)(v135 + 32);
            unsigned int v154 = v85[7];
            if (v154 == 63)
            {
              int8x16_t v38 = *(int8x16_t *)v152;
              int16x8_t v36 = *(int16x8_t *)(v152 + 16);
              int16x8_t v37 = *(int16x8_t *)(v152 + 32);
              long long v156 = *(_OWORD *)(v152 + 48);
              *(_OWORD *)(v135 + 32) = *(_OWORD *)v152;
              *(int16x8_t *)(v135 + 48) = v37;
              unsigned int v157 = &v153->i8[v34];
              *(int16x8_t *)unsigned int v157 = v36;
              *((_OWORD *)v157 + 1) = v156;
              unsigned int v43 = a7;
              uint64_t v17 = v222;
            }
            else
            {
              uint64_t v17 = v222;
              if (v154 == 1)
              {
                int8x16_t v38 = (int8x16_t)vld1q_dup_s16((const __int16 *)v152);
                *(int8x16_t *)(v135 + 32) = v38;
                *(int8x16_t *)(v135 + 48) = v38;
LABEL_182:
                unsigned int v155 = (int8x16_t *)((char *)v153 + v34);
                *unsigned int v155 = v38;
                v155[1] = v38;
              }
              else
              {
                if (!v154)
                {
                  int8x16_t v38 = 0uLL;
                  *unsigned int v153 = 0u;
                  *(_OWORD *)(v135 + 48) = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v153, v34, v152, v154, *(int8x8_t *)v147.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              unsigned int v43 = a7;
            }
LABEL_47:
            unsigned int v44 = v41 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v222;
          block[5] = v81;
          char v233 = v49;
          char v234 = v225;
          unsigned int v229 = v211;
          unsigned int v230 = v47 - v45;
          block[6] = v85;
          uint64_t v227 = v86;
          uint64_t v34 = a11;
          uint64_t v228 = a11;
          unsigned int v231 = v219;
          unsigned int v232 = v48;
          if (v50)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v222 + 8) + 7384), block);
            unsigned int v43 = a7;
            uint64_t v17 = v222;
            goto LABEL_47;
          }
          unsigned int v92 = *v85;
          if (v92 == 63)
          {
            int16x8_t v94 = *v81;
            int16x8_t v36 = v81[1];
            int16x8_t v37 = v81[2];
            int16x8_t v158 = v81[3];
            int8x16_t v236 = *(int8x16_t *)v81;
            int16x8_t v237 = v37;
            int16x8_t v240 = v36;
            int16x8_t v241 = v158;
            uint64_t v93 = 64;
          }
          else if (v92 == 1)
          {
            int16x8_t v94 = vld1q_dup_s16(v81->i16);
            int8x16_t v236 = (int8x16_t)v94;
            int16x8_t v237 = v94;
            int16x8_t v240 = v94;
            int16x8_t v241 = v94;
            uint64_t v93 = 2;
          }
          else if (*v85)
          {
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, (uint64_t)v81, v92, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v93 = 0;
            v94.i64[0] = 0;
            int8x16_t v236 = 0u;
            int16x8_t v237 = 0u;
            int16x8_t v240 = 0u;
            int16x8_t v241 = 0u;
          }
          uint64_t v159 = (uint64_t)v81->i64 + v93;
          unsigned int v160 = v85[1];
          if (v160 == 63)
          {
            int8x16_t v162 = *(int8x16_t *)v159;
            int16x8_t v36 = *(int16x8_t *)(v159 + 16);
            int16x8_t v37 = *(int16x8_t *)(v159 + 32);
            int8x16_t v163 = *(int8x16_t *)(v159 + 48);
            int8x16_t v244 = *(int8x16_t *)v159;
            int8x16_t v245 = (int8x16_t)v37;
            int8x16_t v248 = (int8x16_t)v36;
            int8x16_t v249 = v163;
            uint64_t v161 = 64;
          }
          else if (v160 == 1)
          {
            int8x16_t v162 = (int8x16_t)vld1q_dup_s16((const __int16 *)v159);
            int8x16_t v244 = v162;
            int8x16_t v245 = v162;
            int8x16_t v248 = v162;
            int8x16_t v249 = v162;
            uint64_t v161 = 2;
          }
          else if (v85[1])
          {
            uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v159, v160, *(int8x8_t *)v94.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v161 = 0;
            v162.i64[0] = 0;
            int8x16_t v244 = 0u;
            int8x16_t v245 = 0u;
            int8x16_t v248 = 0u;
            int8x16_t v249 = 0u;
          }
          uint64_t v164 = v159 + v161;
          unsigned int v165 = v85[2];
          if (v165 == 63)
          {
            int8x16_t v167 = *(int8x16_t *)v164;
            int16x8_t v36 = *(int16x8_t *)(v164 + 16);
            int16x8_t v37 = *(int16x8_t *)(v164 + 32);
            int8x16_t v168 = *(int8x16_t *)(v164 + 48);
            int8x16_t v238 = *(int8x16_t *)v164;
            int8x16_t v239 = (int8x16_t)v37;
            int8x16_t v242 = (int8x16_t)v36;
            int8x16_t v243 = v168;
            uint64_t v166 = 64;
          }
          else if (v165 == 1)
          {
            int8x16_t v167 = (int8x16_t)vld1q_dup_s16((const __int16 *)v164);
            int8x16_t v238 = v167;
            int8x16_t v239 = v167;
            int8x16_t v242 = v167;
            int8x16_t v243 = v167;
            uint64_t v166 = 2;
          }
          else if (v85[2])
          {
            uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 64, v164, v165, *(int8x8_t *)v162.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v166 = 0;
            v167.i64[0] = 0;
            int8x16_t v238 = 0u;
            int8x16_t v239 = 0u;
            int8x16_t v242 = 0u;
            int8x16_t v243 = 0u;
          }
          uint64_t v169 = v164 + v166;
          unsigned int v170 = v85[3];
          if (v170 == 63)
          {
            int8x16_t v172 = *(int8x16_t *)v169;
            int16x8_t v36 = *(int16x8_t *)(v169 + 16);
            int16x8_t v37 = *(int16x8_t *)(v169 + 32);
            int8x16_t v173 = *(int8x16_t *)(v169 + 48);
            int8x16_t v246 = *(int8x16_t *)v169;
            int8x16_t v247 = (int8x16_t)v37;
            int8x16_t v250 = (int8x16_t)v36;
            int8x16_t v251 = v173;
            uint64_t v171 = 64;
          }
          else if (v170 == 1)
          {
            int8x16_t v172 = (int8x16_t)vld1q_dup_s16((const __int16 *)v169);
            int8x16_t v246 = v172;
            int8x16_t v247 = v172;
            int8x16_t v250 = v172;
            int8x16_t v251 = v172;
            uint64_t v171 = 2;
          }
          else if (v85[3])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 64, v169, v170, *(int8x8_t *)v167.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v171 = 0;
            v172.i64[0] = 0;
            int8x16_t v246 = 0u;
            int8x16_t v247 = 0u;
            int8x16_t v250 = 0u;
            int8x16_t v251 = 0u;
          }
          uint64_t v174 = v169 + v171;
          unsigned int v175 = v85[4];
          if (v175 == 63)
          {
            int8x16_t v177 = *(int8x16_t *)v174;
            int16x8_t v36 = *(int16x8_t *)(v174 + 16);
            int16x8_t v37 = *(int16x8_t *)(v174 + 32);
            int8x16_t v178 = *(int8x16_t *)(v174 + 48);
            int8x16_t v252 = *(int8x16_t *)v174;
            int8x16_t v253 = (int8x16_t)v37;
            int8x16_t v256 = (int8x16_t)v36;
            int8x16_t v257 = v178;
            uint64_t v176 = 64;
          }
          else if (v175 == 1)
          {
            int8x16_t v177 = (int8x16_t)vld1q_dup_s16((const __int16 *)v174);
            int8x16_t v252 = v177;
            int8x16_t v253 = v177;
            int8x16_t v256 = v177;
            int8x16_t v257 = v177;
            uint64_t v176 = 2;
          }
          else if (v85[4])
          {
            uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v174, v175, *(int8x8_t *)v172.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v176 = 0;
            v177.i64[0] = 0;
            int8x16_t v252 = 0u;
            int8x16_t v253 = 0u;
            int8x16_t v256 = 0u;
            int8x16_t v257 = 0u;
          }
          uint64_t v179 = v174 + v176;
          unsigned int v180 = v85[5];
          if (v180 == 63)
          {
            int8x16_t v182 = *(int8x16_t *)v179;
            int16x8_t v36 = *(int16x8_t *)(v179 + 16);
            int16x8_t v37 = *(int16x8_t *)(v179 + 32);
            int8x16_t v183 = *(int8x16_t *)(v179 + 48);
            int8x16_t v260 = *(int8x16_t *)v179;
            int8x16_t v261 = (int8x16_t)v37;
            int8x16_t v264 = (int8x16_t)v36;
            int8x16_t v265 = v183;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int8x16_t v182 = (int8x16_t)vld1q_dup_s16((const __int16 *)v179);
            int8x16_t v260 = v182;
            int8x16_t v261 = v182;
            int8x16_t v264 = v182;
            int8x16_t v265 = v182;
            uint64_t v181 = 2;
          }
          else if (v85[5])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v179, v180, *(int8x8_t *)v177.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v181 = 0;
            v182.i64[0] = 0;
            int8x16_t v260 = 0u;
            int8x16_t v261 = 0u;
            int8x16_t v264 = 0u;
            int8x16_t v265 = 0u;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v85[6];
          if (v185 == 63)
          {
            int8x16_t v187 = *(int8x16_t *)v184;
            int16x8_t v36 = *(int16x8_t *)(v184 + 16);
            int16x8_t v37 = *(int16x8_t *)(v184 + 32);
            int8x16_t v188 = *(int8x16_t *)(v184 + 48);
            int8x16_t v254 = *(int8x16_t *)v184;
            int8x16_t v255 = (int8x16_t)v37;
            int8x16_t v258 = (int8x16_t)v36;
            int8x16_t v259 = v188;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int8x16_t v187 = (int8x16_t)vld1q_dup_s16((const __int16 *)v184);
            int8x16_t v254 = v187;
            int8x16_t v255 = v187;
            int8x16_t v258 = v187;
            int8x16_t v259 = v187;
            uint64_t v186 = 2;
          }
          else if (v85[6])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 64, v184, v185, *(int8x8_t *)v182.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v186 = 0;
            v187.i64[0] = 0;
            int8x16_t v254 = 0u;
            int8x16_t v255 = 0u;
            int8x16_t v258 = 0u;
            int8x16_t v259 = 0u;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v85[7];
          if (v190 == 63)
          {
            int8x16_t v38 = *(int8x16_t *)v189;
            int16x8_t v36 = *(int16x8_t *)(v189 + 16);
            int16x8_t v37 = *(int16x8_t *)(v189 + 32);
            int8x16_t v191 = *(int8x16_t *)(v189 + 48);
            int8x16_t v262 = *(int8x16_t *)v189;
            int8x16_t v263 = (int8x16_t)v37;
            int8x16_t v266 = (int8x16_t)v36;
            int8x16_t v267 = v191;
            unsigned int v43 = a7;
            uint64_t v17 = v222;
          }
          else
          {
            unsigned int v43 = a7;
            uint64_t v17 = v222;
            if (v190 == 1)
            {
              int8x16_t v38 = (int8x16_t)vld1q_dup_s16((const __int16 *)v189);
              int8x16_t v262 = v38;
              int8x16_t v263 = v38;
              int8x16_t v266 = v38;
              int8x16_t v267 = v38;
            }
            else if (v190)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 64, v189, v190, *(int8x8_t *)v187.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              v38.i64[0] = 0;
              int8x16_t v262 = 0u;
              int8x16_t v263 = 0u;
              int8x16_t v266 = 0u;
              int8x16_t v267 = 0u;
            }
          }
          unint64_t v192 = v231;
          unsigned int v44 = v41 + 1;
          if (v231)
          {
            unint64_t v193 = 0;
            int32x4_t v194 = &v236.i8[64 * (unint64_t)v229 + 8 * v230];
            unsigned int v195 = v232;
            do
            {
              if (v195)
              {
                uint64_t v196 = 0;
                uint64_t v197 = v227 + v228 * v193;
                do
                {
                  *(unsigned char *)(v197 + v196) = v194[v196];
                  ++v196;
                  unsigned int v195 = v232;
                }
                while (8 * (unint64_t)v232 > v196);
                unint64_t v192 = v231;
              }
              ++v193;
              v194 += 64;
            }
            while (v193 < v192);
          }
LABEL_48:
          BOOL v22 = v41 == v213 >> 3;
          unsigned int v41 = v44;
        }
        while (!v22);
        BOOL v22 = v21++ == v202;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v268 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v221 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v203 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v221 >> 3;
  unsigned int v202 = v203 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v215 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v214 = 0;
LABEL_32:
      unsigned int v212 = v27 - 3;
      unsigned int v207 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v200 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v214 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v214 = 0;
  unsigned int v200 = 0;
  unsigned int v207 = 0;
  unsigned int v212 = 0;
LABEL_33:
  if (v21 <= v202)
  {
    unsigned int v213 = a7 + a9 - 1;
    if (a7 >> 3 <= v213 >> 3)
    {
      uint64_t v34 = a11;
      unsigned int v224 = v19 >> 3;
      unsigned int v199 = v20 >> 3;
      int v223 = (v19 & 7) + 1;
      int v198 = (v20 & 7) + 1;
      uint64_t v209 = 4 * a11;
      uint64_t v210 = 2 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL)))))));
      v37.i64[0] = 0x1000000010;
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v208 = v38.i32[0] | v38.i32[1];
      uint64_t v206 = v38.i64[0];
      BOOL v204 = v38.i32[0] != 0;
      BOOL v205 = v38.i32[1] != 0;
      uint64_t v222 = a1;
      do
      {
        unsigned int v39 = (8 * v21) | 7;
        if (8 * v21 <= v221) {
          int v40 = v221;
        }
        else {
          int v40 = 8 * v21;
        }
        if (v203 < v39) {
          unsigned int v39 = v203;
        }
        int v211 = v40 - 8 * v21;
        int v219 = v39 - v40 + 1;
        unsigned int v41 = a7 >> 3;
        int v42 = v198;
        if (v21 != v199) {
          int v42 = 8;
        }
        unsigned int v225 = v42;
        uint64_t v218 = a2 + (v40 - v221) * v34;
        unsigned int v43 = a7;
        do
        {
          unsigned int v45 = 8 * v41;
          unsigned int v46 = 8 * (v41 + 1) - 1;
          if (8 * v41 <= v43) {
            int v47 = v43;
          }
          else {
            int v47 = 8 * v41;
          }
          if (v213 < v46) {
            unsigned int v46 = a7 + a9 - 1;
          }
          int v48 = v46 - v47 + 1;
          if (v41 == v224) {
            unsigned int v49 = v223;
          }
          else {
            unsigned int v49 = 8;
          }
          BOOL v50 = 1;
          if (8 * v21 >= v221 && v45 >= v43)
          {
            int v51 = v223;
            if (v41 != v224) {
              int v51 = 8;
            }
            BOOL v50 = v48 != v51 || v219 != v225;
          }
          if (v214)
          {
            if (v212 | v207)
            {
              int v53 = 0;
              uint64_t v54 = 0;
              BOOL v55 = v207 != 0;
              int v56 = 1;
              BOOL v58 = v212 != 0;
              unsigned int v57 = v207;
              unsigned int v59 = v212;
              do
              {
                --v59;
                if (v58) {
                  v54 |= (unint64_t)(v41 & ~(-1 << v212) & v56) << v53++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v57;
                if (v55) {
                  v54 |= (unint64_t)(v21 & ~(-1 << v207) & v56) << v53++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v56 *= 2;
                --v53;
                BOOL v55 = v57 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v57 | v59);
            }
            else
            {
              uint64_t v54 = 0;
            }
            uint64_t v67 = *(void *)(v17 + 320) * ((v41 >> v212) + (v21 >> v207) * v200) + (v54 << 9);
          }
          else
          {
            if (v208)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              int v62 = 1;
              BOOL v63 = v204;
              BOOL v64 = v205;
              int v66 = v206;
              int v65 = HIDWORD(v206);
              do
              {
                --v65;
                if (v64) {
                  v61 |= (unint64_t)(v62 & v41) << v60++;
                }
                else {
                  int v65 = 0;
                }
                --v66;
                if (v63) {
                  v61 |= (unint64_t)(v62 & v21) << v60++;
                }
                else {
                  int v66 = 0;
                }
                v62 *= 2;
                --v60;
                BOOL v63 = v66 != 0;
                BOOL v64 = v65 != 0;
              }
              while (v66 | v65);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v67 = v61 << 9;
          }
          unsigned int v68 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
          }
          unsigned int v71 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 7;
          if (v72 < 0x10)
          {
            unsigned int v73 = 0;
            if (!v70)
            {
LABEL_115:
              unint64_t v75 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 3) - 1)));
            if (!(v73 | v70)) {
              goto LABEL_115;
            }
          }
          int v74 = 0;
          unint64_t v75 = 0;
          BOOL v76 = v70 != 0;
          BOOL v77 = v73 != 0;
          int v78 = 1;
          do
          {
            --v70;
            BOOL v79 = !v76;
            if (v76)
            {
              unint64_t v80 = ((unint64_t)(v78 & v41) << v74) | v75;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v80 = v75;
            }
            if (!v79) {
              ++v74;
            }
            --v73;
            if (v77)
            {
              unint64_t v75 = ((unint64_t)(v78 & v21) << v74) | v80;
            }
            else
            {
              unsigned int v73 = 0;
              unint64_t v75 = v80;
            }
            if (v77) {
              ++v74;
            }
            v78 *= 2;
            --v74;
            BOOL v77 = v73 != 0;
            BOOL v76 = v70 != 0;
          }
          while (v73 | v70);
LABEL_116:
          int8x8_t v81 = (int16x8_t *)(a3 + v67);
          if (v215)
          {
            int v82 = v48;
            unsigned int v83 = v49;
            BOOL v84 = v50;
            memcpy(__dst, (const void *)(a3 + v67), sizeof(__dst));
            BOOL v50 = v84;
            unsigned int v49 = v83;
            int v48 = v82;
            int8x8_t v81 = (int16x8_t *)__dst;
          }
          int8x8_t v85 = (unsigned __int8 *)(a4 + 8 * v75);
          uint64_t v86 = v218 + 8 * (v47 - v43);
          char v87 = v49 < 8 || v50;
          if ((v87 & 1) == 0 && v225 > 7)
          {
            unsigned int v88 = *v85;
            if (v88 == 63)
            {
              int16x8_t v90 = *v81;
              int16x8_t v36 = v81[1];
              int16x8_t v37 = v81[2];
              int16x8_t v96 = v81[3];
              *(int16x8_t *)uint64_t v86 = *v81;
              *(int16x8_t *)(v86 + 16) = v37;
              uint64_t v34 = a11;
              int8x8_t v97 = (int16x8_t *)(v86 + a11);
              int16x8_t *v97 = v36;
              v97[1] = v96;
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              if (v88 == 1)
              {
                int16x8_t v90 = vld1q_dup_s16(v81->i16);
                *(int16x8_t *)uint64_t v86 = v90;
                *(int16x8_t *)(v86 + 16) = v90;
                int8x8_t v95 = (int16x8_t *)(v86 + a11);
                *int8x8_t v95 = v90;
                v95[1] = v90;
                uint64_t v89 = 2;
              }
              else if (*v85)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v86, a11, (uint64_t)v81, v88, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              else
              {
                uint64_t v89 = 0;
                v90.i64[0] = 0;
                *(_OWORD *)uint64_t v86 = 0u;
                *(_OWORD *)(v86 + 16) = 0u;
                int8x8_t v91 = (_OWORD *)(v86 + a11);
                *int8x8_t v91 = 0u;
                v91[1] = 0u;
              }
            }
            uint64_t v98 = (uint64_t)v81->i64 + v89;
            int8x8_t v99 = (int16x8_t *)(v86 + v210);
            unsigned int v100 = v85[1];
            if (v100 == 63)
            {
              int16x8_t v102 = *(int16x8_t *)v98;
              int16x8_t v36 = *(int16x8_t *)(v98 + 16);
              int16x8_t v37 = *(int16x8_t *)(v98 + 32);
              long long v105 = *(_OWORD *)(v98 + 48);
              int16x8_t *v99 = *(int16x8_t *)v98;
              v99[1] = v37;
              uint64_t v106 = &v99->i8[v34];
              *(int16x8_t *)uint64_t v106 = v36;
              *((_OWORD *)v106 + 1) = v105;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v102 = vld1q_dup_s16((const __int16 *)v98);
              int16x8_t *v99 = v102;
              v99[1] = v102;
              uint64_t v104 = (int16x8_t *)((char *)v99 + v34);
              int16x8_t *v104 = v102;
              v104[1] = v102;
              uint64_t v101 = 2;
            }
            else if (v85[1])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v86 + v210), v34, v98, v100, *(int8x8_t *)v90.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v101 = 0;
              v102.i64[0] = 0;
              int16x8_t *v99 = 0u;
              v99[1] = 0u;
              int8x8_t v103 = &v99->i8[v34];
              *(_OWORD *)int8x8_t v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            uint64_t v107 = v98 + v101;
            uint64_t v108 = (int8x16_t *)(v86 + 32);
            unsigned int v109 = v85[2];
            if (v109 == 63)
            {
              int16x8_t v111 = *(int16x8_t *)v107;
              int16x8_t v36 = *(int16x8_t *)(v107 + 16);
              int16x8_t v37 = *(int16x8_t *)(v107 + 32);
              long long v114 = *(_OWORD *)(v107 + 48);
              *(_OWORD *)(v86 + 32) = *(_OWORD *)v107;
              *(int16x8_t *)(v86 + 48) = v37;
              int8x8_t v115 = &v108->i8[v34];
              *(int16x8_t *)int8x8_t v115 = v36;
              *((_OWORD *)v115 + 1) = v114;
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v111 = vld1q_dup_s16((const __int16 *)v107);
              *(int16x8_t *)(v86 + 32) = v111;
              *(int16x8_t *)(v86 + 48) = v111;
              unsigned int v113 = (int16x8_t *)&v108->i8[v34];
              int16x8_t *v113 = v111;
              v113[1] = v111;
              uint64_t v110 = 2;
            }
            else if (v85[2])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v34, v107, v109, *(int8x8_t *)v102.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v110 = 0;
              v111.i64[0] = 0;
              *uint64_t v108 = 0u;
              *(_OWORD *)(v86 + 48) = 0u;
              uint64_t v112 = &v108->i8[v34];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
            }
            uint64_t v116 = v107 + v110;
            unsigned int v117 = (int8x16_t *)&v99[2];
            unsigned int v118 = v85[3];
            if (v118 == 63)
            {
              int16x8_t v120 = *(int16x8_t *)v116;
              int16x8_t v36 = *(int16x8_t *)(v116 + 16);
              int16x8_t v37 = *(int16x8_t *)(v116 + 32);
              long long v123 = *(_OWORD *)(v116 + 48);
              v99[2] = *(int16x8_t *)v116;
              v99[3] = v37;
              BOOL v124 = &v117->i8[v34];
              *(int16x8_t *)BOOL v124 = v36;
              *((_OWORD *)v124 + 1) = v123;
              uint64_t v119 = 64;
            }
            else if (v118 == 1)
            {
              int16x8_t v120 = vld1q_dup_s16((const __int16 *)v116);
              v99[2] = v120;
              v99[3] = v120;
              int v122 = (int16x8_t *)&v117->i8[v34];
              *int v122 = v120;
              v122[1] = v120;
              uint64_t v119 = 2;
            }
            else if (v85[3])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, v34, v116, v118, *(int8x8_t *)v111.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v119 = 0;
              v120.i64[0] = 0;
              *unsigned int v117 = 0u;
              v99[3] = 0u;
              uint64_t v121 = &v117->i8[v34];
              *(_OWORD *)uint64_t v121 = 0u;
              *((_OWORD *)v121 + 1) = 0u;
            }
            uint64_t v125 = v116 + v119;
            int v126 = (int16x8_t *)(v86 + v209);
            unsigned int v127 = v85[4];
            if (v127 == 63)
            {
              int16x8_t v129 = *(int16x8_t *)v125;
              int16x8_t v36 = *(int16x8_t *)(v125 + 16);
              int16x8_t v37 = *(int16x8_t *)(v125 + 32);
              long long v132 = *(_OWORD *)(v125 + 48);
              *int v126 = *(int16x8_t *)v125;
              v126[1] = v37;
              uint64_t v133 = &v126->i8[v34];
              *(int16x8_t *)uint64_t v133 = v36;
              *((_OWORD *)v133 + 1) = v132;
              uint64_t v128 = 64;
            }
            else if (v127 == 1)
            {
              int16x8_t v129 = vld1q_dup_s16((const __int16 *)v125);
              *int v126 = v129;
              v126[1] = v129;
              unsigned int v131 = (int16x8_t *)((char *)v126 + v34);
              int16x8_t *v131 = v129;
              v131[1] = v129;
              uint64_t v128 = 2;
            }
            else if (v85[4])
            {
              uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v86 + v209), v34, v125, v127, *(int8x8_t *)v120.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v128 = 0;
              v129.i64[0] = 0;
              *int v126 = 0u;
              v126[1] = 0u;
              unsigned int v130 = &v126->i8[v34];
              *(_OWORD *)unsigned int v130 = 0u;
              *((_OWORD *)v130 + 1) = 0u;
            }
            uint64_t v134 = v125 + v128;
            uint64_t v135 = v86 + 6 * a11;
            unsigned int v136 = v85[5];
            if (v136 == 63)
            {
              int16x8_t v138 = *(int16x8_t *)v134;
              int16x8_t v36 = *(int16x8_t *)(v134 + 16);
              int16x8_t v37 = *(int16x8_t *)(v134 + 32);
              int16x8_t v141 = *(int16x8_t *)(v134 + 48);
              *(_OWORD *)uint64_t v135 = *(_OWORD *)v134;
              *(int16x8_t *)(v135 + 16) = v37;
              unsigned int v142 = (int16x8_t *)(v135 + v34);
              *unsigned int v142 = v36;
              v142[1] = v141;
              uint64_t v137 = 64;
            }
            else if (v136 == 1)
            {
              int16x8_t v138 = vld1q_dup_s16((const __int16 *)v134);
              *(int16x8_t *)uint64_t v135 = v138;
              *(int16x8_t *)(v135 + 16) = v138;
              int8x8_t v140 = (int16x8_t *)(v135 + v34);
              *int8x8_t v140 = v138;
              v140[1] = v138;
              uint64_t v137 = 2;
            }
            else if (v85[5])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v135, v34, v134, v136, *(int8x8_t *)v129.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v137 = 0;
              v138.i64[0] = 0;
              *(_OWORD *)uint64_t v135 = 0u;
              *(_OWORD *)(v135 + 16) = 0u;
              BOOL v139 = (_OWORD *)(v135 + v34);
              _OWORD *v139 = 0u;
              v139[1] = 0u;
            }
            uint64_t v143 = v134 + v137;
            int v144 = (int8x16_t *)&v126[2];
            unsigned int v145 = v85[6];
            if (v145 == 63)
            {
              int16x8_t v147 = *(int16x8_t *)v143;
              int16x8_t v36 = *(int16x8_t *)(v143 + 16);
              int16x8_t v37 = *(int16x8_t *)(v143 + 32);
              long long v150 = *(_OWORD *)(v143 + 48);
              v126[2] = *(int16x8_t *)v143;
              v126[3] = v37;
              int v151 = &v144->i8[v34];
              *(int16x8_t *)int v151 = v36;
              *((_OWORD *)v151 + 1) = v150;
              uint64_t v146 = 64;
            }
            else if (v145 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v143);
              v126[2] = v147;
              v126[3] = v147;
              unsigned int v149 = (int16x8_t *)&v144->i8[v34];
              int16x8_t *v149 = v147;
              v149[1] = v147;
              uint64_t v146 = 2;
            }
            else if (v85[6])
            {
              uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v144, v34, v143, v145, *(int8x8_t *)v138.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v146 = 0;
              v147.i64[0] = 0;
              int8x16_t *v144 = 0u;
              v126[3] = 0u;
              int v148 = &v144->i8[v34];
              *(_OWORD *)int v148 = 0u;
              *((_OWORD *)v148 + 1) = 0u;
            }
            uint64_t v152 = v143 + v146;
            unsigned int v153 = (int8x16_t *)(v135 + 32);
            unsigned int v154 = v85[7];
            if (v154 == 63)
            {
              int8x16_t v38 = *(int8x16_t *)v152;
              int16x8_t v36 = *(int16x8_t *)(v152 + 16);
              int16x8_t v37 = *(int16x8_t *)(v152 + 32);
              long long v156 = *(_OWORD *)(v152 + 48);
              *(_OWORD *)(v135 + 32) = *(_OWORD *)v152;
              *(int16x8_t *)(v135 + 48) = v37;
              unsigned int v157 = &v153->i8[v34];
              *(int16x8_t *)unsigned int v157 = v36;
              *((_OWORD *)v157 + 1) = v156;
              unsigned int v43 = a7;
              uint64_t v17 = v222;
            }
            else
            {
              uint64_t v17 = v222;
              if (v154 == 1)
              {
                int8x16_t v38 = (int8x16_t)vld1q_dup_s16((const __int16 *)v152);
                *(int8x16_t *)(v135 + 32) = v38;
                *(int8x16_t *)(v135 + 48) = v38;
LABEL_182:
                unsigned int v155 = (int8x16_t *)((char *)v153 + v34);
                *unsigned int v155 = v38;
                v155[1] = v38;
              }
              else
              {
                if (!v154)
                {
                  int8x16_t v38 = 0uLL;
                  *unsigned int v153 = 0u;
                  *(_OWORD *)(v135 + 48) = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v153, v34, v152, v154, *(int8x8_t *)v147.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              unsigned int v43 = a7;
            }
LABEL_47:
            unsigned int v44 = v41 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v222;
          block[5] = v81;
          char v233 = v49;
          char v234 = v225;
          unsigned int v229 = v211;
          unsigned int v230 = v47 - v45;
          block[6] = v85;
          uint64_t v227 = v86;
          uint64_t v34 = a11;
          uint64_t v228 = a11;
          unsigned int v231 = v219;
          unsigned int v232 = v48;
          if (v50)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v222 + 8) + 7384), block);
            unsigned int v43 = a7;
            uint64_t v17 = v222;
            goto LABEL_47;
          }
          unsigned int v92 = *v85;
          if (v92 == 63)
          {
            int16x8_t v94 = *v81;
            int16x8_t v36 = v81[1];
            int16x8_t v37 = v81[2];
            int16x8_t v158 = v81[3];
            int8x16_t v236 = *(int8x16_t *)v81;
            int16x8_t v237 = v37;
            int16x8_t v240 = v36;
            int16x8_t v241 = v158;
            uint64_t v93 = 64;
          }
          else if (v92 == 1)
          {
            int16x8_t v94 = vld1q_dup_s16(v81->i16);
            int8x16_t v236 = (int8x16_t)v94;
            int16x8_t v237 = v94;
            int16x8_t v240 = v94;
            int16x8_t v241 = v94;
            uint64_t v93 = 2;
          }
          else if (*v85)
          {
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 64, (uint64_t)v81, v92, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v93 = 0;
            v94.i64[0] = 0;
            int8x16_t v236 = 0u;
            int16x8_t v237 = 0u;
            int16x8_t v240 = 0u;
            int16x8_t v241 = 0u;
          }
          uint64_t v159 = (uint64_t)v81->i64 + v93;
          unsigned int v160 = v85[1];
          if (v160 == 63)
          {
            int8x16_t v162 = *(int8x16_t *)v159;
            int16x8_t v36 = *(int16x8_t *)(v159 + 16);
            int16x8_t v37 = *(int16x8_t *)(v159 + 32);
            int8x16_t v163 = *(int8x16_t *)(v159 + 48);
            int8x16_t v244 = *(int8x16_t *)v159;
            int8x16_t v245 = (int8x16_t)v37;
            int8x16_t v248 = (int8x16_t)v36;
            int8x16_t v249 = v163;
            uint64_t v161 = 64;
          }
          else if (v160 == 1)
          {
            int8x16_t v162 = (int8x16_t)vld1q_dup_s16((const __int16 *)v159);
            int8x16_t v244 = v162;
            int8x16_t v245 = v162;
            int8x16_t v248 = v162;
            int8x16_t v249 = v162;
            uint64_t v161 = 2;
          }
          else if (v85[1])
          {
            uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v159, v160, *(int8x8_t *)v94.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v161 = 0;
            v162.i64[0] = 0;
            int8x16_t v244 = 0u;
            int8x16_t v245 = 0u;
            int8x16_t v248 = 0u;
            int8x16_t v249 = 0u;
          }
          uint64_t v164 = v159 + v161;
          unsigned int v165 = v85[2];
          if (v165 == 63)
          {
            int8x16_t v167 = *(int8x16_t *)v164;
            int16x8_t v36 = *(int16x8_t *)(v164 + 16);
            int16x8_t v37 = *(int16x8_t *)(v164 + 32);
            int8x16_t v168 = *(int8x16_t *)(v164 + 48);
            int8x16_t v238 = *(int8x16_t *)v164;
            int8x16_t v239 = (int8x16_t)v37;
            int8x16_t v242 = (int8x16_t)v36;
            int8x16_t v243 = v168;
            uint64_t v166 = 64;
          }
          else if (v165 == 1)
          {
            int8x16_t v167 = (int8x16_t)vld1q_dup_s16((const __int16 *)v164);
            int8x16_t v238 = v167;
            int8x16_t v239 = v167;
            int8x16_t v242 = v167;
            int8x16_t v243 = v167;
            uint64_t v166 = 2;
          }
          else if (v85[2])
          {
            uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 64, v164, v165, *(int8x8_t *)v162.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v166 = 0;
            v167.i64[0] = 0;
            int8x16_t v238 = 0u;
            int8x16_t v239 = 0u;
            int8x16_t v242 = 0u;
            int8x16_t v243 = 0u;
          }
          uint64_t v169 = v164 + v166;
          unsigned int v170 = v85[3];
          if (v170 == 63)
          {
            int8x16_t v172 = *(int8x16_t *)v169;
            int16x8_t v36 = *(int16x8_t *)(v169 + 16);
            int16x8_t v37 = *(int16x8_t *)(v169 + 32);
            int8x16_t v173 = *(int8x16_t *)(v169 + 48);
            int8x16_t v246 = *(int8x16_t *)v169;
            int8x16_t v247 = (int8x16_t)v37;
            int8x16_t v250 = (int8x16_t)v36;
            int8x16_t v251 = v173;
            uint64_t v171 = 64;
          }
          else if (v170 == 1)
          {
            int8x16_t v172 = (int8x16_t)vld1q_dup_s16((const __int16 *)v169);
            int8x16_t v246 = v172;
            int8x16_t v247 = v172;
            int8x16_t v250 = v172;
            int8x16_t v251 = v172;
            uint64_t v171 = 2;
          }
          else if (v85[3])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 64, v169, v170, *(int8x8_t *)v167.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v171 = 0;
            v172.i64[0] = 0;
            int8x16_t v246 = 0u;
            int8x16_t v247 = 0u;
            int8x16_t v250 = 0u;
            int8x16_t v251 = 0u;
          }
          uint64_t v174 = v169 + v171;
          unsigned int v175 = v85[4];
          if (v175 == 63)
          {
            int8x16_t v177 = *(int8x16_t *)v174;
            int16x8_t v36 = *(int16x8_t *)(v174 + 16);
            int16x8_t v37 = *(int16x8_t *)(v174 + 32);
            int8x16_t v178 = *(int8x16_t *)(v174 + 48);
            int8x16_t v252 = *(int8x16_t *)v174;
            int8x16_t v253 = (int8x16_t)v37;
            int8x16_t v256 = (int8x16_t)v36;
            int8x16_t v257 = v178;
            uint64_t v176 = 64;
          }
          else if (v175 == 1)
          {
            int8x16_t v177 = (int8x16_t)vld1q_dup_s16((const __int16 *)v174);
            int8x16_t v252 = v177;
            int8x16_t v253 = v177;
            int8x16_t v256 = v177;
            int8x16_t v257 = v177;
            uint64_t v176 = 2;
          }
          else if (v85[4])
          {
            uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 64, v174, v175, *(int8x8_t *)v172.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v176 = 0;
            v177.i64[0] = 0;
            int8x16_t v252 = 0u;
            int8x16_t v253 = 0u;
            int8x16_t v256 = 0u;
            int8x16_t v257 = 0u;
          }
          uint64_t v179 = v174 + v176;
          unsigned int v180 = v85[5];
          if (v180 == 63)
          {
            int8x16_t v182 = *(int8x16_t *)v179;
            int16x8_t v36 = *(int16x8_t *)(v179 + 16);
            int16x8_t v37 = *(int16x8_t *)(v179 + 32);
            int8x16_t v183 = *(int8x16_t *)(v179 + 48);
            int8x16_t v260 = *(int8x16_t *)v179;
            int8x16_t v261 = (int8x16_t)v37;
            int8x16_t v264 = (int8x16_t)v36;
            int8x16_t v265 = v183;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int8x16_t v182 = (int8x16_t)vld1q_dup_s16((const __int16 *)v179);
            int8x16_t v260 = v182;
            int8x16_t v261 = v182;
            int8x16_t v264 = v182;
            int8x16_t v265 = v182;
            uint64_t v181 = 2;
          }
          else if (v85[5])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v179, v180, *(int8x8_t *)v177.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v181 = 0;
            v182.i64[0] = 0;
            int8x16_t v260 = 0u;
            int8x16_t v261 = 0u;
            int8x16_t v264 = 0u;
            int8x16_t v265 = 0u;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v85[6];
          if (v185 == 63)
          {
            int8x16_t v187 = *(int8x16_t *)v184;
            int16x8_t v36 = *(int16x8_t *)(v184 + 16);
            int16x8_t v37 = *(int16x8_t *)(v184 + 32);
            int8x16_t v188 = *(int8x16_t *)(v184 + 48);
            int8x16_t v254 = *(int8x16_t *)v184;
            int8x16_t v255 = (int8x16_t)v37;
            int8x16_t v258 = (int8x16_t)v36;
            int8x16_t v259 = v188;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int8x16_t v187 = (int8x16_t)vld1q_dup_s16((const __int16 *)v184);
            int8x16_t v254 = v187;
            int8x16_t v255 = v187;
            int8x16_t v258 = v187;
            int8x16_t v259 = v187;
            uint64_t v186 = 2;
          }
          else if (v85[6])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 64, v184, v185, *(int8x8_t *)v182.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v186 = 0;
            v187.i64[0] = 0;
            int8x16_t v254 = 0u;
            int8x16_t v255 = 0u;
            int8x16_t v258 = 0u;
            int8x16_t v259 = 0u;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v85[7];
          if (v190 == 63)
          {
            int8x16_t v38 = *(int8x16_t *)v189;
            int16x8_t v36 = *(int16x8_t *)(v189 + 16);
            int16x8_t v37 = *(int16x8_t *)(v189 + 32);
            int8x16_t v191 = *(int8x16_t *)(v189 + 48);
            int8x16_t v262 = *(int8x16_t *)v189;
            int8x16_t v263 = (int8x16_t)v37;
            int8x16_t v266 = (int8x16_t)v36;
            int8x16_t v267 = v191;
            unsigned int v43 = a7;
            uint64_t v17 = v222;
          }
          else
          {
            unsigned int v43 = a7;
            uint64_t v17 = v222;
            if (v190 == 1)
            {
              int8x16_t v38 = (int8x16_t)vld1q_dup_s16((const __int16 *)v189);
              int8x16_t v262 = v38;
              int8x16_t v263 = v38;
              int8x16_t v266 = v38;
              int8x16_t v267 = v38;
            }
            else if (v190)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 64, v189, v190, *(int8x8_t *)v187.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              v38.i64[0] = 0;
              int8x16_t v262 = 0u;
              int8x16_t v263 = 0u;
              int8x16_t v266 = 0u;
              int8x16_t v267 = 0u;
            }
          }
          unint64_t v192 = v231;
          unsigned int v44 = v41 + 1;
          if (v231)
          {
            unint64_t v193 = 0;
            int32x4_t v194 = &v236.i8[64 * (unint64_t)v229 + 8 * v230];
            unsigned int v195 = v232;
            do
            {
              if (v195)
              {
                uint64_t v196 = 0;
                uint64_t v197 = v227 + v228 * v193;
                do
                {
                  *(unsigned char *)(v197 + v196) = v194[v196];
                  ++v196;
                  unsigned int v195 = v232;
                }
                while (8 * (unint64_t)v232 > v196);
                unint64_t v192 = v231;
              }
              ++v193;
              v194 += 64;
            }
            while (v193 < v192);
          }
LABEL_48:
          BOOL v22 = v41 == v213 >> 3;
          unsigned int v41 = v44;
        }
        while (!v22);
        BOOL v22 = v21++ == v202;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v265 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v218 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v199 = a8 + a10 - 1;
  unsigned int v201 = v199 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v212 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v201)
  {
    unsigned int v210 = a7 + a9 - 1;
    unsigned int v198 = a7 >> 3;
    if (a7 >> 3 <= v210 >> 3)
    {
      uint64_t v25 = a11;
      unsigned int v195 = a5 - 1;
      unsigned int v221 = (a5 - 1) >> 3;
      int v220 = ((a5 - 1) & 7) + 1;
      int v196 = ((a6 - 1) & 7) + 1;
      unsigned int v197 = (a6 - 1) >> 3;
      uint64_t v202 = 4 * a11;
      uint64_t v203 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL)))))));
      v28.i64[0] = 0x1000000010;
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v27.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v208 = v29.i32[0] | v29.i32[1];
      BOOL v206 = v29.i32[1] != 0;
      uint64_t v207 = v29.i64[0];
      BOOL v205 = v29.i32[0] != 0;
      unint64_t v194 = 8 * v19 * (unint64_t)v18;
      unsigned int v209 = a7;
      uint64_t v219 = v16;
      do
      {
        unsigned int v30 = (8 * v17) | 7;
        if (8 * v17 <= v218) {
          int v31 = v218;
        }
        else {
          int v31 = 8 * v17;
        }
        unsigned int v32 = v198;
        if (v199 < v30) {
          unsigned int v30 = v199;
        }
        unsigned int v217 = 8 * v17;
        int v204 = v31 - 8 * v17;
        int v216 = v30 - v31 + 1;
        int v33 = v196;
        if (v17 != v197) {
          int v33 = 8;
        }
        unsigned int v222 = v33;
        uint64_t v215 = a2 + (v31 - v218) * v25;
        do
        {
          unsigned int v35 = 8 * v32;
          unsigned int v36 = 8 * (v32 + 1) - 1;
          if (8 * v32 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v32;
          }
          if (v210 < v36) {
            unsigned int v36 = v210;
          }
          int v38 = v36 - v37 + 1;
          if (v32 == v221) {
            unsigned int v39 = v220;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v217 >= v218 && v35 >= a7)
          {
            int v41 = v220;
            if (v32 != v221) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v216 != v222;
          }
          if (isLevelTiled)
          {
            unsigned int v178 = 0;
            uint64_t v179 = v194 >> (*(unsigned char *)(v16 + 57) != 0);
            char v180 = 1;
            if (v179 > 127)
            {
              if (v179 > 511)
              {
                if (v179 == 512)
                {
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v178 = 16;
                  unsigned int v182 = 16;
                }
                else
                {
                  char v181 = 1;
                  unsigned int v182 = 0;
                  if (v179 == 1024)
                  {
                    char v180 = 0;
                    unsigned int v182 = 8;
                    unsigned int v178 = 16;
                  }
                }
              }
              else if (v179 == 128)
              {
                char v180 = 0;
                char v181 = 0;
                unsigned int v178 = 32;
                unsigned int v182 = 32;
              }
              else
              {
                char v181 = 1;
                unsigned int v182 = 0;
                if (v179 == 256)
                {
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v182 = 16;
                  unsigned int v178 = 32;
                }
              }
            }
            else
            {
              char v181 = 1;
              unsigned int v182 = 0;
              switch(v179)
              {
                case 4:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v182 = 128;
                  unsigned int v178 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v178 = 128;
                  unsigned int v182 = 128;
                  break;
                case 16:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v182 = 64;
                  unsigned int v178 = 128;
                  break;
                case 32:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v178 = 64;
                  unsigned int v182 = 64;
                  break;
                default:
                  if (v179 == 64)
                  {
                    char v180 = 0;
                    char v181 = 0;
                    unsigned int v182 = 32;
                    unsigned int v178 = 64;
                  }
                  break;
              }
            }
            unsigned int v183 = (v178 >> 3) - 1;
            if (v180) {
              unsigned int v184 = 0;
            }
            else {
              unsigned int v184 = 32 - __clz(~(-1 << -(char)__clz(v183)));
            }
            unsigned int v185 = (v182 >> 3) - 1;
            if (v181)
            {
              unsigned int v186 = 0;
              if (v184) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v186 = 32 - __clz(~(-1 << -(char)__clz(v185)));
              if (v186 | v184)
              {
LABEL_234:
                int v187 = 0;
                uint64_t v188 = 0;
                int v189 = v32 & v183;
                int v190 = v17 & v185;
                BOOL v191 = v184 != 0;
                BOOL v192 = v186 != 0;
                int v193 = 1;
                do
                {
                  --v184;
                  if (v191) {
                    v188 |= (unint64_t)(v193 & v189) << v187++;
                  }
                  else {
                    unsigned int v184 = 0;
                  }
                  --v186;
                  if (v192) {
                    v188 |= (unint64_t)(v193 & v190) << v187++;
                  }
                  else {
                    unsigned int v186 = 0;
                  }
                  v193 *= 2;
                  --v187;
                  BOOL v192 = v186 != 0;
                  BOOL v191 = v184 != 0;
                }
                while (v186 | v184);
                goto LABEL_246;
              }
            }
            uint64_t v188 = 0;
LABEL_246:
            unint64_t v50 = ((unint64_t)(v35 / v178 + v217 / v182 * ((v178 + v195) / v178)) << 14) + (v188 << 9);
            goto LABEL_59;
          }
          if (v208)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v205;
            BOOL v47 = v206;
            int v49 = v207;
            int v48 = HIDWORD(v207);
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v32) << v43++;
              }
              else {
                int v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                int v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          if (v56 | v53)
          {
            int v57 = 0;
            unint64_t v58 = 0;
            BOOL v59 = v53 != 0;
            BOOL v60 = v56 != 0;
            int v61 = 1;
            do
            {
              --v53;
              BOOL v62 = !v59;
              if (v59)
              {
                unint64_t v63 = ((unint64_t)(v61 & v32) << v57) | v58;
              }
              else
              {
                unsigned int v53 = 0;
                unint64_t v63 = v58;
              }
              if (!v62) {
                ++v57;
              }
              --v56;
              if (v60)
              {
                unint64_t v58 = ((unint64_t)(v61 & v17) << v57) | v63;
              }
              else
              {
                unsigned int v56 = 0;
                unint64_t v58 = v63;
              }
              if (v60) {
                ++v57;
              }
              v61 *= 2;
              --v57;
              BOOL v60 = v56 != 0;
              BOOL v59 = v53 != 0;
            }
            while (v56 | v53);
          }
          else
          {
            unint64_t v58 = 0;
          }
          BOOL v64 = (int8x16_t *)(a3 + v50);
          if (v212)
          {
            memcpy(__dst, v64, sizeof(__dst));
            BOOL v64 = (int8x16_t *)__dst;
          }
          int v65 = (unsigned __int8 *)(a4 + 8 * v58);
          int v66 = (int8x16_t *)(v215 + 8 * (v37 - a7));
          char v67 = v39 < 8 || v40;
          if ((v67 & 1) == 0 && v222 > 7)
          {
            unsigned int v68 = *v65;
            if (v68 == 63)
            {
              int8x16_t v70 = *v64;
              int8x16_t v27 = v64[1];
              int8x16_t v28 = v64[2];
              int8x16_t v76 = v64[3];
              *int v66 = *v64;
              v66[1] = v28;
              uint64_t v25 = a11;
              BOOL v77 = (int8x16_t *)((char *)v66 + a11);
              *BOOL v77 = v27;
              v77[1] = v76;
              uint64_t v69 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              if (v68 == 1)
              {
                int8x16_t v70 = (int8x16_t)vld1q_dup_s16(v64->i16);
                *int v66 = v70;
                v66[1] = v70;
                unint64_t v75 = (int8x16_t *)((char *)v66 + a11);
                *unint64_t v75 = v70;
                v75[1] = v70;
                uint64_t v69 = 2;
              }
              else if (*v65)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v64, v68, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                uint64_t v69 = 0;
                v70.i64[0] = 0;
                *int v66 = 0u;
                v66[1] = 0u;
                unsigned int v71 = &v66->i8[a11];
                *(_OWORD *)unsigned int v71 = 0u;
                *((_OWORD *)v71 + 1) = 0u;
              }
            }
            uint64_t v78 = (uint64_t)v64->i64 + v69;
            BOOL v79 = (int16x8_t *)&v66->i8[v203];
            unsigned int v80 = v65[1];
            if (v80 == 63)
            {
              int16x8_t v82 = *(int16x8_t *)v78;
              int8x16_t v27 = *(int8x16_t *)(v78 + 16);
              int8x16_t v28 = *(int8x16_t *)(v78 + 32);
              int8x16_t v85 = *(int8x16_t *)(v78 + 48);
              *BOOL v79 = *(int16x8_t *)v78;
              v79[1] = (int16x8_t)v28;
              uint64_t v86 = (int8x16_t *)&v79->i8[v25];
              int8x16_t *v86 = v27;
              v86[1] = v85;
              uint64_t v81 = 64;
            }
            else if (v80 == 1)
            {
              int16x8_t v82 = vld1q_dup_s16((const __int16 *)v78);
              *BOOL v79 = v82;
              v79[1] = v82;
              BOOL v84 = (int16x8_t *)((char *)v79 + v25);
              *BOOL v84 = v82;
              v84[1] = v82;
              uint64_t v81 = 2;
            }
            else if (v65[1])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)((char *)v66 + v203), v25, v78, v80, *(int8x8_t *)v70.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v81 = 0;
              v82.i64[0] = 0;
              *BOOL v79 = 0u;
              v79[1] = 0u;
              unsigned int v83 = &v79->i8[v25];
              *(_OWORD *)unsigned int v83 = 0u;
              *((_OWORD *)v83 + 1) = 0u;
            }
            uint64_t v87 = v78 + v81;
            unsigned int v88 = v66 + 2;
            unsigned int v89 = v65[2];
            if (v89 == 63)
            {
              int16x8_t v91 = *(int16x8_t *)v87;
              int8x16_t v27 = *(int8x16_t *)(v87 + 16);
              int8x16_t v28 = *(int8x16_t *)(v87 + 32);
              long long v94 = *(_OWORD *)(v87 + 48);
              v66[2] = *(int8x16_t *)v87;
              v66[3] = v28;
              int8x8_t v95 = &v88->i8[v25];
              *(int8x16_t *)int8x8_t v95 = v27;
              *((_OWORD *)v95 + 1) = v94;
              uint64_t v90 = 64;
            }
            else if (v89 == 1)
            {
              int16x8_t v91 = vld1q_dup_s16((const __int16 *)v87);
              v66[2] = (int8x16_t)v91;
              v66[3] = (int8x16_t)v91;
              uint64_t v93 = (int16x8_t *)&v88->i8[v25];
              *uint64_t v93 = v91;
              v93[1] = v91;
              uint64_t v90 = 2;
            }
            else if (v65[2])
            {
              uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, v25, v87, v89, *(int8x8_t *)v82.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v90 = 0;
              v91.i64[0] = 0;
              *unsigned int v88 = 0u;
              v66[3] = 0u;
              unsigned int v92 = &v88->i8[v25];
              *(_OWORD *)unsigned int v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
            }
            uint64_t v96 = v87 + v90;
            int8x8_t v97 = (int8x16_t *)&v79[2];
            unsigned int v98 = v65[3];
            if (v98 == 63)
            {
              int16x8_t v100 = *(int16x8_t *)v96;
              int8x16_t v27 = *(int8x16_t *)(v96 + 16);
              int8x16_t v28 = *(int8x16_t *)(v96 + 32);
              long long v103 = *(_OWORD *)(v96 + 48);
              v79[2] = *(int16x8_t *)v96;
              v79[3] = (int16x8_t)v28;
              uint64_t v104 = &v97->i8[v25];
              *(int8x16_t *)uint64_t v104 = v27;
              *((_OWORD *)v104 + 1) = v103;
              uint64_t v99 = 64;
            }
            else if (v98 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v96);
              v79[2] = v100;
              v79[3] = v100;
              int16x8_t v102 = (int16x8_t *)&v97->i8[v25];
              *int16x8_t v102 = v100;
              v102[1] = v100;
              uint64_t v99 = 2;
            }
            else if (v65[3])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v97, v25, v96, v98, *(int8x8_t *)v91.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v99 = 0;
              v100.i64[0] = 0;
              int8x16_t *v97 = 0u;
              v79[3] = 0u;
              uint64_t v101 = &v97->i8[v25];
              *(_OWORD *)uint64_t v101 = 0u;
              *((_OWORD *)v101 + 1) = 0u;
            }
            uint64_t v105 = v96 + v99;
            uint64_t v106 = (int16x8_t *)&v66->i8[v202];
            unsigned int v107 = v65[4];
            if (v107 == 63)
            {
              int16x8_t v109 = *(int16x8_t *)v105;
              int8x16_t v27 = *(int8x16_t *)(v105 + 16);
              int8x16_t v28 = *(int8x16_t *)(v105 + 32);
              int8x16_t v112 = *(int8x16_t *)(v105 + 48);
              *uint64_t v106 = *(int16x8_t *)v105;
              v106[1] = (int16x8_t)v28;
              unsigned int v113 = (int8x16_t *)&v106->i8[v25];
              int8x16_t *v113 = v27;
              v113[1] = v112;
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v109 = vld1q_dup_s16((const __int16 *)v105);
              *uint64_t v106 = v109;
              v106[1] = v109;
              int16x8_t v111 = (int16x8_t *)((char *)v106 + v25);
              int16x8_t *v111 = v109;
              v111[1] = v109;
              uint64_t v108 = 2;
            }
            else if (v65[4])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)((char *)v66 + v202), v25, v105, v107, *(int8x8_t *)v100.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v108 = 0;
              v109.i64[0] = 0;
              *uint64_t v106 = 0u;
              v106[1] = 0u;
              uint64_t v110 = &v106->i8[v25];
              *(_OWORD *)uint64_t v110 = 0u;
              *((_OWORD *)v110 + 1) = 0u;
            }
            uint64_t v114 = v105 + v108;
            int8x8_t v115 = (int8x16_t *)((char *)v66 + 6 * a11);
            unsigned int v116 = v65[5];
            if (v116 == 63)
            {
              int16x8_t v118 = *(int16x8_t *)v114;
              int8x16_t v27 = *(int8x16_t *)(v114 + 16);
              int8x16_t v28 = *(int8x16_t *)(v114 + 32);
              int8x16_t v121 = *(int8x16_t *)(v114 + 48);
              int8x16_t *v115 = *(int8x16_t *)v114;
              v115[1] = v28;
              int v122 = (int8x16_t *)((char *)v115 + v25);
              *int v122 = v27;
              v122[1] = v121;
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v114);
              int8x16_t *v115 = (int8x16_t)v118;
              v115[1] = (int8x16_t)v118;
              int16x8_t v120 = (int16x8_t *)&v115->i8[v25];
              int16x8_t *v120 = v118;
              v120[1] = v118;
              uint64_t v117 = 2;
            }
            else if (v65[5])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v25, v114, v116, *(int8x8_t *)v109.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v117 = 0;
              v118.i64[0] = 0;
              int8x16_t *v115 = 0u;
              v115[1] = 0u;
              uint64_t v119 = &v115->i8[v25];
              *(_OWORD *)uint64_t v119 = 0u;
              *((_OWORD *)v119 + 1) = 0u;
            }
            uint64_t v123 = v114 + v117;
            BOOL v124 = (int8x16_t *)&v106[2];
            unsigned int v125 = v65[6];
            if (v125 == 63)
            {
              int16x8_t v127 = *(int16x8_t *)v123;
              int8x16_t v27 = *(int8x16_t *)(v123 + 16);
              int8x16_t v28 = *(int8x16_t *)(v123 + 32);
              long long v130 = *(_OWORD *)(v123 + 48);
              v106[2] = *(int16x8_t *)v123;
              v106[3] = (int16x8_t)v28;
              unsigned int v131 = &v124->i8[v25];
              *(int8x16_t *)unsigned int v131 = v27;
              *((_OWORD *)v131 + 1) = v130;
              uint64_t v126 = 64;
            }
            else if (v125 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v123);
              v106[2] = v127;
              v106[3] = v127;
              int16x8_t v129 = (int16x8_t *)&v124->i8[v25];
              int16x8_t *v129 = v127;
              v129[1] = v127;
              uint64_t v126 = 2;
            }
            else if (v65[6])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v124, v25, v123, v125, *(int8x8_t *)v118.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v126 = 0;
              v127.i64[0] = 0;
              *BOOL v124 = 0u;
              v106[3] = 0u;
              uint64_t v128 = &v124->i8[v25];
              *(_OWORD *)uint64_t v128 = 0u;
              *((_OWORD *)v128 + 1) = 0u;
            }
            unsigned int v34 = v32 + 1;
            uint64_t v132 = v123 + v126;
            uint64_t v133 = v115 + 2;
            unsigned int v134 = v65[7];
            if (v134 == 63)
            {
              int8x16_t v29 = *(int8x16_t *)v132;
              int8x16_t v27 = *(int8x16_t *)(v132 + 16);
              int8x16_t v28 = *(int8x16_t *)(v132 + 32);
              long long v136 = *(_OWORD *)(v132 + 48);
              v115[2] = *(int8x16_t *)v132;
              v115[3] = v28;
              uint64_t v137 = &v133->i8[v25];
              *(int8x16_t *)uint64_t v137 = v27;
              *((_OWORD *)v137 + 1) = v136;
              a7 = v209;
              uint64_t v16 = v219;
              goto LABEL_27;
            }
            uint64_t v16 = v219;
            if (v134 == 1)
            {
              int8x16_t v29 = (int8x16_t)vld1q_dup_s16((const __int16 *)v132);
              v115[2] = v29;
              v115[3] = v29;
LABEL_148:
              uint64_t v135 = (int8x16_t *)((char *)v133 + v25);
              int8x16_t *v135 = v29;
              v135[1] = v29;
            }
            else
            {
              if (!v134)
              {
                int8x16_t v29 = 0uLL;
                *uint64_t v133 = 0u;
                v115[3] = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v133, v25, v132, v134, *(int8x8_t *)v127.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            a7 = v209;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v219;
          block[5] = v64;
          char v230 = v39;
          char v231 = v222;
          unsigned int v226 = v204;
          unsigned int v227 = v37 - v35;
          block[6] = v65;
          unsigned int v224 = v66;
          uint64_t v25 = a11;
          uint64_t v225 = a11;
          unsigned int v228 = v216;
          unsigned int v229 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v219 + 8) + 7384), block);
            a7 = v209;
            uint64_t v16 = v219;
            unsigned int v34 = v32 + 1;
          }
          else
          {
            unsigned int v72 = *v65;
            a7 = v209;
            if (v72 == 63)
            {
              int16x8_t v74 = *(int16x8_t *)v64;
              int8x16_t v27 = v64[1];
              int8x16_t v28 = v64[2];
              int8x16_t v138 = v64[3];
              int8x16_t v233 = *v64;
              int16x8_t v234 = (int16x8_t)v28;
              int16x8_t v237 = (int16x8_t)v27;
              int16x8_t v238 = (int16x8_t)v138;
              uint64_t v73 = 64;
            }
            else if (v72 == 1)
            {
              int16x8_t v74 = vld1q_dup_s16(v64->i16);
              int8x16_t v233 = (int8x16_t)v74;
              int16x8_t v234 = v74;
              int16x8_t v237 = v74;
              int16x8_t v238 = v74;
              uint64_t v73 = 2;
            }
            else if (*v65)
            {
              uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, (uint64_t)v64, v72, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v73 = 0;
              v74.i64[0] = 0;
              int8x16_t v233 = 0u;
              int16x8_t v234 = 0u;
              int16x8_t v237 = 0u;
              int16x8_t v238 = 0u;
            }
            uint64_t v139 = (uint64_t)v64->i64 + v73;
            unsigned int v140 = v65[1];
            if (v140 == 63)
            {
              int8x16_t v142 = *(int8x16_t *)v139;
              int8x16_t v27 = *(int8x16_t *)(v139 + 16);
              int8x16_t v28 = *(int8x16_t *)(v139 + 32);
              int8x16_t v143 = *(int8x16_t *)(v139 + 48);
              int8x16_t v241 = *(int8x16_t *)v139;
              int8x16_t v242 = v28;
              int8x16_t v245 = v27;
              int8x16_t v246 = v143;
              uint64_t v141 = 64;
            }
            else if (v140 == 1)
            {
              int8x16_t v142 = (int8x16_t)vld1q_dup_s16((const __int16 *)v139);
              int8x16_t v241 = v142;
              int8x16_t v242 = v142;
              int8x16_t v245 = v142;
              int8x16_t v246 = v142;
              uint64_t v141 = 2;
            }
            else if (v65[1])
            {
              uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 64, v139, v140, *(int8x8_t *)v74.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v141 = 0;
              v142.i64[0] = 0;
              int8x16_t v241 = 0u;
              int8x16_t v242 = 0u;
              int8x16_t v245 = 0u;
              int8x16_t v246 = 0u;
            }
            uint64_t v144 = v139 + v141;
            unsigned int v145 = v65[2];
            if (v145 == 63)
            {
              int8x16_t v147 = *(int8x16_t *)v144;
              int8x16_t v27 = *(int8x16_t *)(v144 + 16);
              int8x16_t v28 = *(int8x16_t *)(v144 + 32);
              int8x16_t v148 = *(int8x16_t *)(v144 + 48);
              int8x16_t v235 = *(int8x16_t *)v144;
              int8x16_t v236 = v28;
              int8x16_t v239 = v27;
              int8x16_t v240 = v148;
              uint64_t v146 = 64;
            }
            else if (v145 == 1)
            {
              int8x16_t v147 = (int8x16_t)vld1q_dup_s16((const __int16 *)v144);
              int8x16_t v235 = v147;
              int8x16_t v236 = v147;
              int8x16_t v239 = v147;
              int8x16_t v240 = v147;
              uint64_t v146 = 2;
            }
            else if (v65[2])
            {
              uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v144, v145, *(int8x8_t *)v142.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v146 = 0;
              v147.i64[0] = 0;
              int8x16_t v235 = 0u;
              int8x16_t v236 = 0u;
              int8x16_t v239 = 0u;
              int8x16_t v240 = 0u;
            }
            uint64_t v149 = v144 + v146;
            unsigned int v150 = v65[3];
            if (v150 == 63)
            {
              int8x16_t v152 = *(int8x16_t *)v149;
              int8x16_t v27 = *(int8x16_t *)(v149 + 16);
              int8x16_t v28 = *(int8x16_t *)(v149 + 32);
              int8x16_t v153 = *(int8x16_t *)(v149 + 48);
              int8x16_t v243 = *(int8x16_t *)v149;
              int8x16_t v244 = v28;
              int8x16_t v247 = v27;
              int8x16_t v248 = v153;
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int8x16_t v152 = (int8x16_t)vld1q_dup_s16((const __int16 *)v149);
              int8x16_t v243 = v152;
              int8x16_t v244 = v152;
              int8x16_t v247 = v152;
              int8x16_t v248 = v152;
              uint64_t v151 = 2;
            }
            else if (v65[3])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 64, v149, v150, *(int8x8_t *)v147.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v151 = 0;
              v152.i64[0] = 0;
              int8x16_t v243 = 0u;
              int8x16_t v244 = 0u;
              int8x16_t v247 = 0u;
              int8x16_t v248 = 0u;
            }
            uint64_t v154 = v149 + v151;
            unsigned int v155 = v65[4];
            if (v155 == 63)
            {
              int8x16_t v157 = *(int8x16_t *)v154;
              int8x16_t v27 = *(int8x16_t *)(v154 + 16);
              int8x16_t v28 = *(int8x16_t *)(v154 + 32);
              int8x16_t v158 = *(int8x16_t *)(v154 + 48);
              int8x16_t v249 = *(int8x16_t *)v154;
              int8x16_t v250 = v28;
              int8x16_t v253 = v27;
              int8x16_t v254 = v158;
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int8x16_t v157 = (int8x16_t)vld1q_dup_s16((const __int16 *)v154);
              int8x16_t v249 = v157;
              int8x16_t v250 = v157;
              int8x16_t v253 = v157;
              int8x16_t v254 = v157;
              uint64_t v156 = 2;
            }
            else if (v65[4])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, v154, v155, *(int8x8_t *)v152.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v156 = 0;
              v157.i64[0] = 0;
              int8x16_t v249 = 0u;
              int8x16_t v250 = 0u;
              int8x16_t v253 = 0u;
              int8x16_t v254 = 0u;
            }
            uint64_t v159 = v154 + v156;
            unsigned int v160 = v65[5];
            if (v160 == 63)
            {
              int8x16_t v162 = *(int8x16_t *)v159;
              int8x16_t v27 = *(int8x16_t *)(v159 + 16);
              int8x16_t v28 = *(int8x16_t *)(v159 + 32);
              int8x16_t v163 = *(int8x16_t *)(v159 + 48);
              int8x16_t v257 = *(int8x16_t *)v159;
              int8x16_t v258 = v28;
              int8x16_t v261 = v27;
              int8x16_t v262 = v163;
              uint64_t v161 = 64;
            }
            else if (v160 == 1)
            {
              int8x16_t v162 = (int8x16_t)vld1q_dup_s16((const __int16 *)v159);
              int8x16_t v257 = v162;
              int8x16_t v258 = v162;
              int8x16_t v261 = v162;
              int8x16_t v262 = v162;
              uint64_t v161 = 2;
            }
            else if (v65[5])
            {
              uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v159, v160, *(int8x8_t *)v157.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v161 = 0;
              v162.i64[0] = 0;
              int8x16_t v257 = 0u;
              int8x16_t v258 = 0u;
              int8x16_t v261 = 0u;
              int8x16_t v262 = 0u;
            }
            uint64_t v164 = v159 + v161;
            unsigned int v165 = v65[6];
            if (v165 == 63)
            {
              int8x16_t v167 = *(int8x16_t *)v164;
              int8x16_t v27 = *(int8x16_t *)(v164 + 16);
              int8x16_t v28 = *(int8x16_t *)(v164 + 32);
              int8x16_t v168 = *(int8x16_t *)(v164 + 48);
              int8x16_t v251 = *(int8x16_t *)v164;
              int8x16_t v252 = v28;
              int8x16_t v255 = v27;
              int8x16_t v256 = v168;
              uint64_t v166 = 64;
            }
            else if (v165 == 1)
            {
              int8x16_t v167 = (int8x16_t)vld1q_dup_s16((const __int16 *)v164);
              int8x16_t v251 = v167;
              int8x16_t v252 = v167;
              int8x16_t v255 = v167;
              int8x16_t v256 = v167;
              uint64_t v166 = 2;
            }
            else if (v65[6])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v164, v165, *(int8x8_t *)v162.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v166 = 0;
              v167.i64[0] = 0;
              int8x16_t v251 = 0u;
              int8x16_t v252 = 0u;
              int8x16_t v255 = 0u;
              int8x16_t v256 = 0u;
            }
            uint64_t v169 = v164 + v166;
            unsigned int v170 = v65[7];
            if (v170 == 63)
            {
              int8x16_t v29 = *(int8x16_t *)v169;
              int8x16_t v27 = *(int8x16_t *)(v169 + 16);
              int8x16_t v28 = *(int8x16_t *)(v169 + 32);
              int8x16_t v171 = *(int8x16_t *)(v169 + 48);
              int8x16_t v259 = *(int8x16_t *)v169;
              int8x16_t v260 = v28;
              int8x16_t v263 = v27;
              int8x16_t v264 = v171;
              uint64_t v16 = v219;
              unsigned int v34 = v32 + 1;
            }
            else
            {
              uint64_t v16 = v219;
              unsigned int v34 = v32 + 1;
              if (v170 == 1)
              {
                int8x16_t v29 = (int8x16_t)vld1q_dup_s16((const __int16 *)v169);
                int8x16_t v259 = v29;
                int8x16_t v260 = v29;
                int8x16_t v263 = v29;
                int8x16_t v264 = v29;
              }
              else if (v170)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v169, v170, *(int8x8_t *)v167.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                v29.i64[0] = 0;
                int8x16_t v259 = 0u;
                int8x16_t v260 = 0u;
                int8x16_t v263 = 0u;
                int8x16_t v264 = 0u;
              }
            }
            unint64_t v172 = v228;
            if (v228)
            {
              unint64_t v173 = 0;
              uint64_t v174 = &v233.i8[64 * (unint64_t)v226 + 8 * v227];
              unsigned int v175 = v229;
              do
              {
                if (v175)
                {
                  uint64_t v176 = 0;
                  uint64_t v177 = (uint64_t)v224->i64 + v225 * v173;
                  do
                  {
                    *(unsigned char *)(v177 + v176) = v174[v176];
                    ++v176;
                    unsigned int v175 = v229;
                  }
                  while (8 * (unint64_t)v229 > v176);
                  unint64_t v172 = v228;
                }
                ++v173;
                v174 += 64;
              }
              while (v173 < v172);
            }
          }
LABEL_27:
          BOOL v21 = v32 == v210 >> 3;
          unsigned int v32 = v34;
        }
        while (!v21);
        BOOL v21 = v17++ == v201;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v265 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v218 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v199 = a8 + a10 - 1;
  unsigned int v201 = v199 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v212 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v201)
  {
    unsigned int v210 = a7 + a9 - 1;
    unsigned int v198 = a7 >> 3;
    if (a7 >> 3 <= v210 >> 3)
    {
      uint64_t v25 = a11;
      unsigned int v195 = a5 - 1;
      unsigned int v221 = (a5 - 1) >> 3;
      int v220 = ((a5 - 1) & 7) + 1;
      int v196 = ((a6 - 1) & 7) + 1;
      unsigned int v197 = (a6 - 1) >> 3;
      uint64_t v202 = 4 * a11;
      uint64_t v203 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL)))))));
      v28.i64[0] = 0x1000000010;
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v27.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v208 = v29.i32[0] | v29.i32[1];
      BOOL v206 = v29.i32[1] != 0;
      uint64_t v207 = v29.i64[0];
      BOOL v205 = v29.i32[0] != 0;
      unint64_t v194 = 8 * v19 * (unint64_t)v18;
      unsigned int v209 = a7;
      uint64_t v219 = v16;
      do
      {
        unsigned int v30 = (8 * v17) | 7;
        if (8 * v17 <= v218) {
          int v31 = v218;
        }
        else {
          int v31 = 8 * v17;
        }
        unsigned int v32 = v198;
        if (v199 < v30) {
          unsigned int v30 = v199;
        }
        unsigned int v217 = 8 * v17;
        int v204 = v31 - 8 * v17;
        int v216 = v30 - v31 + 1;
        int v33 = v196;
        if (v17 != v197) {
          int v33 = 8;
        }
        unsigned int v222 = v33;
        uint64_t v215 = a2 + (v31 - v218) * v25;
        do
        {
          unsigned int v35 = 8 * v32;
          unsigned int v36 = 8 * (v32 + 1) - 1;
          if (8 * v32 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 8 * v32;
          }
          if (v210 < v36) {
            unsigned int v36 = v210;
          }
          int v38 = v36 - v37 + 1;
          if (v32 == v221) {
            unsigned int v39 = v220;
          }
          else {
            unsigned int v39 = 8;
          }
          BOOL v40 = 1;
          if (v217 >= v218 && v35 >= a7)
          {
            int v41 = v220;
            if (v32 != v221) {
              int v41 = 8;
            }
            BOOL v40 = v38 != v41 || v216 != v222;
          }
          if (isLevelTiled)
          {
            unsigned int v178 = 0;
            uint64_t v179 = v194 >> (*(unsigned char *)(v16 + 57) != 0);
            char v180 = 1;
            if (v179 > 127)
            {
              if (v179 > 511)
              {
                if (v179 == 512)
                {
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v178 = 16;
                  unsigned int v182 = 16;
                }
                else
                {
                  char v181 = 1;
                  unsigned int v182 = 0;
                  if (v179 == 1024)
                  {
                    char v180 = 0;
                    unsigned int v182 = 8;
                    unsigned int v178 = 16;
                  }
                }
              }
              else if (v179 == 128)
              {
                char v180 = 0;
                char v181 = 0;
                unsigned int v178 = 32;
                unsigned int v182 = 32;
              }
              else
              {
                char v181 = 1;
                unsigned int v182 = 0;
                if (v179 == 256)
                {
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v182 = 16;
                  unsigned int v178 = 32;
                }
              }
            }
            else
            {
              char v181 = 1;
              unsigned int v182 = 0;
              switch(v179)
              {
                case 4:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v182 = 128;
                  unsigned int v178 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v178 = 128;
                  unsigned int v182 = 128;
                  break;
                case 16:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v182 = 64;
                  unsigned int v178 = 128;
                  break;
                case 32:
                  char v180 = 0;
                  char v181 = 0;
                  unsigned int v178 = 64;
                  unsigned int v182 = 64;
                  break;
                default:
                  if (v179 == 64)
                  {
                    char v180 = 0;
                    char v181 = 0;
                    unsigned int v182 = 32;
                    unsigned int v178 = 64;
                  }
                  break;
              }
            }
            unsigned int v183 = (v178 >> 3) - 1;
            if (v180) {
              unsigned int v184 = 0;
            }
            else {
              unsigned int v184 = 32 - __clz(~(-1 << -(char)__clz(v183)));
            }
            unsigned int v185 = (v182 >> 3) - 1;
            if (v181)
            {
              unsigned int v186 = 0;
              if (v184) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v186 = 32 - __clz(~(-1 << -(char)__clz(v185)));
              if (v186 | v184)
              {
LABEL_234:
                int v187 = 0;
                uint64_t v188 = 0;
                int v189 = v32 & v183;
                int v190 = v17 & v185;
                BOOL v191 = v184 != 0;
                BOOL v192 = v186 != 0;
                int v193 = 1;
                do
                {
                  --v184;
                  if (v191) {
                    v188 |= (unint64_t)(v193 & v189) << v187++;
                  }
                  else {
                    unsigned int v184 = 0;
                  }
                  --v186;
                  if (v192) {
                    v188 |= (unint64_t)(v193 & v190) << v187++;
                  }
                  else {
                    unsigned int v186 = 0;
                  }
                  v193 *= 2;
                  --v187;
                  BOOL v192 = v186 != 0;
                  BOOL v191 = v184 != 0;
                }
                while (v186 | v184);
                goto LABEL_246;
              }
            }
            uint64_t v188 = 0;
LABEL_246:
            unint64_t v50 = ((unint64_t)(v35 / v178 + v217 / v182 * ((v178 + v195) / v178)) << 14) + (v188 << 9);
            goto LABEL_59;
          }
          if (v208)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v205;
            BOOL v47 = v206;
            int v49 = v207;
            int v48 = HIDWORD(v207);
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v32) << v43++;
              }
              else {
                int v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                int v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 7;
          if (v52 < 0x10) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 3) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          if (v56 | v53)
          {
            int v57 = 0;
            unint64_t v58 = 0;
            BOOL v59 = v53 != 0;
            BOOL v60 = v56 != 0;
            int v61 = 1;
            do
            {
              --v53;
              BOOL v62 = !v59;
              if (v59)
              {
                unint64_t v63 = ((unint64_t)(v61 & v32) << v57) | v58;
              }
              else
              {
                unsigned int v53 = 0;
                unint64_t v63 = v58;
              }
              if (!v62) {
                ++v57;
              }
              --v56;
              if (v60)
              {
                unint64_t v58 = ((unint64_t)(v61 & v17) << v57) | v63;
              }
              else
              {
                unsigned int v56 = 0;
                unint64_t v58 = v63;
              }
              if (v60) {
                ++v57;
              }
              v61 *= 2;
              --v57;
              BOOL v60 = v56 != 0;
              BOOL v59 = v53 != 0;
            }
            while (v56 | v53);
          }
          else
          {
            unint64_t v58 = 0;
          }
          BOOL v64 = (int8x16_t *)(a3 + v50);
          if (v212)
          {
            memcpy(__dst, v64, sizeof(__dst));
            BOOL v64 = (int8x16_t *)__dst;
          }
          int v65 = (unsigned __int8 *)(a4 + 8 * v58);
          int v66 = (int8x16_t *)(v215 + 8 * (v37 - a7));
          char v67 = v39 < 8 || v40;
          if ((v67 & 1) == 0 && v222 > 7)
          {
            unsigned int v68 = *v65;
            if (v68 == 63)
            {
              int8x16_t v70 = *v64;
              int8x16_t v27 = v64[1];
              int8x16_t v28 = v64[2];
              int8x16_t v76 = v64[3];
              *int v66 = *v64;
              v66[1] = v28;
              uint64_t v25 = a11;
              BOOL v77 = (int8x16_t *)((char *)v66 + a11);
              *BOOL v77 = v27;
              v77[1] = v76;
              uint64_t v69 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              if (v68 == 1)
              {
                int8x16_t v70 = (int8x16_t)vld1q_dup_s16(v64->i16);
                *int v66 = v70;
                v66[1] = v70;
                unint64_t v75 = (int8x16_t *)((char *)v66 + a11);
                *unint64_t v75 = v70;
                v75[1] = v70;
                uint64_t v69 = 2;
              }
              else if (*v65)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v64, v68, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                uint64_t v69 = 0;
                v70.i64[0] = 0;
                *int v66 = 0u;
                v66[1] = 0u;
                unsigned int v71 = &v66->i8[a11];
                *(_OWORD *)unsigned int v71 = 0u;
                *((_OWORD *)v71 + 1) = 0u;
              }
            }
            uint64_t v78 = (uint64_t)v64->i64 + v69;
            BOOL v79 = (int16x8_t *)&v66->i8[v203];
            unsigned int v80 = v65[1];
            if (v80 == 63)
            {
              int16x8_t v82 = *(int16x8_t *)v78;
              int8x16_t v27 = *(int8x16_t *)(v78 + 16);
              int8x16_t v28 = *(int8x16_t *)(v78 + 32);
              int8x16_t v85 = *(int8x16_t *)(v78 + 48);
              *BOOL v79 = *(int16x8_t *)v78;
              v79[1] = (int16x8_t)v28;
              uint64_t v86 = (int8x16_t *)&v79->i8[v25];
              int8x16_t *v86 = v27;
              v86[1] = v85;
              uint64_t v81 = 64;
            }
            else if (v80 == 1)
            {
              int16x8_t v82 = vld1q_dup_s16((const __int16 *)v78);
              *BOOL v79 = v82;
              v79[1] = v82;
              BOOL v84 = (int16x8_t *)((char *)v79 + v25);
              *BOOL v84 = v82;
              v84[1] = v82;
              uint64_t v81 = 2;
            }
            else if (v65[1])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)((char *)v66 + v203), v25, v78, v80, *(int8x8_t *)v70.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v81 = 0;
              v82.i64[0] = 0;
              *BOOL v79 = 0u;
              v79[1] = 0u;
              unsigned int v83 = &v79->i8[v25];
              *(_OWORD *)unsigned int v83 = 0u;
              *((_OWORD *)v83 + 1) = 0u;
            }
            uint64_t v87 = v78 + v81;
            unsigned int v88 = v66 + 2;
            unsigned int v89 = v65[2];
            if (v89 == 63)
            {
              int16x8_t v91 = *(int16x8_t *)v87;
              int8x16_t v27 = *(int8x16_t *)(v87 + 16);
              int8x16_t v28 = *(int8x16_t *)(v87 + 32);
              long long v94 = *(_OWORD *)(v87 + 48);
              v66[2] = *(int8x16_t *)v87;
              v66[3] = v28;
              int8x8_t v95 = &v88->i8[v25];
              *(int8x16_t *)int8x8_t v95 = v27;
              *((_OWORD *)v95 + 1) = v94;
              uint64_t v90 = 64;
            }
            else if (v89 == 1)
            {
              int16x8_t v91 = vld1q_dup_s16((const __int16 *)v87);
              v66[2] = (int8x16_t)v91;
              v66[3] = (int8x16_t)v91;
              uint64_t v93 = (int16x8_t *)&v88->i8[v25];
              *uint64_t v93 = v91;
              v93[1] = v91;
              uint64_t v90 = 2;
            }
            else if (v65[2])
            {
              uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, v25, v87, v89, *(int8x8_t *)v82.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v90 = 0;
              v91.i64[0] = 0;
              *unsigned int v88 = 0u;
              v66[3] = 0u;
              unsigned int v92 = &v88->i8[v25];
              *(_OWORD *)unsigned int v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
            }
            uint64_t v96 = v87 + v90;
            int8x8_t v97 = (int8x16_t *)&v79[2];
            unsigned int v98 = v65[3];
            if (v98 == 63)
            {
              int16x8_t v100 = *(int16x8_t *)v96;
              int8x16_t v27 = *(int8x16_t *)(v96 + 16);
              int8x16_t v28 = *(int8x16_t *)(v96 + 32);
              long long v103 = *(_OWORD *)(v96 + 48);
              v79[2] = *(int16x8_t *)v96;
              v79[3] = (int16x8_t)v28;
              uint64_t v104 = &v97->i8[v25];
              *(int8x16_t *)uint64_t v104 = v27;
              *((_OWORD *)v104 + 1) = v103;
              uint64_t v99 = 64;
            }
            else if (v98 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v96);
              v79[2] = v100;
              v79[3] = v100;
              int16x8_t v102 = (int16x8_t *)&v97->i8[v25];
              *int16x8_t v102 = v100;
              v102[1] = v100;
              uint64_t v99 = 2;
            }
            else if (v65[3])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v97, v25, v96, v98, *(int8x8_t *)v91.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v99 = 0;
              v100.i64[0] = 0;
              int8x16_t *v97 = 0u;
              v79[3] = 0u;
              uint64_t v101 = &v97->i8[v25];
              *(_OWORD *)uint64_t v101 = 0u;
              *((_OWORD *)v101 + 1) = 0u;
            }
            uint64_t v105 = v96 + v99;
            uint64_t v106 = (int16x8_t *)&v66->i8[v202];
            unsigned int v107 = v65[4];
            if (v107 == 63)
            {
              int16x8_t v109 = *(int16x8_t *)v105;
              int8x16_t v27 = *(int8x16_t *)(v105 + 16);
              int8x16_t v28 = *(int8x16_t *)(v105 + 32);
              int8x16_t v112 = *(int8x16_t *)(v105 + 48);
              *uint64_t v106 = *(int16x8_t *)v105;
              v106[1] = (int16x8_t)v28;
              unsigned int v113 = (int8x16_t *)&v106->i8[v25];
              int8x16_t *v113 = v27;
              v113[1] = v112;
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v109 = vld1q_dup_s16((const __int16 *)v105);
              *uint64_t v106 = v109;
              v106[1] = v109;
              int16x8_t v111 = (int16x8_t *)((char *)v106 + v25);
              int16x8_t *v111 = v109;
              v111[1] = v109;
              uint64_t v108 = 2;
            }
            else if (v65[4])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)((char *)v66 + v202), v25, v105, v107, *(int8x8_t *)v100.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v108 = 0;
              v109.i64[0] = 0;
              *uint64_t v106 = 0u;
              v106[1] = 0u;
              uint64_t v110 = &v106->i8[v25];
              *(_OWORD *)uint64_t v110 = 0u;
              *((_OWORD *)v110 + 1) = 0u;
            }
            uint64_t v114 = v105 + v108;
            int8x8_t v115 = (int8x16_t *)((char *)v66 + 6 * a11);
            unsigned int v116 = v65[5];
            if (v116 == 63)
            {
              int16x8_t v118 = *(int16x8_t *)v114;
              int8x16_t v27 = *(int8x16_t *)(v114 + 16);
              int8x16_t v28 = *(int8x16_t *)(v114 + 32);
              int8x16_t v121 = *(int8x16_t *)(v114 + 48);
              int8x16_t *v115 = *(int8x16_t *)v114;
              v115[1] = v28;
              int v122 = (int8x16_t *)((char *)v115 + v25);
              *int v122 = v27;
              v122[1] = v121;
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v118 = vld1q_dup_s16((const __int16 *)v114);
              int8x16_t *v115 = (int8x16_t)v118;
              v115[1] = (int8x16_t)v118;
              int16x8_t v120 = (int16x8_t *)&v115->i8[v25];
              int16x8_t *v120 = v118;
              v120[1] = v118;
              uint64_t v117 = 2;
            }
            else if (v65[5])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v25, v114, v116, *(int8x8_t *)v109.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v117 = 0;
              v118.i64[0] = 0;
              int8x16_t *v115 = 0u;
              v115[1] = 0u;
              uint64_t v119 = &v115->i8[v25];
              *(_OWORD *)uint64_t v119 = 0u;
              *((_OWORD *)v119 + 1) = 0u;
            }
            uint64_t v123 = v114 + v117;
            BOOL v124 = (int8x16_t *)&v106[2];
            unsigned int v125 = v65[6];
            if (v125 == 63)
            {
              int16x8_t v127 = *(int16x8_t *)v123;
              int8x16_t v27 = *(int8x16_t *)(v123 + 16);
              int8x16_t v28 = *(int8x16_t *)(v123 + 32);
              long long v130 = *(_OWORD *)(v123 + 48);
              v106[2] = *(int16x8_t *)v123;
              v106[3] = (int16x8_t)v28;
              unsigned int v131 = &v124->i8[v25];
              *(int8x16_t *)unsigned int v131 = v27;
              *((_OWORD *)v131 + 1) = v130;
              uint64_t v126 = 64;
            }
            else if (v125 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v123);
              v106[2] = v127;
              v106[3] = v127;
              int16x8_t v129 = (int16x8_t *)&v124->i8[v25];
              int16x8_t *v129 = v127;
              v129[1] = v127;
              uint64_t v126 = 2;
            }
            else if (v65[6])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v124, v25, v123, v125, *(int8x8_t *)v118.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v126 = 0;
              v127.i64[0] = 0;
              *BOOL v124 = 0u;
              v106[3] = 0u;
              uint64_t v128 = &v124->i8[v25];
              *(_OWORD *)uint64_t v128 = 0u;
              *((_OWORD *)v128 + 1) = 0u;
            }
            unsigned int v34 = v32 + 1;
            uint64_t v132 = v123 + v126;
            uint64_t v133 = v115 + 2;
            unsigned int v134 = v65[7];
            if (v134 == 63)
            {
              int8x16_t v29 = *(int8x16_t *)v132;
              int8x16_t v27 = *(int8x16_t *)(v132 + 16);
              int8x16_t v28 = *(int8x16_t *)(v132 + 32);
              long long v136 = *(_OWORD *)(v132 + 48);
              v115[2] = *(int8x16_t *)v132;
              v115[3] = v28;
              uint64_t v137 = &v133->i8[v25];
              *(int8x16_t *)uint64_t v137 = v27;
              *((_OWORD *)v137 + 1) = v136;
              a7 = v209;
              uint64_t v16 = v219;
              goto LABEL_27;
            }
            uint64_t v16 = v219;
            if (v134 == 1)
            {
              int8x16_t v29 = (int8x16_t)vld1q_dup_s16((const __int16 *)v132);
              v115[2] = v29;
              v115[3] = v29;
LABEL_148:
              uint64_t v135 = (int8x16_t *)((char *)v133 + v25);
              int8x16_t *v135 = v29;
              v135[1] = v29;
            }
            else
            {
              if (!v134)
              {
                int8x16_t v29 = 0uLL;
                *uint64_t v133 = 0u;
                v115[3] = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v133, v25, v132, v134, *(int8x8_t *)v127.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            a7 = v209;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v219;
          block[5] = v64;
          char v230 = v39;
          char v231 = v222;
          unsigned int v226 = v204;
          unsigned int v227 = v37 - v35;
          block[6] = v65;
          unsigned int v224 = v66;
          uint64_t v25 = a11;
          uint64_t v225 = a11;
          unsigned int v228 = v216;
          unsigned int v229 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v219 + 8) + 7384), block);
            a7 = v209;
            uint64_t v16 = v219;
            unsigned int v34 = v32 + 1;
          }
          else
          {
            unsigned int v72 = *v65;
            a7 = v209;
            if (v72 == 63)
            {
              int16x8_t v74 = *(int16x8_t *)v64;
              int8x16_t v27 = v64[1];
              int8x16_t v28 = v64[2];
              int8x16_t v138 = v64[3];
              int8x16_t v233 = *v64;
              int16x8_t v234 = (int16x8_t)v28;
              int16x8_t v237 = (int16x8_t)v27;
              int16x8_t v238 = (int16x8_t)v138;
              uint64_t v73 = 64;
            }
            else if (v72 == 1)
            {
              int16x8_t v74 = vld1q_dup_s16(v64->i16);
              int8x16_t v233 = (int8x16_t)v74;
              int16x8_t v234 = v74;
              int16x8_t v237 = v74;
              int16x8_t v238 = v74;
              uint64_t v73 = 2;
            }
            else if (*v65)
            {
              uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 64, (uint64_t)v64, v72, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v73 = 0;
              v74.i64[0] = 0;
              int8x16_t v233 = 0u;
              int16x8_t v234 = 0u;
              int16x8_t v237 = 0u;
              int16x8_t v238 = 0u;
            }
            uint64_t v139 = (uint64_t)v64->i64 + v73;
            unsigned int v140 = v65[1];
            if (v140 == 63)
            {
              int8x16_t v142 = *(int8x16_t *)v139;
              int8x16_t v27 = *(int8x16_t *)(v139 + 16);
              int8x16_t v28 = *(int8x16_t *)(v139 + 32);
              int8x16_t v143 = *(int8x16_t *)(v139 + 48);
              int8x16_t v241 = *(int8x16_t *)v139;
              int8x16_t v242 = v28;
              int8x16_t v245 = v27;
              int8x16_t v246 = v143;
              uint64_t v141 = 64;
            }
            else if (v140 == 1)
            {
              int8x16_t v142 = (int8x16_t)vld1q_dup_s16((const __int16 *)v139);
              int8x16_t v241 = v142;
              int8x16_t v242 = v142;
              int8x16_t v245 = v142;
              int8x16_t v246 = v142;
              uint64_t v141 = 2;
            }
            else if (v65[1])
            {
              uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 64, v139, v140, *(int8x8_t *)v74.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v141 = 0;
              v142.i64[0] = 0;
              int8x16_t v241 = 0u;
              int8x16_t v242 = 0u;
              int8x16_t v245 = 0u;
              int8x16_t v246 = 0u;
            }
            uint64_t v144 = v139 + v141;
            unsigned int v145 = v65[2];
            if (v145 == 63)
            {
              int8x16_t v147 = *(int8x16_t *)v144;
              int8x16_t v27 = *(int8x16_t *)(v144 + 16);
              int8x16_t v28 = *(int8x16_t *)(v144 + 32);
              int8x16_t v148 = *(int8x16_t *)(v144 + 48);
              int8x16_t v235 = *(int8x16_t *)v144;
              int8x16_t v236 = v28;
              int8x16_t v239 = v27;
              int8x16_t v240 = v148;
              uint64_t v146 = 64;
            }
            else if (v145 == 1)
            {
              int8x16_t v147 = (int8x16_t)vld1q_dup_s16((const __int16 *)v144);
              int8x16_t v235 = v147;
              int8x16_t v236 = v147;
              int8x16_t v239 = v147;
              int8x16_t v240 = v147;
              uint64_t v146 = 2;
            }
            else if (v65[2])
            {
              uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 64, v144, v145, *(int8x8_t *)v142.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v146 = 0;
              v147.i64[0] = 0;
              int8x16_t v235 = 0u;
              int8x16_t v236 = 0u;
              int8x16_t v239 = 0u;
              int8x16_t v240 = 0u;
            }
            uint64_t v149 = v144 + v146;
            unsigned int v150 = v65[3];
            if (v150 == 63)
            {
              int8x16_t v152 = *(int8x16_t *)v149;
              int8x16_t v27 = *(int8x16_t *)(v149 + 16);
              int8x16_t v28 = *(int8x16_t *)(v149 + 32);
              int8x16_t v153 = *(int8x16_t *)(v149 + 48);
              int8x16_t v243 = *(int8x16_t *)v149;
              int8x16_t v244 = v28;
              int8x16_t v247 = v27;
              int8x16_t v248 = v153;
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int8x16_t v152 = (int8x16_t)vld1q_dup_s16((const __int16 *)v149);
              int8x16_t v243 = v152;
              int8x16_t v244 = v152;
              int8x16_t v247 = v152;
              int8x16_t v248 = v152;
              uint64_t v151 = 2;
            }
            else if (v65[3])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 64, v149, v150, *(int8x8_t *)v147.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v151 = 0;
              v152.i64[0] = 0;
              int8x16_t v243 = 0u;
              int8x16_t v244 = 0u;
              int8x16_t v247 = 0u;
              int8x16_t v248 = 0u;
            }
            uint64_t v154 = v149 + v151;
            unsigned int v155 = v65[4];
            if (v155 == 63)
            {
              int8x16_t v157 = *(int8x16_t *)v154;
              int8x16_t v27 = *(int8x16_t *)(v154 + 16);
              int8x16_t v28 = *(int8x16_t *)(v154 + 32);
              int8x16_t v158 = *(int8x16_t *)(v154 + 48);
              int8x16_t v249 = *(int8x16_t *)v154;
              int8x16_t v250 = v28;
              int8x16_t v253 = v27;
              int8x16_t v254 = v158;
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int8x16_t v157 = (int8x16_t)vld1q_dup_s16((const __int16 *)v154);
              int8x16_t v249 = v157;
              int8x16_t v250 = v157;
              int8x16_t v253 = v157;
              int8x16_t v254 = v157;
              uint64_t v156 = 2;
            }
            else if (v65[4])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 64, v154, v155, *(int8x8_t *)v152.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v156 = 0;
              v157.i64[0] = 0;
              int8x16_t v249 = 0u;
              int8x16_t v250 = 0u;
              int8x16_t v253 = 0u;
              int8x16_t v254 = 0u;
            }
            uint64_t v159 = v154 + v156;
            unsigned int v160 = v65[5];
            if (v160 == 63)
            {
              int8x16_t v162 = *(int8x16_t *)v159;
              int8x16_t v27 = *(int8x16_t *)(v159 + 16);
              int8x16_t v28 = *(int8x16_t *)(v159 + 32);
              int8x16_t v163 = *(int8x16_t *)(v159 + 48);
              int8x16_t v257 = *(int8x16_t *)v159;
              int8x16_t v258 = v28;
              int8x16_t v261 = v27;
              int8x16_t v262 = v163;
              uint64_t v161 = 64;
            }
            else if (v160 == 1)
            {
              int8x16_t v162 = (int8x16_t)vld1q_dup_s16((const __int16 *)v159);
              int8x16_t v257 = v162;
              int8x16_t v258 = v162;
              int8x16_t v261 = v162;
              int8x16_t v262 = v162;
              uint64_t v161 = 2;
            }
            else if (v65[5])
            {
              uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v159, v160, *(int8x8_t *)v157.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v161 = 0;
              v162.i64[0] = 0;
              int8x16_t v257 = 0u;
              int8x16_t v258 = 0u;
              int8x16_t v261 = 0u;
              int8x16_t v262 = 0u;
            }
            uint64_t v164 = v159 + v161;
            unsigned int v165 = v65[6];
            if (v165 == 63)
            {
              int8x16_t v167 = *(int8x16_t *)v164;
              int8x16_t v27 = *(int8x16_t *)(v164 + 16);
              int8x16_t v28 = *(int8x16_t *)(v164 + 32);
              int8x16_t v168 = *(int8x16_t *)(v164 + 48);
              int8x16_t v251 = *(int8x16_t *)v164;
              int8x16_t v252 = v28;
              int8x16_t v255 = v27;
              int8x16_t v256 = v168;
              uint64_t v166 = 64;
            }
            else if (v165 == 1)
            {
              int8x16_t v167 = (int8x16_t)vld1q_dup_s16((const __int16 *)v164);
              int8x16_t v251 = v167;
              int8x16_t v252 = v167;
              int8x16_t v255 = v167;
              int8x16_t v256 = v167;
              uint64_t v166 = 2;
            }
            else if (v65[6])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 64, v164, v165, *(int8x8_t *)v162.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v166 = 0;
              v167.i64[0] = 0;
              int8x16_t v251 = 0u;
              int8x16_t v252 = 0u;
              int8x16_t v255 = 0u;
              int8x16_t v256 = 0u;
            }
            uint64_t v169 = v164 + v166;
            unsigned int v170 = v65[7];
            if (v170 == 63)
            {
              int8x16_t v29 = *(int8x16_t *)v169;
              int8x16_t v27 = *(int8x16_t *)(v169 + 16);
              int8x16_t v28 = *(int8x16_t *)(v169 + 32);
              int8x16_t v171 = *(int8x16_t *)(v169 + 48);
              int8x16_t v259 = *(int8x16_t *)v169;
              int8x16_t v260 = v28;
              int8x16_t v263 = v27;
              int8x16_t v264 = v171;
              uint64_t v16 = v219;
              unsigned int v34 = v32 + 1;
            }
            else
            {
              uint64_t v16 = v219;
              unsigned int v34 = v32 + 1;
              if (v170 == 1)
              {
                int8x16_t v29 = (int8x16_t)vld1q_dup_s16((const __int16 *)v169);
                int8x16_t v259 = v29;
                int8x16_t v260 = v29;
                int8x16_t v263 = v29;
                int8x16_t v264 = v29;
              }
              else if (v170)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v169, v170, *(int8x8_t *)v167.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                v29.i64[0] = 0;
                int8x16_t v259 = 0u;
                int8x16_t v260 = 0u;
                int8x16_t v263 = 0u;
                int8x16_t v264 = 0u;
              }
            }
            unint64_t v172 = v228;
            if (v228)
            {
              unint64_t v173 = 0;
              uint64_t v174 = &v233.i8[64 * (unint64_t)v226 + 8 * v227];
              unsigned int v175 = v229;
              do
              {
                if (v175)
                {
                  uint64_t v176 = 0;
                  uint64_t v177 = (uint64_t)v224->i64 + v225 * v173;
                  do
                  {
                    *(unsigned char *)(v177 + v176) = v174[v176];
                    ++v176;
                    unsigned int v175 = v229;
                  }
                  while (8 * (unint64_t)v229 > v176);
                  unint64_t v172 = v228;
                }
                ++v173;
                v174 += 64;
              }
              while (v173 < v172);
            }
          }
LABEL_27:
          BOOL v21 = v32 == v210 >> 3;
          unsigned int v32 = v34;
        }
        while (!v21);
        BOOL v21 = v17++ == v201;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v456 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v453 = v20;
  uint64_t v454 = v21;
  uint64_t v438 = v22;
  uint64_t v23 = v12;
  uint64_t v601 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v457 = v14;
  unsigned int v440 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v439 = v440 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v452 = v31;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v32 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v33 = *(unsigned __int8 *)(v23 + 254);
    char v34 = __clz(v25);
    if (1 << v32 >= v17 || v19 >> v33)
    {
      if (!(v17 >> v32) && 1 << v33 < v19)
      {
        if (v17 < 2) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v33 += v32 + v37;
        unsigned int v32 = -v37;
      }
    }
    else
    {
      unsigned int v35 = 32 - __clz(~(-1 << -v34));
      unsigned int v36 = v33 + v32;
      if (v19 < 2) {
        unsigned int v35 = 0;
      }
      unsigned int v32 = v36 - v35;
      unsigned int v33 = v35;
    }
    if (v19 < 2)
    {
      if (v33) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v34)) < v33)
    {
LABEL_27:
      BOOL v451 = 0;
LABEL_32:
      unsigned int v449 = v33 - 3;
      unsigned int v444 = v32 - 3;
      int v39 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v437 = (((~v39 + v19) & v39) + ~(-1 << v33)) >> v33;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v451 = v38 >= v32;
    goto LABEL_32;
  }
  BOOL v451 = 0;
  unsigned int v437 = 0;
  unsigned int v444 = 0;
  unsigned int v449 = 0;
LABEL_33:
  if (v27 <= v439)
  {
    unsigned int v450 = v456 + a9 - 1;
    if (v456 >> 3 <= v450 >> 3)
    {
      uint64_t v40 = a11;
      unsigned int v461 = v25 >> 3;
      unsigned int v436 = v26 >> 3;
      int v460 = (v25 & 7) + 1;
      int v435 = (v26 & 7) + 1;
      int v434 = ~(-1 << v444);
      uint64_t v446 = 4 * a11;
      uint64_t v447 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v445 = v42.i32[0] | v42.i32[1];
      BOOL v442 = v42.i32[1] != 0;
      int8x8_t v443 = v42;
      BOOL v441 = v42.i32[0] != 0;
      uint64_t v459 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v457) {
          int v44 = v457;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v440 < v43) {
          unsigned int v43 = v440;
        }
        int v448 = v44 - 8 * v27;
        int v458 = v43 - v44 + 1;
        unsigned int v45 = v456 >> 3;
        int v46 = v435;
        if (v27 != v436) {
          int v46 = 8;
        }
        unsigned int v462 = v46;
        int v47 = v27 & v434;
        uint64_t v455 = v438 + (v44 - v457) * v40;
        unsigned int v48 = v456;
        do
        {
          unsigned int v50 = 8 * v45;
          unsigned int v51 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v48) {
            int v52 = v48;
          }
          else {
            int v52 = 8 * v45;
          }
          if (v450 < v51) {
            unsigned int v51 = v456 + a9 - 1;
          }
          int v53 = v51 - v52 + 1;
          if (v45 == v461) {
            unsigned int v54 = v460;
          }
          else {
            unsigned int v54 = 8;
          }
          BOOL v55 = 1;
          if (8 * v27 >= v457 && v50 >= v48)
          {
            int v56 = v460;
            if (v45 != v461) {
              int v56 = 8;
            }
            BOOL v55 = v53 != v56 || v458 != v462;
          }
          if (v451)
          {
            if (v449 | v444)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v449 != 0;
              BOOL v62 = v444 != 0;
              unsigned int v63 = v449;
              unsigned int v64 = v444;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v45 & ~(-1 << v449) & v60) << v58++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v47 & v60) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(v23 + 320) * ((v45 >> v449) + (v27 >> v444) * v437) + (v59 << 11);
          }
          else
          {
            if (v445)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v442;
              BOOL v69 = v441;
              __int32 v70 = v443.i32[1];
              __int32 v71 = v443.i32[0];
              do
              {
                --v70;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v45) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v27) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v69 = v71 != 0;
                BOOL v68 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 7;
          if (v77 < 0x10)
          {
            unsigned int v78 = 0;
            if (!v75)
            {
LABEL_115:
              unint64_t v80 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 3) - 1)));
            if (!(v78 | v75)) {
              goto LABEL_115;
            }
          }
          int v79 = 0;
          unint64_t v80 = 0;
          BOOL v81 = v75 != 0;
          BOOL v82 = v78 != 0;
          int v83 = 1;
          do
          {
            --v75;
            BOOL v84 = !v81;
            if (v81)
            {
              unint64_t v85 = ((unint64_t)(v83 & v45) << v79) | v80;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v85 = v80;
            }
            if (!v84) {
              ++v79;
            }
            --v78;
            if (v82)
            {
              unint64_t v80 = ((unint64_t)(v83 & v27) << v79) | v85;
            }
            else
            {
              unsigned int v78 = 0;
              unint64_t v80 = v85;
            }
            if (v82) {
              ++v79;
            }
            v83 *= 2;
            --v79;
            BOOL v82 = v78 != 0;
            BOOL v81 = v75 != 0;
          }
          while (v78 | v75);
LABEL_116:
          uint64_t v86 = (float64x2_t *)(v453 + v72);
          if (v452)
          {
            memcpy(__dst, v86, sizeof(__dst));
            uint64_t v86 = (float64x2_t *)__dst;
          }
          uint64_t v87 = (unsigned __int8 *)(v454 + 8 * v80);
          unsigned int v88 = (float64x2_t *)(v455 + 32 * (v52 - v48));
          char v89 = v54 < 8 || v55;
          if ((v89 & 1) == 0 && v462 > 7)
          {
            unsigned int v90 = *v87;
            if (v90 == 255)
            {
              float64x2_t v99 = v86[1];
              float64x2_t v100 = v86[2];
              float64x2_t v101 = v86[3];
              float64x2_t v102 = v86[4];
              float64x2_t v103 = v86[5];
              float64x2_t v104 = v86[6];
              float64x2_t v105 = v86[7];
              float64x2_t v106 = v86[8];
              float64x2_t v107 = v86[9];
              float64x2_t v108 = v86[10];
              float64x2_t v109 = v86[11];
              float64x2_t v110 = v86[12];
              float64x2_t v111 = v86[13];
              float64x2_t v112 = v86[14];
              float64x2_t v113 = v86[15];
              uint64_t v40 = a11;
              *unsigned int v88 = *v86;
              v88[1] = v99;
              v88[2] = v100;
              v88[3] = v101;
              uint64_t v114 = (float64x2_t *)((char *)v88 + a11);
              v88[4] = v106;
              v88[5] = v107;
              v88[6] = v108;
              v88[7] = v109;
              *uint64_t v114 = v102;
              v114[1] = v103;
              v114[2] = v104;
              v114[3] = v105;
              int8x8_t v115 = (float64x2_t *)((char *)v88 + a11 + 64);
              uint64_t v91 = 256;
              float64x2_t *v115 = v110;
              v115[1] = v111;
              v115[2] = v112;
              v115[3] = v113;
            }
            else
            {
              uint64_t v40 = a11;
              if (v90 == 7)
              {
                float64x2_t v97 = vld1q_dup_f64(v86->f64);
                *unsigned int v88 = v97;
                v88[1] = v97;
                v88[2] = v97;
                v88[3] = v97;
                v88[4] = v97;
                v88[5] = v97;
                v88[6] = v97;
                v88[7] = v97;
                unsigned int v98 = (float64x2_t *)((char *)v88 + a11);
                *unsigned int v98 = v97;
                v98[1] = v97;
                v98[2] = v97;
                v98[3] = v97;
                v98[4] = v97;
                v98[5] = v97;
                v98[6] = v97;
                v98[7] = v97;
                uint64_t v91 = 8;
              }
              else if (*v87)
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88, a11, (uint64_t)v86, v90);
              }
              else
              {
                uint64_t v91 = 0;
                v88[6] = 0u;
                v88[7] = 0u;
                v88[4] = 0u;
                v88[5] = 0u;
                v88[2] = 0u;
                v88[3] = 0u;
                *unsigned int v88 = 0u;
                v88[1] = 0u;
                unsigned int v92 = (_OWORD *)((char *)v88->f64 + a11);
                v92[6] = 0u;
                v92[7] = 0u;
                v92[4] = 0u;
                v92[5] = 0u;
                v92[2] = 0u;
                v92[3] = 0u;
                _OWORD *v92 = 0u;
                v92[1] = 0u;
              }
            }
            uint64_t v116 = (uint64_t)v86 + v91;
            uint64_t v117 = (float64x2_t *)((char *)v88 + v447);
            unsigned int v118 = v87[1];
            if (v118 == 255)
            {
              float64x2_t v123 = *(float64x2_t *)(v116 + 16);
              float64x2_t v124 = *(float64x2_t *)(v116 + 32);
              float64x2_t v125 = *(float64x2_t *)(v116 + 48);
              long long v126 = *(_OWORD *)(v116 + 64);
              long long v127 = *(_OWORD *)(v116 + 80);
              long long v128 = *(_OWORD *)(v116 + 96);
              long long v129 = *(_OWORD *)(v116 + 112);
              float64x2_t v130 = *(float64x2_t *)(v116 + 128);
              float64x2_t v131 = *(float64x2_t *)(v116 + 144);
              float64x2_t v132 = *(float64x2_t *)(v116 + 160);
              float64x2_t v133 = *(float64x2_t *)(v116 + 176);
              long long v134 = *(_OWORD *)(v116 + 192);
              long long v135 = *(_OWORD *)(v116 + 208);
              long long v136 = *(_OWORD *)(v116 + 224);
              long long v137 = *(_OWORD *)(v116 + 240);
              *uint64_t v117 = *(float64x2_t *)v116;
              v117[1] = v123;
              v117[2] = v124;
              v117[3] = v125;
              int8x16_t v138 = (_OWORD *)((char *)v117->f64 + v40);
              v117[4] = v130;
              v117[5] = v131;
              v117[6] = v132;
              v117[7] = v133;
              *int8x16_t v138 = v126;
              v138[1] = v127;
              v138[2] = v128;
              v138[3] = v129;
              uint64_t v139 = (_OWORD *)((char *)v117[4].f64 + v40);
              uint64_t v119 = 256;
              _OWORD *v139 = v134;
              v139[1] = v135;
              v139[2] = v136;
              v139[3] = v137;
            }
            else if (v118 == 7)
            {
              float64x2_t v121 = vld1q_dup_f64((const double *)v116);
              *uint64_t v117 = v121;
              v117[1] = v121;
              v117[2] = v121;
              v117[3] = v121;
              v117[4] = v121;
              v117[5] = v121;
              v117[6] = v121;
              v117[7] = v121;
              int v122 = (float64x2_t *)((char *)v117 + v40);
              *int v122 = v121;
              v122[1] = v121;
              v122[2] = v121;
              v122[3] = v121;
              v122[4] = v121;
              v122[5] = v121;
              v122[6] = v121;
              v122[7] = v121;
              uint64_t v119 = 8;
            }
            else if (v87[1])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88 + v447, v40, v116, v118);
            }
            else
            {
              uint64_t v119 = 0;
              v117[6] = 0u;
              v117[7] = 0u;
              v117[4] = 0u;
              v117[5] = 0u;
              v117[2] = 0u;
              v117[3] = 0u;
              *uint64_t v117 = 0u;
              v117[1] = 0u;
              int16x8_t v120 = (_OWORD *)((char *)v117->f64 + v40);
              v120[6] = 0u;
              v120[7] = 0u;
              v120[4] = 0u;
              v120[5] = 0u;
              v120[2] = 0u;
              v120[3] = 0u;
              _OWORD *v120 = 0u;
              v120[1] = 0u;
            }
            uint64_t v140 = v116 + v119;
            f64 = (_OWORD *)v88[8].f64;
            unsigned int v142 = v87[2];
            if (v142 == 255)
            {
              float64x2_t v147 = *(float64x2_t *)(v140 + 16);
              float64x2_t v148 = *(float64x2_t *)(v140 + 32);
              float64x2_t v149 = *(float64x2_t *)(v140 + 48);
              long long v150 = *(_OWORD *)(v140 + 64);
              long long v151 = *(_OWORD *)(v140 + 80);
              long long v152 = *(_OWORD *)(v140 + 96);
              long long v153 = *(_OWORD *)(v140 + 112);
              float64x2_t v154 = *(float64x2_t *)(v140 + 128);
              float64x2_t v155 = *(float64x2_t *)(v140 + 144);
              float64x2_t v156 = *(float64x2_t *)(v140 + 160);
              float64x2_t v157 = *(float64x2_t *)(v140 + 176);
              long long v158 = *(_OWORD *)(v140 + 192);
              long long v159 = *(_OWORD *)(v140 + 208);
              long long v160 = *(_OWORD *)(v140 + 224);
              long long v161 = *(_OWORD *)(v140 + 240);
              _OWORD *f64 = *(_OWORD *)v140;
              v88[9] = v147;
              v88[10] = v148;
              v88[11] = v149;
              int8x16_t v162 = (_OWORD *)((char *)f64 + v40);
              v88[12] = v154;
              v88[13] = v155;
              v88[14] = v156;
              v88[15] = v157;
              *int8x16_t v162 = v150;
              v162[1] = v151;
              v162[2] = v152;
              v162[3] = v153;
              v162 += 4;
              uint64_t v143 = 256;
              *int8x16_t v162 = v158;
              v162[1] = v159;
              v162[2] = v160;
              v162[3] = v161;
            }
            else if (v142 == 7)
            {
              float64x2_t v145 = vld1q_dup_f64((const double *)v140);
              v88[8] = v145;
              v88[9] = v145;
              v88[10] = v145;
              v88[11] = v145;
              v88[12] = v145;
              v88[13] = v145;
              v88[14] = v145;
              v88[15] = v145;
              uint64_t v146 = (float64x2_t *)((char *)f64 + v40);
              *uint64_t v146 = v145;
              v146[1] = v145;
              v146[2] = v145;
              v146[3] = v145;
              v146[4] = v145;
              v146[5] = v145;
              v146[6] = v145;
              v146[7] = v145;
              uint64_t v143 = 8;
            }
            else if (v87[2])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v40, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v88[14] = 0u;
              v88[15] = 0u;
              v88[12] = 0u;
              v88[13] = 0u;
              v88[10] = 0u;
              v88[11] = 0u;
              _OWORD *f64 = 0u;
              v88[9] = 0u;
              uint64_t v144 = (_OWORD *)((char *)f64 + v40);
              v144[6] = 0u;
              v144[7] = 0u;
              v144[4] = 0u;
              v144[5] = 0u;
              v144[2] = 0u;
              v144[3] = 0u;
              _OWORD *v144 = 0u;
              v144[1] = 0u;
            }
            uint64_t v163 = v140 + v143;
            uint64_t v164 = (_OWORD *)v117[8].f64;
            unsigned int v165 = v87[3];
            if (v165 == 255)
            {
              float64x2_t v170 = *(float64x2_t *)(v163 + 16);
              float64x2_t v171 = *(float64x2_t *)(v163 + 32);
              float64x2_t v172 = *(float64x2_t *)(v163 + 48);
              long long v173 = *(_OWORD *)(v163 + 64);
              long long v174 = *(_OWORD *)(v163 + 80);
              long long v175 = *(_OWORD *)(v163 + 96);
              long long v176 = *(_OWORD *)(v163 + 112);
              float64x2_t v177 = *(float64x2_t *)(v163 + 128);
              float64x2_t v178 = *(float64x2_t *)(v163 + 144);
              float64x2_t v179 = *(float64x2_t *)(v163 + 160);
              float64x2_t v180 = *(float64x2_t *)(v163 + 176);
              long long v181 = *(_OWORD *)(v163 + 192);
              long long v182 = *(_OWORD *)(v163 + 208);
              long long v183 = *(_OWORD *)(v163 + 224);
              long long v184 = *(_OWORD *)(v163 + 240);
              *uint64_t v164 = *(_OWORD *)v163;
              v117[9] = v170;
              v117[10] = v171;
              v117[11] = v172;
              unsigned int v185 = (_OWORD *)((char *)v164 + v40);
              v117[12] = v177;
              v117[13] = v178;
              v117[14] = v179;
              v117[15] = v180;
              *unsigned int v185 = v173;
              v185[1] = v174;
              v185[2] = v175;
              v185[3] = v176;
              v185 += 4;
              uint64_t v166 = 256;
              *unsigned int v185 = v181;
              v185[1] = v182;
              v185[2] = v183;
              v185[3] = v184;
            }
            else if (v165 == 7)
            {
              float64x2_t v168 = vld1q_dup_f64((const double *)v163);
              v117[8] = v168;
              v117[9] = v168;
              v117[10] = v168;
              v117[11] = v168;
              v117[12] = v168;
              v117[13] = v168;
              v117[14] = v168;
              v117[15] = v168;
              uint64_t v169 = (float64x2_t *)((char *)v164 + v40);
              *uint64_t v169 = v168;
              v169[1] = v168;
              v169[2] = v168;
              v169[3] = v168;
              v169[4] = v168;
              v169[5] = v168;
              uint64_t v166 = 8;
              v169[6] = v168;
              v169[7] = v168;
            }
            else if (v87[3])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v164, v40, v163, v165);
            }
            else
            {
              uint64_t v166 = 0;
              v117[14] = 0u;
              v117[15] = 0u;
              v117[12] = 0u;
              v117[13] = 0u;
              v117[10] = 0u;
              v117[11] = 0u;
              *uint64_t v164 = 0u;
              v117[9] = 0u;
              int8x16_t v167 = (_OWORD *)((char *)v164 + v40);
              v167[6] = 0u;
              v167[7] = 0u;
              v167[4] = 0u;
              v167[5] = 0u;
              v167[2] = 0u;
              v167[3] = 0u;
              *int8x16_t v167 = 0u;
              v167[1] = 0u;
            }
            uint64_t v186 = v163 + v166;
            int v187 = (float64x2_t *)((char *)v88 + v446);
            unsigned int v188 = v87[4];
            if (v188 == 255)
            {
              float64x2_t v193 = *(float64x2_t *)(v186 + 16);
              float64x2_t v194 = *(float64x2_t *)(v186 + 32);
              float64x2_t v195 = *(float64x2_t *)(v186 + 48);
              long long v196 = *(_OWORD *)(v186 + 64);
              long long v197 = *(_OWORD *)(v186 + 80);
              long long v198 = *(_OWORD *)(v186 + 96);
              long long v199 = *(_OWORD *)(v186 + 112);
              float64x2_t v200 = *(float64x2_t *)(v186 + 128);
              float64x2_t v201 = *(float64x2_t *)(v186 + 144);
              float64x2_t v202 = *(float64x2_t *)(v186 + 160);
              float64x2_t v203 = *(float64x2_t *)(v186 + 176);
              long long v204 = *(_OWORD *)(v186 + 192);
              long long v205 = *(_OWORD *)(v186 + 208);
              long long v206 = *(_OWORD *)(v186 + 224);
              long long v207 = *(_OWORD *)(v186 + 240);
              *int v187 = *(float64x2_t *)v186;
              v187[1] = v193;
              v187[2] = v194;
              v187[3] = v195;
              __int32 v208 = (_OWORD *)((char *)v187->f64 + v40);
              v187[4] = v200;
              v187[5] = v201;
              v187[6] = v202;
              v187[7] = v203;
              *__int32 v208 = v196;
              v208[1] = v197;
              v208[2] = v198;
              v208[3] = v199;
              unsigned int v209 = (_OWORD *)((char *)v187[4].f64 + v40);
              uint64_t v189 = 256;
              *unsigned int v209 = v204;
              v209[1] = v205;
              v209[2] = v206;
              v209[3] = v207;
            }
            else if (v188 == 7)
            {
              float64x2_t v191 = vld1q_dup_f64((const double *)v186);
              *int v187 = v191;
              v187[1] = v191;
              v187[2] = v191;
              v187[3] = v191;
              v187[4] = v191;
              v187[5] = v191;
              v187[6] = v191;
              v187[7] = v191;
              BOOL v192 = (float64x2_t *)((char *)v187 + v40);
              *BOOL v192 = v191;
              v192[1] = v191;
              v192[2] = v191;
              v192[3] = v191;
              v192[4] = v191;
              v192[5] = v191;
              v192[6] = v191;
              v192[7] = v191;
              uint64_t v189 = 8;
            }
            else if (v87[4])
            {
              uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88 + v446, v40, v186, v188);
            }
            else
            {
              uint64_t v189 = 0;
              v187[6] = 0u;
              v187[7] = 0u;
              v187[4] = 0u;
              v187[5] = 0u;
              v187[2] = 0u;
              v187[3] = 0u;
              *int v187 = 0u;
              v187[1] = 0u;
              int v190 = (_OWORD *)((char *)v187->f64 + v40);
              v190[6] = 0u;
              v190[7] = 0u;
              v190[4] = 0u;
              v190[5] = 0u;
              v190[2] = 0u;
              v190[3] = 0u;
              *int v190 = 0u;
              v190[1] = 0u;
            }
            uint64_t v210 = v186 + v189;
            int v211 = (float64x2_t *)((char *)v88 + 6 * a11);
            unsigned int v212 = v87[5];
            if (v212 == 255)
            {
              float64x2_t v217 = *(float64x2_t *)(v210 + 16);
              float64x2_t v218 = *(float64x2_t *)(v210 + 32);
              float64x2_t v219 = *(float64x2_t *)(v210 + 48);
              long long v220 = *(_OWORD *)(v210 + 64);
              long long v221 = *(_OWORD *)(v210 + 80);
              long long v222 = *(_OWORD *)(v210 + 96);
              long long v223 = *(_OWORD *)(v210 + 112);
              float64x2_t v224 = *(float64x2_t *)(v210 + 128);
              float64x2_t v225 = *(float64x2_t *)(v210 + 144);
              float64x2_t v226 = *(float64x2_t *)(v210 + 160);
              float64x2_t v227 = *(float64x2_t *)(v210 + 176);
              long long v228 = *(_OWORD *)(v210 + 192);
              long long v229 = *(_OWORD *)(v210 + 208);
              long long v230 = *(_OWORD *)(v210 + 224);
              long long v231 = *(_OWORD *)(v210 + 240);
              *int v211 = *(float64x2_t *)v210;
              v211[1] = v217;
              v211[2] = v218;
              v211[3] = v219;
              unsigned int v232 = (_OWORD *)((char *)v211->f64 + v40);
              v211[4] = v224;
              v211[5] = v225;
              v211[6] = v226;
              v211[7] = v227;
              *unsigned int v232 = v220;
              v232[1] = v221;
              v232[2] = v222;
              v232[3] = v223;
              int8x16_t v233 = (_OWORD *)((char *)v211[4].f64 + v40);
              uint64_t v213 = 256;
              *int8x16_t v233 = v228;
              v233[1] = v229;
              v233[2] = v230;
              v233[3] = v231;
            }
            else if (v212 == 7)
            {
              float64x2_t v215 = vld1q_dup_f64((const double *)v210);
              *int v211 = v215;
              v211[1] = v215;
              v211[2] = v215;
              v211[3] = v215;
              v211[4] = v215;
              v211[5] = v215;
              v211[6] = v215;
              v211[7] = v215;
              int v216 = (float64x2_t *)((char *)v211 + v40);
              *int v216 = v215;
              v216[1] = v215;
              v216[2] = v215;
              v216[3] = v215;
              v216[4] = v215;
              v216[5] = v215;
              v216[6] = v215;
              v216[7] = v215;
              uint64_t v213 = 8;
            }
            else if (v87[5])
            {
              uint64_t v213 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v211, v40, v210, v212);
            }
            else
            {
              uint64_t v213 = 0;
              v211[6] = 0u;
              v211[7] = 0u;
              v211[4] = 0u;
              v211[5] = 0u;
              v211[2] = 0u;
              v211[3] = 0u;
              *int v211 = 0u;
              v211[1] = 0u;
              BOOL v214 = (_OWORD *)((char *)v211->f64 + v40);
              v214[6] = 0u;
              v214[7] = 0u;
              v214[4] = 0u;
              v214[5] = 0u;
              v214[2] = 0u;
              v214[3] = 0u;
              *BOOL v214 = 0u;
              v214[1] = 0u;
            }
            uint64_t v234 = v210 + v213;
            int8x16_t v235 = (_OWORD *)v187[8].f64;
            unsigned int v236 = v87[6];
            if (v236 == 255)
            {
              float64x2_t v241 = *(float64x2_t *)(v234 + 16);
              float64x2_t v242 = *(float64x2_t *)(v234 + 32);
              float64x2_t v243 = *(float64x2_t *)(v234 + 48);
              long long v244 = *(_OWORD *)(v234 + 64);
              long long v245 = *(_OWORD *)(v234 + 80);
              long long v246 = *(_OWORD *)(v234 + 96);
              long long v247 = *(_OWORD *)(v234 + 112);
              float64x2_t v248 = *(float64x2_t *)(v234 + 128);
              float64x2_t v249 = *(float64x2_t *)(v234 + 144);
              float64x2_t v250 = *(float64x2_t *)(v234 + 160);
              float64x2_t v251 = *(float64x2_t *)(v234 + 176);
              long long v252 = *(_OWORD *)(v234 + 192);
              long long v253 = *(_OWORD *)(v234 + 208);
              long long v254 = *(_OWORD *)(v234 + 224);
              long long v255 = *(_OWORD *)(v234 + 240);
              *int8x16_t v235 = *(_OWORD *)v234;
              v187[9] = v241;
              v187[10] = v242;
              v187[11] = v243;
              int8x16_t v256 = (_OWORD *)((char *)v235 + v40);
              v187[12] = v248;
              v187[13] = v249;
              v187[14] = v250;
              v187[15] = v251;
              *int8x16_t v256 = v244;
              v256[1] = v245;
              v256[2] = v246;
              v256[3] = v247;
              v256 += 4;
              uint64_t v237 = 256;
              *int8x16_t v256 = v252;
              v256[1] = v253;
              v256[2] = v254;
              v256[3] = v255;
            }
            else if (v236 == 7)
            {
              float64x2_t v239 = vld1q_dup_f64((const double *)v234);
              v187[8] = v239;
              v187[9] = v239;
              v187[10] = v239;
              v187[11] = v239;
              v187[12] = v239;
              v187[13] = v239;
              v187[14] = v239;
              v187[15] = v239;
              int8x16_t v240 = (float64x2_t *)((char *)v235 + v40);
              *int8x16_t v240 = v239;
              v240[1] = v239;
              v240[2] = v239;
              v240[3] = v239;
              v240[4] = v239;
              v240[5] = v239;
              uint64_t v237 = 8;
              v240[6] = v239;
              v240[7] = v239;
            }
            else if (v87[6])
            {
              uint64_t v237 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v235, v40, v234, v236);
            }
            else
            {
              uint64_t v237 = 0;
              v187[14] = 0u;
              v187[15] = 0u;
              v187[12] = 0u;
              v187[13] = 0u;
              v187[10] = 0u;
              v187[11] = 0u;
              *int8x16_t v235 = 0u;
              v187[9] = 0u;
              int16x8_t v238 = (_OWORD *)((char *)v235 + v40);
              v238[6] = 0u;
              v238[7] = 0u;
              v238[4] = 0u;
              v238[5] = 0u;
              v238[2] = 0u;
              v238[3] = 0u;
              *int16x8_t v238 = 0u;
              v238[1] = 0u;
            }
            uint64_t v257 = v234 + v237;
            int8x16_t v258 = (_OWORD *)v211[8].f64;
            unsigned int v259 = v87[7];
            if (v259 == 255)
            {
              float64x2_t v263 = *(float64x2_t *)(v257 + 16);
              float64x2_t v264 = *(float64x2_t *)(v257 + 32);
              float64x2_t v265 = *(float64x2_t *)(v257 + 48);
              long long v266 = *(_OWORD *)(v257 + 64);
              long long v267 = *(_OWORD *)(v257 + 80);
              long long v268 = *(_OWORD *)(v257 + 96);
              long long v269 = *(_OWORD *)(v257 + 112);
              float64x2_t v270 = *(float64x2_t *)(v257 + 128);
              float64x2_t v271 = *(float64x2_t *)(v257 + 144);
              float64x2_t v272 = *(float64x2_t *)(v257 + 160);
              float64x2_t v273 = *(float64x2_t *)(v257 + 176);
              long long v274 = *(_OWORD *)(v257 + 192);
              long long v275 = *(_OWORD *)(v257 + 208);
              long long v276 = *(_OWORD *)(v257 + 224);
              long long v277 = *(_OWORD *)(v257 + 240);
              *int8x16_t v258 = *(_OWORD *)v257;
              v211[9] = v263;
              v211[10] = v264;
              v211[11] = v265;
              unint64_t v278 = (_OWORD *)((char *)v258 + v40);
              v211[12] = v270;
              v211[13] = v271;
              v211[14] = v272;
              v211[15] = v273;
              *unint64_t v278 = v266;
              v278[1] = v267;
              v278[2] = v268;
              v278[3] = v269;
              v278 += 4;
              *unint64_t v278 = v274;
              v278[1] = v275;
              v278[2] = v276;
              v278[3] = v277;
              unsigned int v48 = v456;
              uint64_t v23 = v459;
            }
            else
            {
              uint64_t v23 = v459;
              if (v259 == 7)
              {
                float64x2_t v261 = vld1q_dup_f64((const double *)v257);
                v211[8] = v261;
                v211[9] = v261;
                v211[10] = v261;
                v211[11] = v261;
                v211[12] = v261;
                v211[13] = v261;
                v211[14] = v261;
                v211[15] = v261;
                int8x16_t v262 = (float64x2_t *)((char *)v258 + v40);
                *int8x16_t v262 = v261;
                v262[1] = v261;
                v262[2] = v261;
                v262[3] = v261;
                v262[4] = v261;
                v262[5] = v261;
                v262[6] = v261;
                v262[7] = v261;
              }
              else if (v259)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v258, v40, v257, v259);
              }
              else
              {
                v211[14] = 0u;
                v211[15] = 0u;
                v211[12] = 0u;
                v211[13] = 0u;
                v211[10] = 0u;
                v211[11] = 0u;
                *int8x16_t v258 = 0u;
                v211[9] = 0u;
                int8x16_t v260 = (_OWORD *)((char *)v258 + v40);
                v260[6] = 0u;
                v260[7] = 0u;
                v260[4] = 0u;
                v260[5] = 0u;
                v260[2] = 0u;
                v260[3] = 0u;
                *int8x16_t v260 = 0u;
                v260[1] = 0u;
              }
              unsigned int v48 = v456;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v93 = v52 - v50;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v459;
          block[5] = v86;
          char v470 = v54;
          char v471 = v462;
          int v466 = v448;
          unsigned int v467 = v52 - v50;
          block[6] = v87;
          v464 = v88;
          uint64_t v40 = a11;
          uint64_t v465 = a11;
          int v468 = v458;
          unsigned int v469 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v459 + 8) + 7384), block);
            unsigned int v48 = v456;
            uint64_t v23 = v459;
LABEL_47:
            int v47 = v27 & v434;
            unsigned int v49 = v45 + 1;
            goto LABEL_48;
          }
          unsigned int v94 = v93;
          unsigned int v95 = *v87;
          if (v95 == 255)
          {
            float64x2_t v279 = v86[1];
            float64x2_t v280 = v86[2];
            float64x2_t v281 = v86[3];
            float64x2_t v282 = v86[4];
            float64x2_t v283 = v86[5];
            float64x2_t v284 = v86[6];
            float64x2_t v285 = v86[7];
            float64x2_t v286 = v86[8];
            float64x2_t v287 = v86[9];
            float64x2_t v288 = v86[10];
            float64x2_t v289 = v86[11];
            float64x2_t v290 = v86[12];
            float64x2_t v291 = v86[13];
            float64x2_t v292 = v86[14];
            float64x2_t v293 = v86[15];
            float64x2_t v473 = *v86;
            float64x2_t v474 = v279;
            float64x2_t v475 = v280;
            float64x2_t v476 = v281;
            float64x2_t v477 = v286;
            float64x2_t v478 = v287;
            float64x2_t v479 = v288;
            float64x2_t v480 = v289;
            float64x2_t v489 = v282;
            float64x2_t v490 = v283;
            float64x2_t v491 = v284;
            float64x2_t v492 = v285;
            uint64_t v96 = 256;
            float64x2_t v493 = v290;
            float64x2_t v494 = v291;
            float64x2_t v495 = v292;
            float64x2_t v496 = v293;
          }
          else if (v95 == 7)
          {
            float64x2_t v294 = vld1q_dup_f64(v86->f64);
            float64x2_t v473 = v294;
            float64x2_t v474 = v294;
            float64x2_t v475 = v294;
            float64x2_t v476 = v294;
            float64x2_t v477 = v294;
            float64x2_t v478 = v294;
            float64x2_t v479 = v294;
            float64x2_t v480 = v294;
            float64x2_t v489 = v294;
            float64x2_t v490 = v294;
            float64x2_t v491 = v294;
            float64x2_t v492 = v294;
            float64x2_t v493 = v294;
            float64x2_t v494 = v294;
            uint64_t v96 = 8;
            float64x2_t v495 = v294;
            float64x2_t v496 = v294;
          }
          else if (*v87)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v473, 256, (uint64_t)v86, v95);
          }
          else
          {
            uint64_t v96 = 0;
            float64x2_t v480 = 0u;
            float64x2_t v479 = 0u;
            float64x2_t v478 = 0u;
            float64x2_t v477 = 0u;
            float64x2_t v476 = 0u;
            float64x2_t v475 = 0u;
            float64x2_t v474 = 0u;
            float64x2_t v473 = 0u;
            float64x2_t v489 = 0u;
            float64x2_t v490 = 0u;
            float64x2_t v491 = 0u;
            float64x2_t v492 = 0u;
            float64x2_t v493 = 0u;
            float64x2_t v494 = 0u;
            float64x2_t v495 = 0u;
            float64x2_t v496 = 0u;
          }
          uint64_t v295 = (uint64_t)v86 + v96;
          unsigned int v296 = v87[1];
          if (v296 == 255)
          {
            float64x2_t v298 = *(float64x2_t *)(v295 + 16);
            float64x2_t v299 = *(float64x2_t *)(v295 + 32);
            float64x2_t v300 = *(float64x2_t *)(v295 + 48);
            float64x2_t v301 = *(float64x2_t *)(v295 + 64);
            float64x2_t v302 = *(float64x2_t *)(v295 + 80);
            float64x2_t v303 = *(float64x2_t *)(v295 + 96);
            float64x2_t v304 = *(float64x2_t *)(v295 + 112);
            float64x2_t v305 = *(float64x2_t *)(v295 + 128);
            float64x2_t v306 = *(float64x2_t *)(v295 + 144);
            float64x2_t v307 = *(float64x2_t *)(v295 + 160);
            float64x2_t v308 = *(float64x2_t *)(v295 + 176);
            float64x2_t v309 = *(float64x2_t *)(v295 + 192);
            float64x2_t v310 = *(float64x2_t *)(v295 + 208);
            float64x2_t v311 = *(float64x2_t *)(v295 + 224);
            float64x2_t v312 = *(float64x2_t *)(v295 + 240);
            float64x2_t v505 = *(float64x2_t *)v295;
            float64x2_t v506 = v298;
            float64x2_t v507 = v299;
            float64x2_t v508 = v300;
            float64x2_t v509 = v305;
            float64x2_t v510 = v306;
            float64x2_t v511 = v307;
            float64x2_t v512 = v308;
            float64x2_t v521 = v301;
            float64x2_t v522 = v302;
            float64x2_t v523 = v303;
            float64x2_t v524 = v304;
            uint64_t v297 = 256;
            float64x2_t v525 = v309;
            float64x2_t v526 = v310;
            float64x2_t v527 = v311;
            float64x2_t v528 = v312;
          }
          else if (v296 == 7)
          {
            float64x2_t v313 = vld1q_dup_f64((const double *)v295);
            float64x2_t v505 = v313;
            float64x2_t v506 = v313;
            float64x2_t v507 = v313;
            float64x2_t v508 = v313;
            float64x2_t v509 = v313;
            float64x2_t v510 = v313;
            float64x2_t v511 = v313;
            float64x2_t v512 = v313;
            float64x2_t v521 = v313;
            float64x2_t v522 = v313;
            float64x2_t v523 = v313;
            float64x2_t v524 = v313;
            float64x2_t v525 = v313;
            float64x2_t v526 = v313;
            uint64_t v297 = 8;
            float64x2_t v527 = v313;
            float64x2_t v528 = v313;
          }
          else if (v87[1])
          {
            uint64_t v297 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v505, 256, v295, v296);
          }
          else
          {
            uint64_t v297 = 0;
            float64x2_t v511 = 0u;
            float64x2_t v512 = 0u;
            float64x2_t v509 = 0u;
            float64x2_t v510 = 0u;
            float64x2_t v507 = 0u;
            float64x2_t v508 = 0u;
            float64x2_t v505 = 0u;
            float64x2_t v506 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v522 = 0u;
            float64x2_t v523 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v525 = 0u;
            float64x2_t v526 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v528 = 0u;
          }
          uint64_t v314 = v295 + v297;
          unsigned int v315 = v87[2];
          if (v315 == 255)
          {
            float64x2_t v317 = *(float64x2_t *)(v314 + 16);
            float64x2_t v318 = *(float64x2_t *)(v314 + 32);
            float64x2_t v319 = *(float64x2_t *)(v314 + 48);
            float64x2_t v320 = *(float64x2_t *)(v314 + 64);
            float64x2_t v321 = *(float64x2_t *)(v314 + 80);
            float64x2_t v322 = *(float64x2_t *)(v314 + 96);
            float64x2_t v323 = *(float64x2_t *)(v314 + 112);
            float64x2_t v324 = *(float64x2_t *)(v314 + 128);
            float64x2_t v325 = *(float64x2_t *)(v314 + 144);
            float64x2_t v326 = *(float64x2_t *)(v314 + 160);
            float64x2_t v327 = *(float64x2_t *)(v314 + 176);
            float64x2_t v328 = *(float64x2_t *)(v314 + 192);
            float64x2_t v329 = *(float64x2_t *)(v314 + 208);
            float64x2_t v330 = *(float64x2_t *)(v314 + 224);
            float64x2_t v331 = *(float64x2_t *)(v314 + 240);
            float64x2_t v481 = *(float64x2_t *)v314;
            float64x2_t v482 = v317;
            float64x2_t v483 = v318;
            float64x2_t v484 = v319;
            float64x2_t v485 = v324;
            float64x2_t v486 = v325;
            float64x2_t v487 = v326;
            float64x2_t v488 = v327;
            float64x2_t v497 = v320;
            float64x2_t v498 = v321;
            float64x2_t v499 = v322;
            float64x2_t v500 = v323;
            uint64_t v316 = 256;
            float64x2_t v501 = v328;
            float64x2_t v502 = v329;
            float64x2_t v503 = v330;
            float64x2_t v504 = v331;
          }
          else if (v315 == 7)
          {
            float64x2_t v332 = vld1q_dup_f64((const double *)v314);
            float64x2_t v481 = v332;
            float64x2_t v482 = v332;
            float64x2_t v483 = v332;
            float64x2_t v484 = v332;
            float64x2_t v485 = v332;
            float64x2_t v486 = v332;
            float64x2_t v487 = v332;
            float64x2_t v488 = v332;
            float64x2_t v497 = v332;
            float64x2_t v498 = v332;
            float64x2_t v499 = v332;
            float64x2_t v500 = v332;
            float64x2_t v501 = v332;
            float64x2_t v502 = v332;
            uint64_t v316 = 8;
            float64x2_t v503 = v332;
            float64x2_t v504 = v332;
          }
          else if (v87[2])
          {
            uint64_t v316 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v481, 256, v314, v315);
          }
          else
          {
            uint64_t v316 = 0;
            float64x2_t v487 = 0u;
            float64x2_t v488 = 0u;
            float64x2_t v485 = 0u;
            float64x2_t v486 = 0u;
            float64x2_t v483 = 0u;
            float64x2_t v484 = 0u;
            float64x2_t v481 = 0u;
            float64x2_t v482 = 0u;
            float64x2_t v497 = 0u;
            float64x2_t v498 = 0u;
            float64x2_t v499 = 0u;
            float64x2_t v500 = 0u;
            float64x2_t v501 = 0u;
            float64x2_t v502 = 0u;
            float64x2_t v503 = 0u;
            float64x2_t v504 = 0u;
          }
          uint64_t v333 = v314 + v316;
          unsigned int v334 = v87[3];
          if (v334 == 255)
          {
            float64x2_t v336 = *(float64x2_t *)(v333 + 16);
            float64x2_t v337 = *(float64x2_t *)(v333 + 32);
            float64x2_t v338 = *(float64x2_t *)(v333 + 48);
            float64x2_t v339 = *(float64x2_t *)(v333 + 64);
            float64x2_t v340 = *(float64x2_t *)(v333 + 80);
            float64x2_t v341 = *(float64x2_t *)(v333 + 96);
            float64x2_t v342 = *(float64x2_t *)(v333 + 112);
            float64x2_t v343 = *(float64x2_t *)(v333 + 128);
            float64x2_t v344 = *(float64x2_t *)(v333 + 144);
            float64x2_t v345 = *(float64x2_t *)(v333 + 160);
            float64x2_t v346 = *(float64x2_t *)(v333 + 176);
            float64x2_t v347 = *(float64x2_t *)(v333 + 192);
            float64x2_t v348 = *(float64x2_t *)(v333 + 208);
            float64x2_t v349 = *(float64x2_t *)(v333 + 224);
            float64x2_t v350 = *(float64x2_t *)(v333 + 240);
            float64x2_t v513 = *(float64x2_t *)v333;
            float64x2_t v514 = v336;
            float64x2_t v515 = v337;
            float64x2_t v516 = v338;
            float64x2_t v517 = v343;
            float64x2_t v518 = v344;
            float64x2_t v519 = v345;
            float64x2_t v520 = v346;
            float64x2_t v529 = v339;
            float64x2_t v530 = v340;
            float64x2_t v531 = v341;
            float64x2_t v532 = v342;
            uint64_t v335 = 256;
            float64x2_t v533 = v347;
            float64x2_t v534 = v348;
            float64x2_t v535 = v349;
            float64x2_t v536 = v350;
          }
          else if (v334 == 7)
          {
            float64x2_t v351 = vld1q_dup_f64((const double *)v333);
            float64x2_t v513 = v351;
            float64x2_t v514 = v351;
            float64x2_t v515 = v351;
            float64x2_t v516 = v351;
            float64x2_t v517 = v351;
            float64x2_t v518 = v351;
            float64x2_t v519 = v351;
            float64x2_t v520 = v351;
            float64x2_t v529 = v351;
            float64x2_t v530 = v351;
            float64x2_t v531 = v351;
            float64x2_t v532 = v351;
            float64x2_t v533 = v351;
            float64x2_t v534 = v351;
            uint64_t v335 = 8;
            float64x2_t v535 = v351;
            float64x2_t v536 = v351;
          }
          else if (v87[3])
          {
            uint64_t v335 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v513, 256, v333, v334);
          }
          else
          {
            uint64_t v335 = 0;
            float64x2_t v519 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v517 = 0u;
            float64x2_t v518 = 0u;
            float64x2_t v515 = 0u;
            float64x2_t v516 = 0u;
            float64x2_t v513 = 0u;
            float64x2_t v514 = 0u;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v536 = 0u;
          }
          uint64_t v352 = v333 + v335;
          unsigned int v353 = v87[4];
          if (v353 == 255)
          {
            float64x2_t v355 = *(float64x2_t *)(v352 + 16);
            float64x2_t v356 = *(float64x2_t *)(v352 + 32);
            float64x2_t v357 = *(float64x2_t *)(v352 + 48);
            float64x2_t v358 = *(float64x2_t *)(v352 + 64);
            float64x2_t v359 = *(float64x2_t *)(v352 + 80);
            float64x2_t v360 = *(float64x2_t *)(v352 + 96);
            float64x2_t v361 = *(float64x2_t *)(v352 + 112);
            float64x2_t v362 = *(float64x2_t *)(v352 + 128);
            float64x2_t v363 = *(float64x2_t *)(v352 + 144);
            float64x2_t v364 = *(float64x2_t *)(v352 + 160);
            float64x2_t v365 = *(float64x2_t *)(v352 + 176);
            float64x2_t v366 = *(float64x2_t *)(v352 + 192);
            float64x2_t v367 = *(float64x2_t *)(v352 + 208);
            float64x2_t v368 = *(float64x2_t *)(v352 + 224);
            float64x2_t v369 = *(float64x2_t *)(v352 + 240);
            float64x2_t v537 = *(float64x2_t *)v352;
            float64x2_t v538 = v355;
            float64x2_t v539 = v356;
            float64x2_t v540 = v357;
            float64x2_t v541 = v362;
            float64x2_t v542 = v363;
            float64x2_t v543 = v364;
            float64x2_t v544 = v365;
            float64x2_t v553 = v358;
            float64x2_t v554 = v359;
            float64x2_t v555 = v360;
            float64x2_t v556 = v361;
            uint64_t v354 = 256;
            float64x2_t v557 = v366;
            float64x2_t v558 = v367;
            float64x2_t v559 = v368;
            float64x2_t v560 = v369;
          }
          else if (v353 == 7)
          {
            float64x2_t v370 = vld1q_dup_f64((const double *)v352);
            float64x2_t v537 = v370;
            float64x2_t v538 = v370;
            float64x2_t v539 = v370;
            float64x2_t v540 = v370;
            float64x2_t v541 = v370;
            float64x2_t v542 = v370;
            float64x2_t v543 = v370;
            float64x2_t v544 = v370;
            float64x2_t v553 = v370;
            float64x2_t v554 = v370;
            float64x2_t v555 = v370;
            float64x2_t v556 = v370;
            float64x2_t v557 = v370;
            float64x2_t v558 = v370;
            float64x2_t v559 = v370;
            uint64_t v354 = 8;
            float64x2_t v560 = v370;
          }
          else if (v87[4])
          {
            uint64_t v354 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v537, 256, v352, v353);
          }
          else
          {
            uint64_t v354 = 0;
            float64x2_t v543 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v554 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v558 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v560 = 0u;
          }
          uint64_t v371 = v352 + v354;
          unsigned int v372 = v87[5];
          if (v372 == 255)
          {
            float64x2_t v374 = *(float64x2_t *)(v371 + 16);
            float64x2_t v375 = *(float64x2_t *)(v371 + 32);
            float64x2_t v376 = *(float64x2_t *)(v371 + 48);
            float64x2_t v377 = *(float64x2_t *)(v371 + 64);
            float64x2_t v378 = *(float64x2_t *)(v371 + 80);
            float64x2_t v379 = *(float64x2_t *)(v371 + 96);
            float64x2_t v380 = *(float64x2_t *)(v371 + 112);
            float64x2_t v381 = *(float64x2_t *)(v371 + 128);
            float64x2_t v382 = *(float64x2_t *)(v371 + 144);
            float64x2_t v383 = *(float64x2_t *)(v371 + 160);
            float64x2_t v384 = *(float64x2_t *)(v371 + 176);
            float64x2_t v385 = *(float64x2_t *)(v371 + 192);
            float64x2_t v386 = *(float64x2_t *)(v371 + 208);
            float64x2_t v387 = *(float64x2_t *)(v371 + 224);
            float64x2_t v388 = *(float64x2_t *)(v371 + 240);
            float64x2_t v569 = *(float64x2_t *)v371;
            float64x2_t v570 = v374;
            float64x2_t v571 = v375;
            float64x2_t v572 = v376;
            float64x2_t v573 = v381;
            float64x2_t v574 = v382;
            float64x2_t v575 = v383;
            float64x2_t v576 = v384;
            float64x2_t v585 = v377;
            float64x2_t v586 = v378;
            float64x2_t v587 = v379;
            float64x2_t v588 = v380;
            uint64_t v373 = 256;
            float64x2_t v589 = v385;
            float64x2_t v590 = v386;
            float64x2_t v591 = v387;
            float64x2_t v592 = v388;
          }
          else if (v372 == 7)
          {
            float64x2_t v389 = vld1q_dup_f64((const double *)v371);
            float64x2_t v569 = v389;
            float64x2_t v570 = v389;
            float64x2_t v571 = v389;
            float64x2_t v572 = v389;
            float64x2_t v573 = v389;
            float64x2_t v574 = v389;
            float64x2_t v575 = v389;
            float64x2_t v576 = v389;
            float64x2_t v585 = v389;
            float64x2_t v586 = v389;
            float64x2_t v587 = v389;
            float64x2_t v588 = v389;
            float64x2_t v589 = v389;
            float64x2_t v590 = v389;
            float64x2_t v591 = v389;
            uint64_t v373 = 8;
            float64x2_t v592 = v389;
          }
          else if (v87[5])
          {
            uint64_t v373 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v569, 256, v371, v372);
          }
          else
          {
            uint64_t v373 = 0;
            float64x2_t v575 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
            float64x2_t v585 = 0u;
            float64x2_t v586 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v589 = 0u;
            float64x2_t v590 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v592 = 0u;
          }
          uint64_t v390 = v371 + v373;
          unsigned int v391 = v87[6];
          if (v391 == 255)
          {
            float64x2_t v393 = *(float64x2_t *)(v390 + 16);
            float64x2_t v394 = *(float64x2_t *)(v390 + 32);
            float64x2_t v395 = *(float64x2_t *)(v390 + 48);
            float64x2_t v396 = *(float64x2_t *)(v390 + 64);
            float64x2_t v397 = *(float64x2_t *)(v390 + 80);
            float64x2_t v398 = *(float64x2_t *)(v390 + 96);
            float64x2_t v399 = *(float64x2_t *)(v390 + 112);
            float64x2_t v400 = *(float64x2_t *)(v390 + 128);
            float64x2_t v401 = *(float64x2_t *)(v390 + 144);
            float64x2_t v402 = *(float64x2_t *)(v390 + 160);
            float64x2_t v403 = *(float64x2_t *)(v390 + 176);
            float64x2_t v404 = *(float64x2_t *)(v390 + 192);
            float64x2_t v405 = *(float64x2_t *)(v390 + 208);
            float64x2_t v406 = *(float64x2_t *)(v390 + 224);
            float64x2_t v407 = *(float64x2_t *)(v390 + 240);
            float64x2_t v545 = *(float64x2_t *)v390;
            float64x2_t v546 = v393;
            float64x2_t v547 = v394;
            float64x2_t v548 = v395;
            float64x2_t v549 = v400;
            float64x2_t v550 = v401;
            float64x2_t v551 = v402;
            float64x2_t v552 = v403;
            float64x2_t v561 = v396;
            float64x2_t v562 = v397;
            float64x2_t v563 = v398;
            float64x2_t v564 = v399;
            uint64_t v392 = 256;
            float64x2_t v565 = v404;
            float64x2_t v566 = v405;
            float64x2_t v567 = v406;
            float64x2_t v568 = v407;
          }
          else if (v391 == 7)
          {
            float64x2_t v408 = vld1q_dup_f64((const double *)v390);
            float64x2_t v545 = v408;
            float64x2_t v546 = v408;
            float64x2_t v547 = v408;
            float64x2_t v548 = v408;
            float64x2_t v549 = v408;
            float64x2_t v550 = v408;
            float64x2_t v551 = v408;
            float64x2_t v552 = v408;
            float64x2_t v561 = v408;
            float64x2_t v562 = v408;
            float64x2_t v563 = v408;
            float64x2_t v564 = v408;
            float64x2_t v565 = v408;
            float64x2_t v566 = v408;
            float64x2_t v567 = v408;
            uint64_t v392 = 8;
            float64x2_t v568 = v408;
          }
          else if (v87[6])
          {
            uint64_t v392 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v545, 256, v390, v391);
          }
          else
          {
            uint64_t v392 = 0;
            float64x2_t v551 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v547 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v568 = 0u;
          }
          uint64_t v409 = v390 + v392;
          unsigned int v410 = v87[7];
          if (v410 == 255)
          {
            float64x2_t v413 = *(float64x2_t *)(v409 + 16);
            float64x2_t v414 = *(float64x2_t *)(v409 + 32);
            float64x2_t v415 = *(float64x2_t *)(v409 + 48);
            float64x2_t v416 = *(float64x2_t *)(v409 + 64);
            float64x2_t v417 = *(float64x2_t *)(v409 + 80);
            float64x2_t v418 = *(float64x2_t *)(v409 + 96);
            float64x2_t v419 = *(float64x2_t *)(v409 + 112);
            float64x2_t v420 = *(float64x2_t *)(v409 + 128);
            float64x2_t v421 = *(float64x2_t *)(v409 + 144);
            float64x2_t v422 = *(float64x2_t *)(v409 + 160);
            float64x2_t v423 = *(float64x2_t *)(v409 + 176);
            float64x2_t v424 = *(float64x2_t *)(v409 + 192);
            float64x2_t v425 = *(float64x2_t *)(v409 + 208);
            float64x2_t v426 = *(float64x2_t *)(v409 + 224);
            float64x2_t v427 = *(float64x2_t *)(v409 + 240);
            float64x2_t v577 = *(float64x2_t *)v409;
            float64x2_t v578 = v413;
            float64x2_t v579 = v414;
            float64x2_t v580 = v415;
            float64x2_t v581 = v420;
            float64x2_t v582 = v421;
            float64x2_t v583 = v422;
            float64x2_t v584 = v423;
            float64x2_t v593 = v416;
            float64x2_t v594 = v417;
            float64x2_t v595 = v418;
            float64x2_t v596 = v419;
            unsigned int v411 = v458;
            unsigned int v412 = v448;
            float64x2_t v597 = v424;
            float64x2_t v598 = v425;
            float64x2_t v599 = v426;
            float64x2_t v600 = v427;
            unsigned int v48 = v456;
            uint64_t v23 = v459;
          }
          else
          {
            unsigned int v48 = v456;
            uint64_t v23 = v459;
            if (v410 == 7)
            {
              float64x2_t v428 = vld1q_dup_f64((const double *)v409);
              float64x2_t v577 = v428;
              float64x2_t v578 = v428;
              float64x2_t v579 = v428;
              float64x2_t v580 = v428;
              float64x2_t v581 = v428;
              float64x2_t v582 = v428;
              float64x2_t v583 = v428;
              float64x2_t v584 = v428;
              float64x2_t v593 = v428;
              float64x2_t v594 = v428;
              float64x2_t v595 = v428;
              float64x2_t v596 = v428;
              float64x2_t v597 = v428;
              float64x2_t v598 = v428;
              float64x2_t v599 = v428;
              unsigned int v411 = v458;
              unsigned int v412 = v448;
              float64x2_t v600 = v428;
            }
            else if (v410)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v577, 256, v409, v410);
              unsigned int v412 = v466;
              unsigned int v94 = v467;
              unsigned int v411 = v468;
            }
            else
            {
              float64x2_t v583 = 0u;
              float64x2_t v584 = 0u;
              float64x2_t v581 = 0u;
              float64x2_t v582 = 0u;
              float64x2_t v579 = 0u;
              float64x2_t v580 = 0u;
              float64x2_t v577 = 0u;
              float64x2_t v578 = 0u;
              float64x2_t v593 = 0u;
              float64x2_t v594 = 0u;
              float64x2_t v595 = 0u;
              float64x2_t v596 = 0u;
              float64x2_t v597 = 0u;
              float64x2_t v598 = 0u;
              unsigned int v411 = v458;
              unsigned int v412 = v448;
              float64x2_t v599 = 0u;
              float64x2_t v600 = 0u;
            }
          }
          int v47 = v27 & v434;
          unsigned int v49 = v45 + 1;
          if (v411)
          {
            unint64_t v429 = 0;
            v430 = (_OWORD *)&v473.f64[32 * (unint64_t)v412 + 4 * v94];
            unsigned int v431 = v469;
            do
            {
              if (v431)
              {
                uint64_t v432 = 0;
                v433 = (char *)v464 + v465 * v429;
                do
                {
                  v433[v432] = *((unsigned char *)v430 + v432);
                  ++v432;
                  unsigned int v431 = v469;
                }
                while (32 * (unint64_t)v469 > v432);
                unsigned int v411 = v468;
              }
              ++v429;
              v430 += 16;
            }
            while (v429 < v411);
          }
LABEL_48:
          BOOL v28 = v45 == v450 >> 3;
          unsigned int v45 = v49;
        }
        while (!v28);
        BOOL v28 = v27++ == v439;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v456 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v453 = v20;
  uint64_t v454 = v21;
  uint64_t v438 = v22;
  uint64_t v23 = v12;
  uint64_t v601 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v457 = v14;
  unsigned int v440 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v439 = v440 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v452 = v31;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v32 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v33 = *(unsigned __int8 *)(v23 + 254);
    char v34 = __clz(v25);
    if (1 << v32 >= v17 || v19 >> v33)
    {
      if (!(v17 >> v32) && 1 << v33 < v19)
      {
        if (v17 < 2) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v33 += v32 + v37;
        unsigned int v32 = -v37;
      }
    }
    else
    {
      unsigned int v35 = 32 - __clz(~(-1 << -v34));
      unsigned int v36 = v33 + v32;
      if (v19 < 2) {
        unsigned int v35 = 0;
      }
      unsigned int v32 = v36 - v35;
      unsigned int v33 = v35;
    }
    if (v19 < 2)
    {
      if (v33) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v34)) < v33)
    {
LABEL_27:
      BOOL v451 = 0;
LABEL_32:
      unsigned int v449 = v33 - 3;
      unsigned int v444 = v32 - 3;
      int v39 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v437 = (((~v39 + v19) & v39) + ~(-1 << v33)) >> v33;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v451 = v38 >= v32;
    goto LABEL_32;
  }
  BOOL v451 = 0;
  unsigned int v437 = 0;
  unsigned int v444 = 0;
  unsigned int v449 = 0;
LABEL_33:
  if (v27 <= v439)
  {
    unsigned int v450 = v456 + a9 - 1;
    if (v456 >> 3 <= v450 >> 3)
    {
      uint64_t v40 = a11;
      unsigned int v461 = v25 >> 3;
      unsigned int v436 = v26 >> 3;
      int v460 = (v25 & 7) + 1;
      int v435 = (v26 & 7) + 1;
      int v434 = ~(-1 << v444);
      uint64_t v446 = 4 * a11;
      uint64_t v447 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v445 = v42.i32[0] | v42.i32[1];
      BOOL v442 = v42.i32[1] != 0;
      int8x8_t v443 = v42;
      BOOL v441 = v42.i32[0] != 0;
      uint64_t v459 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v457) {
          int v44 = v457;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v440 < v43) {
          unsigned int v43 = v440;
        }
        int v448 = v44 - 8 * v27;
        int v458 = v43 - v44 + 1;
        unsigned int v45 = v456 >> 3;
        int v46 = v435;
        if (v27 != v436) {
          int v46 = 8;
        }
        unsigned int v462 = v46;
        int v47 = v27 & v434;
        uint64_t v455 = v438 + (v44 - v457) * v40;
        unsigned int v48 = v456;
        do
        {
          unsigned int v50 = 8 * v45;
          unsigned int v51 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v48) {
            int v52 = v48;
          }
          else {
            int v52 = 8 * v45;
          }
          if (v450 < v51) {
            unsigned int v51 = v456 + a9 - 1;
          }
          int v53 = v51 - v52 + 1;
          if (v45 == v461) {
            unsigned int v54 = v460;
          }
          else {
            unsigned int v54 = 8;
          }
          BOOL v55 = 1;
          if (8 * v27 >= v457 && v50 >= v48)
          {
            int v56 = v460;
            if (v45 != v461) {
              int v56 = 8;
            }
            BOOL v55 = v53 != v56 || v458 != v462;
          }
          if (v451)
          {
            if (v449 | v444)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v449 != 0;
              BOOL v62 = v444 != 0;
              unsigned int v63 = v449;
              unsigned int v64 = v444;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v45 & ~(-1 << v449) & v60) << v58++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v47 & v60) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(v23 + 320) * ((v45 >> v449) + (v27 >> v444) * v437) + (v59 << 11);
          }
          else
          {
            if (v445)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v442;
              BOOL v69 = v441;
              __int32 v70 = v443.i32[1];
              __int32 v71 = v443.i32[0];
              do
              {
                --v70;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v45) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v27) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v69 = v71 != 0;
                BOOL v68 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 7;
          if (v77 < 0x10)
          {
            unsigned int v78 = 0;
            if (!v75)
            {
LABEL_115:
              unint64_t v80 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 3) - 1)));
            if (!(v78 | v75)) {
              goto LABEL_115;
            }
          }
          int v79 = 0;
          unint64_t v80 = 0;
          BOOL v81 = v75 != 0;
          BOOL v82 = v78 != 0;
          int v83 = 1;
          do
          {
            --v75;
            BOOL v84 = !v81;
            if (v81)
            {
              unint64_t v85 = ((unint64_t)(v83 & v45) << v79) | v80;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v85 = v80;
            }
            if (!v84) {
              ++v79;
            }
            --v78;
            if (v82)
            {
              unint64_t v80 = ((unint64_t)(v83 & v27) << v79) | v85;
            }
            else
            {
              unsigned int v78 = 0;
              unint64_t v80 = v85;
            }
            if (v82) {
              ++v79;
            }
            v83 *= 2;
            --v79;
            BOOL v82 = v78 != 0;
            BOOL v81 = v75 != 0;
          }
          while (v78 | v75);
LABEL_116:
          uint64_t v86 = (float64x2_t *)(v453 + v72);
          if (v452)
          {
            memcpy(__dst, v86, sizeof(__dst));
            uint64_t v86 = (float64x2_t *)__dst;
          }
          uint64_t v87 = (unsigned __int8 *)(v454 + 8 * v80);
          unsigned int v88 = (float64x2_t *)(v455 + 32 * (v52 - v48));
          char v89 = v54 < 8 || v55;
          if ((v89 & 1) == 0 && v462 > 7)
          {
            unsigned int v90 = *v87;
            if (v90 == 255)
            {
              float64x2_t v99 = v86[1];
              float64x2_t v100 = v86[2];
              float64x2_t v101 = v86[3];
              float64x2_t v102 = v86[4];
              float64x2_t v103 = v86[5];
              float64x2_t v104 = v86[6];
              float64x2_t v105 = v86[7];
              float64x2_t v106 = v86[8];
              float64x2_t v107 = v86[9];
              float64x2_t v108 = v86[10];
              float64x2_t v109 = v86[11];
              float64x2_t v110 = v86[12];
              float64x2_t v111 = v86[13];
              float64x2_t v112 = v86[14];
              float64x2_t v113 = v86[15];
              uint64_t v40 = a11;
              *unsigned int v88 = *v86;
              v88[1] = v99;
              v88[2] = v100;
              v88[3] = v101;
              uint64_t v114 = (float64x2_t *)((char *)v88 + a11);
              v88[4] = v106;
              v88[5] = v107;
              v88[6] = v108;
              v88[7] = v109;
              *uint64_t v114 = v102;
              v114[1] = v103;
              v114[2] = v104;
              v114[3] = v105;
              int8x8_t v115 = (float64x2_t *)((char *)v88 + a11 + 64);
              uint64_t v91 = 256;
              float64x2_t *v115 = v110;
              v115[1] = v111;
              v115[2] = v112;
              v115[3] = v113;
            }
            else
            {
              uint64_t v40 = a11;
              if (v90 == 7)
              {
                float64x2_t v97 = vld1q_dup_f64(v86->f64);
                *unsigned int v88 = v97;
                v88[1] = v97;
                v88[2] = v97;
                v88[3] = v97;
                v88[4] = v97;
                v88[5] = v97;
                v88[6] = v97;
                v88[7] = v97;
                unsigned int v98 = (float64x2_t *)((char *)v88 + a11);
                *unsigned int v98 = v97;
                v98[1] = v97;
                v98[2] = v97;
                v98[3] = v97;
                v98[4] = v97;
                v98[5] = v97;
                v98[6] = v97;
                v98[7] = v97;
                uint64_t v91 = 8;
              }
              else if (*v87)
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88, a11, (uint64_t)v86, v90);
              }
              else
              {
                uint64_t v91 = 0;
                v88[6] = 0u;
                v88[7] = 0u;
                v88[4] = 0u;
                v88[5] = 0u;
                v88[2] = 0u;
                v88[3] = 0u;
                *unsigned int v88 = 0u;
                v88[1] = 0u;
                unsigned int v92 = (_OWORD *)((char *)v88->f64 + a11);
                v92[6] = 0u;
                v92[7] = 0u;
                v92[4] = 0u;
                v92[5] = 0u;
                v92[2] = 0u;
                v92[3] = 0u;
                _OWORD *v92 = 0u;
                v92[1] = 0u;
              }
            }
            uint64_t v116 = (uint64_t)v86 + v91;
            uint64_t v117 = (float64x2_t *)((char *)v88 + v447);
            unsigned int v118 = v87[1];
            if (v118 == 255)
            {
              float64x2_t v123 = *(float64x2_t *)(v116 + 16);
              float64x2_t v124 = *(float64x2_t *)(v116 + 32);
              float64x2_t v125 = *(float64x2_t *)(v116 + 48);
              long long v126 = *(_OWORD *)(v116 + 64);
              long long v127 = *(_OWORD *)(v116 + 80);
              long long v128 = *(_OWORD *)(v116 + 96);
              long long v129 = *(_OWORD *)(v116 + 112);
              float64x2_t v130 = *(float64x2_t *)(v116 + 128);
              float64x2_t v131 = *(float64x2_t *)(v116 + 144);
              float64x2_t v132 = *(float64x2_t *)(v116 + 160);
              float64x2_t v133 = *(float64x2_t *)(v116 + 176);
              long long v134 = *(_OWORD *)(v116 + 192);
              long long v135 = *(_OWORD *)(v116 + 208);
              long long v136 = *(_OWORD *)(v116 + 224);
              long long v137 = *(_OWORD *)(v116 + 240);
              *uint64_t v117 = *(float64x2_t *)v116;
              v117[1] = v123;
              v117[2] = v124;
              v117[3] = v125;
              int8x16_t v138 = (_OWORD *)((char *)v117->f64 + v40);
              v117[4] = v130;
              v117[5] = v131;
              v117[6] = v132;
              v117[7] = v133;
              *int8x16_t v138 = v126;
              v138[1] = v127;
              v138[2] = v128;
              v138[3] = v129;
              uint64_t v139 = (_OWORD *)((char *)v117[4].f64 + v40);
              uint64_t v119 = 256;
              _OWORD *v139 = v134;
              v139[1] = v135;
              v139[2] = v136;
              v139[3] = v137;
            }
            else if (v118 == 7)
            {
              float64x2_t v121 = vld1q_dup_f64((const double *)v116);
              *uint64_t v117 = v121;
              v117[1] = v121;
              v117[2] = v121;
              v117[3] = v121;
              v117[4] = v121;
              v117[5] = v121;
              v117[6] = v121;
              v117[7] = v121;
              int v122 = (float64x2_t *)((char *)v117 + v40);
              *int v122 = v121;
              v122[1] = v121;
              v122[2] = v121;
              v122[3] = v121;
              v122[4] = v121;
              v122[5] = v121;
              v122[6] = v121;
              v122[7] = v121;
              uint64_t v119 = 8;
            }
            else if (v87[1])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88 + v447, v40, v116, v118);
            }
            else
            {
              uint64_t v119 = 0;
              v117[6] = 0u;
              v117[7] = 0u;
              v117[4] = 0u;
              v117[5] = 0u;
              v117[2] = 0u;
              v117[3] = 0u;
              *uint64_t v117 = 0u;
              v117[1] = 0u;
              int16x8_t v120 = (_OWORD *)((char *)v117->f64 + v40);
              v120[6] = 0u;
              v120[7] = 0u;
              v120[4] = 0u;
              v120[5] = 0u;
              v120[2] = 0u;
              v120[3] = 0u;
              _OWORD *v120 = 0u;
              v120[1] = 0u;
            }
            uint64_t v140 = v116 + v119;
            f64 = (_OWORD *)v88[8].f64;
            unsigned int v142 = v87[2];
            if (v142 == 255)
            {
              float64x2_t v147 = *(float64x2_t *)(v140 + 16);
              float64x2_t v148 = *(float64x2_t *)(v140 + 32);
              float64x2_t v149 = *(float64x2_t *)(v140 + 48);
              long long v150 = *(_OWORD *)(v140 + 64);
              long long v151 = *(_OWORD *)(v140 + 80);
              long long v152 = *(_OWORD *)(v140 + 96);
              long long v153 = *(_OWORD *)(v140 + 112);
              float64x2_t v154 = *(float64x2_t *)(v140 + 128);
              float64x2_t v155 = *(float64x2_t *)(v140 + 144);
              float64x2_t v156 = *(float64x2_t *)(v140 + 160);
              float64x2_t v157 = *(float64x2_t *)(v140 + 176);
              long long v158 = *(_OWORD *)(v140 + 192);
              long long v159 = *(_OWORD *)(v140 + 208);
              long long v160 = *(_OWORD *)(v140 + 224);
              long long v161 = *(_OWORD *)(v140 + 240);
              _OWORD *f64 = *(_OWORD *)v140;
              v88[9] = v147;
              v88[10] = v148;
              v88[11] = v149;
              int8x16_t v162 = (_OWORD *)((char *)f64 + v40);
              v88[12] = v154;
              v88[13] = v155;
              v88[14] = v156;
              v88[15] = v157;
              *int8x16_t v162 = v150;
              v162[1] = v151;
              v162[2] = v152;
              v162[3] = v153;
              v162 += 4;
              uint64_t v143 = 256;
              *int8x16_t v162 = v158;
              v162[1] = v159;
              v162[2] = v160;
              v162[3] = v161;
            }
            else if (v142 == 7)
            {
              float64x2_t v145 = vld1q_dup_f64((const double *)v140);
              v88[8] = v145;
              v88[9] = v145;
              v88[10] = v145;
              v88[11] = v145;
              v88[12] = v145;
              v88[13] = v145;
              v88[14] = v145;
              v88[15] = v145;
              uint64_t v146 = (float64x2_t *)((char *)f64 + v40);
              *uint64_t v146 = v145;
              v146[1] = v145;
              v146[2] = v145;
              v146[3] = v145;
              v146[4] = v145;
              v146[5] = v145;
              v146[6] = v145;
              v146[7] = v145;
              uint64_t v143 = 8;
            }
            else if (v87[2])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v40, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v88[14] = 0u;
              v88[15] = 0u;
              v88[12] = 0u;
              v88[13] = 0u;
              v88[10] = 0u;
              v88[11] = 0u;
              _OWORD *f64 = 0u;
              v88[9] = 0u;
              uint64_t v144 = (_OWORD *)((char *)f64 + v40);
              v144[6] = 0u;
              v144[7] = 0u;
              v144[4] = 0u;
              v144[5] = 0u;
              v144[2] = 0u;
              v144[3] = 0u;
              _OWORD *v144 = 0u;
              v144[1] = 0u;
            }
            uint64_t v163 = v140 + v143;
            uint64_t v164 = (_OWORD *)v117[8].f64;
            unsigned int v165 = v87[3];
            if (v165 == 255)
            {
              float64x2_t v170 = *(float64x2_t *)(v163 + 16);
              float64x2_t v171 = *(float64x2_t *)(v163 + 32);
              float64x2_t v172 = *(float64x2_t *)(v163 + 48);
              long long v173 = *(_OWORD *)(v163 + 64);
              long long v174 = *(_OWORD *)(v163 + 80);
              long long v175 = *(_OWORD *)(v163 + 96);
              long long v176 = *(_OWORD *)(v163 + 112);
              float64x2_t v177 = *(float64x2_t *)(v163 + 128);
              float64x2_t v178 = *(float64x2_t *)(v163 + 144);
              float64x2_t v179 = *(float64x2_t *)(v163 + 160);
              float64x2_t v180 = *(float64x2_t *)(v163 + 176);
              long long v181 = *(_OWORD *)(v163 + 192);
              long long v182 = *(_OWORD *)(v163 + 208);
              long long v183 = *(_OWORD *)(v163 + 224);
              long long v184 = *(_OWORD *)(v163 + 240);
              *uint64_t v164 = *(_OWORD *)v163;
              v117[9] = v170;
              v117[10] = v171;
              v117[11] = v172;
              unsigned int v185 = (_OWORD *)((char *)v164 + v40);
              v117[12] = v177;
              v117[13] = v178;
              v117[14] = v179;
              v117[15] = v180;
              *unsigned int v185 = v173;
              v185[1] = v174;
              v185[2] = v175;
              v185[3] = v176;
              v185 += 4;
              uint64_t v166 = 256;
              *unsigned int v185 = v181;
              v185[1] = v182;
              v185[2] = v183;
              v185[3] = v184;
            }
            else if (v165 == 7)
            {
              float64x2_t v168 = vld1q_dup_f64((const double *)v163);
              v117[8] = v168;
              v117[9] = v168;
              v117[10] = v168;
              v117[11] = v168;
              v117[12] = v168;
              v117[13] = v168;
              v117[14] = v168;
              v117[15] = v168;
              uint64_t v169 = (float64x2_t *)((char *)v164 + v40);
              *uint64_t v169 = v168;
              v169[1] = v168;
              v169[2] = v168;
              v169[3] = v168;
              v169[4] = v168;
              v169[5] = v168;
              uint64_t v166 = 8;
              v169[6] = v168;
              v169[7] = v168;
            }
            else if (v87[3])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v164, v40, v163, v165);
            }
            else
            {
              uint64_t v166 = 0;
              v117[14] = 0u;
              v117[15] = 0u;
              v117[12] = 0u;
              v117[13] = 0u;
              v117[10] = 0u;
              v117[11] = 0u;
              *uint64_t v164 = 0u;
              v117[9] = 0u;
              int8x16_t v167 = (_OWORD *)((char *)v164 + v40);
              v167[6] = 0u;
              v167[7] = 0u;
              v167[4] = 0u;
              v167[5] = 0u;
              v167[2] = 0u;
              v167[3] = 0u;
              *int8x16_t v167 = 0u;
              v167[1] = 0u;
            }
            uint64_t v186 = v163 + v166;
            int v187 = (float64x2_t *)((char *)v88 + v446);
            unsigned int v188 = v87[4];
            if (v188 == 255)
            {
              float64x2_t v193 = *(float64x2_t *)(v186 + 16);
              float64x2_t v194 = *(float64x2_t *)(v186 + 32);
              float64x2_t v195 = *(float64x2_t *)(v186 + 48);
              long long v196 = *(_OWORD *)(v186 + 64);
              long long v197 = *(_OWORD *)(v186 + 80);
              long long v198 = *(_OWORD *)(v186 + 96);
              long long v199 = *(_OWORD *)(v186 + 112);
              float64x2_t v200 = *(float64x2_t *)(v186 + 128);
              float64x2_t v201 = *(float64x2_t *)(v186 + 144);
              float64x2_t v202 = *(float64x2_t *)(v186 + 160);
              float64x2_t v203 = *(float64x2_t *)(v186 + 176);
              long long v204 = *(_OWORD *)(v186 + 192);
              long long v205 = *(_OWORD *)(v186 + 208);
              long long v206 = *(_OWORD *)(v186 + 224);
              long long v207 = *(_OWORD *)(v186 + 240);
              *int v187 = *(float64x2_t *)v186;
              v187[1] = v193;
              v187[2] = v194;
              v187[3] = v195;
              __int32 v208 = (_OWORD *)((char *)v187->f64 + v40);
              v187[4] = v200;
              v187[5] = v201;
              v187[6] = v202;
              v187[7] = v203;
              *__int32 v208 = v196;
              v208[1] = v197;
              v208[2] = v198;
              v208[3] = v199;
              unsigned int v209 = (_OWORD *)((char *)v187[4].f64 + v40);
              uint64_t v189 = 256;
              *unsigned int v209 = v204;
              v209[1] = v205;
              v209[2] = v206;
              v209[3] = v207;
            }
            else if (v188 == 7)
            {
              float64x2_t v191 = vld1q_dup_f64((const double *)v186);
              *int v187 = v191;
              v187[1] = v191;
              v187[2] = v191;
              v187[3] = v191;
              v187[4] = v191;
              v187[5] = v191;
              v187[6] = v191;
              v187[7] = v191;
              BOOL v192 = (float64x2_t *)((char *)v187 + v40);
              *BOOL v192 = v191;
              v192[1] = v191;
              v192[2] = v191;
              v192[3] = v191;
              v192[4] = v191;
              v192[5] = v191;
              v192[6] = v191;
              v192[7] = v191;
              uint64_t v189 = 8;
            }
            else if (v87[4])
            {
              uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88 + v446, v40, v186, v188);
            }
            else
            {
              uint64_t v189 = 0;
              v187[6] = 0u;
              v187[7] = 0u;
              v187[4] = 0u;
              v187[5] = 0u;
              v187[2] = 0u;
              v187[3] = 0u;
              *int v187 = 0u;
              v187[1] = 0u;
              int v190 = (_OWORD *)((char *)v187->f64 + v40);
              v190[6] = 0u;
              v190[7] = 0u;
              v190[4] = 0u;
              v190[5] = 0u;
              v190[2] = 0u;
              v190[3] = 0u;
              *int v190 = 0u;
              v190[1] = 0u;
            }
            uint64_t v210 = v186 + v189;
            int v211 = (float64x2_t *)((char *)v88 + 6 * a11);
            unsigned int v212 = v87[5];
            if (v212 == 255)
            {
              float64x2_t v217 = *(float64x2_t *)(v210 + 16);
              float64x2_t v218 = *(float64x2_t *)(v210 + 32);
              float64x2_t v219 = *(float64x2_t *)(v210 + 48);
              long long v220 = *(_OWORD *)(v210 + 64);
              long long v221 = *(_OWORD *)(v210 + 80);
              long long v222 = *(_OWORD *)(v210 + 96);
              long long v223 = *(_OWORD *)(v210 + 112);
              float64x2_t v224 = *(float64x2_t *)(v210 + 128);
              float64x2_t v225 = *(float64x2_t *)(v210 + 144);
              float64x2_t v226 = *(float64x2_t *)(v210 + 160);
              float64x2_t v227 = *(float64x2_t *)(v210 + 176);
              long long v228 = *(_OWORD *)(v210 + 192);
              long long v229 = *(_OWORD *)(v210 + 208);
              long long v230 = *(_OWORD *)(v210 + 224);
              long long v231 = *(_OWORD *)(v210 + 240);
              *int v211 = *(float64x2_t *)v210;
              v211[1] = v217;
              v211[2] = v218;
              v211[3] = v219;
              unsigned int v232 = (_OWORD *)((char *)v211->f64 + v40);
              v211[4] = v224;
              v211[5] = v225;
              v211[6] = v226;
              v211[7] = v227;
              *unsigned int v232 = v220;
              v232[1] = v221;
              v232[2] = v222;
              v232[3] = v223;
              int8x16_t v233 = (_OWORD *)((char *)v211[4].f64 + v40);
              uint64_t v213 = 256;
              *int8x16_t v233 = v228;
              v233[1] = v229;
              v233[2] = v230;
              v233[3] = v231;
            }
            else if (v212 == 7)
            {
              float64x2_t v215 = vld1q_dup_f64((const double *)v210);
              *int v211 = v215;
              v211[1] = v215;
              v211[2] = v215;
              v211[3] = v215;
              v211[4] = v215;
              v211[5] = v215;
              v211[6] = v215;
              v211[7] = v215;
              int v216 = (float64x2_t *)((char *)v211 + v40);
              *int v216 = v215;
              v216[1] = v215;
              v216[2] = v215;
              v216[3] = v215;
              v216[4] = v215;
              v216[5] = v215;
              v216[6] = v215;
              v216[7] = v215;
              uint64_t v213 = 8;
            }
            else if (v87[5])
            {
              uint64_t v213 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v211, v40, v210, v212);
            }
            else
            {
              uint64_t v213 = 0;
              v211[6] = 0u;
              v211[7] = 0u;
              v211[4] = 0u;
              v211[5] = 0u;
              v211[2] = 0u;
              v211[3] = 0u;
              *int v211 = 0u;
              v211[1] = 0u;
              BOOL v214 = (_OWORD *)((char *)v211->f64 + v40);
              v214[6] = 0u;
              v214[7] = 0u;
              v214[4] = 0u;
              v214[5] = 0u;
              v214[2] = 0u;
              v214[3] = 0u;
              *BOOL v214 = 0u;
              v214[1] = 0u;
            }
            uint64_t v234 = v210 + v213;
            int8x16_t v235 = (_OWORD *)v187[8].f64;
            unsigned int v236 = v87[6];
            if (v236 == 255)
            {
              float64x2_t v241 = *(float64x2_t *)(v234 + 16);
              float64x2_t v242 = *(float64x2_t *)(v234 + 32);
              float64x2_t v243 = *(float64x2_t *)(v234 + 48);
              long long v244 = *(_OWORD *)(v234 + 64);
              long long v245 = *(_OWORD *)(v234 + 80);
              long long v246 = *(_OWORD *)(v234 + 96);
              long long v247 = *(_OWORD *)(v234 + 112);
              float64x2_t v248 = *(float64x2_t *)(v234 + 128);
              float64x2_t v249 = *(float64x2_t *)(v234 + 144);
              float64x2_t v250 = *(float64x2_t *)(v234 + 160);
              float64x2_t v251 = *(float64x2_t *)(v234 + 176);
              long long v252 = *(_OWORD *)(v234 + 192);
              long long v253 = *(_OWORD *)(v234 + 208);
              long long v254 = *(_OWORD *)(v234 + 224);
              long long v255 = *(_OWORD *)(v234 + 240);
              *int8x16_t v235 = *(_OWORD *)v234;
              v187[9] = v241;
              v187[10] = v242;
              v187[11] = v243;
              int8x16_t v256 = (_OWORD *)((char *)v235 + v40);
              v187[12] = v248;
              v187[13] = v249;
              v187[14] = v250;
              v187[15] = v251;
              *int8x16_t v256 = v244;
              v256[1] = v245;
              v256[2] = v246;
              v256[3] = v247;
              v256 += 4;
              uint64_t v237 = 256;
              *int8x16_t v256 = v252;
              v256[1] = v253;
              v256[2] = v254;
              v256[3] = v255;
            }
            else if (v236 == 7)
            {
              float64x2_t v239 = vld1q_dup_f64((const double *)v234);
              v187[8] = v239;
              v187[9] = v239;
              v187[10] = v239;
              v187[11] = v239;
              v187[12] = v239;
              v187[13] = v239;
              v187[14] = v239;
              v187[15] = v239;
              int8x16_t v240 = (float64x2_t *)((char *)v235 + v40);
              *int8x16_t v240 = v239;
              v240[1] = v239;
              v240[2] = v239;
              v240[3] = v239;
              v240[4] = v239;
              v240[5] = v239;
              uint64_t v237 = 8;
              v240[6] = v239;
              v240[7] = v239;
            }
            else if (v87[6])
            {
              uint64_t v237 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v235, v40, v234, v236);
            }
            else
            {
              uint64_t v237 = 0;
              v187[14] = 0u;
              v187[15] = 0u;
              v187[12] = 0u;
              v187[13] = 0u;
              v187[10] = 0u;
              v187[11] = 0u;
              *int8x16_t v235 = 0u;
              v187[9] = 0u;
              int16x8_t v238 = (_OWORD *)((char *)v235 + v40);
              v238[6] = 0u;
              v238[7] = 0u;
              v238[4] = 0u;
              v238[5] = 0u;
              v238[2] = 0u;
              v238[3] = 0u;
              *int16x8_t v238 = 0u;
              v238[1] = 0u;
            }
            uint64_t v257 = v234 + v237;
            int8x16_t v258 = (_OWORD *)v211[8].f64;
            unsigned int v259 = v87[7];
            if (v259 == 255)
            {
              float64x2_t v263 = *(float64x2_t *)(v257 + 16);
              float64x2_t v264 = *(float64x2_t *)(v257 + 32);
              float64x2_t v265 = *(float64x2_t *)(v257 + 48);
              long long v266 = *(_OWORD *)(v257 + 64);
              long long v267 = *(_OWORD *)(v257 + 80);
              long long v268 = *(_OWORD *)(v257 + 96);
              long long v269 = *(_OWORD *)(v257 + 112);
              float64x2_t v270 = *(float64x2_t *)(v257 + 128);
              float64x2_t v271 = *(float64x2_t *)(v257 + 144);
              float64x2_t v272 = *(float64x2_t *)(v257 + 160);
              float64x2_t v273 = *(float64x2_t *)(v257 + 176);
              long long v274 = *(_OWORD *)(v257 + 192);
              long long v275 = *(_OWORD *)(v257 + 208);
              long long v276 = *(_OWORD *)(v257 + 224);
              long long v277 = *(_OWORD *)(v257 + 240);
              *int8x16_t v258 = *(_OWORD *)v257;
              v211[9] = v263;
              v211[10] = v264;
              v211[11] = v265;
              unint64_t v278 = (_OWORD *)((char *)v258 + v40);
              v211[12] = v270;
              v211[13] = v271;
              v211[14] = v272;
              v211[15] = v273;
              *unint64_t v278 = v266;
              v278[1] = v267;
              v278[2] = v268;
              v278[3] = v269;
              v278 += 4;
              *unint64_t v278 = v274;
              v278[1] = v275;
              v278[2] = v276;
              v278[3] = v277;
              unsigned int v48 = v456;
              uint64_t v23 = v459;
            }
            else
            {
              uint64_t v23 = v459;
              if (v259 == 7)
              {
                float64x2_t v261 = vld1q_dup_f64((const double *)v257);
                v211[8] = v261;
                v211[9] = v261;
                v211[10] = v261;
                v211[11] = v261;
                v211[12] = v261;
                v211[13] = v261;
                v211[14] = v261;
                v211[15] = v261;
                int8x16_t v262 = (float64x2_t *)((char *)v258 + v40);
                *int8x16_t v262 = v261;
                v262[1] = v261;
                v262[2] = v261;
                v262[3] = v261;
                v262[4] = v261;
                v262[5] = v261;
                v262[6] = v261;
                v262[7] = v261;
              }
              else if (v259)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v258, v40, v257, v259);
              }
              else
              {
                v211[14] = 0u;
                v211[15] = 0u;
                v211[12] = 0u;
                v211[13] = 0u;
                v211[10] = 0u;
                v211[11] = 0u;
                *int8x16_t v258 = 0u;
                v211[9] = 0u;
                int8x16_t v260 = (_OWORD *)((char *)v258 + v40);
                v260[6] = 0u;
                v260[7] = 0u;
                v260[4] = 0u;
                v260[5] = 0u;
                v260[2] = 0u;
                v260[3] = 0u;
                *int8x16_t v260 = 0u;
                v260[1] = 0u;
              }
              unsigned int v48 = v456;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v93 = v52 - v50;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v459;
          block[5] = v86;
          char v470 = v54;
          char v471 = v462;
          int v466 = v448;
          unsigned int v467 = v52 - v50;
          block[6] = v87;
          v464 = v88;
          uint64_t v40 = a11;
          uint64_t v465 = a11;
          int v468 = v458;
          unsigned int v469 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v459 + 8) + 7384), block);
            unsigned int v48 = v456;
            uint64_t v23 = v459;
LABEL_47:
            int v47 = v27 & v434;
            unsigned int v49 = v45 + 1;
            goto LABEL_48;
          }
          unsigned int v94 = v93;
          unsigned int v95 = *v87;
          if (v95 == 255)
          {
            float64x2_t v279 = v86[1];
            float64x2_t v280 = v86[2];
            float64x2_t v281 = v86[3];
            float64x2_t v282 = v86[4];
            float64x2_t v283 = v86[5];
            float64x2_t v284 = v86[6];
            float64x2_t v285 = v86[7];
            float64x2_t v286 = v86[8];
            float64x2_t v287 = v86[9];
            float64x2_t v288 = v86[10];
            float64x2_t v289 = v86[11];
            float64x2_t v290 = v86[12];
            float64x2_t v291 = v86[13];
            float64x2_t v292 = v86[14];
            float64x2_t v293 = v86[15];
            float64x2_t v473 = *v86;
            float64x2_t v474 = v279;
            float64x2_t v475 = v280;
            float64x2_t v476 = v281;
            float64x2_t v477 = v286;
            float64x2_t v478 = v287;
            float64x2_t v479 = v288;
            float64x2_t v480 = v289;
            float64x2_t v489 = v282;
            float64x2_t v490 = v283;
            float64x2_t v491 = v284;
            float64x2_t v492 = v285;
            uint64_t v96 = 256;
            float64x2_t v493 = v290;
            float64x2_t v494 = v291;
            float64x2_t v495 = v292;
            float64x2_t v496 = v293;
          }
          else if (v95 == 7)
          {
            float64x2_t v294 = vld1q_dup_f64(v86->f64);
            float64x2_t v473 = v294;
            float64x2_t v474 = v294;
            float64x2_t v475 = v294;
            float64x2_t v476 = v294;
            float64x2_t v477 = v294;
            float64x2_t v478 = v294;
            float64x2_t v479 = v294;
            float64x2_t v480 = v294;
            float64x2_t v489 = v294;
            float64x2_t v490 = v294;
            float64x2_t v491 = v294;
            float64x2_t v492 = v294;
            float64x2_t v493 = v294;
            float64x2_t v494 = v294;
            uint64_t v96 = 8;
            float64x2_t v495 = v294;
            float64x2_t v496 = v294;
          }
          else if (*v87)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v473, 256, (uint64_t)v86, v95);
          }
          else
          {
            uint64_t v96 = 0;
            float64x2_t v480 = 0u;
            float64x2_t v479 = 0u;
            float64x2_t v478 = 0u;
            float64x2_t v477 = 0u;
            float64x2_t v476 = 0u;
            float64x2_t v475 = 0u;
            float64x2_t v474 = 0u;
            float64x2_t v473 = 0u;
            float64x2_t v489 = 0u;
            float64x2_t v490 = 0u;
            float64x2_t v491 = 0u;
            float64x2_t v492 = 0u;
            float64x2_t v493 = 0u;
            float64x2_t v494 = 0u;
            float64x2_t v495 = 0u;
            float64x2_t v496 = 0u;
          }
          uint64_t v295 = (uint64_t)v86 + v96;
          unsigned int v296 = v87[1];
          if (v296 == 255)
          {
            float64x2_t v298 = *(float64x2_t *)(v295 + 16);
            float64x2_t v299 = *(float64x2_t *)(v295 + 32);
            float64x2_t v300 = *(float64x2_t *)(v295 + 48);
            float64x2_t v301 = *(float64x2_t *)(v295 + 64);
            float64x2_t v302 = *(float64x2_t *)(v295 + 80);
            float64x2_t v303 = *(float64x2_t *)(v295 + 96);
            float64x2_t v304 = *(float64x2_t *)(v295 + 112);
            float64x2_t v305 = *(float64x2_t *)(v295 + 128);
            float64x2_t v306 = *(float64x2_t *)(v295 + 144);
            float64x2_t v307 = *(float64x2_t *)(v295 + 160);
            float64x2_t v308 = *(float64x2_t *)(v295 + 176);
            float64x2_t v309 = *(float64x2_t *)(v295 + 192);
            float64x2_t v310 = *(float64x2_t *)(v295 + 208);
            float64x2_t v311 = *(float64x2_t *)(v295 + 224);
            float64x2_t v312 = *(float64x2_t *)(v295 + 240);
            float64x2_t v505 = *(float64x2_t *)v295;
            float64x2_t v506 = v298;
            float64x2_t v507 = v299;
            float64x2_t v508 = v300;
            float64x2_t v509 = v305;
            float64x2_t v510 = v306;
            float64x2_t v511 = v307;
            float64x2_t v512 = v308;
            float64x2_t v521 = v301;
            float64x2_t v522 = v302;
            float64x2_t v523 = v303;
            float64x2_t v524 = v304;
            uint64_t v297 = 256;
            float64x2_t v525 = v309;
            float64x2_t v526 = v310;
            float64x2_t v527 = v311;
            float64x2_t v528 = v312;
          }
          else if (v296 == 7)
          {
            float64x2_t v313 = vld1q_dup_f64((const double *)v295);
            float64x2_t v505 = v313;
            float64x2_t v506 = v313;
            float64x2_t v507 = v313;
            float64x2_t v508 = v313;
            float64x2_t v509 = v313;
            float64x2_t v510 = v313;
            float64x2_t v511 = v313;
            float64x2_t v512 = v313;
            float64x2_t v521 = v313;
            float64x2_t v522 = v313;
            float64x2_t v523 = v313;
            float64x2_t v524 = v313;
            float64x2_t v525 = v313;
            float64x2_t v526 = v313;
            uint64_t v297 = 8;
            float64x2_t v527 = v313;
            float64x2_t v528 = v313;
          }
          else if (v87[1])
          {
            uint64_t v297 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v505, 256, v295, v296);
          }
          else
          {
            uint64_t v297 = 0;
            float64x2_t v511 = 0u;
            float64x2_t v512 = 0u;
            float64x2_t v509 = 0u;
            float64x2_t v510 = 0u;
            float64x2_t v507 = 0u;
            float64x2_t v508 = 0u;
            float64x2_t v505 = 0u;
            float64x2_t v506 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v522 = 0u;
            float64x2_t v523 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v525 = 0u;
            float64x2_t v526 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v528 = 0u;
          }
          uint64_t v314 = v295 + v297;
          unsigned int v315 = v87[2];
          if (v315 == 255)
          {
            float64x2_t v317 = *(float64x2_t *)(v314 + 16);
            float64x2_t v318 = *(float64x2_t *)(v314 + 32);
            float64x2_t v319 = *(float64x2_t *)(v314 + 48);
            float64x2_t v320 = *(float64x2_t *)(v314 + 64);
            float64x2_t v321 = *(float64x2_t *)(v314 + 80);
            float64x2_t v322 = *(float64x2_t *)(v314 + 96);
            float64x2_t v323 = *(float64x2_t *)(v314 + 112);
            float64x2_t v324 = *(float64x2_t *)(v314 + 128);
            float64x2_t v325 = *(float64x2_t *)(v314 + 144);
            float64x2_t v326 = *(float64x2_t *)(v314 + 160);
            float64x2_t v327 = *(float64x2_t *)(v314 + 176);
            float64x2_t v328 = *(float64x2_t *)(v314 + 192);
            float64x2_t v329 = *(float64x2_t *)(v314 + 208);
            float64x2_t v330 = *(float64x2_t *)(v314 + 224);
            float64x2_t v331 = *(float64x2_t *)(v314 + 240);
            float64x2_t v481 = *(float64x2_t *)v314;
            float64x2_t v482 = v317;
            float64x2_t v483 = v318;
            float64x2_t v484 = v319;
            float64x2_t v485 = v324;
            float64x2_t v486 = v325;
            float64x2_t v487 = v326;
            float64x2_t v488 = v327;
            float64x2_t v497 = v320;
            float64x2_t v498 = v321;
            float64x2_t v499 = v322;
            float64x2_t v500 = v323;
            uint64_t v316 = 256;
            float64x2_t v501 = v328;
            float64x2_t v502 = v329;
            float64x2_t v503 = v330;
            float64x2_t v504 = v331;
          }
          else if (v315 == 7)
          {
            float64x2_t v332 = vld1q_dup_f64((const double *)v314);
            float64x2_t v481 = v332;
            float64x2_t v482 = v332;
            float64x2_t v483 = v332;
            float64x2_t v484 = v332;
            float64x2_t v485 = v332;
            float64x2_t v486 = v332;
            float64x2_t v487 = v332;
            float64x2_t v488 = v332;
            float64x2_t v497 = v332;
            float64x2_t v498 = v332;
            float64x2_t v499 = v332;
            float64x2_t v500 = v332;
            float64x2_t v501 = v332;
            float64x2_t v502 = v332;
            uint64_t v316 = 8;
            float64x2_t v503 = v332;
            float64x2_t v504 = v332;
          }
          else if (v87[2])
          {
            uint64_t v316 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v481, 256, v314, v315);
          }
          else
          {
            uint64_t v316 = 0;
            float64x2_t v487 = 0u;
            float64x2_t v488 = 0u;
            float64x2_t v485 = 0u;
            float64x2_t v486 = 0u;
            float64x2_t v483 = 0u;
            float64x2_t v484 = 0u;
            float64x2_t v481 = 0u;
            float64x2_t v482 = 0u;
            float64x2_t v497 = 0u;
            float64x2_t v498 = 0u;
            float64x2_t v499 = 0u;
            float64x2_t v500 = 0u;
            float64x2_t v501 = 0u;
            float64x2_t v502 = 0u;
            float64x2_t v503 = 0u;
            float64x2_t v504 = 0u;
          }
          uint64_t v333 = v314 + v316;
          unsigned int v334 = v87[3];
          if (v334 == 255)
          {
            float64x2_t v336 = *(float64x2_t *)(v333 + 16);
            float64x2_t v337 = *(float64x2_t *)(v333 + 32);
            float64x2_t v338 = *(float64x2_t *)(v333 + 48);
            float64x2_t v339 = *(float64x2_t *)(v333 + 64);
            float64x2_t v340 = *(float64x2_t *)(v333 + 80);
            float64x2_t v341 = *(float64x2_t *)(v333 + 96);
            float64x2_t v342 = *(float64x2_t *)(v333 + 112);
            float64x2_t v343 = *(float64x2_t *)(v333 + 128);
            float64x2_t v344 = *(float64x2_t *)(v333 + 144);
            float64x2_t v345 = *(float64x2_t *)(v333 + 160);
            float64x2_t v346 = *(float64x2_t *)(v333 + 176);
            float64x2_t v347 = *(float64x2_t *)(v333 + 192);
            float64x2_t v348 = *(float64x2_t *)(v333 + 208);
            float64x2_t v349 = *(float64x2_t *)(v333 + 224);
            float64x2_t v350 = *(float64x2_t *)(v333 + 240);
            float64x2_t v513 = *(float64x2_t *)v333;
            float64x2_t v514 = v336;
            float64x2_t v515 = v337;
            float64x2_t v516 = v338;
            float64x2_t v517 = v343;
            float64x2_t v518 = v344;
            float64x2_t v519 = v345;
            float64x2_t v520 = v346;
            float64x2_t v529 = v339;
            float64x2_t v530 = v340;
            float64x2_t v531 = v341;
            float64x2_t v532 = v342;
            uint64_t v335 = 256;
            float64x2_t v533 = v347;
            float64x2_t v534 = v348;
            float64x2_t v535 = v349;
            float64x2_t v536 = v350;
          }
          else if (v334 == 7)
          {
            float64x2_t v351 = vld1q_dup_f64((const double *)v333);
            float64x2_t v513 = v351;
            float64x2_t v514 = v351;
            float64x2_t v515 = v351;
            float64x2_t v516 = v351;
            float64x2_t v517 = v351;
            float64x2_t v518 = v351;
            float64x2_t v519 = v351;
            float64x2_t v520 = v351;
            float64x2_t v529 = v351;
            float64x2_t v530 = v351;
            float64x2_t v531 = v351;
            float64x2_t v532 = v351;
            float64x2_t v533 = v351;
            float64x2_t v534 = v351;
            uint64_t v335 = 8;
            float64x2_t v535 = v351;
            float64x2_t v536 = v351;
          }
          else if (v87[3])
          {
            uint64_t v335 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v513, 256, v333, v334);
          }
          else
          {
            uint64_t v335 = 0;
            float64x2_t v519 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v517 = 0u;
            float64x2_t v518 = 0u;
            float64x2_t v515 = 0u;
            float64x2_t v516 = 0u;
            float64x2_t v513 = 0u;
            float64x2_t v514 = 0u;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v536 = 0u;
          }
          uint64_t v352 = v333 + v335;
          unsigned int v353 = v87[4];
          if (v353 == 255)
          {
            float64x2_t v355 = *(float64x2_t *)(v352 + 16);
            float64x2_t v356 = *(float64x2_t *)(v352 + 32);
            float64x2_t v357 = *(float64x2_t *)(v352 + 48);
            float64x2_t v358 = *(float64x2_t *)(v352 + 64);
            float64x2_t v359 = *(float64x2_t *)(v352 + 80);
            float64x2_t v360 = *(float64x2_t *)(v352 + 96);
            float64x2_t v361 = *(float64x2_t *)(v352 + 112);
            float64x2_t v362 = *(float64x2_t *)(v352 + 128);
            float64x2_t v363 = *(float64x2_t *)(v352 + 144);
            float64x2_t v364 = *(float64x2_t *)(v352 + 160);
            float64x2_t v365 = *(float64x2_t *)(v352 + 176);
            float64x2_t v366 = *(float64x2_t *)(v352 + 192);
            float64x2_t v367 = *(float64x2_t *)(v352 + 208);
            float64x2_t v368 = *(float64x2_t *)(v352 + 224);
            float64x2_t v369 = *(float64x2_t *)(v352 + 240);
            float64x2_t v537 = *(float64x2_t *)v352;
            float64x2_t v538 = v355;
            float64x2_t v539 = v356;
            float64x2_t v540 = v357;
            float64x2_t v541 = v362;
            float64x2_t v542 = v363;
            float64x2_t v543 = v364;
            float64x2_t v544 = v365;
            float64x2_t v553 = v358;
            float64x2_t v554 = v359;
            float64x2_t v555 = v360;
            float64x2_t v556 = v361;
            uint64_t v354 = 256;
            float64x2_t v557 = v366;
            float64x2_t v558 = v367;
            float64x2_t v559 = v368;
            float64x2_t v560 = v369;
          }
          else if (v353 == 7)
          {
            float64x2_t v370 = vld1q_dup_f64((const double *)v352);
            float64x2_t v537 = v370;
            float64x2_t v538 = v370;
            float64x2_t v539 = v370;
            float64x2_t v540 = v370;
            float64x2_t v541 = v370;
            float64x2_t v542 = v370;
            float64x2_t v543 = v370;
            float64x2_t v544 = v370;
            float64x2_t v553 = v370;
            float64x2_t v554 = v370;
            float64x2_t v555 = v370;
            float64x2_t v556 = v370;
            float64x2_t v557 = v370;
            float64x2_t v558 = v370;
            float64x2_t v559 = v370;
            uint64_t v354 = 8;
            float64x2_t v560 = v370;
          }
          else if (v87[4])
          {
            uint64_t v354 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v537, 256, v352, v353);
          }
          else
          {
            uint64_t v354 = 0;
            float64x2_t v543 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v554 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v558 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v560 = 0u;
          }
          uint64_t v371 = v352 + v354;
          unsigned int v372 = v87[5];
          if (v372 == 255)
          {
            float64x2_t v374 = *(float64x2_t *)(v371 + 16);
            float64x2_t v375 = *(float64x2_t *)(v371 + 32);
            float64x2_t v376 = *(float64x2_t *)(v371 + 48);
            float64x2_t v377 = *(float64x2_t *)(v371 + 64);
            float64x2_t v378 = *(float64x2_t *)(v371 + 80);
            float64x2_t v379 = *(float64x2_t *)(v371 + 96);
            float64x2_t v380 = *(float64x2_t *)(v371 + 112);
            float64x2_t v381 = *(float64x2_t *)(v371 + 128);
            float64x2_t v382 = *(float64x2_t *)(v371 + 144);
            float64x2_t v383 = *(float64x2_t *)(v371 + 160);
            float64x2_t v384 = *(float64x2_t *)(v371 + 176);
            float64x2_t v385 = *(float64x2_t *)(v371 + 192);
            float64x2_t v386 = *(float64x2_t *)(v371 + 208);
            float64x2_t v387 = *(float64x2_t *)(v371 + 224);
            float64x2_t v388 = *(float64x2_t *)(v371 + 240);
            float64x2_t v569 = *(float64x2_t *)v371;
            float64x2_t v570 = v374;
            float64x2_t v571 = v375;
            float64x2_t v572 = v376;
            float64x2_t v573 = v381;
            float64x2_t v574 = v382;
            float64x2_t v575 = v383;
            float64x2_t v576 = v384;
            float64x2_t v585 = v377;
            float64x2_t v586 = v378;
            float64x2_t v587 = v379;
            float64x2_t v588 = v380;
            uint64_t v373 = 256;
            float64x2_t v589 = v385;
            float64x2_t v590 = v386;
            float64x2_t v591 = v387;
            float64x2_t v592 = v388;
          }
          else if (v372 == 7)
          {
            float64x2_t v389 = vld1q_dup_f64((const double *)v371);
            float64x2_t v569 = v389;
            float64x2_t v570 = v389;
            float64x2_t v571 = v389;
            float64x2_t v572 = v389;
            float64x2_t v573 = v389;
            float64x2_t v574 = v389;
            float64x2_t v575 = v389;
            float64x2_t v576 = v389;
            float64x2_t v585 = v389;
            float64x2_t v586 = v389;
            float64x2_t v587 = v389;
            float64x2_t v588 = v389;
            float64x2_t v589 = v389;
            float64x2_t v590 = v389;
            float64x2_t v591 = v389;
            uint64_t v373 = 8;
            float64x2_t v592 = v389;
          }
          else if (v87[5])
          {
            uint64_t v373 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v569, 256, v371, v372);
          }
          else
          {
            uint64_t v373 = 0;
            float64x2_t v575 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
            float64x2_t v585 = 0u;
            float64x2_t v586 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v589 = 0u;
            float64x2_t v590 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v592 = 0u;
          }
          uint64_t v390 = v371 + v373;
          unsigned int v391 = v87[6];
          if (v391 == 255)
          {
            float64x2_t v393 = *(float64x2_t *)(v390 + 16);
            float64x2_t v394 = *(float64x2_t *)(v390 + 32);
            float64x2_t v395 = *(float64x2_t *)(v390 + 48);
            float64x2_t v396 = *(float64x2_t *)(v390 + 64);
            float64x2_t v397 = *(float64x2_t *)(v390 + 80);
            float64x2_t v398 = *(float64x2_t *)(v390 + 96);
            float64x2_t v399 = *(float64x2_t *)(v390 + 112);
            float64x2_t v400 = *(float64x2_t *)(v390 + 128);
            float64x2_t v401 = *(float64x2_t *)(v390 + 144);
            float64x2_t v402 = *(float64x2_t *)(v390 + 160);
            float64x2_t v403 = *(float64x2_t *)(v390 + 176);
            float64x2_t v404 = *(float64x2_t *)(v390 + 192);
            float64x2_t v405 = *(float64x2_t *)(v390 + 208);
            float64x2_t v406 = *(float64x2_t *)(v390 + 224);
            float64x2_t v407 = *(float64x2_t *)(v390 + 240);
            float64x2_t v545 = *(float64x2_t *)v390;
            float64x2_t v546 = v393;
            float64x2_t v547 = v394;
            float64x2_t v548 = v395;
            float64x2_t v549 = v400;
            float64x2_t v550 = v401;
            float64x2_t v551 = v402;
            float64x2_t v552 = v403;
            float64x2_t v561 = v396;
            float64x2_t v562 = v397;
            float64x2_t v563 = v398;
            float64x2_t v564 = v399;
            uint64_t v392 = 256;
            float64x2_t v565 = v404;
            float64x2_t v566 = v405;
            float64x2_t v567 = v406;
            float64x2_t v568 = v407;
          }
          else if (v391 == 7)
          {
            float64x2_t v408 = vld1q_dup_f64((const double *)v390);
            float64x2_t v545 = v408;
            float64x2_t v546 = v408;
            float64x2_t v547 = v408;
            float64x2_t v548 = v408;
            float64x2_t v549 = v408;
            float64x2_t v550 = v408;
            float64x2_t v551 = v408;
            float64x2_t v552 = v408;
            float64x2_t v561 = v408;
            float64x2_t v562 = v408;
            float64x2_t v563 = v408;
            float64x2_t v564 = v408;
            float64x2_t v565 = v408;
            float64x2_t v566 = v408;
            float64x2_t v567 = v408;
            uint64_t v392 = 8;
            float64x2_t v568 = v408;
          }
          else if (v87[6])
          {
            uint64_t v392 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v545, 256, v390, v391);
          }
          else
          {
            uint64_t v392 = 0;
            float64x2_t v551 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v547 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v568 = 0u;
          }
          uint64_t v409 = v390 + v392;
          unsigned int v410 = v87[7];
          if (v410 == 255)
          {
            float64x2_t v413 = *(float64x2_t *)(v409 + 16);
            float64x2_t v414 = *(float64x2_t *)(v409 + 32);
            float64x2_t v415 = *(float64x2_t *)(v409 + 48);
            float64x2_t v416 = *(float64x2_t *)(v409 + 64);
            float64x2_t v417 = *(float64x2_t *)(v409 + 80);
            float64x2_t v418 = *(float64x2_t *)(v409 + 96);
            float64x2_t v419 = *(float64x2_t *)(v409 + 112);
            float64x2_t v420 = *(float64x2_t *)(v409 + 128);
            float64x2_t v421 = *(float64x2_t *)(v409 + 144);
            float64x2_t v422 = *(float64x2_t *)(v409 + 160);
            float64x2_t v423 = *(float64x2_t *)(v409 + 176);
            float64x2_t v424 = *(float64x2_t *)(v409 + 192);
            float64x2_t v425 = *(float64x2_t *)(v409 + 208);
            float64x2_t v426 = *(float64x2_t *)(v409 + 224);
            float64x2_t v427 = *(float64x2_t *)(v409 + 240);
            float64x2_t v577 = *(float64x2_t *)v409;
            float64x2_t v578 = v413;
            float64x2_t v579 = v414;
            float64x2_t v580 = v415;
            float64x2_t v581 = v420;
            float64x2_t v582 = v421;
            float64x2_t v583 = v422;
            float64x2_t v584 = v423;
            float64x2_t v593 = v416;
            float64x2_t v594 = v417;
            float64x2_t v595 = v418;
            float64x2_t v596 = v419;
            unsigned int v411 = v458;
            unsigned int v412 = v448;
            float64x2_t v597 = v424;
            float64x2_t v598 = v425;
            float64x2_t v599 = v426;
            float64x2_t v600 = v427;
            unsigned int v48 = v456;
            uint64_t v23 = v459;
          }
          else
          {
            unsigned int v48 = v456;
            uint64_t v23 = v459;
            if (v410 == 7)
            {
              float64x2_t v428 = vld1q_dup_f64((const double *)v409);
              float64x2_t v577 = v428;
              float64x2_t v578 = v428;
              float64x2_t v579 = v428;
              float64x2_t v580 = v428;
              float64x2_t v581 = v428;
              float64x2_t v582 = v428;
              float64x2_t v583 = v428;
              float64x2_t v584 = v428;
              float64x2_t v593 = v428;
              float64x2_t v594 = v428;
              float64x2_t v595 = v428;
              float64x2_t v596 = v428;
              float64x2_t v597 = v428;
              float64x2_t v598 = v428;
              float64x2_t v599 = v428;
              unsigned int v411 = v458;
              unsigned int v412 = v448;
              float64x2_t v600 = v428;
            }
            else if (v410)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v577, 256, v409, v410);
              unsigned int v412 = v466;
              unsigned int v94 = v467;
              unsigned int v411 = v468;
            }
            else
            {
              float64x2_t v583 = 0u;
              float64x2_t v584 = 0u;
              float64x2_t v581 = 0u;
              float64x2_t v582 = 0u;
              float64x2_t v579 = 0u;
              float64x2_t v580 = 0u;
              float64x2_t v577 = 0u;
              float64x2_t v578 = 0u;
              float64x2_t v593 = 0u;
              float64x2_t v594 = 0u;
              float64x2_t v595 = 0u;
              float64x2_t v596 = 0u;
              float64x2_t v597 = 0u;
              float64x2_t v598 = 0u;
              unsigned int v411 = v458;
              unsigned int v412 = v448;
              float64x2_t v599 = 0u;
              float64x2_t v600 = 0u;
            }
          }
          int v47 = v27 & v434;
          unsigned int v49 = v45 + 1;
          if (v411)
          {
            unint64_t v429 = 0;
            v430 = (_OWORD *)&v473.f64[32 * (unint64_t)v412 + 4 * v94];
            unsigned int v431 = v469;
            do
            {
              if (v431)
              {
                uint64_t v432 = 0;
                v433 = (char *)v464 + v465 * v429;
                do
                {
                  v433[v432] = *((unsigned char *)v430 + v432);
                  ++v432;
                  unsigned int v431 = v469;
                }
                while (32 * (unint64_t)v469 > v432);
                unsigned int v411 = v468;
              }
              ++v429;
              v430 += 16;
            }
            while (v429 < v411);
          }
LABEL_48:
          BOOL v28 = v45 == v450 >> 3;
          unsigned int v45 = v49;
        }
        while (!v28);
        BOOL v28 = v27++ == v439;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v452 = v21;
  uint64_t v453 = v22;
  uint64_t v439 = v23;
  uint64_t v24 = v12;
  uint64_t v600 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v456 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v438 = v14 + a10 - 1;
  unsigned int v440 = v438 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v451 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v440)
  {
    unsigned int v449 = v16 + a9 - 1;
    unsigned int v437 = v16 >> 3;
    if (v16 >> 3 <= v449 >> 3)
    {
      uint64_t v33 = a11;
      unsigned int v434 = v20 - 1;
      unsigned int v460 = (v20 - 1) >> 3;
      int v459 = ((v20 - 1) & 7) + 1;
      int v435 = ((v18 - 1) & 7) + 1;
      unsigned int v436 = (v18 - 1) >> 3;
      uint64_t v441 = 4 * a11;
      uint64_t v442 = 2 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v447 = v35.i32[0] | v35.i32[1];
      BOOL v444 = v35.i32[1] != 0;
      int8x8_t v445 = v35;
      BOOL v443 = v35.i32[0] != 0;
      unint64_t v433 = 8 * v27 * (unint64_t)v26;
      unsigned int v448 = v16;
      uint64_t v458 = v24;
      do
      {
        unsigned int v36 = (8 * v25) | 7;
        if (8 * v25 <= v456) {
          int v37 = v456;
        }
        else {
          int v37 = 8 * v25;
        }
        unsigned int v38 = v437;
        if (v438 < v36) {
          unsigned int v36 = v438;
        }
        unsigned int v455 = 8 * v25;
        int v446 = v37 - 8 * v25;
        int v457 = v36 - v37 + 1;
        int v39 = v435;
        if (v25 != v436) {
          int v39 = 8;
        }
        unsigned int v461 = v39;
        uint64_t v454 = v439 + (v37 - v456) * v33;
        do
        {
          unsigned int v41 = 8 * v38;
          unsigned int v42 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 8 * v38;
          }
          if (v449 < v42) {
            unsigned int v42 = v449;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v460) {
            unsigned int v45 = v459;
          }
          else {
            unsigned int v45 = 8;
          }
          BOOL v46 = 1;
          if (v455 >= v456 && v41 >= v16)
          {
            int v47 = v459;
            if (v38 != v460) {
              int v47 = 8;
            }
            BOOL v46 = v44 != v47 || v457 != v461;
          }
          if (isLevelTiled)
          {
            unsigned int v417 = 0;
            uint64_t v418 = v433 >> (*(unsigned char *)(v24 + 57) != 0);
            char v419 = 1;
            if (v418 > 127)
            {
              if (v418 > 511)
              {
                if (v418 == 512)
                {
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v417 = 16;
                  unsigned int v421 = 16;
                }
                else
                {
                  char v420 = 1;
                  unsigned int v421 = 0;
                  if (v418 == 1024)
                  {
                    char v419 = 0;
                    unsigned int v421 = 8;
                    unsigned int v417 = 16;
                  }
                }
              }
              else if (v418 == 128)
              {
                char v419 = 0;
                char v420 = 0;
                unsigned int v417 = 32;
                unsigned int v421 = 32;
              }
              else
              {
                char v420 = 1;
                unsigned int v421 = 0;
                if (v418 == 256)
                {
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v421 = 16;
                  unsigned int v417 = 32;
                }
              }
            }
            else
            {
              char v420 = 1;
              unsigned int v421 = 0;
              switch(v418)
              {
                case 4:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v421 = 128;
                  unsigned int v417 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v417 = 128;
                  unsigned int v421 = 128;
                  break;
                case 16:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v421 = 64;
                  unsigned int v417 = 128;
                  break;
                case 32:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v417 = 64;
                  unsigned int v421 = 64;
                  break;
                default:
                  if (v418 == 64)
                  {
                    char v419 = 0;
                    char v420 = 0;
                    unsigned int v421 = 32;
                    unsigned int v417 = 64;
                  }
                  break;
              }
            }
            unsigned int v422 = (v417 >> 3) - 1;
            if (v419) {
              unsigned int v423 = 0;
            }
            else {
              unsigned int v423 = 32 - __clz(~(-1 << -(char)__clz(v422)));
            }
            unsigned int v424 = (v421 >> 3) - 1;
            if (v420)
            {
              unsigned int v425 = 0;
              if (v423) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v425 = 32 - __clz(~(-1 << -(char)__clz(v424)));
              if (v425 | v423)
              {
LABEL_233:
                int v426 = 0;
                uint64_t v427 = 0;
                int v428 = v38 & v422;
                int v429 = v25 & v424;
                BOOL v430 = v423 != 0;
                BOOL v431 = v425 != 0;
                int v432 = 1;
                do
                {
                  --v423;
                  if (v430) {
                    v427 |= (unint64_t)(v432 & v428) << v426++;
                  }
                  else {
                    unsigned int v423 = 0;
                  }
                  --v425;
                  if (v431) {
                    v427 |= (unint64_t)(v432 & v429) << v426++;
                  }
                  else {
                    unsigned int v425 = 0;
                  }
                  v432 *= 2;
                  --v426;
                  BOOL v431 = v425 != 0;
                  BOOL v430 = v423 != 0;
                }
                while (v425 | v423);
                goto LABEL_245;
              }
            }
            uint64_t v427 = 0;
LABEL_245:
            unint64_t v56 = ((unint64_t)(v41 / v417 + v455 / v421 * ((v417 + v434) / v417)) << 14) + (v427 << 11);
            goto LABEL_59;
          }
          if (v447)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v444;
            BOOL v53 = v443;
            __int32 v54 = v445.i32[1];
            __int32 v55 = v445.i32[0];
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v38) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_59:
          unsigned int v57 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
          }
          if (v62 | v59)
          {
            int v63 = 0;
            unint64_t v64 = 0;
            BOOL v65 = v59 != 0;
            BOOL v66 = v62 != 0;
            int v67 = 1;
            do
            {
              --v59;
              BOOL v68 = !v65;
              if (v65)
              {
                unint64_t v69 = ((unint64_t)(v67 & v38) << v63) | v64;
              }
              else
              {
                unsigned int v59 = 0;
                unint64_t v69 = v64;
              }
              if (!v68) {
                ++v63;
              }
              --v62;
              if (v66)
              {
                unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
              }
              else
              {
                unsigned int v62 = 0;
                unint64_t v64 = v69;
              }
              if (v66) {
                ++v63;
              }
              v67 *= 2;
              --v63;
              BOOL v66 = v62 != 0;
              BOOL v65 = v59 != 0;
            }
            while (v62 | v59);
          }
          else
          {
            unint64_t v64 = 0;
          }
          __int32 v70 = (float64x2_t *)(v452 + v56);
          if (v451)
          {
            memcpy(__dst, v70, sizeof(__dst));
            __int32 v70 = (float64x2_t *)__dst;
          }
          __int32 v71 = (unsigned __int8 *)(v453 + 8 * v64);
          uint64_t v72 = (float64x2_t *)(v454 + 32 * (v43 - v16));
          char v73 = v45 < 8 || v46;
          if ((v73 & 1) != 0 || v461 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            unsigned int v77 = v43 - v41;
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v458;
            block[5] = v70;
            char v469 = v45;
            char v470 = v461;
            int v465 = v446;
            unsigned int v466 = v77;
            block[6] = v71;
            v463 = v72;
            uint64_t v33 = a11;
            uint64_t v464 = a11;
            int v467 = v457;
            unsigned int v468 = v44;
            if (v46)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v458 + 8) + 7384), block);
              unsigned int v16 = v448;
              uint64_t v24 = v458;
              unsigned int v40 = v38 + 1;
            }
            else
            {
              unsigned int v78 = *v71;
              unsigned int v16 = v448;
              if (v78 == 255)
              {
                float64x2_t v262 = v70[1];
                float64x2_t v263 = v70[2];
                float64x2_t v264 = v70[3];
                float64x2_t v265 = v70[4];
                float64x2_t v266 = v70[5];
                float64x2_t v267 = v70[6];
                float64x2_t v268 = v70[7];
                float64x2_t v269 = v70[8];
                float64x2_t v270 = v70[9];
                float64x2_t v271 = v70[10];
                float64x2_t v272 = v70[11];
                float64x2_t v273 = v70[12];
                float64x2_t v274 = v70[13];
                float64x2_t v275 = v70[14];
                float64x2_t v276 = v70[15];
                float64x2_t v472 = *v70;
                float64x2_t v473 = v262;
                float64x2_t v474 = v263;
                float64x2_t v475 = v264;
                float64x2_t v476 = v269;
                float64x2_t v477 = v270;
                float64x2_t v478 = v271;
                float64x2_t v479 = v272;
                float64x2_t v488 = v265;
                float64x2_t v489 = v266;
                float64x2_t v490 = v267;
                float64x2_t v491 = v268;
                uint64_t v79 = 256;
                float64x2_t v492 = v273;
                float64x2_t v493 = v274;
                float64x2_t v494 = v275;
                float64x2_t v495 = v276;
              }
              else if (v78 == 7)
              {
                float64x2_t v277 = vld1q_dup_f64(v70->f64);
                float64x2_t v472 = v277;
                float64x2_t v473 = v277;
                float64x2_t v474 = v277;
                float64x2_t v475 = v277;
                float64x2_t v476 = v277;
                float64x2_t v477 = v277;
                float64x2_t v478 = v277;
                float64x2_t v479 = v277;
                float64x2_t v488 = v277;
                float64x2_t v489 = v277;
                float64x2_t v490 = v277;
                float64x2_t v491 = v277;
                float64x2_t v492 = v277;
                float64x2_t v493 = v277;
                uint64_t v79 = 8;
                float64x2_t v494 = v277;
                float64x2_t v495 = v277;
              }
              else if (*v71)
              {
                uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v472, 256, (uint64_t)v70, v78);
              }
              else
              {
                uint64_t v79 = 0;
                float64x2_t v479 = 0u;
                float64x2_t v478 = 0u;
                float64x2_t v477 = 0u;
                float64x2_t v476 = 0u;
                float64x2_t v475 = 0u;
                float64x2_t v474 = 0u;
                float64x2_t v473 = 0u;
                float64x2_t v472 = 0u;
                float64x2_t v488 = 0u;
                float64x2_t v489 = 0u;
                float64x2_t v490 = 0u;
                float64x2_t v491 = 0u;
                float64x2_t v492 = 0u;
                float64x2_t v493 = 0u;
                float64x2_t v494 = 0u;
                float64x2_t v495 = 0u;
              }
              uint64_t v278 = (uint64_t)v70 + v79;
              unsigned int v279 = v71[1];
              if (v279 == 255)
              {
                float64x2_t v281 = *(float64x2_t *)(v278 + 16);
                float64x2_t v282 = *(float64x2_t *)(v278 + 32);
                float64x2_t v283 = *(float64x2_t *)(v278 + 48);
                float64x2_t v284 = *(float64x2_t *)(v278 + 64);
                float64x2_t v285 = *(float64x2_t *)(v278 + 80);
                float64x2_t v286 = *(float64x2_t *)(v278 + 96);
                float64x2_t v287 = *(float64x2_t *)(v278 + 112);
                float64x2_t v288 = *(float64x2_t *)(v278 + 128);
                float64x2_t v289 = *(float64x2_t *)(v278 + 144);
                float64x2_t v290 = *(float64x2_t *)(v278 + 160);
                float64x2_t v291 = *(float64x2_t *)(v278 + 176);
                float64x2_t v292 = *(float64x2_t *)(v278 + 192);
                float64x2_t v293 = *(float64x2_t *)(v278 + 208);
                float64x2_t v294 = *(float64x2_t *)(v278 + 224);
                float64x2_t v295 = *(float64x2_t *)(v278 + 240);
                float64x2_t v504 = *(float64x2_t *)v278;
                float64x2_t v505 = v281;
                float64x2_t v506 = v282;
                float64x2_t v507 = v283;
                float64x2_t v508 = v288;
                float64x2_t v509 = v289;
                float64x2_t v510 = v290;
                float64x2_t v511 = v291;
                float64x2_t v520 = v284;
                float64x2_t v521 = v285;
                float64x2_t v522 = v286;
                float64x2_t v523 = v287;
                uint64_t v280 = 256;
                float64x2_t v524 = v292;
                float64x2_t v525 = v293;
                float64x2_t v526 = v294;
                float64x2_t v527 = v295;
              }
              else if (v279 == 7)
              {
                float64x2_t v296 = vld1q_dup_f64((const double *)v278);
                float64x2_t v504 = v296;
                float64x2_t v505 = v296;
                float64x2_t v506 = v296;
                float64x2_t v507 = v296;
                float64x2_t v508 = v296;
                float64x2_t v509 = v296;
                float64x2_t v510 = v296;
                float64x2_t v511 = v296;
                float64x2_t v520 = v296;
                float64x2_t v521 = v296;
                float64x2_t v522 = v296;
                float64x2_t v523 = v296;
                float64x2_t v524 = v296;
                float64x2_t v525 = v296;
                uint64_t v280 = 8;
                float64x2_t v526 = v296;
                float64x2_t v527 = v296;
              }
              else if (v71[1])
              {
                uint64_t v280 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v504, 256, v278, v279);
              }
              else
              {
                uint64_t v280 = 0;
                float64x2_t v510 = 0u;
                float64x2_t v511 = 0u;
                float64x2_t v508 = 0u;
                float64x2_t v509 = 0u;
                float64x2_t v506 = 0u;
                float64x2_t v507 = 0u;
                float64x2_t v504 = 0u;
                float64x2_t v505 = 0u;
                float64x2_t v520 = 0u;
                float64x2_t v521 = 0u;
                float64x2_t v522 = 0u;
                float64x2_t v523 = 0u;
                float64x2_t v524 = 0u;
                float64x2_t v525 = 0u;
                float64x2_t v526 = 0u;
                float64x2_t v527 = 0u;
              }
              uint64_t v297 = v278 + v280;
              unsigned int v298 = v71[2];
              if (v298 == 255)
              {
                float64x2_t v300 = *(float64x2_t *)(v297 + 16);
                float64x2_t v301 = *(float64x2_t *)(v297 + 32);
                float64x2_t v302 = *(float64x2_t *)(v297 + 48);
                float64x2_t v303 = *(float64x2_t *)(v297 + 64);
                float64x2_t v304 = *(float64x2_t *)(v297 + 80);
                float64x2_t v305 = *(float64x2_t *)(v297 + 96);
                float64x2_t v306 = *(float64x2_t *)(v297 + 112);
                float64x2_t v307 = *(float64x2_t *)(v297 + 128);
                float64x2_t v308 = *(float64x2_t *)(v297 + 144);
                float64x2_t v309 = *(float64x2_t *)(v297 + 160);
                float64x2_t v310 = *(float64x2_t *)(v297 + 176);
                float64x2_t v311 = *(float64x2_t *)(v297 + 192);
                float64x2_t v312 = *(float64x2_t *)(v297 + 208);
                float64x2_t v313 = *(float64x2_t *)(v297 + 224);
                float64x2_t v314 = *(float64x2_t *)(v297 + 240);
                float64x2_t v480 = *(float64x2_t *)v297;
                float64x2_t v481 = v300;
                float64x2_t v482 = v301;
                float64x2_t v483 = v302;
                float64x2_t v484 = v307;
                float64x2_t v485 = v308;
                float64x2_t v486 = v309;
                float64x2_t v487 = v310;
                float64x2_t v496 = v303;
                float64x2_t v497 = v304;
                float64x2_t v498 = v305;
                float64x2_t v499 = v306;
                uint64_t v299 = 256;
                float64x2_t v500 = v311;
                float64x2_t v501 = v312;
                float64x2_t v502 = v313;
                float64x2_t v503 = v314;
              }
              else if (v298 == 7)
              {
                float64x2_t v315 = vld1q_dup_f64((const double *)v297);
                float64x2_t v480 = v315;
                float64x2_t v481 = v315;
                float64x2_t v482 = v315;
                float64x2_t v483 = v315;
                float64x2_t v484 = v315;
                float64x2_t v485 = v315;
                float64x2_t v486 = v315;
                float64x2_t v487 = v315;
                float64x2_t v496 = v315;
                float64x2_t v497 = v315;
                float64x2_t v498 = v315;
                float64x2_t v499 = v315;
                float64x2_t v500 = v315;
                float64x2_t v501 = v315;
                uint64_t v299 = 8;
                float64x2_t v502 = v315;
                float64x2_t v503 = v315;
              }
              else if (v71[2])
              {
                uint64_t v299 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v480, 256, v297, v298);
              }
              else
              {
                uint64_t v299 = 0;
                float64x2_t v486 = 0u;
                float64x2_t v487 = 0u;
                float64x2_t v484 = 0u;
                float64x2_t v485 = 0u;
                float64x2_t v482 = 0u;
                float64x2_t v483 = 0u;
                float64x2_t v480 = 0u;
                float64x2_t v481 = 0u;
                float64x2_t v496 = 0u;
                float64x2_t v497 = 0u;
                float64x2_t v498 = 0u;
                float64x2_t v499 = 0u;
                float64x2_t v500 = 0u;
                float64x2_t v501 = 0u;
                float64x2_t v502 = 0u;
                float64x2_t v503 = 0u;
              }
              uint64_t v316 = v297 + v299;
              unsigned int v317 = v71[3];
              if (v317 == 255)
              {
                float64x2_t v319 = *(float64x2_t *)(v316 + 16);
                float64x2_t v320 = *(float64x2_t *)(v316 + 32);
                float64x2_t v321 = *(float64x2_t *)(v316 + 48);
                float64x2_t v322 = *(float64x2_t *)(v316 + 64);
                float64x2_t v323 = *(float64x2_t *)(v316 + 80);
                float64x2_t v324 = *(float64x2_t *)(v316 + 96);
                float64x2_t v325 = *(float64x2_t *)(v316 + 112);
                float64x2_t v326 = *(float64x2_t *)(v316 + 128);
                float64x2_t v327 = *(float64x2_t *)(v316 + 144);
                float64x2_t v328 = *(float64x2_t *)(v316 + 160);
                float64x2_t v329 = *(float64x2_t *)(v316 + 176);
                float64x2_t v330 = *(float64x2_t *)(v316 + 192);
                float64x2_t v331 = *(float64x2_t *)(v316 + 208);
                float64x2_t v332 = *(float64x2_t *)(v316 + 224);
                float64x2_t v333 = *(float64x2_t *)(v316 + 240);
                float64x2_t v512 = *(float64x2_t *)v316;
                float64x2_t v513 = v319;
                float64x2_t v514 = v320;
                float64x2_t v515 = v321;
                float64x2_t v516 = v326;
                float64x2_t v517 = v327;
                float64x2_t v518 = v328;
                float64x2_t v519 = v329;
                float64x2_t v528 = v322;
                float64x2_t v529 = v323;
                float64x2_t v530 = v324;
                float64x2_t v531 = v325;
                uint64_t v318 = 256;
                float64x2_t v532 = v330;
                float64x2_t v533 = v331;
                float64x2_t v534 = v332;
                float64x2_t v535 = v333;
              }
              else if (v317 == 7)
              {
                float64x2_t v334 = vld1q_dup_f64((const double *)v316);
                float64x2_t v512 = v334;
                float64x2_t v513 = v334;
                float64x2_t v514 = v334;
                float64x2_t v515 = v334;
                float64x2_t v516 = v334;
                float64x2_t v517 = v334;
                float64x2_t v518 = v334;
                float64x2_t v519 = v334;
                float64x2_t v528 = v334;
                float64x2_t v529 = v334;
                float64x2_t v530 = v334;
                float64x2_t v531 = v334;
                float64x2_t v532 = v334;
                float64x2_t v533 = v334;
                uint64_t v318 = 8;
                float64x2_t v534 = v334;
                float64x2_t v535 = v334;
              }
              else if (v71[3])
              {
                uint64_t v318 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v512, 256, v316, v317);
              }
              else
              {
                uint64_t v318 = 0;
                float64x2_t v518 = 0u;
                float64x2_t v519 = 0u;
                float64x2_t v516 = 0u;
                float64x2_t v517 = 0u;
                float64x2_t v514 = 0u;
                float64x2_t v515 = 0u;
                float64x2_t v512 = 0u;
                float64x2_t v513 = 0u;
                float64x2_t v528 = 0u;
                float64x2_t v529 = 0u;
                float64x2_t v530 = 0u;
                float64x2_t v531 = 0u;
                float64x2_t v532 = 0u;
                float64x2_t v533 = 0u;
                float64x2_t v534 = 0u;
                float64x2_t v535 = 0u;
              }
              uint64_t v335 = v316 + v318;
              unsigned int v336 = v71[4];
              if (v336 == 255)
              {
                float64x2_t v338 = *(float64x2_t *)(v335 + 16);
                float64x2_t v339 = *(float64x2_t *)(v335 + 32);
                float64x2_t v340 = *(float64x2_t *)(v335 + 48);
                float64x2_t v341 = *(float64x2_t *)(v335 + 64);
                float64x2_t v342 = *(float64x2_t *)(v335 + 80);
                float64x2_t v343 = *(float64x2_t *)(v335 + 96);
                float64x2_t v344 = *(float64x2_t *)(v335 + 112);
                float64x2_t v345 = *(float64x2_t *)(v335 + 128);
                float64x2_t v346 = *(float64x2_t *)(v335 + 144);
                float64x2_t v347 = *(float64x2_t *)(v335 + 160);
                float64x2_t v348 = *(float64x2_t *)(v335 + 176);
                float64x2_t v349 = *(float64x2_t *)(v335 + 192);
                float64x2_t v350 = *(float64x2_t *)(v335 + 208);
                float64x2_t v351 = *(float64x2_t *)(v335 + 224);
                float64x2_t v352 = *(float64x2_t *)(v335 + 240);
                float64x2_t v536 = *(float64x2_t *)v335;
                float64x2_t v537 = v338;
                float64x2_t v538 = v339;
                float64x2_t v539 = v340;
                float64x2_t v540 = v345;
                float64x2_t v541 = v346;
                float64x2_t v542 = v347;
                float64x2_t v543 = v348;
                float64x2_t v552 = v341;
                float64x2_t v553 = v342;
                float64x2_t v554 = v343;
                float64x2_t v555 = v344;
                uint64_t v337 = 256;
                float64x2_t v556 = v349;
                float64x2_t v557 = v350;
                float64x2_t v558 = v351;
                float64x2_t v559 = v352;
              }
              else if (v336 == 7)
              {
                float64x2_t v353 = vld1q_dup_f64((const double *)v335);
                float64x2_t v536 = v353;
                float64x2_t v537 = v353;
                float64x2_t v538 = v353;
                float64x2_t v539 = v353;
                float64x2_t v540 = v353;
                float64x2_t v541 = v353;
                float64x2_t v542 = v353;
                float64x2_t v543 = v353;
                float64x2_t v552 = v353;
                float64x2_t v553 = v353;
                float64x2_t v554 = v353;
                float64x2_t v555 = v353;
                float64x2_t v556 = v353;
                float64x2_t v557 = v353;
                float64x2_t v558 = v353;
                uint64_t v337 = 8;
                float64x2_t v559 = v353;
              }
              else if (v71[4])
              {
                uint64_t v337 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v536, 256, v335, v336);
              }
              else
              {
                uint64_t v337 = 0;
                float64x2_t v542 = 0u;
                float64x2_t v543 = 0u;
                float64x2_t v540 = 0u;
                float64x2_t v541 = 0u;
                float64x2_t v538 = 0u;
                float64x2_t v539 = 0u;
                float64x2_t v536 = 0u;
                float64x2_t v537 = 0u;
                float64x2_t v552 = 0u;
                float64x2_t v553 = 0u;
                float64x2_t v554 = 0u;
                float64x2_t v555 = 0u;
                float64x2_t v556 = 0u;
                float64x2_t v557 = 0u;
                float64x2_t v558 = 0u;
                float64x2_t v559 = 0u;
              }
              uint64_t v354 = v335 + v337;
              unsigned int v355 = v71[5];
              if (v355 == 255)
              {
                float64x2_t v357 = *(float64x2_t *)(v354 + 16);
                float64x2_t v358 = *(float64x2_t *)(v354 + 32);
                float64x2_t v359 = *(float64x2_t *)(v354 + 48);
                float64x2_t v360 = *(float64x2_t *)(v354 + 64);
                float64x2_t v361 = *(float64x2_t *)(v354 + 80);
                float64x2_t v362 = *(float64x2_t *)(v354 + 96);
                float64x2_t v363 = *(float64x2_t *)(v354 + 112);
                float64x2_t v364 = *(float64x2_t *)(v354 + 128);
                float64x2_t v365 = *(float64x2_t *)(v354 + 144);
                float64x2_t v366 = *(float64x2_t *)(v354 + 160);
                float64x2_t v367 = *(float64x2_t *)(v354 + 176);
                float64x2_t v368 = *(float64x2_t *)(v354 + 192);
                float64x2_t v369 = *(float64x2_t *)(v354 + 208);
                float64x2_t v370 = *(float64x2_t *)(v354 + 224);
                float64x2_t v371 = *(float64x2_t *)(v354 + 240);
                float64x2_t v568 = *(float64x2_t *)v354;
                float64x2_t v569 = v357;
                float64x2_t v570 = v358;
                float64x2_t v571 = v359;
                float64x2_t v572 = v364;
                float64x2_t v573 = v365;
                float64x2_t v574 = v366;
                float64x2_t v575 = v367;
                float64x2_t v584 = v360;
                float64x2_t v585 = v361;
                float64x2_t v586 = v362;
                float64x2_t v587 = v363;
                uint64_t v356 = 256;
                float64x2_t v588 = v368;
                float64x2_t v589 = v369;
                float64x2_t v590 = v370;
                float64x2_t v591 = v371;
              }
              else if (v355 == 7)
              {
                float64x2_t v372 = vld1q_dup_f64((const double *)v354);
                float64x2_t v568 = v372;
                float64x2_t v569 = v372;
                float64x2_t v570 = v372;
                float64x2_t v571 = v372;
                float64x2_t v572 = v372;
                float64x2_t v573 = v372;
                float64x2_t v574 = v372;
                float64x2_t v575 = v372;
                float64x2_t v584 = v372;
                float64x2_t v585 = v372;
                float64x2_t v586 = v372;
                float64x2_t v587 = v372;
                float64x2_t v588 = v372;
                float64x2_t v589 = v372;
                float64x2_t v590 = v372;
                uint64_t v356 = 8;
                float64x2_t v591 = v372;
              }
              else if (v71[5])
              {
                uint64_t v356 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v568, 256, v354, v355);
              }
              else
              {
                uint64_t v356 = 0;
                float64x2_t v574 = 0u;
                float64x2_t v575 = 0u;
                float64x2_t v572 = 0u;
                float64x2_t v573 = 0u;
                float64x2_t v570 = 0u;
                float64x2_t v571 = 0u;
                float64x2_t v568 = 0u;
                float64x2_t v569 = 0u;
                float64x2_t v584 = 0u;
                float64x2_t v585 = 0u;
                float64x2_t v586 = 0u;
                float64x2_t v587 = 0u;
                float64x2_t v588 = 0u;
                float64x2_t v589 = 0u;
                float64x2_t v590 = 0u;
                float64x2_t v591 = 0u;
              }
              uint64_t v373 = v354 + v356;
              unsigned int v374 = v71[6];
              if (v374 == 255)
              {
                float64x2_t v376 = *(float64x2_t *)(v373 + 16);
                float64x2_t v377 = *(float64x2_t *)(v373 + 32);
                float64x2_t v378 = *(float64x2_t *)(v373 + 48);
                float64x2_t v379 = *(float64x2_t *)(v373 + 64);
                float64x2_t v380 = *(float64x2_t *)(v373 + 80);
                float64x2_t v381 = *(float64x2_t *)(v373 + 96);
                float64x2_t v382 = *(float64x2_t *)(v373 + 112);
                float64x2_t v383 = *(float64x2_t *)(v373 + 128);
                float64x2_t v384 = *(float64x2_t *)(v373 + 144);
                float64x2_t v385 = *(float64x2_t *)(v373 + 160);
                float64x2_t v386 = *(float64x2_t *)(v373 + 176);
                float64x2_t v387 = *(float64x2_t *)(v373 + 192);
                float64x2_t v388 = *(float64x2_t *)(v373 + 208);
                float64x2_t v389 = *(float64x2_t *)(v373 + 224);
                float64x2_t v390 = *(float64x2_t *)(v373 + 240);
                float64x2_t v544 = *(float64x2_t *)v373;
                float64x2_t v545 = v376;
                float64x2_t v546 = v377;
                float64x2_t v547 = v378;
                float64x2_t v548 = v383;
                float64x2_t v549 = v384;
                float64x2_t v550 = v385;
                float64x2_t v551 = v386;
                float64x2_t v560 = v379;
                float64x2_t v561 = v380;
                float64x2_t v562 = v381;
                float64x2_t v563 = v382;
                uint64_t v375 = 256;
                float64x2_t v564 = v387;
                float64x2_t v565 = v388;
                float64x2_t v566 = v389;
                float64x2_t v567 = v390;
              }
              else if (v374 == 7)
              {
                float64x2_t v391 = vld1q_dup_f64((const double *)v373);
                float64x2_t v544 = v391;
                float64x2_t v545 = v391;
                float64x2_t v546 = v391;
                float64x2_t v547 = v391;
                float64x2_t v548 = v391;
                float64x2_t v549 = v391;
                float64x2_t v550 = v391;
                float64x2_t v551 = v391;
                float64x2_t v560 = v391;
                float64x2_t v561 = v391;
                float64x2_t v562 = v391;
                float64x2_t v563 = v391;
                float64x2_t v564 = v391;
                float64x2_t v565 = v391;
                float64x2_t v566 = v391;
                uint64_t v375 = 8;
                float64x2_t v567 = v391;
              }
              else if (v71[6])
              {
                uint64_t v375 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v544, 256, v373, v374);
              }
              else
              {
                uint64_t v375 = 0;
                float64x2_t v550 = 0u;
                float64x2_t v551 = 0u;
                float64x2_t v548 = 0u;
                float64x2_t v549 = 0u;
                float64x2_t v546 = 0u;
                float64x2_t v547 = 0u;
                float64x2_t v544 = 0u;
                float64x2_t v545 = 0u;
                float64x2_t v560 = 0u;
                float64x2_t v561 = 0u;
                float64x2_t v562 = 0u;
                float64x2_t v563 = 0u;
                float64x2_t v564 = 0u;
                float64x2_t v565 = 0u;
                float64x2_t v566 = 0u;
                float64x2_t v567 = 0u;
              }
              uint64_t v392 = v373 + v375;
              unsigned int v393 = v71[7];
              if (v393 == 255)
              {
                float64x2_t v396 = *(float64x2_t *)(v392 + 16);
                float64x2_t v397 = *(float64x2_t *)(v392 + 32);
                float64x2_t v398 = *(float64x2_t *)(v392 + 48);
                float64x2_t v399 = *(float64x2_t *)(v392 + 64);
                float64x2_t v400 = *(float64x2_t *)(v392 + 80);
                float64x2_t v401 = *(float64x2_t *)(v392 + 96);
                float64x2_t v402 = *(float64x2_t *)(v392 + 112);
                float64x2_t v403 = *(float64x2_t *)(v392 + 128);
                float64x2_t v404 = *(float64x2_t *)(v392 + 144);
                float64x2_t v405 = *(float64x2_t *)(v392 + 160);
                float64x2_t v406 = *(float64x2_t *)(v392 + 176);
                float64x2_t v407 = *(float64x2_t *)(v392 + 192);
                float64x2_t v408 = *(float64x2_t *)(v392 + 208);
                float64x2_t v409 = *(float64x2_t *)(v392 + 224);
                float64x2_t v410 = *(float64x2_t *)(v392 + 240);
                float64x2_t v576 = *(float64x2_t *)v392;
                float64x2_t v577 = v396;
                float64x2_t v578 = v397;
                float64x2_t v579 = v398;
                float64x2_t v580 = v403;
                float64x2_t v581 = v404;
                float64x2_t v582 = v405;
                float64x2_t v583 = v406;
                float64x2_t v592 = v399;
                float64x2_t v593 = v400;
                float64x2_t v594 = v401;
                float64x2_t v595 = v402;
                unsigned int v394 = v457;
                unsigned int v395 = v446;
                float64x2_t v596 = v407;
                float64x2_t v597 = v408;
                float64x2_t v598 = v409;
                float64x2_t v599 = v410;
                uint64_t v24 = v458;
                unsigned int v40 = v38 + 1;
              }
              else
              {
                uint64_t v24 = v458;
                unsigned int v40 = v38 + 1;
                if (v393 == 7)
                {
                  float64x2_t v411 = vld1q_dup_f64((const double *)v392);
                  float64x2_t v576 = v411;
                  float64x2_t v577 = v411;
                  float64x2_t v578 = v411;
                  float64x2_t v579 = v411;
                  float64x2_t v580 = v411;
                  float64x2_t v581 = v411;
                  float64x2_t v582 = v411;
                  float64x2_t v583 = v411;
                  float64x2_t v592 = v411;
                  float64x2_t v593 = v411;
                  float64x2_t v594 = v411;
                  float64x2_t v595 = v411;
                  float64x2_t v596 = v411;
                  float64x2_t v597 = v411;
                  float64x2_t v598 = v411;
                  unsigned int v394 = v457;
                  unsigned int v395 = v446;
                  float64x2_t v599 = v411;
                }
                else if (v393)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v576, 256, v392, v393);
                  unsigned int v395 = v465;
                  unsigned int v77 = v466;
                  unsigned int v394 = v467;
                }
                else
                {
                  float64x2_t v582 = 0u;
                  float64x2_t v583 = 0u;
                  float64x2_t v580 = 0u;
                  float64x2_t v581 = 0u;
                  float64x2_t v578 = 0u;
                  float64x2_t v579 = 0u;
                  float64x2_t v576 = 0u;
                  float64x2_t v577 = 0u;
                  float64x2_t v592 = 0u;
                  float64x2_t v593 = 0u;
                  float64x2_t v594 = 0u;
                  float64x2_t v595 = 0u;
                  float64x2_t v596 = 0u;
                  float64x2_t v597 = 0u;
                  unsigned int v394 = v457;
                  unsigned int v395 = v446;
                  float64x2_t v598 = 0u;
                  float64x2_t v599 = 0u;
                }
              }
              if (v394)
              {
                unint64_t v412 = 0;
                float64x2_t v413 = (_OWORD *)&v472.f64[32 * (unint64_t)v395 + 4 * v77];
                unsigned int v414 = v468;
                do
                {
                  if (v414)
                  {
                    uint64_t v415 = 0;
                    float64x2_t v416 = (char *)v463 + v464 * v412;
                    do
                    {
                      v416[v415] = *((unsigned char *)v413 + v415);
                      ++v415;
                      unsigned int v414 = v468;
                    }
                    while (32 * (unint64_t)v468 > v415);
                    unsigned int v394 = v467;
                  }
                  ++v412;
                  v413 += 16;
                }
                while (v412 < v394);
              }
            }
          }
          else
          {
            unsigned int v74 = *v71;
            if (v74 == 255)
            {
              float64x2_t v82 = v70[1];
              float64x2_t v83 = v70[2];
              float64x2_t v84 = v70[3];
              float64x2_t v85 = v70[4];
              float64x2_t v86 = v70[5];
              float64x2_t v87 = v70[6];
              float64x2_t v88 = v70[7];
              float64x2_t v89 = v70[8];
              float64x2_t v90 = v70[9];
              float64x2_t v91 = v70[10];
              float64x2_t v92 = v70[11];
              float64x2_t v93 = v70[12];
              float64x2_t v94 = v70[13];
              float64x2_t v95 = v70[14];
              float64x2_t v96 = v70[15];
              uint64_t v33 = a11;
              *uint64_t v72 = *v70;
              v72[1] = v82;
              v72[2] = v83;
              v72[3] = v84;
              float64x2_t v97 = (float64x2_t *)((char *)v72 + a11);
              v72[4] = v89;
              v72[5] = v90;
              v72[6] = v91;
              v72[7] = v92;
              float64x2_t *v97 = v85;
              v97[1] = v86;
              v97[2] = v87;
              v97[3] = v88;
              unsigned int v98 = (float64x2_t *)((char *)v72 + a11 + 64);
              uint64_t v75 = 256;
              *unsigned int v98 = v93;
              v98[1] = v94;
              v98[2] = v95;
              v98[3] = v96;
            }
            else
            {
              uint64_t v33 = a11;
              if (v74 == 7)
              {
                float64x2_t v80 = vld1q_dup_f64(v70->f64);
                *uint64_t v72 = v80;
                v72[1] = v80;
                v72[2] = v80;
                v72[3] = v80;
                v72[4] = v80;
                v72[5] = v80;
                v72[6] = v80;
                v72[7] = v80;
                BOOL v81 = (float64x2_t *)((char *)v72 + a11);
                *BOOL v81 = v80;
                v81[1] = v80;
                v81[2] = v80;
                v81[3] = v80;
                v81[4] = v80;
                v81[5] = v80;
                v81[6] = v80;
                v81[7] = v80;
                uint64_t v75 = 8;
              }
              else if (*v71)
              {
                uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72, a11, (uint64_t)v70, v74);
              }
              else
              {
                uint64_t v75 = 0;
                v72[6] = 0u;
                v72[7] = 0u;
                v72[4] = 0u;
                v72[5] = 0u;
                v72[2] = 0u;
                v72[3] = 0u;
                *uint64_t v72 = 0u;
                v72[1] = 0u;
                unsigned int v76 = (_OWORD *)((char *)v72->f64 + a11);
                v76[6] = 0u;
                v76[7] = 0u;
                v76[4] = 0u;
                v76[5] = 0u;
                v76[2] = 0u;
                v76[3] = 0u;
                *unsigned int v76 = 0u;
                v76[1] = 0u;
              }
            }
            uint64_t v99 = (uint64_t)v70 + v75;
            float64x2_t v100 = (float64x2_t *)((char *)v72 + v442);
            unsigned int v101 = v71[1];
            if (v101 == 255)
            {
              float64x2_t v106 = *(float64x2_t *)(v99 + 16);
              float64x2_t v107 = *(float64x2_t *)(v99 + 32);
              float64x2_t v108 = *(float64x2_t *)(v99 + 48);
              long long v109 = *(_OWORD *)(v99 + 64);
              long long v110 = *(_OWORD *)(v99 + 80);
              long long v111 = *(_OWORD *)(v99 + 96);
              long long v112 = *(_OWORD *)(v99 + 112);
              float64x2_t v113 = *(float64x2_t *)(v99 + 128);
              float64x2_t v114 = *(float64x2_t *)(v99 + 144);
              float64x2_t v115 = *(float64x2_t *)(v99 + 160);
              float64x2_t v116 = *(float64x2_t *)(v99 + 176);
              long long v117 = *(_OWORD *)(v99 + 192);
              long long v118 = *(_OWORD *)(v99 + 208);
              long long v119 = *(_OWORD *)(v99 + 224);
              long long v120 = *(_OWORD *)(v99 + 240);
              *float64x2_t v100 = *(float64x2_t *)v99;
              v100[1] = v106;
              v100[2] = v107;
              v100[3] = v108;
              float64x2_t v121 = (_OWORD *)((char *)v100->f64 + v33);
              v100[4] = v113;
              v100[5] = v114;
              v100[6] = v115;
              v100[7] = v116;
              _OWORD *v121 = v109;
              v121[1] = v110;
              v121[2] = v111;
              v121[3] = v112;
              int v122 = (_OWORD *)((char *)v100[4].f64 + v33);
              uint64_t v102 = 256;
              *int v122 = v117;
              v122[1] = v118;
              v122[2] = v119;
              v122[3] = v120;
            }
            else if (v101 == 7)
            {
              float64x2_t v104 = vld1q_dup_f64((const double *)v99);
              *float64x2_t v100 = v104;
              v100[1] = v104;
              v100[2] = v104;
              v100[3] = v104;
              v100[4] = v104;
              v100[5] = v104;
              v100[6] = v104;
              v100[7] = v104;
              float64x2_t v105 = (float64x2_t *)((char *)v100 + v33);
              float64x2_t *v105 = v104;
              v105[1] = v104;
              v105[2] = v104;
              v105[3] = v104;
              v105[4] = v104;
              v105[5] = v104;
              v105[6] = v104;
              v105[7] = v104;
              uint64_t v102 = 8;
            }
            else if (v71[1])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72 + v442, v33, v99, v101);
            }
            else
            {
              uint64_t v102 = 0;
              v100[6] = 0u;
              v100[7] = 0u;
              v100[4] = 0u;
              v100[5] = 0u;
              v100[2] = 0u;
              v100[3] = 0u;
              *float64x2_t v100 = 0u;
              v100[1] = 0u;
              float64x2_t v103 = (_OWORD *)((char *)v100->f64 + v33);
              v103[6] = 0u;
              v103[7] = 0u;
              v103[4] = 0u;
              v103[5] = 0u;
              v103[2] = 0u;
              v103[3] = 0u;
              _OWORD *v103 = 0u;
              v103[1] = 0u;
            }
            uint64_t v123 = v99 + v102;
            f64 = (_OWORD *)v72[8].f64;
            unsigned int v125 = v71[2];
            if (v125 == 255)
            {
              float64x2_t v130 = *(float64x2_t *)(v123 + 16);
              float64x2_t v131 = *(float64x2_t *)(v123 + 32);
              float64x2_t v132 = *(float64x2_t *)(v123 + 48);
              long long v133 = *(_OWORD *)(v123 + 64);
              long long v134 = *(_OWORD *)(v123 + 80);
              long long v135 = *(_OWORD *)(v123 + 96);
              long long v136 = *(_OWORD *)(v123 + 112);
              float64x2_t v137 = *(float64x2_t *)(v123 + 128);
              float64x2_t v138 = *(float64x2_t *)(v123 + 144);
              float64x2_t v139 = *(float64x2_t *)(v123 + 160);
              float64x2_t v140 = *(float64x2_t *)(v123 + 176);
              long long v141 = *(_OWORD *)(v123 + 192);
              long long v142 = *(_OWORD *)(v123 + 208);
              long long v143 = *(_OWORD *)(v123 + 224);
              long long v144 = *(_OWORD *)(v123 + 240);
              _OWORD *f64 = *(_OWORD *)v123;
              v72[9] = v130;
              v72[10] = v131;
              v72[11] = v132;
              float64x2_t v145 = (_OWORD *)((char *)f64 + v33);
              v72[12] = v137;
              v72[13] = v138;
              v72[14] = v139;
              v72[15] = v140;
              _OWORD *v145 = v133;
              v145[1] = v134;
              v145[2] = v135;
              v145[3] = v136;
              v145 += 4;
              uint64_t v126 = 256;
              _OWORD *v145 = v141;
              v145[1] = v142;
              v145[2] = v143;
              v145[3] = v144;
            }
            else if (v125 == 7)
            {
              float64x2_t v128 = vld1q_dup_f64((const double *)v123);
              v72[8] = v128;
              v72[9] = v128;
              v72[10] = v128;
              v72[11] = v128;
              v72[12] = v128;
              v72[13] = v128;
              v72[14] = v128;
              v72[15] = v128;
              long long v129 = (float64x2_t *)((char *)f64 + v33);
              float64x2_t *v129 = v128;
              v129[1] = v128;
              v129[2] = v128;
              v129[3] = v128;
              v129[4] = v128;
              v129[5] = v128;
              v129[6] = v128;
              v129[7] = v128;
              uint64_t v126 = 8;
            }
            else if (v71[2])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v33, v123, v125);
            }
            else
            {
              uint64_t v126 = 0;
              v72[14] = 0u;
              v72[15] = 0u;
              v72[12] = 0u;
              v72[13] = 0u;
              v72[10] = 0u;
              v72[11] = 0u;
              _OWORD *f64 = 0u;
              v72[9] = 0u;
              long long v127 = (_OWORD *)((char *)f64 + v33);
              v127[6] = 0u;
              v127[7] = 0u;
              v127[4] = 0u;
              v127[5] = 0u;
              v127[2] = 0u;
              v127[3] = 0u;
              _OWORD *v127 = 0u;
              v127[1] = 0u;
            }
            uint64_t v146 = v123 + v126;
            float64x2_t v147 = (_OWORD *)v100[8].f64;
            unsigned int v148 = v71[3];
            if (v148 == 255)
            {
              float64x2_t v153 = *(float64x2_t *)(v146 + 16);
              float64x2_t v154 = *(float64x2_t *)(v146 + 32);
              float64x2_t v155 = *(float64x2_t *)(v146 + 48);
              long long v156 = *(_OWORD *)(v146 + 64);
              long long v157 = *(_OWORD *)(v146 + 80);
              long long v158 = *(_OWORD *)(v146 + 96);
              long long v159 = *(_OWORD *)(v146 + 112);
              float64x2_t v160 = *(float64x2_t *)(v146 + 128);
              float64x2_t v161 = *(float64x2_t *)(v146 + 144);
              float64x2_t v162 = *(float64x2_t *)(v146 + 160);
              float64x2_t v163 = *(float64x2_t *)(v146 + 176);
              long long v164 = *(_OWORD *)(v146 + 192);
              long long v165 = *(_OWORD *)(v146 + 208);
              long long v166 = *(_OWORD *)(v146 + 224);
              long long v167 = *(_OWORD *)(v146 + 240);
              _OWORD *v147 = *(_OWORD *)v146;
              v100[9] = v153;
              v100[10] = v154;
              v100[11] = v155;
              float64x2_t v168 = (_OWORD *)((char *)v147 + v33);
              v100[12] = v160;
              v100[13] = v161;
              v100[14] = v162;
              v100[15] = v163;
              *float64x2_t v168 = v156;
              v168[1] = v157;
              v168[2] = v158;
              v168[3] = v159;
              v168 += 4;
              uint64_t v149 = 256;
              *float64x2_t v168 = v164;
              v168[1] = v165;
              v168[2] = v166;
              v168[3] = v167;
            }
            else if (v148 == 7)
            {
              float64x2_t v151 = vld1q_dup_f64((const double *)v146);
              v100[8] = v151;
              v100[9] = v151;
              v100[10] = v151;
              v100[11] = v151;
              v100[12] = v151;
              v100[13] = v151;
              v100[14] = v151;
              v100[15] = v151;
              long long v152 = (float64x2_t *)((char *)v147 + v33);
              *long long v152 = v151;
              v152[1] = v151;
              v152[2] = v151;
              v152[3] = v151;
              v152[4] = v151;
              v152[5] = v151;
              uint64_t v149 = 8;
              v152[6] = v151;
              v152[7] = v151;
            }
            else if (v71[3])
            {
              uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v147, v33, v146, v148);
            }
            else
            {
              uint64_t v149 = 0;
              v100[14] = 0u;
              v100[15] = 0u;
              v100[12] = 0u;
              v100[13] = 0u;
              v100[10] = 0u;
              v100[11] = 0u;
              _OWORD *v147 = 0u;
              v100[9] = 0u;
              long long v150 = (_OWORD *)((char *)v147 + v33);
              v150[6] = 0u;
              v150[7] = 0u;
              v150[4] = 0u;
              v150[5] = 0u;
              v150[2] = 0u;
              v150[3] = 0u;
              _OWORD *v150 = 0u;
              v150[1] = 0u;
            }
            uint64_t v169 = v146 + v149;
            float64x2_t v170 = (float64x2_t *)((char *)v72 + v441);
            unsigned int v171 = v71[4];
            if (v171 == 255)
            {
              float64x2_t v176 = *(float64x2_t *)(v169 + 16);
              float64x2_t v177 = *(float64x2_t *)(v169 + 32);
              float64x2_t v178 = *(float64x2_t *)(v169 + 48);
              long long v179 = *(_OWORD *)(v169 + 64);
              long long v180 = *(_OWORD *)(v169 + 80);
              long long v181 = *(_OWORD *)(v169 + 96);
              long long v182 = *(_OWORD *)(v169 + 112);
              float64x2_t v183 = *(float64x2_t *)(v169 + 128);
              float64x2_t v184 = *(float64x2_t *)(v169 + 144);
              float64x2_t v185 = *(float64x2_t *)(v169 + 160);
              float64x2_t v186 = *(float64x2_t *)(v169 + 176);
              long long v187 = *(_OWORD *)(v169 + 192);
              long long v188 = *(_OWORD *)(v169 + 208);
              long long v189 = *(_OWORD *)(v169 + 224);
              long long v190 = *(_OWORD *)(v169 + 240);
              *float64x2_t v170 = *(float64x2_t *)v169;
              v170[1] = v176;
              v170[2] = v177;
              v170[3] = v178;
              float64x2_t v191 = (_OWORD *)((char *)v170->f64 + v33);
              v170[4] = v183;
              v170[5] = v184;
              v170[6] = v185;
              v170[7] = v186;
              *float64x2_t v191 = v179;
              v191[1] = v180;
              v191[2] = v181;
              v191[3] = v182;
              BOOL v192 = (_OWORD *)((char *)v170[4].f64 + v33);
              uint64_t v172 = 256;
              *BOOL v192 = v187;
              v192[1] = v188;
              v192[2] = v189;
              v192[3] = v190;
            }
            else if (v171 == 7)
            {
              float64x2_t v174 = vld1q_dup_f64((const double *)v169);
              *float64x2_t v170 = v174;
              v170[1] = v174;
              v170[2] = v174;
              v170[3] = v174;
              v170[4] = v174;
              v170[5] = v174;
              v170[6] = v174;
              v170[7] = v174;
              long long v175 = (float64x2_t *)((char *)v170 + v33);
              *long long v175 = v174;
              v175[1] = v174;
              v175[2] = v174;
              v175[3] = v174;
              v175[4] = v174;
              v175[5] = v174;
              v175[6] = v174;
              v175[7] = v174;
              uint64_t v172 = 8;
            }
            else if (v71[4])
            {
              uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72 + v441, v33, v169, v171);
            }
            else
            {
              uint64_t v172 = 0;
              v170[6] = 0u;
              v170[7] = 0u;
              v170[4] = 0u;
              v170[5] = 0u;
              v170[2] = 0u;
              v170[3] = 0u;
              *float64x2_t v170 = 0u;
              v170[1] = 0u;
              long long v173 = (_OWORD *)((char *)v170->f64 + v33);
              v173[6] = 0u;
              v173[7] = 0u;
              v173[4] = 0u;
              v173[5] = 0u;
              v173[2] = 0u;
              v173[3] = 0u;
              *long long v173 = 0u;
              v173[1] = 0u;
            }
            uint64_t v193 = v169 + v172;
            float64x2_t v194 = (float64x2_t *)((char *)v72 + 6 * a11);
            unsigned int v195 = v71[5];
            if (v195 == 255)
            {
              float64x2_t v200 = *(float64x2_t *)(v193 + 16);
              float64x2_t v201 = *(float64x2_t *)(v193 + 32);
              float64x2_t v202 = *(float64x2_t *)(v193 + 48);
              long long v203 = *(_OWORD *)(v193 + 64);
              long long v204 = *(_OWORD *)(v193 + 80);
              long long v205 = *(_OWORD *)(v193 + 96);
              long long v206 = *(_OWORD *)(v193 + 112);
              float64x2_t v207 = *(float64x2_t *)(v193 + 128);
              float64x2_t v208 = *(float64x2_t *)(v193 + 144);
              float64x2_t v209 = *(float64x2_t *)(v193 + 160);
              float64x2_t v210 = *(float64x2_t *)(v193 + 176);
              long long v211 = *(_OWORD *)(v193 + 192);
              long long v212 = *(_OWORD *)(v193 + 208);
              long long v213 = *(_OWORD *)(v193 + 224);
              long long v214 = *(_OWORD *)(v193 + 240);
              *float64x2_t v194 = *(float64x2_t *)v193;
              v194[1] = v200;
              v194[2] = v201;
              v194[3] = v202;
              float64x2_t v215 = (_OWORD *)((char *)v194->f64 + v33);
              v194[4] = v207;
              v194[5] = v208;
              v194[6] = v209;
              v194[7] = v210;
              *float64x2_t v215 = v203;
              v215[1] = v204;
              v215[2] = v205;
              v215[3] = v206;
              int v216 = (_OWORD *)((char *)v194[4].f64 + v33);
              uint64_t v196 = 256;
              *int v216 = v211;
              v216[1] = v212;
              v216[2] = v213;
              v216[3] = v214;
            }
            else if (v195 == 7)
            {
              float64x2_t v198 = vld1q_dup_f64((const double *)v193);
              *float64x2_t v194 = v198;
              v194[1] = v198;
              v194[2] = v198;
              v194[3] = v198;
              v194[4] = v198;
              v194[5] = v198;
              v194[6] = v198;
              v194[7] = v198;
              long long v199 = (float64x2_t *)((char *)v194 + v33);
              *long long v199 = v198;
              v199[1] = v198;
              v199[2] = v198;
              v199[3] = v198;
              v199[4] = v198;
              v199[5] = v198;
              v199[6] = v198;
              v199[7] = v198;
              uint64_t v196 = 8;
            }
            else if (v71[5])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v194, v33, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              v194[6] = 0u;
              v194[7] = 0u;
              v194[4] = 0u;
              v194[5] = 0u;
              v194[2] = 0u;
              v194[3] = 0u;
              *float64x2_t v194 = 0u;
              v194[1] = 0u;
              long long v197 = (_OWORD *)((char *)v194->f64 + v33);
              v197[6] = 0u;
              v197[7] = 0u;
              v197[4] = 0u;
              v197[5] = 0u;
              v197[2] = 0u;
              v197[3] = 0u;
              *long long v197 = 0u;
              v197[1] = 0u;
            }
            uint64_t v217 = v193 + v196;
            float64x2_t v218 = (_OWORD *)v170[8].f64;
            unsigned int v219 = v71[6];
            if (v219 == 255)
            {
              float64x2_t v224 = *(float64x2_t *)(v217 + 16);
              float64x2_t v225 = *(float64x2_t *)(v217 + 32);
              float64x2_t v226 = *(float64x2_t *)(v217 + 48);
              long long v227 = *(_OWORD *)(v217 + 64);
              long long v228 = *(_OWORD *)(v217 + 80);
              long long v229 = *(_OWORD *)(v217 + 96);
              long long v230 = *(_OWORD *)(v217 + 112);
              float64x2_t v231 = *(float64x2_t *)(v217 + 128);
              float64x2_t v232 = *(float64x2_t *)(v217 + 144);
              float64x2_t v233 = *(float64x2_t *)(v217 + 160);
              float64x2_t v234 = *(float64x2_t *)(v217 + 176);
              long long v235 = *(_OWORD *)(v217 + 192);
              long long v236 = *(_OWORD *)(v217 + 208);
              long long v237 = *(_OWORD *)(v217 + 224);
              long long v238 = *(_OWORD *)(v217 + 240);
              *float64x2_t v218 = *(_OWORD *)v217;
              v170[9] = v224;
              v170[10] = v225;
              v170[11] = v226;
              float64x2_t v239 = (_OWORD *)((char *)v218 + v33);
              v170[12] = v231;
              v170[13] = v232;
              v170[14] = v233;
              v170[15] = v234;
              *float64x2_t v239 = v227;
              v239[1] = v228;
              v239[2] = v229;
              v239[3] = v230;
              v239 += 4;
              uint64_t v220 = 256;
              *float64x2_t v239 = v235;
              v239[1] = v236;
              v239[2] = v237;
              v239[3] = v238;
            }
            else if (v219 == 7)
            {
              float64x2_t v222 = vld1q_dup_f64((const double *)v217);
              float64x2_t v170[8] = v222;
              v170[9] = v222;
              v170[10] = v222;
              v170[11] = v222;
              v170[12] = v222;
              v170[13] = v222;
              v170[14] = v222;
              v170[15] = v222;
              long long v223 = (float64x2_t *)((char *)v218 + v33);
              *long long v223 = v222;
              v223[1] = v222;
              v223[2] = v222;
              v223[3] = v222;
              v223[4] = v222;
              v223[5] = v222;
              uint64_t v220 = 8;
              v223[6] = v222;
              v223[7] = v222;
            }
            else if (v71[6])
            {
              uint64_t v220 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v218, v33, v217, v219);
            }
            else
            {
              uint64_t v220 = 0;
              v170[14] = 0u;
              v170[15] = 0u;
              v170[12] = 0u;
              v170[13] = 0u;
              v170[10] = 0u;
              v170[11] = 0u;
              *float64x2_t v218 = 0u;
              v170[9] = 0u;
              long long v221 = (_OWORD *)((char *)v218 + v33);
              v221[6] = 0u;
              v221[7] = 0u;
              v221[4] = 0u;
              v221[5] = 0u;
              v221[2] = 0u;
              v221[3] = 0u;
              *long long v221 = 0u;
              v221[1] = 0u;
            }
            unsigned int v40 = v38 + 1;
            uint64_t v240 = v217 + v220;
            float64x2_t v241 = (_OWORD *)v194[8].f64;
            unsigned int v242 = v71[7];
            if (v242 == 255)
            {
              float64x2_t v246 = *(float64x2_t *)(v240 + 16);
              float64x2_t v247 = *(float64x2_t *)(v240 + 32);
              float64x2_t v248 = *(float64x2_t *)(v240 + 48);
              long long v249 = *(_OWORD *)(v240 + 64);
              long long v250 = *(_OWORD *)(v240 + 80);
              long long v251 = *(_OWORD *)(v240 + 96);
              long long v252 = *(_OWORD *)(v240 + 112);
              float64x2_t v253 = *(float64x2_t *)(v240 + 128);
              float64x2_t v254 = *(float64x2_t *)(v240 + 144);
              float64x2_t v255 = *(float64x2_t *)(v240 + 160);
              float64x2_t v256 = *(float64x2_t *)(v240 + 176);
              long long v257 = *(_OWORD *)(v240 + 192);
              long long v258 = *(_OWORD *)(v240 + 208);
              long long v259 = *(_OWORD *)(v240 + 224);
              long long v260 = *(_OWORD *)(v240 + 240);
              *float64x2_t v241 = *(_OWORD *)v240;
              v194[9] = v246;
              v194[10] = v247;
              v194[11] = v248;
              float64x2_t v261 = (_OWORD *)((char *)v241 + v33);
              v194[12] = v253;
              v194[13] = v254;
              v194[14] = v255;
              v194[15] = v256;
              *float64x2_t v261 = v249;
              v261[1] = v250;
              v261[2] = v251;
              v261[3] = v252;
              v261 += 4;
              *float64x2_t v261 = v257;
              v261[1] = v258;
              v261[2] = v259;
              v261[3] = v260;
              unsigned int v16 = v448;
              uint64_t v24 = v458;
            }
            else
            {
              uint64_t v24 = v458;
              if (v242 == 7)
              {
                float64x2_t v244 = vld1q_dup_f64((const double *)v240);
                v194[8] = v244;
                v194[9] = v244;
                v194[10] = v244;
                v194[11] = v244;
                v194[12] = v244;
                v194[13] = v244;
                v194[14] = v244;
                v194[15] = v244;
                long long v245 = (float64x2_t *)((char *)v241 + v33);
                *long long v245 = v244;
                v245[1] = v244;
                v245[2] = v244;
                v245[3] = v244;
                v245[4] = v244;
                v245[5] = v244;
                v245[6] = v244;
                v245[7] = v244;
              }
              else if (v242)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v241, v33, v240, v242);
              }
              else
              {
                v194[14] = 0u;
                v194[15] = 0u;
                v194[12] = 0u;
                v194[13] = 0u;
                v194[10] = 0u;
                v194[11] = 0u;
                *float64x2_t v241 = 0u;
                v194[9] = 0u;
                float64x2_t v243 = (_OWORD *)((char *)v241 + v33);
                v243[6] = 0u;
                v243[7] = 0u;
                v243[4] = 0u;
                v243[5] = 0u;
                v243[2] = 0u;
                v243[3] = 0u;
                *float64x2_t v243 = 0u;
                v243[1] = 0u;
              }
              unsigned int v16 = v448;
            }
          }
          BOOL v29 = v38 == v449 >> 3;
          unsigned int v38 = v40;
        }
        while (!v29);
        BOOL v29 = v25++ == v440;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v452 = v21;
  uint64_t v453 = v22;
  uint64_t v439 = v23;
  uint64_t v24 = v12;
  uint64_t v600 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v456 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v438 = v14 + a10 - 1;
  unsigned int v440 = v438 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v451 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v440)
  {
    unsigned int v449 = v16 + a9 - 1;
    unsigned int v437 = v16 >> 3;
    if (v16 >> 3 <= v449 >> 3)
    {
      uint64_t v33 = a11;
      unsigned int v434 = v20 - 1;
      unsigned int v460 = (v20 - 1) >> 3;
      int v459 = ((v20 - 1) & 7) + 1;
      int v435 = ((v18 - 1) & 7) + 1;
      unsigned int v436 = (v18 - 1) >> 3;
      uint64_t v441 = 4 * a11;
      uint64_t v442 = 2 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v34));
      __int32 v447 = v35.i32[0] | v35.i32[1];
      BOOL v444 = v35.i32[1] != 0;
      int8x8_t v445 = v35;
      BOOL v443 = v35.i32[0] != 0;
      unint64_t v433 = 8 * v27 * (unint64_t)v26;
      unsigned int v448 = v16;
      uint64_t v458 = v24;
      do
      {
        unsigned int v36 = (8 * v25) | 7;
        if (8 * v25 <= v456) {
          int v37 = v456;
        }
        else {
          int v37 = 8 * v25;
        }
        unsigned int v38 = v437;
        if (v438 < v36) {
          unsigned int v36 = v438;
        }
        unsigned int v455 = 8 * v25;
        int v446 = v37 - 8 * v25;
        int v457 = v36 - v37 + 1;
        int v39 = v435;
        if (v25 != v436) {
          int v39 = 8;
        }
        unsigned int v461 = v39;
        uint64_t v454 = v439 + (v37 - v456) * v33;
        do
        {
          unsigned int v41 = 8 * v38;
          unsigned int v42 = 8 * (v38 + 1) - 1;
          if (8 * v38 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 8 * v38;
          }
          if (v449 < v42) {
            unsigned int v42 = v449;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v460) {
            unsigned int v45 = v459;
          }
          else {
            unsigned int v45 = 8;
          }
          BOOL v46 = 1;
          if (v455 >= v456 && v41 >= v16)
          {
            int v47 = v459;
            if (v38 != v460) {
              int v47 = 8;
            }
            BOOL v46 = v44 != v47 || v457 != v461;
          }
          if (isLevelTiled)
          {
            unsigned int v417 = 0;
            uint64_t v418 = v433 >> (*(unsigned char *)(v24 + 57) != 0);
            char v419 = 1;
            if (v418 > 127)
            {
              if (v418 > 511)
              {
                if (v418 == 512)
                {
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v417 = 16;
                  unsigned int v421 = 16;
                }
                else
                {
                  char v420 = 1;
                  unsigned int v421 = 0;
                  if (v418 == 1024)
                  {
                    char v419 = 0;
                    unsigned int v421 = 8;
                    unsigned int v417 = 16;
                  }
                }
              }
              else if (v418 == 128)
              {
                char v419 = 0;
                char v420 = 0;
                unsigned int v417 = 32;
                unsigned int v421 = 32;
              }
              else
              {
                char v420 = 1;
                unsigned int v421 = 0;
                if (v418 == 256)
                {
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v421 = 16;
                  unsigned int v417 = 32;
                }
              }
            }
            else
            {
              char v420 = 1;
              unsigned int v421 = 0;
              switch(v418)
              {
                case 4:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v421 = 128;
                  unsigned int v417 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v417 = 128;
                  unsigned int v421 = 128;
                  break;
                case 16:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v421 = 64;
                  unsigned int v417 = 128;
                  break;
                case 32:
                  char v419 = 0;
                  char v420 = 0;
                  unsigned int v417 = 64;
                  unsigned int v421 = 64;
                  break;
                default:
                  if (v418 == 64)
                  {
                    char v419 = 0;
                    char v420 = 0;
                    unsigned int v421 = 32;
                    unsigned int v417 = 64;
                  }
                  break;
              }
            }
            unsigned int v422 = (v417 >> 3) - 1;
            if (v419) {
              unsigned int v423 = 0;
            }
            else {
              unsigned int v423 = 32 - __clz(~(-1 << -(char)__clz(v422)));
            }
            unsigned int v424 = (v421 >> 3) - 1;
            if (v420)
            {
              unsigned int v425 = 0;
              if (v423) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v425 = 32 - __clz(~(-1 << -(char)__clz(v424)));
              if (v425 | v423)
              {
LABEL_233:
                int v426 = 0;
                uint64_t v427 = 0;
                int v428 = v38 & v422;
                int v429 = v25 & v424;
                BOOL v430 = v423 != 0;
                BOOL v431 = v425 != 0;
                int v432 = 1;
                do
                {
                  --v423;
                  if (v430) {
                    v427 |= (unint64_t)(v432 & v428) << v426++;
                  }
                  else {
                    unsigned int v423 = 0;
                  }
                  --v425;
                  if (v431) {
                    v427 |= (unint64_t)(v432 & v429) << v426++;
                  }
                  else {
                    unsigned int v425 = 0;
                  }
                  v432 *= 2;
                  --v426;
                  BOOL v431 = v425 != 0;
                  BOOL v430 = v423 != 0;
                }
                while (v425 | v423);
                goto LABEL_245;
              }
            }
            uint64_t v427 = 0;
LABEL_245:
            unint64_t v56 = ((unint64_t)(v41 / v417 + v455 / v421 * ((v417 + v434) / v417)) << 14) + (v427 << 11);
            goto LABEL_59;
          }
          if (v447)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v444;
            BOOL v53 = v443;
            __int32 v54 = v445.i32[1];
            __int32 v55 = v445.i32[0];
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v38) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_59:
          unsigned int v57 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
          }
          if (v62 | v59)
          {
            int v63 = 0;
            unint64_t v64 = 0;
            BOOL v65 = v59 != 0;
            BOOL v66 = v62 != 0;
            int v67 = 1;
            do
            {
              --v59;
              BOOL v68 = !v65;
              if (v65)
              {
                unint64_t v69 = ((unint64_t)(v67 & v38) << v63) | v64;
              }
              else
              {
                unsigned int v59 = 0;
                unint64_t v69 = v64;
              }
              if (!v68) {
                ++v63;
              }
              --v62;
              if (v66)
              {
                unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
              }
              else
              {
                unsigned int v62 = 0;
                unint64_t v64 = v69;
              }
              if (v66) {
                ++v63;
              }
              v67 *= 2;
              --v63;
              BOOL v66 = v62 != 0;
              BOOL v65 = v59 != 0;
            }
            while (v62 | v59);
          }
          else
          {
            unint64_t v64 = 0;
          }
          __int32 v70 = (float64x2_t *)(v452 + v56);
          if (v451)
          {
            memcpy(__dst, v70, sizeof(__dst));
            __int32 v70 = (float64x2_t *)__dst;
          }
          __int32 v71 = (unsigned __int8 *)(v453 + 8 * v64);
          uint64_t v72 = (float64x2_t *)(v454 + 32 * (v43 - v16));
          char v73 = v45 < 8 || v46;
          if ((v73 & 1) != 0 || v461 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            unsigned int v77 = v43 - v41;
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v458;
            block[5] = v70;
            char v469 = v45;
            char v470 = v461;
            int v465 = v446;
            unsigned int v466 = v77;
            block[6] = v71;
            v463 = v72;
            uint64_t v33 = a11;
            uint64_t v464 = a11;
            int v467 = v457;
            unsigned int v468 = v44;
            if (v46)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v458 + 8) + 7384), block);
              unsigned int v16 = v448;
              uint64_t v24 = v458;
              unsigned int v40 = v38 + 1;
            }
            else
            {
              unsigned int v78 = *v71;
              unsigned int v16 = v448;
              if (v78 == 255)
              {
                float64x2_t v262 = v70[1];
                float64x2_t v263 = v70[2];
                float64x2_t v264 = v70[3];
                float64x2_t v265 = v70[4];
                float64x2_t v266 = v70[5];
                float64x2_t v267 = v70[6];
                float64x2_t v268 = v70[7];
                float64x2_t v269 = v70[8];
                float64x2_t v270 = v70[9];
                float64x2_t v271 = v70[10];
                float64x2_t v272 = v70[11];
                float64x2_t v273 = v70[12];
                float64x2_t v274 = v70[13];
                float64x2_t v275 = v70[14];
                float64x2_t v276 = v70[15];
                float64x2_t v472 = *v70;
                float64x2_t v473 = v262;
                float64x2_t v474 = v263;
                float64x2_t v475 = v264;
                float64x2_t v476 = v269;
                float64x2_t v477 = v270;
                float64x2_t v478 = v271;
                float64x2_t v479 = v272;
                float64x2_t v488 = v265;
                float64x2_t v489 = v266;
                float64x2_t v490 = v267;
                float64x2_t v491 = v268;
                uint64_t v79 = 256;
                float64x2_t v492 = v273;
                float64x2_t v493 = v274;
                float64x2_t v494 = v275;
                float64x2_t v495 = v276;
              }
              else if (v78 == 7)
              {
                float64x2_t v277 = vld1q_dup_f64(v70->f64);
                float64x2_t v472 = v277;
                float64x2_t v473 = v277;
                float64x2_t v474 = v277;
                float64x2_t v475 = v277;
                float64x2_t v476 = v277;
                float64x2_t v477 = v277;
                float64x2_t v478 = v277;
                float64x2_t v479 = v277;
                float64x2_t v488 = v277;
                float64x2_t v489 = v277;
                float64x2_t v490 = v277;
                float64x2_t v491 = v277;
                float64x2_t v492 = v277;
                float64x2_t v493 = v277;
                uint64_t v79 = 8;
                float64x2_t v494 = v277;
                float64x2_t v495 = v277;
              }
              else if (*v71)
              {
                uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v472, 256, (uint64_t)v70, v78);
              }
              else
              {
                uint64_t v79 = 0;
                float64x2_t v479 = 0u;
                float64x2_t v478 = 0u;
                float64x2_t v477 = 0u;
                float64x2_t v476 = 0u;
                float64x2_t v475 = 0u;
                float64x2_t v474 = 0u;
                float64x2_t v473 = 0u;
                float64x2_t v472 = 0u;
                float64x2_t v488 = 0u;
                float64x2_t v489 = 0u;
                float64x2_t v490 = 0u;
                float64x2_t v491 = 0u;
                float64x2_t v492 = 0u;
                float64x2_t v493 = 0u;
                float64x2_t v494 = 0u;
                float64x2_t v495 = 0u;
              }
              uint64_t v278 = (uint64_t)v70 + v79;
              unsigned int v279 = v71[1];
              if (v279 == 255)
              {
                float64x2_t v281 = *(float64x2_t *)(v278 + 16);
                float64x2_t v282 = *(float64x2_t *)(v278 + 32);
                float64x2_t v283 = *(float64x2_t *)(v278 + 48);
                float64x2_t v284 = *(float64x2_t *)(v278 + 64);
                float64x2_t v285 = *(float64x2_t *)(v278 + 80);
                float64x2_t v286 = *(float64x2_t *)(v278 + 96);
                float64x2_t v287 = *(float64x2_t *)(v278 + 112);
                float64x2_t v288 = *(float64x2_t *)(v278 + 128);
                float64x2_t v289 = *(float64x2_t *)(v278 + 144);
                float64x2_t v290 = *(float64x2_t *)(v278 + 160);
                float64x2_t v291 = *(float64x2_t *)(v278 + 176);
                float64x2_t v292 = *(float64x2_t *)(v278 + 192);
                float64x2_t v293 = *(float64x2_t *)(v278 + 208);
                float64x2_t v294 = *(float64x2_t *)(v278 + 224);
                float64x2_t v295 = *(float64x2_t *)(v278 + 240);
                float64x2_t v504 = *(float64x2_t *)v278;
                float64x2_t v505 = v281;
                float64x2_t v506 = v282;
                float64x2_t v507 = v283;
                float64x2_t v508 = v288;
                float64x2_t v509 = v289;
                float64x2_t v510 = v290;
                float64x2_t v511 = v291;
                float64x2_t v520 = v284;
                float64x2_t v521 = v285;
                float64x2_t v522 = v286;
                float64x2_t v523 = v287;
                uint64_t v280 = 256;
                float64x2_t v524 = v292;
                float64x2_t v525 = v293;
                float64x2_t v526 = v294;
                float64x2_t v527 = v295;
              }
              else if (v279 == 7)
              {
                float64x2_t v296 = vld1q_dup_f64((const double *)v278);
                float64x2_t v504 = v296;
                float64x2_t v505 = v296;
                float64x2_t v506 = v296;
                float64x2_t v507 = v296;
                float64x2_t v508 = v296;
                float64x2_t v509 = v296;
                float64x2_t v510 = v296;
                float64x2_t v511 = v296;
                float64x2_t v520 = v296;
                float64x2_t v521 = v296;
                float64x2_t v522 = v296;
                float64x2_t v523 = v296;
                float64x2_t v524 = v296;
                float64x2_t v525 = v296;
                uint64_t v280 = 8;
                float64x2_t v526 = v296;
                float64x2_t v527 = v296;
              }
              else if (v71[1])
              {
                uint64_t v280 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v504, 256, v278, v279);
              }
              else
              {
                uint64_t v280 = 0;
                float64x2_t v510 = 0u;
                float64x2_t v511 = 0u;
                float64x2_t v508 = 0u;
                float64x2_t v509 = 0u;
                float64x2_t v506 = 0u;
                float64x2_t v507 = 0u;
                float64x2_t v504 = 0u;
                float64x2_t v505 = 0u;
                float64x2_t v520 = 0u;
                float64x2_t v521 = 0u;
                float64x2_t v522 = 0u;
                float64x2_t v523 = 0u;
                float64x2_t v524 = 0u;
                float64x2_t v525 = 0u;
                float64x2_t v526 = 0u;
                float64x2_t v527 = 0u;
              }
              uint64_t v297 = v278 + v280;
              unsigned int v298 = v71[2];
              if (v298 == 255)
              {
                float64x2_t v300 = *(float64x2_t *)(v297 + 16);
                float64x2_t v301 = *(float64x2_t *)(v297 + 32);
                float64x2_t v302 = *(float64x2_t *)(v297 + 48);
                float64x2_t v303 = *(float64x2_t *)(v297 + 64);
                float64x2_t v304 = *(float64x2_t *)(v297 + 80);
                float64x2_t v305 = *(float64x2_t *)(v297 + 96);
                float64x2_t v306 = *(float64x2_t *)(v297 + 112);
                float64x2_t v307 = *(float64x2_t *)(v297 + 128);
                float64x2_t v308 = *(float64x2_t *)(v297 + 144);
                float64x2_t v309 = *(float64x2_t *)(v297 + 160);
                float64x2_t v310 = *(float64x2_t *)(v297 + 176);
                float64x2_t v311 = *(float64x2_t *)(v297 + 192);
                float64x2_t v312 = *(float64x2_t *)(v297 + 208);
                float64x2_t v313 = *(float64x2_t *)(v297 + 224);
                float64x2_t v314 = *(float64x2_t *)(v297 + 240);
                float64x2_t v480 = *(float64x2_t *)v297;
                float64x2_t v481 = v300;
                float64x2_t v482 = v301;
                float64x2_t v483 = v302;
                float64x2_t v484 = v307;
                float64x2_t v485 = v308;
                float64x2_t v486 = v309;
                float64x2_t v487 = v310;
                float64x2_t v496 = v303;
                float64x2_t v497 = v304;
                float64x2_t v498 = v305;
                float64x2_t v499 = v306;
                uint64_t v299 = 256;
                float64x2_t v500 = v311;
                float64x2_t v501 = v312;
                float64x2_t v502 = v313;
                float64x2_t v503 = v314;
              }
              else if (v298 == 7)
              {
                float64x2_t v315 = vld1q_dup_f64((const double *)v297);
                float64x2_t v480 = v315;
                float64x2_t v481 = v315;
                float64x2_t v482 = v315;
                float64x2_t v483 = v315;
                float64x2_t v484 = v315;
                float64x2_t v485 = v315;
                float64x2_t v486 = v315;
                float64x2_t v487 = v315;
                float64x2_t v496 = v315;
                float64x2_t v497 = v315;
                float64x2_t v498 = v315;
                float64x2_t v499 = v315;
                float64x2_t v500 = v315;
                float64x2_t v501 = v315;
                uint64_t v299 = 8;
                float64x2_t v502 = v315;
                float64x2_t v503 = v315;
              }
              else if (v71[2])
              {
                uint64_t v299 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v480, 256, v297, v298);
              }
              else
              {
                uint64_t v299 = 0;
                float64x2_t v486 = 0u;
                float64x2_t v487 = 0u;
                float64x2_t v484 = 0u;
                float64x2_t v485 = 0u;
                float64x2_t v482 = 0u;
                float64x2_t v483 = 0u;
                float64x2_t v480 = 0u;
                float64x2_t v481 = 0u;
                float64x2_t v496 = 0u;
                float64x2_t v497 = 0u;
                float64x2_t v498 = 0u;
                float64x2_t v499 = 0u;
                float64x2_t v500 = 0u;
                float64x2_t v501 = 0u;
                float64x2_t v502 = 0u;
                float64x2_t v503 = 0u;
              }
              uint64_t v316 = v297 + v299;
              unsigned int v317 = v71[3];
              if (v317 == 255)
              {
                float64x2_t v319 = *(float64x2_t *)(v316 + 16);
                float64x2_t v320 = *(float64x2_t *)(v316 + 32);
                float64x2_t v321 = *(float64x2_t *)(v316 + 48);
                float64x2_t v322 = *(float64x2_t *)(v316 + 64);
                float64x2_t v323 = *(float64x2_t *)(v316 + 80);
                float64x2_t v324 = *(float64x2_t *)(v316 + 96);
                float64x2_t v325 = *(float64x2_t *)(v316 + 112);
                float64x2_t v326 = *(float64x2_t *)(v316 + 128);
                float64x2_t v327 = *(float64x2_t *)(v316 + 144);
                float64x2_t v328 = *(float64x2_t *)(v316 + 160);
                float64x2_t v329 = *(float64x2_t *)(v316 + 176);
                float64x2_t v330 = *(float64x2_t *)(v316 + 192);
                float64x2_t v331 = *(float64x2_t *)(v316 + 208);
                float64x2_t v332 = *(float64x2_t *)(v316 + 224);
                float64x2_t v333 = *(float64x2_t *)(v316 + 240);
                float64x2_t v512 = *(float64x2_t *)v316;
                float64x2_t v513 = v319;
                float64x2_t v514 = v320;
                float64x2_t v515 = v321;
                float64x2_t v516 = v326;
                float64x2_t v517 = v327;
                float64x2_t v518 = v328;
                float64x2_t v519 = v329;
                float64x2_t v528 = v322;
                float64x2_t v529 = v323;
                float64x2_t v530 = v324;
                float64x2_t v531 = v325;
                uint64_t v318 = 256;
                float64x2_t v532 = v330;
                float64x2_t v533 = v331;
                float64x2_t v534 = v332;
                float64x2_t v535 = v333;
              }
              else if (v317 == 7)
              {
                float64x2_t v334 = vld1q_dup_f64((const double *)v316);
                float64x2_t v512 = v334;
                float64x2_t v513 = v334;
                float64x2_t v514 = v334;
                float64x2_t v515 = v334;
                float64x2_t v516 = v334;
                float64x2_t v517 = v334;
                float64x2_t v518 = v334;
                float64x2_t v519 = v334;
                float64x2_t v528 = v334;
                float64x2_t v529 = v334;
                float64x2_t v530 = v334;
                float64x2_t v531 = v334;
                float64x2_t v532 = v334;
                float64x2_t v533 = v334;
                uint64_t v318 = 8;
                float64x2_t v534 = v334;
                float64x2_t v535 = v334;
              }
              else if (v71[3])
              {
                uint64_t v318 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v512, 256, v316, v317);
              }
              else
              {
                uint64_t v318 = 0;
                float64x2_t v518 = 0u;
                float64x2_t v519 = 0u;
                float64x2_t v516 = 0u;
                float64x2_t v517 = 0u;
                float64x2_t v514 = 0u;
                float64x2_t v515 = 0u;
                float64x2_t v512 = 0u;
                float64x2_t v513 = 0u;
                float64x2_t v528 = 0u;
                float64x2_t v529 = 0u;
                float64x2_t v530 = 0u;
                float64x2_t v531 = 0u;
                float64x2_t v532 = 0u;
                float64x2_t v533 = 0u;
                float64x2_t v534 = 0u;
                float64x2_t v535 = 0u;
              }
              uint64_t v335 = v316 + v318;
              unsigned int v336 = v71[4];
              if (v336 == 255)
              {
                float64x2_t v338 = *(float64x2_t *)(v335 + 16);
                float64x2_t v339 = *(float64x2_t *)(v335 + 32);
                float64x2_t v340 = *(float64x2_t *)(v335 + 48);
                float64x2_t v341 = *(float64x2_t *)(v335 + 64);
                float64x2_t v342 = *(float64x2_t *)(v335 + 80);
                float64x2_t v343 = *(float64x2_t *)(v335 + 96);
                float64x2_t v344 = *(float64x2_t *)(v335 + 112);
                float64x2_t v345 = *(float64x2_t *)(v335 + 128);
                float64x2_t v346 = *(float64x2_t *)(v335 + 144);
                float64x2_t v347 = *(float64x2_t *)(v335 + 160);
                float64x2_t v348 = *(float64x2_t *)(v335 + 176);
                float64x2_t v349 = *(float64x2_t *)(v335 + 192);
                float64x2_t v350 = *(float64x2_t *)(v335 + 208);
                float64x2_t v351 = *(float64x2_t *)(v335 + 224);
                float64x2_t v352 = *(float64x2_t *)(v335 + 240);
                float64x2_t v536 = *(float64x2_t *)v335;
                float64x2_t v537 = v338;
                float64x2_t v538 = v339;
                float64x2_t v539 = v340;
                float64x2_t v540 = v345;
                float64x2_t v541 = v346;
                float64x2_t v542 = v347;
                float64x2_t v543 = v348;
                float64x2_t v552 = v341;
                float64x2_t v553 = v342;
                float64x2_t v554 = v343;
                float64x2_t v555 = v344;
                uint64_t v337 = 256;
                float64x2_t v556 = v349;
                float64x2_t v557 = v350;
                float64x2_t v558 = v351;
                float64x2_t v559 = v352;
              }
              else if (v336 == 7)
              {
                float64x2_t v353 = vld1q_dup_f64((const double *)v335);
                float64x2_t v536 = v353;
                float64x2_t v537 = v353;
                float64x2_t v538 = v353;
                float64x2_t v539 = v353;
                float64x2_t v540 = v353;
                float64x2_t v541 = v353;
                float64x2_t v542 = v353;
                float64x2_t v543 = v353;
                float64x2_t v552 = v353;
                float64x2_t v553 = v353;
                float64x2_t v554 = v353;
                float64x2_t v555 = v353;
                float64x2_t v556 = v353;
                float64x2_t v557 = v353;
                float64x2_t v558 = v353;
                uint64_t v337 = 8;
                float64x2_t v559 = v353;
              }
              else if (v71[4])
              {
                uint64_t v337 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v536, 256, v335, v336);
              }
              else
              {
                uint64_t v337 = 0;
                float64x2_t v542 = 0u;
                float64x2_t v543 = 0u;
                float64x2_t v540 = 0u;
                float64x2_t v541 = 0u;
                float64x2_t v538 = 0u;
                float64x2_t v539 = 0u;
                float64x2_t v536 = 0u;
                float64x2_t v537 = 0u;
                float64x2_t v552 = 0u;
                float64x2_t v553 = 0u;
                float64x2_t v554 = 0u;
                float64x2_t v555 = 0u;
                float64x2_t v556 = 0u;
                float64x2_t v557 = 0u;
                float64x2_t v558 = 0u;
                float64x2_t v559 = 0u;
              }
              uint64_t v354 = v335 + v337;
              unsigned int v355 = v71[5];
              if (v355 == 255)
              {
                float64x2_t v357 = *(float64x2_t *)(v354 + 16);
                float64x2_t v358 = *(float64x2_t *)(v354 + 32);
                float64x2_t v359 = *(float64x2_t *)(v354 + 48);
                float64x2_t v360 = *(float64x2_t *)(v354 + 64);
                float64x2_t v361 = *(float64x2_t *)(v354 + 80);
                float64x2_t v362 = *(float64x2_t *)(v354 + 96);
                float64x2_t v363 = *(float64x2_t *)(v354 + 112);
                float64x2_t v364 = *(float64x2_t *)(v354 + 128);
                float64x2_t v365 = *(float64x2_t *)(v354 + 144);
                float64x2_t v366 = *(float64x2_t *)(v354 + 160);
                float64x2_t v367 = *(float64x2_t *)(v354 + 176);
                float64x2_t v368 = *(float64x2_t *)(v354 + 192);
                float64x2_t v369 = *(float64x2_t *)(v354 + 208);
                float64x2_t v370 = *(float64x2_t *)(v354 + 224);
                float64x2_t v371 = *(float64x2_t *)(v354 + 240);
                float64x2_t v568 = *(float64x2_t *)v354;
                float64x2_t v569 = v357;
                float64x2_t v570 = v358;
                float64x2_t v571 = v359;
                float64x2_t v572 = v364;
                float64x2_t v573 = v365;
                float64x2_t v574 = v366;
                float64x2_t v575 = v367;
                float64x2_t v584 = v360;
                float64x2_t v585 = v361;
                float64x2_t v586 = v362;
                float64x2_t v587 = v363;
                uint64_t v356 = 256;
                float64x2_t v588 = v368;
                float64x2_t v589 = v369;
                float64x2_t v590 = v370;
                float64x2_t v591 = v371;
              }
              else if (v355 == 7)
              {
                float64x2_t v372 = vld1q_dup_f64((const double *)v354);
                float64x2_t v568 = v372;
                float64x2_t v569 = v372;
                float64x2_t v570 = v372;
                float64x2_t v571 = v372;
                float64x2_t v572 = v372;
                float64x2_t v573 = v372;
                float64x2_t v574 = v372;
                float64x2_t v575 = v372;
                float64x2_t v584 = v372;
                float64x2_t v585 = v372;
                float64x2_t v586 = v372;
                float64x2_t v587 = v372;
                float64x2_t v588 = v372;
                float64x2_t v589 = v372;
                float64x2_t v590 = v372;
                uint64_t v356 = 8;
                float64x2_t v591 = v372;
              }
              else if (v71[5])
              {
                uint64_t v356 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v568, 256, v354, v355);
              }
              else
              {
                uint64_t v356 = 0;
                float64x2_t v574 = 0u;
                float64x2_t v575 = 0u;
                float64x2_t v572 = 0u;
                float64x2_t v573 = 0u;
                float64x2_t v570 = 0u;
                float64x2_t v571 = 0u;
                float64x2_t v568 = 0u;
                float64x2_t v569 = 0u;
                float64x2_t v584 = 0u;
                float64x2_t v585 = 0u;
                float64x2_t v586 = 0u;
                float64x2_t v587 = 0u;
                float64x2_t v588 = 0u;
                float64x2_t v589 = 0u;
                float64x2_t v590 = 0u;
                float64x2_t v591 = 0u;
              }
              uint64_t v373 = v354 + v356;
              unsigned int v374 = v71[6];
              if (v374 == 255)
              {
                float64x2_t v376 = *(float64x2_t *)(v373 + 16);
                float64x2_t v377 = *(float64x2_t *)(v373 + 32);
                float64x2_t v378 = *(float64x2_t *)(v373 + 48);
                float64x2_t v379 = *(float64x2_t *)(v373 + 64);
                float64x2_t v380 = *(float64x2_t *)(v373 + 80);
                float64x2_t v381 = *(float64x2_t *)(v373 + 96);
                float64x2_t v382 = *(float64x2_t *)(v373 + 112);
                float64x2_t v383 = *(float64x2_t *)(v373 + 128);
                float64x2_t v384 = *(float64x2_t *)(v373 + 144);
                float64x2_t v385 = *(float64x2_t *)(v373 + 160);
                float64x2_t v386 = *(float64x2_t *)(v373 + 176);
                float64x2_t v387 = *(float64x2_t *)(v373 + 192);
                float64x2_t v388 = *(float64x2_t *)(v373 + 208);
                float64x2_t v389 = *(float64x2_t *)(v373 + 224);
                float64x2_t v390 = *(float64x2_t *)(v373 + 240);
                float64x2_t v544 = *(float64x2_t *)v373;
                float64x2_t v545 = v376;
                float64x2_t v546 = v377;
                float64x2_t v547 = v378;
                float64x2_t v548 = v383;
                float64x2_t v549 = v384;
                float64x2_t v550 = v385;
                float64x2_t v551 = v386;
                float64x2_t v560 = v379;
                float64x2_t v561 = v380;
                float64x2_t v562 = v381;
                float64x2_t v563 = v382;
                uint64_t v375 = 256;
                float64x2_t v564 = v387;
                float64x2_t v565 = v388;
                float64x2_t v566 = v389;
                float64x2_t v567 = v390;
              }
              else if (v374 == 7)
              {
                float64x2_t v391 = vld1q_dup_f64((const double *)v373);
                float64x2_t v544 = v391;
                float64x2_t v545 = v391;
                float64x2_t v546 = v391;
                float64x2_t v547 = v391;
                float64x2_t v548 = v391;
                float64x2_t v549 = v391;
                float64x2_t v550 = v391;
                float64x2_t v551 = v391;
                float64x2_t v560 = v391;
                float64x2_t v561 = v391;
                float64x2_t v562 = v391;
                float64x2_t v563 = v391;
                float64x2_t v564 = v391;
                float64x2_t v565 = v391;
                float64x2_t v566 = v391;
                uint64_t v375 = 8;
                float64x2_t v567 = v391;
              }
              else if (v71[6])
              {
                uint64_t v375 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v544, 256, v373, v374);
              }
              else
              {
                uint64_t v375 = 0;
                float64x2_t v550 = 0u;
                float64x2_t v551 = 0u;
                float64x2_t v548 = 0u;
                float64x2_t v549 = 0u;
                float64x2_t v546 = 0u;
                float64x2_t v547 = 0u;
                float64x2_t v544 = 0u;
                float64x2_t v545 = 0u;
                float64x2_t v560 = 0u;
                float64x2_t v561 = 0u;
                float64x2_t v562 = 0u;
                float64x2_t v563 = 0u;
                float64x2_t v564 = 0u;
                float64x2_t v565 = 0u;
                float64x2_t v566 = 0u;
                float64x2_t v567 = 0u;
              }
              uint64_t v392 = v373 + v375;
              unsigned int v393 = v71[7];
              if (v393 == 255)
              {
                float64x2_t v396 = *(float64x2_t *)(v392 + 16);
                float64x2_t v397 = *(float64x2_t *)(v392 + 32);
                float64x2_t v398 = *(float64x2_t *)(v392 + 48);
                float64x2_t v399 = *(float64x2_t *)(v392 + 64);
                float64x2_t v400 = *(float64x2_t *)(v392 + 80);
                float64x2_t v401 = *(float64x2_t *)(v392 + 96);
                float64x2_t v402 = *(float64x2_t *)(v392 + 112);
                float64x2_t v403 = *(float64x2_t *)(v392 + 128);
                float64x2_t v404 = *(float64x2_t *)(v392 + 144);
                float64x2_t v405 = *(float64x2_t *)(v392 + 160);
                float64x2_t v406 = *(float64x2_t *)(v392 + 176);
                float64x2_t v407 = *(float64x2_t *)(v392 + 192);
                float64x2_t v408 = *(float64x2_t *)(v392 + 208);
                float64x2_t v409 = *(float64x2_t *)(v392 + 224);
                float64x2_t v410 = *(float64x2_t *)(v392 + 240);
                float64x2_t v576 = *(float64x2_t *)v392;
                float64x2_t v577 = v396;
                float64x2_t v578 = v397;
                float64x2_t v579 = v398;
                float64x2_t v580 = v403;
                float64x2_t v581 = v404;
                float64x2_t v582 = v405;
                float64x2_t v583 = v406;
                float64x2_t v592 = v399;
                float64x2_t v593 = v400;
                float64x2_t v594 = v401;
                float64x2_t v595 = v402;
                unsigned int v394 = v457;
                unsigned int v395 = v446;
                float64x2_t v596 = v407;
                float64x2_t v597 = v408;
                float64x2_t v598 = v409;
                float64x2_t v599 = v410;
                uint64_t v24 = v458;
                unsigned int v40 = v38 + 1;
              }
              else
              {
                uint64_t v24 = v458;
                unsigned int v40 = v38 + 1;
                if (v393 == 7)
                {
                  float64x2_t v411 = vld1q_dup_f64((const double *)v392);
                  float64x2_t v576 = v411;
                  float64x2_t v577 = v411;
                  float64x2_t v578 = v411;
                  float64x2_t v579 = v411;
                  float64x2_t v580 = v411;
                  float64x2_t v581 = v411;
                  float64x2_t v582 = v411;
                  float64x2_t v583 = v411;
                  float64x2_t v592 = v411;
                  float64x2_t v593 = v411;
                  float64x2_t v594 = v411;
                  float64x2_t v595 = v411;
                  float64x2_t v596 = v411;
                  float64x2_t v597 = v411;
                  float64x2_t v598 = v411;
                  unsigned int v394 = v457;
                  unsigned int v395 = v446;
                  float64x2_t v599 = v411;
                }
                else if (v393)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v576, 256, v392, v393);
                  unsigned int v395 = v465;
                  unsigned int v77 = v466;
                  unsigned int v394 = v467;
                }
                else
                {
                  float64x2_t v582 = 0u;
                  float64x2_t v583 = 0u;
                  float64x2_t v580 = 0u;
                  float64x2_t v581 = 0u;
                  float64x2_t v578 = 0u;
                  float64x2_t v579 = 0u;
                  float64x2_t v576 = 0u;
                  float64x2_t v577 = 0u;
                  float64x2_t v592 = 0u;
                  float64x2_t v593 = 0u;
                  float64x2_t v594 = 0u;
                  float64x2_t v595 = 0u;
                  float64x2_t v596 = 0u;
                  float64x2_t v597 = 0u;
                  unsigned int v394 = v457;
                  unsigned int v395 = v446;
                  float64x2_t v598 = 0u;
                  float64x2_t v599 = 0u;
                }
              }
              if (v394)
              {
                unint64_t v412 = 0;
                float64x2_t v413 = (_OWORD *)&v472.f64[32 * (unint64_t)v395 + 4 * v77];
                unsigned int v414 = v468;
                do
                {
                  if (v414)
                  {
                    uint64_t v415 = 0;
                    float64x2_t v416 = (char *)v463 + v464 * v412;
                    do
                    {
                      v416[v415] = *((unsigned char *)v413 + v415);
                      ++v415;
                      unsigned int v414 = v468;
                    }
                    while (32 * (unint64_t)v468 > v415);
                    unsigned int v394 = v467;
                  }
                  ++v412;
                  v413 += 16;
                }
                while (v412 < v394);
              }
            }
          }
          else
          {
            unsigned int v74 = *v71;
            if (v74 == 255)
            {
              float64x2_t v82 = v70[1];
              float64x2_t v83 = v70[2];
              float64x2_t v84 = v70[3];
              float64x2_t v85 = v70[4];
              float64x2_t v86 = v70[5];
              float64x2_t v87 = v70[6];
              float64x2_t v88 = v70[7];
              float64x2_t v89 = v70[8];
              float64x2_t v90 = v70[9];
              float64x2_t v91 = v70[10];
              float64x2_t v92 = v70[11];
              float64x2_t v93 = v70[12];
              float64x2_t v94 = v70[13];
              float64x2_t v95 = v70[14];
              float64x2_t v96 = v70[15];
              uint64_t v33 = a11;
              *uint64_t v72 = *v70;
              v72[1] = v82;
              v72[2] = v83;
              v72[3] = v84;
              float64x2_t v97 = (float64x2_t *)((char *)v72 + a11);
              v72[4] = v89;
              v72[5] = v90;
              v72[6] = v91;
              v72[7] = v92;
              float64x2_t *v97 = v85;
              v97[1] = v86;
              v97[2] = v87;
              v97[3] = v88;
              unsigned int v98 = (float64x2_t *)((char *)v72 + a11 + 64);
              uint64_t v75 = 256;
              *unsigned int v98 = v93;
              v98[1] = v94;
              v98[2] = v95;
              v98[3] = v96;
            }
            else
            {
              uint64_t v33 = a11;
              if (v74 == 7)
              {
                float64x2_t v80 = vld1q_dup_f64(v70->f64);
                *uint64_t v72 = v80;
                v72[1] = v80;
                v72[2] = v80;
                v72[3] = v80;
                v72[4] = v80;
                v72[5] = v80;
                v72[6] = v80;
                v72[7] = v80;
                BOOL v81 = (float64x2_t *)((char *)v72 + a11);
                *BOOL v81 = v80;
                v81[1] = v80;
                v81[2] = v80;
                v81[3] = v80;
                v81[4] = v80;
                v81[5] = v80;
                v81[6] = v80;
                v81[7] = v80;
                uint64_t v75 = 8;
              }
              else if (*v71)
              {
                uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72, a11, (uint64_t)v70, v74);
              }
              else
              {
                uint64_t v75 = 0;
                v72[6] = 0u;
                v72[7] = 0u;
                v72[4] = 0u;
                v72[5] = 0u;
                v72[2] = 0u;
                v72[3] = 0u;
                *uint64_t v72 = 0u;
                v72[1] = 0u;
                unsigned int v76 = (_OWORD *)((char *)v72->f64 + a11);
                v76[6] = 0u;
                v76[7] = 0u;
                v76[4] = 0u;
                v76[5] = 0u;
                v76[2] = 0u;
                v76[3] = 0u;
                *unsigned int v76 = 0u;
                v76[1] = 0u;
              }
            }
            uint64_t v99 = (uint64_t)v70 + v75;
            float64x2_t v100 = (float64x2_t *)((char *)v72 + v442);
            unsigned int v101 = v71[1];
            if (v101 == 255)
            {
              float64x2_t v106 = *(float64x2_t *)(v99 + 16);
              float64x2_t v107 = *(float64x2_t *)(v99 + 32);
              float64x2_t v108 = *(float64x2_t *)(v99 + 48);
              long long v109 = *(_OWORD *)(v99 + 64);
              long long v110 = *(_OWORD *)(v99 + 80);
              long long v111 = *(_OWORD *)(v99 + 96);
              long long v112 = *(_OWORD *)(v99 + 112);
              float64x2_t v113 = *(float64x2_t *)(v99 + 128);
              float64x2_t v114 = *(float64x2_t *)(v99 + 144);
              float64x2_t v115 = *(float64x2_t *)(v99 + 160);
              float64x2_t v116 = *(float64x2_t *)(v99 + 176);
              long long v117 = *(_OWORD *)(v99 + 192);
              long long v118 = *(_OWORD *)(v99 + 208);
              long long v119 = *(_OWORD *)(v99 + 224);
              long long v120 = *(_OWORD *)(v99 + 240);
              *float64x2_t v100 = *(float64x2_t *)v99;
              v100[1] = v106;
              v100[2] = v107;
              v100[3] = v108;
              float64x2_t v121 = (_OWORD *)((char *)v100->f64 + v33);
              v100[4] = v113;
              v100[5] = v114;
              v100[6] = v115;
              v100[7] = v116;
              _OWORD *v121 = v109;
              v121[1] = v110;
              v121[2] = v111;
              v121[3] = v112;
              int v122 = (_OWORD *)((char *)v100[4].f64 + v33);
              uint64_t v102 = 256;
              *int v122 = v117;
              v122[1] = v118;
              v122[2] = v119;
              v122[3] = v120;
            }
            else if (v101 == 7)
            {
              float64x2_t v104 = vld1q_dup_f64((const double *)v99);
              *float64x2_t v100 = v104;
              v100[1] = v104;
              v100[2] = v104;
              v100[3] = v104;
              v100[4] = v104;
              v100[5] = v104;
              v100[6] = v104;
              v100[7] = v104;
              float64x2_t v105 = (float64x2_t *)((char *)v100 + v33);
              float64x2_t *v105 = v104;
              v105[1] = v104;
              v105[2] = v104;
              v105[3] = v104;
              v105[4] = v104;
              v105[5] = v104;
              v105[6] = v104;
              v105[7] = v104;
              uint64_t v102 = 8;
            }
            else if (v71[1])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72 + v442, v33, v99, v101);
            }
            else
            {
              uint64_t v102 = 0;
              v100[6] = 0u;
              v100[7] = 0u;
              v100[4] = 0u;
              v100[5] = 0u;
              v100[2] = 0u;
              v100[3] = 0u;
              *float64x2_t v100 = 0u;
              v100[1] = 0u;
              float64x2_t v103 = (_OWORD *)((char *)v100->f64 + v33);
              v103[6] = 0u;
              v103[7] = 0u;
              v103[4] = 0u;
              v103[5] = 0u;
              v103[2] = 0u;
              v103[3] = 0u;
              _OWORD *v103 = 0u;
              v103[1] = 0u;
            }
            uint64_t v123 = v99 + v102;
            f64 = (_OWORD *)v72[8].f64;
            unsigned int v125 = v71[2];
            if (v125 == 255)
            {
              float64x2_t v130 = *(float64x2_t *)(v123 + 16);
              float64x2_t v131 = *(float64x2_t *)(v123 + 32);
              float64x2_t v132 = *(float64x2_t *)(v123 + 48);
              long long v133 = *(_OWORD *)(v123 + 64);
              long long v134 = *(_OWORD *)(v123 + 80);
              long long v135 = *(_OWORD *)(v123 + 96);
              long long v136 = *(_OWORD *)(v123 + 112);
              float64x2_t v137 = *(float64x2_t *)(v123 + 128);
              float64x2_t v138 = *(float64x2_t *)(v123 + 144);
              float64x2_t v139 = *(float64x2_t *)(v123 + 160);
              float64x2_t v140 = *(float64x2_t *)(v123 + 176);
              long long v141 = *(_OWORD *)(v123 + 192);
              long long v142 = *(_OWORD *)(v123 + 208);
              long long v143 = *(_OWORD *)(v123 + 224);
              long long v144 = *(_OWORD *)(v123 + 240);
              _OWORD *f64 = *(_OWORD *)v123;
              v72[9] = v130;
              v72[10] = v131;
              v72[11] = v132;
              float64x2_t v145 = (_OWORD *)((char *)f64 + v33);
              v72[12] = v137;
              v72[13] = v138;
              v72[14] = v139;
              v72[15] = v140;
              _OWORD *v145 = v133;
              v145[1] = v134;
              v145[2] = v135;
              v145[3] = v136;
              v145 += 4;
              uint64_t v126 = 256;
              _OWORD *v145 = v141;
              v145[1] = v142;
              v145[2] = v143;
              v145[3] = v144;
            }
            else if (v125 == 7)
            {
              float64x2_t v128 = vld1q_dup_f64((const double *)v123);
              v72[8] = v128;
              v72[9] = v128;
              v72[10] = v128;
              v72[11] = v128;
              v72[12] = v128;
              v72[13] = v128;
              v72[14] = v128;
              v72[15] = v128;
              long long v129 = (float64x2_t *)((char *)f64 + v33);
              float64x2_t *v129 = v128;
              v129[1] = v128;
              v129[2] = v128;
              v129[3] = v128;
              v129[4] = v128;
              v129[5] = v128;
              v129[6] = v128;
              v129[7] = v128;
              uint64_t v126 = 8;
            }
            else if (v71[2])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v33, v123, v125);
            }
            else
            {
              uint64_t v126 = 0;
              v72[14] = 0u;
              v72[15] = 0u;
              v72[12] = 0u;
              v72[13] = 0u;
              v72[10] = 0u;
              v72[11] = 0u;
              _OWORD *f64 = 0u;
              v72[9] = 0u;
              long long v127 = (_OWORD *)((char *)f64 + v33);
              v127[6] = 0u;
              v127[7] = 0u;
              v127[4] = 0u;
              v127[5] = 0u;
              v127[2] = 0u;
              v127[3] = 0u;
              _OWORD *v127 = 0u;
              v127[1] = 0u;
            }
            uint64_t v146 = v123 + v126;
            float64x2_t v147 = (_OWORD *)v100[8].f64;
            unsigned int v148 = v71[3];
            if (v148 == 255)
            {
              float64x2_t v153 = *(float64x2_t *)(v146 + 16);
              float64x2_t v154 = *(float64x2_t *)(v146 + 32);
              float64x2_t v155 = *(float64x2_t *)(v146 + 48);
              long long v156 = *(_OWORD *)(v146 + 64);
              long long v157 = *(_OWORD *)(v146 + 80);
              long long v158 = *(_OWORD *)(v146 + 96);
              long long v159 = *(_OWORD *)(v146 + 112);
              float64x2_t v160 = *(float64x2_t *)(v146 + 128);
              float64x2_t v161 = *(float64x2_t *)(v146 + 144);
              float64x2_t v162 = *(float64x2_t *)(v146 + 160);
              float64x2_t v163 = *(float64x2_t *)(v146 + 176);
              long long v164 = *(_OWORD *)(v146 + 192);
              long long v165 = *(_OWORD *)(v146 + 208);
              long long v166 = *(_OWORD *)(v146 + 224);
              long long v167 = *(_OWORD *)(v146 + 240);
              _OWORD *v147 = *(_OWORD *)v146;
              v100[9] = v153;
              v100[10] = v154;
              v100[11] = v155;
              float64x2_t v168 = (_OWORD *)((char *)v147 + v33);
              v100[12] = v160;
              v100[13] = v161;
              v100[14] = v162;
              v100[15] = v163;
              *float64x2_t v168 = v156;
              v168[1] = v157;
              v168[2] = v158;
              v168[3] = v159;
              v168 += 4;
              uint64_t v149 = 256;
              *float64x2_t v168 = v164;
              v168[1] = v165;
              v168[2] = v166;
              v168[3] = v167;
            }
            else if (v148 == 7)
            {
              float64x2_t v151 = vld1q_dup_f64((const double *)v146);
              v100[8] = v151;
              v100[9] = v151;
              v100[10] = v151;
              v100[11] = v151;
              v100[12] = v151;
              v100[13] = v151;
              v100[14] = v151;
              v100[15] = v151;
              long long v152 = (float64x2_t *)((char *)v147 + v33);
              *long long v152 = v151;
              v152[1] = v151;
              v152[2] = v151;
              v152[3] = v151;
              v152[4] = v151;
              v152[5] = v151;
              uint64_t v149 = 8;
              v152[6] = v151;
              v152[7] = v151;
            }
            else if (v71[3])
            {
              uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v147, v33, v146, v148);
            }
            else
            {
              uint64_t v149 = 0;
              v100[14] = 0u;
              v100[15] = 0u;
              v100[12] = 0u;
              v100[13] = 0u;
              v100[10] = 0u;
              v100[11] = 0u;
              _OWORD *v147 = 0u;
              v100[9] = 0u;
              long long v150 = (_OWORD *)((char *)v147 + v33);
              v150[6] = 0u;
              v150[7] = 0u;
              v150[4] = 0u;
              v150[5] = 0u;
              v150[2] = 0u;
              v150[3] = 0u;
              _OWORD *v150 = 0u;
              v150[1] = 0u;
            }
            uint64_t v169 = v146 + v149;
            float64x2_t v170 = (float64x2_t *)((char *)v72 + v441);
            unsigned int v171 = v71[4];
            if (v171 == 255)
            {
              float64x2_t v176 = *(float64x2_t *)(v169 + 16);
              float64x2_t v177 = *(float64x2_t *)(v169 + 32);
              float64x2_t v178 = *(float64x2_t *)(v169 + 48);
              long long v179 = *(_OWORD *)(v169 + 64);
              long long v180 = *(_OWORD *)(v169 + 80);
              long long v181 = *(_OWORD *)(v169 + 96);
              long long v182 = *(_OWORD *)(v169 + 112);
              float64x2_t v183 = *(float64x2_t *)(v169 + 128);
              float64x2_t v184 = *(float64x2_t *)(v169 + 144);
              float64x2_t v185 = *(float64x2_t *)(v169 + 160);
              float64x2_t v186 = *(float64x2_t *)(v169 + 176);
              long long v187 = *(_OWORD *)(v169 + 192);
              long long v188 = *(_OWORD *)(v169 + 208);
              long long v189 = *(_OWORD *)(v169 + 224);
              long long v190 = *(_OWORD *)(v169 + 240);
              *float64x2_t v170 = *(float64x2_t *)v169;
              v170[1] = v176;
              v170[2] = v177;
              v170[3] = v178;
              float64x2_t v191 = (_OWORD *)((char *)v170->f64 + v33);
              v170[4] = v183;
              v170[5] = v184;
              v170[6] = v185;
              v170[7] = v186;
              *float64x2_t v191 = v179;
              v191[1] = v180;
              v191[2] = v181;
              v191[3] = v182;
              BOOL v192 = (_OWORD *)((char *)v170[4].f64 + v33);
              uint64_t v172 = 256;
              *BOOL v192 = v187;
              v192[1] = v188;
              v192[2] = v189;
              v192[3] = v190;
            }
            else if (v171 == 7)
            {
              float64x2_t v174 = vld1q_dup_f64((const double *)v169);
              *float64x2_t v170 = v174;
              v170[1] = v174;
              v170[2] = v174;
              v170[3] = v174;
              v170[4] = v174;
              v170[5] = v174;
              v170[6] = v174;
              v170[7] = v174;
              long long v175 = (float64x2_t *)((char *)v170 + v33);
              *long long v175 = v174;
              v175[1] = v174;
              v175[2] = v174;
              v175[3] = v174;
              v175[4] = v174;
              v175[5] = v174;
              v175[6] = v174;
              v175[7] = v174;
              uint64_t v172 = 8;
            }
            else if (v71[4])
            {
              uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72 + v441, v33, v169, v171);
            }
            else
            {
              uint64_t v172 = 0;
              v170[6] = 0u;
              v170[7] = 0u;
              v170[4] = 0u;
              v170[5] = 0u;
              v170[2] = 0u;
              v170[3] = 0u;
              *float64x2_t v170 = 0u;
              v170[1] = 0u;
              long long v173 = (_OWORD *)((char *)v170->f64 + v33);
              v173[6] = 0u;
              v173[7] = 0u;
              v173[4] = 0u;
              v173[5] = 0u;
              v173[2] = 0u;
              v173[3] = 0u;
              *long long v173 = 0u;
              v173[1] = 0u;
            }
            uint64_t v193 = v169 + v172;
            float64x2_t v194 = (float64x2_t *)((char *)v72 + 6 * a11);
            unsigned int v195 = v71[5];
            if (v195 == 255)
            {
              float64x2_t v200 = *(float64x2_t *)(v193 + 16);
              float64x2_t v201 = *(float64x2_t *)(v193 + 32);
              float64x2_t v202 = *(float64x2_t *)(v193 + 48);
              long long v203 = *(_OWORD *)(v193 + 64);
              long long v204 = *(_OWORD *)(v193 + 80);
              long long v205 = *(_OWORD *)(v193 + 96);
              long long v206 = *(_OWORD *)(v193 + 112);
              float64x2_t v207 = *(float64x2_t *)(v193 + 128);
              float64x2_t v208 = *(float64x2_t *)(v193 + 144);
              float64x2_t v209 = *(float64x2_t *)(v193 + 160);
              float64x2_t v210 = *(float64x2_t *)(v193 + 176);
              long long v211 = *(_OWORD *)(v193 + 192);
              long long v212 = *(_OWORD *)(v193 + 208);
              long long v213 = *(_OWORD *)(v193 + 224);
              long long v214 = *(_OWORD *)(v193 + 240);
              *float64x2_t v194 = *(float64x2_t *)v193;
              v194[1] = v200;
              v194[2] = v201;
              v194[3] = v202;
              float64x2_t v215 = (_OWORD *)((char *)v194->f64 + v33);
              v194[4] = v207;
              v194[5] = v208;
              v194[6] = v209;
              v194[7] = v210;
              *float64x2_t v215 = v203;
              v215[1] = v204;
              v215[2] = v205;
              v215[3] = v206;
              int v216 = (_OWORD *)((char *)v194[4].f64 + v33);
              uint64_t v196 = 256;
              *int v216 = v211;
              v216[1] = v212;
              v216[2] = v213;
              v216[3] = v214;
            }
            else if (v195 == 7)
            {
              float64x2_t v198 = vld1q_dup_f64((const double *)v193);
              *float64x2_t v194 = v198;
              v194[1] = v198;
              v194[2] = v198;
              v194[3] = v198;
              v194[4] = v198;
              v194[5] = v198;
              v194[6] = v198;
              v194[7] = v198;
              long long v199 = (float64x2_t *)((char *)v194 + v33);
              *long long v199 = v198;
              v199[1] = v198;
              v199[2] = v198;
              v199[3] = v198;
              v199[4] = v198;
              v199[5] = v198;
              v199[6] = v198;
              v199[7] = v198;
              uint64_t v196 = 8;
            }
            else if (v71[5])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v194, v33, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              v194[6] = 0u;
              v194[7] = 0u;
              v194[4] = 0u;
              v194[5] = 0u;
              v194[2] = 0u;
              v194[3] = 0u;
              *float64x2_t v194 = 0u;
              v194[1] = 0u;
              long long v197 = (_OWORD *)((char *)v194->f64 + v33);
              v197[6] = 0u;
              v197[7] = 0u;
              v197[4] = 0u;
              v197[5] = 0u;
              v197[2] = 0u;
              v197[3] = 0u;
              *long long v197 = 0u;
              v197[1] = 0u;
            }
            uint64_t v217 = v193 + v196;
            float64x2_t v218 = (_OWORD *)v170[8].f64;
            unsigned int v219 = v71[6];
            if (v219 == 255)
            {
              float64x2_t v224 = *(float64x2_t *)(v217 + 16);
              float64x2_t v225 = *(float64x2_t *)(v217 + 32);
              float64x2_t v226 = *(float64x2_t *)(v217 + 48);
              long long v227 = *(_OWORD *)(v217 + 64);
              long long v228 = *(_OWORD *)(v217 + 80);
              long long v229 = *(_OWORD *)(v217 + 96);
              long long v230 = *(_OWORD *)(v217 + 112);
              float64x2_t v231 = *(float64x2_t *)(v217 + 128);
              float64x2_t v232 = *(float64x2_t *)(v217 + 144);
              float64x2_t v233 = *(float64x2_t *)(v217 + 160);
              float64x2_t v234 = *(float64x2_t *)(v217 + 176);
              long long v235 = *(_OWORD *)(v217 + 192);
              long long v236 = *(_OWORD *)(v217 + 208);
              long long v237 = *(_OWORD *)(v217 + 224);
              long long v238 = *(_OWORD *)(v217 + 240);
              *float64x2_t v218 = *(_OWORD *)v217;
              v170[9] = v224;
              v170[10] = v225;
              v170[11] = v226;
              float64x2_t v239 = (_OWORD *)((char *)v218 + v33);
              v170[12] = v231;
              v170[13] = v232;
              v170[14] = v233;
              v170[15] = v234;
              *float64x2_t v239 = v227;
              v239[1] = v228;
              v239[2] = v229;
              v239[3] = v230;
              v239 += 4;
              uint64_t v220 = 256;
              *float64x2_t v239 = v235;
              v239[1] = v236;
              v239[2] = v237;
              v239[3] = v238;
            }
            else if (v219 == 7)
            {
              float64x2_t v222 = vld1q_dup_f64((const double *)v217);
              float64x2_t v170[8] = v222;
              v170[9] = v222;
              v170[10] = v222;
              v170[11] = v222;
              v170[12] = v222;
              v170[13] = v222;
              v170[14] = v222;
              v170[15] = v222;
              long long v223 = (float64x2_t *)((char *)v218 + v33);
              *long long v223 = v222;
              v223[1] = v222;
              v223[2] = v222;
              v223[3] = v222;
              v223[4] = v222;
              v223[5] = v222;
              uint64_t v220 = 8;
              v223[6] = v222;
              v223[7] = v222;
            }
            else if (v71[6])
            {
              uint64_t v220 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v218, v33, v217, v219);
            }
            else
            {
              uint64_t v220 = 0;
              v170[14] = 0u;
              v170[15] = 0u;
              v170[12] = 0u;
              v170[13] = 0u;
              v170[10] = 0u;
              v170[11] = 0u;
              *float64x2_t v218 = 0u;
              v170[9] = 0u;
              long long v221 = (_OWORD *)((char *)v218 + v33);
              v221[6] = 0u;
              v221[7] = 0u;
              v221[4] = 0u;
              v221[5] = 0u;
              v221[2] = 0u;
              v221[3] = 0u;
              *long long v221 = 0u;
              v221[1] = 0u;
            }
            unsigned int v40 = v38 + 1;
            uint64_t v240 = v217 + v220;
            float64x2_t v241 = (_OWORD *)v194[8].f64;
            unsigned int v242 = v71[7];
            if (v242 == 255)
            {
              float64x2_t v246 = *(float64x2_t *)(v240 + 16);
              float64x2_t v247 = *(float64x2_t *)(v240 + 32);
              float64x2_t v248 = *(float64x2_t *)(v240 + 48);
              long long v249 = *(_OWORD *)(v240 + 64);
              long long v250 = *(_OWORD *)(v240 + 80);
              long long v251 = *(_OWORD *)(v240 + 96);
              long long v252 = *(_OWORD *)(v240 + 112);
              float64x2_t v253 = *(float64x2_t *)(v240 + 128);
              float64x2_t v254 = *(float64x2_t *)(v240 + 144);
              float64x2_t v255 = *(float64x2_t *)(v240 + 160);
              float64x2_t v256 = *(float64x2_t *)(v240 + 176);
              long long v257 = *(_OWORD *)(v240 + 192);
              long long v258 = *(_OWORD *)(v240 + 208);
              long long v259 = *(_OWORD *)(v240 + 224);
              long long v260 = *(_OWORD *)(v240 + 240);
              *float64x2_t v241 = *(_OWORD *)v240;
              v194[9] = v246;
              v194[10] = v247;
              v194[11] = v248;
              float64x2_t v261 = (_OWORD *)((char *)v241 + v33);
              v194[12] = v253;
              v194[13] = v254;
              v194[14] = v255;
              v194[15] = v256;
              *float64x2_t v261 = v249;
              v261[1] = v250;
              v261[2] = v251;
              v261[3] = v252;
              v261 += 4;
              *float64x2_t v261 = v257;
              v261[1] = v258;
              v261[2] = v259;
              v261[3] = v260;
              unsigned int v16 = v448;
              uint64_t v24 = v458;
            }
            else
            {
              uint64_t v24 = v458;
              if (v242 == 7)
              {
                float64x2_t v244 = vld1q_dup_f64((const double *)v240);
                v194[8] = v244;
                v194[9] = v244;
                v194[10] = v244;
                v194[11] = v244;
                v194[12] = v244;
                v194[13] = v244;
                v194[14] = v244;
                v194[15] = v244;
                long long v245 = (float64x2_t *)((char *)v241 + v33);
                *long long v245 = v244;
                v245[1] = v244;
                v245[2] = v244;
                v245[3] = v244;
                v245[4] = v244;
                v245[5] = v244;
                v245[6] = v244;
                v245[7] = v244;
              }
              else if (v242)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v241, v33, v240, v242);
              }
              else
              {
                v194[14] = 0u;
                v194[15] = 0u;
                v194[12] = 0u;
                v194[13] = 0u;
                v194[10] = 0u;
                v194[11] = 0u;
                *float64x2_t v241 = 0u;
                v194[9] = 0u;
                float64x2_t v243 = (_OWORD *)((char *)v241 + v33);
                v243[6] = 0u;
                v243[7] = 0u;
                v243[4] = 0u;
                v243[5] = 0u;
                v243[2] = 0u;
                v243[3] = 0u;
                *float64x2_t v243 = 0u;
                v243[1] = 0u;
              }
              unsigned int v16 = v448;
            }
          }
          BOOL v29 = v38 == v449 >> 3;
          unsigned int v38 = v40;
        }
        while (!v29);
        BOOL v29 = v25++ == v440;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  uint64_t v156 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v114 = v115 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 3;
      unsigned int v119 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 3 <= v126 >> 3)
    {
      unsigned int v135 = v25 >> 3;
      unsigned int v111 = v26 >> 3;
      int v134 = (v25 & 7) + 1;
      int v110 = (v26 & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 8 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 3;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 8;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 11);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          float64x2_t v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            float64x2_t v83 = __dst;
          }
          float64x2_t v85 = (unsigned __int8 *)(v130 + 8 * v77);
          float64x2_t v86 = (int16x8_t *)(v131 + 32 * (v49 - v32));
          char v87 = v51 < 8 || v52;
          if ((v87 & 1) != 0 || v137 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + 32 * (v49 - v32);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              uint64_t v97 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 256, (uint64_t)v83, *v85)];
              uint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, v97, v85[1]);
              uint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 256, v98, v85[2]);
              uint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v99, v85[3]);
              uint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v100, v85[4]);
              uint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 256, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 256, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                float64x2_t v106 = &v148[16 * (unint64_t)v141 + 2 * v142];
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106->i8[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while (32 * (unint64_t)v144 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 16;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85)];
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v86 + v122), a11, v88, v85[1]);
            uint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v89, v85[2]);
            uint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v86 + v122 + 128), a11, v90, v85[3]);
            float64x2_t v92 = (int16x8_t *)((char *)v86 + v121);
            uint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v86 + v121), a11, v91, v85[4]);
            float64x2_t v94 = (int16x8_t *)((char *)v86 + 6 * a11);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v92 + 8, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 8, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 3;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  uint64_t v156 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v114 = v115 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 3;
      unsigned int v119 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 3 <= v126 >> 3)
    {
      unsigned int v135 = v25 >> 3;
      unsigned int v111 = v26 >> 3;
      int v134 = (v25 & 7) + 1;
      int v110 = (v26 & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 8 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 3;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 8;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 11);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          float64x2_t v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            float64x2_t v83 = __dst;
          }
          float64x2_t v85 = (unsigned __int8 *)(v130 + 8 * v77);
          float64x2_t v86 = (int16x8_t *)(v131 + 32 * (v49 - v32));
          char v87 = v51 < 8 || v52;
          if ((v87 & 1) != 0 || v137 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + 32 * (v49 - v32);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              uint64_t v97 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 256, (uint64_t)v83, *v85)];
              uint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, v97, v85[1]);
              uint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 256, v98, v85[2]);
              uint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v99, v85[3]);
              uint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v100, v85[4]);
              uint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 256, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 256, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                float64x2_t v106 = &v148[16 * (unint64_t)v141 + 2 * v142];
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106->i8[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while (32 * (unint64_t)v144 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 16;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85)];
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v86 + v122), a11, v88, v85[1]);
            uint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v89, v85[2]);
            uint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v86 + v122 + 128), a11, v90, v85[3]);
            float64x2_t v92 = (int16x8_t *)((char *)v86 + v121);
            uint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v86 + v121), a11, v91, v85[4]);
            float64x2_t v94 = (int16x8_t *)((char *)v86 + 6 * a11);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v92 + 8, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 8, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 3;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v131 = v21;
  uint64_t v132 = v22;
  uint64_t v119 = v23;
  uint64_t v24 = v12;
  uint64_t v158 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v136 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v118 = v14 + a10 - 1;
  unsigned int v120 = v118 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v130 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v120)
  {
    unsigned int v128 = v16 + a9 - 1;
    unsigned int v117 = v16 >> 3;
    if (v16 >> 3 <= v128 >> 3)
    {
      unsigned int v114 = v20 - 1;
      unsigned int v116 = (v18 - 1) >> 3;
      int v137 = ((v20 - 1) & 7) + 1;
      unsigned int v138 = (v20 - 1) >> 3;
      int v115 = ((v18 - 1) & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v127 = v34.i32[0] | v34.i32[1];
      BOOL v125 = v34.i32[1] != 0;
      int8x8_t v126 = v34;
      BOOL v124 = v34.i32[0] != 0;
      unint64_t v113 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v136) {
          int v36 = v136;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v117;
        if (v118 < v35) {
          unsigned int v35 = v118;
        }
        int v123 = v36 - 8 * v25;
        int v134 = v35 - v36 + 1;
        unsigned int v135 = 8 * v25;
        int v38 = v115;
        if (v25 != v116) {
          int v38 = 8;
        }
        unsigned int v139 = v38;
        uint64_t v133 = v119 + (v36 - v136) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v128 < v40) {
            unsigned int v40 = v128;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v138) {
            unsigned int v43 = v137;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v135 >= v136 && v39 >= v16)
          {
            int v45 = v137;
            if (v37 != v138) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v134 != v139;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v113 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v103 = 0;
            }
            else {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
            }
            unsigned int v104 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v105 = 0;
              if (v103) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v105 = 32 - __clz(~(-1 << -(char)__clz(v104)));
              if (v105 | v103)
              {
LABEL_121:
                int v106 = 0;
                uint64_t v107 = 0;
                int v108 = v37 & v102;
                int v109 = v25 & v104;
                BOOL v110 = v103 != 0;
                BOOL v111 = v105 != 0;
                int v112 = 1;
                do
                {
                  --v103;
                  if (v110) {
                    v107 |= (unint64_t)(v112 & v108) << v106++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v105;
                  if (v111) {
                    v107 |= (unint64_t)(v112 & v109) << v106++;
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  v112 *= 2;
                  --v106;
                  BOOL v111 = v105 != 0;
                  BOOL v110 = v103 != 0;
                }
                while (v105 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v107 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v135 / v72 * ((v68 + v114) / v68)) << 14) + (v107 << 11);
            goto LABEL_60;
          }
          if (v127)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v124;
            BOOL v51 = v125;
            __int32 v53 = v126.i32[0];
            __int32 v52 = v126.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v131 + v54);
          if (v130)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v131 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v132 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (int16x8_t *)(v133 + 32 * (v41 - v16));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) == 0 && v139 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v122), a11, v80, v76[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v81, v76[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v122 + 128), a11, v82, v76[3]);
            int v84 = (int16x8_t *)((char *)v78 + v121);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v121), a11, v83, v76[4]);
            float64x2_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 8, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v147 = v43;
          char v148 = v139;
          unsigned int v143 = v123;
          unsigned int v144 = v41 - v39;
          block[6] = v76;
          unsigned int v141 = v78;
          uint64_t v142 = a11;
          unsigned int v145 = v134;
          unsigned int v146 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v89 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, (uint64_t)v73, *v76)];
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v89, v76[1]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v90, v76[2]);
          uint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v91, v76[3]);
          uint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 256, v92, v76[4]);
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v156, 256, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 256, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v157, 256, v94 + v95, v76[7]);
          unint64_t v96 = v145;
          uint64_t v16 = v77;
          if (v145)
          {
            unint64_t v97 = 0;
            uint64_t v98 = &v150[16 * (unint64_t)v143 + 2 * v144];
            unsigned int v99 = v146;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = &v141->i8[v142 * v97];
                do
                {
                  v101[v100] = v98->i8[v100];
                  ++v100;
                  unsigned int v99 = v146;
                }
                while (32 * (unint64_t)v146 > v100);
                unint64_t v96 = v145;
              }
              ++v97;
              v98 += 16;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v128 >> 3;
        }
        while (!v29);
        BOOL v29 = v25++ == v120;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v131 = v21;
  uint64_t v132 = v22;
  uint64_t v119 = v23;
  uint64_t v24 = v12;
  uint64_t v158 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v136 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v118 = v14 + a10 - 1;
  unsigned int v120 = v118 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v130 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v120)
  {
    unsigned int v128 = v16 + a9 - 1;
    unsigned int v117 = v16 >> 3;
    if (v16 >> 3 <= v128 >> 3)
    {
      unsigned int v114 = v20 - 1;
      unsigned int v116 = (v18 - 1) >> 3;
      int v137 = ((v20 - 1) & 7) + 1;
      unsigned int v138 = (v20 - 1) >> 3;
      int v115 = ((v18 - 1) & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v127 = v34.i32[0] | v34.i32[1];
      BOOL v125 = v34.i32[1] != 0;
      int8x8_t v126 = v34;
      BOOL v124 = v34.i32[0] != 0;
      unint64_t v113 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v136) {
          int v36 = v136;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v117;
        if (v118 < v35) {
          unsigned int v35 = v118;
        }
        int v123 = v36 - 8 * v25;
        int v134 = v35 - v36 + 1;
        unsigned int v135 = 8 * v25;
        int v38 = v115;
        if (v25 != v116) {
          int v38 = 8;
        }
        unsigned int v139 = v38;
        uint64_t v133 = v119 + (v36 - v136) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v128 < v40) {
            unsigned int v40 = v128;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v138) {
            unsigned int v43 = v137;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v135 >= v136 && v39 >= v16)
          {
            int v45 = v137;
            if (v37 != v138) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v134 != v139;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v113 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v103 = 0;
            }
            else {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
            }
            unsigned int v104 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v105 = 0;
              if (v103) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v105 = 32 - __clz(~(-1 << -(char)__clz(v104)));
              if (v105 | v103)
              {
LABEL_121:
                int v106 = 0;
                uint64_t v107 = 0;
                int v108 = v37 & v102;
                int v109 = v25 & v104;
                BOOL v110 = v103 != 0;
                BOOL v111 = v105 != 0;
                int v112 = 1;
                do
                {
                  --v103;
                  if (v110) {
                    v107 |= (unint64_t)(v112 & v108) << v106++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v105;
                  if (v111) {
                    v107 |= (unint64_t)(v112 & v109) << v106++;
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  v112 *= 2;
                  --v106;
                  BOOL v111 = v105 != 0;
                  BOOL v110 = v103 != 0;
                }
                while (v105 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v107 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v135 / v72 * ((v68 + v114) / v68)) << 14) + (v107 << 11);
            goto LABEL_60;
          }
          if (v127)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v124;
            BOOL v51 = v125;
            __int32 v53 = v126.i32[0];
            __int32 v52 = v126.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v131 + v54);
          if (v130)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v131 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v132 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (int16x8_t *)(v133 + 32 * (v41 - v16));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) == 0 && v139 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v122), a11, v80, v76[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v81, v76[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v122 + 128), a11, v82, v76[3]);
            int v84 = (int16x8_t *)((char *)v78 + v121);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v121), a11, v83, v76[4]);
            float64x2_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 8, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v147 = v43;
          char v148 = v139;
          unsigned int v143 = v123;
          unsigned int v144 = v41 - v39;
          block[6] = v76;
          unsigned int v141 = v78;
          uint64_t v142 = a11;
          unsigned int v145 = v134;
          unsigned int v146 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v89 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, (uint64_t)v73, *v76)];
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v89, v76[1]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v90, v76[2]);
          uint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v91, v76[3]);
          uint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 256, v92, v76[4]);
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v156, 256, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 256, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v157, 256, v94 + v95, v76[7]);
          unint64_t v96 = v145;
          uint64_t v16 = v77;
          if (v145)
          {
            unint64_t v97 = 0;
            uint64_t v98 = &v150[16 * (unint64_t)v143 + 2 * v144];
            unsigned int v99 = v146;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = &v141->i8[v142 * v97];
                do
                {
                  v101[v100] = v98->i8[v100];
                  ++v100;
                  unsigned int v99 = v146;
                }
                while (32 * (unint64_t)v146 > v100);
                unint64_t v96 = v145;
              }
              ++v97;
              v98 += 16;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v128 >> 3;
        }
        while (!v29);
        BOOL v29 = v25++ == v120;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          unsigned int v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            unsigned int v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                uint64_t v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            int v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            float64x2_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          unsigned int v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            unsigned int v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                uint64_t v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            int v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            float64x2_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            uint64_t v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            uint64_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            uint64_t v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            uint64_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            uint64_t v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            uint64_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            uint64_t v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            uint64_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            uint64_t v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            uint64_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 9);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 9;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int16x8_t *)(v123 + 8 * (v41 - v24));
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 8 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[4 * (unint64_t)v133].i8[8 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (8 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114), a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]);
            uint64_t v84 = (int16x8_t *)((char *)v78 + v113);
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v78 + v113), a11, v83, v77[4]);
            uint64_t v86 = (int16x8_t *)((char *)v78 + 6 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 9);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 9;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int16x8_t *)(v125 + 8 * (v33 - a7));
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114), a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v114 + 32), a11, v74, v68[3]);
            int v76 = (int16x8_t *)((char *)v70 + v113);
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int16x8_t *)((char *)v70 + v113), a11, v75, v68[4]);
            BOOL v78 = (int16x8_t *)((char *)v70 + 6 * a11);
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          unsigned int v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 64, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 64, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[4 * (unint64_t)v135].i8[8 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = &v133->i8[v134 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (8 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  int16x8_t v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  int16x8_t v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          uint64_t v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            uint64_t v75 = __dst;
          }
          uint64_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  int16x8_t v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  int16x8_t v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  v155[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v114 = v115 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 3;
      unsigned int v119 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 3 <= v126 >> 3)
    {
      unsigned int v135 = v25 >> 3;
      unsigned int v111 = v26 >> 3;
      int v134 = (v25 & 7) + 1;
      int v110 = (v26 & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 8 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 3;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 8;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 12);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 12;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            uint64_t v83 = __dst;
          }
          uint64_t v85 = (unsigned __int8 *)(v130 + 8 * v77);
          uint64_t v86 = v131 + ((unint64_t)(v49 - v32) << 6);
          char v87 = v51 < 8 || v52;
          if ((v87 & 1) != 0 || v137 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + ((unint64_t)(v49 - v32) << 6);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              unint64_t v97 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v148, 512, (unint64_t)v83, *v85)];
              unint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 512, v97, v85[1]);
              unint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 512, v98, v85[2]);
              unint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v99, v85[3]);
              unint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v100, v85[4]);
              unint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 512, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 512, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v155, 512, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                unsigned int v106 = &v148[512 * (unint64_t)v141 + 64 * (unint64_t)v142];
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while ((unint64_t)v144 << 6 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 512;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            unint64_t v88 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (unint64_t)v83, *v85)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122, a11, v88, v85[1]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 256, a11, v89, v85[2]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122 + 256, a11, v90, v85[3]);
            uint64_t v92 = v86 + v121;
            unint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v121, a11, v91, v85[4]);
            uint64_t v94 = v86 + 6 * a11;
            unint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v92 + 256, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 256, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 3;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  v155[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v114 = v115 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 3;
      unsigned int v119 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 3 <= v126 >> 3)
    {
      unsigned int v135 = v25 >> 3;
      unsigned int v111 = v26 >> 3;
      int v134 = (v25 & 7) + 1;
      int v110 = (v26 & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 8 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 3;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 8;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 8 * v45;
          unsigned int v48 = 8 * (v45 + 1) - 1;
          if (8 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 8 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 8;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 8;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 12);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 12;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            uint64_t v83 = __dst;
          }
          uint64_t v85 = (unsigned __int8 *)(v130 + 8 * v77);
          uint64_t v86 = v131 + ((unint64_t)(v49 - v32) << 6);
          char v87 = v51 < 8 || v52;
          if ((v87 & 1) != 0 || v137 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + ((unint64_t)(v49 - v32) << 6);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              unint64_t v97 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v148, 512, (unint64_t)v83, *v85)];
              unint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 512, v97, v85[1]);
              unint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 512, v98, v85[2]);
              unint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v99, v85[3]);
              unint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v100, v85[4]);
              unint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 512, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 512, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v155, 512, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                unsigned int v106 = &v148[512 * (unint64_t)v141 + 64 * (unint64_t)v142];
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while ((unint64_t)v144 << 6 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 512;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            unint64_t v88 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (unint64_t)v83, *v85)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122, a11, v88, v85[1]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 256, a11, v89, v85[2]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122 + 256, a11, v90, v85[3]);
            uint64_t v92 = v86 + v121;
            unint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v121, a11, v91, v85[4]);
            uint64_t v94 = v86 + 6 * a11;
            unint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v92 + 256, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 256, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 3;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v131 = v21;
  uint64_t v132 = v22;
  uint64_t v119 = v23;
  uint64_t v24 = v12;
  v157[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v136 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v118 = v14 + a10 - 1;
  unsigned int v120 = v118 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v130 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v120)
  {
    unsigned int v128 = v16 + a9 - 1;
    unsigned int v117 = v16 >> 3;
    if (v16 >> 3 <= v128 >> 3)
    {
      unsigned int v114 = v20 - 1;
      unsigned int v116 = (v18 - 1) >> 3;
      int v137 = ((v20 - 1) & 7) + 1;
      unsigned int v138 = (v20 - 1) >> 3;
      int v115 = ((v18 - 1) & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v127 = v34.i32[0] | v34.i32[1];
      BOOL v125 = v34.i32[1] != 0;
      int8x8_t v126 = v34;
      BOOL v124 = v34.i32[0] != 0;
      unint64_t v113 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v136) {
          int v36 = v136;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v117;
        if (v118 < v35) {
          unsigned int v35 = v118;
        }
        int v123 = v36 - 8 * v25;
        int v134 = v35 - v36 + 1;
        unsigned int v135 = 8 * v25;
        int v38 = v115;
        if (v25 != v116) {
          int v38 = 8;
        }
        unsigned int v139 = v38;
        uint64_t v133 = v119 + (v36 - v136) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v128 < v40) {
            unsigned int v40 = v128;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v138) {
            unsigned int v43 = v137;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v135 >= v136 && v39 >= v16)
          {
            int v45 = v137;
            if (v37 != v138) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v134 != v139;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v113 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v103 = 0;
            }
            else {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
            }
            unsigned int v104 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v105 = 0;
              if (v103) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v105 = 32 - __clz(~(-1 << -(char)__clz(v104)));
              if (v105 | v103)
              {
LABEL_121:
                int v106 = 0;
                uint64_t v107 = 0;
                int v108 = v37 & v102;
                int v109 = v25 & v104;
                BOOL v110 = v103 != 0;
                BOOL v111 = v105 != 0;
                int v112 = 1;
                do
                {
                  --v103;
                  if (v110) {
                    v107 |= (unint64_t)(v112 & v108) << v106++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v105;
                  if (v111) {
                    v107 |= (unint64_t)(v112 & v109) << v106++;
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  v112 *= 2;
                  --v106;
                  BOOL v111 = v105 != 0;
                  BOOL v110 = v103 != 0;
                }
                while (v105 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v107 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v135 / v72 * ((v68 + v114) / v68)) << 14) + (v107 << 12);
            goto LABEL_60;
          }
          if (v127)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v124;
            BOOL v51 = v125;
            __int32 v53 = v126.i32[0];
            __int32 v52 = v126.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 12;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v131 + v54);
          if (v130)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v131 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v132 + 8 * v62);
          uint64_t v77 = v16;
          uint64_t v78 = v133 + ((unint64_t)(v41 - v16) << 6);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) == 0 && v139 > 7)
          {
            unint64_t v80 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (unint64_t)v73, *v76)];
            unint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v122, a11, v80, v76[1]);
            unint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 256, a11, v81, v76[2]);
            unint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v122 + 256, a11, v82, v76[3]);
            uint64_t v84 = v78 + v121;
            unint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v121, a11, v83, v76[4]);
            uint64_t v86 = v78 + 6 * a11;
            unint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 256, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 256, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v147 = v43;
          char v148 = v139;
          unsigned int v143 = v123;
          unsigned int v144 = v41 - v39;
          block[6] = v76;
          uint64_t v141 = v78;
          uint64_t v142 = a11;
          unsigned int v145 = v134;
          unsigned int v146 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          unint64_t v89 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v150, 512, (unint64_t)v73, *v76)];
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v89, v76[1]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v90, v76[2]);
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 512, v91, v76[3]);
          unint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 512, v92, v76[4]);
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v156, 512, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v155, 512, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v157, 512, v94 + v95, v76[7]);
          unint64_t v96 = v145;
          uint64_t v16 = v77;
          if (v145)
          {
            unint64_t v97 = 0;
            unint64_t v98 = &v150[512 * (unint64_t)v143 + 64 * (unint64_t)v144];
            unsigned int v99 = v146;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = v141 + v142 * v97;
                do
                {
                  *(unsigned char *)(v101 + v100) = v98[v100];
                  ++v100;
                  unsigned int v99 = v146;
                }
                while ((unint64_t)v146 << 6 > v100);
                unint64_t v96 = v145;
              }
              ++v97;
              v98 += 512;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v128 >> 3;
        }
        while (!v29);
        BOOL v29 = v25++ == v120;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v131 = v21;
  uint64_t v132 = v22;
  uint64_t v119 = v23;
  uint64_t v24 = v12;
  v157[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v136 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v118 = v14 + a10 - 1;
  unsigned int v120 = v118 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v130 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v120)
  {
    unsigned int v128 = v16 + a9 - 1;
    unsigned int v117 = v16 >> 3;
    if (v16 >> 3 <= v128 >> 3)
    {
      unsigned int v114 = v20 - 1;
      unsigned int v116 = (v18 - 1) >> 3;
      int v137 = ((v20 - 1) & 7) + 1;
      unsigned int v138 = (v20 - 1) >> 3;
      int v115 = ((v18 - 1) & 7) + 1;
      uint64_t v121 = 4 * a11;
      uint64_t v122 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v127 = v34.i32[0] | v34.i32[1];
      BOOL v125 = v34.i32[1] != 0;
      int8x8_t v126 = v34;
      BOOL v124 = v34.i32[0] != 0;
      unint64_t v113 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v136) {
          int v36 = v136;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v117;
        if (v118 < v35) {
          unsigned int v35 = v118;
        }
        int v123 = v36 - 8 * v25;
        int v134 = v35 - v36 + 1;
        unsigned int v135 = 8 * v25;
        int v38 = v115;
        if (v25 != v116) {
          int v38 = 8;
        }
        unsigned int v139 = v38;
        uint64_t v133 = v119 + (v36 - v136) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v128 < v40) {
            unsigned int v40 = v128;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v138) {
            unsigned int v43 = v137;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v135 >= v136 && v39 >= v16)
          {
            int v45 = v137;
            if (v37 != v138) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v134 != v139;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v113 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v103 = 0;
            }
            else {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
            }
            unsigned int v104 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v105 = 0;
              if (v103) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v105 = 32 - __clz(~(-1 << -(char)__clz(v104)));
              if (v105 | v103)
              {
LABEL_121:
                int v106 = 0;
                uint64_t v107 = 0;
                int v108 = v37 & v102;
                int v109 = v25 & v104;
                BOOL v110 = v103 != 0;
                BOOL v111 = v105 != 0;
                int v112 = 1;
                do
                {
                  --v103;
                  if (v110) {
                    v107 |= (unint64_t)(v112 & v108) << v106++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v105;
                  if (v111) {
                    v107 |= (unint64_t)(v112 & v109) << v106++;
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  v112 *= 2;
                  --v106;
                  BOOL v111 = v105 != 0;
                  BOOL v110 = v103 != 0;
                }
                while (v105 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v107 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v135 / v72 * ((v68 + v114) / v68)) << 14) + (v107 << 12);
            goto LABEL_60;
          }
          if (v127)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v124;
            BOOL v51 = v125;
            __int32 v53 = v126.i32[0];
            __int32 v52 = v126.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 12;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v131 + v54);
          if (v130)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v131 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v132 + 8 * v62);
          uint64_t v77 = v16;
          uint64_t v78 = v133 + ((unint64_t)(v41 - v16) << 6);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) == 0 && v139 > 7)
          {
            unint64_t v80 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (unint64_t)v73, *v76)];
            unint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v122, a11, v80, v76[1]);
            unint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 256, a11, v81, v76[2]);
            unint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v122 + 256, a11, v82, v76[3]);
            uint64_t v84 = v78 + v121;
            unint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v121, a11, v83, v76[4]);
            uint64_t v86 = v78 + 6 * a11;
            unint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 256, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 256, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v147 = v43;
          char v148 = v139;
          unsigned int v143 = v123;
          unsigned int v144 = v41 - v39;
          block[6] = v76;
          uint64_t v141 = v78;
          uint64_t v142 = a11;
          unsigned int v145 = v134;
          unsigned int v146 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          unint64_t v89 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v150, 512, (unint64_t)v73, *v76)];
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v89, v76[1]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v90, v76[2]);
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 512, v91, v76[3]);
          unint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 512, v92, v76[4]);
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v156, 512, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v155, 512, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v157, 512, v94 + v95, v76[7]);
          unint64_t v96 = v145;
          uint64_t v16 = v77;
          if (v145)
          {
            unint64_t v97 = 0;
            unint64_t v98 = &v150[512 * (unint64_t)v143 + 64 * (unint64_t)v144];
            unsigned int v99 = v146;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = v141 + v142 * v97;
                do
                {
                  *(unsigned char *)(v101 + v100) = v98[v100];
                  ++v100;
                  unsigned int v99 = v146;
                }
                while ((unint64_t)v146 << 6 > v100);
                unint64_t v96 = v145;
              }
              ++v97;
              v98 += 512;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v128 >> 3;
        }
        while (!v29);
        BOOL v29 = v25++ == v120;
      }
      while (!v29);
    }
  }
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 64 * (unint64_t)*(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (v6 << 6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 64 * (unint64_t)*(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (v6 << 6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 64 * (unint64_t)*(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (v6 << 6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 64 * (unint64_t)*(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (v6 << 6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5->i8[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5->i8[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5->i8[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5->i8[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                + 128
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 80);
      long long v14 = *(_OWORD *)(v3 + 96);
      long long v15 = *(_OWORD *)(v3 + 112);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 176);
      long long v20 = *(_OWORD *)(v3 + 192);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v10;
      result[3] = v11;
      result[4] = v16;
      result[5] = v17;
      result[6] = v18;
      result[7] = v19;
      result[16] = v12;
      result[17] = v13;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[20] = v20;
      result[21] = v21;
      result[22] = v22;
      result[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[4] = v5;
      result[5] = v5;
      result[6] = v5;
      result[7] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[20] = v5;
      result[21] = v5;
      result[22] = v5;
      result[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[22] = 0u;
      result[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 32 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                + 128
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 80);
      long long v14 = *(_OWORD *)(v3 + 96);
      long long v15 = *(_OWORD *)(v3 + 112);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 176);
      long long v20 = *(_OWORD *)(v3 + 192);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v10;
      result[3] = v11;
      result[4] = v16;
      result[5] = v17;
      result[6] = v18;
      result[7] = v19;
      result[16] = v12;
      result[17] = v13;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[20] = v20;
      result[21] = v21;
      result[22] = v22;
      result[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[4] = v5;
      result[5] = v5;
      result[6] = v5;
      result[7] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[20] = v5;
      result[21] = v5;
      result[22] = v5;
      result[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[22] = 0u;
      result[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 32 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                + 128
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 80);
      long long v14 = *(_OWORD *)(v3 + 96);
      long long v15 = *(_OWORD *)(v3 + 112);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 176);
      long long v20 = *(_OWORD *)(v3 + 192);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v10;
      result[3] = v11;
      result[4] = v16;
      result[5] = v17;
      result[6] = v18;
      result[7] = v19;
      result[16] = v12;
      result[17] = v13;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[20] = v20;
      result[21] = v21;
      result[22] = v22;
      result[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[4] = v5;
      result[5] = v5;
      result[6] = v5;
      result[7] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[20] = v5;
      result[21] = v5;
      result[22] = v5;
      result[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[22] = 0u;
      result[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 32 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                + 128
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 80);
      long long v14 = *(_OWORD *)(v3 + 96);
      long long v15 = *(_OWORD *)(v3 + 112);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 176);
      long long v20 = *(_OWORD *)(v3 + 192);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v10;
      result[3] = v11;
      result[4] = v16;
      result[5] = v17;
      result[6] = v18;
      result[7] = v19;
      result[16] = v12;
      result[17] = v13;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[20] = v20;
      result[21] = v21;
      result[22] = v22;
      result[23] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[4] = v5;
      result[5] = v5;
      result[6] = v5;
      result[7] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[20] = v5;
      result[21] = v5;
      result[22] = v5;
      result[23] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[22] = 0u;
      result[23] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 32 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(__n128 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[2 * *(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 32;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[2 * *(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 32;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[2 * *(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 32;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[2 * *(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 32;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 32 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 32 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 32 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 32 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v18[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      long long v11 = (const double *)(v3 + 32);
      float64x2x2_t v20 = vld2q_f64(v11);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[4] = vzip2q_s64(v9, v10);
      result[8] = (int64x2_t)v20.val[0];
      result[12] = (int64x2_t)v20.val[1];
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[8].i64[0] = 0;
      result[8].i64[1] = 0;
      result[12].i64[0] = 0;
      result[12].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    long long v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = *((unsigned char *)v5 + v7);
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = *((unsigned char *)v5 + v7);
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = *((unsigned char *)v5 + v7);
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = *((unsigned char *)v5 + v7);
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[1024
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 96);
      long long v13 = *(_OWORD *)(v3 + 112);
      long long v14 = *(_OWORD *)(v3 + 64);
      long long v15 = *(_OWORD *)(v3 + 80);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 192);
      long long v19 = *(_OWORD *)(v3 + 208);
      long long v20 = *(_OWORD *)(v3 + 160);
      long long v21 = *(_OWORD *)(v3 + 176);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v14;
      result[3] = v15;
      result[16] = v10;
      result[17] = v11;
      result[18] = v12;
      result[19] = v13;
      result[32] = v16;
      result[33] = v17;
      result[34] = v18;
      result[35] = v19;
      uint64_t v6 = 256;
      result[48] = v20;
      result[49] = v21;
      result[50] = v22;
      result[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[32] = v5;
      result[33] = v5;
      result[34] = v5;
      result[35] = v5;
      result[48] = v5;
      result[49] = v5;
      result[50] = v5;
      result[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[32] = 0u;
      result[33] = 0u;
      result[34] = 0u;
      result[35] = 0u;
      result[48] = 0u;
      result[49] = 0u;
      result[50] = 0u;
      result[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[1024
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 96);
      long long v13 = *(_OWORD *)(v3 + 112);
      long long v14 = *(_OWORD *)(v3 + 64);
      long long v15 = *(_OWORD *)(v3 + 80);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 192);
      long long v19 = *(_OWORD *)(v3 + 208);
      long long v20 = *(_OWORD *)(v3 + 160);
      long long v21 = *(_OWORD *)(v3 + 176);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v14;
      result[3] = v15;
      result[16] = v10;
      result[17] = v11;
      result[18] = v12;
      result[19] = v13;
      result[32] = v16;
      result[33] = v17;
      result[34] = v18;
      result[35] = v19;
      uint64_t v6 = 256;
      result[48] = v20;
      result[49] = v21;
      result[50] = v22;
      result[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[32] = v5;
      result[33] = v5;
      result[34] = v5;
      result[35] = v5;
      result[48] = v5;
      result[49] = v5;
      result[50] = v5;
      result[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[32] = 0u;
      result[33] = 0u;
      result[34] = 0u;
      result[35] = 0u;
      result[48] = 0u;
      result[49] = 0u;
      result[50] = 0u;
      result[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[1024
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 96);
      long long v13 = *(_OWORD *)(v3 + 112);
      long long v14 = *(_OWORD *)(v3 + 64);
      long long v15 = *(_OWORD *)(v3 + 80);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 192);
      long long v19 = *(_OWORD *)(v3 + 208);
      long long v20 = *(_OWORD *)(v3 + 160);
      long long v21 = *(_OWORD *)(v3 + 176);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v14;
      result[3] = v15;
      result[16] = v10;
      result[17] = v11;
      result[18] = v12;
      result[19] = v13;
      result[32] = v16;
      result[33] = v17;
      result[34] = v18;
      result[35] = v19;
      uint64_t v6 = 256;
      result[48] = v20;
      result[49] = v21;
      result[50] = v22;
      result[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[32] = v5;
      result[33] = v5;
      result[34] = v5;
      result[35] = v5;
      result[48] = v5;
      result[49] = v5;
      result[50] = v5;
      result[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[32] = 0u;
      result[33] = 0u;
      result[34] = 0u;
      result[35] = 0u;
      result[48] = 0u;
      result[49] = 0u;
      result[50] = 0u;
      result[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[1024
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 96);
      long long v13 = *(_OWORD *)(v3 + 112);
      long long v14 = *(_OWORD *)(v3 + 64);
      long long v15 = *(_OWORD *)(v3 + 80);
      long long v16 = *(_OWORD *)(v3 + 128);
      long long v17 = *(_OWORD *)(v3 + 144);
      long long v18 = *(_OWORD *)(v3 + 192);
      long long v19 = *(_OWORD *)(v3 + 208);
      long long v20 = *(_OWORD *)(v3 + 160);
      long long v21 = *(_OWORD *)(v3 + 176);
      long long v22 = *(_OWORD *)(v3 + 224);
      long long v23 = *(_OWORD *)(v3 + 240);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v9;
      result[2] = v14;
      result[3] = v15;
      result[16] = v10;
      result[17] = v11;
      result[18] = v12;
      result[19] = v13;
      result[32] = v16;
      result[33] = v17;
      result[34] = v18;
      result[35] = v19;
      uint64_t v6 = 256;
      result[48] = v20;
      result[49] = v21;
      result[50] = v22;
      result[51] = v23;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[32] = v5;
      result[33] = v5;
      result[34] = v5;
      result[35] = v5;
      result[48] = v5;
      result[49] = v5;
      result[50] = v5;
      result[51] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)result, 256, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[32] = 0u;
      result[33] = 0u;
      result[34] = 0u;
      result[35] = 0u;
      result[48] = 0u;
      result[49] = 0u;
      result[50] = 0u;
      result[51] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 256;
    }
    while (v25 < v24);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = &v12[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 64;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

int16x8_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 128;
    }
    while (v6 < v5);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    long long v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    long long v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    long long v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    long long v9 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 64;
    }
    while (v8 < v7);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v22[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v11 = *(_OWORD *)(v3 + 48);
      long long v12 = *(_OWORD *)(v3 + 80);
      long long v13 = *(_OWORD *)(v3 + 96);
      long long v14 = *(_OWORD *)(v3 + 112);
      long long v15 = *(_OWORD *)(v3 + 64);
      *(_OWORD *)uint64_t result = *(_OWORD *)v3;
      *((_OWORD *)result + 1) = v10;
      *((_OWORD *)result + 8) = v9;
      *((_OWORD *)result + 9) = v11;
      *((_OWORD *)result + 16) = v15;
      *((_OWORD *)result + 17) = v13;
      *((_OWORD *)result + 24) = v12;
      *((_OWORD *)result + 25) = v14;
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *(float32x4_t *)uint64_t result = v5;
      *((float32x4_t *)result + 1) = v5;
      *((float32x4_t *)result + 8) = v5;
      *((float32x4_t *)result + 9) = v5;
      *((float32x4_t *)result + 16) = v5;
      *((float32x4_t *)result + 17) = v5;
      *((float32x4_t *)result + 24) = v5;
      *((float32x4_t *)result + 25) = v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v16 = *(unsigned int *)(a1 + 80);
  if (v16)
  {
    unint64_t v17 = 0;
    long long v18 = &v22[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v19) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v17;
        do
        {
          *(unsigned char *)(v21 + v20) = v18[v20];
          ++v20;
          uint64_t v19 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v19 > (unint64_t)v20);
        unint64_t v16 = *(unsigned int *)(a1 + 80);
      }
      ++v17;
      v18 += 128;
    }
    while (v17 < v16);
  }
  return result;
}

int32x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x2_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 8
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t result = (int32x2_t)v12;
      result[4] = (int32x2_t)v12;
      result[8] = (int32x2_t)v12;
      result[12] = (int32x2_t)v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int32x2_t v5 = (int32x2_t)*v3;
      int32x2_t v6 = (int32x2_t)v3[1];
      int32x2_t v7 = (int32x2_t)v3[2];
      int32x2_t v8 = (int32x2_t)v3[3];
      *uint64_t result = vzip1_s32((int32x2_t)*v3, v6);
      result[4] = vzip2_s32(v5, v6);
      result[8] = vzip1_s32(v7, v8);
      result[12] = vzip2_s32(v7, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t result = (int32x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, (uint64_t)v3, v11);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t result = 0;
      result[4] = 0;
      result[8] = 0;
      result[12] = 0;
    }
    uint64_t v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x2_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 8
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t result = (int32x2_t)v12;
      result[4] = (int32x2_t)v12;
      result[8] = (int32x2_t)v12;
      result[12] = (int32x2_t)v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int32x2_t v5 = (int32x2_t)*v3;
      int32x2_t v6 = (int32x2_t)v3[1];
      int32x2_t v7 = (int32x2_t)v3[2];
      int32x2_t v8 = (int32x2_t)v3[3];
      *uint64_t result = vzip1_s32((int32x2_t)*v3, v6);
      result[4] = vzip2_s32(v5, v6);
      result[8] = vzip1_s32(v7, v8);
      result[12] = vzip2_s32(v7, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t result = (int32x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, (uint64_t)v3, v11);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t result = 0;
      result[4] = 0;
      result[8] = 0;
      result[12] = 0;
    }
    uint64_t v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x2_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 8
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t result = (int32x2_t)v12;
      result[4] = (int32x2_t)v12;
      result[8] = (int32x2_t)v12;
      result[12] = (int32x2_t)v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int32x2_t v5 = (int32x2_t)*v3;
      int32x2_t v6 = (int32x2_t)v3[1];
      int32x2_t v7 = (int32x2_t)v3[2];
      int32x2_t v8 = (int32x2_t)v3[3];
      *uint64_t result = vzip1_s32((int32x2_t)*v3, v6);
      result[4] = vzip2_s32(v5, v6);
      result[8] = vzip1_s32(v7, v8);
      result[12] = vzip2_s32(v7, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t result = (int32x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, (uint64_t)v3, v11);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t result = 0;
      result[4] = 0;
      result[8] = 0;
      result[12] = 0;
    }
    uint64_t v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x2_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                             + 8
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t result = (int32x2_t)v12;
      result[4] = (int32x2_t)v12;
      result[8] = (int32x2_t)v12;
      result[12] = (int32x2_t)v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int32x2_t v5 = (int32x2_t)*v3;
      int32x2_t v6 = (int32x2_t)v3[1];
      int32x2_t v7 = (int32x2_t)v3[2];
      int32x2_t v8 = (int32x2_t)v3[3];
      *uint64_t result = vzip1_s32((int32x2_t)*v3, v6);
      result[4] = vzip2_s32(v5, v6);
      result[8] = vzip1_s32(v7, v8);
      result[12] = vzip2_s32(v7, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t result = (int32x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, (uint64_t)v3, v11);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t result = 0;
      result[4] = 0;
      result[8] = 0;
      result[12] = 0;
    }
    uint64_t v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48), *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int32x2_t v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 64 * (unint64_t)*(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (v6 << 6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

float64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(const double **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (float64x2_t *)&v16[512
                               * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                               + 128
                               * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 7)
        {
          float64x2_t v9 = vld1q_dup_f64(v3);
          *uint64_t result = v9;
          result[1] = v9;
          result[2] = v9;
          result[3] = v9;
          result[4] = v9;
          result[5] = v9;
          result[6] = v9;
          result[7] = v9;
          result[16] = v9;
          result[17] = v9;
          result[18] = v9;
          result[19] = v9;
          result[20] = v9;
          result[21] = v9;
          result[22] = v9;
          result[23] = v9;
          uint64_t v6 = 8;
        }
        else
        {
          uint64_t result = (float64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)result, 256, (uint64_t)v3, v8);
          uint64_t v6 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (float64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)result, 256, (unint64_t)v3, v8, v5);
        uint64_t v6 = 128;
      }
    }
    else
    {
      uint64_t v6 = 0;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[20] = 0u;
      result[21] = 0u;
      result[22] = 0u;
      result[23] = 0u;
    }
    unint64_t v3 = (const double *)((char *)v3 + v6);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v10 = *(unsigned int *)(a1 + 80);
  if (v10)
  {
    unint64_t v11 = 0;
    int8x8_t v12 = &v16[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 32 * *(unsigned int *)(a1 + 76)];
    LODWORD(v13) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v15 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v11;
        do
        {
          *(unsigned char *)(v15 + v14) = v12[v14];
          ++v14;
          uint64_t v13 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v13 > (unint64_t)v14);
        unint64_t v10 = *(unsigned int *)(a1 + 80);
      }
      ++v11;
      v12 += 256;
    }
    while (v11 < v10);
  }
  return result;
}

__n128 *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int16x8_t a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (__n128 *)&v19[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v5 + 1]
                          + 32
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v5]];
    unsigned int v11 = *v7;
    if (*v7)
    {
      if (v11 < 0xF0)
      {
        if (v11 == 63)
        {
          a2 = *(int16x8_t *)v6;
          a3 = *(__n128 *)(v6 + 16);
          a4 = *(__n128 *)(v6 + 32);
          __n128 v12 = *(__n128 *)(v6 + 48);
          *uint64_t result = *(__n128 *)v6;
          result[1] = a4;
          result[4] = a3;
          result[5] = v12;
          uint64_t v9 = 64;
        }
        else if (v11 == 1)
        {
          a2 = vld1q_dup_s16((const __int16 *)v6);
          *uint64_t result = (__n128)a2;
          result[1] = (__n128)a2;
          result[4] = (__n128)a2;
          result[5] = (__n128)a2;
          uint64_t v9 = 2;
        }
        else
        {
          uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)result, 64, v6, v11, *(int8x8_t *)a2.i8, a3.n128_f64[0], (int8x8_t)a4.n128_u64[0]);
          uint64_t v9 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 64, v6, v11, v8);
        uint64_t v9 = 32;
      }
    }
    else
    {
      uint64_t v9 = 0;
      a2.i64[0] = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
    }
    v6 += v9;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 64;
    }
    while (v14 < v13);
  }
  return result;
}

void ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(const double **)(a1 + 40), *(unsigned char **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2);
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 32 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int32x4_t *)&v23[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v4 + 1]
                             + 64
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v4]];
    unsigned int v10 = *v6;
    if (*v6)
    {
      if (v10 < 0xF0)
      {
        if (v10 == 127)
        {
          a2 = *(int32x4_t *)v5;
          a3 = *(int32x4_t *)(v5 + 16);
          int32x4_t v11 = *(int32x4_t *)(v5 + 32);
          int32x4_t v12 = *(int32x4_t *)(v5 + 48);
          int32x4_t v13 = *(int32x4_t *)(v5 + 64);
          int32x4_t v14 = *(int32x4_t *)(v5 + 80);
          int32x4_t v15 = *(int32x4_t *)(v5 + 96);
          int32x4_t v16 = *(int32x4_t *)(v5 + 112);
          *uint64_t result = *(int32x4_t *)v5;
          result[1] = a3;
          result[2] = v13;
          result[3] = v14;
          result[8] = v11;
          result[9] = v12;
          result[10] = v15;
          result[11] = v16;
          uint64_t v8 = 128;
        }
        else if (v10 == 3)
        {
          a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
          *uint64_t result = a2;
          result[1] = a2;
          result[2] = a2;
          result[3] = a2;
          result[8] = a2;
          result[9] = a2;
          result[10] = a2;
          result[11] = a2;
          uint64_t v8 = 4;
        }
        else
        {
          uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)result, 128, v5, v10, a2, a3);
          uint64_t v8 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result->i32, 128, v5, v10, v7);
        uint64_t v8 = 64;
      }
    }
    else
    {
      uint64_t v8 = 0;
      a2 = 0uLL;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[10] = 0u;
      result[11] = 0u;
    }
    v5 += v8;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = &v23[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 128;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

__n128 *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int16x8_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(__n128 **)(a1 + 40);
  uint64_t v8 = *(unsigned char **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (__n128 *)&v19[128
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v6 + 1]
                          + 32
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v6]];
    unsigned int v12 = *v8;
    if (*v8)
    {
      if (v12 < 0xF0)
      {
        if (v12 == 63)
        {
          a2 = *(int16x8_t *)v7;
          a3 = v7[1];
          a4 = v7[2];
          a5 = v7[3];
          *uint64_t result = *v7;
          result[1] = a4;
          result[4] = a3;
          result[5] = a5;
          uint64_t v10 = 64;
        }
        else if (v12 == 1)
        {
          a2 = vld1q_dup_s16((const __int16 *)v7);
          *uint64_t result = (__n128)a2;
          result[1] = (__n128)a2;
          result[4] = (__n128)a2;
          result[5] = (__n128)a2;
          uint64_t v10 = 2;
        }
        else
        {
          uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)result, 64, (uint64_t)v7, v12, *(double *)a2.i64, a3.n128_f64[0], a4.n128_f64[0], (int8x8_t)a5.n128_u64[0]);
          uint64_t v10 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 64, (uint64_t)v7, v12, v9);
        uint64_t v10 = 32;
      }
    }
    else
    {
      uint64_t v10 = 0;
      a2.i64[0] = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
    }
    uint64_t v7 = (__n128 *)((char *)v7 + v10);
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    int32x4_t v15 = &v19[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 64;
    }
    while (v14 < v13);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = &v23[256
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 127)
        {
          long long v10 = *(_OWORD *)(v3 + 16);
          long long v11 = *(_OWORD *)(v3 + 32);
          long long v12 = *(_OWORD *)(v3 + 48);
          long long v13 = *(_OWORD *)(v3 + 64);
          long long v14 = *(_OWORD *)(v3 + 80);
          long long v15 = *(_OWORD *)(v3 + 96);
          long long v16 = *(_OWORD *)(v3 + 112);
          *(_OWORD *)uint64_t result = *(_OWORD *)v3;
          *((_OWORD *)result + 1) = v10;
          *((_OWORD *)result + 2) = v13;
          *((_OWORD *)result + 3) = v14;
          *((_OWORD *)result + 8) = v11;
          *((_OWORD *)result + 9) = v12;
          *((_OWORD *)result + 10) = v15;
          *((_OWORD *)result + 11) = v16;
          uint64_t v6 = 128;
        }
        else if (v8 == 3)
        {
          float32x4_t v9 = vld1q_dup_f32((const float *)v3);
          *(float32x4_t *)uint64_t result = v9;
          *((float32x4_t *)result + 1) = v9;
          *((float32x4_t *)result + 2) = v9;
          *((float32x4_t *)result + 3) = v9;
          *((float32x4_t *)result + 8) = v9;
          *((float32x4_t *)result + 9) = v9;
          *((float32x4_t *)result + 10) = v9;
          *((float32x4_t *)result + 11) = v9;
          uint64_t v6 = 4;
        }
        else
        {
          uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
          uint64_t v6 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 128, v3, v8, v5);
        uint64_t v6 = 64;
      }
    }
    else
    {
      uint64_t v6 = 0;
      *((_OWORD *)result + 2) = 0u;
      *((_OWORD *)result + 3) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 10) = 0u;
      *((_OWORD *)result + 11) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = &v23[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 128;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int8x16_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int8x16_t *)&v19[64
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,4u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 31)
        {
          uint64_t v10 = *(void *)(v3 + 8);
          uint64_t v11 = *(void *)(v3 + 16);
          uint64_t v12 = *(void *)(v3 + 24);
          result->i64[0] = *(void *)v3;
          result->i64[1] = v11;
          result[2].i64[0] = v10;
          result[2].i64[1] = v12;
          uint64_t v6 = 32;
        }
        else if (v8 == 96)
        {
          int8x16_t v9 = vld1q_dup_s8((const char *)v3);
          *uint64_t result = v9;
          result[2] = v9;
          uint64_t v6 = 1;
        }
        else
        {
          uint64_t result = (int8x16_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
          uint64_t v6 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int8x16_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 32, v3, v8, v5);
        uint64_t v6 = 16;
      }
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    long long v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48), *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[512 * (unint64_t)*(unsigned int *)(v1 + 72) + 32 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 512;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(const double **)(a1 + 40), *(unsigned char **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[256 * (unint64_t)*(unsigned int *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
  return result;
}

__n128 *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4)
{
  uint64_t v5 = 0;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (__n128 *)&v21[256
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v5 + 1]
                          + 16
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v5]];
    unsigned int v11 = *v7;
    if (*v7)
    {
      if (v11 < 0xF0)
      {
        if (v11 == 63)
        {
          int64x2_t v12 = *(int64x2_t *)v6;
          a3 = *(int64x2_t *)(v6 + 16);
          unint64_t v13 = (const double *)(v6 + 32);
          *(float64x2x2_t *)a4.n128_u64 = vld2q_f64(v13);
          *(int64x2_t *)uint64_t result = vzip1q_s64(*(int64x2_t *)v6, a3);
          a2 = (__n128)vzip2q_s64(v12, a3);
          result[4] = a2;
          result[8] = a4;
          result[12] = v14;
          uint64_t v9 = 64;
        }
        else if (v11 == 1)
        {
          a2 = (__n128)vld1q_dup_s16((const __int16 *)v6);
          *uint64_t result = a2;
          result[4] = a2;
          result[8] = a2;
          result[12] = a2;
          uint64_t v9 = 2;
        }
        else
        {
          uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int64x2_t *)result, 64, v6, v11, (int8x8_t)a2.n128_u64[0], *(double *)a3.i64, (int8x8_t)a4.n128_u64[0]);
          uint64_t v9 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__int16 *)result, 64, v6, v11, v8);
        uint64_t v9 = 32;
      }
    }
    else
    {
      uint64_t v9 = 0;
      result->n128_u64[0] = 0;
      result->n128_u64[1] = 0;
      result[4].n128_u64[0] = 0;
      result[4].n128_u64[1] = 0;
      result[8].n128_u64[0] = 0;
      result[8].n128_u64[1] = 0;
      result[12].n128_u64[0] = 0;
      result[12].n128_u64[1] = 0;
    }
    v6 += v9;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  unint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15)
  {
    unint64_t v16 = 0;
    uint64_t v17 = &v21[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v18) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v16;
        do
        {
          *(unsigned char *)(v20 + v19) = v17[v19];
          ++v19;
          uint64_t v18 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v18 > (unint64_t)v19);
        unint64_t v15 = *(unsigned int *)(a1 + 80);
      }
      ++v16;
      v17 += 64;
    }
    while (v16 < v15);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = &v10[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = *((unsigned char *)v6->f64 + v8);
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 16;
    }
    while (v5 < v4);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = &v23[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v4 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v4]];
    unsigned int v10 = *v6;
    if (*v6)
    {
      if (v10 < 0xF0)
      {
        if (v10 == 127)
        {
          a2 = *(int32x4_t *)v5;
          a3 = *(int32x4_t *)(v5 + 16);
          long long v11 = *(_OWORD *)(v5 + 32);
          long long v12 = *(_OWORD *)(v5 + 48);
          long long v13 = *(_OWORD *)(v5 + 80);
          long long v14 = *(_OWORD *)(v5 + 96);
          long long v15 = *(_OWORD *)(v5 + 112);
          long long v16 = *(_OWORD *)(v5 + 64);
          *(_OWORD *)uint64_t result = *(_OWORD *)v5;
          *((_OWORD *)result + 1) = v11;
          *((int32x4_t *)result + 8) = a3;
          *((_OWORD *)result + 9) = v12;
          *((_OWORD *)result + 16) = v16;
          *((_OWORD *)result + 17) = v14;
          *((_OWORD *)result + 24) = v13;
          *((_OWORD *)result + 25) = v15;
          uint64_t v8 = 128;
        }
        else if (v10 == 3)
        {
          a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
          *(int32x4_t *)uint64_t result = a2;
          *((int32x4_t *)result + 1) = a2;
          *((int32x4_t *)result + 8) = a2;
          *((int32x4_t *)result + 9) = a2;
          *((int32x4_t *)result + 16) = a2;
          *((int32x4_t *)result + 17) = a2;
          *((int32x4_t *)result + 24) = a2;
          *((int32x4_t *)result + 25) = a2;
          uint64_t v8 = 4;
        }
        else
        {
          uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)result, 128, v5, v10, a2, a3);
          uint64_t v8 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)result, 128, v5, v10, v7);
        uint64_t v8 = 64;
      }
    }
    else
    {
      uint64_t v8 = 0;
      a2 = 0uLL;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v5 += v8;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = &v23[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 128;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

__n128 *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int64x2_t a3, __n128 a4, __n128 a5)
{
  uint64_t v6 = 0;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned char **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (__n128 *)&v21[256
                          * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6 + 1]
                          + 16
                          * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v6]];
    unsigned int v12 = *v8;
    if (*v8)
    {
      if (v12 < 0xF0)
      {
        if (v12 == 63)
        {
          int64x2_t v13 = *(int64x2_t *)v7;
          a3 = *(int64x2_t *)(v7 + 16);
          long long v14 = (const double *)(v7 + 32);
          *(float64x2x2_t *)a4.n128_u64 = vld2q_f64(v14);
          *(int64x2_t *)uint64_t result = vzip1q_s64(*(int64x2_t *)v7, a3);
          a2 = (__n128)vzip2q_s64(v13, a3);
          result[4] = a2;
          result[8] = a4;
          result[12] = a5;
          uint64_t v10 = 64;
        }
        else if (v12 == 1)
        {
          a2 = (__n128)vld1q_dup_s16((const __int16 *)v7);
          *uint64_t result = a2;
          result[4] = a2;
          result[8] = a2;
          result[12] = a2;
          uint64_t v10 = 2;
        }
        else
        {
          uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int64x2_t *)result, 64, v7, v12, a2.n128_f64[0], *(double *)a3.i64, a4.n128_f64[0], (int8x8_t)a5.n128_u64[0]);
          uint64_t v10 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (__n128 *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__int16 *)result, 64, v7, v12, v9);
        uint64_t v10 = 32;
      }
    }
    else
    {
      uint64_t v10 = 0;
      result->n128_u64[0] = 0;
      result->n128_u64[1] = 0;
      result[4].n128_u64[0] = 0;
      result[4].n128_u64[1] = 0;
      result[8].n128_u64[0] = 0;
      result[8].n128_u64[1] = 0;
      result[12].n128_u64[0] = 0;
      result[12].n128_u64[1] = 0;
    }
    v7 += v10;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  unint64_t v15 = *(unsigned int *)(a1 + 80);
  if (v15)
  {
    unint64_t v16 = 0;
    unint64_t v17 = &v21[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v18) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v16;
        do
        {
          *(unsigned char *)(v20 + v19) = v17[v19];
          ++v19;
          uint64_t v18 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v18 > (unint64_t)v19);
        unint64_t v15 = *(unsigned int *)(a1 + 80);
      }
      ++v16;
      v17 += 64;
    }
    while (v16 < v15);
  }
  return result;
}

unsigned char *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = &v23[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                + 32
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 127)
        {
          long long v10 = *(_OWORD *)(v3 + 16);
          long long v11 = *(_OWORD *)(v3 + 32);
          long long v12 = *(_OWORD *)(v3 + 48);
          long long v13 = *(_OWORD *)(v3 + 80);
          long long v14 = *(_OWORD *)(v3 + 96);
          long long v15 = *(_OWORD *)(v3 + 112);
          long long v16 = *(_OWORD *)(v3 + 64);
          *(_OWORD *)uint64_t result = *(_OWORD *)v3;
          *((_OWORD *)result + 1) = v11;
          *((_OWORD *)result + 8) = v10;
          *((_OWORD *)result + 9) = v12;
          *((_OWORD *)result + 16) = v16;
          *((_OWORD *)result + 17) = v14;
          *((_OWORD *)result + 24) = v13;
          *((_OWORD *)result + 25) = v15;
          uint64_t v6 = 128;
        }
        else if (v8 == 3)
        {
          float32x4_t v9 = vld1q_dup_f32((const float *)v3);
          *(float32x4_t *)uint64_t result = v9;
          *((float32x4_t *)result + 1) = v9;
          *((float32x4_t *)result + 8) = v9;
          *((float32x4_t *)result + 9) = v9;
          *((float32x4_t *)result + 16) = v9;
          *((float32x4_t *)result + 17) = v9;
          *((float32x4_t *)result + 24) = v9;
          *((float32x4_t *)result + 25) = v9;
          uint64_t v6 = 4;
        }
        else
        {
          uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)result, 128, v3, v8);
          uint64_t v6 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (unsigned char *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 128, v3, v8, v5);
        uint64_t v6 = 64;
      }
    }
    else
    {
      uint64_t v6 = 0;
      *(_OWORD *)uint64_t result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 8) = 0u;
      *((_OWORD *)result + 9) = 0u;
      *((_OWORD *)result + 16) = 0u;
      *((_OWORD *)result + 17) = 0u;
      *((_OWORD *)result + 24) = 0u;
      *((_OWORD *)result + 25) = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = &v23[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 128;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

void ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int32x2_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t v7 = (int32x2_t *)&v20[128
                         * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2 + 1]
                         + 8
                         * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,2u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 31)
        {
          int32x2_t v10 = *v3;
          int32x2_t v11 = v3[1];
          int32x2_t v12 = v3[2];
          int32x2_t v13 = v3[3];
          *uint64_t v7 = vzip1_s32(*v3, v11);
          v7[4] = vzip2_s32(v10, v11);
          v7[8] = vzip1_s32(v12, v13);
          v7[12] = vzip2_s32(v12, v13);
          uint64_t v6 = 32;
        }
        else if (v8 == 96)
        {
          int8x8_t v9 = vdup_lane_s8((int8x8_t)*v3, 0);
          *uint64_t v7 = (int32x2_t)v9;
          v7[4] = (int32x2_t)v9;
          v7[8] = (int32x2_t)v9;
          v7[12] = (int32x2_t)v9;
          uint64_t v6 = 1;
        }
        else
        {
          uint64_t v6 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v7, 32, (uint64_t)v3, v8);
        }
      }
      else
      {
        AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v7, 32, (uint64_t)v3, v8, v5);
        uint64_t v6 = 16;
      }
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t v7 = 0;
      v7[4] = 0;
      v7[8] = 0;
      v7[12] = 0;
    }
    unint64_t v3 = (int32x2_t *)((char *)v3 + v6);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14)
  {
    unint64_t v15 = 0;
    long long v16 = &v20[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v17) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v15;
        do
        {
          *(unsigned char *)(v19 + v18) = v16[v18];
          ++v18;
          uint64_t v17 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v17 > (unint64_t)v18);
        unint64_t v14 = *(unsigned int *)(a1 + 80);
      }
      ++v15;
      v16 += 32;
    }
    while (v15 < v14);
  }
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5->i8[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (32 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[16 * (unint64_t)*(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = *((unsigned char *)v5 + v7);
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v11, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v11, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v11, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v11, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v13, *(int32x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v13, *(int32x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v13, *(int32x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v6 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v6]];
    unsigned int v11 = *v8;
    if (v11 == 63)
    {
      int32x4_t v12 = *(int32x4_t *)v7;
      a3 = *(int32x4_t *)(v7 + 16);
      a4 = *(int32x4_t *)(v7 + 32);
      a5 = *(int32x4_t *)(v7 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v7, a4);
      result[2] = vuzp2q_s32(v12, a4);
      result[4] = vuzp1q_s32(a3, a5);
      a2 = vuzp2q_s32(a3, a5);
      result[6] = a2;
      uint64_t v9 = 64;
    }
    else if (v11 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v7);
      *uint64_t result = a2;
      result[2] = a2;
      result[4] = a2;
      result[6] = a2;
      uint64_t v9 = 2;
    }
    else if (*v8)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v7, v11, *(double *)a2.i64, *(double *)a3.i64, *(double *)a4.i64, *(int8x8_t *)a5.i8);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v7 += v9;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v6 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v6]];
    unsigned int v11 = *v8;
    if (v11 == 63)
    {
      int32x4_t v12 = *(int32x4_t *)v7;
      a3 = *(int32x4_t *)(v7 + 16);
      a4 = *(int32x4_t *)(v7 + 32);
      a5 = *(int32x4_t *)(v7 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v7, a4);
      result[2] = vuzp2q_s32(v12, a4);
      result[4] = vuzp1q_s32(a3, a5);
      a2 = vuzp2q_s32(a3, a5);
      result[6] = a2;
      uint64_t v9 = 64;
    }
    else if (v11 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v7);
      *uint64_t result = a2;
      result[2] = a2;
      result[4] = a2;
      result[6] = a2;
      uint64_t v9 = 2;
    }
    else if (*v8)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v7, v11, *(double *)a2.i64, *(double *)a3.i64, *(double *)a4.i64, *(int8x8_t *)a5.i8);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v7 += v9;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v11, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v11, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v11, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3);
  unint64_t v5 = *(unsigned int *)(a1 + 80);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &v11[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v8) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v6;
        do
        {
          *(unsigned char *)(v10 + v9) = v7[v9];
          ++v9;
          uint64_t v8 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v8 > (unint64_t)v9);
        unint64_t v5 = *(unsigned int *)(a1 + 80);
      }
      ++v6;
      v7 += 64;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, double a3, int8x8_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, double a3, int8x8_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2, double a3, int8x8_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5]];
    unsigned int v10 = *v7;
    if (v10 == 63)
    {
      int32x4_t v11 = *(int32x4_t *)v6;
      a3 = *(int32x4_t *)(v6 + 16);
      a4 = *(int32x4_t *)(v6 + 32);
      int32x4_t v12 = *(int32x4_t *)(v6 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v6, a4);
      result[2] = vuzp2q_s32(v11, a4);
      result[4] = vuzp1q_s32(a3, v12);
      a2 = vuzp2q_s32(a3, v12);
      result[6] = a2;
      uint64_t v8 = 64;
    }
    else if (v10 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v6);
      *uint64_t result = a2;
      result[2] = a2;
      result[4] = a2;
      result[6] = a2;
      uint64_t v8 = 2;
    }
    else if (*v7)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v6, v10, *(int8x8_t *)a2.i8, *(double *)a3.i64, *(int8x8_t *)a4.i8);
      uint64_t v8 = (uint64_t)result;
    }
    else
    {
      uint64_t v8 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v6 += v8;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v5]];
    unsigned int v10 = *v7;
    if (v10 == 63)
    {
      int32x4_t v11 = *(int32x4_t *)v6;
      a3 = *(int32x4_t *)(v6 + 16);
      a4 = *(int32x4_t *)(v6 + 32);
      int32x4_t v12 = *(int32x4_t *)(v6 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v6, a4);
      result[2] = vuzp2q_s32(v11, a4);
      result[4] = vuzp1q_s32(a3, v12);
      a2 = vuzp2q_s32(a3, v12);
      result[6] = a2;
      uint64_t v8 = 64;
    }
    else if (v10 == 1)
    {
      a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v6);
      *uint64_t result = a2;
      result[2] = a2;
      result[4] = a2;
      result[6] = a2;
      uint64_t v8 = 2;
    }
    else if (*v7)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v6, v10, *(int8x8_t *)a2.i8, *(double *)a3.i64, *(int8x8_t *)a4.i8);
      uint64_t v8 = (uint64_t)result;
    }
    else
    {
      uint64_t v8 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v6 += v8;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(int16x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock((uint64_t)v9, *(int16x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock((uint64_t)v9, *(int16x4_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

void *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v19[64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v2 + 1]
                + 8
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t result = v12;
      result[2] = v12;
      result[4] = v12;
      result[6] = v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int16x4_t v5 = (int16x4_t)*v3;
      int16x4_t v6 = (int16x4_t)v3[1];
      int16x4_t v7 = (int16x4_t)v3[2];
      int16x4_t v8 = (int16x4_t)v3[3];
      *uint64_t result = vuzp1_s16((int16x4_t)*v3, v7);
      result[2] = vuzp2_s16(v5, v7);
      result[4] = vuzp1_s16(v6, v8);
      result[6] = vuzp2_s16(v6, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t result = (void *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 16, (uint64_t)v3, v11);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t result = 0;
      result[2] = 0;
      result[4] = 0;
      result[6] = 0;
    }
    unint64_t v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v14 = 0;
    unint64_t v15 = &v19[16 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v16 = 1;
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          unsigned int v16 = *(_DWORD *)(a1 + 84);
          ++v17;
        }
        while (v16 > v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 16;
    }
    while (v14 < v13);
  }
  return result;
}

void *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v19[64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v2 + 1]
                + 8
                * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)1,1u>::kSubblockPositions[v2]];
    unsigned int v11 = *v4;
    if (v11 == 96)
    {
      int8x8_t v12 = vdup_lane_s8(*v3, 0);
      *uint64_t result = v12;
      result[2] = v12;
      result[4] = v12;
      result[6] = v12;
      uint64_t v9 = 1;
    }
    else if (v11 == 31)
    {
      int16x4_t v5 = (int16x4_t)*v3;
      int16x4_t v6 = (int16x4_t)v3[1];
      int16x4_t v7 = (int16x4_t)v3[2];
      int16x4_t v8 = (int16x4_t)v3[3];
      *uint64_t result = vuzp1_s16((int16x4_t)*v3, v7);
      result[2] = vuzp2_s16(v5, v7);
      result[4] = vuzp1_s16(v6, v8);
      result[6] = vuzp2_s16(v6, v8);
      uint64_t v9 = 32;
    }
    else if (*v4)
    {
      uint64_t result = (void *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 16, (uint64_t)v3, v11);
      uint64_t v9 = (uint64_t)result;
    }
    else
    {
      uint64_t v9 = 0;
      *uint64_t result = 0;
      result[2] = 0;
      result[4] = 0;
      result[6] = 0;
    }
    unint64_t v3 = (int8x8_t *)((char *)v3 + v9);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v14 = 0;
    unint64_t v15 = &v19[16 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v16 = 1;
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          unsigned int v16 = *(_DWORD *)(a1 + 84);
          ++v17;
        }
        while (v16 > v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 16;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    unint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    unint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    unint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v17[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = &v17[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v14) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v12;
        do
        {
          *(unsigned char *)(v16 + v15) = v13[v15];
          ++v15;
          uint64_t v14 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v14 > (unint64_t)v15);
        unint64_t v11 = *(unsigned int *)(a1 + 80);
      }
      ++v12;
      v13 += 64;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v17[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = &v17[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v14) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v12;
        do
        {
          *(unsigned char *)(v16 + v15) = v13[v15];
          ++v15;
          uint64_t v14 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v14 > (unint64_t)v15);
        unint64_t v11 = *(unsigned int *)(a1 + 80);
      }
      ++v12;
      v13 += 64;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v9 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v17[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = &v17[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v14) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v12;
        do
        {
          *(unsigned char *)(v16 + v15) = v13[v15];
          ++v15;
          uint64_t v14 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v14 > (unint64_t)v15);
        unint64_t v11 = *(unsigned int *)(a1 + 80);
      }
      ++v12;
      v13 += 64;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v9 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v17[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = &v17[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v14) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v12;
        do
        {
          *(unsigned char *)(v16 + v15) = v13[v15];
          ++v15;
          uint64_t v14 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v14 > (unint64_t)v15);
        unint64_t v11 = *(unsigned int *)(a1 + 80);
      }
      ++v12;
      v13 += 64;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v19 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v10 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v18[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v10, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v12 = *(unsigned int *)(a1 + 80);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = &v18[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v15) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v13;
        do
        {
          *(unsigned char *)(v17 + v16) = v14[v16];
          ++v16;
          uint64_t v15 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v15 > (unint64_t)v16);
        unint64_t v12 = *(unsigned int *)(a1 + 80);
      }
      ++v13;
      v14 += 64;
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v17[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = &v17[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v14) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v12;
        do
        {
          *(unsigned char *)(v16 + v15) = v13[v15];
          ++v15;
          uint64_t v14 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v14 > (unint64_t)v15);
        unint64_t v11 = *(unsigned int *)(a1 + 80);
      }
      ++v12;
      v13 += 64;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, double a2, double a3, double a4, int8x8_t a5)
{
  uint64_t v6 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int16x4_t v7 = *(int32x4_t **)(a1 + 40);
  int16x4_t v8 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    int v9 = *v8++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&v17[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v6]], 64, v7, v9, a2, a3, a4, a5);
    int16x4_t v7 = (int32x4_t *)((char *)v7 + result);
    v6 += 2;
  }
  while (v6 != 64);
  unint64_t v11 = *(unsigned int *)(a1 + 80);
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = &v17[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v14) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v12;
        do
        {
          *(unsigned char *)(v16 + v15) = v13[v15];
          ++v15;
          uint64_t v14 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v14 > (unint64_t)v15);
        unint64_t v11 = *(unsigned int *)(a1 + 80);
      }
      ++v12;
      v13 += 64;
    }
    while (v12 < v11);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int16x4_t **)(a1 + 40);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v6 = *v4++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v14[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v6, v5);
    unint64_t v3 = (int16x4_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  unint64_t v8 = *(unsigned int *)(a1 + 80);
  if (v8 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v9 = 0;
    unsigned int v10 = &v14[32 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v11 = 1;
    do
    {
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v9;
        do
        {
          *(unsigned char *)(v13 + v12) = v10[v12];
          unsigned int v11 = *(_DWORD *)(a1 + 84);
          ++v12;
        }
        while (v11 > v12);
        unint64_t v8 = *(unsigned int *)(a1 + 80);
      }
      ++v9;
      v10 += 32;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int16x4_t **)(a1 + 40);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v6 = *v4++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v14[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v6, v5);
    unint64_t v3 = (int16x4_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  unint64_t v8 = *(unsigned int *)(a1 + 80);
  if (v8 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v9 = 0;
    unsigned int v10 = &v14[32 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v11 = 1;
    do
    {
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v9;
        do
        {
          *(unsigned char *)(v13 + v12) = v10[v12];
          unsigned int v11 = *(_DWORD *)(a1 + 84);
          ++v12;
        }
        while (v11 > v12);
        unint64_t v8 = *(unsigned int *)(a1 + 80);
      }
      ++v9;
      v10 += 32;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int16x4_t **)(a1 + 40);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    unsigned int v6 = *v4++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v14[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v6, v5);
    unint64_t v3 = (int16x4_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  unint64_t v8 = *(unsigned int *)(a1 + 80);
  if (v8 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v9 = 0;
    unsigned int v10 = &v14[32 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v11 = 1;
    do
    {
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v9;
        do
        {
          *(unsigned char *)(v13 + v12) = v10[v12];
          unsigned int v11 = *(_DWORD *)(a1 + 84);
          ++v12;
        }
        while (v11 > v12);
        unint64_t v8 = *(unsigned int *)(a1 + 80);
      }
      ++v9;
      v10 += 32;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v5 = *v4++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&v13[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v5);
    unint64_t v3 = (int8x8_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v8 = 0;
    unint64_t v9 = &v13[32 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v10 = 1;
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          unsigned int v10 = *(_DWORD *)(a1 + 84);
          ++v11;
        }
        while (v10 > v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int8x8_t **)(a1 + 40);
  unint64_t v4 = *(unsigned __int8 **)(a1 + 48);
  do
  {
    unsigned int v5 = *v4++;
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&v13[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v2]], 32, v3, v5);
    unint64_t v3 = (int8x8_t *)((char *)v3 + result);
    v2 += 2;
  }
  while (v2 != 64);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v8 = 0;
    unint64_t v9 = &v13[32 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v10 = 1;
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          unsigned int v10 = *(_DWORD *)(a1 + 84);
          ++v11;
        }
        while (v10 > v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t agxsTwiddleAddressPVRTC2<false,(TwiddleOrder)1>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result && a2)
  {
    unint64_t v10 = (a9 + 7) >> 3;
    unsigned int v11 = (a10 + 3) >> 2;
    unint64_t v12 = ((a9 + 7) >> 4) * (unint64_t)v11;
    uint64_t v13 = 8 * v12;
    uint64_t v14 = 16 * v12;
    if (v10 <= v11) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v10 <= v11) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v13;
    }
    if (v10 <= v11) {
      unint64_t v17 = (a9 + 7) >> 3;
    }
    else {
      unint64_t v17 = v10 >> 1;
    }
    unint64_t v18 = 32 - __clz(v17 - 1);
    if (v17 < 2) {
      unint64_t v18 = 0;
    }
    unsigned int v19 = 32 - __clz(v11 - 1);
    if ((a10 + 3) >= 8) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = 0;
    }
    if (v20 < v18) {
      LOBYTE(v18) = v20;
    }
    unint64_t v21 = 8 * v17 * (unint64_t)v11;
    if (v21)
    {
      unint64_t v22 = 0;
      uint64_t v23 = 8 * ~(-1 << (2 * v18));
      uint64_t v24 = v23 & 0x2AAAAAAAAAAAAAA8;
      uint64_t v25 = v23 & 0x5555555555555555;
      uint64_t v26 = ~v23;
      do
      {
        *(void *)(a2 + (v22 & v26 | (2 * (v24 & v22)) | ((v25 & v22) >> 1))) = *(void *)(result + v22);
        v22 += 8;
      }
      while (v22 < v21);
      if (v10 > v11)
      {
        unint64_t v27 = 0;
        uint64_t v28 = result + v16;
        do
        {
          *(void *)(a2 + v15 + (v27 & v26 | (2 * (v24 & v27)) | ((v25 & v27) >> 1))) = *(void *)(v28 + v27);
          v27 += 8;
        }
        while (v27 < v21);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v240 = a9;
        float64x2_t v241 = v13;
        uint64_t v242 = v47;
        do
        {
          float64x2_t v243 = (long long *)(result + ((v242 + v54) << 7));
          long long v244 = *v243;
          long long v245 = v243[1];
          long long v246 = v243[3];
          v241[2] = v243[2];
          v241[3] = v246;
          *float64x2_t v241 = v244;
          v241[1] = v245;
          long long v247 = v243[4];
          long long v248 = v243[5];
          long long v249 = v243[7];
          v241[6] = v243[6];
          v241[7] = v249;
          v241[4] = v247;
          v241[5] = v248;
          uint64_t v242 = (v242 - v29) & v29;
          v241 += 8;
          --v240;
        }
        while (v240);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v275 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v278 = a8 >> v66;
    unsigned int v280 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v276 = a10 + a8;
    unsigned int v272 = (v69 - 1 + a10 + a8) >> v66;
    char v274 = v66;
    if (a8 >> v66 >= v272) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v294 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v280 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v288 = a7 >> v67;
    unsigned int v292 = (v77 + a9 + a7) >> v67;
    if (result >= v292) {
      return result;
    }
    unsigned int v271 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v290 = v77 & v294;
    int v267 = v76 & v276;
    uint64_t v269 = v76 & a8;
    unsigned int v85 = v278;
LABEL_89:
    unsigned int v86 = v85 << v274;
    unsigned int v87 = v85 - v278;
    int v286 = v85 * v271;
    unsigned int v282 = v85 + 1;
    BOOL v88 = v276 >= (v85 + 1) << v274;
    unsigned int v89 = v280;
    if (!v88) {
      unsigned int v89 = v267;
    }
    int v90 = v280 - v269;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v274;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v269;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v284 = (v92 + v91 - v269) * a11;
    unsigned int v94 = v288;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      int v98 = a9;
      if (v294 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      int v99 = 1 << v67;
      if (v294 < v97 << v67) {
        int v99 = v290;
      }
      unsigned int v100 = v96 >= v95 ? 0 : v84;
      int v101 = v96 >= v95 ? v99 : v98;
      if (v83 | v81) {
        break;
      }
      uint64_t v119 = 0;
      uint64_t v103 = 0;
      uint64_t v110 = 0;
      uint64_t v126 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v292)
      {
        unsigned int v85 = v282;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v282 == v272) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v102 = 0;
    uint64_t v103 = 0;
    int v104 = 1;
    BOOL v105 = v81 != 0;
    BOOL v106 = v83 != 0;
    unsigned int v107 = v81;
    unsigned int v108 = v83;
    do
    {
      --v107;
      if (v105) {
        v103 |= (unint64_t)(v104 & ~(-1 << v81)) << v102++;
      }
      else {
        unsigned int v107 = 0;
      }
      --v108;
      if (!v106) {
        unsigned int v108 = 0;
      }
      v104 *= 2;
      unsigned int v102 = (__PAIR64__(v102, v106) - 1) >> 32;
      BOOL v106 = v108 != 0;
      BOOL v105 = v107 != 0;
    }
    while (v108 | v107);
    int v109 = 0;
    uint64_t v110 = 0;
    int v111 = 1;
    BOOL v112 = v81 != 0;
    BOOL v113 = v83 != 0;
    unsigned int v114 = v81;
    unsigned int v115 = v83;
    do
    {
      int v116 = v112;
      if (v116) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      int v117 = v109 + v116;
      if (v113) {
        --v115;
      }
      else {
        unsigned int v115 = 0;
      }
      if (v113) {
        v110 |= (unint64_t)(v111 & ~(-1 << v83)) << v117++;
      }
      v111 *= 2;
      int v109 = v117 - 1;
      BOOL v113 = v115 != 0;
      BOOL v112 = v114 != 0;
    }
    while (v115 | v114);
    unsigned int v118 = 0;
    uint64_t v119 = 0;
    int v120 = 1;
    BOOL v121 = v81 != 0;
    BOOL v122 = v83 != 0;
    unsigned int v123 = v81;
    unsigned int v124 = v83;
    do
    {
      --v123;
      if (v121)
      {
        v119 |= (unint64_t)(v120 & v100) << v118;
        unsigned int v125 = v118 + 1;
      }
      else
      {
        unsigned int v123 = 0;
        unsigned int v125 = v118;
      }
      --v124;
      if (!v122) {
        unsigned int v124 = 0;
      }
      v120 *= 2;
      unsigned int v118 = (__PAIR64__(v125, v122) - 1) >> 32;
      BOOL v122 = v124 != 0;
      BOOL v121 = v123 != 0;
    }
    while (v124 | v123);
    LODWORD(result) = 0;
    uint64_t v126 = 0;
    int v127 = 1;
    BOOL v128 = v81 != 0;
    BOOL v129 = v83 != 0;
    unsigned int v130 = v81;
    unsigned int v131 = v83;
    do
    {
      --v130;
      int v132 = v128;
      if (!v132) {
        unsigned int v130 = 0;
      }
      int v133 = result + v132;
      --v131;
      if (v129) {
        v126 |= (unint64_t)(v127 & v92) << v133++;
      }
      else {
        unsigned int v131 = 0;
      }
      v127 *= 2;
      uint64_t result = (v133 - 1);
      BOOL v129 = v131 != 0;
      BOOL v128 = v130 != 0;
    }
    while (v131 | v130);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v101)
    {
      int v134 = 0;
      unsigned int v135 = (_OWORD *)((char *)&a2[8 * (v100 + ((v94 - v288) << v67) - v84)] + v284);
      uint64_t v136 = (v94 + v286) * a12[3] * *((unsigned __int8 *)a12 + 9) + v275;
      do
      {
        int v137 = v101;
        unsigned int v138 = v135;
        uint64_t v139 = v119;
        do
        {
          uint64_t v140 = (long long *)(v136 + ((v139 + v126) << 7));
          long long v141 = *v140;
          long long v142 = v140[1];
          long long v143 = v140[3];
          v138[2] = v140[2];
          v138[3] = v143;
          *unsigned int v138 = v141;
          v138[1] = v142;
          long long v144 = v140[4];
          long long v145 = v140[5];
          long long v146 = v140[7];
          v138[6] = v140[6];
          v138[7] = v146;
          v138[4] = v144;
          v138[5] = v145;
          uint64_t v139 = (v139 - v103) & v103;
          v138 += 8;
          --v137;
        }
        while (v137);
        uint64_t result = v126 - v110;
        uint64_t v126 = (v126 - v110) & v110;
        unsigned int v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v297);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  float64x2_t v261 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v147 = a6 >> v20;
    unsigned int v148 = 1 << v21;
    unsigned int v149 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v149 = 0;
    }
    BOOL v150 = v148 >= a5;
    if (v148 < a5) {
      char v151 = v21 + v20 + v149;
    }
    else {
      char v151 = *((unsigned char *)a12 + 12);
    }
    if (v150) {
      LOBYTE(v152) = *((unsigned char *)a12 + 13);
    }
    else {
      int v152 = -v149;
    }
    if (!v147) {
      char v21 = v151;
    }
    char v255 = v21;
    if (v147) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v152;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v255 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v153 = v275;
  unsigned int v155 = a8;
  int v154 = a10;
  unsigned int v254 = v303;
  if (v303)
  {
    unsigned int v156 = 1 << v23;
    unsigned int v157 = v304;
    int v285 = v301;
    BOOL v281 = v301 != 0;
    int v283 = v302;
    BOOL v279 = v302 != 0;
    int v253 = 1 << v255;
    if (1 << v255 >= a5) {
      unsigned int v158 = a5;
    }
    else {
      unsigned int v158 = 1 << v255;
    }
    if (v156 >= a6) {
      unsigned int v159 = a6;
    }
    else {
      unsigned int v159 = 1 << v23;
    }
    unsigned int v160 = 32 - __clz(v158 - 1);
    if (v158 >= 2) {
      unsigned int v161 = v160;
    }
    else {
      unsigned int v161 = 0;
    }
    unsigned int v162 = 32 - __clz(v159 - 1);
    if (v159 < 2) {
      unsigned int v162 = 0;
    }
    BOOL v289 = v161 != 0;
    unsigned int v291 = v162;
    BOOL v287 = v162 != 0;
    if (v304)
    {
      unsigned int v163 = 0;
      int v164 = 0;
      unsigned int v252 = a7 >> v255;
      unsigned int v273 = a8 >> v23;
      int v296 = v305;
      int v293 = v302 | v301;
      unsigned int v251 = a9 + a7;
      int v250 = v298;
      int v165 = v300;
      int v295 = v299;
      int v268 = (v156 - 1) & a8;
      int v270 = (v156 - 1) & (a10 + a8);
      unsigned int v266 = v156 - v268;
      int v166 = ~(-1 << v161);
      int v264 = v300;
      int v265 = v291 | v161;
      unsigned int v277 = v161;
      int v257 = 1 << v23;
      char v258 = v23;
      do
      {
        int v256 = v164;
        int v167 = 0;
        int v168 = 0;
        unsigned int v169 = (v163 + v252) << v255;
        int v170 = a9;
        if (v251 >= (v163 + v252 + 1) << v255) {
          int v170 = v253 - ((v253 - 1) & a7);
        }
        int v171 = 1 << v255;
        if (v251 < (v163 + v252 + 1) << v255) {
          int v171 = (v253 - 1) & (a9 + a7);
        }
        int v172 = v250 + v163;
        int v173 = v163 << v255;
        if (v169 >= v19) {
          int v174 = v171;
        }
        else {
          int v174 = v170;
        }
        if (v169 >= v19) {
          int v175 = 0;
        }
        else {
          int v175 = (v253 - 1) & a7;
        }
        long long v260 = &v261[8 * (unint64_t)(v175 + v173)];
        do
        {
          int v176 = v295 + v167;
          if (v296)
          {
            int v177 = v293;
            if (v293)
            {
              int v178 = 0;
              int v177 = 0;
              int v179 = 1;
              BOOL v180 = v279;
              BOOL v181 = v281;
              int v183 = v283;
              int v182 = v285;
              do
              {
                --v182;
                if (v181) {
                  v177 |= (v179 & v172) << v178;
                }
                else {
                  int v182 = 0;
                }
                if (v181) {
                  ++v178;
                }
                --v183;
                if (v180) {
                  v177 |= (v179 & v176) << v178;
                }
                else {
                  int v183 = 0;
                }
                if (v180) {
                  ++v178;
                }
                v179 *= 2;
                --v178;
                BOOL v180 = v183 != 0;
                BOOL v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          else
          {
            int v177 = v293;
            if (v293)
            {
              int v184 = 0;
              int v177 = 0;
              int v185 = 1;
              BOOL v187 = v279;
              BOOL v186 = v281;
              int v188 = v283;
              int v189 = v285;
              do
              {
                --v188;
                if (v187) {
                  v177 |= (v185 & v176) << v184;
                }
                else {
                  int v188 = 0;
                }
                if (v187) {
                  ++v184;
                }
                --v189;
                if (v186) {
                  v177 |= (v185 & v172) << v184;
                }
                else {
                  int v189 = 0;
                }
                if (v186) {
                  ++v184;
                }
                v185 *= 2;
                --v184;
                BOOL v186 = v189 != 0;
                BOOL v187 = v188 != 0;
              }
              while (v189 | v188);
            }
          }
          int v190 = *(_DWORD *)(v153 + 4 * ((v177 + v165) | ((v177 + v165) >> 8 << 9)));
          if (v190 < 0)
          {
            unint64_t v191 = v153 - *((void *)a13 + 3) + ((unint64_t)(v190 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v192 = a13[2];
            if (result > v192)
            {
              uint64_t result = get_level_offset_within_tail(result, v192, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v161 = v277;
              unsigned int v156 = v257;
              char v23 = v258;
              uint64_t v17 = a11;
              unsigned int v155 = a8;
              int v154 = a10;
              uint64_t v153 = v275;
              v191 += result;
            }
            unsigned int v193 = (v167 + v273) << v23;
            unsigned int v194 = v266;
            if (a10 + a8 >= (v167 + v273 + 1) << v23)
            {
              unsigned int v195 = v156;
            }
            else
            {
              unsigned int v194 = v154;
              unsigned int v195 = v270;
            }
            if (v193 >= v155) {
              int v196 = 0;
            }
            else {
              int v196 = v268;
            }
            if (v193 >= v155) {
              unsigned int v194 = v195;
            }
            if (!v265)
            {
              uint64_t v214 = 0;
              uint64_t v198 = 0;
              uint64_t v205 = 0;
              uint64_t v221 = 0;
              int v165 = v264;
              if (!v194) {
                goto LABEL_191;
              }
LABEL_263:
              if (v174)
              {
                int v228 = 0;
                long long v229 = (_OWORD *)((char *)v260 + (v196 + (v167 << v23)) * v17);
                do
                {
                  int v230 = v174;
                  float64x2_t v231 = v229;
                  uint64_t v232 = v214;
                  do
                  {
                    uint64_t result = v191 + ((v232 + v221) << 7);
                    long long v233 = *(_OWORD *)result;
                    long long v234 = *(_OWORD *)(result + 16);
                    long long v235 = *(_OWORD *)(result + 48);
                    v231[2] = *(_OWORD *)(result + 32);
                    v231[3] = v235;
                    *float64x2_t v231 = v233;
                    v231[1] = v234;
                    long long v236 = *(_OWORD *)(result + 64);
                    long long v237 = *(_OWORD *)(result + 80);
                    long long v238 = *(_OWORD *)(result + 112);
                    v231[6] = *(_OWORD *)(result + 96);
                    v231[7] = v238;
                    v231[4] = v236;
                    v231[5] = v237;
                    uint64_t v232 = (v232 - v198) & v198;
                    v231 += 8;
                    --v230;
                  }
                  while (v230);
                  uint64_t v221 = (v221 - v205) & v205;
                  long long v229 = (_OWORD *)((char *)v229 + v17);
                  ++v228;
                }
                while (v228 != v194);
              }
              goto LABEL_191;
            }
            unsigned int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v287;
            BOOL v201 = v289;
            unsigned int v202 = v161;
            unsigned int v203 = v291;
            do
            {
              --v202;
              if (v201) {
                v198 |= (unint64_t)(v199 & v166) << v197++;
              }
              else {
                unsigned int v202 = 0;
              }
              --v203;
              if (!v200) {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              unsigned int v197 = (__PAIR64__(v197, v200) - 1) >> 32;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            int v204 = 0;
            uint64_t v205 = 0;
            int v206 = 1;
            BOOL v207 = v287;
            BOOL v208 = v289;
            unsigned int v209 = v161;
            unsigned int v210 = v291;
            do
            {
              --v209;
              int v211 = v208;
              if (!v211) {
                unsigned int v209 = 0;
              }
              int v212 = v204 + v211;
              --v210;
              if (v207) {
                v205 |= (unint64_t)(v206 & ~(-1 << v291)) << v212++;
              }
              else {
                unsigned int v210 = 0;
              }
              v206 *= 2;
              int v204 = v212 - 1;
              BOOL v207 = v210 != 0;
              BOOL v208 = v209 != 0;
            }
            while (v210 | v209);
            unsigned int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            BOOL v217 = v287;
            BOOL v216 = v289;
            unsigned int v218 = v161;
            unsigned int v219 = v291;
            do
            {
              --v218;
              if (v216) {
                v214 |= (unint64_t)(v215 & v175) << v213++;
              }
              else {
                unsigned int v218 = 0;
              }
              --v219;
              if (!v217) {
                unsigned int v219 = 0;
              }
              v215 *= 2;
              unsigned int v213 = (__PAIR64__(v213, v217) - 1) >> 32;
              BOOL v217 = v219 != 0;
              BOOL v216 = v218 != 0;
            }
            while (v219 | v218);
            int v220 = 0;
            uint64_t v221 = 0;
            int v222 = 1;
            LOBYTE(result) = v287;
            BOOL v223 = v289;
            unsigned int v224 = v161;
            unsigned int v225 = v291;
            do
            {
              --v224;
              int v226 = v223;
              if (!v226) {
                unsigned int v224 = 0;
              }
              int v227 = v220 + v226;
              --v225;
              if (result) {
                v221 |= (unint64_t)(v222 & v196) << v227++;
              }
              else {
                unsigned int v225 = 0;
              }
              v222 *= 2;
              int v220 = v227 - 1;
              uint64_t result = v225 != 0;
              BOOL v223 = v224 != 0;
            }
            while (v225 | v224);
            unsigned int v161 = v277;
            int v165 = v264;
            if (v194) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v167 = (unsigned __int16)++v168;
        }
        while (v157 > (unsigned __int16)v168);
        int v164 = v256 + 1;
        unsigned int v163 = (unsigned __int16)(v256 + 1);
        unsigned int v19 = a7;
      }
      while (v254 > v163);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,4u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v233 = a9;
        long long v234 = v13;
        uint64_t v235 = v47;
        do
        {
          long long v236 = (long long *)(result + ((v235 + v54) << 6));
          long long v237 = *v236;
          long long v238 = v236[1];
          long long v239 = v236[3];
          v234[2] = v236[2];
          v234[3] = v239;
          *long long v234 = v237;
          v234[1] = v238;
          v234 += 4;
          uint64_t v235 = (v235 - v29) & v29;
          --v233;
        }
        while (v233);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v265 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v268 = a8 >> v66;
    unsigned int v270 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v266 = a10 + a8;
    unsigned int v262 = (v69 - 1 + a10 + a8) >> v66;
    char v264 = v66;
    if (a8 >> v66 >= v262) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v284 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v270 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v278 = a7 >> v67;
    unsigned int v282 = (v77 + a9 + a7) >> v67;
    if (result >= v282) {
      return result;
    }
    unsigned int v261 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v280 = v77 & v284;
    int v257 = v76 & v266;
    uint64_t v259 = v76 & a8;
    unsigned int v85 = v268;
LABEL_89:
    unsigned int v86 = v85 << v264;
    unsigned int v87 = v85 - v268;
    int v276 = v85 * v261;
    unsigned int v272 = v85 + 1;
    BOOL v88 = v266 >= (v85 + 1) << v264;
    unsigned int v89 = v270;
    if (!v88) {
      unsigned int v89 = v257;
    }
    int v90 = v270 - v259;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v264;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v259;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v274 = (v92 + v91 - v259) * a11;
    unsigned int v94 = v278;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v284 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v280;
      if (v284 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v282)
      {
        unsigned int v85 = v272;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v272 == v262) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[4 * (v100 + ((v94 - v278) << v67) - v84)] + v274);
      uint64_t v135 = (v94 + v276) * a12[3] * *((unsigned __int8 *)a12 + 9) + v265;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (long long *)(v135 + ((v138 + v125) << 6));
          long long v140 = *v139;
          long long v141 = v139[1];
          long long v142 = v139[3];
          v137[2] = v139[2];
          v137[3] = v142;
          _OWORD *v137 = v140;
          v137[1] = v141;
          v137 += 4;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v287);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  unsigned int v251 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v143 = a6 >> v20;
    unsigned int v144 = 1 << v21;
    unsigned int v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v145 = 0;
    }
    BOOL v146 = v144 >= a5;
    if (v144 < a5) {
      char v147 = v21 + v20 + v145;
    }
    else {
      char v147 = *((unsigned char *)a12 + 12);
    }
    if (v146) {
      LOBYTE(v148) = *((unsigned char *)a12 + 13);
    }
    else {
      int v148 = -v145;
    }
    if (!v143) {
      char v21 = v147;
    }
    char v245 = v21;
    if (v143) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v148;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v245 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v149 = v265;
  unsigned int v151 = a8;
  int v150 = a10;
  unsigned int v244 = v293;
  if (v293)
  {
    unsigned int v152 = 1 << v23;
    unsigned int v153 = v294;
    int v275 = v291;
    BOOL v271 = v291 != 0;
    int v273 = v292;
    BOOL v269 = v292 != 0;
    int v243 = 1 << v245;
    if (1 << v245 >= a5) {
      unsigned int v154 = a5;
    }
    else {
      unsigned int v154 = 1 << v245;
    }
    if (v152 >= a6) {
      unsigned int v155 = a6;
    }
    else {
      unsigned int v155 = 1 << v23;
    }
    unsigned int v156 = 32 - __clz(v154 - 1);
    if (v154 >= 2) {
      unsigned int v157 = v156;
    }
    else {
      unsigned int v157 = 0;
    }
    unsigned int v158 = 32 - __clz(v155 - 1);
    if (v155 < 2) {
      unsigned int v158 = 0;
    }
    BOOL v279 = v157 != 0;
    unsigned int v281 = v158;
    BOOL v277 = v158 != 0;
    if (v294)
    {
      unsigned int v159 = 0;
      int v160 = 0;
      unsigned int v242 = a7 >> v245;
      unsigned int v263 = a8 >> v23;
      int v286 = v295;
      int v283 = v292 | v291;
      unsigned int v241 = a9 + a7;
      int v240 = v288;
      int v161 = v290;
      int v285 = v289;
      int v258 = (v152 - 1) & a8;
      int v260 = (v152 - 1) & (a10 + a8);
      unsigned int v256 = v152 - v258;
      int v162 = ~(-1 << v157);
      int v254 = v290;
      int v255 = v281 | v157;
      unsigned int v267 = v157;
      int v247 = 1 << v23;
      char v248 = v23;
      do
      {
        int v246 = v160;
        int v163 = 0;
        int v164 = 0;
        unsigned int v165 = (v159 + v242) << v245;
        int v166 = a9;
        if (v241 >= (v159 + v242 + 1) << v245) {
          int v166 = v243 - ((v243 - 1) & a7);
        }
        int v167 = 1 << v245;
        if (v241 < (v159 + v242 + 1) << v245) {
          int v167 = (v243 - 1) & (a9 + a7);
        }
        int v168 = v240 + v159;
        int v169 = v159 << v245;
        if (v165 >= v19) {
          int v170 = v167;
        }
        else {
          int v170 = v166;
        }
        if (v165 >= v19) {
          int v171 = 0;
        }
        else {
          int v171 = (v243 - 1) & a7;
        }
        int v250 = &v251[4 * (unint64_t)(v171 + v169)];
        do
        {
          int v172 = v285 + v163;
          if (v286)
          {
            int v173 = v283;
            if (v283)
            {
              int v174 = 0;
              int v173 = 0;
              int v175 = 1;
              BOOL v176 = v269;
              BOOL v177 = v271;
              int v179 = v273;
              int v178 = v275;
              do
              {
                --v178;
                if (v177) {
                  v173 |= (v175 & v168) << v174;
                }
                else {
                  int v178 = 0;
                }
                if (v177) {
                  ++v174;
                }
                --v179;
                if (v176) {
                  v173 |= (v175 & v172) << v174;
                }
                else {
                  int v179 = 0;
                }
                if (v176) {
                  ++v174;
                }
                v175 *= 2;
                --v174;
                BOOL v176 = v179 != 0;
                BOOL v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            int v173 = v283;
            if (v283)
            {
              int v180 = 0;
              int v173 = 0;
              int v181 = 1;
              BOOL v183 = v269;
              BOOL v182 = v271;
              int v184 = v273;
              int v185 = v275;
              do
              {
                --v184;
                if (v183) {
                  v173 |= (v181 & v172) << v180;
                }
                else {
                  int v184 = 0;
                }
                if (v183) {
                  ++v180;
                }
                --v185;
                if (v182) {
                  v173 |= (v181 & v168) << v180;
                }
                else {
                  int v185 = 0;
                }
                if (v182) {
                  ++v180;
                }
                v181 *= 2;
                --v180;
                BOOL v182 = v185 != 0;
                BOOL v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          int v186 = *(_DWORD *)(v149 + 4 * ((v173 + v161) | ((v173 + v161) >> 8 << 9)));
          if (v186 < 0)
          {
            unint64_t v187 = v149 - *((void *)a13 + 3) + ((unint64_t)(v186 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v188 = a13[2];
            if (result > v188)
            {
              uint64_t result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v157 = v267;
              unsigned int v152 = v247;
              char v23 = v248;
              uint64_t v17 = a11;
              unsigned int v151 = a8;
              int v150 = a10;
              uint64_t v149 = v265;
              v187 += result;
            }
            unsigned int v189 = (v163 + v263) << v23;
            unsigned int v190 = v256;
            if (a10 + a8 >= (v163 + v263 + 1) << v23)
            {
              unsigned int v191 = v152;
            }
            else
            {
              unsigned int v190 = v150;
              unsigned int v191 = v260;
            }
            if (v189 >= v151) {
              int v192 = 0;
            }
            else {
              int v192 = v258;
            }
            if (v189 >= v151) {
              unsigned int v190 = v191;
            }
            if (!v255)
            {
              uint64_t v210 = 0;
              uint64_t v194 = 0;
              uint64_t v201 = 0;
              uint64_t v217 = 0;
              int v161 = v254;
              if (!v190) {
                goto LABEL_191;
              }
LABEL_263:
              if (v170)
              {
                int v224 = 0;
                unsigned int v225 = (_OWORD *)((char *)v250 + (v192 + (v163 << v23)) * v17);
                do
                {
                  int v226 = v170;
                  int v227 = v225;
                  uint64_t v228 = v210;
                  do
                  {
                    uint64_t result = v187 + ((v228 + v217) << 6);
                    long long v229 = *(_OWORD *)result;
                    long long v230 = *(_OWORD *)(result + 16);
                    long long v231 = *(_OWORD *)(result + 48);
                    v227[2] = *(_OWORD *)(result + 32);
                    v227[3] = v231;
                    *int v227 = v229;
                    v227[1] = v230;
                    v227 += 4;
                    uint64_t v228 = (v228 - v194) & v194;
                    --v226;
                  }
                  while (v226);
                  uint64_t v217 = (v217 - v201) & v201;
                  unsigned int v225 = (_OWORD *)((char *)v225 + v17);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_191;
            }
            unsigned int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v277;
            BOOL v197 = v279;
            unsigned int v198 = v157;
            unsigned int v199 = v281;
            do
            {
              --v198;
              if (v197) {
                v194 |= (unint64_t)(v195 & v162) << v193++;
              }
              else {
                unsigned int v198 = 0;
              }
              --v199;
              if (!v196) {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              unsigned int v193 = (__PAIR64__(v193, v196) - 1) >> 32;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            int v200 = 0;
            uint64_t v201 = 0;
            int v202 = 1;
            BOOL v203 = v277;
            BOOL v204 = v279;
            unsigned int v205 = v157;
            unsigned int v206 = v281;
            do
            {
              --v205;
              int v207 = v204;
              if (!v207) {
                unsigned int v205 = 0;
              }
              int v208 = v200 + v207;
              --v206;
              if (v203) {
                v201 |= (unint64_t)(v202 & ~(-1 << v281)) << v208++;
              }
              else {
                unsigned int v206 = 0;
              }
              v202 *= 2;
              int v200 = v208 - 1;
              BOOL v203 = v206 != 0;
              BOOL v204 = v205 != 0;
            }
            while (v206 | v205);
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            BOOL v213 = v277;
            BOOL v212 = v279;
            unsigned int v214 = v157;
            unsigned int v215 = v281;
            do
            {
              --v214;
              if (v212) {
                v210 |= (unint64_t)(v211 & v171) << v209++;
              }
              else {
                unsigned int v214 = 0;
              }
              --v215;
              if (!v213) {
                unsigned int v215 = 0;
              }
              v211 *= 2;
              unsigned int v209 = (__PAIR64__(v209, v213) - 1) >> 32;
              BOOL v213 = v215 != 0;
              BOOL v212 = v214 != 0;
            }
            while (v215 | v214);
            int v216 = 0;
            uint64_t v217 = 0;
            int v218 = 1;
            LOBYTE(result) = v277;
            BOOL v219 = v279;
            unsigned int v220 = v157;
            unsigned int v221 = v281;
            do
            {
              --v220;
              int v222 = v219;
              if (!v222) {
                unsigned int v220 = 0;
              }
              int v223 = v216 + v222;
              --v221;
              if (result) {
                v217 |= (unint64_t)(v218 & v192) << v223++;
              }
              else {
                unsigned int v221 = 0;
              }
              v218 *= 2;
              int v216 = v223 - 1;
              uint64_t result = v221 != 0;
              BOOL v219 = v220 != 0;
            }
            while (v221 | v220);
            unsigned int v157 = v267;
            int v161 = v254;
            if (v190) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v163 = (unsigned __int16)++v164;
        }
        while (v153 > (unsigned __int16)v164);
        int v160 = v246 + 1;
        unsigned int v159 = (unsigned __int16)(v246 + 1);
        unsigned int v19 = a7;
      }
      while (v244 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,2u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v229 = a9;
        long long v230 = v13;
        uint64_t v231 = v47;
        do
        {
          uint64_t v232 = (_OWORD *)(result + 32 * (v231 + v54));
          long long v233 = v232[1];
          *long long v230 = *v232;
          v230[1] = v233;
          v230 += 2;
          uint64_t v231 = (v231 - v29) & v29;
          --v229;
        }
        while (v229);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v259 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v262 = a8 >> v66;
    unsigned int v264 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v260 = a10 + a8;
    unsigned int v256 = (v69 - 1 + a10 + a8) >> v66;
    char v258 = v66;
    if (a8 >> v66 >= v256) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v278 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v264 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v272 = a7 >> v67;
    unsigned int v276 = (v77 + a9 + a7) >> v67;
    if (result >= v276) {
      return result;
    }
    unsigned int v255 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v274 = v77 & v278;
    int v251 = v76 & v260;
    uint64_t v253 = v76 & a8;
    unsigned int v85 = v262;
LABEL_89:
    unsigned int v86 = v85 << v258;
    unsigned int v87 = v85 - v262;
    int v270 = v85 * v255;
    unsigned int v266 = v85 + 1;
    BOOL v88 = v260 >= (v85 + 1) << v258;
    unsigned int v89 = v264;
    if (!v88) {
      unsigned int v89 = v251;
    }
    int v90 = v264 - v253;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v258;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v253;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v268 = (v92 + v91 - v253) * a11;
    unsigned int v94 = v272;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v278 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v274;
      if (v278 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v276)
      {
        unsigned int v85 = v266;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v266 == v256) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[2 * (v100 + ((v94 - v272) << v67) - v84)] + v268);
      uint64_t v135 = (v94 + v270) * a12[3] * *((unsigned __int8 *)a12 + 9) + v259;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (_OWORD *)(v135 + 32 * (v138 + v125));
          long long v140 = v139[1];
          _OWORD *v137 = *v139;
          v137[1] = v140;
          v137 += 2;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v281);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  char v245 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v141 = a6 >> v20;
    unsigned int v142 = 1 << v21;
    unsigned int v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v143 = 0;
    }
    BOOL v144 = v142 >= a5;
    if (v142 < a5) {
      char v145 = v21 + v20 + v143;
    }
    else {
      char v145 = *((unsigned char *)a12 + 12);
    }
    if (v144) {
      LOBYTE(v146) = *((unsigned char *)a12 + 13);
    }
    else {
      int v146 = -v143;
    }
    if (!v141) {
      char v21 = v145;
    }
    char v239 = v21;
    if (v141) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v146;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v239 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v147 = v259;
  unsigned int v149 = a8;
  int v148 = a10;
  unsigned int v238 = v287;
  if (v287)
  {
    unsigned int v150 = 1 << v23;
    unsigned int v151 = v288;
    int v269 = v285;
    BOOL v265 = v285 != 0;
    int v267 = v286;
    BOOL v263 = v286 != 0;
    int v237 = 1 << v239;
    if (1 << v239 >= a5) {
      unsigned int v152 = a5;
    }
    else {
      unsigned int v152 = 1 << v239;
    }
    if (v150 >= a6) {
      unsigned int v153 = a6;
    }
    else {
      unsigned int v153 = 1 << v23;
    }
    unsigned int v154 = 32 - __clz(v152 - 1);
    if (v152 >= 2) {
      unsigned int v155 = v154;
    }
    else {
      unsigned int v155 = 0;
    }
    unsigned int v156 = 32 - __clz(v153 - 1);
    if (v153 < 2) {
      unsigned int v156 = 0;
    }
    BOOL v273 = v155 != 0;
    unsigned int v275 = v156;
    BOOL v271 = v156 != 0;
    if (v288)
    {
      unsigned int v157 = 0;
      int v158 = 0;
      unsigned int v236 = a7 >> v239;
      unsigned int v257 = a8 >> v23;
      int v280 = v289;
      int v277 = v286 | v285;
      unsigned int v235 = a9 + a7;
      int v234 = v282;
      int v159 = v284;
      int v279 = v283;
      int v252 = (v150 - 1) & a8;
      int v254 = (v150 - 1) & (a10 + a8);
      unsigned int v250 = v150 - v252;
      int v160 = ~(-1 << v155);
      int v248 = v284;
      int v249 = v275 | v155;
      unsigned int v261 = v155;
      int v241 = 1 << v23;
      char v242 = v23;
      do
      {
        int v240 = v158;
        int v161 = 0;
        int v162 = 0;
        unsigned int v163 = (v157 + v236) << v239;
        int v164 = a9;
        if (v235 >= (v157 + v236 + 1) << v239) {
          int v164 = v237 - ((v237 - 1) & a7);
        }
        int v165 = 1 << v239;
        if (v235 < (v157 + v236 + 1) << v239) {
          int v165 = (v237 - 1) & (a9 + a7);
        }
        int v166 = v234 + v157;
        int v167 = v157 << v239;
        if (v163 >= v19) {
          int v168 = v165;
        }
        else {
          int v168 = v164;
        }
        if (v163 >= v19) {
          int v169 = 0;
        }
        else {
          int v169 = (v237 - 1) & a7;
        }
        unsigned int v244 = &v245[2 * (v169 + v167)];
        do
        {
          int v170 = v279 + v161;
          if (v280)
          {
            int v171 = v277;
            if (v277)
            {
              int v172 = 0;
              int v171 = 0;
              int v173 = 1;
              BOOL v174 = v263;
              BOOL v175 = v265;
              int v177 = v267;
              int v176 = v269;
              do
              {
                --v176;
                if (v175) {
                  v171 |= (v173 & v166) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v171 |= (v173 & v170) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            int v171 = v277;
            if (v277)
            {
              int v178 = 0;
              int v171 = 0;
              int v179 = 1;
              BOOL v181 = v263;
              BOOL v180 = v265;
              int v182 = v267;
              int v183 = v269;
              do
              {
                --v182;
                if (v181) {
                  v171 |= (v179 & v170) << v178;
                }
                else {
                  int v182 = 0;
                }
                if (v181) {
                  ++v178;
                }
                --v183;
                if (v180) {
                  v171 |= (v179 & v166) << v178;
                }
                else {
                  int v183 = 0;
                }
                if (v180) {
                  ++v178;
                }
                v179 *= 2;
                --v178;
                BOOL v180 = v183 != 0;
                BOOL v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          int v184 = *(_DWORD *)(v147 + 4 * ((v171 + v159) | ((v171 + v159) >> 8 << 9)));
          if (v184 < 0)
          {
            unint64_t v185 = v147 - *((void *)a13 + 3) + ((unint64_t)(v184 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v186 = a13[2];
            if (result > v186)
            {
              uint64_t result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v155 = v261;
              unsigned int v150 = v241;
              char v23 = v242;
              uint64_t v17 = a11;
              unsigned int v149 = a8;
              int v148 = a10;
              uint64_t v147 = v259;
              v185 += result;
            }
            unsigned int v187 = (v161 + v257) << v23;
            unsigned int v188 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              unsigned int v189 = v150;
            }
            else
            {
              unsigned int v188 = v148;
              unsigned int v189 = v254;
            }
            if (v187 >= v149) {
              int v190 = 0;
            }
            else {
              int v190 = v252;
            }
            if (v187 >= v149) {
              unsigned int v188 = v189;
            }
            if (!v249)
            {
              uint64_t v208 = 0;
              uint64_t v192 = 0;
              uint64_t v199 = 0;
              uint64_t v215 = 0;
              int v159 = v248;
              if (!v188) {
                goto LABEL_191;
              }
LABEL_263:
              if (v168)
              {
                int v222 = 0;
                int v223 = (_OWORD *)((char *)v244 + (v190 + (v161 << v23)) * v17);
                do
                {
                  int v224 = v168;
                  unsigned int v225 = v223;
                  uint64_t v226 = v208;
                  do
                  {
                    uint64_t result = v185 + 32 * (v226 + v215);
                    long long v227 = *(_OWORD *)(result + 16);
                    *unsigned int v225 = *(_OWORD *)result;
                    v225[1] = v227;
                    v225 += 2;
                    uint64_t v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  uint64_t v215 = (v215 - v199) & v199;
                  int v223 = (_OWORD *)((char *)v223 + v17);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_191;
            }
            unsigned int v191 = 0;
            uint64_t v192 = 0;
            int v193 = 1;
            BOOL v194 = v271;
            BOOL v195 = v273;
            unsigned int v196 = v155;
            unsigned int v197 = v275;
            do
            {
              --v196;
              if (v195) {
                v192 |= (unint64_t)(v193 & v160) << v191++;
              }
              else {
                unsigned int v196 = 0;
              }
              --v197;
              if (!v194) {
                unsigned int v197 = 0;
              }
              v193 *= 2;
              unsigned int v191 = (__PAIR64__(v191, v194) - 1) >> 32;
              BOOL v194 = v197 != 0;
              BOOL v195 = v196 != 0;
            }
            while (v197 | v196);
            int v198 = 0;
            uint64_t v199 = 0;
            int v200 = 1;
            BOOL v201 = v271;
            BOOL v202 = v273;
            unsigned int v203 = v155;
            unsigned int v204 = v275;
            do
            {
              --v203;
              int v205 = v202;
              if (!v205) {
                unsigned int v203 = 0;
              }
              int v206 = v198 + v205;
              --v204;
              if (v201) {
                v199 |= (unint64_t)(v200 & ~(-1 << v275)) << v206++;
              }
              else {
                unsigned int v204 = 0;
              }
              v200 *= 2;
              int v198 = v206 - 1;
              BOOL v201 = v204 != 0;
              BOOL v202 = v203 != 0;
            }
            while (v204 | v203);
            unsigned int v207 = 0;
            uint64_t v208 = 0;
            int v209 = 1;
            BOOL v211 = v271;
            BOOL v210 = v273;
            unsigned int v212 = v155;
            unsigned int v213 = v275;
            do
            {
              --v212;
              if (v210) {
                v208 |= (unint64_t)(v209 & v169) << v207++;
              }
              else {
                unsigned int v212 = 0;
              }
              --v213;
              if (!v211) {
                unsigned int v213 = 0;
              }
              v209 *= 2;
              unsigned int v207 = (__PAIR64__(v207, v211) - 1) >> 32;
              BOOL v211 = v213 != 0;
              BOOL v210 = v212 != 0;
            }
            while (v213 | v212);
            int v214 = 0;
            uint64_t v215 = 0;
            int v216 = 1;
            LOBYTE(result) = v271;
            BOOL v217 = v273;
            unsigned int v218 = v155;
            unsigned int v219 = v275;
            do
            {
              --v218;
              int v220 = v217;
              if (!v220) {
                unsigned int v218 = 0;
              }
              int v221 = v214 + v220;
              --v219;
              if (result) {
                v215 |= (unint64_t)(v216 & v190) << v221++;
              }
              else {
                unsigned int v219 = 0;
              }
              v216 *= 2;
              int v214 = v221 - 1;
              uint64_t result = v219 != 0;
              BOOL v217 = v218 != 0;
            }
            while (v219 | v218);
            unsigned int v155 = v261;
            int v159 = v248;
            if (v188) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v161 = (unsigned __int16)++v162;
        }
        while (v151 > (unsigned __int16)v162);
        int v158 = v240 + 1;
        unsigned int v157 = (unsigned __int16)(v240 + 1);
        unsigned int v19 = a7;
      }
      while (v238 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v233 = a9;
        int v234 = v13;
        uint64_t v235 = v47;
        do
        {
          unsigned int v236 = (long long *)(result + ((v235 + v54) << 6));
          long long v237 = *v236;
          long long v238 = v236[1];
          long long v239 = v236[3];
          v234[2] = v236[2];
          v234[3] = v239;
          *int v234 = v237;
          v234[1] = v238;
          v234 += 4;
          uint64_t v235 = (v235 - v29) & v29;
          --v233;
        }
        while (v233);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v265 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v268 = a8 >> v66;
    unsigned int v270 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v266 = a10 + a8;
    unsigned int v262 = (v69 - 1 + a10 + a8) >> v66;
    char v264 = v66;
    if (a8 >> v66 >= v262) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v284 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v270 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v278 = a7 >> v67;
    unsigned int v282 = (v77 + a9 + a7) >> v67;
    if (result >= v282) {
      return result;
    }
    unsigned int v261 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v280 = v77 & v284;
    int v257 = v76 & v266;
    uint64_t v259 = v76 & a8;
    unsigned int v85 = v268;
LABEL_89:
    unsigned int v86 = v85 << v264;
    unsigned int v87 = v85 - v268;
    int v276 = v85 * v261;
    unsigned int v272 = v85 + 1;
    BOOL v88 = v266 >= (v85 + 1) << v264;
    unsigned int v89 = v270;
    if (!v88) {
      unsigned int v89 = v257;
    }
    int v90 = v270 - v259;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v264;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v259;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v274 = (v92 + v91 - v259) * a11;
    unsigned int v94 = v278;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v284 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v280;
      if (v284 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v282)
      {
        unsigned int v85 = v272;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v272 == v262) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[4 * (v100 + ((v94 - v278) << v67) - v84)] + v274);
      uint64_t v135 = (v94 + v276) * a12[3] * *((unsigned __int8 *)a12 + 9) + v265;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (long long *)(v135 + ((v138 + v125) << 6));
          long long v140 = *v139;
          long long v141 = v139[1];
          long long v142 = v139[3];
          v137[2] = v139[2];
          v137[3] = v142;
          _OWORD *v137 = v140;
          v137[1] = v141;
          v137 += 4;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v287);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v251 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v143 = a6 >> v20;
    unsigned int v144 = 1 << v21;
    unsigned int v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v145 = 0;
    }
    BOOL v146 = v144 >= a5;
    if (v144 < a5) {
      char v147 = v21 + v20 + v145;
    }
    else {
      char v147 = *((unsigned char *)a12 + 12);
    }
    if (v146) {
      LOBYTE(v148) = *((unsigned char *)a12 + 13);
    }
    else {
      int v148 = -v145;
    }
    if (!v143) {
      char v21 = v147;
    }
    char v245 = v21;
    if (v143) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v148;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v245 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v149 = v265;
  unsigned int v151 = a8;
  int v150 = a10;
  unsigned int v244 = v293;
  if (v293)
  {
    unsigned int v152 = 1 << v23;
    unsigned int v153 = v294;
    int v275 = v291;
    BOOL v271 = v291 != 0;
    int v273 = v292;
    BOOL v269 = v292 != 0;
    int v243 = 1 << v245;
    if (1 << v245 >= a5) {
      unsigned int v154 = a5;
    }
    else {
      unsigned int v154 = 1 << v245;
    }
    if (v152 >= a6) {
      unsigned int v155 = a6;
    }
    else {
      unsigned int v155 = 1 << v23;
    }
    unsigned int v156 = 32 - __clz(v154 - 1);
    if (v154 >= 2) {
      unsigned int v157 = v156;
    }
    else {
      unsigned int v157 = 0;
    }
    unsigned int v158 = 32 - __clz(v155 - 1);
    if (v155 < 2) {
      unsigned int v158 = 0;
    }
    BOOL v279 = v157 != 0;
    unsigned int v281 = v158;
    BOOL v277 = v158 != 0;
    if (v294)
    {
      unsigned int v159 = 0;
      int v160 = 0;
      unsigned int v242 = a7 >> v245;
      unsigned int v263 = a8 >> v23;
      int v286 = v295;
      int v283 = v292 | v291;
      unsigned int v241 = a9 + a7;
      int v240 = v288;
      int v161 = v290;
      int v285 = v289;
      int v258 = (v152 - 1) & a8;
      int v260 = (v152 - 1) & (a10 + a8);
      unsigned int v256 = v152 - v258;
      int v162 = ~(-1 << v157);
      int v254 = v290;
      int v255 = v281 | v157;
      unsigned int v267 = v157;
      int v247 = 1 << v23;
      char v248 = v23;
      do
      {
        int v246 = v160;
        int v163 = 0;
        int v164 = 0;
        unsigned int v165 = (v159 + v242) << v245;
        int v166 = a9;
        if (v241 >= (v159 + v242 + 1) << v245) {
          int v166 = v243 - ((v243 - 1) & a7);
        }
        int v167 = 1 << v245;
        if (v241 < (v159 + v242 + 1) << v245) {
          int v167 = (v243 - 1) & (a9 + a7);
        }
        int v168 = v240 + v159;
        int v169 = v159 << v245;
        if (v165 >= v19) {
          int v170 = v167;
        }
        else {
          int v170 = v166;
        }
        if (v165 >= v19) {
          int v171 = 0;
        }
        else {
          int v171 = (v243 - 1) & a7;
        }
        unsigned int v250 = &v251[4 * (unint64_t)(v171 + v169)];
        do
        {
          int v172 = v285 + v163;
          if (v286)
          {
            int v173 = v283;
            if (v283)
            {
              int v174 = 0;
              int v173 = 0;
              int v175 = 1;
              BOOL v176 = v269;
              BOOL v177 = v271;
              int v179 = v273;
              int v178 = v275;
              do
              {
                --v178;
                if (v177) {
                  v173 |= (v175 & v168) << v174;
                }
                else {
                  int v178 = 0;
                }
                if (v177) {
                  ++v174;
                }
                --v179;
                if (v176) {
                  v173 |= (v175 & v172) << v174;
                }
                else {
                  int v179 = 0;
                }
                if (v176) {
                  ++v174;
                }
                v175 *= 2;
                --v174;
                BOOL v176 = v179 != 0;
                BOOL v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            int v173 = v283;
            if (v283)
            {
              int v180 = 0;
              int v173 = 0;
              int v181 = 1;
              BOOL v183 = v269;
              BOOL v182 = v271;
              int v184 = v273;
              int v185 = v275;
              do
              {
                --v184;
                if (v183) {
                  v173 |= (v181 & v172) << v180;
                }
                else {
                  int v184 = 0;
                }
                if (v183) {
                  ++v180;
                }
                --v185;
                if (v182) {
                  v173 |= (v181 & v168) << v180;
                }
                else {
                  int v185 = 0;
                }
                if (v182) {
                  ++v180;
                }
                v181 *= 2;
                --v180;
                BOOL v182 = v185 != 0;
                BOOL v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          int v186 = *(_DWORD *)(v149 + 4 * ((v173 + v161) | ((v173 + v161) >> 8 << 9)));
          if (v186 < 0)
          {
            unint64_t v187 = v149 - *((void *)a13 + 3) + ((unint64_t)(v186 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v188 = a13[2];
            if (result > v188)
            {
              uint64_t result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v157 = v267;
              unsigned int v152 = v247;
              char v23 = v248;
              uint64_t v17 = a11;
              unsigned int v151 = a8;
              int v150 = a10;
              uint64_t v149 = v265;
              v187 += result;
            }
            unsigned int v189 = (v163 + v263) << v23;
            unsigned int v190 = v256;
            if (a10 + a8 >= (v163 + v263 + 1) << v23)
            {
              unsigned int v191 = v152;
            }
            else
            {
              unsigned int v190 = v150;
              unsigned int v191 = v260;
            }
            if (v189 >= v151) {
              int v192 = 0;
            }
            else {
              int v192 = v258;
            }
            if (v189 >= v151) {
              unsigned int v190 = v191;
            }
            if (!v255)
            {
              uint64_t v210 = 0;
              uint64_t v194 = 0;
              uint64_t v201 = 0;
              uint64_t v217 = 0;
              int v161 = v254;
              if (!v190) {
                goto LABEL_191;
              }
LABEL_263:
              if (v170)
              {
                int v224 = 0;
                unsigned int v225 = (_OWORD *)((char *)v250 + (v192 + (v163 << v23)) * v17);
                do
                {
                  int v226 = v170;
                  long long v227 = v225;
                  uint64_t v228 = v210;
                  do
                  {
                    uint64_t result = v187 + ((v228 + v217) << 6);
                    long long v229 = *(_OWORD *)result;
                    long long v230 = *(_OWORD *)(result + 16);
                    long long v231 = *(_OWORD *)(result + 48);
                    v227[2] = *(_OWORD *)(result + 32);
                    v227[3] = v231;
                    *long long v227 = v229;
                    v227[1] = v230;
                    v227 += 4;
                    uint64_t v228 = (v228 - v194) & v194;
                    --v226;
                  }
                  while (v226);
                  uint64_t v217 = (v217 - v201) & v201;
                  unsigned int v225 = (_OWORD *)((char *)v225 + v17);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_191;
            }
            unsigned int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v277;
            BOOL v197 = v279;
            unsigned int v198 = v157;
            unsigned int v199 = v281;
            do
            {
              --v198;
              if (v197) {
                v194 |= (unint64_t)(v195 & v162) << v193++;
              }
              else {
                unsigned int v198 = 0;
              }
              --v199;
              if (!v196) {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              unsigned int v193 = (__PAIR64__(v193, v196) - 1) >> 32;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            int v200 = 0;
            uint64_t v201 = 0;
            int v202 = 1;
            BOOL v203 = v277;
            BOOL v204 = v279;
            unsigned int v205 = v157;
            unsigned int v206 = v281;
            do
            {
              --v205;
              int v207 = v204;
              if (!v207) {
                unsigned int v205 = 0;
              }
              int v208 = v200 + v207;
              --v206;
              if (v203) {
                v201 |= (unint64_t)(v202 & ~(-1 << v281)) << v208++;
              }
              else {
                unsigned int v206 = 0;
              }
              v202 *= 2;
              int v200 = v208 - 1;
              BOOL v203 = v206 != 0;
              BOOL v204 = v205 != 0;
            }
            while (v206 | v205);
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            BOOL v213 = v277;
            BOOL v212 = v279;
            unsigned int v214 = v157;
            unsigned int v215 = v281;
            do
            {
              --v214;
              if (v212) {
                v210 |= (unint64_t)(v211 & v171) << v209++;
              }
              else {
                unsigned int v214 = 0;
              }
              --v215;
              if (!v213) {
                unsigned int v215 = 0;
              }
              v211 *= 2;
              unsigned int v209 = (__PAIR64__(v209, v213) - 1) >> 32;
              BOOL v213 = v215 != 0;
              BOOL v212 = v214 != 0;
            }
            while (v215 | v214);
            int v216 = 0;
            uint64_t v217 = 0;
            int v218 = 1;
            LOBYTE(result) = v277;
            BOOL v219 = v279;
            unsigned int v220 = v157;
            unsigned int v221 = v281;
            do
            {
              --v220;
              int v222 = v219;
              if (!v222) {
                unsigned int v220 = 0;
              }
              int v223 = v216 + v222;
              --v221;
              if (result) {
                v217 |= (unint64_t)(v218 & v192) << v223++;
              }
              else {
                unsigned int v221 = 0;
              }
              v218 *= 2;
              int v216 = v223 - 1;
              uint64_t result = v221 != 0;
              BOOL v219 = v220 != 0;
            }
            while (v221 | v220);
            unsigned int v157 = v267;
            int v161 = v254;
            if (v190) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v163 = (unsigned __int16)++v164;
        }
        while (v153 > (unsigned __int16)v164);
        int v160 = v246 + 1;
        unsigned int v159 = (unsigned __int16)(v246 + 1);
        unsigned int v19 = a7;
      }
      while (v244 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,4u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v229 = a9;
        long long v230 = v13;
        uint64_t v231 = v47;
        do
        {
          uint64_t v232 = (_OWORD *)(result + 32 * (v231 + v54));
          long long v233 = v232[1];
          *long long v230 = *v232;
          v230[1] = v233;
          v230 += 2;
          uint64_t v231 = (v231 - v29) & v29;
          --v229;
        }
        while (v229);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v259 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v262 = a8 >> v66;
    unsigned int v264 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v260 = a10 + a8;
    unsigned int v256 = (v69 - 1 + a10 + a8) >> v66;
    char v258 = v66;
    if (a8 >> v66 >= v256) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v278 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v264 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v272 = a7 >> v67;
    unsigned int v276 = (v77 + a9 + a7) >> v67;
    if (result >= v276) {
      return result;
    }
    unsigned int v255 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v274 = v77 & v278;
    int v251 = v76 & v260;
    uint64_t v253 = v76 & a8;
    unsigned int v85 = v262;
LABEL_89:
    unsigned int v86 = v85 << v258;
    unsigned int v87 = v85 - v262;
    int v270 = v85 * v255;
    unsigned int v266 = v85 + 1;
    BOOL v88 = v260 >= (v85 + 1) << v258;
    unsigned int v89 = v264;
    if (!v88) {
      unsigned int v89 = v251;
    }
    int v90 = v264 - v253;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v258;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v253;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v268 = (v92 + v91 - v253) * a11;
    unsigned int v94 = v272;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v278 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v274;
      if (v278 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v276)
      {
        unsigned int v85 = v266;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v266 == v256) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[2 * (v100 + ((v94 - v272) << v67) - v84)] + v268);
      uint64_t v135 = (v94 + v270) * a12[3] * *((unsigned __int8 *)a12 + 9) + v259;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          uint64_t v139 = (_OWORD *)(v135 + 32 * (v138 + v125));
          long long v140 = v139[1];
          _OWORD *v137 = *v139;
          v137[1] = v140;
          v137 += 2;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v281);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  char v245 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v141 = a6 >> v20;
    unsigned int v142 = 1 << v21;
    unsigned int v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v143 = 0;
    }
    BOOL v144 = v142 >= a5;
    if (v142 < a5) {
      char v145 = v21 + v20 + v143;
    }
    else {
      char v145 = *((unsigned char *)a12 + 12);
    }
    if (v144) {
      LOBYTE(v146) = *((unsigned char *)a12 + 13);
    }
    else {
      int v146 = -v143;
    }
    if (!v141) {
      char v21 = v145;
    }
    char v239 = v21;
    if (v141) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v146;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v239 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v147 = v259;
  unsigned int v149 = a8;
  int v148 = a10;
  unsigned int v238 = v287;
  if (v287)
  {
    unsigned int v150 = 1 << v23;
    unsigned int v151 = v288;
    int v269 = v285;
    BOOL v265 = v285 != 0;
    int v267 = v286;
    BOOL v263 = v286 != 0;
    int v237 = 1 << v239;
    if (1 << v239 >= a5) {
      unsigned int v152 = a5;
    }
    else {
      unsigned int v152 = 1 << v239;
    }
    if (v150 >= a6) {
      unsigned int v153 = a6;
    }
    else {
      unsigned int v153 = 1 << v23;
    }
    unsigned int v154 = 32 - __clz(v152 - 1);
    if (v152 >= 2) {
      unsigned int v155 = v154;
    }
    else {
      unsigned int v155 = 0;
    }
    unsigned int v156 = 32 - __clz(v153 - 1);
    if (v153 < 2) {
      unsigned int v156 = 0;
    }
    BOOL v273 = v155 != 0;
    unsigned int v275 = v156;
    BOOL v271 = v156 != 0;
    if (v288)
    {
      unsigned int v157 = 0;
      int v158 = 0;
      unsigned int v236 = a7 >> v239;
      unsigned int v257 = a8 >> v23;
      int v280 = v289;
      int v277 = v286 | v285;
      unsigned int v235 = a9 + a7;
      int v234 = v282;
      int v159 = v284;
      int v279 = v283;
      int v252 = (v150 - 1) & a8;
      int v254 = (v150 - 1) & (a10 + a8);
      unsigned int v250 = v150 - v252;
      int v160 = ~(-1 << v155);
      int v248 = v284;
      int v249 = v275 | v155;
      unsigned int v261 = v155;
      int v241 = 1 << v23;
      char v242 = v23;
      do
      {
        int v240 = v158;
        int v161 = 0;
        int v162 = 0;
        unsigned int v163 = (v157 + v236) << v239;
        int v164 = a9;
        if (v235 >= (v157 + v236 + 1) << v239) {
          int v164 = v237 - ((v237 - 1) & a7);
        }
        int v165 = 1 << v239;
        if (v235 < (v157 + v236 + 1) << v239) {
          int v165 = (v237 - 1) & (a9 + a7);
        }
        int v166 = v234 + v157;
        int v167 = v157 << v239;
        if (v163 >= v19) {
          int v168 = v165;
        }
        else {
          int v168 = v164;
        }
        if (v163 >= v19) {
          int v169 = 0;
        }
        else {
          int v169 = (v237 - 1) & a7;
        }
        unsigned int v244 = &v245[2 * (v169 + v167)];
        do
        {
          int v170 = v279 + v161;
          if (v280)
          {
            int v171 = v277;
            if (v277)
            {
              int v172 = 0;
              int v171 = 0;
              int v173 = 1;
              BOOL v174 = v263;
              BOOL v175 = v265;
              int v177 = v267;
              int v176 = v269;
              do
              {
                --v176;
                if (v175) {
                  v171 |= (v173 & v166) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v171 |= (v173 & v170) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            int v171 = v277;
            if (v277)
            {
              int v178 = 0;
              int v171 = 0;
              int v179 = 1;
              BOOL v181 = v263;
              BOOL v180 = v265;
              int v182 = v267;
              int v183 = v269;
              do
              {
                --v182;
                if (v181) {
                  v171 |= (v179 & v170) << v178;
                }
                else {
                  int v182 = 0;
                }
                if (v181) {
                  ++v178;
                }
                --v183;
                if (v180) {
                  v171 |= (v179 & v166) << v178;
                }
                else {
                  int v183 = 0;
                }
                if (v180) {
                  ++v178;
                }
                v179 *= 2;
                --v178;
                BOOL v180 = v183 != 0;
                BOOL v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          int v184 = *(_DWORD *)(v147 + 4 * ((v171 + v159) | ((v171 + v159) >> 8 << 9)));
          if (v184 < 0)
          {
            unint64_t v185 = v147 - *((void *)a13 + 3) + ((unint64_t)(v184 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v186 = a13[2];
            if (result > v186)
            {
              uint64_t result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v155 = v261;
              unsigned int v150 = v241;
              char v23 = v242;
              uint64_t v17 = a11;
              unsigned int v149 = a8;
              int v148 = a10;
              uint64_t v147 = v259;
              v185 += result;
            }
            unsigned int v187 = (v161 + v257) << v23;
            unsigned int v188 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              unsigned int v189 = v150;
            }
            else
            {
              unsigned int v188 = v148;
              unsigned int v189 = v254;
            }
            if (v187 >= v149) {
              int v190 = 0;
            }
            else {
              int v190 = v252;
            }
            if (v187 >= v149) {
              unsigned int v188 = v189;
            }
            if (!v249)
            {
              uint64_t v208 = 0;
              uint64_t v192 = 0;
              uint64_t v199 = 0;
              uint64_t v215 = 0;
              int v159 = v248;
              if (!v188) {
                goto LABEL_191;
              }
LABEL_263:
              if (v168)
              {
                int v222 = 0;
                int v223 = (_OWORD *)((char *)v244 + (v190 + (v161 << v23)) * v17);
                do
                {
                  int v224 = v168;
                  unsigned int v225 = v223;
                  uint64_t v226 = v208;
                  do
                  {
                    uint64_t result = v185 + 32 * (v226 + v215);
                    long long v227 = *(_OWORD *)(result + 16);
                    *unsigned int v225 = *(_OWORD *)result;
                    v225[1] = v227;
                    v225 += 2;
                    uint64_t v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  uint64_t v215 = (v215 - v199) & v199;
                  int v223 = (_OWORD *)((char *)v223 + v17);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_191;
            }
            unsigned int v191 = 0;
            uint64_t v192 = 0;
            int v193 = 1;
            BOOL v194 = v271;
            BOOL v195 = v273;
            unsigned int v196 = v155;
            unsigned int v197 = v275;
            do
            {
              --v196;
              if (v195) {
                v192 |= (unint64_t)(v193 & v160) << v191++;
              }
              else {
                unsigned int v196 = 0;
              }
              --v197;
              if (!v194) {
                unsigned int v197 = 0;
              }
              v193 *= 2;
              unsigned int v191 = (__PAIR64__(v191, v194) - 1) >> 32;
              BOOL v194 = v197 != 0;
              BOOL v195 = v196 != 0;
            }
            while (v197 | v196);
            int v198 = 0;
            uint64_t v199 = 0;
            int v200 = 1;
            BOOL v201 = v271;
            BOOL v202 = v273;
            unsigned int v203 = v155;
            unsigned int v204 = v275;
            do
            {
              --v203;
              int v205 = v202;
              if (!v205) {
                unsigned int v203 = 0;
              }
              int v206 = v198 + v205;
              --v204;
              if (v201) {
                v199 |= (unint64_t)(v200 & ~(-1 << v275)) << v206++;
              }
              else {
                unsigned int v204 = 0;
              }
              v200 *= 2;
              int v198 = v206 - 1;
              BOOL v201 = v204 != 0;
              BOOL v202 = v203 != 0;
            }
            while (v204 | v203);
            unsigned int v207 = 0;
            uint64_t v208 = 0;
            int v209 = 1;
            BOOL v211 = v271;
            BOOL v210 = v273;
            unsigned int v212 = v155;
            unsigned int v213 = v275;
            do
            {
              --v212;
              if (v210) {
                v208 |= (unint64_t)(v209 & v169) << v207++;
              }
              else {
                unsigned int v212 = 0;
              }
              --v213;
              if (!v211) {
                unsigned int v213 = 0;
              }
              v209 *= 2;
              unsigned int v207 = (__PAIR64__(v207, v211) - 1) >> 32;
              BOOL v211 = v213 != 0;
              BOOL v210 = v212 != 0;
            }
            while (v213 | v212);
            int v214 = 0;
            uint64_t v215 = 0;
            int v216 = 1;
            LOBYTE(result) = v271;
            BOOL v217 = v273;
            unsigned int v218 = v155;
            unsigned int v219 = v275;
            do
            {
              --v218;
              int v220 = v217;
              if (!v220) {
                unsigned int v218 = 0;
              }
              int v221 = v214 + v220;
              --v219;
              if (result) {
                v215 |= (unint64_t)(v216 & v190) << v221++;
              }
              else {
                unsigned int v219 = 0;
              }
              v216 *= 2;
              int v214 = v221 - 1;
              uint64_t result = v219 != 0;
              BOOL v217 = v218 != 0;
            }
            while (v219 | v218);
            unsigned int v155 = v261;
            int v159 = v248;
            if (v188) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v161 = (unsigned __int16)++v162;
        }
        while (v151 > (unsigned __int16)v162);
        int v158 = v240 + 1;
        unsigned int v157 = (unsigned __int16)(v240 + 1);
        unsigned int v19 = a7;
      }
      while (v238 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,2u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v226 = a9;
        long long v227 = v13;
        uint64_t v228 = v47;
        do
        {
          *v227++ = *(_OWORD *)(result + 16 * (v228 + v54));
          uint64_t v228 = (v228 - v29) & v29;
          --v226;
        }
        while (v226);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v254 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v257 = a8 >> v66;
    unsigned int v259 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v255 = a10 + a8;
    unsigned int v251 = (v69 - 1 + a10 + a8) >> v66;
    char v253 = v66;
    if (a8 >> v66 >= v251) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v259 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v267 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v257;
LABEL_89:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v257;
    int v265 = v85 * v250;
    unsigned int v261 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v259;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v259 - v248;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v253;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v263 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v267;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v273 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v269;
      if (v273 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v271)
      {
        unsigned int v85 = v261;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v261 == v251) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[v100 + ((v94 - v267) << v67) - v84] + v263);
      uint64_t v135 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v254;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          *v137++ = *(_OWORD *)(v135 + 16 * (v138 + v125));
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v240 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v234 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v234 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v145 = v254;
  unsigned int v147 = a8;
  int v146 = a10;
  unsigned int v233 = v282;
  if (v282)
  {
    unsigned int v148 = 1 << v23;
    unsigned int v149 = v283;
    int v264 = v280;
    BOOL v260 = v280 != 0;
    int v262 = v281;
    BOOL v258 = v281 != 0;
    int v232 = 1 << v234;
    if (1 << v234 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v234;
    }
    if (v148 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v268 = v153 != 0;
    unsigned int v270 = v154;
    BOOL v266 = v154 != 0;
    if (v283)
    {
      unsigned int v155 = 0;
      int v156 = 0;
      unsigned int v231 = a7 >> v234;
      unsigned int v252 = a8 >> v23;
      int v275 = v284;
      int v272 = v281 | v280;
      unsigned int v230 = a9 + a7;
      int v229 = v277;
      int v157 = v279;
      int v274 = v278;
      int v247 = (v148 - 1) & a8;
      int v249 = (v148 - 1) & (a10 + a8);
      unsigned int v245 = v148 - v247;
      int v158 = ~(-1 << v153);
      int v243 = v279;
      int v244 = v270 | v153;
      unsigned int v256 = v153;
      int v236 = 1 << v23;
      char v237 = v23;
      do
      {
        int v235 = v156;
        int v159 = 0;
        int v160 = 0;
        unsigned int v161 = (v155 + v231) << v234;
        int v162 = a9;
        if (v230 >= (v155 + v231 + 1) << v234) {
          int v162 = v232 - ((v232 - 1) & a7);
        }
        int v163 = 1 << v234;
        if (v230 < (v155 + v231 + 1) << v234) {
          int v163 = (v232 - 1) & (a9 + a7);
        }
        int v164 = v229 + v155;
        int v165 = v155 << v234;
        if (v161 >= v19) {
          int v166 = v163;
        }
        else {
          int v166 = v162;
        }
        if (v161 >= v19) {
          int v167 = 0;
        }
        else {
          int v167 = (v232 - 1) & a7;
        }
        char v239 = &v240[v167 + v165];
        do
        {
          int v168 = v274 + v159;
          if (v275)
          {
            int v169 = v272;
            if (v272)
            {
              int v170 = 0;
              int v169 = 0;
              int v171 = 1;
              BOOL v172 = v258;
              BOOL v173 = v260;
              int v175 = v262;
              int v174 = v264;
              do
              {
                --v174;
                if (v173) {
                  v169 |= (v171 & v164) << v170;
                }
                else {
                  int v174 = 0;
                }
                if (v173) {
                  ++v170;
                }
                --v175;
                if (v172) {
                  v169 |= (v171 & v168) << v170;
                }
                else {
                  int v175 = 0;
                }
                if (v172) {
                  ++v170;
                }
                v171 *= 2;
                --v170;
                BOOL v172 = v175 != 0;
                BOOL v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            int v169 = v272;
            if (v272)
            {
              int v176 = 0;
              int v169 = 0;
              int v177 = 1;
              BOOL v179 = v258;
              BOOL v178 = v260;
              int v180 = v262;
              int v181 = v264;
              do
              {
                --v180;
                if (v179) {
                  v169 |= (v177 & v168) << v176;
                }
                else {
                  int v180 = 0;
                }
                if (v179) {
                  ++v176;
                }
                --v181;
                if (v178) {
                  v169 |= (v177 & v164) << v176;
                }
                else {
                  int v181 = 0;
                }
                if (v178) {
                  ++v176;
                }
                v177 *= 2;
                --v176;
                BOOL v178 = v181 != 0;
                BOOL v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          int v182 = *(_DWORD *)(v145 + 4 * ((v169 + v157) | ((v169 + v157) >> 8 << 9)));
          if (v182 < 0)
          {
            unint64_t v183 = v145 - *((void *)a13 + 3) + ((unint64_t)(v182 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v184 = a13[2];
            if (result > v184)
            {
              uint64_t result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v256;
              unsigned int v148 = v236;
              char v23 = v237;
              uint64_t v17 = a11;
              unsigned int v147 = a8;
              int v146 = a10;
              uint64_t v145 = v254;
              v183 += result;
            }
            unsigned int v185 = (v159 + v252) << v23;
            unsigned int v186 = v245;
            if (a10 + a8 >= (v159 + v252 + 1) << v23)
            {
              unsigned int v187 = v148;
            }
            else
            {
              unsigned int v186 = v146;
              unsigned int v187 = v249;
            }
            if (v185 >= v147) {
              int v188 = 0;
            }
            else {
              int v188 = v247;
            }
            if (v185 >= v147) {
              unsigned int v186 = v187;
            }
            if (!v244)
            {
              uint64_t v206 = 0;
              uint64_t v190 = 0;
              uint64_t v197 = 0;
              uint64_t v213 = 0;
              int v157 = v243;
              if (!v186) {
                goto LABEL_191;
              }
LABEL_263:
              if (v166)
              {
                int v220 = 0;
                int v221 = (_OWORD *)((char *)v239 + (v188 + (v159 << v23)) * v17);
                do
                {
                  int v222 = v166;
                  int v223 = v221;
                  uint64_t v224 = v206;
                  do
                  {
                    uint64_t result = v224 + v213;
                    *v223++ = *(_OWORD *)(v183 + 16 * (v224 + v213));
                    uint64_t v224 = (v224 - v190) & v190;
                    --v222;
                  }
                  while (v222);
                  uint64_t v213 = (v213 - v197) & v197;
                  int v221 = (_OWORD *)((char *)v221 + v17);
                  ++v220;
                }
                while (v220 != v186);
              }
              goto LABEL_191;
            }
            unsigned int v189 = 0;
            uint64_t v190 = 0;
            int v191 = 1;
            BOOL v192 = v266;
            BOOL v193 = v268;
            unsigned int v194 = v153;
            unsigned int v195 = v270;
            do
            {
              --v194;
              if (v193) {
                v190 |= (unint64_t)(v191 & v158) << v189++;
              }
              else {
                unsigned int v194 = 0;
              }
              --v195;
              if (!v192) {
                unsigned int v195 = 0;
              }
              v191 *= 2;
              unsigned int v189 = (__PAIR64__(v189, v192) - 1) >> 32;
              BOOL v192 = v195 != 0;
              BOOL v193 = v194 != 0;
            }
            while (v195 | v194);
            int v196 = 0;
            uint64_t v197 = 0;
            int v198 = 1;
            BOOL v199 = v266;
            BOOL v200 = v268;
            unsigned int v201 = v153;
            unsigned int v202 = v270;
            do
            {
              --v201;
              int v203 = v200;
              if (!v203) {
                unsigned int v201 = 0;
              }
              int v204 = v196 + v203;
              --v202;
              if (v199) {
                v197 |= (unint64_t)(v198 & ~(-1 << v270)) << v204++;
              }
              else {
                unsigned int v202 = 0;
              }
              v198 *= 2;
              int v196 = v204 - 1;
              BOOL v199 = v202 != 0;
              BOOL v200 = v201 != 0;
            }
            while (v202 | v201);
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            int v207 = 1;
            BOOL v209 = v266;
            BOOL v208 = v268;
            unsigned int v210 = v153;
            unsigned int v211 = v270;
            do
            {
              --v210;
              if (v208) {
                v206 |= (unint64_t)(v207 & v167) << v205++;
              }
              else {
                unsigned int v210 = 0;
              }
              --v211;
              if (!v209) {
                unsigned int v211 = 0;
              }
              v207 *= 2;
              unsigned int v205 = (__PAIR64__(v205, v209) - 1) >> 32;
              BOOL v209 = v211 != 0;
              BOOL v208 = v210 != 0;
            }
            while (v211 | v210);
            int v212 = 0;
            uint64_t v213 = 0;
            int v214 = 1;
            LOBYTE(result) = v266;
            BOOL v215 = v268;
            unsigned int v216 = v153;
            unsigned int v217 = v270;
            do
            {
              --v216;
              int v218 = v215;
              if (!v218) {
                unsigned int v216 = 0;
              }
              int v219 = v212 + v218;
              --v217;
              if (result) {
                v213 |= (unint64_t)(v214 & v188) << v219++;
              }
              else {
                unsigned int v217 = 0;
              }
              v214 *= 2;
              int v212 = v219 - 1;
              uint64_t result = v217 != 0;
              BOOL v215 = v216 != 0;
            }
            while (v217 | v216);
            unsigned int v153 = v256;
            int v157 = v243;
            if (v186) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v159 = (unsigned __int16)++v160;
        }
        while (v149 > (unsigned __int16)v160);
        int v156 = v235 + 1;
        unsigned int v155 = (unsigned __int16)(v235 + 1);
        unsigned int v19 = a7;
      }
      while (v233 > v155);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v229 = a9;
        unsigned int v230 = v13;
        uint64_t v231 = v47;
        do
        {
          int v232 = (_OWORD *)(result + 32 * (v231 + v54));
          long long v233 = v232[1];
          *unsigned int v230 = *v232;
          v230[1] = v233;
          v230 += 2;
          uint64_t v231 = (v231 - v29) & v29;
          --v229;
        }
        while (v229);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v259 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v262 = a8 >> v66;
    unsigned int v264 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v260 = a10 + a8;
    unsigned int v256 = (v69 - 1 + a10 + a8) >> v66;
    char v258 = v66;
    if (a8 >> v66 >= v256) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v278 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v264 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v272 = a7 >> v67;
    unsigned int v276 = (v77 + a9 + a7) >> v67;
    if (result >= v276) {
      return result;
    }
    unsigned int v255 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v274 = v77 & v278;
    int v251 = v76 & v260;
    uint64_t v253 = v76 & a8;
    unsigned int v85 = v262;
LABEL_89:
    unsigned int v86 = v85 << v258;
    unsigned int v87 = v85 - v262;
    int v270 = v85 * v255;
    unsigned int v266 = v85 + 1;
    BOOL v88 = v260 >= (v85 + 1) << v258;
    unsigned int v89 = v264;
    if (!v88) {
      unsigned int v89 = v251;
    }
    int v90 = v264 - v253;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v258;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v253;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v268 = (v92 + v91 - v253) * a11;
    unsigned int v94 = v272;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v278 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v274;
      if (v278 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v276)
      {
        unsigned int v85 = v266;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v266 == v256) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[2 * (v100 + ((v94 - v272) << v67) - v84)] + v268);
      uint64_t v135 = (v94 + v270) * a12[3] * *((unsigned __int8 *)a12 + 9) + v259;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          unsigned int v139 = (_OWORD *)(v135 + 32 * (v138 + v125));
          long long v140 = v139[1];
          _OWORD *v137 = *v139;
          v137[1] = v140;
          v137 += 2;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v281);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  unsigned int v245 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v141 = a6 >> v20;
    unsigned int v142 = 1 << v21;
    unsigned int v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v143 = 0;
    }
    BOOL v144 = v142 >= a5;
    if (v142 < a5) {
      char v145 = v21 + v20 + v143;
    }
    else {
      char v145 = *((unsigned char *)a12 + 12);
    }
    if (v144) {
      LOBYTE(v146) = *((unsigned char *)a12 + 13);
    }
    else {
      int v146 = -v143;
    }
    if (!v141) {
      char v21 = v145;
    }
    char v239 = v21;
    if (v141) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v146;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v239 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v147 = v259;
  unsigned int v149 = a8;
  int v148 = a10;
  unsigned int v238 = v287;
  if (v287)
  {
    unsigned int v150 = 1 << v23;
    unsigned int v151 = v288;
    int v269 = v285;
    BOOL v265 = v285 != 0;
    int v267 = v286;
    BOOL v263 = v286 != 0;
    int v237 = 1 << v239;
    if (1 << v239 >= a5) {
      unsigned int v152 = a5;
    }
    else {
      unsigned int v152 = 1 << v239;
    }
    if (v150 >= a6) {
      unsigned int v153 = a6;
    }
    else {
      unsigned int v153 = 1 << v23;
    }
    unsigned int v154 = 32 - __clz(v152 - 1);
    if (v152 >= 2) {
      unsigned int v155 = v154;
    }
    else {
      unsigned int v155 = 0;
    }
    unsigned int v156 = 32 - __clz(v153 - 1);
    if (v153 < 2) {
      unsigned int v156 = 0;
    }
    BOOL v273 = v155 != 0;
    unsigned int v275 = v156;
    BOOL v271 = v156 != 0;
    if (v288)
    {
      unsigned int v157 = 0;
      int v158 = 0;
      unsigned int v236 = a7 >> v239;
      unsigned int v257 = a8 >> v23;
      int v280 = v289;
      int v277 = v286 | v285;
      unsigned int v235 = a9 + a7;
      int v234 = v282;
      int v159 = v284;
      int v279 = v283;
      int v252 = (v150 - 1) & a8;
      int v254 = (v150 - 1) & (a10 + a8);
      unsigned int v250 = v150 - v252;
      int v160 = ~(-1 << v155);
      int v248 = v284;
      int v249 = v275 | v155;
      unsigned int v261 = v155;
      int v241 = 1 << v23;
      char v242 = v23;
      do
      {
        int v240 = v158;
        int v161 = 0;
        int v162 = 0;
        unsigned int v163 = (v157 + v236) << v239;
        int v164 = a9;
        if (v235 >= (v157 + v236 + 1) << v239) {
          int v164 = v237 - ((v237 - 1) & a7);
        }
        int v165 = 1 << v239;
        if (v235 < (v157 + v236 + 1) << v239) {
          int v165 = (v237 - 1) & (a9 + a7);
        }
        int v166 = v234 + v157;
        int v167 = v157 << v239;
        if (v163 >= v19) {
          int v168 = v165;
        }
        else {
          int v168 = v164;
        }
        if (v163 >= v19) {
          int v169 = 0;
        }
        else {
          int v169 = (v237 - 1) & a7;
        }
        int v244 = &v245[2 * (v169 + v167)];
        do
        {
          int v170 = v279 + v161;
          if (v280)
          {
            int v171 = v277;
            if (v277)
            {
              int v172 = 0;
              int v171 = 0;
              int v173 = 1;
              BOOL v174 = v263;
              BOOL v175 = v265;
              int v177 = v267;
              int v176 = v269;
              do
              {
                --v176;
                if (v175) {
                  v171 |= (v173 & v166) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v171 |= (v173 & v170) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            int v171 = v277;
            if (v277)
            {
              int v178 = 0;
              int v171 = 0;
              int v179 = 1;
              BOOL v181 = v263;
              BOOL v180 = v265;
              int v182 = v267;
              int v183 = v269;
              do
              {
                --v182;
                if (v181) {
                  v171 |= (v179 & v170) << v178;
                }
                else {
                  int v182 = 0;
                }
                if (v181) {
                  ++v178;
                }
                --v183;
                if (v180) {
                  v171 |= (v179 & v166) << v178;
                }
                else {
                  int v183 = 0;
                }
                if (v180) {
                  ++v178;
                }
                v179 *= 2;
                --v178;
                BOOL v180 = v183 != 0;
                BOOL v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          int v184 = *(_DWORD *)(v147 + 4 * ((v171 + v159) | ((v171 + v159) >> 8 << 9)));
          if (v184 < 0)
          {
            unint64_t v185 = v147 - *((void *)a13 + 3) + ((unint64_t)(v184 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v186 = a13[2];
            if (result > v186)
            {
              uint64_t result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v155 = v261;
              unsigned int v150 = v241;
              char v23 = v242;
              uint64_t v17 = a11;
              unsigned int v149 = a8;
              int v148 = a10;
              uint64_t v147 = v259;
              v185 += result;
            }
            unsigned int v187 = (v161 + v257) << v23;
            unsigned int v188 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              unsigned int v189 = v150;
            }
            else
            {
              unsigned int v188 = v148;
              unsigned int v189 = v254;
            }
            if (v187 >= v149) {
              int v190 = 0;
            }
            else {
              int v190 = v252;
            }
            if (v187 >= v149) {
              unsigned int v188 = v189;
            }
            if (!v249)
            {
              uint64_t v208 = 0;
              uint64_t v192 = 0;
              uint64_t v199 = 0;
              uint64_t v215 = 0;
              int v159 = v248;
              if (!v188) {
                goto LABEL_191;
              }
LABEL_263:
              if (v168)
              {
                int v222 = 0;
                int v223 = (_OWORD *)((char *)v244 + (v190 + (v161 << v23)) * v17);
                do
                {
                  int v224 = v168;
                  unsigned int v225 = v223;
                  uint64_t v226 = v208;
                  do
                  {
                    uint64_t result = v185 + 32 * (v226 + v215);
                    long long v227 = *(_OWORD *)(result + 16);
                    *unsigned int v225 = *(_OWORD *)result;
                    v225[1] = v227;
                    v225 += 2;
                    uint64_t v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  uint64_t v215 = (v215 - v199) & v199;
                  int v223 = (_OWORD *)((char *)v223 + v17);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_191;
            }
            unsigned int v191 = 0;
            uint64_t v192 = 0;
            int v193 = 1;
            BOOL v194 = v271;
            BOOL v195 = v273;
            unsigned int v196 = v155;
            unsigned int v197 = v275;
            do
            {
              --v196;
              if (v195) {
                v192 |= (unint64_t)(v193 & v160) << v191++;
              }
              else {
                unsigned int v196 = 0;
              }
              --v197;
              if (!v194) {
                unsigned int v197 = 0;
              }
              v193 *= 2;
              unsigned int v191 = (__PAIR64__(v191, v194) - 1) >> 32;
              BOOL v194 = v197 != 0;
              BOOL v195 = v196 != 0;
            }
            while (v197 | v196);
            int v198 = 0;
            uint64_t v199 = 0;
            int v200 = 1;
            BOOL v201 = v271;
            BOOL v202 = v273;
            unsigned int v203 = v155;
            unsigned int v204 = v275;
            do
            {
              --v203;
              int v205 = v202;
              if (!v205) {
                unsigned int v203 = 0;
              }
              int v206 = v198 + v205;
              --v204;
              if (v201) {
                v199 |= (unint64_t)(v200 & ~(-1 << v275)) << v206++;
              }
              else {
                unsigned int v204 = 0;
              }
              v200 *= 2;
              int v198 = v206 - 1;
              BOOL v201 = v204 != 0;
              BOOL v202 = v203 != 0;
            }
            while (v204 | v203);
            unsigned int v207 = 0;
            uint64_t v208 = 0;
            int v209 = 1;
            BOOL v211 = v271;
            BOOL v210 = v273;
            unsigned int v212 = v155;
            unsigned int v213 = v275;
            do
            {
              --v212;
              if (v210) {
                v208 |= (unint64_t)(v209 & v169) << v207++;
              }
              else {
                unsigned int v212 = 0;
              }
              --v213;
              if (!v211) {
                unsigned int v213 = 0;
              }
              v209 *= 2;
              unsigned int v207 = (__PAIR64__(v207, v211) - 1) >> 32;
              BOOL v211 = v213 != 0;
              BOOL v210 = v212 != 0;
            }
            while (v213 | v212);
            int v214 = 0;
            uint64_t v215 = 0;
            int v216 = 1;
            LOBYTE(result) = v271;
            BOOL v217 = v273;
            unsigned int v218 = v155;
            unsigned int v219 = v275;
            do
            {
              --v218;
              int v220 = v217;
              if (!v220) {
                unsigned int v218 = 0;
              }
              int v221 = v214 + v220;
              --v219;
              if (result) {
                v215 |= (unint64_t)(v216 & v190) << v221++;
              }
              else {
                unsigned int v219 = 0;
              }
              v216 *= 2;
              int v214 = v221 - 1;
              uint64_t result = v219 != 0;
              BOOL v217 = v218 != 0;
            }
            while (v219 | v218);
            unsigned int v155 = v261;
            int v159 = v248;
            if (v188) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v161 = (unsigned __int16)++v162;
        }
        while (v151 > (unsigned __int16)v162);
        int v158 = v240 + 1;
        unsigned int v157 = (unsigned __int16)(v240 + 1);
        unsigned int v19 = a7;
      }
      while (v238 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,4u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v226 = a9;
        long long v227 = v13;
        uint64_t v228 = v47;
        do
        {
          *v227++ = *(_OWORD *)(result + 16 * (v228 + v54));
          uint64_t v228 = (v228 - v29) & v29;
          --v226;
        }
        while (v226);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v254 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v257 = a8 >> v66;
    unsigned int v259 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v255 = a10 + a8;
    unsigned int v251 = (v69 - 1 + a10 + a8) >> v66;
    char v253 = v66;
    if (a8 >> v66 >= v251) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v259 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v267 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v257;
LABEL_89:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v257;
    int v265 = v85 * v250;
    unsigned int v261 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v259;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v259 - v248;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v253;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v263 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v267;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v273 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v269;
      if (v273 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v271)
      {
        unsigned int v85 = v261;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v261 == v251) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      int v134 = (_OWORD *)((char *)&a2[v100 + ((v94 - v267) << v67) - v84] + v263);
      uint64_t v135 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v254;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          *v137++ = *(_OWORD *)(v135 + 16 * (v138 + v125));
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        int v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v240 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v234 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v234 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v145 = v254;
  unsigned int v147 = a8;
  int v146 = a10;
  unsigned int v233 = v282;
  if (v282)
  {
    unsigned int v148 = 1 << v23;
    unsigned int v149 = v283;
    int v264 = v280;
    BOOL v260 = v280 != 0;
    int v262 = v281;
    BOOL v258 = v281 != 0;
    int v232 = 1 << v234;
    if (1 << v234 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v234;
    }
    if (v148 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v268 = v153 != 0;
    unsigned int v270 = v154;
    BOOL v266 = v154 != 0;
    if (v283)
    {
      unsigned int v155 = 0;
      int v156 = 0;
      unsigned int v231 = a7 >> v234;
      unsigned int v252 = a8 >> v23;
      int v275 = v284;
      int v272 = v281 | v280;
      unsigned int v230 = a9 + a7;
      int v229 = v277;
      int v157 = v279;
      int v274 = v278;
      int v247 = (v148 - 1) & a8;
      int v249 = (v148 - 1) & (a10 + a8);
      unsigned int v245 = v148 - v247;
      int v158 = ~(-1 << v153);
      int v243 = v279;
      int v244 = v270 | v153;
      unsigned int v256 = v153;
      int v236 = 1 << v23;
      char v237 = v23;
      do
      {
        int v235 = v156;
        int v159 = 0;
        int v160 = 0;
        unsigned int v161 = (v155 + v231) << v234;
        int v162 = a9;
        if (v230 >= (v155 + v231 + 1) << v234) {
          int v162 = v232 - ((v232 - 1) & a7);
        }
        int v163 = 1 << v234;
        if (v230 < (v155 + v231 + 1) << v234) {
          int v163 = (v232 - 1) & (a9 + a7);
        }
        int v164 = v229 + v155;
        int v165 = v155 << v234;
        if (v161 >= v19) {
          int v166 = v163;
        }
        else {
          int v166 = v162;
        }
        if (v161 >= v19) {
          int v167 = 0;
        }
        else {
          int v167 = (v232 - 1) & a7;
        }
        char v239 = &v240[v167 + v165];
        do
        {
          int v168 = v274 + v159;
          if (v275)
          {
            int v169 = v272;
            if (v272)
            {
              int v170 = 0;
              int v169 = 0;
              int v171 = 1;
              BOOL v172 = v258;
              BOOL v173 = v260;
              int v175 = v262;
              int v174 = v264;
              do
              {
                --v174;
                if (v173) {
                  v169 |= (v171 & v164) << v170;
                }
                else {
                  int v174 = 0;
                }
                if (v173) {
                  ++v170;
                }
                --v175;
                if (v172) {
                  v169 |= (v171 & v168) << v170;
                }
                else {
                  int v175 = 0;
                }
                if (v172) {
                  ++v170;
                }
                v171 *= 2;
                --v170;
                BOOL v172 = v175 != 0;
                BOOL v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            int v169 = v272;
            if (v272)
            {
              int v176 = 0;
              int v169 = 0;
              int v177 = 1;
              BOOL v179 = v258;
              BOOL v178 = v260;
              int v180 = v262;
              int v181 = v264;
              do
              {
                --v180;
                if (v179) {
                  v169 |= (v177 & v168) << v176;
                }
                else {
                  int v180 = 0;
                }
                if (v179) {
                  ++v176;
                }
                --v181;
                if (v178) {
                  v169 |= (v177 & v164) << v176;
                }
                else {
                  int v181 = 0;
                }
                if (v178) {
                  ++v176;
                }
                v177 *= 2;
                --v176;
                BOOL v178 = v181 != 0;
                BOOL v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          int v182 = *(_DWORD *)(v145 + 4 * ((v169 + v157) | ((v169 + v157) >> 8 << 9)));
          if (v182 < 0)
          {
            unint64_t v183 = v145 - *((void *)a13 + 3) + ((unint64_t)(v182 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v184 = a13[2];
            if (result > v184)
            {
              uint64_t result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v256;
              unsigned int v148 = v236;
              char v23 = v237;
              uint64_t v17 = a11;
              unsigned int v147 = a8;
              int v146 = a10;
              uint64_t v145 = v254;
              v183 += result;
            }
            unsigned int v185 = (v159 + v252) << v23;
            unsigned int v186 = v245;
            if (a10 + a8 >= (v159 + v252 + 1) << v23)
            {
              unsigned int v187 = v148;
            }
            else
            {
              unsigned int v186 = v146;
              unsigned int v187 = v249;
            }
            if (v185 >= v147) {
              int v188 = 0;
            }
            else {
              int v188 = v247;
            }
            if (v185 >= v147) {
              unsigned int v186 = v187;
            }
            if (!v244)
            {
              uint64_t v206 = 0;
              uint64_t v190 = 0;
              uint64_t v197 = 0;
              uint64_t v213 = 0;
              int v157 = v243;
              if (!v186) {
                goto LABEL_191;
              }
LABEL_263:
              if (v166)
              {
                int v220 = 0;
                int v221 = (_OWORD *)((char *)v239 + (v188 + (v159 << v23)) * v17);
                do
                {
                  int v222 = v166;
                  int v223 = v221;
                  uint64_t v224 = v206;
                  do
                  {
                    uint64_t result = v224 + v213;
                    *v223++ = *(_OWORD *)(v183 + 16 * (v224 + v213));
                    uint64_t v224 = (v224 - v190) & v190;
                    --v222;
                  }
                  while (v222);
                  uint64_t v213 = (v213 - v197) & v197;
                  int v221 = (_OWORD *)((char *)v221 + v17);
                  ++v220;
                }
                while (v220 != v186);
              }
              goto LABEL_191;
            }
            unsigned int v189 = 0;
            uint64_t v190 = 0;
            int v191 = 1;
            BOOL v192 = v266;
            BOOL v193 = v268;
            unsigned int v194 = v153;
            unsigned int v195 = v270;
            do
            {
              --v194;
              if (v193) {
                v190 |= (unint64_t)(v191 & v158) << v189++;
              }
              else {
                unsigned int v194 = 0;
              }
              --v195;
              if (!v192) {
                unsigned int v195 = 0;
              }
              v191 *= 2;
              unsigned int v189 = (__PAIR64__(v189, v192) - 1) >> 32;
              BOOL v192 = v195 != 0;
              BOOL v193 = v194 != 0;
            }
            while (v195 | v194);
            int v196 = 0;
            uint64_t v197 = 0;
            int v198 = 1;
            BOOL v199 = v266;
            BOOL v200 = v268;
            unsigned int v201 = v153;
            unsigned int v202 = v270;
            do
            {
              --v201;
              int v203 = v200;
              if (!v203) {
                unsigned int v201 = 0;
              }
              int v204 = v196 + v203;
              --v202;
              if (v199) {
                v197 |= (unint64_t)(v198 & ~(-1 << v270)) << v204++;
              }
              else {
                unsigned int v202 = 0;
              }
              v198 *= 2;
              int v196 = v204 - 1;
              BOOL v199 = v202 != 0;
              BOOL v200 = v201 != 0;
            }
            while (v202 | v201);
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            int v207 = 1;
            BOOL v209 = v266;
            BOOL v208 = v268;
            unsigned int v210 = v153;
            unsigned int v211 = v270;
            do
            {
              --v210;
              if (v208) {
                v206 |= (unint64_t)(v207 & v167) << v205++;
              }
              else {
                unsigned int v210 = 0;
              }
              --v211;
              if (!v209) {
                unsigned int v211 = 0;
              }
              v207 *= 2;
              unsigned int v205 = (__PAIR64__(v205, v209) - 1) >> 32;
              BOOL v209 = v211 != 0;
              BOOL v208 = v210 != 0;
            }
            while (v211 | v210);
            int v212 = 0;
            uint64_t v213 = 0;
            int v214 = 1;
            LOBYTE(result) = v266;
            BOOL v215 = v268;
            unsigned int v216 = v153;
            unsigned int v217 = v270;
            do
            {
              --v216;
              int v218 = v215;
              if (!v218) {
                unsigned int v216 = 0;
              }
              int v219 = v212 + v218;
              --v217;
              if (result) {
                v213 |= (unint64_t)(v214 & v188) << v219++;
              }
              else {
                unsigned int v217 = 0;
              }
              v214 *= 2;
              int v212 = v219 - 1;
              uint64_t result = v217 != 0;
              BOOL v215 = v216 != 0;
            }
            while (v217 | v216);
            unsigned int v153 = v256;
            int v157 = v243;
            if (v186) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v159 = (unsigned __int16)++v160;
        }
        while (v149 > (unsigned __int16)v160);
        int v156 = v235 + 1;
        unsigned int v155 = (unsigned __int16)(v235 + 1);
        unsigned int v19 = a7;
      }
      while (v233 > v155);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,4ul,2u,(TwiddleOrder)1>>(uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        uint64_t result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(void *)(v16 + 8 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (void *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    uint64_t result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    uint64_t result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      uint64_t result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (void *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(void *)(v134 + 8 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (void *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        unsigned int v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              uint64_t result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (void *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    uint64_t result = *(void *)(v179 + 8 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (uint64_t *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              uint64_t result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,8u,(TwiddleOrder)1>>(uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        uint64_t result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(void *)(v16 + 8 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (void *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    uint64_t result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    uint64_t result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      uint64_t result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (void *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(void *)(v134 + 8 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (void *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        unsigned int v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              uint64_t result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (void *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    uint64_t result = *(void *)(v179 + 8 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (uint64_t *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              uint64_t result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,4u,(TwiddleOrder)1>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        uint64_t result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(_DWORD *)(v16 + 4 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (_DWORD *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    uint64_t result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    uint64_t result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      uint64_t result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (_DWORD *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(_DWORD *)(v134 + 4 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (_DWORD *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        unsigned int v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              uint64_t result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (_DWORD *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    uint64_t result = *(unsigned int *)(v179 + 4 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (_DWORD *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              uint64_t result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,1ul,2u,(TwiddleOrder)1>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        uint64_t result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(_WORD *)(v16 + 2 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (_WORD *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    uint64_t result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    uint64_t result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      uint64_t result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (_WORD *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(_WORD *)(v134 + 2 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (_WORD *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        unsigned int v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              uint64_t result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (_WORD *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    uint64_t result = *(unsigned __int16 *)(v179 + 2 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (_WORD *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              uint64_t result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v226 = a9;
        int v227 = v13;
        uint64_t v228 = v47;
        do
        {
          *v227++ = *(_OWORD *)(result + 16 * (v228 + v54));
          uint64_t v228 = (v228 - v29) & v29;
          --v226;
        }
        while (v226);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v254 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v257 = a8 >> v66;
    unsigned int v259 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v255 = a10 + a8;
    unsigned int v251 = (v69 - 1 + a10 + a8) >> v66;
    char v253 = v66;
    if (a8 >> v66 >= v251) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v259 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v267 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v257;
LABEL_89:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v257;
    int v265 = v85 * v250;
    unsigned int v261 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v259;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v259 - v248;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v253;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v263 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v267;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v273 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v269;
      if (v273 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v271)
      {
        unsigned int v85 = v261;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v261 == v251) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      uint64_t v134 = (_OWORD *)((char *)&a2[v100 + ((v94 - v267) << v67) - v84] + v263);
      uint64_t v135 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v254;
      do
      {
        int v136 = v99;
        unsigned int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          *v137++ = *(_OWORD *)(v135 + 16 * (v138 + v125));
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        uint64_t v134 = (_OWORD *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v240 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v234 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v234 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v145 = v254;
  unsigned int v147 = a8;
  int v146 = a10;
  unsigned int v233 = v282;
  if (v282)
  {
    unsigned int v148 = 1 << v23;
    unsigned int v149 = v283;
    int v264 = v280;
    BOOL v260 = v280 != 0;
    int v262 = v281;
    BOOL v258 = v281 != 0;
    int v232 = 1 << v234;
    if (1 << v234 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v234;
    }
    if (v148 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v268 = v153 != 0;
    unsigned int v270 = v154;
    BOOL v266 = v154 != 0;
    if (v283)
    {
      unsigned int v155 = 0;
      int v156 = 0;
      unsigned int v231 = a7 >> v234;
      unsigned int v252 = a8 >> v23;
      int v275 = v284;
      int v272 = v281 | v280;
      unsigned int v230 = a9 + a7;
      int v229 = v277;
      int v157 = v279;
      int v274 = v278;
      int v247 = (v148 - 1) & a8;
      int v249 = (v148 - 1) & (a10 + a8);
      unsigned int v245 = v148 - v247;
      int v158 = ~(-1 << v153);
      int v243 = v279;
      int v244 = v270 | v153;
      unsigned int v256 = v153;
      int v236 = 1 << v23;
      char v237 = v23;
      do
      {
        int v235 = v156;
        int v159 = 0;
        int v160 = 0;
        unsigned int v161 = (v155 + v231) << v234;
        int v162 = a9;
        if (v230 >= (v155 + v231 + 1) << v234) {
          int v162 = v232 - ((v232 - 1) & a7);
        }
        int v163 = 1 << v234;
        if (v230 < (v155 + v231 + 1) << v234) {
          int v163 = (v232 - 1) & (a9 + a7);
        }
        int v164 = v229 + v155;
        int v165 = v155 << v234;
        if (v161 >= v19) {
          int v166 = v163;
        }
        else {
          int v166 = v162;
        }
        if (v161 >= v19) {
          int v167 = 0;
        }
        else {
          int v167 = (v232 - 1) & a7;
        }
        char v239 = &v240[v167 + v165];
        do
        {
          int v168 = v274 + v159;
          if (v275)
          {
            int v169 = v272;
            if (v272)
            {
              int v170 = 0;
              int v169 = 0;
              int v171 = 1;
              BOOL v172 = v258;
              BOOL v173 = v260;
              int v175 = v262;
              int v174 = v264;
              do
              {
                --v174;
                if (v173) {
                  v169 |= (v171 & v164) << v170;
                }
                else {
                  int v174 = 0;
                }
                if (v173) {
                  ++v170;
                }
                --v175;
                if (v172) {
                  v169 |= (v171 & v168) << v170;
                }
                else {
                  int v175 = 0;
                }
                if (v172) {
                  ++v170;
                }
                v171 *= 2;
                --v170;
                BOOL v172 = v175 != 0;
                BOOL v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            int v169 = v272;
            if (v272)
            {
              int v176 = 0;
              int v169 = 0;
              int v177 = 1;
              BOOL v179 = v258;
              BOOL v178 = v260;
              int v180 = v262;
              int v181 = v264;
              do
              {
                --v180;
                if (v179) {
                  v169 |= (v177 & v168) << v176;
                }
                else {
                  int v180 = 0;
                }
                if (v179) {
                  ++v176;
                }
                --v181;
                if (v178) {
                  v169 |= (v177 & v164) << v176;
                }
                else {
                  int v181 = 0;
                }
                if (v178) {
                  ++v176;
                }
                v177 *= 2;
                --v176;
                BOOL v178 = v181 != 0;
                BOOL v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          int v182 = *(_DWORD *)(v145 + 4 * ((v169 + v157) | ((v169 + v157) >> 8 << 9)));
          if (v182 < 0)
          {
            unint64_t v183 = v145 - *((void *)a13 + 3) + ((unint64_t)(v182 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v184 = a13[2];
            if (result > v184)
            {
              uint64_t result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v256;
              unsigned int v148 = v236;
              char v23 = v237;
              uint64_t v17 = a11;
              unsigned int v147 = a8;
              int v146 = a10;
              uint64_t v145 = v254;
              v183 += result;
            }
            unsigned int v185 = (v159 + v252) << v23;
            unsigned int v186 = v245;
            if (a10 + a8 >= (v159 + v252 + 1) << v23)
            {
              unsigned int v187 = v148;
            }
            else
            {
              unsigned int v186 = v146;
              unsigned int v187 = v249;
            }
            if (v185 >= v147) {
              int v188 = 0;
            }
            else {
              int v188 = v247;
            }
            if (v185 >= v147) {
              unsigned int v186 = v187;
            }
            if (!v244)
            {
              uint64_t v206 = 0;
              uint64_t v190 = 0;
              uint64_t v197 = 0;
              uint64_t v213 = 0;
              int v157 = v243;
              if (!v186) {
                goto LABEL_191;
              }
LABEL_263:
              if (v166)
              {
                int v220 = 0;
                uint64_t v221 = (_OWORD *)((char *)v239 + (v188 + (v159 << v23)) * v17);
                do
                {
                  int v222 = v166;
                  int v223 = v221;
                  uint64_t v224 = v206;
                  do
                  {
                    uint64_t result = v224 + v213;
                    *v223++ = *(_OWORD *)(v183 + 16 * (v224 + v213));
                    uint64_t v224 = (v224 - v190) & v190;
                    --v222;
                  }
                  while (v222);
                  uint64_t v213 = (v213 - v197) & v197;
                  uint64_t v221 = (_OWORD *)((char *)v221 + v17);
                  ++v220;
                }
                while (v220 != v186);
              }
              goto LABEL_191;
            }
            unsigned int v189 = 0;
            uint64_t v190 = 0;
            int v191 = 1;
            BOOL v192 = v266;
            BOOL v193 = v268;
            unsigned int v194 = v153;
            unsigned int v195 = v270;
            do
            {
              --v194;
              if (v193) {
                v190 |= (unint64_t)(v191 & v158) << v189++;
              }
              else {
                unsigned int v194 = 0;
              }
              --v195;
              if (!v192) {
                unsigned int v195 = 0;
              }
              v191 *= 2;
              unsigned int v189 = (__PAIR64__(v189, v192) - 1) >> 32;
              BOOL v192 = v195 != 0;
              BOOL v193 = v194 != 0;
            }
            while (v195 | v194);
            int v196 = 0;
            uint64_t v197 = 0;
            int v198 = 1;
            BOOL v199 = v266;
            BOOL v200 = v268;
            unsigned int v201 = v153;
            unsigned int v202 = v270;
            do
            {
              --v201;
              int v203 = v200;
              if (!v203) {
                unsigned int v201 = 0;
              }
              int v204 = v196 + v203;
              --v202;
              if (v199) {
                v197 |= (unint64_t)(v198 & ~(-1 << v270)) << v204++;
              }
              else {
                unsigned int v202 = 0;
              }
              v198 *= 2;
              int v196 = v204 - 1;
              BOOL v199 = v202 != 0;
              BOOL v200 = v201 != 0;
            }
            while (v202 | v201);
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            int v207 = 1;
            BOOL v209 = v266;
            BOOL v208 = v268;
            unsigned int v210 = v153;
            unsigned int v211 = v270;
            do
            {
              --v210;
              if (v208) {
                v206 |= (unint64_t)(v207 & v167) << v205++;
              }
              else {
                unsigned int v210 = 0;
              }
              --v211;
              if (!v209) {
                unsigned int v211 = 0;
              }
              v207 *= 2;
              unsigned int v205 = (__PAIR64__(v205, v209) - 1) >> 32;
              BOOL v209 = v211 != 0;
              BOOL v208 = v210 != 0;
            }
            while (v211 | v210);
            int v212 = 0;
            uint64_t v213 = 0;
            int v214 = 1;
            LOBYTE(result) = v266;
            BOOL v215 = v268;
            unsigned int v216 = v153;
            unsigned int v217 = v270;
            do
            {
              --v216;
              int v218 = v215;
              if (!v218) {
                unsigned int v216 = 0;
              }
              int v219 = v212 + v218;
              --v217;
              if (result) {
                v213 |= (unint64_t)(v214 & v188) << v219++;
              }
              else {
                unsigned int v217 = 0;
              }
              v214 *= 2;
              int v212 = v219 - 1;
              uint64_t result = v217 != 0;
              BOOL v215 = v216 != 0;
            }
            while (v217 | v216);
            unsigned int v153 = v256;
            int v157 = v243;
            if (v186) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v159 = (unsigned __int16)++v160;
        }
        while (v149 > (unsigned __int16)v160);
        int v156 = v235 + 1;
        unsigned int v155 = (unsigned __int16)(v235 + 1);
        unsigned int v19 = a7;
      }
      while (v233 > v155);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>(uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>(uint64_t result, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        uint64_t result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(void *)(v16 + 8 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (void *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    uint64_t result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    uint64_t result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      uint64_t result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (void *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(void *)(v134 + 8 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (void *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        unsigned int v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              uint64_t result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (void *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    uint64_t result = *(void *)(v179 + 8 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (uint64_t *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              uint64_t result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v23 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = 0;
    }
    unsigned int v25 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26 | v24)
    {
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      BOOL v29 = v24 != 0;
      BOOL v30 = v26 != 0;
      BOOL v31 = v24 != 0;
      BOOL v32 = v26 != 0;
      int v33 = 1;
      unsigned int v34 = v24;
      unsigned int v35 = v26;
      do
      {
        --v34;
        if (v31) {
          v28 |= (unint64_t)(v33 & ~(-1 << v24)) << v27++;
        }
        else {
          unsigned int v34 = 0;
        }
        if (v32) {
          --v35;
        }
        else {
          unsigned int v35 = 0;
        }
        v33 *= 2;
        unsigned int v27 = (__PAIR64__(v27, v32) - 1) >> 32;
        BOOL v32 = v35 != 0;
        BOOL v31 = v34 != 0;
      }
      while (v35 | v34);
      int v36 = 0;
      uint64_t v37 = 0;
      int v38 = 1;
      BOOL v39 = v24 != 0;
      BOOL v40 = v26 != 0;
      unsigned int v41 = v24;
      unsigned int v42 = v26;
      do
      {
        --v41;
        int v43 = v39;
        if (!v43) {
          unsigned int v41 = 0;
        }
        int v44 = v36 + v43;
        --v42;
        if (v40) {
          v37 |= (unint64_t)(v38 & ~(-1 << v26)) << v44++;
        }
        else {
          unsigned int v42 = 0;
        }
        v38 *= 2;
        int v36 = v44 - 1;
        BOOL v40 = v42 != 0;
        BOOL v39 = v41 != 0;
      }
      while (v42 | v41);
      unsigned int v45 = 0;
      uint64_t v46 = 0;
      BOOL v47 = v24 != 0;
      BOOL v48 = v26 != 0;
      int v49 = 1;
      unsigned int v50 = v24;
      unsigned int v51 = v26;
      do
      {
        --v50;
        if (v47) {
          v46 |= (unint64_t)(v49 & a7) << v45++;
        }
        else {
          unsigned int v50 = 0;
        }
        --v51;
        if (!v48) {
          unsigned int v51 = 0;
        }
        v49 *= 2;
        unsigned int v45 = (__PAIR64__(v45, v48) - 1) >> 32;
        BOOL v48 = v51 != 0;
        BOOL v47 = v50 != 0;
      }
      while (v51 | v50);
      int v52 = 0;
      uint64_t v53 = 0;
      int v54 = 1;
      do
      {
        --v24;
        int v55 = v29;
        if (!v55) {
          unsigned int v24 = 0;
        }
        int v56 = v52 + v55;
        --v26;
        if (v30)
        {
          v53 |= (unint64_t)(v54 & a8) << v56;
          int v57 = v56 + 1;
        }
        else
        {
          unsigned int v26 = 0;
          int v57 = v56;
        }
        v54 *= 2;
        int v52 = v57 - 1;
        BOOL v30 = v26 != 0;
        BOOL v29 = v24 != 0;
        uint64_t result = v26 | v24;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v53 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v223 = a9;
        uint64_t v224 = a2;
        uint64_t v225 = v46;
        do
        {
          *v224++ = *(_DWORD *)(v16 + 4 * (v225 + v53));
          uint64_t v225 = (v225 - v28) & v28;
          --v223;
        }
        while (v223);
        uint64_t v53 = (v53 - v37) & v37;
        a2 = (_DWORD *)((char *)a2 + a11);
      }
    }
    return result;
  }
  int v240 = a2;
  unsigned int v241 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v58 = *((unsigned __int8 *)a12 + 13);
    int v59 = *((unsigned __int8 *)a12 + 12);
    unsigned int v60 = 1 << v58;
    unsigned int v61 = a5 >> v59;
    unsigned int v62 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v62 = 0;
    }
    char v63 = v59 + v58;
    uint64_t result = v59 + v58 + v62;
    if (a6 >> v58) {
      BOOL v64 = 1;
    }
    else {
      BOOL v64 = 1 << v59 >= a5;
    }
    if (v64)
    {
      LOBYTE(v65) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v59) = v59 + v58 + v62;
      int v65 = -v62;
    }
    unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v66) = 0;
    }
    if (v60 < a6 && v61 == 0) {
      LOBYTE(v65) = v63 - v66;
    }
    else {
      LOBYTE(v66) = v59;
    }
    int v68 = 1 << v65;
    char v69 = *((unsigned char *)a12 + 15);
    unsigned int v70 = 1 << v69;
    if (v69) {
      BOOL v71 = v70 > a3;
    }
    else {
      BOOL v71 = 1;
    }
    BOOL v72 = v71 || v70 > a4;
    int v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72) {
      int v74 = a3;
    }
    else {
      int v74 = v73;
    }
    unsigned int v255 = 1 << v65;
    int v75 = v68 - 1;
    char v251 = v65;
    unsigned int v252 = a10 + a8;
    unsigned int v254 = a8 >> v65;
    unsigned int v249 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v249) {
      return result;
    }
    uint64_t result = a7 >> v66;
    int v76 = (1 << v66) - 1;
    unsigned int v270 = a9 + a7;
    if (1 << v66 >= a5) {
      unsigned int v77 = a5;
    }
    else {
      unsigned int v77 = 1 << v66;
    }
    unsigned int v78 = 1 << v65;
    if (v255 >= a6) {
      unsigned int v78 = a6;
    }
    unsigned int v79 = 32 - __clz(v77 - 1);
    unsigned int v80 = v77 >= 2 ? v79 : 0;
    unsigned int v81 = 32 - __clz(v78 - 1);
    unsigned int v82 = v78 >= 2 ? v81 : 0;
    unsigned int v263 = a7 >> v66;
    unsigned int v268 = (v76 + a9 + a7) >> v66;
    if (result >= v268) {
      return result;
    }
    unsigned int v247 = (v74 + ~(-1 << v66)) >> v66;
    uint64_t v83 = v76 & a7;
    int v266 = v76 & v270;
    int v243 = v75 & v252;
    uint64_t v245 = v75 & a8;
    unsigned int v84 = v254;
LABEL_88:
    unsigned int v85 = v84 << v251;
    unsigned int v86 = v84 - v254;
    int v261 = v84 * v247;
    unsigned int v257 = v84 + 1;
    BOOL v87 = v252 >= (v84 + 1) << v251;
    unsigned int v88 = v255;
    if (!v87) {
      unsigned int v88 = v243;
    }
    int v89 = v255 - v245;
    if (!v87) {
      int v89 = v18;
    }
    int v90 = v86 << v251;
    if (v85 >= a8) {
      unsigned int v91 = 0;
    }
    else {
      unsigned int v91 = v245;
    }
    if (v85 >= a8) {
      unsigned int v92 = v88;
    }
    else {
      unsigned int v92 = v89;
    }
    uint64_t v259 = (v91 + v90 - v245) * a11;
    unsigned int v93 = v263;
    while (1)
    {
      unsigned int v94 = v93 << v66;
      unsigned int v95 = v93 + 1;
      int v96 = a9;
      if (v270 >= (v93 + 1) << v66) {
        int v96 = (1 << v66) - v83;
      }
      int v97 = 1 << v66;
      if (v270 < v95 << v66) {
        int v97 = v266;
      }
      if (v94 >= a7) {
        unsigned int v98 = 0;
      }
      else {
        unsigned int v98 = v83;
      }
      if (v94 < a7) {
        int v97 = v96;
      }
      if (v82 | v80) {
        break;
      }
      uint64_t v117 = 0;
      uint64_t v100 = 0;
      uint64_t v107 = 0;
      uint64_t v124 = 0;
      if (v92) {
        goto LABEL_145;
      }
LABEL_99:
      unsigned int v93 = v95;
      if (v95 == v268)
      {
        unsigned int v84 = v257;
        int v18 = a10;
        if (v257 == v249) {
          return result;
        }
        goto LABEL_88;
      }
    }
    unsigned int v99 = 0;
    uint64_t v100 = 0;
    int v101 = 1;
    BOOL v102 = v80 != 0;
    BOOL v103 = v82 != 0;
    unsigned int v104 = v80;
    unsigned int v105 = v82;
    do
    {
      --v104;
      if (v102) {
        v100 |= (unint64_t)(v101 & ~(-1 << v80)) << v99++;
      }
      else {
        unsigned int v104 = 0;
      }
      --v105;
      if (!v103) {
        unsigned int v105 = 0;
      }
      v101 *= 2;
      unsigned int v99 = (__PAIR64__(v99, v103) - 1) >> 32;
      BOOL v103 = v105 != 0;
      BOOL v102 = v104 != 0;
    }
    while (v105 | v104);
    int v106 = 0;
    uint64_t v107 = 0;
    int v108 = 1;
    BOOL v109 = v80 != 0;
    BOOL v110 = v82 != 0;
    unsigned int v111 = v80;
    unsigned int v112 = v82;
    do
    {
      int v113 = v109;
      if (v113) {
        --v111;
      }
      else {
        unsigned int v111 = 0;
      }
      int v114 = v106 + v113;
      if (v110) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      if (v110)
      {
        v107 |= (unint64_t)(v108 & ~(-1 << v82)) << v114;
        int v115 = v114 + 1;
      }
      else
      {
        int v115 = v114;
      }
      v108 *= 2;
      int v106 = v115 - 1;
      BOOL v110 = v112 != 0;
      BOOL v109 = v111 != 0;
    }
    while (v112 | v111);
    unsigned int v116 = 0;
    uint64_t v117 = 0;
    int v118 = 1;
    BOOL v119 = v80 != 0;
    BOOL v120 = v82 != 0;
    unsigned int v121 = v80;
    unsigned int v122 = v82;
    do
    {
      --v121;
      if (v119)
      {
        v117 |= (unint64_t)(v118 & v98) << v116;
        unsigned int v123 = v116 + 1;
      }
      else
      {
        unsigned int v121 = 0;
        unsigned int v123 = v116;
      }
      --v122;
      if (!v120) {
        unsigned int v122 = 0;
      }
      v118 *= 2;
      unsigned int v116 = (__PAIR64__(v123, v120) - 1) >> 32;
      BOOL v120 = v122 != 0;
      BOOL v119 = v121 != 0;
    }
    while (v122 | v121);
    LODWORD(result) = 0;
    uint64_t v124 = 0;
    int v125 = 1;
    BOOL v126 = v80 != 0;
    BOOL v127 = v82 != 0;
    unsigned int v128 = v80;
    unsigned int v129 = v82;
    do
    {
      --v128;
      int v130 = v126;
      if (!v130) {
        unsigned int v128 = 0;
      }
      int v131 = result + v130;
      --v129;
      if (v127) {
        v124 |= (unint64_t)(v125 & v91) << v131++;
      }
      else {
        unsigned int v129 = 0;
      }
      v125 *= 2;
      uint64_t result = (v131 - 1);
      BOOL v127 = v129 != 0;
      BOOL v126 = v128 != 0;
    }
    while (v129 | v128);
    a2 = v240;
    a7 = v241;
    if (!v92) {
      goto LABEL_99;
    }
LABEL_145:
    if (v97)
    {
      int v132 = 0;
      int v133 = (_DWORD *)((char *)&a2[v98 + ((v93 - v263) << v66) - v83] + v259);
      uint64_t v134 = (v93 + v261) * a12[3] * *((unsigned __int8 *)a12 + 9) + v16;
      do
      {
        LODWORD(result) = v97;
        uint64_t v135 = v133;
        uint64_t v136 = v117;
        do
        {
          *v135++ = *(_DWORD *)(v134 + 4 * (v136 + v124));
          uint64_t v136 = (v136 - v100) & v100;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v124 = (v124 - v107) & v107;
        int v133 = (_DWORD *)((char *)v133 + a11);
        ++v132;
      }
      while (v132 != v92);
    }
    goto LABEL_99;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v273);
  char v19 = *((unsigned char *)a12 + 13);
  char v20 = *((unsigned char *)a12 + 12);
  if (1 << v19 >= a6 || a5 >> v20)
  {
    unsigned int v137 = a6 >> v19;
    unsigned int v138 = 1 << v20;
    unsigned int v139 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v139 = 0;
    }
    BOOL v140 = v138 >= a5;
    if (v138 < a5) {
      char v141 = v20 + v19 + v139;
    }
    else {
      char v141 = *((unsigned char *)a12 + 12);
    }
    if (v140) {
      LOBYTE(v142) = *((unsigned char *)a12 + 13);
    }
    else {
      int v142 = -v139;
    }
    if (!v137) {
      char v20 = v141;
    }
    char v233 = v20;
    if (v137) {
      char v22 = *((unsigned char *)a12 + 13);
    }
    else {
      char v22 = v142;
    }
  }
  else
  {
    unsigned int v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v21) = 0;
    }
    char v233 = v21;
    char v22 = v20 + v19 - v21;
  }
  int v143 = a10;
  unsigned int v144 = a8;
  unsigned int v232 = v279;
  if (v279)
  {
    unsigned int v145 = 1 << v22;
    uint64_t v146 = v280;
    int v147 = v277;
    BOOL v260 = v277 != 0;
    int v262 = v278;
    BOOL v258 = v278 != 0;
    int v231 = 1 << v233;
    if (1 << v233 >= a5) {
      unsigned int v148 = a5;
    }
    else {
      unsigned int v148 = 1 << v233;
    }
    if (v145 >= a6) {
      unsigned int v149 = a6;
    }
    else {
      unsigned int v149 = 1 << v22;
    }
    unsigned int v150 = 32 - __clz(v148 - 1);
    if (v148 >= 2) {
      unsigned int v151 = v150;
    }
    else {
      unsigned int v151 = 0;
    }
    unsigned int v152 = 32 - __clz(v149 - 1);
    if (v149 < 2) {
      unsigned int v152 = 0;
    }
    BOOL v265 = v151 != 0;
    unsigned int v267 = v152;
    BOOL v264 = v152 != 0;
    if (v280)
    {
      int v153 = 0;
      unsigned int v230 = a7 >> v233;
      unsigned int v253 = a8 >> v22;
      int v269 = v278 | v277;
      int v272 = v281;
      unsigned int v229 = a9 + a7;
      int v228 = (v231 - 1) & (a9 + a7);
      int v226 = v274;
      int v154 = v276;
      int v271 = v275;
      int v227 = (v231 - 1) & a7;
      int v248 = (v145 - 1) & a8;
      int v250 = (v145 - 1) & (a10 + a8);
      unsigned int v246 = v145 - v248;
      int v155 = ~(-1 << v151);
      int v242 = v276;
      int v244 = v152 | v151;
      int v156 = ~(-1 << v152);
      unsigned int v256 = v151;
      uint64_t v237 = v16;
      int v235 = 1 << v22;
      char v236 = v22;
      do
      {
        int v157 = 0;
        int v158 = v226 + v153;
        unsigned int v159 = (v153 + v230) << v233;
        int v160 = a9;
        if (v229 >= (v153 + v230 + 1) << v233) {
          int v160 = v231 - v227;
        }
        int v161 = 1 << v233;
        if (v229 < (v153 + v230 + 1) << v233) {
          int v161 = v228;
        }
        int v234 = v153;
        if (v159 >= v241) {
          int v162 = v161;
        }
        else {
          int v162 = v160;
        }
        if (v159 >= v241) {
          int v163 = 0;
        }
        else {
          int v163 = v227;
        }
        unsigned int v238 = &v240[v163 + (v153 << v233)];
        do
        {
          int v164 = v271 + v157;
          if (v272)
          {
            int v165 = v269;
            if (v269)
            {
              int v166 = 0;
              int v165 = 0;
              int v167 = 1;
              BOOL v168 = v258;
              BOOL v169 = v260;
              int v170 = v147;
              int v171 = v262;
              do
              {
                --v170;
                if (v169) {
                  v165 |= (v167 & v158) << v166;
                }
                else {
                  int v170 = 0;
                }
                if (v169) {
                  ++v166;
                }
                --v171;
                if (v168) {
                  v165 |= (v167 & v164) << v166;
                }
                else {
                  int v171 = 0;
                }
                if (v168) {
                  ++v166;
                }
                v167 *= 2;
                --v166;
                BOOL v168 = v171 != 0;
                BOOL v169 = v170 != 0;
              }
              while (v171 | v170);
            }
          }
          else
          {
            int v165 = v269;
            if (v269)
            {
              int v172 = 0;
              int v165 = 0;
              int v173 = 1;
              BOOL v175 = v258;
              BOOL v174 = v260;
              int v176 = v262;
              int v177 = v147;
              do
              {
                --v176;
                if (v175) {
                  v165 |= (v173 & v164) << v172;
                }
                else {
                  int v176 = 0;
                }
                if (v175) {
                  ++v172;
                }
                --v177;
                if (v174) {
                  v165 |= (v173 & v158) << v172;
                }
                else {
                  int v177 = 0;
                }
                if (v174) {
                  ++v172;
                }
                v173 *= 2;
                --v172;
                BOOL v174 = v177 != 0;
                BOOL v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          int v178 = *(_DWORD *)(v16 + 4 * ((v165 + v154) | ((v165 + v154) >> 8 << 9)));
          if (v178 < 0)
          {
            unint64_t v179 = v16 - *((void *)a13 + 3) + ((unint64_t)(v178 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v180 = a13[2];
            if (result > v180)
            {
              uint64_t v181 = v146;
              uint64_t result = get_level_offset_within_tail(result, v180, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v151 = v256;
              uint64_t v146 = v181;
              unsigned int v145 = v235;
              char v22 = v236;
              uint64_t v16 = v237;
              uint64_t v17 = a11;
              unsigned int v144 = a8;
              int v143 = a10;
              v179 += result;
            }
            unsigned int v182 = (v157 + v253) << v22;
            unsigned int v183 = v246;
            if (a10 + a8 >= (v157 + v253 + 1) << v22)
            {
              unsigned int v184 = v145;
            }
            else
            {
              unsigned int v183 = v143;
              unsigned int v184 = v250;
            }
            if (v182 >= v144) {
              int v185 = 0;
            }
            else {
              int v185 = v248;
            }
            if (v182 >= v144) {
              unsigned int v183 = v184;
            }
            if (!v244)
            {
              uint64_t v203 = 0;
              uint64_t v187 = 0;
              uint64_t v194 = 0;
              uint64_t v210 = 0;
              int v154 = v242;
              if (!v183) {
                goto LABEL_190;
              }
LABEL_262:
              if (v162)
              {
                int v217 = 0;
                int v218 = (_DWORD *)((char *)v238 + (v185 + (v157 << v22)) * v17);
                do
                {
                  int v219 = v162;
                  int v220 = v218;
                  uint64_t v221 = v203;
                  do
                  {
                    uint64_t result = *(unsigned int *)(v179 + 4 * (v221 + v210));
                    *v220++ = result;
                    uint64_t v221 = (v221 - v187) & v187;
                    --v219;
                  }
                  while (v219);
                  uint64_t v210 = (v210 - v194) & v194;
                  int v218 = (_DWORD *)((char *)v218 + v17);
                  ++v217;
                }
                while (v217 != v183);
              }
              goto LABEL_190;
            }
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            int v188 = 1;
            BOOL v189 = v264;
            BOOL v190 = v265;
            unsigned int v191 = v151;
            unsigned int v192 = v267;
            do
            {
              --v191;
              if (v190) {
                v187 |= (unint64_t)(v188 & v155) << v186++;
              }
              else {
                unsigned int v191 = 0;
              }
              --v192;
              if (!v189) {
                unsigned int v192 = 0;
              }
              v188 *= 2;
              unsigned int v186 = (__PAIR64__(v186, v189) - 1) >> 32;
              BOOL v189 = v192 != 0;
              BOOL v190 = v191 != 0;
            }
            while (v192 | v191);
            int v193 = 0;
            uint64_t v194 = 0;
            int v195 = 1;
            BOOL v196 = v264;
            BOOL v197 = v265;
            unsigned int v198 = v151;
            unsigned int v199 = v267;
            do
            {
              --v198;
              int v200 = v197;
              if (!v200) {
                unsigned int v198 = 0;
              }
              int v201 = v193 + v200;
              --v199;
              if (v196) {
                v194 |= (unint64_t)(v195 & v156) << v201++;
              }
              else {
                unsigned int v199 = 0;
              }
              v195 *= 2;
              int v193 = v201 - 1;
              BOOL v196 = v199 != 0;
              BOOL v197 = v198 != 0;
            }
            while (v199 | v198);
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            int v204 = 1;
            BOOL v206 = v264;
            BOOL v205 = v265;
            unsigned int v207 = v151;
            unsigned int v208 = v267;
            do
            {
              --v207;
              if (v205) {
                v203 |= (unint64_t)(v204 & v163) << v202++;
              }
              else {
                unsigned int v207 = 0;
              }
              --v208;
              if (!v206) {
                unsigned int v208 = 0;
              }
              v204 *= 2;
              unsigned int v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              BOOL v206 = v208 != 0;
              BOOL v205 = v207 != 0;
            }
            while (v208 | v207);
            int v209 = 0;
            uint64_t v210 = 0;
            int v211 = 1;
            LOBYTE(result) = v264;
            BOOL v212 = v265;
            unsigned int v213 = v151;
            unsigned int v214 = v267;
            do
            {
              --v213;
              int v215 = v212;
              if (!v215) {
                unsigned int v213 = 0;
              }
              int v216 = v209 + v215;
              --v214;
              if (result) {
                v210 |= (unint64_t)(v211 & v185) << v216++;
              }
              else {
                unsigned int v214 = 0;
              }
              v211 *= 2;
              int v209 = v216 - 1;
              uint64_t result = v214 != 0;
              BOOL v212 = v213 != 0;
            }
            while (v214 | v213);
            unsigned int v151 = v256;
            int v154 = v242;
            if (v183) {
              goto LABEL_262;
            }
          }
LABEL_190:
          ++v157;
        }
        while (v146 > (unsigned __int16)v157);
        int v153 = v234 + 1;
      }
      while (v232 > (unsigned __int16)(v234 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t agxsTwiddleAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 11) / 0xCu, (a4 + 11) / 0xCu, a5, a6, a7 / 0xC, a8 / 0xC, (a9 + 11) / 0xCu, (a10 + 11) / 0xCu, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 11) / 0xCu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xC, a8 / 0xA, (a9 + 11) / 0xCu, (a10 + 9) / 0xAu, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xA, a8 / 0xA, (a9 + 9) / 0xAu, (a10 + 9) / 0xAu, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 7) >> 3, a5, a6, a7 / 0xA, a8 >> 3, (a9 + 9) / 0xAu, (a10 + 7) >> 3, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 5) / 6u, a5, a6, a7 / 0xA, a8 / 6, (a9 + 9) / 0xAu, (a10 + 5) / 6u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 9) / 0xAu, (a4 + 4) / 5u, a5, a6, a7 / 0xA, a8 / 5, (a9 + 9) / 0xAu, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 7) >> 3, a5, a6, a7 >> 3, a8 >> 3, (a9 + 7) >> 3, (a10 + 7) >> 3, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 5) / 6u, a5, a6, a7 >> 3, a8 / 6, (a9 + 7) >> 3, (a10 + 5) / 6u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 4) / 5u, a5, a6, a7 >> 3, a8 / 5, (a9 + 7) >> 3, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 7) >> 3, (a4 + 3) >> 2, a5, a6, a7 >> 3, a8 >> 2, (a9 + 7) >> 3, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 5) / 6u, (a4 + 5) / 6u, a5, a6, a7 / 6, a8 / 6, (a9 + 5) / 6u, (a10 + 5) / 6u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 5) / 6u, (a4 + 4) / 5u, a5, a6, a7 / 6, a8 / 5, (a9 + 5) / 6u, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 4) / 5u, (a4 + 4) / 5u, a5, a6, a7 / 5, a8 / 5, (a9 + 4) / 5u, (a10 + 4) / 5u, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 4) / 5u, (a4 + 3) >> 2, a5, a6, a7 / 5, a8 >> 2, (a9 + 4) / 5u, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 3) >> 2, (a4 + 1) >> 1, a5, a6, a7 >> 2, a8 >> 1, (a9 + 3) >> 2, (a10 + 1) >> 1, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)1>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)1>(uint64_t result, void *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2) {
      return agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressPVRTC4<false,(TwiddleOrder)1>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result && a2)
  {
    unint64_t v10 = (a9 + 3) >> 2;
    unsigned int v11 = (a10 + 3) >> 2;
    unint64_t v12 = ((a9 + 3) >> 3) * (unint64_t)v11;
    uint64_t v13 = 8 * v12;
    uint64_t v14 = 16 * v12;
    if (v10 <= v11) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v10 <= v11) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v13;
    }
    if (v10 <= v11) {
      unint64_t v17 = (a9 + 3) >> 2;
    }
    else {
      unint64_t v17 = v10 >> 1;
    }
    unint64_t v18 = 32 - __clz(v17 - 1);
    if (v17 < 2) {
      unint64_t v18 = 0;
    }
    unsigned int v19 = 32 - __clz(v11 - 1);
    if ((a10 + 3) >= 8) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = 0;
    }
    if (v20 < v18) {
      LOBYTE(v18) = v20;
    }
    unint64_t v21 = 8 * v17 * (unint64_t)v11;
    if (v21)
    {
      unint64_t v22 = 0;
      uint64_t v23 = 8 * ~(-1 << (2 * v18));
      uint64_t v24 = v23 & 0x2AAAAAAAAAAAAAA8;
      uint64_t v25 = v23 & 0x5555555555555555;
      uint64_t v26 = ~v23;
      do
      {
        *(void *)(a2 + (v22 & v26 | (2 * (v24 & v22)) | ((v25 & v22) >> 1))) = *(void *)(result + v22);
        v22 += 8;
      }
      while (v22 < v21);
      if (v10 > v11)
      {
        unint64_t v27 = 0;
        uint64_t v28 = result + v16;
        do
        {
          *(void *)(a2 + v15 + (v27 & v26 | (2 * (v24 & v27)) | ((v25 & v27) >> 1))) = *(void *)(v28 + v27);
          v27 += 8;
        }
        while (v27 < v21);
      }
    }
  }
  return result;
}

uint64_t AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4(uint64_t a1, os_unfair_lock_s *a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, unsigned int a15, unsigned int a16, unsigned int a17, unsigned int a18, int a19, int a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,int a25,int a26,uint64_t a27,unsigned int a28,int a29,char a30,char a31,char a32,int a33,unsigned int a34)
{
  uint64_t v181 = a1 + 308;
  uint64_t v35 = (unsigned __int16)a11 & 0xFF00;
  unint64_t v179 = a7 & 0xFFFFFFFFFFFFFFFELL;
  if (v35 == 768 && (a7 & 0xFFFFFFFFFFFFFFFELL) == 552) {
    uint64_t v35 = 256;
  }
  unint64_t v37 = v35 | a11 & 0xFFFFFFFFFFFF00FFLL;
  int v38 = &texFormatUnsupported;
  if ((a7 - 1) <= 0x284) {
    int v38 = (uint64_t *)*(&off_26516F8A0 + (a7 - 1));
  }
  unsigned int v39 = (*((unsigned int *)v38 + 10) < 0x33uLL) & (0x4000800000200uLL >> *((_DWORD *)v38 + 10));
  int v40 = *((_DWORD *)v38 + 16);
  BOOL v41 = v38[2] == 4;
  *(unsigned char *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a7;
  *(void *)(a1 + 40) = a8;
  *(void *)(a1 + 48) = a10;
  if ((v41 & v39) != 0) {
    int v42 = 0x40000000;
  }
  else {
    int v42 = 0;
  }
  *(_DWORD *)(a1 + 84) = a20 - 1;
  *(_DWORD *)(a1 + 104) = v42 | (((v40 & 0x38000) == 0x8000) << 31);
  *(_DWORD *)(a1 + 108) = a29;
  a9.n128_u64[0] = 1;
  *(void *)(a1 + 152) = a21;
  *(void *)(a1 + 160) = a23;
  *(void *)(a1 + 168) = a24;
  *(_DWORD *)(a1 + 176) = a25;
  *(_DWORD *)(a1 + 180) = a26;
  *(void *)(a1 + 184) = a27;
  *(_DWORD *)(a1 + 192) = a13;
  *(_DWORD *)(a1 + 196) = a14;
  *(void *)(a1 + 208) = a6;
  *(_DWORD *)(a1 + 112) = 1 << -(char)__clz(a19 - 1);
  *(_DWORD *)(a1 + 116) = a28;
  int32x2_t v43 = vdup_n_s32(a28);
  *(_DWORD *)(a1 + 144) = a28;
  int v44 = a17 >> a28;
  if (a17 >> a28 <= 1) {
    int v44 = 1;
  }
  *(_DWORD *)(a1 + 96) = v44;
  *(_DWORD *)(a1 + 100) = a20;
  *(_DWORD *)(a1 + 236) = a22;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 376) = a20;
  *(void *)(a1 + 56) = v37;
  *(void *)(a1 + 384) = v37;
  *(_DWORD *)(a1 + 80) = 0;
  *(uint32x2_t *)(a1 + 88) = vmax_u32(vshl_u32((uint32x2_t)__PAIR64__(a16, a15), (uint32x2_t)vneg_s32(v43)), (uint32x2_t)0x100000001);
  uint64_t v46 = a1 + 308;
  unsigned int v45 = a2;
  *(void *)a1 = &unk_26F853C88;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 120) = 1;
  *(_DWORD *)(a1 + 128) = a15;
  *(_DWORD *)(a1 + 132) = a16;
  *(_DWORD *)(a1 + 136) = a17;
  *(_DWORD *)(a1 + 140) = a18;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 274) = 0u;
  *(_OWORD *)(a1 + 258) = 0u;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)uint64_t v181 = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_WORD *)(a1 + 380) = 0;
  *(unsigned char *)(a1 + 382) = 0;
  *(unsigned char *)(a1 + 392) = a31;
  *(unsigned char *)(a1 + 393) = a32;
  uint64_t v47 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Texture(AGX::HAL200::Device *,BOOL,AGXHardwareTextureMemoryOrder,AGX::TextureFormat const*,MTLTextureType,MTLPixelFormat,unsigned long,MTLStorageMode,AGXTextureCompressionSettings,eAGXColorSpaceConversion,eAGXTextureRotation,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned long,unsigned int,MTLCPUCacheMode,unsigned int,eAGXTextureCoordType,__IOSurface *,unsigned int,unsigned int,__IOSurface *,unsigned int,unsigned int,BOOL,BOOL,BOOL)::iosurface_alignment;
  *(void *)(a1 + 320) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Texture(AGX::HAL200::Device *,BOOL,AGXHardwareTextureMemoryOrder,AGX::TextureFormat const*,MTLTextureType,MTLPixelFormat,unsigned long,MTLStorageMode,AGXTextureCompressionSettings,eAGXColorSpaceConversion,eAGXTextureRotation,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned long,unsigned int,MTLCPUCacheMode,unsigned int,eAGXTextureCoordType,__IOSurface *,unsigned int,unsigned int,__IOSurface *,unsigned int,unsigned int,BOOL,BOOL,BOOL)::iosurface_alignment;
  if (!v47)
  {
    uint64_t v52 = MEMORY[0x24566E800](*MEMORY[0x263F0EE38], 1, a9);
    *(void *)(a1 + 320) = v52;
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Texture(AGX::HAL200::Device *,BOOL,AGXHardwareTextureMemoryOrder,AGX::TextureFormat const*,MTLTextureType,MTLPixelFormat,unsigned long,MTLStorageMode,AGXTextureCompressionSettings,eAGXColorSpaceConversion,eAGXTextureRotation,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned long,unsigned int,MTLCPUCacheMode,unsigned int,eAGXTextureCoordType,__IOSurface *,unsigned int,unsigned int,__IOSurface *,unsigned int,unsigned int,BOOL,BOOL,BOOL)::iosurface_alignment = v52;
    if (a18 >= 2) {
      goto LABEL_15;
    }
LABEL_27:
    unsigned int v51 = 1;
    goto LABEL_28;
  }
  if (a18 < 2) {
    goto LABEL_27;
  }
LABEL_15:
  if (a15 <= a16) {
    unsigned int v48 = a16;
  }
  else {
    unsigned int v48 = a15;
  }
  if (v48 <= a17) {
    unsigned int v49 = a17;
  }
  else {
    unsigned int v49 = v48;
  }
  if (!*(unsigned char *)(a1 + 16)) {
    unsigned int v48 = v49;
  }
  unsigned int v50 = 32 - __clz(v48);
  if (v48) {
    unsigned int v51 = v50;
  }
  else {
    unsigned int v51 = 0;
  }
LABEL_28:
  *(_DWORD *)(a1 + 64) = v51;
  uint64_t v53 = *(void *)(a1 + 168);
  if (v53)
  {
    uint64_t v54 = *(void *)(a1 + 32);
LABEL_30:
    uint64_t v55 = *(void *)(a1 + 24);
LABEL_31:
    int isYUVTexture = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isYUVTexture(v54);
    if (isYUVTexture) {
      char v57 = 4;
    }
    else {
      char v57 = 0;
    }
    char v58 = 2;
    switch(v55)
    {
      case 0:
        goto LABEL_36;
      case 1:
        char v57 = 1;
LABEL_36:
        char v58 = 1;
        if (!*(unsigned char *)(a1 + 392)) {
          goto LABEL_53;
        }
        goto LABEL_66;
      case 3:
        char v57 = 1;
        if (*(unsigned char *)(a1 + 392)) {
          goto LABEL_66;
        }
        goto LABEL_53;
      case 4:
        char v57 = 2;
        goto LABEL_65;
      case 5:
        goto LABEL_52;
      case 6:
        char v57 = 1;
LABEL_52:
        char v58 = 4;
        if (!*(unsigned char *)(a1 + 392)) {
          goto LABEL_53;
        }
        goto LABEL_66;
      case 7:
        char v58 = 3;
        if (*(unsigned char *)(a1 + 392)) {
          goto LABEL_66;
        }
        goto LABEL_53;
      case 8:
        char v57 = 3;
        if (*(unsigned char *)(a1 + 392)) {
          goto LABEL_66;
        }
        goto LABEL_53;
      case 9:
        a4 = 0;
        if (*(unsigned char *)(a1 + 392)) {
          goto LABEL_66;
        }
        goto LABEL_53;
      default:
LABEL_65:
        if (*(unsigned char *)(a1 + 392)) {
          goto LABEL_66;
        }
LABEL_53:
        if (v53)
        {
          unsigned int AddressFormatOfPlane = IOSurfaceGetAddressFormatOfPlane();
          if (AddressFormatOfPlane >= 6) {
            goto LABEL_59;
          }
          unint64_t v62 = 0x30002010000uLL >> (8 * AddressFormatOfPlane);
          goto LABEL_67;
        }
        int v60 = 0;
        if (*(void *)(a1 + 152)) {
          goto LABEL_59;
        }
        break;
    }
    goto LABEL_57;
  }
  int v59 = *(unsigned __int8 *)(a1 + 57);
  uint64_t v54 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 57)) {
    goto LABEL_30;
  }
  switch(v54)
  {
    case 552:
    case 553:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
      if (v59 == 1) {
        goto LABEL_30;
      }
      break;
    case 576:
    case 577:
    case 578:
    case 579:
    case 603:
    case 604:
    case 605:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 642:
    case 643:
    case 644:
    case 645:
      break;
    default:
      if (v59 == 3) {
        goto LABEL_30;
      }
      break;
  }
  uint64_t v55 = *(void *)(a1 + 24);
  if (v55 != 2 || v51 > 1) {
    goto LABEL_31;
  }
  switch(v54)
  {
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 84:
    case 85:
    case 90:
    case 91:
    case 94:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 552:
    case 553:
    case 554:
    case 555:
    case 576:
    case 577:
    case 578:
    case 579:
    case 603:
    case 604:
    case 605:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
      int isYUVTexture = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isYUVTexture(*(void *)(a1 + 32));
      if (isYUVTexture) {
        char v57 = 4;
      }
      else {
        char v57 = 0;
      }
      char v58 = 2;
      if (*(unsigned char *)(a1 + 392))
      {
LABEL_66:
        LOBYTE(v62) = a4;
        goto LABEL_67;
      }
      int v60 = 1;
      if (*(void *)(a1 + 152)) {
        goto LABEL_59;
      }
      break;
    default:
      goto LABEL_30;
  }
LABEL_57:
  if ((unint64_t)(v54 - 624) >= 4 && (unint64_t)(v54 - 550) >= 2)
  {
    if (v60) {
      char v125 = 3;
    }
    else {
      char v125 = a4;
    }
    if (isYUVTexture) {
      LOBYTE(v62) = 0;
    }
    else {
      LOBYTE(v62) = v125;
    }
  }
  else
  {
LABEL_59:
    LOBYTE(v62) = 0;
  }
LABEL_67:
  unsigned int v63 = a34;
  uint64_t v64 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 380) = v62;
  *(unsigned char *)(a1 + 381) = v58;
  *(unsigned char *)(a1 + 382) = v57;
  *(void *)(a1 + 384) = v64;
  if (*(unsigned char *)(v181 + 72) != 3)
  {
    int v68 = *(uint64_t **)(a1 + 208);
    if (v68 != &texFormatUnsupported) {
      goto LABEL_82;
    }
LABEL_108:
    *(unsigned char *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = &texFormatUnsupported;
    goto LABEL_109;
  }
  if (*(void *)(a1 + 168))
  {
    char CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
    char CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
    uint64_t v67 = *(void *)(a1 + 32);
    if (CompressedTileWidthOfPlane == 16 && CompressedTileHeightOfPlane == 16) {
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v67 = *(void *)(a1 + 32);
  }
  uint64_t v69 = v67 - 10;
  if (unint64_t)(v67 - 10) < 0x10 && ((0xF403u >> v69))
  {
    int v68 = (uint64_t *)*(&off_265170CC8 + v69);
    goto LABEL_81;
  }
LABEL_77:
  unsigned int v70 = v67 - 1;
  if (v70 > 0x284) {
    int v68 = &texFormatUnsupported;
  }
  else {
    int v68 = (uint64_t *)*(&off_26516F8A0 + v70);
  }
  switch(*v68)
  {
    case 0:
    case 1:
    case 8:
    case 9:
    case 10:
    case 15:
    case 16:
    case 17:
    case 32:
    case 34:
    case 35:
    case 38:
    case 40:
    case 41:
    case 42:
    case 48:
    case 50:
    case 51:
    case 52:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
      break;
    default:
      int v68 = &texFormatUnsupported;
      break;
  }
LABEL_81:
  *(void *)(a1 + 208) = v68;
  if (v68 == &texFormatUnsupported) {
    goto LABEL_108;
  }
LABEL_82:
  uint64_t v71 = *(void *)(a1 + 32);
  switch(v71)
  {
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
      uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 128));
      v76.i16[0] = vaddlv_u8(v76);
      if (v76.i32[0] != 1) {
        goto LABEL_108;
      }
      uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 132));
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.i32[0] != 1) {
        goto LABEL_108;
      }
      break;
    case 500:
    case 501:
    case 502:
    case 505:
    case 506:
    case 508:
    case 509:
    case 520:
    case 521:
    case 522:
    case 525:
    case 526:
    case 528:
    case 529:
    case 540:
    case 541:
    case 543:
    case 544:
    case 546:
    case 547:
    case 562:
    case 564:
    case 565:
    case 567:
    case 568:
    case 570:
    case 571:
    case 573:
    case 574:
    case 580:
    case 581:
    case 583:
    case 584:
    case 591:
    case 592:
    case 594:
    case 595:
    case 597:
    case 598:
    case 600:
    case 601:
    case 608:
    case 609:
    case 611:
    case 612:
    case 615:
    case 616:
    case 618:
    case 619:
      if (*(unsigned char *)(a1 + 128) & 1) != 0 || (*(unsigned char *)(a1 + 132))
      {
        uint64_t v72 = *(void *)(a1 + 40);
        if (!v72 || (v72 & 6) != 0) {
          goto LABEL_108;
        }
      }
      break;
    default:
      break;
  }
  if (*((_DWORD *)v68 + 6) >= 2u
    && !*(void *)(a1 + 168)
    && !*((_DWORD *)v68 + 20)
    && (unint64_t)(v71 - 624) >= 4
    && (unint64_t)(v71 - 550) >= 2
    && !*(unsigned char *)(a1 + 16))
  {
    goto LABEL_108;
  }
  uint64_t v73 = *(void *)(v181 + 72);
  if (*(_DWORD *)(a1 + 236))
  {
    if (*(void *)(v181 + 72) != 1) {
      goto LABEL_108;
    }
  }
  if (*(unsigned char *)(a1 + 57) && !*(void *)(v181 + 72)) {
    goto LABEL_108;
  }
  *(unsigned char *)(a1 + 200) = 1;
  *(unsigned char *)(a1 + 316) = ((unint64_t)(v71 - 185) < 0x34) & (0xFFFF3FFFCFFFFuLL >> (v71 + 71));
  *(unsigned char *)(a1 + 317) = (v71 & 0xFFFFFFFFFFFFFFF8) == 160;
  *(uint32x2_t *)(a1 + 216) = qword_242EB3598[*((unsigned int *)v68 + 14)];
  *(unsigned char *)(a1 + 304) = (unint64_t)(v71 - 40) < 5;
  if ((v73 & 0x40000) == 0)
  {
    unint64_t v74 = v71 - 586;
    if (v74 <= 0x2B && ((1 << v74) & 0xC0000000003) != 0)
    {
      if (a12) {
        int v75 = a12;
      }
      else {
        int v75 = 7;
      }
      *(_DWORD *)uint64_t v181 = v75;
    }
    goto LABEL_222;
  }
  if ((unint64_t)(v71 - 586) <= 0x2B && ((1 << (v71 - 74)) & 0xC2000000003) != 0)
  {
    int v123 = 7;
LABEL_200:
    if (a12) {
      int v124 = a12;
    }
    else {
      int v124 = v123;
    }
    *(_DWORD *)uint64_t v181 = v124;
LABEL_204:
    if (*(void *)(a1 + 168))
    {
      IOSurfaceGetBulkAttachments();
      uint64_t v73 = *(void *)(v181 + 72);
    }
    *(_DWORD *)(a1 + 312) = 0;
    goto LABEL_222;
  }
  BOOL v126 = *(__IOSurface **)(a1 + 168);
  if (!v126)
  {
    int v123 = 0;
    goto LABEL_200;
  }
  int v123 = 0;
  if ((unint64_t)(v71 - 540) <= 0x31 && ((1 << (v71 - 28)) & 0x30000000001FFLL) != 0
    || (unint64_t)(v71 - 240) < 2)
  {
    goto LABEL_200;
  }
  OSType PixelFormat = IOSurfaceGetPixelFormat(v126);
  IOSurfaceGetYCbCrMatrix();
  if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isVideoRange(PixelFormat)) {
    int v178 = 1;
  }
  else {
    int v178 = 3;
  }
  uint64_t v73 = *(void *)(v181 + 72);
  if (a12) {
    int v178 = a12;
  }
  *(_DWORD *)uint64_t v181 = v178;
  if ((v73 & 0x40000) != 0) {
    goto LABEL_204;
  }
LABEL_222:
  if (!(_BYTE)v73)
  {
    unint64_t v129 = *(void *)(a1 + 152);
    if (v179 == 240 && !v129)
    {
      unint64_t v129 = (*(unsigned __int8 *)(*(void *)(a1 + 208) + 49) * (unint64_t)*(unsigned int *)(a1 + 128) + 15) & 0x1FFFFFFFFF0;
      *(void *)(a1 + 152) = v129;
    }
    if (!v129) {
      *(void *)(a1 + 152) = *(unsigned __int8 *)(*(void *)(a1 + 208) + 49)
    }
                            * (unint64_t)*(unsigned int *)(a1 + 128);
  }
  if (*(void *)(a1 + 24) == 9) {
    *(void *)(a1 + 152) = (*(void *)(a1 + 152) + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  BOOL v130 = 0;
  if ((v73 & 0xFF00) == 0x400) {
    int v131 = 6;
  }
  else {
    int v131 = 1;
  }
  *(_DWORD *)(a1 + 368) = v131;
  *(unsigned char *)(a1 + 240) = 0;
  unint64_t v132 = *(unsigned int *)(a1 + 236);
  if (v73 == 1 && a30 && !v132)
  {
    int v133 = v73 & 0xFF00;
    if (v133 != 512 && v133 != 1024 && v133 != 768
      || ((unsigned int v134 = *(_DWORD *)(a1 + 128), v134 <= 1) ? (v135 = 1) : (v135 = *(_DWORD *)(a1 + 128)),
          (unsigned int v136 = *(_DWORD *)(a1 + 216), v137 = v136 + v135 - 1, v136 <= v137)
       && ((v137 / v136) & (v137 / v136 - 1)) == 0
       && (*(_DWORD *)(a1 + 132) <= 1u ? (int v138 = 1) : (int v138 = *(_DWORD *)(a1 + 132)),
           (v139 = *(_DWORD *)(a1 + 220), unsigned int v140 = v139 + v138 - 1, v139 <= v140)
        && ((v140 / v139) & (v140 / v139 - 1)) == 0))
      || *(void *)(a1 + 32) == 260 && (v134 < 0x40 || *(_DWORD *)(a1 + 132) < 0x40u))
    {
      char v141 = 0;
LABEL_300:
      *(unsigned char *)(a1 + 232) = v141;
      goto LABEL_109;
    }
    uint64_t v142 = *(void *)(a1 + 208);
    char v141 = 1;
    if (!*(_DWORD *)(v142 + 24)) {
      goto LABEL_300;
    }
    unint64_t v143 = 0;
    unsigned int v144 = (BOOL *)(a1 + 264);
    unsigned int v145 = (void *)MEMORY[0x263EF8AF8];
    unsigned int v146 = (v134 + *(_DWORD *)(a1 + 216) - 1) / *(_DWORD *)(a1 + 216);
    BOOL v130 = 1;
    do
    {
      if (!v130) {
        goto LABEL_255;
      }
      uint64_t v147 = *(void *)(v46 + 72);
      uint64_t v148 = (unsigned __int16)v147 & 0xFF00;
      if (v148 == 768)
      {
        int v149 = *(_DWORD *)(a1 + 136);
      }
      else if ((v147 & 0x10000) != 0 || v148 == 1024)
      {
        int v149 = *(_DWORD *)(a1 + 376);
        if (v148 == 1024) {
          LOWORD(v149) = 6 * v149;
        }
      }
      else
      {
        LOWORD(v149) = 1;
      }
      BOOL v130 = 0;
      int v150 = *(_DWORD *)(a1 + 132);
      unsigned int v151 = *(unsigned __int8 *)(a1 + 220);
      int v152 = *(_DWORD *)(a1 + 112) * *(unsigned __int8 *)(v142 + 88 + v143);
      int v153 = *(_DWORD *)(a1 + 64);
      char v154 = *(unsigned char *)(v142 + 48);
      int v155 = *(unsigned __int8 *)(a1 + 316);
      uint64_t v156 = *(void *)(a1 + 320);
      *(v144 - 8) = v152;
      *((_WORD *)v144 - 11) = v134;
      *((_WORD *)v144 - 10) = v150;
      *((_WORD *)v144 - 9) = v149;
      *(v144 - 14) = v153;
      *((_WORD *)v144 - 8) = v156;
      *(v144 - 5) = 3;
      *(v144 - 7) = v154;
      *(v144 - 4) = v136;
      *(v144 - 3) = v151;
      *(v144 - 2) = 0;
      *(v144 - 1) = v148 == 1024;
      BOOL *v144 = v148 == 768;
      unsigned int v157 = (v150 + v151 - 1) / v151;
      BOOL v158 = *v145 <= (unint64_t)(v146 * v152 * v157)
          && *v145 >= (unint64_t)(unsigned __int16)v156;
      uint64_t v46 = v181;
      if (!v158) {
        goto LABEL_256;
      }
      if (v148 == 1024) {
        char v159 = 2;
      }
      else {
        char v159 = 1;
      }
      if (!v155) {
        char v159 = 0;
      }
      *(v144 - 6) = v159;
      int v160 = (unsigned __int16)v156;
      unsigned int v161 = 3 * (unsigned __int16)v156;
      if (-1431655765 * v152 >= 0x55555556) {
        unsigned int v161 = (unsigned __int16)v156;
      }
      unsigned int v162 = v161 / v152;
      unsigned int v163 = 32 - __clz(v162 - 1);
      if (v162 >= 2) {
        unsigned int v164 = v163;
      }
      else {
        unsigned int v164 = 0;
      }
      unsigned int v165 = v164 >> 1;
      *(v144 - 10) = v164 >> 1;
      char v166 = v164 - (v164 >> 1);
      *(v144 - 9) = v166;
      if (v155)
      {
        unsigned int v165 = (v164 >> 1);
        if (v165 <= 5) {
          LOBYTE(v165) = 5;
        }
        *(v144 - 10) = v165;
        if ((v164 - (v164 >> 1)) <= 5u) {
          char v166 = 5;
        }
        else {
          char v166 = v164 - (v164 >> 1);
        }
        *(v144 - 9) = v166;
      }
      *(v144 - 13) = (v152 << (v166 + v165)) / v160;
      if (v146 < 2) {
        LOBYTE(v167) = 0;
      }
      else {
        unsigned int v167 = 32 - __clz(~(-1 << -(char)__clz(v146 - 1)));
      }
      *(v144 - 12) = v167;
      if (v157 < 2) {
        LOBYTE(v168) = 0;
      }
      else {
        unsigned int v168 = 32 - __clz(~(-1 << -(char)__clz(v157 - 1)));
      }
      *(v144 - 11) = v168;
      if (v146 >> v165) {
        BOOL v130 = v157 >> v166 != 0;
      }
      else {
LABEL_255:
      }
        BOOL v130 = 0;
LABEL_256:
      ++v143;
      v144 += 24;
      unsigned int v45 = a2;
    }
    while (v143 < *(unsigned int *)(v142 + 24));
  }
  *(unsigned char *)(a1 + 232) = v130;
  if (v132)
  {
    uint64_t v169 = *(void *)(a1 + 208);
    uint64_t v170 = *(unsigned int *)(v169 + 56);
    unint64_t v171 = v132 / (*(unsigned __int8 *)(v169 + 88) * (unint64_t)*(unsigned int *)(a1 + 112));
    unsigned int v172 = 32 - __clz(v171 - 1);
    if (v171 >= 2) {
      unsigned int v173 = v172;
    }
    else {
      unsigned int v173 = 0;
    }
    *(uint32x2_t *)(a1 + 224) = vshl_u32(qword_242EB3598[v170], (uint32x2_t)__PAIR64__(v173 - ((v173 + 1) >> 1), (v173 + 1) >> 1));
  }
LABEL_109:
  *(void *)a1 = &unk_26F853CB0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  unsigned int v78 = v45 + 1518;
  *(_DWORD *)(a1 + 464) = a34;
  *(void *)(a1 + 472) = v45 + 1518;
  *(unsigned char *)(a1 + 480) = a34 != 0;
  unsigned int v79 = (int *)MEMORY[0x263F4B188];
  if (!a34)
  {
    os_unfair_lock_lock(v45 + 1532);
    uint64_t v80 = *(void *)(a1 + 472);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v80 + 48), memory_order_acquire);
    if (explicit)
    {
      uint64_t v82 = explicit;
      while (1)
      {
        unint64_t v83 = explicit & 0xFFFFFFFF00000000;
        unint64_t v84 = (v83 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v80 + 40) + 8) + *v79 + 24) + 32 * v82))
            + 0x100000000;
        unint64_t explicit = v83 | v82;
        unint64_t v85 = explicit;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v80 + 48), &explicit, v84);
        if (explicit == v85) {
          break;
        }
        uint64_t v82 = explicit;
        if (!explicit) {
          goto LABEL_114;
        }
      }
    }
    else
    {
LABEL_114:
      *(_DWORD *)(a1 + 464) = 0;
      uint64_t v86 = *(void *)(a1 + 472);
      int v87 = *(_DWORD *)(v86 + 32);
      if (v87)
      {
        if (!*(void *)(v86 + 48)) {
          AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::grow(v86, 2 * v87);
        }
      }
      else
      {
        AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::grow(v86, 16);
      }
      uint64_t v88 = *(void *)(a1 + 472);
      unint64_t v89 = atomic_load_explicit((atomic_ullong *volatile)(v88 + 48), memory_order_acquire);
      if (v89)
      {
        uint64_t v82 = v89;
        while (1)
        {
          unint64_t v90 = v89 & 0xFFFFFFFF00000000;
          unint64_t v91 = (v90 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v88 + 40) + 8) + *v79 + 24) + 32 * v82))
              + 0x100000000;
          unint64_t v89 = v90 | v82;
          unint64_t v92 = v89;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v88 + 48), &v89, v91);
          if (v89 == v92) {
            break;
          }
          uint64_t v82 = v89;
          if (!v89) {
            goto LABEL_121;
          }
        }
      }
      else
      {
LABEL_121:
        LODWORD(v82) = 0;
      }
    }
    *(_DWORD *)(a1 + 464) = v82;
    os_unfair_lock_unlock(v45 + 1532);
    unsigned int v78 = *(os_unfair_lock_s **)(a1 + 472);
    unsigned int v63 = *(_DWORD *)(a1 + 464);
  }
  unsigned int os_unfair_lock_opaque = v78[15]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque < v63)
  {
    unsigned int v94 = v78[15]._os_unfair_lock_opaque;
    do
    {
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 472) + 60), &v94, v63, memory_order_relaxed, memory_order_relaxed);
      if (v94 == os_unfair_lock_opaque) {
        break;
      }
      unsigned int v63 = *(_DWORD *)(a1 + 464);
      unsigned int os_unfair_lock_opaque = v94;
    }
    while (v94 < v63);
    unsigned int v78 = *(os_unfair_lock_s **)(a1 + 472);
  }
  atomic_fetch_add((atomic_uint *volatile)&v78[16], 1u);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  if (*(unsigned char *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 464);
    {
      AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::evaluateCompressionFeedback<AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isCompressionAllowed(void)::CompressionPolicyVisitor>(void)const::disable_apple_compression = 0;
    }
    {
      AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::evaluateCompressionFeedback<AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isCompressionAllowed(void)::CompressionPolicyVisitor>(void)const::disable_apple_compression_for_shared_textures = 0;
    }
    {
      AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::evaluateCompressionFeedback<AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isCompressionAllowed(void)::CompressionPolicyVisitor>(void)const::disable_apple_compression_for_shared_attachments = 0;
    }
    unsigned int v95 = (uint64_t *)(a1 + 488);
    uint64_t v96 = *(void *)(a1 + 56);
    if (AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::evaluateCompressionFeedback<AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isCompressionAllowed(void)::CompressionPolicyVisitor>(void)const::disable_apple_compression
      && !*(void *)(a1 + 168)
      && (v96 & 0xFF00) == 0)
    {
LABEL_135:
      uint64_t v97 = *(void *)(a1 + 208);
      if (*(unsigned char *)(a1 + 16)) {
        goto LABEL_145;
      }
      goto LABEL_142;
    }
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v97 = *(void *)(a1 + 208);
      goto LABEL_145;
    }
    uint64_t v98 = *(void *)(a1 + 48);
    if (v98)
    {
      if (v98 == 3)
      {
        uint64_t v97 = *(void *)(a1 + 208);
LABEL_142:
        if (*(_DWORD *)(v97 + 24) >= 2u)
        {
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          uint64_t v101 = 0;
          do
          {
            v101 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, v99, 1);
            v100 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, v99, 1);
            uint64_t v102 = a1 + 8 * v99;
            *(void *)(v102 + 336) = v101;
            *(void *)(v102 + 344) = v100;
            uint64_t v97 = *(void *)(a1 + 208);
            unint64_t v103 = v99 + 2;
            ++v99;
          }
          while (v103 < *(unsigned int *)(v97 + 24));
        }
LABEL_145:
        uint64_t v104 = *v95;
        if (!*v95 || *(_DWORD *)(v97 + 24) < 2u)
        {
LABEL_156:
          if (*(_DWORD *)(v97 + 24))
          {
            unsigned int v110 = 0;
            uint64_t v111 = 0;
            do
            {
              v111 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, v110++, 1);
              unsigned int v112 = *(_DWORD *)(*(void *)(a1 + 208) + 24);
            }
            while (v110 < v112);
            *(void *)(a1 + 352) = v111;
            if (v112)
            {
              unsigned int v113 = 0;
              uint64_t v114 = 0;
              do
                v114 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, v113++, 1);
              while (v113 < *(_DWORD *)(*(void *)(a1 + 208) + 24));
            }
            else
            {
              uint64_t v114 = 0;
            }
          }
          else
          {
            uint64_t v114 = 0;
            *(void *)(a1 + 352) = 0;
          }
          *(void *)(a1 + 360) = v114;
          return a1;
        }
        if (*(void *)(a1 + 168) && (IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0)
        {
          uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
          uint64_t v106 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane()
               - BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
          if (!*(void *)(a1 + 168)) {
            goto LABEL_154;
          }
        }
        else
        {
          uint64_t v107 = *(void *)(a1 + 336);
          uint64_t v106 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, 1u, 0)+ v107;
          if (!*(void *)(a1 + 168)) {
            goto LABEL_154;
          }
        }
        if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0)
        {
          uint64_t v108 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
          uint64_t v109 = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane() - v108;
LABEL_155:
          *(void *)(v104 + 1112) = v106 - v109;
          uint64_t v97 = *(void *)(a1 + 208);
          goto LABEL_156;
        }
LABEL_154:
        uint64_t v109 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, 0, 0);
        goto LABEL_155;
      }
    }
    else
    {
      if (AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::evaluateCompressionFeedback<AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isCompressionAllowed(void)::CompressionPolicyVisitor>(void)const::disable_apple_compression_for_shared_attachments
        && (*(void *)(a1 + 40) & 4) != 0
        && (v96 & 0xFF00) == 0)
      {
        goto LABEL_135;
      }
      if ((v96 & 0xFF00) == 0
        && AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::evaluateCompressionFeedback<AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isCompressionAllowed(void)::CompressionPolicyVisitor>(void)const::disable_apple_compression_for_shared_textures != 0)
      {
        goto LABEL_135;
      }
    }
    if ((v96 & 6) == 2) {
      goto LABEL_135;
    }
    uint64_t v117 = *(void *)(v46 + 72);
    if (!(_BYTE)v117 || (v117 & 0xFF00) == 0x100 || *(_DWORD *)(*(void *)(a1 + 208) + 56) || *(unsigned char *)(a1 + 240)) {
      goto LABEL_135;
    }
    if (*(void *)(v46 + 72) == 3)
    {
LABEL_184:
      if (v96) {
        goto LABEL_196;
      }
      uint64_t v118 = *(void *)(a1 + 40);
      if (v118)
      {
        uint64_t v119 = *(void *)(a1 + 32);
        BOOL v120 = (unint64_t)(v119 - 323) >= 3 && (unint64_t)(v119 - 123) > 2;
        if (*(unsigned char *)(a1 + 393)) {
          BOOL v121 = 0;
        }
        else {
          BOOL v121 = v120;
        }
        unsigned int v122 = v121 & (v118 >> 14);
        if ((v118 & 2) == 0) {
          unsigned int v122 = 1;
        }
        if ((v118 & 0x30) == 0 && v122) {
LABEL_196:
        }
          operator new();
      }
      goto LABEL_135;
    }
    int v174 = *(_DWORD *)(a1 + 112);
    int v175 = 8;
    unsigned int v176 = 16;
    if (v174 != 2)
    {
      if (v174 != 4)
      {
        unsigned int v177 = 16;
        if (v174 != 8)
        {
LABEL_308:
          if (*(_DWORD *)(a1 + 128) < v177 || *(_DWORD *)(a1 + 132) < v176) {
            goto LABEL_135;
          }
          goto LABEL_184;
        }
        int v175 = 4;
      }
      unsigned int v176 = 8;
    }
    unsigned int v177 = v176;
    unsigned int v176 = v175;
    goto LABEL_308;
  }
  return a1;
}

void sub_242E80408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,AGX::HAL200::Texture *a25)
{
  os_unfair_lock_unlock(v25);
  _Unwind_Resume(a1);
}

void sub_242E80460(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<AGX::HAL200::CompressionMetadata>::operator()[abi:nn180100](v4);
  }
  AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::Allocation::~Allocation(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<AGX::HAL200::CompressionMetadata>::operator()[abi:nn180100](uint64_t a1)
{
  *(void *)(a1 + 536) = &unk_26F853CB0;
  uint64_t v2 = *(void *)(a1 + 1024);
  *(void *)(a1 + 1024) = 0;
  if (v2) {
    std::default_delete<AGX::HAL200::CompressionMetadata>::operator()[abi:nn180100]();
  }
  if (*(_DWORD *)(a1 + 1000) && !*(unsigned char *)(a1 + 1016))
  {
    unint64_t v3 = (os_unfair_lock_s *)(*(void *)(a1 + 1008) + 56);
    os_unfair_lock_lock(v3);
    uint64_t v4 = *(void *)(a1 + 1008);
    uint64_t v5 = *(unsigned int *)(a1 + 1000);
    uint64_t v6 = *(void *)(v4 + 48);
    unint64_t v7 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v5) = v6;
    uint64_t v8 = v6;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 48), (unint64_t *)&v8, (v6 & 0xFFFFFFFF00000000 | v5) + 0x100000000);
    if (v8 != v6)
    {
      uint64_t v9 = v8;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v4 + 40) + 8) + *v7 + 24) + 32 * v5) = v8;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 48), (unint64_t *)&v9, (v8 & 0xFFFFFFFF00000000 | v5) + 0x100000000);
        BOOL v10 = v9 == v8;
        uint64_t v8 = v9;
      }
      while (!v10);
    }
    os_unfair_lock_unlock(v3);
  }
  *(void *)a1 = &unk_26F853CB0;
  uint64_t v11 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  if (v11) {
    std::default_delete<AGX::HAL200::CompressionMetadata>::operator()[abi:nn180100]();
  }
  if (*(_DWORD *)(a1 + 464) && !*(unsigned char *)(a1 + 480))
  {
    unint64_t v12 = (os_unfair_lock_s *)(*(void *)(a1 + 472) + 56);
    os_unfair_lock_lock(v12);
    uint64_t v13 = *(void *)(a1 + 472);
    uint64_t v14 = *(unsigned int *)(a1 + 464);
    uint64_t v15 = *(void *)(v13 + 48);
    uint64_t v16 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v13 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v14) = v15;
    uint64_t v17 = v15;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v13 + 48), (unint64_t *)&v17, (v15 & 0xFFFFFFFF00000000 | v14) + 0x100000000);
    if (v17 != v15)
    {
      uint64_t v18 = v17;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v13 + 40) + 8) + *v16 + 24) + 32 * v14) = v17;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v13 + 48), (unint64_t *)&v18, (v17 & 0xFFFFFFFF00000000 | v14) + 0x100000000);
        BOOL v10 = v18 == v17;
        uint64_t v17 = v18;
      }
      while (!v10);
    }
    os_unfair_lock_unlock(v12);
  }

  JUMPOUT(0x24566ED90);
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isVideoRange(int a1)
{
  uint64_t result = 1;
  if (a1 > 1534617135)
  {
    if (a1 > 1952854577)
    {
      if (a1 <= 2021077551)
      {
        if (a1 > 2019963441)
        {
          if (a1 == 2019963442 || a1 == 2019963956) {
            return 0;
          }
          int v3 = 2019964016;
        }
        else
        {
          if (a1 == 1952854578 || a1 == 1952855092) {
            return 0;
          }
          int v3 = 2019963440;
        }
      }
      else if (a1 <= 2021078127)
      {
        if (a1 == 2021077552 || a1 == 2021077554) {
          return 0;
        }
        int v3 = 2021078068;
      }
      else if (a1 > 2084070959)
      {
        if (a1 == 2088265264) {
          return 0;
        }
        int v3 = 2084070960;
      }
      else
      {
        if (a1 == 2021078128) {
          return 0;
        }
        int v3 = 2037741158;
      }
      goto LABEL_60;
    }
    if (a1 <= 1568171567)
    {
      if ((a1 - 1534617136) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0) {
        return 0;
      }
      int v4 = -1563977264;
    }
    else
    {
      if (a1 > 1885745711)
      {
        if (a1 > 1885746227)
        {
          if (a1 == 1885746228) {
            return 0;
          }
          int v3 = 1952854576;
        }
        else
        {
          if (a1 == 1885745712) {
            return 0;
          }
          int v3 = 1885745714;
        }
        goto LABEL_60;
      }
      int v4 = -1568171568;
    }
  }
  else if (a1 > 792225327)
  {
    if (a1 <= 1530422831)
    {
      if (a1 > 875704933)
      {
        if ((a1 - 1027423538) < 2 || a1 == 875704934) {
          return 0;
        }
        int v3 = 875836518;
      }
      else
      {
        if (a1 == 792225328 || a1 == 796419632) {
          return 0;
        }
        int v3 = 875704422;
      }
      goto LABEL_60;
    }
    if ((a1 - 1530422832) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0) {
      return 0;
    }
    int v4 = -1534354992;
  }
  else
  {
    if (a1 > 644232303)
    {
      if (a1 <= 645494117)
      {
        if ((a1 - 645424688) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
        {
          int v3 = 644232304;
          goto LABEL_60;
        }
        return 0;
      }
      if (a1 == 645494118 || a1 == 758670896) {
        return 0;
      }
      int v3 = 762865200;
LABEL_60:
      if (a1 != v3) {
        return result;
      }
      return 0;
    }
    if ((a1 - 590898736) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0) {
      return 0;
    }
    int v4 = -641230384;
  }
  unsigned int v5 = a1 + v4;
  if (v5 <= 4 && ((1 << v5) & 0x15) != 0) {
    return 0;
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isYUVTexture(uint64_t a1)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 240:
    case 241:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 560:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t getCompressionSettings(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_WORD *)((char *)&v30 + 1) = 0;
  uint64_t v8 = *(void *)(a1 + 96);
  if (v8 != 2)
  {
    LOBYTE(v8) = v8 == 1 ? 9 : 0;
    if (*(void *)(a1 + 152) <= 3uLL) {
      BYTE1(v30) = *(void *)(a1 + 152);
    }
  }
  if (!*(unsigned char *)(a1 + 128)) {
    LOBYTE(v8) = 2;
  }
  if (a4) {
    char v9 = 4;
  }
  else {
    char v9 = 0;
  }
  char v10 = v8 & 0xFB | v9;
  LOBYTE(v30) = v10;
  if (!a2)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 8) - 1;
    if (v11 > 0x284) {
      unint64_t v12 = &texFormatUnsupported;
    }
    else {
      unint64_t v12 = (uint64_t *)*(&off_26516F8A0 + v11);
    }
    if ((*((unsigned char *)v12 + 60) & 0xC) == 0) {
      goto LABEL_37;
    }
    char v17 = v10 | 1;
    goto LABEL_36;
  }
  if ((v8 & 3) == 0)
  {
    if (a4)
    {
      LOBYTE(v30) = v10 | 1;
      if ((v10 & 2) != 0)
      {
LABEL_69:
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        return v19 | v18;
      }
      goto LABEL_21;
    }
    char v17 = v10 | 2;
LABEL_36:
    LOBYTE(v30) = v17;
    goto LABEL_37;
  }
  if (!a4) {
    goto LABEL_37;
  }
  if ((v10 & 2) != 0) {
    goto LABEL_69;
  }
LABEL_21:
  unsigned int CompressionFootprintOfPlane = IOSurfaceGetCompressionFootprintOfPlane();
  if (CompressionFootprintOfPlane <= 3) {
    unsigned __int8 v14 = CompressionFootprintOfPlane;
  }
  else {
    unsigned __int8 v14 = 0;
  }
  if (BYTE1(v30))
  {
    if (BYTE1(v30) == 3)
    {
      if (CompressionFootprintOfPlane > 3 || (CompressionFootprintOfPlane & 0xF) == 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture creation failed: Requesting lossy compression on lossless compressed IOSurface.", buf, 2u);
        }
        if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
          goto LABEL_69;
        }
        *(_WORD *)buf = 0;
        uint64_t v15 = &_os_log_internal;
        uint64_t v16 = "AGX: Texture creation failed: Requesting lossy compression on lossless compressed IOSurface.";
        goto LABEL_68;
      }
    }
    else if (v14 != BYTE1(v30))
    {
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture creation failed: Mismatched IOSurface compression footprint.", buf, 2u);
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
        goto LABEL_69;
      }
      *(_WORD *)buf = 0;
      uint64_t v15 = &_os_log_internal;
      uint64_t v16 = "AGX: Texture creation failed: Mismatched IOSurface compression footprint.";
LABEL_68:
      _os_log_impl(&dword_2427AD000, v15, OS_LOG_TYPE_INFO, v16, buf, 2u);
      goto LABEL_69;
    }
  }
  uint64_t v20 = *(void *)(a1 + 104);
  if ((v20 & 0x4000) != 0)
  {
    BOOL v21 = 1;
    if (!*(unsigned char *)(*(void *)(a5 + 808) + 7812)) {
      goto LABEL_47;
    }
  }
  else
  {
    BOOL v21 = *(void *)(a1 + 96) == 1;
    if (!*(unsigned char *)(*(void *)(a5 + 808) + 7812)) {
      goto LABEL_47;
    }
  }
  char v22 = (v20 & 2) == 0 || v21;
  if ((v22 & 1) == 0)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture creation failed: Compression unsupported with usage flags.", buf, 2u);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      goto LABEL_69;
    }
    *(_WORD *)buf = 0;
    uint64_t v15 = &_os_log_internal;
    uint64_t v16 = "AGX: Texture creation failed: Compression unsupported with usage flags.";
    goto LABEL_68;
  }
LABEL_47:
  BYTE1(v30) = v14;
  unsigned int v23 = *(_DWORD *)(a1 + 8) - 1;
  if (v23 > 0x284)
  {
    uint64_t v24 = &texFormatUnsupported;
    if (!a3)
    {
LABEL_51:
      if (*((_DWORD *)v24 + 6) >= 2u && !*((_DWORD *)v24 + 20))
      {
        unint64_t v25 = 2;
        do
        {
          unsigned int v26 = IOSurfaceGetCompressionFootprintOfPlane();
          if (v26 >= 4) {
            uint8_t v27 = 0;
          }
          else {
            uint8_t v27 = v26;
          }
          buf[v25 - 8] = v27;
        }
        while (v25++ < *((unsigned int *)v24 + 6));
      }
    }
  }
  else
  {
    uint64_t v24 = (uint64_t *)*(&off_26516F8A0 + v23);
    if (!a3) {
      goto LABEL_51;
    }
  }
LABEL_37:
  LOBYTE(v30) = v30 & 0xEF;
  unint64_t v18 = v30 & 0xFFFFFFFFFFFFFF00;
  uint64_t v19 = v30;
  return v19 | v18;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::createTextureViewForBlit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8, int a9, unsigned int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, char a18, char a19)
{
  unsigned int v23 = *(_DWORD *)(a2 + 140);
  unsigned int v24 = *(_DWORD *)(a2 + 144) + a9;
  unsigned int v60 = *(_DWORD *)(a2 + 136);
  unsigned int v25 = *(_DWORD *)(a2 + 128);
  if (v25 <= 1) {
    unsigned int v25 = 1;
  }
  unsigned int v26 = (*(_DWORD *)(a2 + 216) + v25 - 1) / *(_DWORD *)(a2 + 216);
  int AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(a2, v24);
  unsigned int v28 = AddressingBaseLevelWidthInBlocks << v24;
  if (AddressingBaseLevelWidthInBlocks << v24 <= v26) {
    unsigned int v28 = v26;
  }
  if (AddressingBaseLevelWidthInBlocks != 1) {
    unsigned int v26 = v28;
  }
  unsigned int v29 = *(_DWORD *)(a2 + 132);
  if (v29 <= 1) {
    unsigned int v29 = 1;
  }
  unsigned int v30 = (*(_DWORD *)(a2 + 220) + v29 - 1) / *(_DWORD *)(a2 + 220);
  int AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(a2, v24);
  unsigned int v33 = AddressingBaseLevelHeightInBlocks << v24;
  if (AddressingBaseLevelHeightInBlocks << v24 <= v30) {
    unsigned int v33 = v30;
  }
  if (AddressingBaseLevelHeightInBlocks == 1) {
    unsigned int v34 = v30;
  }
  else {
    unsigned int v34 = v33;
  }
  if (a3 == 4) {
    uint64_t v35 = 2;
  }
  else {
    uint64_t v35 = a3;
  }
  if (a19) {
    unsigned int v36 = v26 << (a11 == 4);
  }
  else {
    unsigned int v36 = v26;
  }
  if (a19)
  {
    v34 <<= a11 == 4;
    int v37 = 1;
  }
  else
  {
    int v37 = a11;
  }
  if (a19) {
    uint64_t v38 = v35;
  }
  else {
    uint64_t v38 = a3;
  }
  uint64_t v39 = *(void *)(a2 + 488);
  if (!v39 || (uint64_t v40 = a6, !*(_DWORD *)(v39 + 1080))) {
    uint64_t v40 = 2;
  }
  int v41 = 1;
  if (a18)
  {
    uint64_t v42 = *(void *)(a2 + 380) & 0xFF00;
    if ((*(void *)(a2 + 380) & 0x10000) != 0 || v42 == 1024)
    {
      if (v42 == 1024) {
        int v41 = 6 * *(_DWORD *)(a2 + 376);
      }
      else {
        int v41 = *(_DWORD *)(a2 + 376);
      }
    }
    else
    {
      int v41 = 1;
    }
  }
  int v43 = *(_DWORD *)(a2 + 236);
  if (a18) {
    int v44 = v23 - v24;
  }
  else {
    int v44 = 1;
  }
  if (v43) {
    char v45 = 1;
  }
  else {
    char v45 = 2;
  }
  if ((a4 - 1) > 0x284) {
    uint64_t v46 = &texFormatUnsupported;
  }
  else {
    uint64_t v46 = (uint64_t *)*(&off_26516F8A0 + (a4 - 1));
  }
  AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4(a1, *(os_unfair_lock_s **)(a2 + 8), 0, v45, v38, (uint64_t)v46, a4, a5, v32, *(void *)(a2 + 48), v40, a7, 0, 84148994, v36, v34, v60, v23, v37,
    v41,
    a12,
    v43,
    a13,
    a14,
    a15,
    a16,
    a17,
    v24,
    v44,
    *(unsigned char *)(a2 + 232) != 0,
    *(unsigned char *)(a2 + 392) != 0,
    *(unsigned char *)(a2 + 393) != 0,
    v59,
    0);
  *(void *)a1 = off_26F853CD8;
  uint64_t v47 = *(void *)(a1 + 488);
  if (v47)
  {
    if (*(_DWORD *)(v47 + 1080))
    {
      uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(a2 + 488) + 536 * a10, a8, 0, 0, 0);
      *(void *)(v47 + 296) = 0;
      *(void *)(v47 + 72) = GPUVirtualAddress;
      (*(void (**)(uint64_t))(*(void *)v47 + 16))(v47);
      if (*(void *)(v47 + 1120) >= 2uLL)
      {
        uint64_t v49 = *(void *)(v47 + 1112);
        *(void *)(v47 + 832) = v49;
        *(void *)(v47 + 608) = v49 + GPUVirtualAddress;
        (*(void (**)(void))(*(void *)(v47 + 536) + 16))();
      }
    }
  }
  uint64_t v50 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, a8, 0, 0, a10);
  if (*(_DWORD *)(a1 + 236))
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, a8, v24, 0, a10);
    uint64_t v54 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a1, 0, v24, 0, 0);
    uint64_t v51 = v53 - v50;
    uint64_t v52 = *(void *)(a1 + 72) - v54;
  }
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 72) = v51 + v52 + v50;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((unint64_t)*(unsigned __int8 *)(a1 + 381) << 8 == 768)
  {
    uint64_t v56 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, 0, 0, 0, a10);
    uint64_t v57 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, 0, 0, 1u, a10);
    uint64_t v58 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a1, 0, 0, 0, a10);
    uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a1, 0, 0, 1u, a10);
    *(void *)(a1 + 328) = v57 + v58 - (v56 + result);
  }
  return result;
}

void sub_242E85664(_Unwind_Exception *a1)
{
  AGX::HAL200::Texture::~Texture(v1);
  _Unwind_Resume(a1);
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::blitTextureViewAllowed(uint64_t a1, int a2)
{
  if (!*(_DWORD *)(*(void *)(a1 + 208) + 56) || *(_DWORD *)(a1 + 64) < 2u) {
    return 1;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 144) + a2;
  unsigned int v4 = *(_DWORD *)(a1 + 128);
  if (v4 <= 1) {
    unsigned int v4 = 1;
  }
  unsigned int v5 = (*(_DWORD *)(a1 + 216) + v4 - 1) / *(_DWORD *)(a1 + 216);
  int AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(a1, *(unsigned char *)(a1 + 144) + a2);
  unsigned int v7 = AddressingBaseLevelWidthInBlocks << v3;
  if (AddressingBaseLevelWidthInBlocks << v3 <= v5) {
    unsigned int v7 = v5;
  }
  if (AddressingBaseLevelWidthInBlocks != 1) {
    unsigned int v5 = v7;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 132);
  if (v8 <= 1) {
    unsigned int v8 = 1;
  }
  unsigned int v9 = (*(_DWORD *)(a1 + 220) + v8 - 1) / *(_DWORD *)(a1 + 220);
  int AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(a1, v3);
  unsigned int v11 = AddressingBaseLevelHeightInBlocks << v3;
  if (AddressingBaseLevelHeightInBlocks << v3 <= v9) {
    unsigned int v11 = v9;
  }
  if (AddressingBaseLevelHeightInBlocks == 1) {
    unsigned int v11 = v9;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 136);
  if (v5 > v11) {
    unsigned int v11 = v5;
  }
  if (v11 > v12) {
    unsigned int v12 = v11;
  }
  if (!*(unsigned char *)(a1 + 16)) {
    unsigned int v11 = v12;
  }
  unsigned int v13 = 32 - __clz(v11);
  if (v11) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 0;
  }
  return v3 < v14 && v14 > 1;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMacroblockDimensions(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  if (!*(void *)(a1 + 488))
  {
    *a3 = 0;
    *a2 = 0;
    return;
  }
  int v5 = *(_DWORD *)(a1 + 112);
  if (*(unsigned char *)(a1 + 380) == 3)
  {
    if (*(void *)(a1 + 168))
    {
      unsigned __int8 CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
      unsigned __int8 CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
      *a2 = CompressedTileWidthOfPlane;
      unsigned int v8 = CompressedTileHeightOfPlane;
    }
    else
    {
      MTLPixelFormat v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 208);
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v11, 0, v9, *(unsigned __int8 *)(v10 + 49));
      *a2 = LOBYTE(v11[0]);
      unsigned int v8 = BYTE1(v11[0]);
    }
  }
  else
  {
    unsigned int v8 = 16;
    *a2 = 16;
  }
  *a3 = v8;
  if (v5 != 2)
  {
    if (v5 != 4)
    {
      if (v5 != 8) {
        return;
      }
      *a3 = v8 >> 1;
    }
    *a2 >>= 1;
    unsigned int v8 = *a3;
  }
  *a3 = v8 >> 1;
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(uint64_t a1)
{
  if (!*(void *)(a1 + 488) || *(unsigned char *)(a1 + 380) != 3) {
    return 0;
  }
  if (*(void *)(a1 + 168))
  {
    char CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
    IOSurfaceGetCompressedTileHeightOfPlane();
    return CompressedTileWidthOfPlane == 32;
  }
  else
  {
    MTLPixelFormat v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 208);
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v6, 0, v4, *(unsigned __int8 *)(v5 + 49));
    return LOBYTE(v6[0]) == 32;
  }
}

uint64_t AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getTextureViewForBlit(void *a1, uint64_t a2, char a3, unsigned int a4, __n128 PlaneInfo)
{
  uint64_t v8 = *(void *)(a2 + 488) + 536 * a4;
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = v9 - 1;
  if (unint64_t)(v9 - 1) <= 5 && ((0x35u >> v10)) {
    uint64_t v9 = qword_242EAC3E0[v10];
  }
  int v11 = *(_DWORD *)(a2 + 112);
  if (*(unsigned char *)(a2 + 380) == 3)
  {
    if (*(void *)(a2 + 168))
    {
      unsigned __int8 CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
      unsigned __int8 CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
    }
    else
    {
      MTLPixelFormat v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a2 + 208);
      uint64_t v33 = 0;
      memset(v32, 0, sizeof(v32));
      PlaneInfo = (__n128)InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v32, a4, v14, *(unsigned __int8 *)(v15 + 49));
      unsigned __int8 CompressedTileWidthOfPlane = v32[0];
      unsigned __int8 CompressedTileHeightOfPlane = BYTE1(v32[0]);
    }
  }
  else
  {
    unsigned __int8 CompressedTileHeightOfPlane = 16;
    unsigned __int8 CompressedTileWidthOfPlane = 16;
  }
  unsigned int v16 = CompressedTileHeightOfPlane;
  unsigned int v17 = CompressedTileWidthOfPlane;
  if (v11 != 2)
  {
    if (v11 != 4)
    {
      if (v11 != 8) {
        goto LABEL_15;
      }
      unsigned int v16 = CompressedTileHeightOfPlane >> 1;
    }
    unsigned int v17 = CompressedTileWidthOfPlane >> 1;
  }
  v16 >>= 1;
LABEL_15:
  unsigned int v19 = v17 - 1;
  BOOL v18 = v17 > 1;
  unsigned int v20 = v17 - 1 + (*(_DWORD *)(a2 + 128) >> a3);
  if (v18)
  {
    char v21 = __clz(v19);
    if (v20 >> -v21 >= 2)
    {
      char v22 = 32 - v21;
LABEL_19:
      unsigned int v23 = v20 >> v22;
      goto LABEL_23;
    }
  }
  else if (v20 > 1)
  {
    char v22 = 0;
    goto LABEL_19;
  }
  unsigned int v23 = 1;
LABEL_23:
  unsigned int v24 = v16 - 1;
  BOOL v18 = v16 > 1;
  unsigned int v25 = v16 - 1 + (*(_DWORD *)(a2 + 132) >> a3);
  if (v18)
  {
    char v26 = __clz(v24);
    if (v25 >> -v26 >= 2)
    {
      char v27 = 32 - v26;
LABEL_27:
      unsigned int v28 = v25 >> v27;
      goto LABEL_31;
    }
  }
  else if (v25 > 1)
  {
    char v27 = 0;
    goto LABEL_27;
  }
  unsigned int v28 = 1;
LABEL_31:
  unsigned int v29 = *(_DWORD *)(v8 + 136) >> (*(unsigned char *)(v8 + 144) + a3);
  if (v29 <= 1) {
    unsigned int v29 = 1;
  }
  uint64_t result = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::TextureGen4((uint64_t)a1, *(os_unfair_lock_s **)(a2 + 8), 0, 1, v9, (uint64_t)&texFormatRGBA16UI, *(void *)(v8 + 32), 0, PlaneInfo, *(void *)(v8 + 48), 2, *(_DWORD *)(v8 + 308), *(_DWORD *)(v8 + 192), 84148994, v23, v28, v29, 1u, *(_DWORD *)(v8 + 112),
             1,
             0,
             0,
             *(void *)(v8 + 160),
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             *(unsigned char *)(a2 + 393),
             v31,
             0);
  *a1 = off_26F853CD8;
  return result;
}

id *AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::~Mempool(id *a1)
{
  return a1;
}

void AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::grow(uint64_t a1, int a2)
{
  int v21 = a2;
  v22[0] = a1;
  v22[1] = &v21;
  AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::grow(unsigned int,BOOL)::{lambda(16u)#1}::operator()<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>>((uint64_t)v22);
  LODWORD(v3) = *(_DWORD *)(a1 + 32);
  int v4 = v21;
  *(_DWORD *)(a1 + 32) = v21;
  if (v3 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v3;
  }
  uint64_t v5 = (v4 - 1);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (int *)MEMORY[0x263F4B188];
  if (v3 < v5)
  {
    uint64_t v8 = 32 * v3;
    uint64_t v9 = v3;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(v6 + 8) + *v7 + 24) + v8) = ++v9;
      v8 += 32;
    }
    while (v5 != v9);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = 32 * v5;
  *(_DWORD *)(*(void *)(*(void *)(v6 + 8) + *v7 + 24) + v11) = v10;
  uint64_t v12 = v10;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v12, (v10 & 0xFFFFFFFF00000000 | v3) + 0x100000000);
  if (v12 != v10)
  {
    uint64_t v13 = v12;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + *v7 + 24) + v11) = v12;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v13, (v12 & 0xFFFFFFFF00000000 | v3) + 0x100000000);
      BOOL v14 = v13 == v12;
      uint64_t v12 = v13;
    }
    while (!v14);
  }
  uint64_t v15 = *(atomic_uint **)(a1 + 72);
  atomic_uint v16 = *v15;
  if ((*v15 + 1) > 1) {
    unsigned int v17 = v16 + 1;
  }
  else {
    unsigned int v17 = 1;
  }
  atomic_uint v18 = *v15;
  atomic_compare_exchange_strong(v15, (unsigned int *)&v18, v17);
  if (v18 != v16)
  {
    atomic_uint v19 = v18;
    do
    {
      if ((v18 + 1) > 1) {
        unsigned int v20 = v18 + 1;
      }
      else {
        unsigned int v20 = 1;
      }
      atomic_compare_exchange_strong(v15, (unsigned int *)&v19, v20);
      BOOL v14 = v19 == v18;
      atomic_uint v18 = v19;
    }
    while (!v14);
  }
}

void AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::grow(unsigned int,BOOL)::{lambda(16u)#1}::operator()<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>>(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:**(void **)a1 length:32 * **(unsigned int **)(a1 + 8) options:0];
  int v4 = v3;
  uint64_t v5 = v2[1];
  uint64_t v6 = (int *)MEMORY[0x263F4B188];
  if (v5)
  {
    memcpy(*(void **)&v3[*MEMORY[0x263F4B188] + 24], *(const void **)(v5 + (int)*MEMORY[0x263F4B188] + 24), 32 * *((unsigned int *)v2 + 8));
  }
  v2[1] = v4;
  uint64_t v7 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:*v2 length:32 * **(unsigned int **)(a1 + 8) options:0];
  uint64_t v8 = v7;
  uint64_t v9 = v2[2];
  if (v9)
  {
    memcpy(*(void **)&v7[*v6 + 24], *(const void **)(v9 + *v6 + 24), 32 * *((unsigned int *)v2 + 8));
  }
  v2[2] = v8;
  uint64_t v10 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:*v2 length:4 * **(unsigned int **)(a1 + 8) options:0];
  uint64_t v11 = v10;
  uint64_t v12 = v2[3];
  if (v12)
  {
    memcpy(*(void **)&v10[*v6 + 24], *(const void **)(v12 + *v6 + 24), 4 * *((unsigned int *)v2 + 8));
  }
  v2[3] = v11;
}

unsigned int *AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::Allocation::~Allocation(unsigned int *a1)
{
  if (*a1 && !*((unsigned char *)a1 + 16))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*((void *)a1 + 1) + 56);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *((void *)a1 + 1);
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(v3 + 48);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 48), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
  return a1;
}

uint64_t AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::addToResourceList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (int *)MEMORY[0x263F4B188];
  uint64_t v7 = (int)*MEMORY[0x263F4B188];
  uint64_t v8 = *(void *)(a1 + 8) + v7;
  uint64_t v9 = *(void *)(v8 + 8);
  if (**(void **)a2 == v9 && ((*(void *)(v8 + 40) ^ *(void *)(*(void *)v5 + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    **(void **)a2 = v9;
    *(void *)uint64_t v5 = *(void *)(a1 + 8) + *v6;
    MTLResourceListAddResource();
    uint64_t v7 = *v6;
    uint64_t v10 = 1;
  }
  uint64_t v11 = *(void **)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a1 + 16) + v7;
  uint64_t v14 = *(void *)(v13 + 8);
  if (*v11 != v14 || ((*(void *)(v13 + 40) ^ *(void *)(*(void *)v12 + 40)) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    *uint64_t v11 = v14;
    *(void *)uint64_t v12 = *(void *)(a1 + 16) + *v6;
    MTLResourceListAddResource();
    uint64_t v7 = *v6;
    uint64_t v10 = 1;
  }
  uint64_t v15 = *(void **)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a1 + 24) + v7;
  uint64_t v18 = *(void *)(v17 + 8);
  if (*v15 != v18 || ((*(void *)(v17 + 40) ^ *(void *)(*(void *)v16 + 40)) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    *uint64_t v15 = v18;
    *(void *)uint64_t v16 = *(void *)(a1 + 24) + *v6;
    MTLResourceListAddResource();
    uint64_t v10 = 1;
  }
  os_unfair_lock_unlock(v4);
  return v10;
}

void sub_242E8610C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_242E86588(_Unwind_Exception *a1)
{
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(v1);
  _Unwind_Resume(a1);
}

void sub_242E883B0(_Unwind_Exception *a1)
{
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(v1);
  _Unwind_Resume(a1);
}

void sub_242E887CC(_Unwind_Exception *a1)
{
  AGX::DataBufferAllocator<34ul>::~DataBufferAllocator(v1);
  _Unwind_Resume(a1);
}

void sub_242E88CB8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_242E89090(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *initializeWithDevice<AGXG17FamilyVisibleFunctionTable>(void *a1, void *a2, unint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  unint64_t v7 = (a3 + *MEMORY[0x263EF8AF8] - 1) & -*MEMORY[0x263EF8AF8];
  if (v7 >= a3)
  {
    uint64_t v10 = a4;
    if (*MEMORY[0x263EF8AF8] <= a3 || (a5 & 1) != 0) {
      goto LABEL_10;
    }
    int v22 = 0;
    uint64_t v21 = 0;
    if ((a4 & 0xF0) == 0x20) {
      a4 |= 0x20000uLL;
    }
    uint64_t v13 = [a2 allocBufferSubDataWithLength:a3 options:a4 alignment:256 heapIndex:(char *)&v22 + 2 bufferIndex:&v22 bufferOffset:&v21 parentAddress:0 parentLength:0];
    if (!v13)
    {
LABEL_10:
      LODWORD(v20) = 104;
      uint64_t v8 = (char *)[a1 initWithDevice:a2 pointer:0 length:a3 alignment:1 options:v10 sysMemSize:v7 gpuAddress:0 gpuTag:0 args:a6 argsSize:v20 deallocator:0];
      if (!v8) {
        return v8;
      }
    }
    else
    {
      LODWORD(v19) = 104;
      uint64_t v8 = (char *)[a1 initWithPrimaryBuffer:v13 heapIndex:SHIWORD(v22) bufferIndex:(__int16)v22 bufferOffset:v21 length:a3 args:a6 argsSize:v19 gpuTag:0];
      if (!v8) {
        return v8;
      }
    }
    uint64_t v14 = &v8[*MEMORY[0x263F4B188]];
    uint64_t v15 = *((void *)v14 + 9);
    uint64_t v16 = *((void *)v14 + 16);
    uint64_t v17 = *((void *)v14 + 2) & 0x1F00000000000000 | [v8 length] & 0xFFFFFFFFFFFFFFLL | 0x2000000000000000;
    *((void *)v14 + 1) = v15;
    *((void *)v14 + 2) = v17;
    *((void *)v14 + 3) = v16;
    return v8;
  }

  return 0;
}

void sub_242E89734(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::VsStateConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::VsStateConfigGen3(uint64_t result, void *a2)
{
  *(unsigned char *)(result + 8) = 0;
  uint64_t v2 = (unsigned int **)(a2 + 28);
  if (a2[28])
  {
    if (a2[29]) {
      uint64_t v3 = (unsigned int **)(a2 + 28);
    }
    else {
      uint64_t v3 = (unsigned int **)(a2 + 98);
    }
  }
  else
  {
    uint64_t v3 = (unsigned int **)(a2 + 98);
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (int *)((char *)v5 + *v5);
  }
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 5u)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = (int *)v8[2];
    if (v9) {
      uint64_t v9 = (int *)((char *)v9 + (void)v7 + *(unsigned int *)((char *)v9 + (void)v7));
    }
  }
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 7u)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = v10[3];
    if (v11) {
      LODWORD(v11) = *(int *)((char *)v9 + v11);
    }
  }
  *(_DWORD *)uint64_t result = v11;
  uint64_t v12 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v12 >= 0x21u && (uint64_t v13 = v12[16]) != 0) {
    int v14 = *(int *)((char *)v9 + v13);
  }
  else {
    int v14 = 0;
  }
  uint64_t v15 = &unk_268D5A000;
  {
    uint64_t v117 = result;
    uint64_t v114 = (unsigned int **)(a2 + 28);
    int v115 = a2;
    unsigned int v116 = v9;
    int v113 = v14;
    uint64_t v15 = &unk_268D5A000;
    int v14 = v113;
    uint64_t v2 = v114;
    a2 = v115;
    int v112 = v111;
    uint64_t v9 = v116;
    uint64_t result = v117;
    if (v112)
    {
      getAdditionalSpillBufferBytes(void)::extra = 0;
      uint64_t v15 = (_DWORD *)&unk_268D5A000;
      int v14 = v113;
      uint64_t v9 = v116;
      uint64_t result = v117;
      uint64_t v2 = v114;
      a2 = v115;
    }
  }
  *(_DWORD *)(result + 4) = v15[952] + v14;
  uint64_t v16 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v17 = *v16;
  if (v17 < 0x25) {
    goto LABEL_32;
  }
  if (v16[18] && *((unsigned char *)v9 + v16[18]))
  {
    LOBYTE(v18) = 1;
    goto LABEL_33;
  }
  if (v17 < 0x27)
  {
LABEL_32:
    LOBYTE(v18) = 0;
  }
  else
  {
    uint64_t v18 = v16[19];
    if (v18) {
      LOBYTE(v18) = *((unsigned char *)v9 + v18) != 0;
    }
  }
LABEL_33:
  *(_OWORD *)(result + 12) = 0u;
  uint64_t v19 = (_DWORD *)(result + 12);
  *(unsigned char *)(result + 8) = v18;
  *(_OWORD *)(result + 28) = 0u;
  *(void *)(result + 44) = 0;
  uint64_t v20 = a2[58];
  if (v20)
  {
    uint64_t v21 = (unsigned int **)(a2 + 128);
    if (a2[59]) {
      uint64_t v21 = (unsigned int **)(a2 + 58);
    }
  }
  else
  {
    uint64_t v21 = (unsigned int **)(a2 + 128);
  }
  int v22 = 0;
  if (*v21 && v21[1]) {
    int v22 = (int *)((char *)*v21 + **v21);
  }
  unsigned int v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 7u && (uint64_t v24 = v23[3]) != 0)
  {
    unsigned int v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
    if (!v20)
    {
LABEL_44:
      char v26 = (unsigned int **)(a2 + 128);
      goto LABEL_49;
    }
  }
  else
  {
    unsigned int v25 = 0;
    if (!v20) {
      goto LABEL_44;
    }
  }
  if (a2[59]) {
    char v26 = (unsigned int **)(a2 + 58);
  }
  else {
    char v26 = (unsigned int **)(a2 + 128);
  }
LABEL_49:
  char v27 = 0;
  if (*v26 && v26[1]) {
    char v27 = (int *)((char *)*v26 + **v26);
  }
  unsigned int v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x17u && (uint64_t v29 = v28[11]) != 0)
  {
    unsigned int v30 = (int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
    if (!v25)
    {
LABEL_55:
      if (!v30) {
        return result;
      }
      int v31 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v31 < 0x11u)
      {
        LODWORD(v32) = 0;
      }
      else
      {
        uint64_t v32 = v31[8];
        if (v32) {
          LODWORD(v32) = *(int *)((char *)v30 + v32);
        }
      }
      *(_DWORD *)(result + 32) = v32;
      uint64_t v67 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v67 < 0x13u)
      {
        LODWORD(v68) = 0;
      }
      else
      {
        uint64_t v68 = v67[9];
        if (v68) {
          LODWORD(v68) = *(int *)((char *)v30 + v68);
        }
      }
      *(_DWORD *)(result + 36) = v68;
      uint64_t v69 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v69 < 0x3Du)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[30];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v30 + v70);
        }
      }
      *(_DWORD *)(result + 40) = v70;
      if (*v2)
      {
        if (a2[29]) {
          uint64_t v71 = v2;
        }
        else {
          uint64_t v71 = (unsigned int **)(a2 + 98);
        }
      }
      else
      {
        uint64_t v71 = (unsigned int **)(a2 + 98);
      }
      uint64_t v72 = 0;
      if (*v71 && v71[1]) {
        uint64_t v72 = (int *)((char *)*v71 + **v71);
      }
      uint64_t v73 = (unsigned __int16 *)((char *)v72 - *v72);
      if (*v73 >= 0xBu && (uint64_t v74 = v73[5]) != 0) {
        int v75 = (int *)((char *)v72 + v74 + *(unsigned int *)((char *)v72 + v74));
      }
      else {
        int v75 = 0;
      }
      uint8x8_t v76 = (unsigned __int16 *)((char *)v75 - *v75);
      if (*v76 >= 9u && (uint64_t v77 = v76[4]) != 0) {
        int v78 = *(int *)((char *)v75 + v77);
      }
      else {
        int v78 = 0;
      }
      *(_DWORD *)(result + 44) = 4 * v78;
      unsigned int v79 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v79 < 0xDu)
      {
        LODWORD(v80) = 0;
      }
      else
      {
        uint64_t v80 = v79[6];
        if (v80) {
          LODWORD(v80) = *(int *)((char *)v30 + v80);
        }
      }
      *uint64_t v19 = v80;
      unsigned int v81 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v81 < 0xFu)
      {
        LODWORD(v82) = 0;
      }
      else
      {
        uint64_t v82 = v81[7];
        if (v82) {
          LODWORD(v82) = *(int *)((char *)v30 + v82);
        }
      }
      *(_DWORD *)(result + 20) = v82;
      unint64_t v83 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v83 < 0x23u)
      {
        LODWORD(v84) = 0;
      }
      else
      {
        uint64_t v84 = v83[17];
        if (v84) {
          LODWORD(v84) = *(int *)((char *)v30 + v84);
        }
      }
      *(_DWORD *)(result + 16) = v84;
      unint64_t v85 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v85 < 0x21u)
      {
        LODWORD(v86) = 0;
      }
      else
      {
        uint64_t v86 = v85[16];
        if (v86) {
          LODWORD(v86) = (*((unsigned char *)v30 + v86) != 0) << 7;
        }
      }
      *(_DWORD *)(result + 48) = v86;
      int v87 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v87 < 0x2Bu)
      {
        LODWORD(v88) = 0;
      }
      else
      {
        uint64_t v88 = v87[21];
        if (v88) {
          LODWORD(v88) = 4 * (*((unsigned char *)v30 + v88) != 0);
        }
      }
      int v89 = v88 | v86;
      *(_DWORD *)(result + 48) = v89;
      unint64_t v90 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v90 < 0x2Du)
      {
        LODWORD(v91) = 0;
      }
      else
      {
        uint64_t v91 = v90[22];
        if (v91) {
          LODWORD(v91) = 8 * (*((unsigned char *)v30 + v91) != 0);
        }
      }
      int v92 = v91 | v89;
      *(_DWORD *)(result + 48) = v92;
      unsigned int v93 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v93 < 0x15u)
      {
        LODWORD(v94) = 0;
      }
      else
      {
        uint64_t v94 = v93[10];
        if (v94) {
          LODWORD(v94) = *(int *)((char *)v30 + v94);
        }
      }
      *(_DWORD *)(result + 24) = v94;
      unsigned int v95 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v95 < 0x17u)
      {
        LODWORD(v96) = 0;
      }
      else
      {
        uint64_t v96 = v95[11];
        if (v96) {
          LODWORD(v96) = *(int *)((char *)v30 + v96);
        }
      }
      *(_DWORD *)(result + 28) = v96;
      uint64_t v97 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v97 < 0x29u)
      {
        LODWORD(v98) = 0;
      }
      else
      {
        uint64_t v98 = v97[20];
        if (v98) {
          LODWORD(v98) = (*((unsigned char *)v30 + v98) != 0) << 8;
        }
      }
      int v99 = v98 | v92;
      *(_DWORD *)(result + 48) = v99;
      uint64_t v100 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v100 < 0x35u)
      {
        LODWORD(v101) = 0;
      }
      else
      {
        uint64_t v101 = v100[26];
        if (v101) {
          LODWORD(v101) = (*((unsigned char *)v30 + v101) != 0) << 9;
        }
      }
      int v102 = v101 | v99;
      *(_DWORD *)(result + 48) = v102;
      unint64_t v103 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v103 < 0x2Fu)
      {
        LODWORD(v104) = 0;
      }
      else
      {
        uint64_t v104 = v103[23];
        if (v104) {
          LODWORD(v104) = (*((unsigned char *)v30 + v104) != 0) << 10;
        }
      }
      int v105 = v104 | v102;
      *(_DWORD *)(result + 48) = v105;
      uint64_t v106 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v106 < 0x25u)
      {
        LODWORD(v107) = 0;
      }
      else
      {
        uint64_t v107 = v106[18];
        if (v107) {
          LODWORD(v107) = *((unsigned __int8 *)v30 + v107) != 0;
        }
      }
      int v108 = v107 | v105 & 0x7FE;
      *(_DWORD *)(result + 48) = v108;
      uint64_t v109 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v109 >= 0x27u && (uint64_t v110 = v109[19]) != 0) {
        int v65 = 2 * (*((unsigned char *)v30 + v110) != 0);
      }
      else {
        int v65 = 0;
      }
      unsigned int v66 = v108 & 0xFFFFFFFD;
LABEL_189:
      *(_DWORD *)(result + 48) = v65 | v66;
      return result;
    }
  }
  else
  {
    unsigned int v30 = 0;
    if (!v25) {
      goto LABEL_55;
    }
  }
  uint64_t v33 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v33 < 0xBu)
  {
    LODWORD(v34) = 0;
  }
  else
  {
    uint64_t v34 = v33[5];
    if (v34) {
      LODWORD(v34) = *(int *)((char *)v25 + v34);
    }
  }
  *uint64_t v19 = v34;
  uint64_t v35 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v35 < 0xFu)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[7];
    if (v36) {
      LODWORD(v36) = *(int *)((char *)v25 + v36);
    }
  }
  *(_DWORD *)(result + 16) = v36;
  int v37 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
    int v39 = (*((unsigned char *)v25 + v38) != 0) << 7;
  }
  else {
    int v39 = 0;
  }
  *(_DWORD *)(result + 48) = v39;
  uint64_t v40 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v40 < 0xDu)
  {
    LODWORD(v41) = 0;
  }
  else
  {
    uint64_t v41 = v40[6];
    if (v41) {
      LODWORD(v41) = *(int *)((char *)v25 + v41);
    }
  }
  *(_DWORD *)(result + 20) = v41;
  if (!a2[63])
  {
    uint64_t v42 = (unsigned int **)(a2 + 133);
    if (!a2[134]) {
      return result;
    }
    goto LABEL_82;
  }
  uint64_t v42 = (unsigned int **)(a2 + 63);
  if (!a2[64]) {
    uint64_t v42 = (unsigned int **)(a2 + 133);
  }
  if (v42[1])
  {
LABEL_82:
    int v43 = *v42;
    if (!v43) {
      return result;
    }
    int v44 = (int *)((char *)v43 + *v43);
    char v45 = (unsigned __int16 *)((char *)v44 - *v44);
    if (*v45 >= 5u && (uint64_t v46 = v45[2]) != 0) {
      uint64_t v47 = (int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
    }
    else {
      uint64_t v47 = 0;
    }
    unsigned int v48 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v48 < 5u)
    {
      LODWORD(v49) = 0;
    }
    else
    {
      uint64_t v49 = v48[2];
      if (v49) {
        LODWORD(v49) = *((unsigned __int8 *)v47 + v49) != 0;
      }
    }
    int v50 = v49 | v39;
    *(_DWORD *)(result + 48) = v50;
    uint64_t v51 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v51 < 7u)
    {
      LODWORD(v52) = 0;
    }
    else
    {
      uint64_t v52 = v51[3];
      if (v52) {
        LODWORD(v52) = 2 * (*((unsigned char *)v47 + v52) != 0);
      }
    }
    int v53 = v52 | v50;
    *(_DWORD *)(result + 48) = v53;
    uint64_t v54 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v54 < 9u)
    {
      LODWORD(v55) = 0;
    }
    else
    {
      uint64_t v55 = v54[4];
      if (v55) {
        LODWORD(v55) = 4 * (*((unsigned char *)v47 + v55) != 0);
      }
    }
    int v56 = v55 | v53;
    *(_DWORD *)(result + 48) = v56;
    uint64_t v57 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v57 < 0xBu)
    {
      LODWORD(v58) = 0;
    }
    else
    {
      uint64_t v58 = v57[5];
      if (v58) {
        LODWORD(v58) = 8 * (*((unsigned char *)v47 + v58) != 0);
      }
    }
    int v59 = v58 | v56;
    *(_DWORD *)(result + 48) = v59;
    unsigned int v60 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v60 < 0xDu)
    {
      LODWORD(v61) = 0;
    }
    else
    {
      uint64_t v61 = v60[6];
      if (v61) {
        LODWORD(v61) = 16 * (*((unsigned char *)v47 + v61) != 0);
      }
    }
    int v62 = v61 | v59 & 0xFFFFFFEF;
    *(_DWORD *)(result + 48) = v62;
    unsigned int v63 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v63 >= 0xFu && (uint64_t v64 = v63[7]) != 0)
    {
      int v65 = 32 * (*((unsigned char *)v47 + v64) != 0);
      unsigned int v66 = v62 & 0xFFFFFFDF;
    }
    else
    {
      int v65 = 0;
      unsigned int v66 = v62 & 0xFFFFFFDF;
    }
    goto LABEL_189;
  }
  return result;
}

void AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~WarpFunction(uint64_t a1)
{
  *(void *)a1 = &unk_26F853F00;
  if (*(void *)(a1 + 24720))
  {
    uint64_t v2 = (_OWORD *)(a1 + 24696);
    uint64_t v3 = *(void *)(a1 + 24728);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1 + 24696;
    dispatch_sync(v4, v5);
    *(_OWORD *)(a1 + 24721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 24712) = 0u;
  }

  JUMPOUT(0x24566ED90);
}

uint64_t AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~WarpFunction(uint64_t a1)
{
  *(void *)a1 = &unk_26F853F00;
  if (*(void *)(a1 + 24720))
  {
    uint64_t v2 = (_OWORD *)(a1 + 24696);
    uint64_t v3 = *(void *)(a1 + 24728);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    _OWORD v6[4] = v3;
    v6[5] = a1 + 24696;
    dispatch_sync(v4, v6);
    *(_OWORD *)(a1 + 24721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 24712) = 0u;
  }
  return a1;
}

void *AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::initFactors(_DWORD *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  int v153 = a7;
  int v150 = a6;
  uint64_t v9 = (uint64_t)a1;
  uint64_t v161 = *MEMORY[0x263EF8340];
  a1[4] = a3;
  a1[6164] = a4;
  a1[6165] = a5;
  unint64_t v151 = a5;
  int v152 = a1 + 6163;
  a1[6169] = (a4 + 31) >> 5;
  a1[6170] = (a5 + 31) >> 5;
  uint64_t v154 = MEMORY[0x270FA5388](a1);
  int v155 = (char *)&v149 - v10;
  v159[0] = 0;
  v159[1] = 0;
  v158[0] = 0;
  v158[1] = 0;
  unint64_t v156 = v12;
  if (v12)
  {
    unint64_t v13 = 0;
    unsigned int v14 = 1;
    unint64_t v15 = v156;
    do
    {
      uint64_t v20 = *(void **)(a2 + 8 * v13);
      if (v20)
      {
        [v20 sampleCount];
        int v21 = v157[2];
        uint64_t v20 = *(void **)(a2 + 8 * v13);
      }
      else
      {
        int v21 = 0;
      }
      v160[v13] = v21;
      v159[v13] = [v20 verticalSampleStorage];
      unsigned int v17 = *(void **)(a2 + 8 * v13);
      if (v17)
      {
        [v17 sampleCount];
        int v16 = v157[0];
        unsigned int v17 = *(void **)(a2 + 8 * v13);
      }
      else
      {
        int v16 = 0;
      }
      *((_DWORD *)&v158[2] + v13) = v16;
      v158[v13] = [v17 horizontalSampleStorage];
      unint64_t v13 = v14++;
    }
    while (v13 < v15);
    if (v153)
    {
      uint64_t v22 = 0;
      uint64_t v9 = v154;
      unsigned int v23 = v155;
      do
      {
        uint64_t v25 = v9 + 4 * v22;
        *(_DWORD *)(v25 + 24664) = 0;
        uint64_t v26 = *((unsigned int *)&v158[2] + v22);
        if (v26)
        {
          uint64_t v27 = 0;
          int v28 = 0;
          uint64_t v29 = v158[v22];
          unsigned int v30 = 1;
          do
          {
            uint64_t v31 = 4 * v27;
            float v32 = *(float *)(v29 + 4 * v27);
            unsigned int v33 = vcvtps_u32_f32(32.0 / v32);
            if (v32 > 0.01) {
              unsigned int v30 = v33;
            }
            ++v27;
            *(float *)&v23[v31] = (float)v30 * 0.03125;
            v28 += v30;
          }
          while (v26 != v27);
          *(_DWORD *)(v25 + 24664) = v27;
        }
        else
        {
          LODWORD(v27) = 0;
          int v28 = 0;
          unsigned int v30 = 1;
        }
        uint64_t v34 = (uint64_t)&v155[2048 * v22];
        if (v28 != a4) {
          *(float *)(v34 + 4 * (v27 - 1)) = (float)(a4 - v28 + v30) * 0.03125;
        }
        *(_DWORD *)(v25 + 24644) = vcvts_n_u32_f32((float)v27, 5uLL);
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildWidthLUT(v9, v34, v22);
        *(void *)&v157[2 * v22++ + 512] = v24;
        v23 += 2048;
      }
      while (v22 != v156);
    }
    else if (v150)
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v42 = (uint64_t)&v155[2048 * v35];
        unsigned int v43 = 0;
        if (a4)
        {
          int v44 = (float *)v158[v35];
          int v45 = -1;
          float v46 = 0.01;
          int v36 = -1;
          uint64_t v9 = v154;
          do
          {
            float v37 = fmaxf(*v44, 0.01);
            if (v37 > v46) {
              float v46 = v37;
            }
            if ((float)(v46 * (float)(v45 - v36 + 1)) > 32.0)
            {
              *(float *)(v42 + 4 * v43++) = (float)(v45 - v36) * 0.03125;
              int v36 = v45;
            }
            else
            {
              float v37 = v46;
            }
            unint64_t v47 = v45 + 2;
            ++v45;
            ++v44;
            float v46 = v37;
          }
          while (v47 < a4);
        }
        else
        {
          int v36 = -1;
          float v37 = 0.01;
          uint64_t v9 = v154;
        }
        uint64_t v38 = v9 + 4 * v35;
        float v39 = (float)(~v36 + (int)a4);
        float v40 = ceilf(v37 * v39);
        *(_DWORD *)(v38 + 24664) = v43 + 1;
        *(float *)(v42 + 4 * v43) = v39 / v40;
        *(_DWORD *)(v38 + 24644) = (float)(v40 + (float)((float)v43 * 32.0));
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildWidthLUT(v9, v42, v35);
        *(void *)&v157[2 * v35 + 512] = v41;
        uint64_t v35 = (v35 + 1);
      }
      while (v35 < v156);
    }
    else
    {
      uint64_t v48 = 0;
      float v49 = (float)a4;
      uint64_t v9 = v154;
      do
      {
        uint64_t v51 = v9 + 4 * v48;
        uint64_t v52 = (unsigned int *)(v51 + 24664);
        uint64_t v53 = (uint64_t)&v155[2048 * v48];
        if (a4)
        {
          unsigned int v54 = 0;
          unsigned int v55 = 0;
          uint64_t v56 = v158[v48];
          float v57 = (float)(*((_DWORD *)&v158[2] + v48) - 1);
          int v58 = -1;
          float v59 = 0.01;
          do
          {
            signed int v61 = v54 + 1;
            float v62 = (float)((float)v54 / v49) * v57;
            float v63 = (float)((float)(v54 + 1) / v49) * v57;
            LODWORD(v18) = vcvtps_u32_f32(v62);
            LODWORD(v19) = vcvtms_u32_f32(v63);
            float v64 = *(float *)(v56 + 4 * vcvtms_u32_f32(v62)) + 0.0039062;
            float v65 = fminf(fmaxf(*(float *)(v56 + 4 * v18) + 0.0039062, 0.01), 1.0);
            float v66 = v65;
            if (v18 != v19) {
              float v66 = fminf(fmaxf(*(float *)(v56 + 4 * v19) + 0.0039062, 0.01), 1.0);
            }
            float v67 = fminf(fmaxf(v64, 0.01), 1.0);
            float v68 = v67 + (float)((float)(v62 - floorf(v62)) * (float)(v65 - v67));
            float v69 = v66
                + (float)((float)(v63 - floorf(v63))
                        * (float)(fminf(fmaxf(*(float *)(v56 + 4 * vcvtps_u32_f32(v63)) + 0.0039062, 0.01), 1.0) - v66));
            if (v68 <= v69) {
              float v68 = v69;
            }
            if (v18 < v19)
            {
              v19 -= v18;
              uint64_t v70 = (float *)(v56 + 4 * v18);
              do
              {
                float v71 = *v70++;
                float v72 = fminf(fmaxf(v71 + 0.0039062, 0.01), 1.0);
                if (v68 <= v72) {
                  float v68 = v72;
                }
                --v19;
              }
              while (v19);
            }
            float v73 = fmaxf(v68, 0.01);
            if (v73 > v59) {
              float v59 = v73;
            }
            if ((float)(v59 * (float)(int)(v54 - v58)) > 32.0)
            {
              int v60 = v54 - 1;
              *(float *)(v53 + 4 * v55++) = (float)(v60 - v58) * 0.03125;
              *uint64_t v52 = v55;
              int v58 = v60;
            }
            else
            {
              float v73 = v59;
            }
            uint64_t v18 = v61;
            unsigned int v54 = v61;
            float v59 = v73;
          }
          while (v61 < a4);
        }
        else
        {
          unsigned int v55 = 0;
          int v58 = -1;
          float v73 = 0.01;
        }
        int v74 = ~v58 + a4;
        float v75 = (float)v74;
        float v76 = ceilf(v73 * (float)v74);
        if ((float)v74 <= 32.0) {
          float v77 = (float)v74;
        }
        else {
          float v77 = 32.0;
        }
        if (v76 < v77)
        {
          char v78 = 0;
          float v79 = 0.0;
          do
          {
            float v80 = (float)((float)(v75 / v76) * 32.0) - truncf((float)(v75 / v76) * 32.0);
            if (v80 == 0.0) {
              float v79 = v76;
            }
            v78 |= v80 == 0.0;
            float v76 = v76 + 1.0;
          }
          while (v76 < v77);
          if (v78) {
            float v77 = v79;
          }
        }
        *uint64_t v52 = v55 + 1;
        *(float *)(v53 + 4 * v55) = v75 / v77;
        *(_DWORD *)(v51 + 24644) = (float)(v77 + (float)((float)v55 * 32.0));
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildWidthLUT(v9, v53, v48);
        *(void *)&v157[2 * v48 + 512] = v50;
        uint64_t v48 = (v48 + 1);
      }
      while (v48 < v156);
    }
  }
  unsigned int v81 = v152;
  v152[5] = 0;
  uint64_t v82 = *(unsigned int *)(v9 + 16);
  uint64_t v83 = v9;
  if ((v153 & 1) == 0)
  {
    unint64_t v85 = v156;
    if (v150)
    {
      unint64_t v97 = v151;
      if (v151)
      {
        if (v82)
        {
          unsigned int v98 = 0;
          unsigned int v99 = 0;
          int v100 = -1;
          float v101 = 0.01;
          do
          {
            int v102 = v159;
            float v103 = 0.01;
            uint64_t v104 = v82;
            do
            {
              uint64_t v105 = *v102++;
              float v106 = *(float *)(v105 + 4 * v98);
              if (v106 > v103) {
                float v103 = v106;
              }
              --v104;
            }
            while (v104);
            if (v103 > v101) {
              float v101 = v103;
            }
            if ((float)(v101 * (float)(int)(v98 - v100)) > 32.0)
            {
              *(float *)&v157[v99++] = (float)(int)(v98 - 1 - v100) * 0.03125;
              int v100 = v98 - 1;
            }
            else
            {
              float v103 = v101;
            }
            ++v98;
            float v101 = v103;
          }
          while ((int)v98 < v97);
          goto LABEL_120;
        }
        unsigned int v99 = 0;
        int v145 = -1;
        int v100 = -1;
        do
        {
          if ((float)((float)(v145 - v100 + 1) * 0.01) > 32.0)
          {
            *(float *)&v157[v99++] = (float)(v145 - v100) * 0.03125;
            int v100 = v145;
          }
          unint64_t v146 = v145 + 2;
          ++v145;
        }
        while (v146 < v97);
      }
      else
      {
        unsigned int v99 = 0;
        int v100 = -1;
      }
      float v103 = 0.01;
LABEL_120:
      float v131 = (float)(~v100 + (int)v97);
      float v132 = ceilf(v103 * v131);
      *(float *)&v157[v99] = v131 / v132;
      v81[5] = v99 + 1;
      float v133 = v132 + (float)((float)v99 * 32.0);
LABEL_133:
      unsigned int v130 = v133;
      goto LABEL_134;
    }
    unint64_t v107 = v151;
    if (v151)
    {
      if (v82)
      {
        unsigned int v108 = 0;
        unsigned int v109 = 0;
        float v110 = (float)v151;
        int v111 = -1;
        float v112 = 0.01;
        do
        {
          uint64_t v113 = 0;
          unsigned int v114 = v108;
          float v115 = (float)v108++ / v110;
          float v116 = 0.01;
          do
          {
            uint64_t v117 = v159[v113];
            uint64_t v120 = (v160[v113] - 1);
            float v118 = v115 * (float)v120;
            float v119 = (float)((float)v108 / v110) * (float)v120;
            LODWORD(v120) = vcvtps_u32_f32(v118);
            LODWORD(v11) = vcvtms_u32_f32(v119);
            float v121 = *(float *)(v117 + 4 * vcvtms_u32_f32(v118)) + 0.0039062;
            float v122 = fminf(fmaxf(*(float *)(v117 + 4 * v120) + 0.0039062, 0.01), 1.0);
            float v123 = v122;
            if (v120 != v11) {
              float v123 = fminf(fmaxf(*(float *)(v117 + 4 * v11) + 0.0039062, 0.01), 1.0);
            }
            float v124 = fminf(fmaxf(v121, 0.01), 1.0);
            float v125 = v124 + (float)((float)(v118 - floorf(v118)) * (float)(v122 - v124));
            float v126 = v123
                 + (float)((float)(v119 - floorf(v119))
                         * (float)(fminf(fmaxf(*(float *)(v117 + 4 * vcvtps_u32_f32(v119)) + 0.0039062, 0.01), 1.0)
                                 - v123));
            if (v125 <= v126) {
              float v125 = v126;
            }
            if (v120 < v11)
            {
              v11 -= v120;
              BOOL v127 = (float *)(v117 + 4 * v120);
              do
              {
                float v128 = *v127++;
                float v129 = fminf(fmaxf(v128 + 0.0039062, 0.01), 1.0);
                if (v125 <= v129) {
                  float v125 = v129;
                }
                --v11;
              }
              while (v11);
            }
            if (v125 > v116) {
              float v116 = v125;
            }
            ++v113;
          }
          while (v113 != v82);
          if (v116 > v112) {
            float v112 = v116;
          }
          if ((float)(v112 * (float)(int)(v114 - v111)) > 32.0)
          {
            *(float *)&v157[v109++] = (float)(int)(v114 - 1 - v111) * 0.03125;
            int v111 = v114 - 1;
          }
          else
          {
            float v116 = v112;
          }
          float v112 = v116;
        }
        while ((int)v108 < v107);
        goto LABEL_123;
      }
      unsigned int v109 = 0;
      int v147 = -1;
      int v111 = -1;
      do
      {
        if ((float)((float)(v147 - v111 + 1) * 0.01) > 32.0)
        {
          *(float *)&v157[v109++] = (float)(v147 - v111) * 0.03125;
          int v111 = v147;
        }
        unint64_t v148 = v147 + 2;
        ++v147;
      }
      while (v148 < v107);
    }
    else
    {
      unsigned int v109 = 0;
      int v111 = -1;
    }
    float v116 = 0.01;
LABEL_123:
    float v134 = (float)(~v111 + (int)v107);
    float v135 = ceilf(v116 * v134);
    float v136 = 32.0;
    if (v134 <= 32.0) {
      float v136 = (float)(~v111 + (int)v107);
    }
    if (v135 < v136)
    {
      char v137 = 0;
      float v138 = 0.0;
      do
      {
        float v139 = (float)((float)(v134 / v135) * 32.0) - truncf((float)(v134 / v135) * 32.0);
        if (v139 == 0.0) {
          float v138 = v135;
        }
        v137 |= v139 == 0.0;
        float v135 = v135 + 1.0;
      }
      while (v135 < v136);
      if (v137) {
        float v136 = v138;
      }
    }
    *(float *)&v157[v109] = v134 / v136;
    v81[5] = v109 + 1;
    float v133 = v136 + (float)((float)v109 * 32.0);
    goto LABEL_133;
  }
  uint64_t v84 = v160[0];
  unint64_t v85 = v156;
  if (v160[0])
  {
    if (v82)
    {
      uint64_t v86 = 0;
      int v87 = 0;
      unsigned int v88 = 1;
      unint64_t v89 = v151;
      do
      {
        unint64_t v90 = v159;
        float v91 = 0.01;
        uint64_t v92 = v82;
        do
        {
          uint64_t v93 = *v90++;
          float v94 = *(float *)(v93 + 4 * v86);
          unsigned int v95 = vcvtps_u32_f32(32.0 / v94);
          if (v94 > v91)
          {
            unsigned int v88 = v95;
            float v91 = v94;
          }
          --v92;
        }
        while (v92);
        uint64_t v96 = v86 + 1;
        *(float *)&v157[v86] = (float)v88 * 0.03125;
        v87 += v88;
        uint64_t v86 = v96;
      }
      while (v96 != v84);
      LODWORD(v84) = v96;
    }
    else
    {
      memset_pattern16(v157, &unk_242EA8910, 4 * v160[0]);
      uint64_t v83 = v154;
      unsigned int v88 = 1;
      int v87 = v84;
      unint64_t v89 = v151;
    }
    v81[5] = v84;
  }
  else
  {
    int v87 = 0;
    unsigned int v88 = 1;
    unint64_t v89 = v151;
  }
  if (v87 != v89) {
    *(float *)&v157[(v84 - 1)] = (float)(v89 - v87 + v88) * 0.03125;
  }
  unsigned int v130 = vcvts_n_u32_f32((float)v84, 5uLL);
LABEL_134:
  *unsigned int v81 = v130;
  uint64_t result = (void *)AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildHeightLUTs(v83);
  if (v85)
  {
    uint64_t v142 = 0;
    double v143 = 1.0;
    uint64_t v144 = v154;
    do
    {
      if (*(double *)&v157[2 * v142 + 512] < v143) {
        double v143 = *(double *)&v157[2 * v142 + 512];
      }
      ++v142;
    }
    while (v85 > v142);
  }
  else
  {
    double v143 = 1.0;
    uint64_t v144 = v154;
  }
  if (v141 >= v143) {
    double v141 = v143;
  }
  *((unsigned char *)v81 + 32) = (int)fmin(ceil(2.0 / v141), 255.0);
  if (*((unsigned char *)v81 + 92)) {
    return memcpy(*(void **)(v144 + 24800), (const void *)(v144 + 20), 0x6030uLL);
  }
  return result;
}

uint64_t AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildWidthLUT(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(a1 + 24776) + 4 * (a3 << 9);
  uint64_t v6 = *(void *)(a1 + 24752) + 8 * (a3 << 9);
  uint64_t result = AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildGPULUTs<true>();
  uint64_t v8 = a1 + 4104 * a3;
  uint64_t v9 = (float *)(v8 + 20);
  uint64_t v10 = v8 + 8228;
  uint64_t v11 = *(unsigned int *)(a1 + 4 * a3 + 24664);
  if (!v11) {
    goto LABEL_11;
  }
  if (v11 <= 3)
  {
    LODWORD(v12) = 0;
    unint64_t v13 = (_DWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v12 = v11 & 0xFFFFFFFC;
  uint64_t v14 = 8 * v12;
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  float32x4_t v16 = (float32x4_t)vdupq_n_s32(0x4B800000u);
  float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3B800000u);
  uint64_t v18 = (const float *)v6;
  uint64_t v19 = v9;
  uint64_t v20 = v12;
  do
  {
    float32x4x2_t v29 = vld2q_f32(v18);
    v18 += 8;
    v30.val[0] = vdivq_f32(v16, vcvtq_f32_u32((uint32x4_t)vaddq_s32((int32x4_t)v29.val[0], v15)));
    v30.val[1] = vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)v29.val[1], 8uLL), 8uLL)), v17);
    vst2q_f32(v19, v30);
    v19 += 8;
    v20 -= 4;
  }
  while (v20);
  uint64_t v9 = (float *)((char *)v9 + v14);
  if (v12 != v11)
  {
    unint64_t v13 = (_DWORD *)(v6 + v14);
LABEL_8:
    int v21 = v11 - v12;
    do
    {
      *uint64_t v9 = 16777000.0 / (float)(*v13 + 1);
      v9[1] = (float)((int)(v13[1] << 8) >> 8) * 0.0039062;
      v9 += 2;
      v13 += 2;
      --v21;
    }
    while (v21);
  }
  if (v11 < 0x201) {
LABEL_11:
  }
    *(void *)uint64_t v9 = *((void *)v9 - 1);
  int v22 = *(_DWORD *)(a1 + 24676);
  BOOL v23 = __CFADD__(v22, 1);
  unsigned int v24 = v22 + 1;
  if (v23) {
    goto LABEL_18;
  }
  unsigned int v25 = v24;
  do
  {
    uint64_t v26 = (_DWORD *)(v6 + 8 * (*(_DWORD *)v5 & 0x3FF));
    *(float *)uint64_t v10 = (float)(*v26 + 1) * 0.000000059605;
    int v27 = v26[1] << 8;
    *(_DWORD *)(v10 + 4) = *(unsigned __int8 *)(v10 + 4) | v27;
    int v28 = *(_WORD *)(v5 + 2) & 0x3F;
    if ((*(_WORD *)(v5 + 2) & 0x3F) == 0) {
      int v28 = 255;
    }
    *(_DWORD *)(v10 + 4) = v28 | v27;
    v5 += 4;
    v10 += 8;
    --v25;
  }
  while (v25);
  if (v24 < 0x201) {
LABEL_18:
  }
    *(void *)uint64_t v10 = *(void *)(v10 - 8);
  return result;
}

uint64_t AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildHeightLUTs(uint64_t a1)
{
  uint64_t v2 = a1 + 16436;
  uint64_t v3 = *(_DWORD **)(a1 + 24760);
  long long v26 = *(_OWORD *)(a1 + 24784);
  uint64_t result = AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildGPULUTs<false>();
  uint64_t v5 = a1 + 20540;
  uint64_t v6 = *((void *)&v26 + 1);
  uint64_t v7 = *(unsigned int *)(v2 + 8236);
  uint64_t v8 = (float *)v2;
  if (!v7) {
    goto LABEL_11;
  }
  if (v7 <= 3)
  {
    LODWORD(v9) = 0;
    uint64_t v10 = v3;
    uint64_t v8 = (float *)v2;
    goto LABEL_8;
  }
  uint64_t v9 = v7 & 0xFFFFFFFC;
  uint64_t v11 = 2 * v9;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x4B800000u);
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3B800000u);
  int32x4_t v15 = (const float *)v3;
  float32x4_t v16 = (float *)v2;
  uint64_t v17 = v9;
  do
  {
    float32x4x2_t v27 = vld2q_f32(v15);
    v15 += 8;
    v28.val[0] = vdivq_f32(v13, vcvtq_f32_u32((uint32x4_t)vaddq_s32((int32x4_t)v27.val[0], v12)));
    v28.val[1] = vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)v27.val[1], 8uLL), 8uLL)), v14);
    vst2q_f32(v16, v28);
    v16 += 8;
    v17 -= 4;
  }
  while (v17);
  uint64_t v8 = (float *)(v2 + v11 * 4);
  if (v9 != v7)
  {
    uint64_t v10 = &v3[v11];
LABEL_8:
    int v18 = v7 - v9;
    do
    {
      *uint64_t v8 = 16777000.0 / (float)(*v10 + 1);
      v8[1] = (float)((int)(v10[1] << 8) >> 8) * 0.0039062;
      v8 += 2;
      v10 += 2;
      --v18;
    }
    while (v18);
  }
  if (v7 < 0x201) {
LABEL_11:
  }
    *(void *)uint64_t v8 = *((void *)v8 - 1);
  int v19 = *(_DWORD *)(v2 + 8244);
  BOOL v20 = __CFADD__(v19, 1);
  unsigned int v21 = v19 + 1;
  if (v20) {
    goto LABEL_18;
  }
  unsigned int v22 = v21;
  do
  {
    BOOL v23 = &v3[2 * (*(_DWORD *)v6 & 0x3FF)];
    *(float *)uint64_t v5 = (float)(*v23 + 1) * 0.000000059605;
    int v24 = v23[1] << 8;
    *(_DWORD *)(v5 + 4) = *(unsigned __int8 *)(v5 + 4) | v24;
    int v25 = *(_WORD *)(v6 + 2) & 0x3F;
    if ((*(_WORD *)(v6 + 2) & 0x3F) == 0) {
      int v25 = 255;
    }
    *(_DWORD *)(v5 + 4) = v25 | v24;
    v6 += 4;
    v5 += 8;
    --v22;
  }
  while (v22);
  if (v21 < 0x201) {
LABEL_18:
  }
    *(void *)uint64_t v5 = *(void *)(v5 - 8);
  return result;
}

uint64_t AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildGPULUTs<false>()
{
  v43[1] = *MEMORY[0x263EF8340];
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)v43 - v7;
  if (v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = 32 * v6;
    double v13 = 1.0;
    do
    {
      float32x4_t v14 = (_DWORD *)(v2 + 4 * v9);
      float v15 = *v1++;
      float v16 = v15;
      double v17 = 1.0 / v15;
      if (v17 < v13) {
        double v13 = v17;
      }
      float v18 = (double)v10 - (double)v11 * v17;
      uint64_t result = (v17 * 16777216.0 + 0.5 + -1.0);
      *float32x4_t v14 = result;
      v14[1] = llround(v18 * 256.0) & 0xFFFFFF;
      *(float *)&v8[4 * v9] = (float)v11;
      *(float *)&v8[4 * (v9 + 1)] = (float)((float)(v16 * 32.0) * 0.5) + (float)v11;
      v11 += vcvts_n_u32_f32(v16, 5uLL);
      v10 += 32;
      v9 += 2;
    }
    while (v12 != v10);
  }
  int v19 = *(_DWORD *)(v5 + 8);
  if (v19 != -1)
  {
    int v20 = 0;
    unsigned int v21 = 0;
    unsigned int v22 = *(unsigned int **)v3;
    do
    {
      float v24 = (float)(32 * v20);
      unsigned int v25 = v21 + 1;
      if (v4 <= v21 + 1) {
        unsigned int v26 = v21 + 1;
      }
      else {
        unsigned int v26 = v4;
      }
      unsigned int v21 = v26 - 1;
      do
      {
        float v27 = 0.0;
        if (v26 == v25) {
          goto LABEL_17;
        }
        unsigned int v28 = v25;
        float v29 = *(float *)&v8[4 * v25++];
      }
      while (v29 <= v24);
      unsigned int v21 = v28 - 1;
      if (v28 >= v4 || (float v30 = v29 - v24, v30 >= 32.0)) {
LABEL_17:
      }
        float v30 = 0.0;
      if (v21 + 2 < v4)
      {
        float v31 = *(float *)&v8[4 * v21 + 8] - v24;
        if (v31 < 32.0) {
          float v27 = v31;
        }
      }
      *unsigned int v22 = *v22 & 0xC0C0FC00 | v21 & 0x3FF | (((v30 * 2.0 + 0.5) & 0x3F) << 16) | (((v27 * 2.0 + 0.5) & 0x3F) << 24);
      ++v22;
      BOOL v23 = v20++ == v19;
    }
    while (!v23);
    int v32 = 0;
    unsigned int v33 = 0;
    uint64_t v34 = *(_DWORD **)(v3 + 8);
    do
    {
      float v35 = (float)(32 * v32);
      int v36 = (float *)&v8[4 * v33 + 8];
      while (1)
      {
        unsigned int v37 = v33 + 2;
        float v38 = 0.0;
        if (v33 + 2 >= v4) {
          break;
        }
        float v39 = *v36;
        v36 += 2;
        float v40 = v39;
        v33 += 2;
        if (v39 > v35)
        {
          unsigned int v33 = v37 - 2;
          float v41 = v40 - v35;
          if (v41 < 32.0) {
            goto LABEL_28;
          }
          break;
        }
      }
      float v41 = 0.0;
LABEL_28:
      if (v33 + 4 < v4)
      {
        float v42 = *(float *)&v8[4 * v33 + 16] - v35;
        if (v42 < 32.0) {
          float v38 = v42;
        }
      }
      uint64_t result = (v33 >> 1) & 0x3FF;
      *uint64_t v34 = *v34 & 0xC0C0FC00 | result | (((v41 * 2.0 + 0.5) & 0x3F) << 16) | (((v38 * 2.0 + 0.5) & 0x3F) << 24);
      ++v34;
      BOOL v23 = v32++ == v19;
    }
    while (!v23);
  }
  return result;
}

uint64_t AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildGPULUTs<true>()
{
  v42[1] = *MEMORY[0x263EF8340];
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)v42 - v6;
  if (v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = 32 * v5;
    double v12 = 1.0;
    do
    {
      double v13 = (_DWORD *)(v2 + 4 * v8);
      float v14 = *v1++;
      float v15 = v14;
      double v16 = 1.0 / v14;
      if (v16 < v12) {
        double v12 = v16;
      }
      float v17 = (double)v9 - (double)v10 * v16;
      *double v13 = (v16 * 16777216.0 + 0.5 + -1.0);
      v13[1] = llround(v17 * 256.0) & 0xFFFFFF;
      *(float *)&v7[4 * v8] = (float)v10;
      *(float *)&v7[4 * (v8 + 1)] = (float)((float)(v15 * 32.0) * 0.5) + (float)v10;
      v10 += vcvts_n_u32_f32(v15, 5uLL);
      v9 += 32;
      v8 += 2;
    }
    while (v11 != v9);
  }
  int v18 = *(_DWORD *)(result + 24676);
  if (v18 != -1)
  {
    int v19 = 0;
    unsigned int v20 = 0;
    unsigned int v21 = *(unsigned int **)v3;
    do
    {
      float v23 = (float)(32 * v19);
      unsigned int v24 = v20 + 1;
      if (v4 <= v20 + 1) {
        unsigned int v25 = v20 + 1;
      }
      else {
        unsigned int v25 = v4;
      }
      unsigned int v20 = v25 - 1;
      do
      {
        float v26 = 0.0;
        if (v25 == v24) {
          goto LABEL_17;
        }
        unsigned int v27 = v24;
        float v28 = *(float *)&v7[4 * v24++];
      }
      while (v28 <= v23);
      unsigned int v20 = v27 - 1;
      if (v27 >= v4 || (float v29 = v28 - v23, v29 >= 32.0)) {
LABEL_17:
      }
        float v29 = 0.0;
      if (v20 + 2 < v4)
      {
        float v30 = *(float *)&v7[4 * v20 + 8] - v23;
        if (v30 < 32.0) {
          float v26 = v30;
        }
      }
      *unsigned int v21 = *v21 & 0xC0C0FC00 | v20 & 0x3FF | (((v29 * 2.0 + 0.5) & 0x3F) << 16) | (((v26 * 2.0 + 0.5) & 0x3F) << 24);
      ++v21;
      BOOL v22 = v19++ == v18;
    }
    while (!v22);
    int v31 = 0;
    unsigned int v32 = 0;
    unsigned int v33 = *(_DWORD **)(v3 + 8);
    do
    {
      float v34 = (float)(32 * v31);
      float v35 = (float *)&v7[4 * v32 + 8];
      while (1)
      {
        unsigned int v36 = v32 + 2;
        float v37 = 0.0;
        if (v32 + 2 >= v4) {
          break;
        }
        float v38 = *v35;
        v35 += 2;
        float v39 = v38;
        v32 += 2;
        if (v38 > v34)
        {
          unsigned int v32 = v36 - 2;
          float v40 = v39 - v34;
          if (v40 < 32.0) {
            goto LABEL_28;
          }
          break;
        }
      }
      float v40 = 0.0;
LABEL_28:
      if (v32 + 4 < v4)
      {
        float v41 = *(float *)&v7[4 * v32 + 16] - v34;
        if (v41 < 32.0) {
          float v37 = v41;
        }
      }
      uint64_t result = (v32 >> 1) & 0x3FF;
      *unsigned int v33 = *v33 & 0xC0C0FC00 | result | (((v40 * 2.0 + 0.5) & 0x3F) << 16) | (((v37 * 2.0 + 0.5) & 0x3F) << 24);
      ++v33;
      BOOL v22 = v31++ == v18;
    }
    while (!v22);
  }
  return result;
}

void AGX::HAL200::WarpFunction::~WarpFunction(AGX::HAL200::WarpFunction *this)
{
  *(void *)this = &unk_26F853F00;
  if (*((void *)this + 3090))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 24696);
    uint64_t v3 = *((void *)this + 3091);
    unsigned int v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 24696;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 24721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 24712) = 0u;
  }

  JUMPOUT(0x24566ED90);
}

{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  void v5[6];

  *(void *)this = &unk_26F853F00;
  if (*((void *)this + 3090))
  {
    uint64_t v2 = (_OWORD *)((char *)this + 24696);
    uint64_t v3 = *((void *)this + 3091);
    unsigned int v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 24696;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 24721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)((char *)this + 24712) = 0u;
  }
}

void ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(uint64_t **)(v2 + 24);
  if (*((unsigned char *)v3 + 304))
  {
    uint64_t v9 = *v3;
    unsigned int v10 = (void *)v3[1];
    if (*v3)
    {
      *(void *)(v9 + 8) = v10;
      unsigned int v10 = (void *)v3[1];
    }
    else
    {
      *(void *)(v1 + 8) = v10;
    }
    *unsigned int v10 = v9;

    free(v3);
  }
  else
  {
    unsigned int v4 = (unint64_t *)(*(void *)(v2 + 8) - *(void *)(v1 + 144));
    unint64_t v5 = *v4;
    if (*v4 > 0x800)
    {
      uint64_t v7 = v3 + 36;
    }
    else
    {
      unsigned int v6 = (v5 >> 6) - 1;
      *((_DWORD *)v3 + 6) |= 1 << v6;
      uint64_t v7 = &v3[v6 + 4];
    }
    uint64_t v8 = *v7;
    *uint64_t v7 = (uint64_t)v4;
    v4[1] = v8;
    v3[2] += v5;
  }
}

void AGX::Heap<true>::allocateImpl(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v23 = 0;
  unsigned int v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  unsigned int v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  uint64_t v15 = 0;
  double v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  unint64_t v8 = (a3 + *(void *)(a2 + 144) + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v9 = *(NSObject **)(a2 + 16);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResource_block_invoke;
  v13[3] = &unk_265170DA0;
  v13[8] = a2;
  v13[9] = v8;
  v13[4] = &v15;
  v13[5] = v14;
  v13[6] = &v19;
  v13[7] = &v23;
  dispatch_sync(v9, v13);
  unsigned int v10 = v16;
  if (a4) {
    *a4 = *(void *)(v16[3] + 296);
  }
  uint64_t v11 = v24[3];
  uint64_t v12 = v10[3];
  *a1 = v20[3];
  a1[1] = v11;
  a1[2] = a3;
  a1[3] = v12;
  a1[4] = a2;
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
}

uint64_t ___ZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResource_block_invoke(void *a1)
{
  uint64_t v2 = a1[8];
  *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)v2;
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 24);
  if (!v4)
  {
LABEL_19:
    *(void *)(*(void *)(a1[4] + 8) + 24) = malloc_type_malloc(0x138uLL, 0x10A0040668EDDA4uLL);
    uint64_t v15 = *(void *)(*(void *)(a1[4] + 8) + 24);
    if (!v15) {
      _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE0_clB14_AGX__Crashed_Ev();
    }
    *(unsigned char *)(v15 + 304) = 0;
    unint64_t v16 = *(void *)(v2 + 136) + a1[9];
    unint64_t v17 = *(void *)(v2 + 104);
    if (v16 <= v17)
    {
      if (*(void *)v2)
      {
        char v23 = 1;
        if (!(v17 >> 22)) {
          char v23 = 2;
        }
        unint64_t v24 = v17 << v23;
        if (v24 >= 0x40000) {
          unint64_t v24 = 0x40000;
        }
        *(void *)(v2 + 104) = v24;
      }
      *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) = [objc_alloc(MEMORY[0x263F4B130]) initWithDevice:*(void *)(v2 + 24) options:0 args:v2 + 32 argsSize:104];
      uint64_t v20 = *(void *)(v2 + 136);
      uint64_t v21 = @"AGXHeap with guard";
      uint64_t v22 = @"AGXHeap without guard";
    }
    else
    {
      long long v18 = *(_OWORD *)(v2 + 96);
      long long v61 = *(_OWORD *)(v2 + 80);
      long long v62 = v18;
      long long v63 = *(_OWORD *)(v2 + 112);
      uint64_t v64 = *(void *)(v2 + 128);
      long long v19 = *(_OWORD *)(v2 + 48);
      long long v58 = *(_OWORD *)(v2 + 32);
      long long v59 = v19;
      long long v60 = *(_OWORD *)(v2 + 64);
      *((void *)&v62 + 1) = (v16 + 0x3FFF) & 0xFFFFFFFFFFFFC000;
      *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) = [objc_alloc(MEMORY[0x263F4B130]) initWithDevice:*(void *)(v2 + 24) options:0 args:&v58 argsSize:104];
      uint64_t v20 = *(void *)(v2 + 136);
      uint64_t v21 = @"AGXHeap with guard (large)";
      uint64_t v22 = @"AGXHeap without guard (large)";
    }
    if (v20) {
      uint64_t v25 = v21;
    }
    else {
      uint64_t v25 = v22;
    }
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296), "setLabel:", v25, v58, v59, v60, v61, v62, v63, v64);
    uint64_t v26 = *(void **)(*(void *)(a1[4] + 8) + 24);
    if (!v26[37])
    {
      free(v26);
      *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
      _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE_clB14_AGX__Crashed_Ev();
    }
    unsigned int v27 = *(atomic_uint **)(v2 + 160);
    if (v27)
    {
      atomic_uint v28 = *v27;
      unsigned int v29 = (*v27 + 1) > 1 ? v28 + 1 : 1;
      atomic_uint v30 = *v27;
      atomic_compare_exchange_strong(v27, (unsigned int *)&v30, v29);
      if (v30 != v28)
      {
        atomic_uint v31 = v30;
        do
        {
          if ((v30 + 1) > 1) {
            unsigned int v32 = v30 + 1;
          }
          else {
            unsigned int v32 = 1;
          }
          atomic_compare_exchange_strong(v27, (unsigned int *)&v31, v32);
          BOOL v33 = v31 == v30;
          atomic_uint v30 = v31;
        }
        while (!v33);
      }
    }
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 16) = [*(id *)(*(void *)(*(void *)(a1[4] + 8)+ 24)+ 296) resourceSize]- *(void *)(v2 + 136);
    *(_DWORD *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 24) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 32) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 40) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 48) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 56) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 64) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 72) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 80) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 88) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 96) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 104) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 112) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 120) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 128) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 136) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 144) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 152) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 160) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 168) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 176) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 184) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 192) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 200) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 208) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 216) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 224) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 232) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 240) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 248) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 256) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 264) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 272) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 280) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 288) = 0;
    **(void **)(*(void *)(a1[4] + 8) + 24) = 0;
    float v34 = *(void **)(v2 + 8);
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 8) = v34;
    *float v34 = *(void *)(*(void *)(a1[4] + 8) + 24);
    *(void *)(v2 + 8) = *(void *)(*(void *)(a1[4] + 8) + 24);
    uint64_t v35 = *(void *)(*(void *)(a1[4] + 8) + 24);
    unsigned int v36 = (void *)[*(id *)(v35 + 296) virtualAddress];
    *unsigned int v36 = *(void *)(v35 + 16);
    *(void *)(*(void *)(a1[5] + 8) + 24) = v36;
    uint64_t v37 = *(void *)(*(void *)(a1[4] + 8) + 24);
    float v38 = *(void **)(*(void *)(a1[5] + 8) + 24);
    uint64_t v39 = a1[9];
    unint64_t v40 = *v38 - v39;
    if (*v38 != v39)
    {
      float v41 = (char *)v38 + v39;
      *(void *)((char *)v38 + v39) = v40;
      if (v40 > 0x800)
      {
        unsigned int v43 = (uint64_t *)(v37 + 288);
      }
      else
      {
        unsigned int v42 = (v40 >> 6) - 1;
        *(_DWORD *)(v37 + 24) |= 1 << v42;
        unsigned int v43 = (uint64_t *)(v37 + 8 * v42 + 32);
      }
      uint64_t v44 = *v43;
      *unsigned int v43 = (uint64_t)v41;
      *((void *)v41 + 1) = v44;
      *float v38 = v39;
      float v38 = *(void **)(*(void *)(a1[5] + 8) + 24);
      uint64_t v37 = *(void *)(*(void *)(a1[4] + 8) + 24);
    }
    int v45 = (char *)v38 + *(void *)(v2 + 144);
    uint64_t v46 = [*(id *)(v37 + 296) gpuAddress];
    *(void *)(*(void *)(a1[6] + 8) + 24) = &v45[v46
                                                      - [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) virtualAddress]];
    uint64_t v47 = *(void *)(*(void *)(a1[4] + 8) + 24);
    *(void *)(v47 + 16) -= **(void **)(*(void *)(a1[5] + 8) + 24);
    *(void *)(*(void *)(a1[7] + 8) + 24) = v45;
    [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) gpuAddress];
    return [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) virtualAddress];
  }
  unint64_t v5 = a1[9];
  while (1)
  {
    if (*(void *)(v4 + 16) < v5 || *(unsigned char *)(v4 + 304)) {
      goto LABEL_6;
    }
    if (v5 <= 0x800)
    {
      unsigned int v9 = __clz(__rbit32(*(_DWORD *)(v4 + 24) >> ((v5 >> 6) - 1))) + (v5 >> 6) - 1;
      if (v9 <= 0x1F)
      {
        uint64_t v10 = 8 * v9;
        *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(v4 + v10 + 32);
        uint64_t v11 = *(void *)(*(void *)(a1[4] + 8) + 24) + v10;
        *(void *)(v11 + 32) = *(void *)(*(void *)(v11 + 32) + 8);
        uint64_t v12 = *(void *)(*(void *)(a1[4] + 8) + 24);
        if (!*(void *)(v12 + v10 + 32)) {
          *(_DWORD *)(v12 + 24) &= ~(1 << v9);
        }
      }
    }
    uint64_t v7 = *(void *)(a1[5] + 8);
    unint64_t v8 = *(void **)(v7 + 24);
    if (v8) {
      break;
    }
    double v13 = *(unint64_t **)(*(void *)(*(void *)(a1[4] + 8) + 24) + 288);
    if (v13)
    {
      if (*v13 < v5)
      {
        while (1)
        {
          float v14 = v13;
          double v13 = (unint64_t *)v13[1];
          if (!v13) {
            goto LABEL_5;
          }
          if (*v13 >= v5)
          {
            uint64_t v6 = (uint64_t)(v14 + 1);
            *(void *)(v7 + 24) = v13;
            goto LABEL_4;
          }
        }
      }
      *(void *)(v7 + 24) = v13;
      uint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24) + 288;
LABEL_4:
      *(void *)uint64_t v6 = *(void *)(*(void *)v6 + 8);
      uint64_t v7 = *(void *)(a1[5] + 8);
      unint64_t v8 = *(void **)(v7 + 24);
      if (v8) {
        break;
      }
    }
LABEL_5:
    *(void *)(v7 + 24) = 0;
    uint64_t v3 = a1[4];
    unint64_t v8 = *(void **)(*(void *)(a1[5] + 8) + 24);
    if (v8) {
      goto LABEL_52;
    }
LABEL_6:
    *(void *)(*(void *)(v3 + 8) + 24) = **(void **)(*(void *)(v3 + 8) + 24);
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 24);
    if (!v4) {
      goto LABEL_19;
    }
  }
  uint64_t v3 = a1[4];
LABEL_52:
  uint64_t v49 = *(void *)(*(void *)(v3 + 8) + 24);
  unint64_t v50 = *v8 - v5;
  if (*v8 != v5)
  {
    uint64_t v51 = (char *)v8 + v5;
    *(void *)((char *)v8 + v5) = v50;
    if (v50 > 0x800)
    {
      uint64_t v53 = (uint64_t *)(v49 + 288);
    }
    else
    {
      unsigned int v52 = (v50 >> 6) - 1;
      *(_DWORD *)(v49 + 24) |= 1 << v52;
      uint64_t v53 = (uint64_t *)(v49 + 8 * v52 + 32);
    }
    uint64_t v54 = *v53;
    *uint64_t v53 = (uint64_t)v51;
    *((void *)v51 + 1) = v54;
    *unint64_t v8 = v5;
    unint64_t v8 = *(void **)(*(void *)(a1[5] + 8) + 24);
    uint64_t v49 = *(void *)(*(void *)(a1[4] + 8) + 24);
  }
  unsigned int v55 = (char *)v8 + *(void *)(v2 + 144);
  uint64_t v56 = [*(id *)(v49 + 296) gpuAddress];
  uint64_t result = [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) virtualAddress];
  *(void *)(*(void *)(a1[6] + 8) + 24) = &v55[v56 - result];
  uint64_t v57 = *(void *)(*(void *)(a1[4] + 8) + 24);
  *(void *)(v57 + 16) -= **(void **)(*(void *)(a1[5] + 8) + 24);
  *(void *)(*(void *)(a1[7] + 8) + 24) = v55;
  return result;
}

void _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE_clB14_AGX__Crashed_Ev()
{
}

void _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE0_clB14_AGX__Crashed_Ev()
{
}

void ___ZN3AGX4HeapILb1EED2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)v1;
  if (*(void *)v1)
  {
    do
    {
      uint64_t v4 = *(void **)v2;
      uint64_t v3 = (void *)*((void *)v2 + 1);
      if (*(void *)v2)
      {
        v4[1] = v3;
        uint64_t v3 = (void *)*((void *)v2 + 1);
      }
      else
      {
        *(void *)(v1 + 8) = v3;
      }
      *uint64_t v3 = v4;
      [*((id *)v2 + 37) gpuAddress];
      [*((id *)v2 + 37) virtualAddress];

      free(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
}

void ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(id **)v1;
  if (*(void *)v1)
  {
    do
    {
      uint64_t v3 = (id *)*v2;
      id v4 = v2[2];
      if (v4 == (id)([v2[37] resourceSize] - *(void *)(v1 + 136)))
      {
        unint64_t v5 = *v2;
        uint64_t v6 = v2[1];
        if (*v2)
        {
          v5[1] = v6;
          uint64_t v6 = v2[1];
        }
        else
        {
          *(void *)(v1 + 8) = v6;
        }
        *uint64_t v6 = v5;
        [v2[37] gpuAddress];
        [v2[37] virtualAddress];

        free(v2);
      }
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void ___ZN3AGX4HeapILb0EE14deallocateImplERKNS1_10AllocationE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(uint64_t **)(v1 + 24);
  if (*((unsigned char *)v2 + 304))
  {
    uint64_t v8 = *v2;
    unsigned int v9 = (void *)v2[1];
    if (*v2)
    {
      *(void *)(v8 + 8) = v9;
      unsigned int v9 = (void *)v2[1];
    }
    else
    {
      *(void *)(*(void *)(a1 + 32) + 8) = v9;
    }
    *unsigned int v9 = v8;

    free(v2);
  }
  else
  {
    uint64_t v3 = *(unint64_t **)(v1 + 40);
    unint64_t v4 = *v3;
    if (*v3 > 0x800)
    {
      uint64_t v6 = v2 + 36;
    }
    else
    {
      unsigned int v5 = (v4 >> 6) - 1;
      *((_DWORD *)v2 + 6) |= 1 << v5;
      uint64_t v6 = &v2[v5 + 4];
    }
    uint64_t v7 = *v6;
    *uint64_t v6 = (uint64_t)v3;
    v3[1] = v7;
    v2[2] += v4;
  }
}

void AGX::Heap<false>::allocateImpl(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2020000000;
  uint64_t v27 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  unint64_t v6 = (a3 + *(void *)(a2 + 144) + 63) & 0xFFFFFFFFFFFFFFC0;
  uint64_t v7 = *(NSObject **)(a2 + 16);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = ___ZN3AGX4HeapILb0EE12allocateImplEmPPK18IOGPUMetalResource_block_invoke;
  v11[3] = &unk_265170DA0;
  v11[8] = a2;
  v11[9] = v6;
  _OWORD v11[4] = &v16;
  v11[5] = &v12;
  v11[6] = &v20;
  v11[7] = &v24;
  dispatch_sync(v7, v11);
  uint64_t v8 = v25[3];
  uint64_t v9 = v17[3];
  uint64_t v10 = v13[3];
  *a1 = v21[3];
  a1[1] = v8;
  a1[2] = a3;
  a1[3] = v9;
  a1[4] = a2;
  a1[5] = v10;
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

uint64_t ___ZN3AGX4HeapILb0EE12allocateImplEmPPK18IOGPUMetalResource_block_invoke(void *a1)
{
  uint64_t v2 = a1[8];
  *(void *)(*(void *)(a1[4] + 8) + 24) = *(void *)v2;
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 24);
  if (!v4)
  {
LABEL_19:
    *(void *)(*(void *)(a1[4] + 8) + 24) = malloc_type_malloc(0x138uLL, 0x10A0040668EDDA4uLL);
    uint64_t v15 = *(void *)(*(void *)(a1[4] + 8) + 24);
    if (!v15) {
      _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE0_clB14_AGX__Crashed_Ev();
    }
    *(unsigned char *)(v15 + 304) = 0;
    unint64_t v16 = *(void *)(v2 + 136) + a1[9];
    unint64_t v17 = *(void *)(v2 + 104);
    if (v16 <= v17)
    {
      if (*(void *)v2)
      {
        char v23 = 1;
        if (!(v17 >> 22)) {
          char v23 = 2;
        }
        unint64_t v24 = v17 << v23;
        if (v24 >= 0x40000) {
          unint64_t v24 = 0x40000;
        }
        *(void *)(v2 + 104) = v24;
      }
      *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) = [objc_alloc(MEMORY[0x263F4B130]) initWithDevice:*(void *)(v2 + 24) options:0 args:v2 + 32 argsSize:104];
      uint64_t v20 = *(void *)(v2 + 136);
      uint64_t v21 = @"AGXHeap with guard";
      uint64_t v22 = @"AGXHeap without guard";
    }
    else
    {
      long long v18 = *(_OWORD *)(v2 + 96);
      long long v67 = *(_OWORD *)(v2 + 80);
      long long v68 = v18;
      long long v69 = *(_OWORD *)(v2 + 112);
      uint64_t v70 = *(void *)(v2 + 128);
      long long v19 = *(_OWORD *)(v2 + 48);
      long long v64 = *(_OWORD *)(v2 + 32);
      long long v65 = v19;
      long long v66 = *(_OWORD *)(v2 + 64);
      *((void *)&v68 + 1) = (v16 + 0x3FFF) & 0xFFFFFFFFFFFFC000;
      *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) = [objc_alloc(MEMORY[0x263F4B130]) initWithDevice:*(void *)(v2 + 24) options:0 args:&v64 argsSize:104];
      uint64_t v20 = *(void *)(v2 + 136);
      uint64_t v21 = @"AGXHeap with guard (large)";
      uint64_t v22 = @"AGXHeap without guard (large)";
    }
    if (v20) {
      uint64_t v25 = v21;
    }
    else {
      uint64_t v25 = v22;
    }
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296), "setLabel:", v25, v64, v65, v66, v67, v68, v69, v70);
    uint64_t v26 = *(void **)(*(void *)(a1[4] + 8) + 24);
    if (!v26[37])
    {
      free(v26);
      *(void *)(*(void *)(a1[4] + 8) + 24) = 0;
      _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE_clB14_AGX__Crashed_Ev();
    }
    uint64_t v27 = *(atomic_uint **)(v2 + 424);
    if (v27)
    {
      atomic_uint v28 = *v27;
      unsigned int v29 = (*v27 + 1) > 1 ? v28 + 1 : 1;
      atomic_uint v30 = *v27;
      atomic_compare_exchange_strong(v27, (unsigned int *)&v30, v29);
      if (v30 != v28)
      {
        atomic_uint v31 = v30;
        do
        {
          if ((v30 + 1) > 1) {
            unsigned int v32 = v30 + 1;
          }
          else {
            unsigned int v32 = 1;
          }
          atomic_compare_exchange_strong(v27, (unsigned int *)&v31, v32);
          BOOL v33 = v31 == v30;
          atomic_uint v30 = v31;
        }
        while (!v33);
      }
    }
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 16) = [*(id *)(*(void *)(*(void *)(a1[4] + 8)+ 24)+ 296) resourceSize]- *(void *)(v2 + 136);
    *(_DWORD *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 24) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 32) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 40) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 48) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 56) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 64) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 72) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 80) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 88) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 96) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 104) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 112) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 120) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 128) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 136) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 144) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 152) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 160) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 168) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 176) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 184) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 192) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 200) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 208) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 216) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 224) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 232) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 240) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 248) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 256) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 264) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 272) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 280) = 0;
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 288) = 0;
    **(void **)(*(void *)(a1[4] + 8) + 24) = 0;
    float v34 = *(void **)(v2 + 8);
    *(void *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 8) = v34;
    *float v34 = *(void *)(*(void *)(a1[4] + 8) + 24);
    *(void *)(v2 + 8) = *(void *)(*(void *)(a1[4] + 8) + 24);
    uint64_t v35 = *(void *)(*(void *)(a1[4] + 8) + 24);
    if (*(void *)(v2 + 152) < 0x18uLL)
    {
      float v38 = 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 164));
      int v36 = *(_DWORD *)(v2 + 160);
      if (v36)
      {
        unsigned int v37 = v36 - 1;
        *(_DWORD *)(v2 + 160) = v37;
        float v38 = *(void **)(v2 + 8 * v37 + 168);
        os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 164));
        if (v38)
        {
          bzero(v38, *(void *)(v2 + 152));
          goto LABEL_50;
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 164));
      }
      float v38 = malloc_type_calloc(*(void *)(v2 + 152), 1uLL, 0xC8454162uLL);
    }
LABEL_50:
    v38[2] = [*(id *)(v35 + 296) virtualAddress];
    *float v38 = *(void *)(v35 + 16);
    *(void *)(*(void *)(a1[5] + 8) + 24) = v38;
    uint64_t v39 = *(void *)(*(void *)(a1[4] + 8) + 24);
    unint64_t v40 = *(void **)(*(void *)(a1[5] + 8) + 24);
    uint64_t v41 = a1[9];
    if (*v40 == v41)
    {
LABEL_61:
      uint64_t v49 = v40[2] + *(void *)(v2 + 144);
      uint64_t v50 = [*(id *)(v39 + 296) gpuAddress];
      *(void *)(*(void *)(a1[6] + 8) + 24) = v50
                                                   + v49
                                                   - [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) virtualAddress];
      uint64_t v51 = *(void *)(*(void *)(a1[4] + 8) + 24);
      *(void *)(v51 + 16) -= **(void **)(*(void *)(a1[5] + 8) + 24);
      *(void *)(*(void *)(a1[7] + 8) + 24) = v49;
      [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) gpuAddress];
      return [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) virtualAddress];
    }
    if (*(void *)(v2 + 152) < 0x18uLL)
    {
      uint64_t v44 = 0;
      goto LABEL_57;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 164));
    int v42 = *(_DWORD *)(v2 + 160);
    if (v42)
    {
      unsigned int v43 = v42 - 1;
      *(_DWORD *)(v2 + 160) = v43;
      uint64_t v44 = *(void **)(v2 + 8 * v43 + 168);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 164));
      if (v44)
      {
        bzero(v44, *(void *)(v2 + 152));
LABEL_57:
        v44[2] = v40[2] + v41;
        unint64_t v45 = *v40 - v41;
        *uint64_t v44 = v45;
        if (v45 > 0x800)
        {
          uint64_t v47 = (uint64_t *)(v39 + 288);
        }
        else
        {
          unsigned int v46 = (v45 >> 6) - 1;
          *(_DWORD *)(v39 + 24) |= 1 << v46;
          uint64_t v47 = (uint64_t *)(v39 + 8 * v46 + 32);
        }
        uint64_t v48 = *v47;
        *uint64_t v47 = (uint64_t)v44;
        v44[1] = v48;
        *unint64_t v40 = v41;
        unint64_t v40 = *(void **)(*(void *)(a1[5] + 8) + 24);
        uint64_t v39 = *(void *)(*(void *)(a1[4] + 8) + 24);
        goto LABEL_61;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 164));
    }
    uint64_t v44 = malloc_type_calloc(*(void *)(v2 + 152), 1uLL, 0xC8454162uLL);
    goto LABEL_57;
  }
  unint64_t v5 = a1[9];
  while (1)
  {
    if (*(void *)(v4 + 16) < v5 || *(unsigned char *)(v4 + 304)) {
      goto LABEL_6;
    }
    if (v5 <= 0x800)
    {
      unsigned int v9 = __clz(__rbit32(*(_DWORD *)(v4 + 24) >> ((v5 >> 6) - 1))) + (v5 >> 6) - 1;
      if (v9 <= 0x1F)
      {
        uint64_t v10 = 8 * v9;
        *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(v4 + v10 + 32);
        uint64_t v11 = *(void *)(*(void *)(a1[4] + 8) + 24) + v10;
        *(void *)(v11 + 32) = *(void *)(*(void *)(v11 + 32) + 8);
        uint64_t v12 = *(void *)(*(void *)(a1[4] + 8) + 24);
        if (!*(void *)(v12 + v10 + 32)) {
          *(_DWORD *)(v12 + 24) &= ~(1 << v9);
        }
      }
    }
    uint64_t v7 = *(void *)(a1[5] + 8);
    uint64_t v8 = *(void **)(v7 + 24);
    if (v8) {
      break;
    }
    double v13 = *(unint64_t **)(*(void *)(*(void *)(a1[4] + 8) + 24) + 288);
    if (v13)
    {
      if (*v13 < v5)
      {
        while (1)
        {
          uint64_t v14 = v13;
          double v13 = (unint64_t *)v13[1];
          if (!v13) {
            goto LABEL_5;
          }
          if (*v13 >= v5)
          {
            uint64_t v6 = (uint64_t)(v14 + 1);
            *(void *)(v7 + 24) = v13;
            goto LABEL_4;
          }
        }
      }
      *(void *)(v7 + 24) = v13;
      uint64_t v6 = *(void *)(*(void *)(a1[4] + 8) + 24) + 288;
LABEL_4:
      *(void *)uint64_t v6 = *(void *)(*(void *)v6 + 8);
      uint64_t v7 = *(void *)(a1[5] + 8);
      uint64_t v8 = *(void **)(v7 + 24);
      if (v8) {
        break;
      }
    }
LABEL_5:
    *(void *)(v7 + 24) = 0;
    uint64_t v3 = a1[4];
    uint64_t v8 = *(void **)(*(void *)(a1[5] + 8) + 24);
    if (v8) {
      goto LABEL_64;
    }
LABEL_6:
    *(void *)(*(void *)(v3 + 8) + 24) = **(void **)(*(void *)(v3 + 8) + 24);
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 24);
    if (!v4) {
      goto LABEL_19;
    }
  }
  uint64_t v3 = a1[4];
LABEL_64:
  uint64_t v53 = *(void *)(*(void *)(v3 + 8) + 24);
  if (*v8 != v5)
  {
    if (*(void *)(v2 + 152) < 0x18uLL)
    {
      uint64_t v56 = 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 164));
      int v54 = *(_DWORD *)(v2 + 160);
      if (v54)
      {
        unsigned int v55 = v54 - 1;
        *(_DWORD *)(v2 + 160) = v55;
        uint64_t v56 = *(void **)(v2 + 8 * v55 + 168);
        os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 164));
        if (v56)
        {
          bzero(v56, *(void *)(v2 + 152));
          goto LABEL_71;
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 164));
      }
      uint64_t v56 = malloc_type_calloc(*(void *)(v2 + 152), 1uLL, 0xC8454162uLL);
    }
LABEL_71:
    v56[2] = v8[2] + v5;
    unint64_t v57 = *v8 - v5;
    *uint64_t v56 = v57;
    if (v57 > 0x800)
    {
      long long v59 = (uint64_t *)(v53 + 288);
    }
    else
    {
      unsigned int v58 = (v57 >> 6) - 1;
      *(_DWORD *)(v53 + 24) |= 1 << v58;
      long long v59 = (uint64_t *)(v53 + 8 * v58 + 32);
    }
    uint64_t v60 = *v59;
    *long long v59 = (uint64_t)v56;
    v56[1] = v60;
    *uint64_t v8 = v5;
    uint64_t v8 = *(void **)(*(void *)(a1[5] + 8) + 24);
    uint64_t v53 = *(void *)(*(void *)(a1[4] + 8) + 24);
  }
  uint64_t v61 = v8[2] + *(void *)(v2 + 144);
  uint64_t v62 = [*(id *)(v53 + 296) gpuAddress];
  uint64_t result = [*(id *)(*(void *)(*(void *)(a1[4] + 8) + 24) + 296) virtualAddress];
  *(void *)(*(void *)(a1[6] + 8) + 24) = v62 + v61 - result;
  uint64_t v63 = *(void *)(*(void *)(a1[4] + 8) + 24);
  *(void *)(v63 + 16) -= **(void **)(*(void *)(a1[5] + 8) + 24);
  *(void *)(*(void *)(a1[7] + 8) + 24) = v61;
  return result;
}