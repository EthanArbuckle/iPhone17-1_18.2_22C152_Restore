void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  int v24;
  BOOL isLevelTiled;
  uint64_t v26;
  uint32x2_t v27;
  int8x8_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  BOOL v45;
  __int32 v46;
  __int32 v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  BOOL v57;
  BOOL v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unsigned char *v67;
  int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  float32x4_t *v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int8 *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  int v106;
  unint64_t v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  BOOL v118;
  BOOL v119;
  int8x8_t v120;
  __int32 v121;
  unsigned int v122;
  BOOL v123;
  int v124;
  uint64_t v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  void block[7];
  float32x4_t *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  char v142;
  char v143;
  unsigned char __dst[1024];
  float32x4_t v145[2];
  float32x4_t v146[14];
  float32x4_t v147[2];
  float32x4_t v148[14];
  float32x4_t v149[2];
  float32x4_t v150[14];
  float32x4_t v151[2];
  float32x4_t v152[14];
  uint64_t v153;

  v153 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  v130 = a8;
  v17 = a8 >> 4;
  v112 = a8 + a10 - 1;
  v114 = v112 >> 4;
  v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  v19 = *(_DWORD *)(a1 + 112);
  v133 = a1;
  if (*(void *)(a1 + 168)) {
    v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    v20 = 0;
  }
  v21 = (v20 & 0xD00) == 0 || v20 == 768;
  v22 = v20 & 0xE00;
  v24 = !v21 && v22 != 1024;
  v124 = v24;
  isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  v26 = a1;
  v123 = isLevelTiled;
  if (v17 <= v114)
  {
    v122 = a7 + a9 - 1;
    v111 = a7 >> 4;
    if (a7 >> 4 <= v122 >> 4)
    {
      v108 = a5 - 1;
      v110 = (a6 - 1) >> 4;
      v131 = ((a5 - 1) & 0xF) + 1;
      v132 = (a5 - 1) >> 4;
      v109 = ((a6 - 1) & 0xF) + 1;
      v115 = 8 * a11;
      v116 = 4 * a11;
      v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      v121 = v28.i32[0] | v28.i32[1];
      v119 = v28.i32[1] != 0;
      v120 = v28;
      v118 = v28.i32[0] != 0;
      v107 = 8 * v19 * (unint64_t)v18;
      do
      {
        v29 = (16 * v17) | 0xF;
        if (16 * v17 <= v130) {
          v30 = v130;
        }
        else {
          v30 = 16 * v17;
        }
        v31 = v111;
        if (v112 < v29) {
          v29 = v112;
        }
        v117 = v30 - 16 * v17;
        v128 = v29 - v30 + 1;
        v129 = 16 * v17;
        v32 = v109;
        if (v17 != v110) {
          v32 = 16;
        }
        v134 = v32;
        v127 = a2 + (v30 - v130) * a11;
        do
        {
          v33 = 16 * v31;
          v34 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            v35 = a7;
          }
          else {
            v35 = 16 * v31;
          }
          if (v122 < v34) {
            v34 = v122;
          }
          v36 = v34 - v35 + 1;
          if (v31 == v132) {
            v37 = v131;
          }
          else {
            v37 = 16;
          }
          v38 = 1;
          if (v129 >= v130 && v33 >= a7)
          {
            v39 = v131;
            if (v31 != v132) {
              v39 = 16;
            }
            v38 = v36 != v39 || v128 != v134;
          }
          if (v123)
          {
            v62 = 0;
            v63 = v107 >> (*(unsigned char *)(v26 + 57) != 0);
            v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  v62 = 16;
                  v65 = 1;
                  v66 = 16;
                }
                else
                {
                  v65 = 1;
                  v66 = 0;
                  if (v63 == 1024)
                  {
                    v66 = 8;
                    v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                v64 = 0;
                v65 = 0;
                v62 = 32;
                v66 = 32;
              }
              else
              {
                v65 = 1;
                v66 = 0;
                if (v63 == 256)
                {
                  v64 = 0;
                  v66 = 16;
                  v62 = 32;
                }
              }
            }
            else
            {
              v65 = 1;
              v66 = 0;
              switch(v63)
              {
                case 4:
                  v64 = 0;
                  v65 = 0;
                  v66 = 128;
                  v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  v64 = 0;
                  v65 = 0;
                  v62 = 128;
                  v66 = 128;
                  break;
                case 16:
                  v64 = 0;
                  v65 = 0;
                  v66 = 64;
                  v62 = 128;
                  break;
                case 32:
                  v64 = 0;
                  v65 = 0;
                  v62 = 64;
                  v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    v64 = 0;
                    v65 = 0;
                    v66 = 32;
                    v62 = 64;
                  }
                  break;
              }
            }
            v98 = (v62 >> 4) - 1;
            if (v64)
            {
              v99 = 0;
              if (v65) {
                goto LABEL_130;
              }
LABEL_119:
              v100 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v100 | v99) {
                goto LABEL_120;
              }
LABEL_131:
              v102 = 0;
            }
            else
            {
              v99 = 32 - __clz(~(-1 << -(char)__clz(v98)));
              if ((v65 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              v100 = 0;
              if (!v99) {
                goto LABEL_131;
              }
LABEL_120:
              v101 = 0;
              v102 = 0;
              v103 = v31 & v98;
              v104 = v99 != 0;
              v105 = v100 != 0;
              v106 = 1;
              do
              {
                --v99;
                if (v104) {
                  v102 |= (unint64_t)(v106 & v103) << v101++;
                }
                else {
                  v99 = 0;
                }
                --v100;
                if (v105) {
                  v102 |= (unint64_t)(v106 & v17 & ((v66 >> 4) - 1)) << v101++;
                }
                else {
                  v100 = 0;
                }
                v106 *= 2;
                --v101;
                v105 = v100 != 0;
                v104 = v99 != 0;
              }
              while (v100 | v99);
            }
            v48 = ((unint64_t)(v33 / v62 + v129 / v66 * ((v62 + v108) / v62)) << 14) + (v102 << 9);
            goto LABEL_60;
          }
          if (v121)
          {
            v41 = 0;
            v42 = 0;
            v43 = 1;
            v44 = v118;
            v45 = v119;
            v47 = v120.i32[0];
            v46 = v120.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v31) << v41++;
              }
              else {
                v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                v47 = 0;
              }
              v43 *= 2;
              --v41;
              v44 = v47 != 0;
              v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            v42 = 0;
          }
          v48 = v42 << 9;
LABEL_60:
          v49 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v49 <= 1) {
            v49 = 1;
          }
          v50 = v49 + 15;
          if (v50 < 0x20) {
            v51 = 0;
          }
          else {
            v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          v52 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            v52 = 1;
          }
          v53 = v52 + 15;
          if (v53 < 0x20)
          {
            v54 = 0;
            if (!v51)
            {
LABEL_86:
              v56 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_86;
            }
          }
          v55 = 0;
          v56 = 0;
          v57 = v51 != 0;
          v58 = v54 != 0;
          v59 = 1;
          do
          {
            --v51;
            v60 = !v57;
            if (v57)
            {
              v61 = ((unint64_t)(v59 & v31) << v55) | v56;
            }
            else
            {
              v51 = 0;
              v61 = v56;
            }
            if (!v60) {
              ++v55;
            }
            --v54;
            if (v58)
            {
              v56 = ((unint64_t)(v59 & v17) << v55) | v61;
            }
            else
            {
              v54 = 0;
              v56 = v61;
            }
            if (v58) {
              ++v55;
            }
            v59 *= 2;
            --v55;
            v58 = v54 != 0;
            v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_87:
          v67 = (unsigned char *)(a3 + v48);
          if (v124)
          {
            v68 = v36;
            v69 = v37;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            v37 = v69;
            v36 = v68;
            v26 = v133;
            v67 = __dst;
          }
          v70 = (unsigned __int8 *)(a4 + 8 * v56);
          v71 = a7;
          v72 = (float32x4_t *)(v127 + 4 * (v35 - a7));
          v73 = v37 < 0x10 || v38;
          if ((v73 & 1) == 0 && v134 > 0xF)
          {
            v74 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
            v75 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72, a11, (uint64_t)v67, *v70, v74)];
            v76 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v72 + v116), a11, v75, v70[1], v74);
            v77 = v76
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 2, a11, v76, v70[2], v74);
            v78 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v72 + v116 + 32), a11, v77, v70[3], v74);
            v79 = (float32x4_t *)((char *)v72 + v115);
            v80 = v78
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v72 + v115), a11, v78, v70[4], v74);
            v81 = (float32x4_t *)((char *)v72 + 12 * a11);
            v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81, a11, v80, v70[5], v74);
            v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v79 + 2, a11, v82, v70[6], v74);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81 + 2, a11, v82 + v83, v70[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          block[5] = v67;
          v142 = v37;
          v143 = v134;
          v138 = v117;
          v139 = v35 - v33;
          block[6] = v70;
          v136 = v72;
          v137 = a11;
          v140 = v128;
          v141 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_27:
            a7 = v71;
            goto LABEL_28;
          }
          v84 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
          v85 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v145, 64, (uint64_t)v67, *v70, v84)];
          v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v147, 64, v85, v70[1], v84);
          v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v146, 64, v86, v70[2], v84);
          v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v148, 64, v87, v70[3], v84);
          v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v149, 64, v88, v70[4], v84);
          v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v151, 64, v89, v70[5], v84);
          v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v150, 64, v90, v70[6], v84);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v152, 64, v90 + v91, v70[7], v84);
          v92 = v140;
          a7 = v71;
          if (v140)
          {
            v93 = 0;
            v94 = &v145[4 * (unint64_t)v138].i8[4 * v139];
            v95 = v141;
            do
            {
              if (v95)
              {
                v96 = 0;
                v97 = (char *)v136 + v137 * v93;
                do
                {
                  v97[v96] = v94[v96];
                  ++v96;
                  v95 = v141;
                }
                while (4 * (unint64_t)v141 > v96);
                v92 = v140;
              }
              ++v93;
              v94 += 64;
            }
            while (v93 < v92);
          }
LABEL_28:
          v21 = v31++ == v122 >> 4;
          v26 = v133;
        }
        while (!v21);
        v21 = v17++ == v114;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v463 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a1;
  unsigned int v382 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v363 = a8 + a10 - 1;
  unsigned int v365 = v363 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  uint64_t v386 = v16;
  if (*(void *)(v16 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v16 = v386;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v376 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  uint64_t v27 = v386;
  BOOL v375 = isLevelTiled;
  if (v17 <= v365)
  {
    unsigned int v374 = a7 + a9 - 1;
    if (a7 >> 4 <= v374 >> 4)
    {
      uint64_t v28 = a11;
      unsigned int v360 = a5 - 1;
      unsigned int v385 = (a5 - 1) >> 4;
      int v384 = ((a5 - 1) & 0xF) + 1;
      int v361 = ((a6 - 1) & 0xF) + 1;
      unsigned int v362 = (a6 - 1) >> 4;
      uint64_t v367 = 8 * a11;
      uint64_t v368 = 4 * a11;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v373 = v30.i32[0] | v30.i32[1];
      BOOL v371 = v30.i32[1] != 0;
      int8x8_t v372 = v30;
      BOOL v370 = v30.i32[0] != 0;
      unint64_t v359 = 8 * v19 * (unint64_t)v18;
      uint64_t v388 = 3 * a11;
      uint64_t v366 = 2 * a11;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v382) {
          int v32 = v382;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = a7 >> 4;
        if (v363 < v31) {
          unsigned int v31 = v363;
        }
        unsigned int v381 = 16 * v17;
        int v369 = v32 - 16 * v17;
        int v380 = v31 - v32 + 1;
        int v34 = v361;
        if (v17 != v362) {
          int v34 = 16;
        }
        unsigned int v387 = v34;
        uint64_t v379 = a2 + (v32 - v382) * v28;
        unsigned int v35 = a7;
        do
        {
          unsigned int v37 = 16 * v33;
          unsigned int v38 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= v35) {
            int v39 = v35;
          }
          else {
            int v39 = 16 * v33;
          }
          if (v374 < v38) {
            unsigned int v38 = a7 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v33 == v385) {
            unsigned int v41 = v384;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v381 >= v382 && v37 >= v35)
          {
            int v43 = v384;
            if (v33 != v385) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v380 != v387;
          }
          if (v375)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v359 >> (*(unsigned char *)(v27 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  unsigned int v66 = 16;
                  char v69 = 1;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v350 = (v66 >> 4) - 1;
            if (v68)
            {
              unsigned int v351 = 0;
              if (v69) {
                goto LABEL_277;
              }
LABEL_266:
              unsigned int v352 = 32 - __clz(~(-1 << -(char)__clz(((v70 + 15) >> 4) - 1)));
              if (v352 | v351) {
                goto LABEL_267;
              }
LABEL_278:
              uint64_t v354 = 0;
            }
            else
            {
              unsigned int v351 = 32 - __clz(~(-1 << -(char)__clz(v350)));
              if ((v69 & 1) == 0) {
                goto LABEL_266;
              }
LABEL_277:
              unsigned int v352 = 0;
              if (!v351) {
                goto LABEL_278;
              }
LABEL_267:
              int v353 = 0;
              uint64_t v354 = 0;
              int v355 = v33 & v350;
              BOOL v356 = v351 != 0;
              BOOL v357 = v352 != 0;
              int v358 = 1;
              do
              {
                --v351;
                if (v356) {
                  v354 |= (unint64_t)(v358 & v355) << v353++;
                }
                else {
                  unsigned int v351 = 0;
                }
                --v352;
                if (v357) {
                  v354 |= (unint64_t)(v358 & v17 & ((v70 >> 4) - 1)) << v353++;
                }
                else {
                  unsigned int v352 = 0;
                }
                v358 *= 2;
                --v353;
                BOOL v357 = v352 != 0;
                BOOL v356 = v351 != 0;
              }
              while (v352 | v351);
            }
            unint64_t v52 = ((unint64_t)(v37 / v66 + v381 / v70 * ((v66 + v360) / v66)) << 14) + (v354 << 9);
            goto LABEL_61;
          }
          if (v373)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v371;
            BOOL v49 = v370;
            __int32 v50 = v372.i32[1];
            __int32 v51 = v372.i32[0];
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v33) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v17) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_61:
          unsigned int v53 = *(_DWORD *)(v27 + 128) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v27 + 132) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_87:
              unint64_t v60 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_87;
            }
          }
          int v59 = 0;
          unint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            BOOL v64 = !v61;
            if (v61)
            {
              unint64_t v65 = ((unint64_t)(v63 & v33) << v59) | v60;
            }
            else
            {
              unsigned int v55 = 0;
              unint64_t v65 = v60;
            }
            if (!v64) {
              ++v59;
            }
            --v58;
            if (v62)
            {
              unint64_t v60 = ((unint64_t)(v63 & v17) << v59) | v65;
            }
            else
            {
              unsigned int v58 = 0;
              unint64_t v60 = v65;
            }
            if (v62) {
              ++v59;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_88:
          v71 = (int64x2_t *)(a3 + v52);
          if (v376)
          {
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v27 = v386;
            v71 = (int64x2_t *)__dst;
          }
          v72 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v73 = v379 + 4 * (v39 - v35);
          char v74 = v41 < 0x10 || v42;
          if ((v74 & 1) == 0 && v387 > 0xF)
          {
            uint64_t v75 = *(void *)(v27 + 208);
            int v76 = *(_DWORD *)(v75 + 52);
            unsigned int v77 = *v72;
            if (*v72)
            {
              uint64_t v28 = a11;
              uint64_t v78 = 2 * a11;
              if (v77 < 0xF0)
              {
                if (v77 == 127)
                {
                  int64x2_t v92 = *v71;
                  int64x2_t v93 = v71[1];
                  int64x2_t v94 = v71[2];
                  int64x2_t v95 = v71[3];
                  int64x2_t v96 = v71[4];
                  int64x2_t v97 = v71[5];
                  int64x2_t v98 = v71[6];
                  int64x2_t v99 = v71[7];
                  *(int64x2_t *)uint64_t v73 = vzip1q_s64(*v71, v93);
                  *(int64x2_t *)(v73 + 16) = vzip1q_s64(v96, v97);
                  v100 = (int64x2_t *)(v73 + v366);
                  v101 = (int64x2_t *)(v73 + a11);
                  int64x2_t *v101 = vzip2q_s64(v92, v93);
                  v101[1] = vzip2q_s64(v96, v97);
                  int64x2_t *v100 = vzip1q_s64(v94, v95);
                  v100[1] = vzip1q_s64(v98, v99);
                  v102 = (int64x2_t *)(v73 + v366 + a11);
                  int64x2_t *v102 = vzip2q_s64(v94, v95);
                  v102[1] = vzip2q_s64(v98, v99);
                  uint64_t v79 = 128;
                }
                else if (v77 == 3)
                {
                  float32x4_t v87 = vld1q_dup_f32((const float *)v71->i32);
                  *(float32x4_t *)uint64_t v73 = v87;
                  *(float32x4_t *)(v73 + 16) = v87;
                  v88 = (float32x4_t *)(v73 + a11);
                  float32x4_t *v88 = v87;
                  v88[1] = v87;
                  v89 = (float32x4_t *)(v73 + v366);
                  float32x4_t *v89 = v87;
                  v89[1] = v87;
                  v90 = (float32x4_t *)(v73 + v388);
                  float32x4_t *v90 = v87;
                  v90[1] = v87;
                  uint64_t v79 = 4;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)v73, a11, (uint64_t)v71, v77);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)v73, a11, (unint64_t)v71, v77, *(_DWORD *)(v75 + 52));
                uint64_t v79 = 64;
              }
            }
            else
            {
              uint64_t v79 = 0;
              *(_OWORD *)uint64_t v73 = 0u;
              *(_OWORD *)(v73 + 16) = 0u;
              uint64_t v28 = a11;
              v84 = (_OWORD *)(v73 + a11);
              _OWORD *v84 = 0u;
              v84[1] = 0u;
              uint64_t v78 = 2 * a11;
              v85 = (_OWORD *)(v73 + v366);
              _OWORD *v85 = 0u;
              v85[1] = 0u;
              v86 = (_OWORD *)(v73 + v388);
              _OWORD *v86 = 0u;
              v86[1] = 0u;
            }
            unint64_t v103 = (unint64_t)v71->u64 + v79;
            uint64_t v104 = v73 + v368;
            unsigned int v105 = v72[1];
            if (v72[1])
            {
              if (v105 < 0xF0)
              {
                if (v105 == 127)
                {
                  int64x2_t v114 = *(int64x2_t *)v103;
                  int64x2_t v115 = *(int64x2_t *)(v103 + 16);
                  int64x2_t v116 = *(int64x2_t *)(v103 + 32);
                  int64x2_t v117 = *(int64x2_t *)(v103 + 48);
                  int64x2_t v118 = *(int64x2_t *)(v103 + 64);
                  int64x2_t v119 = *(int64x2_t *)(v103 + 80);
                  int64x2_t v120 = *(int64x2_t *)(v103 + 96);
                  int64x2_t v121 = *(int64x2_t *)(v103 + 112);
                  *(int64x2_t *)uint64_t v104 = vzip1q_s64(*(int64x2_t *)v103, v115);
                  *(int64x2_t *)(v104 + 16) = vzip1q_s64(v118, v119);
                  v122 = (int64x2_t *)(v104 + v78);
                  v123 = (int64x2_t *)(v104 + v28);
                  int64x2_t *v123 = vzip2q_s64(v114, v115);
                  v123[1] = vzip2q_s64(v118, v119);
                  int64x2_t *v122 = vzip1q_s64(v116, v117);
                  v122[1] = vzip1q_s64(v120, v121);
                  v124 = (int64x2_t *)(v104 + v78 + v28);
                  int64x2_t *v124 = vzip2q_s64(v116, v117);
                  v124[1] = vzip2q_s64(v120, v121);
                  uint64_t v106 = 128;
                }
                else if (v105 == 3)
                {
                  float32x4_t v110 = vld1q_dup_f32((const float *)v103);
                  *(float32x4_t *)uint64_t v104 = v110;
                  *(float32x4_t *)(v104 + 16) = v110;
                  v111 = (float32x4_t *)(v104 + v28);
                  float32x4_t *v111 = v110;
                  v111[1] = v110;
                  v112 = (float32x4_t *)(v104 + v78);
                  float32x4_t *v112 = v110;
                  v112[1] = v110;
                  v113 = (float32x4_t *)(v104 + v388);
                  float32x4_t *v113 = v110;
                  v113[1] = v110;
                  uint64_t v106 = 4;
                }
                else
                {
                  uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)(v73 + v368), v28, v103, v105);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)(v73 + v368), v28, v103, v105, v76);
                uint64_t v106 = 64;
              }
            }
            else
            {
              uint64_t v106 = 0;
              *(_OWORD *)uint64_t v104 = 0u;
              *(_OWORD *)(v104 + 16) = 0u;
              v107 = (_OWORD *)(v104 + v28);
              _OWORD *v107 = 0u;
              v107[1] = 0u;
              v108 = (_OWORD *)(v104 + v78);
              _OWORD *v108 = 0u;
              v108[1] = 0u;
              v109 = (_OWORD *)(v104 + v388);
              _OWORD *v109 = 0u;
              v109[1] = 0u;
            }
            unint64_t v125 = v103 + v106;
            v126 = (_OWORD *)(v73 + 32);
            unsigned int v127 = v72[2];
            if (v72[2])
            {
              if (v127 < 0xF0)
              {
                if (v127 == 127)
                {
                  int64x2_t v136 = *(int64x2_t *)v125;
                  int64x2_t v137 = *(int64x2_t *)(v125 + 16);
                  int64x2_t v138 = *(int64x2_t *)(v125 + 32);
                  int64x2_t v139 = *(int64x2_t *)(v125 + 48);
                  int64x2_t v140 = *(int64x2_t *)(v125 + 64);
                  int64x2_t v141 = *(int64x2_t *)(v125 + 80);
                  int64x2_t v142 = *(int64x2_t *)(v125 + 96);
                  int64x2_t v143 = *(int64x2_t *)(v125 + 112);
                  _OWORD *v126 = vzip1q_s64(*(int64x2_t *)v125, v137);
                  *(int64x2_t *)(v73 + 48) = vzip1q_s64(v140, v141);
                  v144 = (int64x2_t *)((char *)v126 + v78);
                  v145 = (int64x2_t *)((char *)v126 + v28);
                  int64x2_t *v145 = vzip2q_s64(v136, v137);
                  v145[1] = vzip2q_s64(v140, v141);
                  int64x2_t *v144 = vzip1q_s64(v138, v139);
                  v144[1] = vzip1q_s64(v142, v143);
                  v146 = (int64x2_t *)((char *)v126 + v78 + v28);
                  int64x2_t *v146 = vzip2q_s64(v138, v139);
                  v146[1] = vzip2q_s64(v142, v143);
                  uint64_t v128 = 128;
                }
                else if (v127 == 3)
                {
                  float32x4_t v132 = vld1q_dup_f32((const float *)v125);
                  *(float32x4_t *)(v73 + 32) = v132;
                  *(float32x4_t *)(v73 + 48) = v132;
                  v133 = (float32x4_t *)((char *)v126 + v28);
                  float32x4_t *v133 = v132;
                  v133[1] = v132;
                  v134 = (float32x4_t *)((char *)v126 + v78);
                  float32x4_t *v134 = v132;
                  v134[1] = v132;
                  v135 = (float32x4_t *)((char *)v126 + v388);
                  float32x4_t *v135 = v132;
                  v135[1] = v132;
                  uint64_t v128 = 4;
                }
                else
                {
                  uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v126, v28, v125, v127);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v126, v28, v125, v127, v76);
                uint64_t v128 = 64;
              }
            }
            else
            {
              uint64_t v128 = 0;
              _OWORD *v126 = 0u;
              *(_OWORD *)(v73 + 48) = 0u;
              v129 = (_OWORD *)((char *)v126 + v28);
              _OWORD *v129 = 0u;
              v129[1] = 0u;
              v130 = (_OWORD *)((char *)v126 + v78);
              _OWORD *v130 = 0u;
              v130[1] = 0u;
              v131 = (_OWORD *)((char *)v126 + v388);
              _OWORD *v131 = 0u;
              v131[1] = 0u;
            }
            unint64_t v147 = v125 + v128;
            v148 = (_OWORD *)(v104 + 32);
            unsigned int v149 = v72[3];
            if (v72[3])
            {
              if (v149 < 0xF0)
              {
                if (v149 == 127)
                {
                  int64x2_t v158 = *(int64x2_t *)v147;
                  int64x2_t v159 = *(int64x2_t *)(v147 + 16);
                  int64x2_t v160 = *(int64x2_t *)(v147 + 32);
                  int64x2_t v161 = *(int64x2_t *)(v147 + 48);
                  int64x2_t v162 = *(int64x2_t *)(v147 + 64);
                  int64x2_t v163 = *(int64x2_t *)(v147 + 80);
                  int64x2_t v164 = *(int64x2_t *)(v147 + 96);
                  int64x2_t v165 = *(int64x2_t *)(v147 + 112);
                  _OWORD *v148 = vzip1q_s64(*(int64x2_t *)v147, v159);
                  *(int64x2_t *)(v104 + 48) = vzip1q_s64(v162, v163);
                  v166 = (int64x2_t *)((char *)v148 + v78);
                  v167 = (int64x2_t *)((char *)v148 + v28);
                  int64x2_t *v167 = vzip2q_s64(v158, v159);
                  v167[1] = vzip2q_s64(v162, v163);
                  int64x2_t *v166 = vzip1q_s64(v160, v161);
                  v166[1] = vzip1q_s64(v164, v165);
                  v168 = (int64x2_t *)((char *)v148 + v78 + v28);
                  int64x2_t *v168 = vzip2q_s64(v160, v161);
                  v168[1] = vzip2q_s64(v164, v165);
                  uint64_t v150 = 128;
                }
                else if (v149 == 3)
                {
                  float32x4_t v154 = vld1q_dup_f32((const float *)v147);
                  *(float32x4_t *)(v104 + 32) = v154;
                  *(float32x4_t *)(v104 + 48) = v154;
                  v155 = (float32x4_t *)((char *)v148 + v28);
                  float32x4_t *v155 = v154;
                  v155[1] = v154;
                  v156 = (float32x4_t *)((char *)v148 + v78);
                  float32x4_t *v156 = v154;
                  v156[1] = v154;
                  v157 = (float32x4_t *)((char *)v148 + v388);
                  float32x4_t *v157 = v154;
                  v157[1] = v154;
                  uint64_t v150 = 4;
                }
                else
                {
                  uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v148, v28, v147, v149);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v148, v28, v147, v149, v76);
                uint64_t v150 = 64;
              }
            }
            else
            {
              uint64_t v150 = 0;
              _OWORD *v148 = 0u;
              *(_OWORD *)(v104 + 48) = 0u;
              v151 = (_OWORD *)((char *)v148 + v28);
              _OWORD *v151 = 0u;
              v151[1] = 0u;
              v152 = (_OWORD *)((char *)v148 + v78);
              _OWORD *v152 = 0u;
              v152[1] = 0u;
              v153 = (_OWORD *)((char *)v148 + v388);
              _OWORD *v153 = 0u;
              v153[1] = 0u;
            }
            unint64_t v169 = v147 + v150;
            uint64_t v170 = v73 + v367;
            unsigned int v171 = v72[4];
            if (v72[4])
            {
              if (v171 < 0xF0)
              {
                if (v171 == 127)
                {
                  int64x2_t v180 = *(int64x2_t *)v169;
                  int64x2_t v181 = *(int64x2_t *)(v169 + 16);
                  int64x2_t v182 = *(int64x2_t *)(v169 + 32);
                  int64x2_t v183 = *(int64x2_t *)(v169 + 48);
                  int64x2_t v184 = *(int64x2_t *)(v169 + 64);
                  int64x2_t v185 = *(int64x2_t *)(v169 + 80);
                  int64x2_t v186 = *(int64x2_t *)(v169 + 96);
                  int64x2_t v187 = *(int64x2_t *)(v169 + 112);
                  *(int64x2_t *)uint64_t v170 = vzip1q_s64(*(int64x2_t *)v169, v181);
                  *(int64x2_t *)(v170 + 16) = vzip1q_s64(v184, v185);
                  v188 = (int64x2_t *)(v170 + v78);
                  v189 = (int64x2_t *)(v170 + v28);
                  int64x2_t *v189 = vzip2q_s64(v180, v181);
                  v189[1] = vzip2q_s64(v184, v185);
                  int64x2_t *v188 = vzip1q_s64(v182, v183);
                  v188[1] = vzip1q_s64(v186, v187);
                  v190 = (int64x2_t *)(v170 + v78 + v28);
                  int64x2_t *v190 = vzip2q_s64(v182, v183);
                  v190[1] = vzip2q_s64(v186, v187);
                  uint64_t v172 = 128;
                }
                else if (v171 == 3)
                {
                  float32x4_t v176 = vld1q_dup_f32((const float *)v169);
                  *(float32x4_t *)uint64_t v170 = v176;
                  *(float32x4_t *)(v170 + 16) = v176;
                  v177 = (float32x4_t *)(v170 + v28);
                  float32x4_t *v177 = v176;
                  v177[1] = v176;
                  v178 = (float32x4_t *)(v170 + v78);
                  float32x4_t *v178 = v176;
                  v178[1] = v176;
                  v179 = (float32x4_t *)(v170 + v388);
                  float32x4_t *v179 = v176;
                  v179[1] = v176;
                  uint64_t v172 = 4;
                }
                else
                {
                  uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)(v73 + v367), v28, v169, v171);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)(v73 + v367), v28, v169, v171, v76);
                uint64_t v172 = 64;
              }
            }
            else
            {
              uint64_t v172 = 0;
              *(_OWORD *)uint64_t v170 = 0u;
              *(_OWORD *)(v170 + 16) = 0u;
              v173 = (_OWORD *)(v170 + v28);
              _OWORD *v173 = 0u;
              v173[1] = 0u;
              v174 = (_OWORD *)(v170 + v78);
              _OWORD *v174 = 0u;
              v174[1] = 0u;
              v175 = (_OWORD *)(v170 + v388);
              _OWORD *v175 = 0u;
              v175[1] = 0u;
            }
            unint64_t v191 = v169 + v172;
            uint64_t v192 = v73 + 12 * a11;
            unsigned int v193 = v72[5];
            if (v72[5])
            {
              if (v193 < 0xF0)
              {
                if (v193 == 127)
                {
                  int64x2_t v202 = *(int64x2_t *)v191;
                  int64x2_t v203 = *(int64x2_t *)(v191 + 16);
                  int64x2_t v204 = *(int64x2_t *)(v191 + 32);
                  int64x2_t v205 = *(int64x2_t *)(v191 + 48);
                  int64x2_t v206 = *(int64x2_t *)(v191 + 64);
                  int64x2_t v207 = *(int64x2_t *)(v191 + 80);
                  int64x2_t v208 = *(int64x2_t *)(v191 + 96);
                  int64x2_t v209 = *(int64x2_t *)(v191 + 112);
                  *(int64x2_t *)uint64_t v192 = vzip1q_s64(*(int64x2_t *)v191, v203);
                  *(int64x2_t *)(v192 + 16) = vzip1q_s64(v206, v207);
                  v210 = (int64x2_t *)(v192 + v78);
                  v211 = (int64x2_t *)(v192 + v28);
                  int64x2_t *v211 = vzip2q_s64(v202, v203);
                  v211[1] = vzip2q_s64(v206, v207);
                  int64x2_t *v210 = vzip1q_s64(v204, v205);
                  v210[1] = vzip1q_s64(v208, v209);
                  v212 = (int64x2_t *)(v192 + v78 + v28);
                  int64x2_t *v212 = vzip2q_s64(v204, v205);
                  v212[1] = vzip2q_s64(v208, v209);
                  uint64_t v194 = 128;
                }
                else if (v193 == 3)
                {
                  float32x4_t v198 = vld1q_dup_f32((const float *)v191);
                  *(float32x4_t *)uint64_t v192 = v198;
                  *(float32x4_t *)(v192 + 16) = v198;
                  v199 = (float32x4_t *)(v192 + v28);
                  float32x4_t *v199 = v198;
                  v199[1] = v198;
                  v200 = (float32x4_t *)(v192 + v78);
                  float32x4_t *v200 = v198;
                  v200[1] = v198;
                  v201 = (float32x4_t *)(v192 + v388);
                  float32x4_t *v201 = v198;
                  v201[1] = v198;
                  uint64_t v194 = 4;
                }
                else
                {
                  uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)v192, v28, v191, v193);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)v192, v28, v191, v193, v76);
                uint64_t v194 = 64;
              }
            }
            else
            {
              uint64_t v194 = 0;
              *(_OWORD *)uint64_t v192 = 0u;
              *(_OWORD *)(v192 + 16) = 0u;
              v195 = (_OWORD *)(v192 + v28);
              _OWORD *v195 = 0u;
              v195[1] = 0u;
              v196 = (_OWORD *)(v192 + v78);
              _OWORD *v196 = 0u;
              v196[1] = 0u;
              v197 = (_OWORD *)(v192 + v388);
              _OWORD *v197 = 0u;
              v197[1] = 0u;
            }
            unint64_t v213 = v191 + v194;
            v214 = (_OWORD *)(v170 + 32);
            unsigned int v215 = v72[6];
            if (v72[6])
            {
              if (v215 < 0xF0)
              {
                if (v215 == 127)
                {
                  int64x2_t v224 = *(int64x2_t *)v213;
                  int64x2_t v225 = *(int64x2_t *)(v213 + 16);
                  int64x2_t v226 = *(int64x2_t *)(v213 + 32);
                  int64x2_t v227 = *(int64x2_t *)(v213 + 48);
                  int64x2_t v228 = *(int64x2_t *)(v213 + 64);
                  int64x2_t v229 = *(int64x2_t *)(v213 + 80);
                  int64x2_t v230 = *(int64x2_t *)(v213 + 96);
                  int64x2_t v231 = *(int64x2_t *)(v213 + 112);
                  _OWORD *v214 = vzip1q_s64(*(int64x2_t *)v213, v225);
                  *(int64x2_t *)(v170 + 48) = vzip1q_s64(v228, v229);
                  v232 = (int64x2_t *)((char *)v214 + v78);
                  v233 = (int64x2_t *)((char *)v214 + v28);
                  int64x2_t *v233 = vzip2q_s64(v224, v225);
                  v233[1] = vzip2q_s64(v228, v229);
                  int64x2_t *v232 = vzip1q_s64(v226, v227);
                  v232[1] = vzip1q_s64(v230, v231);
                  v234 = (int64x2_t *)((char *)v214 + v78 + v28);
                  int64x2_t *v234 = vzip2q_s64(v226, v227);
                  v234[1] = vzip2q_s64(v230, v231);
                  uint64_t v216 = 128;
                }
                else if (v215 == 3)
                {
                  float32x4_t v220 = vld1q_dup_f32((const float *)v213);
                  *(float32x4_t *)(v170 + 32) = v220;
                  *(float32x4_t *)(v170 + 48) = v220;
                  v221 = (float32x4_t *)((char *)v214 + v28);
                  float32x4_t *v221 = v220;
                  v221[1] = v220;
                  v222 = (float32x4_t *)((char *)v214 + v78);
                  float32x4_t *v222 = v220;
                  v222[1] = v220;
                  v223 = (float32x4_t *)((char *)v214 + v388);
                  float32x4_t *v223 = v220;
                  v223[1] = v220;
                  uint64_t v216 = 4;
                }
                else
                {
                  uint64_t v216 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v214, v28, v213, v215);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v214, v28, v213, v215, v76);
                uint64_t v216 = 64;
              }
            }
            else
            {
              uint64_t v216 = 0;
              _OWORD *v214 = 0u;
              *(_OWORD *)(v170 + 48) = 0u;
              v217 = (_OWORD *)((char *)v214 + v28);
              _OWORD *v217 = 0u;
              v217[1] = 0u;
              v218 = (_OWORD *)((char *)v214 + v78);
              _OWORD *v218 = 0u;
              v218[1] = 0u;
              v219 = (_OWORD *)((char *)v214 + v388);
              _OWORD *v219 = 0u;
              v219[1] = 0u;
            }
            v235 = (_OWORD *)(v192 + 32);
            unsigned int v236 = v72[7];
            if (v72[7])
            {
              unint64_t v237 = v213 + v216;
              if (v236 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v235, v28, v237, v236, v76);
              }
              else if (v236 == 127)
              {
                int64x2_t v242 = *(int64x2_t *)v237;
                int64x2_t v243 = *(int64x2_t *)(v237 + 16);
                int64x2_t v244 = *(int64x2_t *)(v237 + 32);
                int64x2_t v245 = *(int64x2_t *)(v237 + 48);
                int64x2_t v246 = *(int64x2_t *)(v237 + 64);
                int64x2_t v247 = *(int64x2_t *)(v237 + 80);
                int64x2_t v248 = *(int64x2_t *)(v237 + 96);
                int64x2_t v249 = *(int64x2_t *)(v237 + 112);
                _OWORD *v235 = vzip1q_s64(*(int64x2_t *)v237, v243);
                *(int64x2_t *)(v192 + 48) = vzip1q_s64(v246, v247);
                v250 = (int64x2_t *)((char *)v235 + v78);
                v251 = (int64x2_t *)((char *)v235 + v28);
                int64x2_t *v251 = vzip2q_s64(v242, v243);
                v251[1] = vzip2q_s64(v246, v247);
                int64x2_t *v250 = vzip1q_s64(v244, v245);
                v250[1] = vzip1q_s64(v248, v249);
                v252 = (int64x2_t *)((char *)v235 + v78 + v28);
                int64x2_t *v252 = vzip2q_s64(v244, v245);
                v252[1] = vzip2q_s64(v248, v249);
              }
              else
              {
                if (v236 == 3)
                {
                  float32x4_t v238 = vld1q_dup_f32((const float *)v237);
                  *(float32x4_t *)(v192 + 32) = v238;
                  *(float32x4_t *)(v192 + 48) = v238;
                  goto LABEL_173;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v235, v28, v237, v236);
              }
            }
            else
            {
              float32x4_t v238 = 0uLL;
              _OWORD *v235 = 0u;
              *(_OWORD *)(v192 + 48) = 0u;
LABEL_173:
              v239 = (float32x4_t *)((char *)v235 + v28);
              float32x4_t *v239 = v238;
              v239[1] = v238;
              v240 = (float32x4_t *)((char *)v235 + v78);
              float32x4_t *v240 = v238;
              v240[1] = v238;
              v241 = (float32x4_t *)((char *)v235 + v388);
              float32x4_t *v241 = v238;
              v241[1] = v238;
            }
            unsigned int v35 = a7;
            uint64_t v27 = v386;
LABEL_28:
            unsigned int v36 = v33 + 1;
            goto LABEL_29;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v27;
          block[5] = v71;
          char v396 = v41;
          char v397 = v387;
          unsigned int v392 = v369;
          unsigned int v393 = v39 - v37;
          block[6] = v72;
          uint64_t v390 = v73;
          uint64_t v28 = a11;
          uint64_t v391 = a11;
          unsigned int v394 = v380;
          unsigned int v395 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v27 + 8) + 7384), block);
            uint64_t v27 = v386;
            unsigned int v35 = a7;
            goto LABEL_28;
          }
          uint64_t v80 = *(void *)(v27 + 208);
          int v81 = *(_DWORD *)(v80 + 52);
          unsigned int v82 = *v72;
          unsigned int v35 = a7;
          if (*v72)
          {
            if (v82 < 0xF0)
            {
              if (v82 == 127)
              {
                int64x2_t v253 = *v71;
                int64x2_t v254 = v71[1];
                int64x2_t v255 = v71[2];
                int64x2_t v256 = v71[3];
                int64x2_t v257 = v71[4];
                int64x2_t v258 = v71[5];
                int64x2_t v259 = v71[6];
                int64x2_t v260 = v71[7];
                int64x2_t v399 = vzip1q_s64(*v71, v254);
                int64x2_t v400 = vzip1q_s64(v257, v258);
                int64x2_t v403 = vzip2q_s64(v253, v254);
                int64x2_t v404 = vzip2q_s64(v257, v258);
                int64x2_t v407 = vzip1q_s64(v255, v256);
                int64x2_t v408 = vzip1q_s64(v259, v260);
                int64x2_t v411 = vzip2q_s64(v255, v256);
                int64x2_t v412 = vzip2q_s64(v259, v260);
                uint64_t v83 = 128;
              }
              else if (v82 == 3)
              {
                float32x4_t v91 = vld1q_dup_f32((const float *)v71->i32);
                int64x2_t v399 = (int64x2_t)v91;
                int64x2_t v400 = (int64x2_t)v91;
                int64x2_t v403 = (int64x2_t)v91;
                int64x2_t v404 = (int64x2_t)v91;
                int64x2_t v407 = (int64x2_t)v91;
                int64x2_t v408 = (int64x2_t)v91;
                int64x2_t v411 = (int64x2_t)v91;
                int64x2_t v412 = (int64x2_t)v91;
                uint64_t v83 = 4;
              }
              else
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v399, 64, (uint64_t)v71, v82);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v399, 64, (unint64_t)v71, v82, *(_DWORD *)(v80 + 52));
              uint64_t v83 = 64;
            }
          }
          else
          {
            uint64_t v83 = 0;
            int64x2_t v400 = 0u;
            int64x2_t v399 = 0u;
            int64x2_t v403 = 0u;
            int64x2_t v404 = 0u;
            int64x2_t v407 = 0u;
            int64x2_t v408 = 0u;
            int64x2_t v411 = 0u;
            int64x2_t v412 = 0u;
          }
          unint64_t v261 = (unint64_t)v71->u64 + v83;
          unsigned int v262 = v72[1];
          if (v72[1])
          {
            if (v262 < 0xF0)
            {
              if (v262 == 127)
              {
                int64x2_t v265 = *(int64x2_t *)v261;
                int64x2_t v266 = *(int64x2_t *)(v261 + 16);
                int64x2_t v267 = *(int64x2_t *)(v261 + 32);
                int64x2_t v268 = *(int64x2_t *)(v261 + 48);
                int64x2_t v269 = *(int64x2_t *)(v261 + 64);
                int64x2_t v270 = *(int64x2_t *)(v261 + 80);
                int64x2_t v271 = *(int64x2_t *)(v261 + 96);
                int64x2_t v272 = *(int64x2_t *)(v261 + 112);
                int64x2_t v415 = vzip1q_s64(*(int64x2_t *)v261, v266);
                int64x2_t v416 = vzip1q_s64(v269, v270);
                int64x2_t v419 = vzip2q_s64(v265, v266);
                int64x2_t v420 = vzip2q_s64(v269, v270);
                int64x2_t v423 = vzip1q_s64(v267, v268);
                int64x2_t v424 = vzip1q_s64(v271, v272);
                int64x2_t v427 = vzip2q_s64(v267, v268);
                int64x2_t v428 = vzip2q_s64(v271, v272);
                uint64_t v263 = 128;
              }
              else if (v262 == 3)
              {
                float32x4_t v264 = vld1q_dup_f32((const float *)v261);
                int64x2_t v415 = (int64x2_t)v264;
                int64x2_t v416 = (int64x2_t)v264;
                int64x2_t v419 = (int64x2_t)v264;
                int64x2_t v420 = (int64x2_t)v264;
                int64x2_t v423 = (int64x2_t)v264;
                int64x2_t v424 = (int64x2_t)v264;
                int64x2_t v427 = (int64x2_t)v264;
                int64x2_t v428 = (int64x2_t)v264;
                uint64_t v263 = 4;
              }
              else
              {
                uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v415, 64, v261, v262);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v415, 64, v261, v262, v81);
              uint64_t v263 = 64;
            }
          }
          else
          {
            uint64_t v263 = 0;
            int64x2_t v415 = 0u;
            int64x2_t v416 = 0u;
            int64x2_t v419 = 0u;
            int64x2_t v420 = 0u;
            int64x2_t v423 = 0u;
            int64x2_t v424 = 0u;
            int64x2_t v427 = 0u;
            int64x2_t v428 = 0u;
          }
          unint64_t v273 = v261 + v263;
          unsigned int v274 = v72[2];
          if (v72[2])
          {
            if (v274 < 0xF0)
            {
              if (v274 == 127)
              {
                int64x2_t v277 = *(int64x2_t *)v273;
                int64x2_t v278 = *(int64x2_t *)(v273 + 16);
                int64x2_t v279 = *(int64x2_t *)(v273 + 32);
                int64x2_t v280 = *(int64x2_t *)(v273 + 48);
                int64x2_t v281 = *(int64x2_t *)(v273 + 64);
                int64x2_t v282 = *(int64x2_t *)(v273 + 80);
                int64x2_t v283 = *(int64x2_t *)(v273 + 96);
                int64x2_t v284 = *(int64x2_t *)(v273 + 112);
                int64x2_t v401 = vzip1q_s64(*(int64x2_t *)v273, v278);
                int64x2_t v402 = vzip1q_s64(v281, v282);
                int64x2_t v405 = vzip2q_s64(v277, v278);
                int64x2_t v406 = vzip2q_s64(v281, v282);
                int64x2_t v409 = vzip1q_s64(v279, v280);
                int64x2_t v410 = vzip1q_s64(v283, v284);
                int64x2_t v413 = vzip2q_s64(v279, v280);
                int64x2_t v414 = vzip2q_s64(v283, v284);
                uint64_t v275 = 128;
              }
              else if (v274 == 3)
              {
                float32x4_t v276 = vld1q_dup_f32((const float *)v273);
                int64x2_t v401 = (int64x2_t)v276;
                int64x2_t v402 = (int64x2_t)v276;
                int64x2_t v405 = (int64x2_t)v276;
                int64x2_t v406 = (int64x2_t)v276;
                int64x2_t v409 = (int64x2_t)v276;
                int64x2_t v410 = (int64x2_t)v276;
                int64x2_t v413 = (int64x2_t)v276;
                int64x2_t v414 = (int64x2_t)v276;
                uint64_t v275 = 4;
              }
              else
              {
                uint64_t v275 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v401, 64, v273, v274);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v401, 64, v273, v274, v81);
              uint64_t v275 = 64;
            }
          }
          else
          {
            uint64_t v275 = 0;
            int64x2_t v401 = 0u;
            int64x2_t v402 = 0u;
            int64x2_t v405 = 0u;
            int64x2_t v406 = 0u;
            int64x2_t v409 = 0u;
            int64x2_t v410 = 0u;
            int64x2_t v413 = 0u;
            int64x2_t v414 = 0u;
          }
          unint64_t v285 = v273 + v275;
          unsigned int v286 = v72[3];
          if (v72[3])
          {
            if (v286 < 0xF0)
            {
              if (v286 == 127)
              {
                int64x2_t v289 = *(int64x2_t *)v285;
                int64x2_t v290 = *(int64x2_t *)(v285 + 16);
                int64x2_t v291 = *(int64x2_t *)(v285 + 32);
                int64x2_t v292 = *(int64x2_t *)(v285 + 48);
                int64x2_t v293 = *(int64x2_t *)(v285 + 64);
                int64x2_t v294 = *(int64x2_t *)(v285 + 80);
                int64x2_t v295 = *(int64x2_t *)(v285 + 96);
                int64x2_t v296 = *(int64x2_t *)(v285 + 112);
                int64x2_t v417 = vzip1q_s64(*(int64x2_t *)v285, v290);
                int64x2_t v418 = vzip1q_s64(v293, v294);
                int64x2_t v421 = vzip2q_s64(v289, v290);
                int64x2_t v422 = vzip2q_s64(v293, v294);
                int64x2_t v425 = vzip1q_s64(v291, v292);
                int64x2_t v426 = vzip1q_s64(v295, v296);
                int64x2_t v429 = vzip2q_s64(v291, v292);
                int64x2_t v430 = vzip2q_s64(v295, v296);
                uint64_t v287 = 128;
              }
              else if (v286 == 3)
              {
                float32x4_t v288 = vld1q_dup_f32((const float *)v285);
                int64x2_t v417 = (int64x2_t)v288;
                int64x2_t v418 = (int64x2_t)v288;
                int64x2_t v421 = (int64x2_t)v288;
                int64x2_t v422 = (int64x2_t)v288;
                int64x2_t v425 = (int64x2_t)v288;
                int64x2_t v426 = (int64x2_t)v288;
                int64x2_t v429 = (int64x2_t)v288;
                int64x2_t v430 = (int64x2_t)v288;
                uint64_t v287 = 4;
              }
              else
              {
                uint64_t v287 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v417, 64, v285, v286);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v417, 64, v285, v286, v81);
              uint64_t v287 = 64;
            }
          }
          else
          {
            uint64_t v287 = 0;
            int64x2_t v417 = 0u;
            int64x2_t v418 = 0u;
            int64x2_t v421 = 0u;
            int64x2_t v422 = 0u;
            int64x2_t v425 = 0u;
            int64x2_t v426 = 0u;
            int64x2_t v429 = 0u;
            int64x2_t v430 = 0u;
          }
          unint64_t v297 = v285 + v287;
          unsigned int v298 = v72[4];
          if (v72[4])
          {
            if (v298 < 0xF0)
            {
              if (v298 == 127)
              {
                int64x2_t v301 = *(int64x2_t *)v297;
                int64x2_t v302 = *(int64x2_t *)(v297 + 16);
                int64x2_t v303 = *(int64x2_t *)(v297 + 32);
                int64x2_t v304 = *(int64x2_t *)(v297 + 48);
                int64x2_t v305 = *(int64x2_t *)(v297 + 64);
                int64x2_t v306 = *(int64x2_t *)(v297 + 80);
                int64x2_t v307 = *(int64x2_t *)(v297 + 96);
                int64x2_t v308 = *(int64x2_t *)(v297 + 112);
                int64x2_t v431 = vzip1q_s64(*(int64x2_t *)v297, v302);
                int64x2_t v432 = vzip1q_s64(v305, v306);
                int64x2_t v435 = vzip2q_s64(v301, v302);
                int64x2_t v436 = vzip2q_s64(v305, v306);
                int64x2_t v439 = vzip1q_s64(v303, v304);
                int64x2_t v440 = vzip1q_s64(v307, v308);
                int64x2_t v443 = vzip2q_s64(v303, v304);
                int64x2_t v444 = vzip2q_s64(v307, v308);
                uint64_t v299 = 128;
              }
              else if (v298 == 3)
              {
                float32x4_t v300 = vld1q_dup_f32((const float *)v297);
                int64x2_t v431 = (int64x2_t)v300;
                int64x2_t v432 = (int64x2_t)v300;
                int64x2_t v435 = (int64x2_t)v300;
                int64x2_t v436 = (int64x2_t)v300;
                int64x2_t v439 = (int64x2_t)v300;
                int64x2_t v440 = (int64x2_t)v300;
                int64x2_t v443 = (int64x2_t)v300;
                int64x2_t v444 = (int64x2_t)v300;
                uint64_t v299 = 4;
              }
              else
              {
                uint64_t v299 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v431, 64, v297, v298);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v431, 64, v297, v298, v81);
              uint64_t v299 = 64;
            }
          }
          else
          {
            uint64_t v299 = 0;
            int64x2_t v431 = 0u;
            int64x2_t v432 = 0u;
            int64x2_t v435 = 0u;
            int64x2_t v436 = 0u;
            int64x2_t v439 = 0u;
            int64x2_t v440 = 0u;
            int64x2_t v443 = 0u;
            int64x2_t v444 = 0u;
          }
          unint64_t v309 = v297 + v299;
          unsigned int v310 = v72[5];
          if (v72[5])
          {
            if (v310 < 0xF0)
            {
              if (v310 == 127)
              {
                int64x2_t v313 = *(int64x2_t *)v309;
                int64x2_t v314 = *(int64x2_t *)(v309 + 16);
                int64x2_t v315 = *(int64x2_t *)(v309 + 32);
                int64x2_t v316 = *(int64x2_t *)(v309 + 48);
                int64x2_t v317 = *(int64x2_t *)(v309 + 64);
                int64x2_t v318 = *(int64x2_t *)(v309 + 80);
                int64x2_t v319 = *(int64x2_t *)(v309 + 96);
                int64x2_t v320 = *(int64x2_t *)(v309 + 112);
                int64x2_t v447 = vzip1q_s64(*(int64x2_t *)v309, v314);
                int64x2_t v448 = vzip1q_s64(v317, v318);
                int64x2_t v451 = vzip2q_s64(v313, v314);
                int64x2_t v452 = vzip2q_s64(v317, v318);
                int64x2_t v455 = vzip1q_s64(v315, v316);
                int64x2_t v456 = vzip1q_s64(v319, v320);
                int64x2_t v459 = vzip2q_s64(v315, v316);
                int64x2_t v460 = vzip2q_s64(v319, v320);
                uint64_t v311 = 128;
              }
              else if (v310 == 3)
              {
                float32x4_t v312 = vld1q_dup_f32((const float *)v309);
                int64x2_t v447 = (int64x2_t)v312;
                int64x2_t v448 = (int64x2_t)v312;
                int64x2_t v451 = (int64x2_t)v312;
                int64x2_t v452 = (int64x2_t)v312;
                int64x2_t v455 = (int64x2_t)v312;
                int64x2_t v456 = (int64x2_t)v312;
                int64x2_t v459 = (int64x2_t)v312;
                int64x2_t v460 = (int64x2_t)v312;
                uint64_t v311 = 4;
              }
              else
              {
                uint64_t v311 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v447, 64, v309, v310);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v447, 64, v309, v310, v81);
              uint64_t v311 = 64;
            }
          }
          else
          {
            uint64_t v311 = 0;
            int64x2_t v447 = 0u;
            int64x2_t v448 = 0u;
            int64x2_t v451 = 0u;
            int64x2_t v452 = 0u;
            int64x2_t v455 = 0u;
            int64x2_t v456 = 0u;
            int64x2_t v459 = 0u;
            int64x2_t v460 = 0u;
          }
          unint64_t v321 = v309 + v311;
          unsigned int v322 = v72[6];
          if (v72[6])
          {
            if (v322 < 0xF0)
            {
              if (v322 == 127)
              {
                int64x2_t v328 = *(int64x2_t *)v321;
                int64x2_t v329 = *(int64x2_t *)(v321 + 16);
                int64x2_t v330 = *(int64x2_t *)(v321 + 32);
                int64x2_t v331 = *(int64x2_t *)(v321 + 48);
                int64x2_t v332 = *(int64x2_t *)(v321 + 64);
                int64x2_t v333 = *(int64x2_t *)(v321 + 80);
                int64x2_t v334 = *(int64x2_t *)(v321 + 96);
                int64x2_t v335 = *(int64x2_t *)(v321 + 112);
                int64x2_t v433 = vzip1q_s64(*(int64x2_t *)v321, v329);
                int64x2_t v434 = vzip1q_s64(v332, v333);
                int64x2_t v437 = vzip2q_s64(v328, v329);
                int64x2_t v438 = vzip2q_s64(v332, v333);
                int64x2_t v441 = vzip1q_s64(v330, v331);
                int64x2_t v442 = vzip1q_s64(v334, v335);
                int64x2_t v445 = vzip2q_s64(v330, v331);
                int64x2_t v446 = vzip2q_s64(v334, v335);
                uint64_t v323 = 128;
                unsigned int v324 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else if (v322 == 3)
              {
                float32x4_t v326 = vld1q_dup_f32((const float *)v321);
                int64x2_t v433 = (int64x2_t)v326;
                int64x2_t v434 = (int64x2_t)v326;
                int64x2_t v437 = (int64x2_t)v326;
                int64x2_t v438 = (int64x2_t)v326;
                int64x2_t v441 = (int64x2_t)v326;
                int64x2_t v442 = (int64x2_t)v326;
                int64x2_t v445 = (int64x2_t)v326;
                int64x2_t v446 = (int64x2_t)v326;
                uint64_t v323 = 4;
                unsigned int v324 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v323 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v433, 64, v321, v322);
                unsigned int v324 = v72[7];
                if (!v72[7])
                {
LABEL_226:
                  int64x2_t v449 = 0u;
                  int64x2_t v450 = 0u;
                  int64x2_t v453 = 0u;
                  int64x2_t v454 = 0u;
                  int64x2_t v457 = 0u;
                  int64x2_t v458 = 0u;
                  int64x2_t v461 = 0u;
                  int64x2_t v462 = 0u;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v433, 64, v321, v322, v81);
              uint64_t v323 = 64;
              unsigned int v324 = v72[7];
              if (!v72[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v323 = 0;
            int64x2_t v433 = 0u;
            int64x2_t v434 = 0u;
            int64x2_t v437 = 0u;
            int64x2_t v438 = 0u;
            int64x2_t v441 = 0u;
            int64x2_t v442 = 0u;
            int64x2_t v445 = 0u;
            int64x2_t v446 = 0u;
            unsigned int v324 = v72[7];
            if (!v72[7]) {
              goto LABEL_226;
            }
          }
          unint64_t v325 = v321 + v323;
          if (v324 < 0xF0)
          {
            if (v324 == 127)
            {
              int64x2_t v336 = *(int64x2_t *)v325;
              int64x2_t v337 = *(int64x2_t *)(v325 + 16);
              int64x2_t v338 = *(int64x2_t *)(v325 + 32);
              int64x2_t v339 = *(int64x2_t *)(v325 + 48);
              int64x2_t v340 = *(int64x2_t *)(v325 + 64);
              int64x2_t v341 = *(int64x2_t *)(v325 + 80);
              int64x2_t v342 = *(int64x2_t *)(v325 + 96);
              int64x2_t v343 = *(int64x2_t *)(v325 + 112);
              int64x2_t v449 = vzip1q_s64(*(int64x2_t *)v325, v337);
              int64x2_t v450 = vzip1q_s64(v340, v341);
              int64x2_t v453 = vzip2q_s64(v336, v337);
              int64x2_t v454 = vzip2q_s64(v340, v341);
              int64x2_t v457 = vzip1q_s64(v338, v339);
              int64x2_t v458 = vzip1q_s64(v342, v343);
              int64x2_t v461 = vzip2q_s64(v338, v339);
              int64x2_t v462 = vzip2q_s64(v342, v343);
            }
            else if (v324 == 3)
            {
              float32x4_t v327 = vld1q_dup_f32((const float *)v325);
              int64x2_t v449 = (int64x2_t)v327;
              int64x2_t v450 = (int64x2_t)v327;
              int64x2_t v453 = (int64x2_t)v327;
              int64x2_t v454 = (int64x2_t)v327;
              int64x2_t v457 = (int64x2_t)v327;
              int64x2_t v458 = (int64x2_t)v327;
              int64x2_t v461 = (int64x2_t)v327;
              int64x2_t v462 = (int64x2_t)v327;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v449, 64, v325, v324);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v449, 64, v325, v324, v81);
          }
LABEL_243:
          unsigned int v36 = v33 + 1;
          unint64_t v344 = v394;
          uint64_t v27 = v386;
          if (v394)
          {
            unint64_t v345 = 0;
            v346 = &v399.i8[64 * (unint64_t)v392 + 4 * v393];
            unsigned int v347 = v395;
            do
            {
              if (v347)
              {
                uint64_t v348 = 0;
                uint64_t v349 = v390 + v391 * v345;
                do
                {
                  *(unsigned char *)(v349 + v348) = v346[v348];
                  ++v348;
                  unsigned int v347 = v395;
                }
                while (4 * (unint64_t)v395 > v348);
                unint64_t v344 = v394;
              }
              ++v345;
              v346 += 64;
            }
            while (v345 < v344);
          }
LABEL_29:
          BOOL v22 = v33 == v374 >> 4;
          unsigned int v33 = v36;
        }
        while (!v22);
        BOOL v22 = v17++ == v365;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v275 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v226 = a8;
  unsigned int v16 = a8 >> 4;
  unsigned int v207 = a8 + a10 - 1;
  unsigned int v209 = v207 >> 4;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v230 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v220 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v219 = isLevelTiled;
  if (v16 <= v209)
  {
    unsigned int v218 = a7 + a9 - 1;
    if (a7 >> 4 <= v218 >> 4)
    {
      uint64_t v26 = a11;
      unsigned int v204 = a5 - 1;
      unsigned int v229 = (a5 - 1) >> 4;
      int v228 = ((a5 - 1) & 0xF) + 1;
      int v205 = ((a6 - 1) & 0xF) + 1;
      unsigned int v206 = (a6 - 1) >> 4;
      uint64_t v211 = 8 * a11;
      uint64_t v212 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v28.i64[0] = 0x2000000020;
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL)));
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v29.i8))));
      *(int8x8_t *)v31.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v217 = v31.i32[0] | v31.i32[1];
      BOOL v215 = v31.i32[1] != 0;
      uint64_t v216 = v31.i64[0];
      BOOL v214 = v31.i32[0] != 0;
      unint64_t v203 = 8 * v18 * (unint64_t)v17;
      uint64_t v232 = 3 * a11;
      uint64_t v210 = 2 * a11;
      do
      {
        unsigned int v32 = (16 * v16) | 0xF;
        if (16 * v16 <= v226) {
          int v33 = v226;
        }
        else {
          int v33 = 16 * v16;
        }
        unsigned int v34 = a7 >> 4;
        if (v207 < v32) {
          unsigned int v32 = v207;
        }
        unsigned int v225 = 16 * v16;
        int v213 = v33 - 16 * v16;
        int v224 = v32 - v33 + 1;
        int v35 = v205;
        if (v16 != v206) {
          int v35 = 16;
        }
        unsigned int v231 = v35;
        uint64_t v223 = a2 + (v33 - v226) * v26;
        unsigned int v36 = a7;
        do
        {
          unsigned int v41 = 16 * v34;
          unsigned int v42 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= v36) {
            int v43 = v36;
          }
          else {
            int v43 = 16 * v34;
          }
          if (v218 < v42) {
            unsigned int v42 = a7 + a9 - 1;
          }
          int v44 = v42 - v43 + 1;
          if (v34 == v229) {
            unsigned int v45 = v228;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v225 >= v226 && v41 >= v36)
          {
            int v47 = v228;
            if (v34 != v229) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v224 != v231;
          }
          if (v219)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v203 >> (*(unsigned char *)(v25 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v194 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v195 = 0;
              if (v73) {
                goto LABEL_276;
              }
LABEL_265:
              unsigned int v196 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v196 | v195) {
                goto LABEL_266;
              }
LABEL_277:
              uint64_t v198 = 0;
            }
            else
            {
              unsigned int v195 = 32 - __clz(~(-1 << -(char)__clz(v194)));
              if ((v73 & 1) == 0) {
                goto LABEL_265;
              }
LABEL_276:
              unsigned int v196 = 0;
              if (!v195) {
                goto LABEL_277;
              }
LABEL_266:
              int v197 = 0;
              uint64_t v198 = 0;
              int v199 = v34 & v194;
              BOOL v200 = v195 != 0;
              BOOL v201 = v196 != 0;
              int v202 = 1;
              do
              {
                --v195;
                if (v200) {
                  v198 |= (unint64_t)(v202 & v199) << v197++;
                }
                else {
                  unsigned int v195 = 0;
                }
                --v196;
                if (v201) {
                  v198 |= (unint64_t)(v202 & v16 & ((v74 >> 4) - 1)) << v197++;
                }
                else {
                  unsigned int v196 = 0;
                }
                v202 *= 2;
                --v197;
                BOOL v201 = v196 != 0;
                BOOL v200 = v195 != 0;
              }
              while (v196 | v195);
            }
            unint64_t v56 = ((unint64_t)(v41 / v70 + v225 / v74 * ((v70 + v204) / v70)) << 14) + (v198 << 8);
            goto LABEL_61;
          }
          if (v217)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v215;
            BOOL v53 = v214;
            int v54 = HIDWORD(v216);
            int v55 = v216;
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v34) << v49++;
              }
              else {
                int v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v16) << v49++;
              }
              else {
                int v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 8;
LABEL_61:
          unsigned int v57 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_87:
              unint64_t v64 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_87;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v34) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v16) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_88:
          uint64_t v75 = (int32x4_t *)(a3 + v56);
          if (v220)
          {
            memcpy(__dst, v75, sizeof(__dst));
            uint64_t v25 = v230;
            uint64_t v75 = (int32x4_t *)__dst;
          }
          int v76 = (unsigned __int8 *)(a4 + 8 * v64);
          unsigned int v77 = (int32x4_t *)(v223 + 2 * (v43 - v36));
          char v78 = v45 < 0x10 || v46;
          if ((v78 & 1) == 0 && v231 > 0xF)
          {
            uint64_t v79 = *(void *)(v25 + 208);
            int v80 = *(_DWORD *)(v79 + 52);
            unsigned int v81 = *v76;
            if (*v76)
            {
              uint64_t v26 = a11;
              uint64_t v82 = 2 * a11;
              if (v81 < 0xF0)
              {
                if (v81 == 63)
                {
                  int32x4_t v91 = *v75;
                  int32x4_t v30 = v75[1];
                  int32x4_t v29 = v75[2];
                  int32x4_t v28 = v75[3];
                  *unsigned int v77 = vuzp1q_s32(*v75, v29);
                  *(int32x4_t *)((char *)v77 + a11) = vuzp2q_s32(v91, v29);
                  int64x2_t v92 = (int32x4_t *)((char *)v77 + v210);
                  *int64x2_t v92 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v92 + a11) = v31;
                  uint64_t v83 = 64;
                }
                else if (v81 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16(v75->i16);
                  *unsigned int v77 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v77 + a11) = v31;
                  *(int16x8_t *)((char *)v77 + 2 * a11) = v31;
                  *(int16x8_t *)((char *)v77 + 3 * a11) = v31;
                  uint64_t v83 = 2;
                }
                else
                {
                  uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v77, a11, (uint64_t)v75, v81, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v77, a11, (uint64_t)v75, v81, *(_DWORD *)(v79 + 52));
                uint64_t v83 = 32;
              }
            }
            else
            {
              uint64_t v83 = 0;
              v77->i64[0] = 0;
              v77->i64[1] = 0;
              uint64_t v26 = a11;
              v88 = (uint64_t *)((char *)v77->i64 + a11);
              void *v88 = 0;
              v88[1] = 0;
              uint64_t v82 = 2 * a11;
              v89 = (uint64_t *)((char *)v77->i64 + v210);
              void *v89 = 0;
              v89[1] = 0;
              v90 = (uint64_t *)((char *)v77->i64 + v232);
              void *v90 = 0;
              v90[1] = 0;
            }
            uint64_t v93 = (uint64_t)v75->i64 + v83;
            int64x2_t v94 = (int32x4_t *)((char *)v77 + v212);
            unsigned int v95 = v76[1];
            if (v76[1])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 63)
                {
                  int32x4_t v100 = *(int32x4_t *)v93;
                  int32x4_t v30 = *(int32x4_t *)(v93 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v93 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v93 + 48);
                  *int64x2_t v94 = vuzp1q_s32(*(int32x4_t *)v93, v29);
                  *(int32x4_t *)((char *)v94 + v26) = vuzp2q_s32(v100, v29);
                  v101 = (int32x4_t *)((char *)v94 + v82);
                  int32x4_t *v101 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v101 + v26) = v31;
                  uint64_t v96 = 64;
                }
                else if (v95 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v93);
                  *int64x2_t v94 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v94 + v26) = v31;
                  *(int16x8_t *)((char *)v94 + v82) = v31;
                  *(int16x8_t *)((char *)v94 + 3 * a11) = v31;
                  uint64_t v96 = 2;
                }
                else
                {
                  uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v77 + v212), v26, v93, v95, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v77->i16[(unint64_t)v212 / 2], v26, v93, v95, v80);
                uint64_t v96 = 32;
              }
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v26);
              *int64x2_t v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v82);
              *int64x2_t v98 = 0;
              v98[1] = 0;
              int64x2_t v99 = (uint64_t *)((char *)v94->i64 + v232);
              *int64x2_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v102 = v93 + v96;
            unint64_t v103 = v77 + 1;
            unsigned int v104 = v76[2];
            if (v76[2])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 63)
                {
                  int32x4_t v109 = *(int32x4_t *)v102;
                  int32x4_t v30 = *(int32x4_t *)(v102 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v102 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v102 + 48);
                  *unint64_t v103 = vuzp1q_s32(*(int32x4_t *)v102, v29);
                  *(int32x4_t *)((char *)v103 + v26) = vuzp2q_s32(v109, v29);
                  float32x4_t v110 = (int32x4_t *)((char *)v103 + v82);
                  *float32x4_t v110 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v110 + v26) = v31;
                  uint64_t v105 = 64;
                }
                else if (v104 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v102);
                  *unint64_t v103 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v103 + v26) = v31;
                  *(int16x8_t *)((char *)v103 + v82) = v31;
                  *(int16x8_t *)((char *)v103 + 3 * a11) = v31;
                  uint64_t v105 = 2;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v103, v26, v102, v104, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v103, v26, v102, v104, v80);
                uint64_t v105 = 32;
              }
            }
            else
            {
              uint64_t v105 = 0;
              v103->i64[0] = 0;
              v77[1].i64[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v103->i64 + v26);
              *uint64_t v106 = 0;
              v106[1] = 0;
              v107 = (uint64_t *)((char *)v103->i64 + v82);
              void *v107 = 0;
              v107[1] = 0;
              v108 = (uint64_t *)((char *)v103->i64 + v232);
              void *v108 = 0;
              v108[1] = 0;
            }
            uint64_t v111 = v102 + v105;
            v112 = v94 + 1;
            unsigned int v113 = v76[3];
            if (v76[3])
            {
              if (v113 < 0xF0)
              {
                if (v113 == 63)
                {
                  int32x4_t v118 = *(int32x4_t *)v111;
                  int32x4_t v30 = *(int32x4_t *)(v111 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v111 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v111 + 48);
                  int32x4_t *v112 = vuzp1q_s32(*(int32x4_t *)v111, v29);
                  *(int32x4_t *)((char *)v112 + v26) = vuzp2q_s32(v118, v29);
                  int64x2_t v119 = (int32x4_t *)((char *)v112 + v82);
                  *int64x2_t v119 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v119 + v26) = v31;
                  uint64_t v114 = 64;
                }
                else if (v113 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v111);
                  int32x4_t *v112 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v112 + v26) = v31;
                  *(int16x8_t *)((char *)v112 + v82) = v31;
                  *(int16x8_t *)((char *)v112 + 3 * a11) = v31;
                  uint64_t v114 = 2;
                }
                else
                {
                  uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v112, v26, v111, v113, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v112, v26, v111, v113, v80);
                uint64_t v114 = 32;
              }
            }
            else
            {
              uint64_t v114 = 0;
              v112->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v115 = (uint64_t *)((char *)v112->i64 + v26);
              *int64x2_t v115 = 0;
              v115[1] = 0;
              int64x2_t v116 = (uint64_t *)((char *)v112->i64 + v82);
              *int64x2_t v116 = 0;
              v116[1] = 0;
              int64x2_t v117 = (uint64_t *)((char *)v112->i64 + v232);
              *int64x2_t v117 = 0;
              v117[1] = 0;
            }
            uint64_t v120 = v111 + v114;
            int64x2_t v121 = (int32x4_t *)((char *)v77 + v211);
            unsigned int v122 = v76[4];
            if (v76[4])
            {
              if (v122 < 0xF0)
              {
                if (v122 == 63)
                {
                  int32x4_t v127 = *(int32x4_t *)v120;
                  int32x4_t v30 = *(int32x4_t *)(v120 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v120 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v120 + 48);
                  *int64x2_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v29);
                  *(int32x4_t *)((char *)v121 + v26) = vuzp2q_s32(v127, v29);
                  uint64_t v128 = (int32x4_t *)((char *)v121 + v82);
                  *uint64_t v128 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v128 + v26) = v31;
                  uint64_t v123 = 64;
                }
                else if (v122 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v120);
                  *int64x2_t v121 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v121 + v26) = v31;
                  *(int16x8_t *)((char *)v121 + v82) = v31;
                  *(int16x8_t *)((char *)v121 + 3 * a11) = v31;
                  uint64_t v123 = 2;
                }
                else
                {
                  uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v77 + v211), v26, v120, v122, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v77->i16[(unint64_t)v211 / 2], v26, v120, v122, v80);
                uint64_t v123 = 32;
              }
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              v124 = (uint64_t *)((char *)v121->i64 + v26);
              void *v124 = 0;
              v124[1] = 0;
              unint64_t v125 = (uint64_t *)((char *)v121->i64 + v82);
              *unint64_t v125 = 0;
              v125[1] = 0;
              v126 = (uint64_t *)((char *)v121->i64 + v232);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v129 = v120 + v123;
            v130 = (int32x4_t *)((char *)v77 + 12 * a11);
            unsigned int v131 = v76[5];
            if (v76[5])
            {
              if (v131 < 0xF0)
              {
                if (v131 == 63)
                {
                  int32x4_t v136 = *(int32x4_t *)v129;
                  int32x4_t v30 = *(int32x4_t *)(v129 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v129 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v129 + 48);
                  int32x4_t *v130 = vuzp1q_s32(*(int32x4_t *)v129, v29);
                  *(int32x4_t *)((char *)v130 + v26) = vuzp2q_s32(v136, v29);
                  int64x2_t v137 = (int32x4_t *)((char *)v130 + v82);
                  *int64x2_t v137 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v137 + v26) = v31;
                  uint64_t v132 = 64;
                }
                else if (v131 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v129);
                  int32x4_t *v130 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v130 + v26) = v31;
                  *(int16x8_t *)((char *)v130 + v82) = v31;
                  *(int16x8_t *)((char *)v130 + 3 * a11) = v31;
                  uint64_t v132 = 2;
                }
                else
                {
                  uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v130, v26, v129, v131, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v130, v26, v129, v131, v80);
                uint64_t v132 = 32;
              }
            }
            else
            {
              uint64_t v132 = 0;
              v130->i64[0] = 0;
              v130->i64[1] = 0;
              v133 = (uint64_t *)((char *)v130->i64 + v26);
              void *v133 = 0;
              v133[1] = 0;
              v134 = (uint64_t *)((char *)v130->i64 + v82);
              void *v134 = 0;
              v134[1] = 0;
              v135 = (uint64_t *)((char *)v130->i64 + v232);
              void *v135 = 0;
              v135[1] = 0;
            }
            uint64_t v138 = v129 + v132;
            int64x2_t v139 = v121 + 1;
            unsigned int v140 = v76[6];
            if (v76[6])
            {
              if (v140 < 0xF0)
              {
                if (v140 == 63)
                {
                  int32x4_t v145 = *(int32x4_t *)v138;
                  int32x4_t v30 = *(int32x4_t *)(v138 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v138 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v138 + 48);
                  *int64x2_t v139 = vuzp1q_s32(*(int32x4_t *)v138, v29);
                  *(int32x4_t *)((char *)v139 + v26) = vuzp2q_s32(v145, v29);
                  v146 = (int32x4_t *)((char *)v139 + v82);
                  int32x4_t *v146 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v146 + v26) = v31;
                  uint64_t v141 = 64;
                }
                else if (v140 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v138);
                  *int64x2_t v139 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v139 + v26) = v31;
                  *(int16x8_t *)((char *)v139 + v82) = v31;
                  *(int16x8_t *)((char *)v139 + 3 * a11) = v31;
                  uint64_t v141 = 2;
                }
                else
                {
                  uint64_t v141 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v139, v26, v138, v140, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v139, v26, v138, v140, v80);
                uint64_t v141 = 32;
              }
            }
            else
            {
              uint64_t v141 = 0;
              v139->i64[0] = 0;
              v121[1].i64[1] = 0;
              int64x2_t v142 = (uint64_t *)((char *)v139->i64 + v26);
              *int64x2_t v142 = 0;
              v142[1] = 0;
              int64x2_t v143 = (uint64_t *)((char *)v139->i64 + v82);
              *int64x2_t v143 = 0;
              v143[1] = 0;
              v144 = (uint64_t *)((char *)v139->i64 + v232);
              void *v144 = 0;
              v144[1] = 0;
            }
            unint64_t v147 = v130 + 1;
            unsigned int v148 = v76[7];
            if (v76[7])
            {
              uint64_t v149 = v138 + v141;
              unsigned int v36 = a7;
              if (v148 < 0xF0)
              {
                if (v148 == 63)
                {
                  int32x4_t v150 = *(int32x4_t *)v149;
                  int32x4_t v30 = *(int32x4_t *)(v149 + 16);
                  int32x4_t v29 = *(int32x4_t *)(v149 + 32);
                  int32x4_t v28 = *(int32x4_t *)(v149 + 48);
                  *unint64_t v147 = vuzp1q_s32(*(int32x4_t *)v149, v29);
                  *(int32x4_t *)((char *)v147 + v26) = vuzp2q_s32(v150, v29);
                  v151 = (int32x4_t *)((char *)v147 + v82);
                  int32x4_t *v151 = vuzp1q_s32(v30, v28);
                  int16x8_t v31 = (int16x8_t)vuzp2q_s32(v30, v28);
                  *(int16x8_t *)((char *)v151 + v26) = v31;
                }
                else if (v148 == 1)
                {
                  int16x8_t v31 = vld1q_dup_s16((const __int16 *)v149);
                  *unint64_t v147 = (int32x4_t)v31;
                  *(int16x8_t *)((char *)v147 + v26) = v31;
                  *(int16x8_t *)((char *)v147 + v82) = v31;
                  *(int16x8_t *)((char *)v147 + 3 * a11) = v31;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v147, v26, v149, v148, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v147, v26, v149, v148, v80);
              }
            }
            else
            {
              v147->i64[0] = 0;
              v130[1].i64[1] = 0;
              unsigned int v37 = (uint64_t *)((char *)v147->i64 + v26);
              *unsigned int v37 = 0;
              v37[1] = 0;
              unsigned int v38 = (uint64_t *)((char *)v147->i64 + v82);
              *unsigned int v38 = 0;
              v38[1] = 0;
              int v39 = (uint64_t *)((char *)v147->i64 + v232);
              *int v39 = 0;
              v39[1] = 0;
              unsigned int v36 = a7;
            }
            uint64_t v25 = v230;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v25;
          block[5] = v75;
          char v240 = v45;
          char v241 = v231;
          int v236 = v213;
          unsigned int v237 = v43 - v41;
          block[6] = v76;
          v234 = v77;
          uint64_t v26 = a11;
          uint64_t v235 = a11;
          unsigned int v238 = v224;
          unsigned int v239 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
            uint64_t v25 = v230;
            unsigned int v36 = a7;
LABEL_28:
            unsigned int v40 = v34 + 1;
            goto LABEL_29;
          }
          uint64_t v84 = *(void *)(v25 + 208);
          int v85 = *(_DWORD *)(v84 + 52);
          unsigned int v86 = *v76;
          unsigned int v36 = a7;
          if (*v76)
          {
            if (v86 < 0xF0)
            {
              if (v86 == 63)
              {
                int32x4_t v152 = v75[1];
                int32x4_t v29 = v75[2];
                int32x4_t v28 = v75[3];
                int32x4_t v153 = vuzp2q_s32(*v75, v29);
                int32x4_t v243 = vuzp1q_s32(*v75, v29);
                int32x4_t v245 = v153;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v152, v28);
                int32x4_t v30 = vuzp2q_s32(v152, v28);
                int16x8_t v247 = v31;
                int32x4_t v249 = v30;
                uint64_t v87 = 64;
              }
              else if (v86 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16(v75->i16);
                int32x4_t v243 = (int32x4_t)v31;
                int32x4_t v245 = (int32x4_t)v31;
                int16x8_t v247 = v31;
                int32x4_t v249 = (int32x4_t)v31;
                uint64_t v87 = 2;
              }
              else
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v243, 32, (uint64_t)v75, v86, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v243, 32, (uint64_t)v75, v86, *(_DWORD *)(v84 + 52));
              uint64_t v87 = 32;
            }
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int16x8_t v247 = 0uLL;
            int32x4_t v249 = 0uLL;
          }
          uint64_t v154 = (uint64_t)v75->i64 + v87;
          unsigned int v155 = v76[1];
          if (v76[1])
          {
            if (v155 < 0xF0)
            {
              if (v155 == 63)
              {
                int32x4_t v157 = *(int32x4_t *)(v154 + 16);
                int32x4_t v29 = *(int32x4_t *)(v154 + 32);
                int32x4_t v28 = *(int32x4_t *)(v154 + 48);
                int32x4_t v158 = vuzp2q_s32(*(int32x4_t *)v154, v29);
                int32x4_t v251 = vuzp1q_s32(*(int32x4_t *)v154, v29);
                int32x4_t v253 = v158;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v157, v28);
                int32x4_t v30 = vuzp2q_s32(v157, v28);
                int16x8_t v255 = v31;
                int32x4_t v257 = v30;
                uint64_t v156 = 64;
              }
              else if (v155 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t v251 = (int32x4_t)v31;
                int32x4_t v253 = (int32x4_t)v31;
                int16x8_t v255 = v31;
                int32x4_t v257 = (int32x4_t)v31;
                uint64_t v156 = 2;
              }
              else
              {
                uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v251, 32, v154, v155, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v251, 32, v154, v155, v85);
              uint64_t v156 = 32;
            }
          }
          else
          {
            uint64_t v156 = 0;
            int32x4_t v251 = 0uLL;
            int32x4_t v253 = 0uLL;
            int16x8_t v255 = 0uLL;
            int32x4_t v257 = 0uLL;
          }
          uint64_t v159 = v154 + v156;
          unsigned int v160 = v76[2];
          if (v76[2])
          {
            if (v160 < 0xF0)
            {
              if (v160 == 63)
              {
                int32x4_t v162 = *(int32x4_t *)(v159 + 16);
                int32x4_t v29 = *(int32x4_t *)(v159 + 32);
                int32x4_t v28 = *(int32x4_t *)(v159 + 48);
                int32x4_t v163 = vuzp2q_s32(*(int32x4_t *)v159, v29);
                int32x4_t v244 = vuzp1q_s32(*(int32x4_t *)v159, v29);
                int32x4_t v246 = v163;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v162, v28);
                int32x4_t v30 = vuzp2q_s32(v162, v28);
                int16x8_t v248 = v31;
                int32x4_t v250 = v30;
                uint64_t v161 = 64;
              }
              else if (v160 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16((const __int16 *)v159);
                int32x4_t v244 = (int32x4_t)v31;
                int32x4_t v246 = (int32x4_t)v31;
                int16x8_t v248 = v31;
                int32x4_t v250 = (int32x4_t)v31;
                uint64_t v161 = 2;
              }
              else
              {
                uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v244, 32, v159, v160, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v244, 32, v159, v160, v85);
              uint64_t v161 = 32;
            }
          }
          else
          {
            uint64_t v161 = 0;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int16x8_t v248 = 0uLL;
            int32x4_t v250 = 0uLL;
          }
          uint64_t v164 = v159 + v161;
          unsigned int v165 = v76[3];
          if (v76[3])
          {
            if (v165 < 0xF0)
            {
              if (v165 == 63)
              {
                int32x4_t v167 = *(int32x4_t *)(v164 + 16);
                int32x4_t v29 = *(int32x4_t *)(v164 + 32);
                int32x4_t v28 = *(int32x4_t *)(v164 + 48);
                int32x4_t v168 = vuzp2q_s32(*(int32x4_t *)v164, v29);
                int32x4_t v252 = vuzp1q_s32(*(int32x4_t *)v164, v29);
                int32x4_t v254 = v168;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v167, v28);
                int32x4_t v30 = vuzp2q_s32(v167, v28);
                int16x8_t v256 = v31;
                int32x4_t v258 = v30;
                uint64_t v166 = 64;
              }
              else if (v165 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16((const __int16 *)v164);
                int32x4_t v252 = (int32x4_t)v31;
                int32x4_t v254 = (int32x4_t)v31;
                int16x8_t v256 = v31;
                int32x4_t v258 = (int32x4_t)v31;
                uint64_t v166 = 2;
              }
              else
              {
                uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v252, 32, v164, v165, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v252, 32, v164, v165, v85);
              uint64_t v166 = 32;
            }
          }
          else
          {
            uint64_t v166 = 0;
            int32x4_t v252 = 0uLL;
            int32x4_t v254 = 0uLL;
            int16x8_t v256 = 0uLL;
            int32x4_t v258 = 0uLL;
          }
          uint64_t v169 = v164 + v166;
          unsigned int v170 = v76[4];
          if (v76[4])
          {
            if (v170 < 0xF0)
            {
              if (v170 == 63)
              {
                int32x4_t v172 = *(int32x4_t *)(v169 + 16);
                int32x4_t v29 = *(int32x4_t *)(v169 + 32);
                int32x4_t v28 = *(int32x4_t *)(v169 + 48);
                int32x4_t v173 = vuzp2q_s32(*(int32x4_t *)v169, v29);
                int32x4_t v259 = vuzp1q_s32(*(int32x4_t *)v169, v29);
                int32x4_t v261 = v173;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v172, v28);
                int32x4_t v30 = vuzp2q_s32(v172, v28);
                int16x8_t v263 = v31;
                int32x4_t v265 = v30;
                uint64_t v171 = 64;
              }
              else if (v170 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16((const __int16 *)v169);
                int32x4_t v259 = (int32x4_t)v31;
                int32x4_t v261 = (int32x4_t)v31;
                int16x8_t v263 = v31;
                int32x4_t v265 = (int32x4_t)v31;
                uint64_t v171 = 2;
              }
              else
              {
                uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v259, 32, v169, v170, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v259, 32, v169, v170, v85);
              uint64_t v171 = 32;
            }
          }
          else
          {
            uint64_t v171 = 0;
            int32x4_t v259 = 0uLL;
            int32x4_t v261 = 0uLL;
            int16x8_t v263 = 0uLL;
            int32x4_t v265 = 0uLL;
          }
          uint64_t v174 = v169 + v171;
          unsigned int v175 = v76[5];
          if (v76[5])
          {
            if (v175 < 0xF0)
            {
              if (v175 == 63)
              {
                int32x4_t v177 = *(int32x4_t *)(v174 + 16);
                int32x4_t v29 = *(int32x4_t *)(v174 + 32);
                int32x4_t v28 = *(int32x4_t *)(v174 + 48);
                int32x4_t v178 = vuzp2q_s32(*(int32x4_t *)v174, v29);
                int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v174, v29);
                int32x4_t v269 = v178;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v177, v28);
                int32x4_t v30 = vuzp2q_s32(v177, v28);
                int16x8_t v271 = v31;
                int32x4_t v273 = v30;
                uint64_t v176 = 64;
              }
              else if (v175 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16((const __int16 *)v174);
                int32x4_t v267 = (int32x4_t)v31;
                int32x4_t v269 = (int32x4_t)v31;
                int16x8_t v271 = v31;
                int32x4_t v273 = (int32x4_t)v31;
                uint64_t v176 = 2;
              }
              else
              {
                uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v267, 32, v174, v175, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v267, 32, v174, v175, v85);
              uint64_t v176 = 32;
            }
          }
          else
          {
            uint64_t v176 = 0;
            int32x4_t v267 = 0uLL;
            int32x4_t v269 = 0uLL;
            int16x8_t v271 = 0uLL;
            int32x4_t v273 = 0uLL;
          }
          uint64_t v179 = v174 + v176;
          unsigned int v180 = v76[6];
          if (v76[6])
          {
            if (v180 < 0xF0)
            {
              if (v180 == 63)
              {
                int32x4_t v183 = *(int32x4_t *)(v179 + 16);
                int32x4_t v29 = *(int32x4_t *)(v179 + 32);
                int32x4_t v28 = *(int32x4_t *)(v179 + 48);
                int32x4_t v184 = vuzp2q_s32(*(int32x4_t *)v179, v29);
                int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v179, v29);
                int32x4_t v262 = v184;
                int16x8_t v31 = (int16x8_t)vuzp1q_s32(v183, v28);
                int32x4_t v30 = vuzp2q_s32(v183, v28);
                int16x8_t v264 = v31;
                int32x4_t v266 = v30;
                uint64_t v181 = 64;
                unsigned int v182 = v76[7];
                if (!v76[7]) {
                  goto LABEL_239;
                }
              }
              else if (v180 == 1)
              {
                int16x8_t v31 = vld1q_dup_s16((const __int16 *)v179);
                int32x4_t v260 = (int32x4_t)v31;
                int32x4_t v262 = (int32x4_t)v31;
                int16x8_t v264 = v31;
                int32x4_t v266 = (int32x4_t)v31;
                uint64_t v181 = 2;
                unsigned int v182 = v76[7];
                if (!v76[7]) {
                  goto LABEL_239;
                }
              }
              else
              {
                uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v260, 32, v179, v180, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                unsigned int v182 = v76[7];
                if (!v76[7])
                {
LABEL_239:
                  int32x4_t v268 = 0uLL;
                  int32x4_t v270 = 0uLL;
                  int16x8_t v272 = 0uLL;
                  int32x4_t v274 = 0uLL;
                  goto LABEL_242;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v260, 32, v179, v180, v85);
              uint64_t v181 = 32;
              unsigned int v182 = v76[7];
              if (!v76[7]) {
                goto LABEL_239;
              }
            }
          }
          else
          {
            uint64_t v181 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v262 = 0uLL;
            int16x8_t v264 = 0uLL;
            int32x4_t v266 = 0uLL;
            unsigned int v182 = v76[7];
            if (!v76[7]) {
              goto LABEL_239;
            }
          }
          uint64_t v185 = v179 + v181;
          if (v182 < 0xF0)
          {
            if (v182 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)(v185 + 16);
              int32x4_t v29 = *(int32x4_t *)(v185 + 32);
              int32x4_t v28 = *(int32x4_t *)(v185 + 48);
              int32x4_t v187 = vuzp2q_s32(*(int32x4_t *)v185, v29);
              int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v185, v29);
              int32x4_t v270 = v187;
              int16x8_t v31 = (int16x8_t)vuzp1q_s32(v186, v28);
              int32x4_t v30 = vuzp2q_s32(v186, v28);
              int16x8_t v272 = v31;
              int32x4_t v274 = v30;
            }
            else if (v182 == 1)
            {
              int16x8_t v31 = vld1q_dup_s16((const __int16 *)v185);
              int32x4_t v268 = (int32x4_t)v31;
              int32x4_t v270 = (int32x4_t)v31;
              int16x8_t v272 = v31;
              int32x4_t v274 = (int32x4_t)v31;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v268, 32, v185, v182, *(double *)v31.i64, *(double *)v30.i64, *(double *)v29.i64, *(int8x8_t *)v28.i8);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v268, 32, v185, v182, v85);
          }
LABEL_242:
          unsigned int v40 = v34 + 1;
          unint64_t v188 = v238;
          uint64_t v25 = v230;
          if (v238)
          {
            unint64_t v189 = 0;
            v190 = &v243.i8[32 * v236 + 2 * v237];
            unsigned int v191 = v239;
            do
            {
              if (v191)
              {
                uint64_t v192 = 0;
                unsigned int v193 = &v234->i8[v235 * v189];
                do
                {
                  v193[v192] = v190[v192];
                  ++v192;
                  unsigned int v191 = v239;
                }
                while (2 * (unint64_t)v239 > v192);
                unint64_t v188 = v238;
              }
              ++v189;
              v190 += 32;
            }
            while (v189 < v188);
          }
LABEL_29:
          BOOL v20 = v34 == v218 >> 4;
          unsigned int v34 = v40;
        }
        while (!v20);
        BOOL v20 = v16++ == v209;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v152[28] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v130 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v112 = a8 + a10 - 1;
  unsigned int v114 = v112 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v133 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v124 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v123 = isLevelTiled;
  if (v17 <= v114)
  {
    unsigned int v122 = a7 + a9 - 1;
    unsigned int v111 = a7 >> 4;
    if (a7 >> 4 <= v122 >> 4)
    {
      unsigned int v108 = a5 - 1;
      unsigned int v110 = (a6 - 1) >> 4;
      int v131 = ((a5 - 1) & 0xF) + 1;
      unsigned int v132 = (a5 - 1) >> 4;
      int v109 = ((a6 - 1) & 0xF) + 1;
      uint64_t v115 = 8 * a11;
      uint64_t v116 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v121 = v28.i32[0] | v28.i32[1];
      BOOL v119 = v28.i32[1] != 0;
      int8x8_t v120 = v28;
      BOOL v118 = v28.i32[0] != 0;
      unint64_t v107 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v29 = (16 * v17) | 0xF;
        if (16 * v17 <= v130) {
          int v30 = v130;
        }
        else {
          int v30 = 16 * v17;
        }
        unsigned int v31 = v111;
        if (v112 < v29) {
          unsigned int v29 = v112;
        }
        int v117 = v30 - 16 * v17;
        int v128 = v29 - v30 + 1;
        unsigned int v129 = 16 * v17;
        int v32 = v109;
        if (v17 != v110) {
          int v32 = 16;
        }
        unsigned int v134 = v32;
        uint64_t v127 = a2 + (v30 - v130) * a11;
        do
        {
          unsigned int v33 = 16 * v31;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v31;
          }
          if (v122 < v34) {
            unsigned int v34 = v122;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v132) {
            unsigned int v37 = v131;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v129 >= v130 && v33 >= a7)
          {
            int v39 = v131;
            if (v31 != v132) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v128 != v134;
          }
          if (v123)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v107 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v98 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v99 = 0;
              if (v65) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v100 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v100 | v99) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v102 = 0;
            }
            else
            {
              unsigned int v99 = 32 - __clz(~(-1 << -(char)__clz(v98)));
              if ((v65 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v100 = 0;
              if (!v99) {
                goto LABEL_131;
              }
LABEL_120:
              int v101 = 0;
              uint64_t v102 = 0;
              int v103 = v31 & v98;
              BOOL v104 = v99 != 0;
              BOOL v105 = v100 != 0;
              int v106 = 1;
              do
              {
                --v99;
                if (v104) {
                  v102 |= (unint64_t)(v106 & v103) << v101++;
                }
                else {
                  unsigned int v99 = 0;
                }
                --v100;
                if (v105) {
                  v102 |= (unint64_t)(v106 & v17 & ((v66 >> 4) - 1)) << v101++;
                }
                else {
                  unsigned int v100 = 0;
                }
                v106 *= 2;
                --v101;
                BOOL v105 = v100 != 0;
                BOOL v104 = v99 != 0;
              }
              while (v100 | v99);
            }
            unint64_t v48 = ((unint64_t)(v33 / v62 + v129 / v66 * ((v62 + v108) / v62)) << 14) + (v102 << 9);
            goto LABEL_60;
          }
          if (v121)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v118;
            BOOL v45 = v119;
            __int32 v47 = v120.i32[0];
            __int32 v46 = v120.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v31) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_86:
              unint64_t v56 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_86;
            }
          }
          int v55 = 0;
          unint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            BOOL v60 = !v57;
            if (v57)
            {
              unint64_t v61 = ((unint64_t)(v59 & v31) << v55) | v56;
            }
            else
            {
              unsigned int v51 = 0;
              unint64_t v61 = v56;
            }
            if (!v60) {
              ++v55;
            }
            --v54;
            if (v58)
            {
              unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
            }
            else
            {
              unsigned int v54 = 0;
              unint64_t v56 = v61;
            }
            if (v58) {
              ++v55;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_87:
          int v67 = (int64x2_t *)(a3 + v48);
          if (v124)
          {
            int v68 = v36;
            unsigned int v69 = v37;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            unsigned int v37 = v69;
            int v36 = v68;
            uint64_t v26 = v133;
            int v67 = (int64x2_t *)__dst;
          }
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v71 = a7;
          uint64_t v72 = v127 + 4 * (v35 - a7);
          char v73 = v37 < 0x10 || v38;
          if ((v73 & 1) == 0 && v134 > 0xF)
          {
            int v74 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
            uint64_t v75 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72, a11, v67, *v70, v74));
            int v76 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v116, a11, v75, v70[1], v74));
            unsigned int v77 = (int64x2_t *)((char *)v76
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 32, a11, v76, v70[2], v74));
            char v78 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v116 + 32, a11, v77, v70[3], v74));
            uint64_t v79 = v72 + v115;
            int v80 = (int64x2_t *)((char *)v78
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115, a11, v78, v70[4], v74));
            uint64_t v81 = v72 + 12 * a11;
            uint64_t v82 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81, a11, v80, v70[5], v74));
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v79 + 32, a11, v82, v70[6], v74);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81 + 32, a11, (int64x2_t *)((char *)v82 + v83), v70[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          block[5] = v67;
          char v142 = v37;
          char v143 = v134;
          unsigned int v138 = v117;
          unsigned int v139 = v35 - v33;
          block[6] = v70;
          uint64_t v136 = v72;
          uint64_t v137 = a11;
          unsigned int v140 = v128;
          unsigned int v141 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_27:
            a7 = v71;
            goto LABEL_28;
          }
          int v84 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
          int v85 = (int64x2_t *)((char *)v67
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v145, 64, v67, *v70, v84));
          unsigned int v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v147, 64, v85, v70[1], v84));
          uint64_t v87 = (int64x2_t *)((char *)v86
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v146, 64, v86, v70[2], v84));
          v88 = (int64x2_t *)((char *)v87
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v148, 64, v87, v70[3], v84));
          v89 = (int64x2_t *)((char *)v88
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v149, 64, v88, v70[4], v84));
          v90 = (int64x2_t *)((char *)v89
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v151, 64, v89, v70[5], v84));
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v150, 64, v90, v70[6], v84);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v152, 64, (int64x2_t *)((char *)v90 + v91), v70[7], v84);
          unint64_t v92 = v140;
          a7 = v71;
          if (v140)
          {
            unint64_t v93 = 0;
            int64x2_t v94 = &v145[64 * (unint64_t)v138 + 4 * v139];
            unsigned int v95 = v141;
            do
            {
              if (v95)
              {
                uint64_t v96 = 0;
                uint64_t v97 = v136 + v137 * v93;
                do
                {
                  *(unsigned char *)(v97 + v96) = v94[v96];
                  ++v96;
                  unsigned int v95 = v141;
                }
                while (4 * (unint64_t)v141 > v96);
                unint64_t v92 = v140;
              }
              ++v93;
              v94 += 64;
            }
            while (v93 < v92);
          }
LABEL_28:
          BOOL v21 = v31++ == v122 >> 4;
          uint64_t v26 = v133;
        }
        while (!v21);
        BOOL v21 = v17++ == v114;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v462 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a1;
  unsigned int v381 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v362 = a8 + a10 - 1;
  unsigned int v364 = v362 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  uint64_t v385 = v16;
  if (*(void *)(v16 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v16 = v385;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v375 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  uint64_t v28 = v385;
  BOOL v374 = isLevelTiled;
  if (v17 <= v364)
  {
    unsigned int v373 = a7 + a9 - 1;
    if (a7 >> 4 <= v373 >> 4)
    {
      uint64_t v29 = a11;
      unsigned int v359 = a5 - 1;
      unsigned int v384 = (a5 - 1) >> 4;
      int v383 = ((a5 - 1) & 0xF) + 1;
      int v360 = ((a6 - 1) & 0xF) + 1;
      unsigned int v361 = (a6 - 1) >> 4;
      uint64_t v366 = 8 * a11;
      uint64_t v367 = 4 * a11;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v31.i64[1] = -1;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 4uLL)))))));
      *(int8x8_t *)v27.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v30));
      __int32 v372 = v27.i32[0] | v27.i32[1];
      BOOL v370 = v27.i32[1] != 0;
      uint64_t v371 = v27.i64[0];
      BOOL v369 = v27.i32[0] != 0;
      unint64_t v358 = 8 * v19 * (unint64_t)v18;
      uint64_t v387 = 3 * a11;
      uint64_t v365 = 2 * a11;
      do
      {
        unsigned int v32 = (16 * v17) | 0xF;
        if (16 * v17 <= v381) {
          int v33 = v381;
        }
        else {
          int v33 = 16 * v17;
        }
        unsigned int v34 = a7 >> 4;
        if (v362 < v32) {
          unsigned int v32 = v362;
        }
        unsigned int v380 = 16 * v17;
        int v368 = v33 - 16 * v17;
        int v379 = v32 - v33 + 1;
        int v35 = v360;
        if (v17 != v361) {
          int v35 = 16;
        }
        unsigned int v386 = v35;
        uint64_t v378 = a2 + (v33 - v381) * v29;
        unsigned int v36 = a7;
        do
        {
          unsigned int v38 = 16 * v34;
          unsigned int v39 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= v36) {
            int v40 = v36;
          }
          else {
            int v40 = 16 * v34;
          }
          if (v373 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v34 == v384) {
            unsigned int v42 = v383;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (v380 >= v381 && v38 >= v36)
          {
            int v44 = v383;
            if (v34 != v384) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v379 != v386;
          }
          if (v374)
          {
            unsigned int v67 = 0;
            uint64_t v68 = v358 >> (*(unsigned char *)(v28 + 57) != 0);
            char v69 = 1;
            if (v68 > 127)
            {
              if (v68 > 511)
              {
                if (v68 == 512)
                {
                  unsigned int v67 = 16;
                  char v70 = 1;
                  unsigned int v71 = 16;
                }
                else
                {
                  char v70 = 1;
                  unsigned int v71 = 0;
                  if (v68 == 1024)
                  {
                    unsigned int v71 = 8;
                    unsigned int v67 = 16;
                  }
                }
              }
              else if (v68 == 128)
              {
                char v69 = 0;
                char v70 = 0;
                unsigned int v67 = 32;
                unsigned int v71 = 32;
              }
              else
              {
                char v70 = 1;
                unsigned int v71 = 0;
                if (v68 == 256)
                {
                  char v69 = 0;
                  unsigned int v71 = 16;
                  unsigned int v67 = 32;
                }
              }
            }
            else
            {
              char v70 = 1;
              unsigned int v71 = 0;
              switch(v68)
              {
                case 4:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 128;
                  unsigned int v67 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 128;
                  unsigned int v71 = 128;
                  break;
                case 16:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 64;
                  unsigned int v67 = 128;
                  break;
                case 32:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 64;
                  unsigned int v71 = 64;
                  break;
                default:
                  if (v68 == 64)
                  {
                    char v69 = 0;
                    char v70 = 0;
                    unsigned int v71 = 32;
                    unsigned int v67 = 64;
                  }
                  break;
              }
            }
            unsigned int v349 = (v67 >> 4) - 1;
            if (v69)
            {
              unsigned int v350 = 0;
              if (v70) {
                goto LABEL_277;
              }
LABEL_266:
              unsigned int v351 = 32 - __clz(~(-1 << -(char)__clz(((v71 + 15) >> 4) - 1)));
              if (v351 | v350) {
                goto LABEL_267;
              }
LABEL_278:
              uint64_t v353 = 0;
            }
            else
            {
              unsigned int v350 = 32 - __clz(~(-1 << -(char)__clz(v349)));
              if ((v70 & 1) == 0) {
                goto LABEL_266;
              }
LABEL_277:
              unsigned int v351 = 0;
              if (!v350) {
                goto LABEL_278;
              }
LABEL_267:
              int v352 = 0;
              uint64_t v353 = 0;
              int v354 = v34 & v349;
              BOOL v355 = v350 != 0;
              BOOL v356 = v351 != 0;
              int v357 = 1;
              do
              {
                --v350;
                if (v355) {
                  v353 |= (unint64_t)(v357 & v354) << v352++;
                }
                else {
                  unsigned int v350 = 0;
                }
                --v351;
                if (v356) {
                  v353 |= (unint64_t)(v357 & v17 & ((v71 >> 4) - 1)) << v352++;
                }
                else {
                  unsigned int v351 = 0;
                }
                v357 *= 2;
                --v352;
                BOOL v356 = v351 != 0;
                BOOL v355 = v350 != 0;
              }
              while (v351 | v350);
            }
            unint64_t v53 = ((unint64_t)(v38 / v67 + v380 / v71 * ((v67 + v359) / v67)) << 14) + (v353 << 9);
            goto LABEL_61;
          }
          if (v372)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v370;
            BOOL v50 = v369;
            int v51 = HIDWORD(v371);
            int v52 = v371;
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v34) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v17) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 9;
LABEL_61:
          unsigned int v54 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_87:
              unint64_t v61 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_87;
            }
          }
          int v60 = 0;
          unint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            BOOL v65 = !v62;
            if (v62)
            {
              unint64_t v66 = ((unint64_t)(v64 & v34) << v60) | v61;
            }
            else
            {
              unsigned int v56 = 0;
              unint64_t v66 = v61;
            }
            if (!v65) {
              ++v60;
            }
            --v59;
            if (v63)
            {
              unint64_t v61 = ((unint64_t)(v64 & v17) << v60) | v66;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v61 = v66;
            }
            if (v63) {
              ++v60;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_88:
          uint64_t v72 = (int64x2_t *)(a3 + v53);
          if (v375)
          {
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v28 = v385;
            uint64_t v72 = (int64x2_t *)__dst;
          }
          char v73 = (unsigned __int8 *)(a4 + 8 * v61);
          uint64_t v74 = v378 + 4 * (v40 - v36);
          char v75 = v42 < 0x10 || v43;
          if ((v75 & 1) == 0 && v386 > 0xF)
          {
            uint64_t v76 = *(void *)(v28 + 208);
            int v77 = *(_DWORD *)(v76 + 52);
            unsigned int v78 = *v73;
            if (*v73)
            {
              uint64_t v29 = a11;
              uint64_t v79 = 2 * a11;
              if (v78 < 0xF0)
              {
                if (v78 == 127)
                {
                  int64x2_t v93 = *v72;
                  int64x2_t v94 = v72[1];
                  int64x2_t v95 = v72[2];
                  int64x2_t v96 = v72[3];
                  int64x2_t v97 = v72[4];
                  int64x2_t v98 = v72[5];
                  int64x2_t v99 = v72[6];
                  int64x2_t v100 = v72[7];
                  *(int64x2_t *)uint64_t v74 = vzip1q_s64(*v72, v94);
                  *(int64x2_t *)(v74 + 16) = vzip1q_s64(v97, v98);
                  int v101 = (int64x2_t *)(v74 + v365);
                  uint64_t v102 = (int64x2_t *)(v74 + a11);
                  int64x2_t *v102 = vzip2q_s64(v93, v94);
                  v102[1] = vzip2q_s64(v97, v98);
                  int64x2_t *v101 = vzip1q_s64(v95, v96);
                  v101[1] = vzip1q_s64(v99, v100);
                  int v103 = (int32x4_t *)(v74 + v365 + a11);
                  int32x4_t v80 = (int32x4_t)vzip2q_s64(v95, v96);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v99, v100);
                  *int v103 = v80;
                  v103[1] = v31;
                  uint64_t v81 = 128;
                }
                else if (v78 == 3)
                {
                  int32x4_t v80 = (int32x4_t)vld1q_dup_f32((const float *)v72->i32);
                  *(int32x4_t *)uint64_t v74 = v80;
                  *(int32x4_t *)(v74 + 16) = v80;
                  v90 = (int32x4_t *)(v74 + a11);
                  int32x4_t *v90 = v80;
                  v90[1] = v80;
                  uint64_t v91 = (int32x4_t *)(v74 + v365);
                  *uint64_t v91 = v80;
                  v91[1] = v80;
                  unint64_t v92 = (int32x4_t *)(v74 + v387);
                  *unint64_t v92 = v80;
                  v92[1] = v80;
                  uint64_t v81 = 4;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)v74, a11, (uint64_t)v72, v78, v27, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)v74, a11, (uint64_t)v72, v78, *(_DWORD *)(v76 + 52));
                uint64_t v81 = 64;
              }
            }
            else
            {
              uint64_t v81 = 0;
              int32x4_t v80 = 0uLL;
              *(_OWORD *)uint64_t v74 = 0u;
              *(_OWORD *)(v74 + 16) = 0u;
              uint64_t v29 = a11;
              uint64_t v87 = (_OWORD *)(v74 + a11);
              *uint64_t v87 = 0u;
              v87[1] = 0u;
              uint64_t v79 = 2 * a11;
              v88 = (_OWORD *)(v74 + v365);
              _OWORD *v88 = 0u;
              v88[1] = 0u;
              v89 = (_OWORD *)(v74 + v387);
              _OWORD *v89 = 0u;
              v89[1] = 0u;
            }
            uint64_t v104 = (uint64_t)v72->i64 + v81;
            BOOL v105 = (int64x2_t *)(v74 + v367);
            unsigned int v106 = v73[1];
            if (v73[1])
            {
              if (v106 < 0xF0)
              {
                if (v106 == 127)
                {
                  int64x2_t v115 = *(int64x2_t *)v104;
                  int64x2_t v116 = *(int64x2_t *)(v104 + 16);
                  int64x2_t v117 = *(int64x2_t *)(v104 + 32);
                  int64x2_t v118 = *(int64x2_t *)(v104 + 48);
                  int64x2_t v119 = *(int64x2_t *)(v104 + 64);
                  int64x2_t v120 = *(int64x2_t *)(v104 + 80);
                  int64x2_t v121 = *(int64x2_t *)(v104 + 96);
                  int64x2_t v122 = *(int64x2_t *)(v104 + 112);
                  *BOOL v105 = vzip1q_s64(*(int64x2_t *)v104, v116);
                  v105[1] = vzip1q_s64(v119, v120);
                  BOOL v123 = (int64x2_t *)((char *)v105 + v79);
                  int v124 = (int64x2_t *)((char *)v105 + v29);
                  int64x2_t *v124 = vzip2q_s64(v115, v116);
                  v124[1] = vzip2q_s64(v119, v120);
                  int64x2_t *v123 = vzip1q_s64(v117, v118);
                  v123[1] = vzip1q_s64(v121, v122);
                  unint64_t v125 = (int32x4_t *)&v105->i8[v79 + v29];
                  int32x4_t v107 = (int32x4_t)vzip2q_s64(v117, v118);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v121, v122);
                  *unint64_t v125 = v107;
                  v125[1] = v31;
                  uint64_t v108 = 128;
                }
                else if (v106 == 3)
                {
                  int32x4_t v107 = (int32x4_t)vld1q_dup_f32((const float *)v104);
                  *BOOL v105 = (int64x2_t)v107;
                  v105[1] = (int64x2_t)v107;
                  unsigned int v112 = (int32x4_t *)&v105->i8[v29];
                  int32x4_t *v112 = v107;
                  v112[1] = v107;
                  unsigned int v113 = (int32x4_t *)&v105->i8[v79];
                  int32x4_t *v113 = v107;
                  v113[1] = v107;
                  unsigned int v114 = (int32x4_t *)&v105->i8[v387];
                  *unsigned int v114 = v107;
                  v114[1] = v107;
                  uint64_t v108 = 4;
                }
                else
                {
                  uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)(v74 + v367), v29, v104, v106, v80, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)(v74 + v367), v29, v104, v106, v77);
                uint64_t v108 = 64;
              }
            }
            else
            {
              uint64_t v108 = 0;
              int32x4_t v107 = 0uLL;
              *BOOL v105 = 0u;
              v105[1] = 0u;
              int v109 = &v105->i8[v29];
              *(_OWORD *)int v109 = 0u;
              *((_OWORD *)v109 + 1) = 0u;
              unsigned int v110 = &v105->i8[v79];
              *(_OWORD *)unsigned int v110 = 0u;
              *((_OWORD *)v110 + 1) = 0u;
              unsigned int v111 = &v105->i8[v387];
              *(_OWORD *)unsigned int v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
            }
            uint64_t v126 = v104 + v108;
            uint64_t v127 = (int *)(v74 + 32);
            unsigned int v128 = v73[2];
            if (v73[2])
            {
              if (v128 < 0xF0)
              {
                if (v128 == 127)
                {
                  int64x2_t v137 = *(int64x2_t *)v126;
                  int64x2_t v138 = *(int64x2_t *)(v126 + 16);
                  int64x2_t v139 = *(int64x2_t *)(v126 + 32);
                  int64x2_t v140 = *(int64x2_t *)(v126 + 48);
                  int64x2_t v141 = *(int64x2_t *)(v126 + 64);
                  int64x2_t v142 = *(int64x2_t *)(v126 + 80);
                  int64x2_t v143 = *(int64x2_t *)(v126 + 96);
                  int64x2_t v144 = *(int64x2_t *)(v126 + 112);
                  *(int64x2_t *)uint64_t v127 = vzip1q_s64(*(int64x2_t *)v126, v138);
                  *(int64x2_t *)(v74 + 48) = vzip1q_s64(v141, v142);
                  int32x4_t v145 = (int64x2_t *)((char *)v127 + v79);
                  uint64_t v146 = (int64x2_t *)((char *)v127 + v29);
                  int64x2_t *v146 = vzip2q_s64(v137, v138);
                  v146[1] = vzip2q_s64(v141, v142);
                  int64x2_t *v145 = vzip1q_s64(v139, v140);
                  v145[1] = vzip1q_s64(v143, v144);
                  uint64_t v147 = (int32x4_t *)((char *)v127 + v79 + v29);
                  int32x4_t v129 = (int32x4_t)vzip2q_s64(v139, v140);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v143, v144);
                  *uint64_t v147 = v129;
                  v147[1] = v31;
                  uint64_t v130 = 128;
                }
                else if (v128 == 3)
                {
                  int32x4_t v129 = (int32x4_t)vld1q_dup_f32((const float *)v126);
                  *(int32x4_t *)(v74 + 32) = v129;
                  *(int32x4_t *)(v74 + 48) = v129;
                  unsigned int v134 = (int32x4_t *)((char *)v127 + v29);
                  int32x4_t *v134 = v129;
                  v134[1] = v129;
                  v135 = (int32x4_t *)((char *)v127 + v79);
                  int32x4_t *v135 = v129;
                  v135[1] = v129;
                  uint64_t v136 = (int32x4_t *)((char *)v127 + v387);
                  *uint64_t v136 = v129;
                  v136[1] = v129;
                  uint64_t v130 = 4;
                }
                else
                {
                  uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v127, v29, v126, v128, v107, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v127, v29, v126, v128, v77);
                uint64_t v130 = 64;
              }
            }
            else
            {
              uint64_t v130 = 0;
              int32x4_t v129 = 0uLL;
              *(_OWORD *)uint64_t v127 = 0u;
              *(_OWORD *)(v74 + 48) = 0u;
              int v131 = (_OWORD *)((char *)v127 + v29);
              _OWORD *v131 = 0u;
              v131[1] = 0u;
              unsigned int v132 = (_OWORD *)((char *)v127 + v79);
              *unsigned int v132 = 0u;
              v132[1] = 0u;
              uint64_t v133 = (_OWORD *)((char *)v127 + v387);
              _OWORD *v133 = 0u;
              v133[1] = 0u;
            }
            uint64_t v148 = v126 + v130;
            i32 = v105[2].i32;
            unsigned int v150 = v73[3];
            if (v73[3])
            {
              if (v150 < 0xF0)
              {
                if (v150 == 127)
                {
                  int64x2_t v159 = *(int64x2_t *)v148;
                  int64x2_t v160 = *(int64x2_t *)(v148 + 16);
                  int64x2_t v161 = *(int64x2_t *)(v148 + 32);
                  int64x2_t v162 = *(int64x2_t *)(v148 + 48);
                  int64x2_t v163 = *(int64x2_t *)(v148 + 64);
                  int64x2_t v164 = *(int64x2_t *)(v148 + 80);
                  int64x2_t v165 = *(int64x2_t *)(v148 + 96);
                  int64x2_t v166 = *(int64x2_t *)(v148 + 112);
                  *(int64x2_t *)i32 = vzip1q_s64(*(int64x2_t *)v148, v160);
                  v105[3] = vzip1q_s64(v163, v164);
                  int32x4_t v167 = (int64x2_t *)((char *)i32 + v79);
                  int32x4_t v168 = (int64x2_t *)((char *)i32 + v29);
                  int64x2_t *v168 = vzip2q_s64(v159, v160);
                  v168[1] = vzip2q_s64(v163, v164);
                  int64x2_t *v167 = vzip1q_s64(v161, v162);
                  v167[1] = vzip1q_s64(v165, v166);
                  uint64_t v169 = (int32x4_t *)((char *)i32 + v79 + v29);
                  int32x4_t v151 = (int32x4_t)vzip2q_s64(v161, v162);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v165, v166);
                  *uint64_t v169 = v151;
                  v169[1] = v31;
                  uint64_t v152 = 128;
                }
                else if (v150 == 3)
                {
                  int32x4_t v151 = (int32x4_t)vld1q_dup_f32((const float *)v148);
                  v105[2] = (int64x2_t)v151;
                  v105[3] = (int64x2_t)v151;
                  uint64_t v156 = (int32x4_t *)((char *)i32 + v29);
                  int32x4_t *v156 = v151;
                  v156[1] = v151;
                  int32x4_t v157 = (int32x4_t *)((char *)i32 + v79);
                  int32x4_t *v157 = v151;
                  v157[1] = v151;
                  int32x4_t v158 = (int32x4_t *)((char *)i32 + v387);
                  *int32x4_t v158 = v151;
                  v158[1] = v151;
                  uint64_t v152 = 4;
                }
                else
                {
                  uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(i32, v29, v148, v150, v129, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(i32, v29, v148, v150, v77);
                uint64_t v152 = 64;
              }
            }
            else
            {
              uint64_t v152 = 0;
              int32x4_t v151 = 0uLL;
              *(_OWORD *)i32 = 0u;
              v105[3] = 0u;
              int32x4_t v153 = (_OWORD *)((char *)i32 + v29);
              _OWORD *v153 = 0u;
              v153[1] = 0u;
              uint64_t v154 = (_OWORD *)((char *)i32 + v79);
              *uint64_t v154 = 0u;
              v154[1] = 0u;
              unsigned int v155 = (_OWORD *)((char *)i32 + v387);
              _OWORD *v155 = 0u;
              v155[1] = 0u;
            }
            uint64_t v170 = v148 + v152;
            uint64_t v171 = (int64x2_t *)(v74 + v366);
            unsigned int v172 = v73[4];
            if (v73[4])
            {
              if (v172 < 0xF0)
              {
                if (v172 == 127)
                {
                  int64x2_t v181 = *(int64x2_t *)v170;
                  int64x2_t v182 = *(int64x2_t *)(v170 + 16);
                  int64x2_t v183 = *(int64x2_t *)(v170 + 32);
                  int64x2_t v184 = *(int64x2_t *)(v170 + 48);
                  int64x2_t v185 = *(int64x2_t *)(v170 + 64);
                  int64x2_t v186 = *(int64x2_t *)(v170 + 80);
                  int64x2_t v187 = *(int64x2_t *)(v170 + 96);
                  int64x2_t v188 = *(int64x2_t *)(v170 + 112);
                  *uint64_t v171 = vzip1q_s64(*(int64x2_t *)v170, v182);
                  v171[1] = vzip1q_s64(v185, v186);
                  unint64_t v189 = (int64x2_t *)((char *)v171 + v79);
                  v190 = (int64x2_t *)((char *)v171 + v29);
                  int64x2_t *v190 = vzip2q_s64(v181, v182);
                  v190[1] = vzip2q_s64(v185, v186);
                  int64x2_t *v189 = vzip1q_s64(v183, v184);
                  v189[1] = vzip1q_s64(v187, v188);
                  unsigned int v191 = (int32x4_t *)&v171->i8[v79 + v29];
                  int32x4_t v173 = (int32x4_t)vzip2q_s64(v183, v184);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v187, v188);
                  *unsigned int v191 = v173;
                  v191[1] = v31;
                  uint64_t v174 = 128;
                }
                else if (v172 == 3)
                {
                  int32x4_t v173 = (int32x4_t)vld1q_dup_f32((const float *)v170);
                  *uint64_t v171 = (int64x2_t)v173;
                  v171[1] = (int64x2_t)v173;
                  int32x4_t v178 = (int32x4_t *)&v171->i8[v29];
                  int32x4_t *v178 = v173;
                  v178[1] = v173;
                  uint64_t v179 = (int32x4_t *)&v171->i8[v79];
                  int32x4_t *v179 = v173;
                  v179[1] = v173;
                  unsigned int v180 = (int32x4_t *)&v171->i8[v387];
                  *unsigned int v180 = v173;
                  v180[1] = v173;
                  uint64_t v174 = 4;
                }
                else
                {
                  uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)(v74 + v366), v29, v170, v172, v151, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)(v74 + v366), v29, v170, v172, v77);
                uint64_t v174 = 64;
              }
            }
            else
            {
              uint64_t v174 = 0;
              int32x4_t v173 = 0uLL;
              *uint64_t v171 = 0u;
              v171[1] = 0u;
              unsigned int v175 = &v171->i8[v29];
              *(_OWORD *)unsigned int v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              uint64_t v176 = &v171->i8[v79];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              int32x4_t v177 = &v171->i8[v387];
              *(_OWORD *)int32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
            }
            uint64_t v192 = v170 + v174;
            uint64_t v193 = v74 + 12 * a11;
            unsigned int v194 = v73[5];
            if (v73[5])
            {
              if (v194 < 0xF0)
              {
                if (v194 == 127)
                {
                  int64x2_t v203 = *(int64x2_t *)v192;
                  int64x2_t v204 = *(int64x2_t *)(v192 + 16);
                  int64x2_t v205 = *(int64x2_t *)(v192 + 32);
                  int64x2_t v206 = *(int64x2_t *)(v192 + 48);
                  int64x2_t v207 = *(int64x2_t *)(v192 + 64);
                  int64x2_t v208 = *(int64x2_t *)(v192 + 80);
                  int64x2_t v209 = *(int64x2_t *)(v192 + 96);
                  int64x2_t v210 = *(int64x2_t *)(v192 + 112);
                  *(int64x2_t *)uint64_t v193 = vzip1q_s64(*(int64x2_t *)v192, v204);
                  *(int64x2_t *)(v193 + 16) = vzip1q_s64(v207, v208);
                  uint64_t v211 = (int64x2_t *)(v193 + v79);
                  uint64_t v212 = (int64x2_t *)(v193 + v29);
                  int64x2_t *v212 = vzip2q_s64(v203, v204);
                  v212[1] = vzip2q_s64(v207, v208);
                  int64x2_t *v211 = vzip1q_s64(v205, v206);
                  v211[1] = vzip1q_s64(v209, v210);
                  int v213 = (int32x4_t *)(v193 + v79 + v29);
                  int32x4_t v195 = (int32x4_t)vzip2q_s64(v205, v206);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v209, v210);
                  *int v213 = v195;
                  v213[1] = v31;
                  uint64_t v196 = 128;
                }
                else if (v194 == 3)
                {
                  int32x4_t v195 = (int32x4_t)vld1q_dup_f32((const float *)v192);
                  *(int32x4_t *)uint64_t v193 = v195;
                  *(int32x4_t *)(v193 + 16) = v195;
                  BOOL v200 = (int32x4_t *)(v193 + v29);
                  int32x4_t *v200 = v195;
                  v200[1] = v195;
                  BOOL v201 = (int32x4_t *)(v193 + v79);
                  int32x4_t *v201 = v195;
                  v201[1] = v195;
                  int v202 = (int32x4_t *)(v193 + v387);
                  *int v202 = v195;
                  v202[1] = v195;
                  uint64_t v196 = 4;
                }
                else
                {
                  uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((_OWORD *)v193, v29, v192, v194, v173, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)v193, v29, v192, v194, v77);
                uint64_t v196 = 64;
              }
            }
            else
            {
              uint64_t v196 = 0;
              int32x4_t v195 = 0uLL;
              *(_OWORD *)uint64_t v193 = 0u;
              *(_OWORD *)(v193 + 16) = 0u;
              int v197 = (_OWORD *)(v193 + v29);
              _OWORD *v197 = 0u;
              v197[1] = 0u;
              uint64_t v198 = (_OWORD *)(v193 + v79);
              *uint64_t v198 = 0u;
              v198[1] = 0u;
              int v199 = (_OWORD *)(v193 + v387);
              _OWORD *v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v214 = v192 + v196;
            BOOL v215 = v171[2].i32;
            unsigned int v216 = v73[6];
            if (v73[6])
            {
              if (v216 < 0xF0)
              {
                if (v216 == 127)
                {
                  int64x2_t v225 = *(int64x2_t *)v214;
                  int64x2_t v226 = *(int64x2_t *)(v214 + 16);
                  int64x2_t v227 = *(int64x2_t *)(v214 + 32);
                  int64x2_t v228 = *(int64x2_t *)(v214 + 48);
                  int64x2_t v229 = *(int64x2_t *)(v214 + 64);
                  int64x2_t v230 = *(int64x2_t *)(v214 + 80);
                  int64x2_t v231 = *(int64x2_t *)(v214 + 96);
                  int64x2_t v232 = *(int64x2_t *)(v214 + 112);
                  *(int64x2_t *)BOOL v215 = vzip1q_s64(*(int64x2_t *)v214, v226);
                  v171[3] = vzip1q_s64(v229, v230);
                  v233 = (int64x2_t *)((char *)v215 + v79);
                  v234 = (int64x2_t *)((char *)v215 + v29);
                  int64x2_t *v234 = vzip2q_s64(v225, v226);
                  v234[1] = vzip2q_s64(v229, v230);
                  int64x2_t *v233 = vzip1q_s64(v227, v228);
                  v233[1] = vzip1q_s64(v231, v232);
                  uint64_t v235 = (int32x4_t *)((char *)v215 + v79 + v29);
                  int32x4_t v217 = (int32x4_t)vzip2q_s64(v227, v228);
                  int32x4_t v31 = (int32x4_t)vzip2q_s64(v231, v232);
                  int32x4_t *v235 = v217;
                  v235[1] = v31;
                  uint64_t v218 = 128;
                }
                else if (v216 == 3)
                {
                  int32x4_t v217 = (int32x4_t)vld1q_dup_f32((const float *)v214);
                  v171[2] = (int64x2_t)v217;
                  v171[3] = (int64x2_t)v217;
                  v222 = (int32x4_t *)((char *)v215 + v29);
                  int32x4_t *v222 = v217;
                  v222[1] = v217;
                  uint64_t v223 = (int32x4_t *)((char *)v215 + v79);
                  int32x4_t *v223 = v217;
                  v223[1] = v217;
                  int v224 = (int32x4_t *)((char *)v215 + v387);
                  *int v224 = v217;
                  v224[1] = v217;
                  uint64_t v218 = 4;
                }
                else
                {
                  uint64_t v218 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v215, v29, v214, v216, v195, v31);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v215, v29, v214, v216, v77);
                uint64_t v218 = 64;
              }
            }
            else
            {
              uint64_t v218 = 0;
              int32x4_t v217 = 0uLL;
              *(_OWORD *)BOOL v215 = 0u;
              v171[3] = 0u;
              BOOL v219 = (_OWORD *)((char *)v215 + v29);
              _OWORD *v219 = 0u;
              v219[1] = 0u;
              int v220 = (_OWORD *)((char *)v215 + v79);
              *int v220 = 0u;
              v220[1] = 0u;
              v221 = (_OWORD *)((char *)v215 + v387);
              _OWORD *v221 = 0u;
              v221[1] = 0u;
            }
            int v236 = (int *)(v193 + 32);
            unsigned int v237 = v73[7];
            if (v73[7])
            {
              uint64_t v238 = v214 + v218;
              if (v237 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v236, v29, v238, v237, v77);
              }
              else if (v237 == 127)
              {
                int64x2_t v242 = *(int64x2_t *)v238;
                int64x2_t v243 = *(int64x2_t *)(v238 + 16);
                int64x2_t v244 = *(int64x2_t *)(v238 + 32);
                int64x2_t v245 = *(int64x2_t *)(v238 + 48);
                int64x2_t v246 = *(int64x2_t *)(v238 + 64);
                int64x2_t v247 = *(int64x2_t *)(v238 + 80);
                int64x2_t v248 = *(int64x2_t *)(v238 + 96);
                int64x2_t v249 = *(int64x2_t *)(v238 + 112);
                *(int64x2_t *)int v236 = vzip1q_s64(*(int64x2_t *)v238, v243);
                *(int64x2_t *)(v193 + 48) = vzip1q_s64(v246, v247);
                int32x4_t v250 = (int64x2_t *)((char *)v236 + v79);
                int32x4_t v251 = (int64x2_t *)((char *)v236 + v29);
                int64x2_t *v251 = vzip2q_s64(v242, v243);
                v251[1] = vzip2q_s64(v246, v247);
                int64x2_t *v250 = vzip1q_s64(v244, v245);
                v250[1] = vzip1q_s64(v248, v249);
                int32x4_t v252 = (int32x4_t *)((char *)v236 + v79 + v29);
                int32x4_t v27 = (int32x4_t)vzip2q_s64(v244, v245);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v248, v249);
                int32x4_t *v252 = v27;
                v252[1] = v31;
              }
              else
              {
                if (v237 == 3)
                {
                  int32x4_t v27 = (int32x4_t)vld1q_dup_f32((const float *)v238);
                  *(int32x4_t *)(v193 + 32) = v27;
                  *(int32x4_t *)(v193 + 48) = v27;
                  goto LABEL_173;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v236, v29, v238, v237, v217, v31);
              }
            }
            else
            {
              int32x4_t v27 = 0uLL;
              *(_OWORD *)int v236 = 0u;
              *(_OWORD *)(v193 + 48) = 0u;
LABEL_173:
              unsigned int v239 = (int32x4_t *)((char *)v236 + v29);
              int32x4_t *v239 = v27;
              v239[1] = v27;
              char v240 = (int32x4_t *)((char *)v236 + v79);
              int32x4_t *v240 = v27;
              v240[1] = v27;
              char v241 = (int32x4_t *)((char *)v236 + v387);
              int32x4_t *v241 = v27;
              v241[1] = v27;
            }
            unsigned int v36 = a7;
            uint64_t v28 = v385;
LABEL_28:
            unsigned int v37 = v34 + 1;
            goto LABEL_29;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          block[5] = v72;
          char v395 = v42;
          char v396 = v386;
          unsigned int v391 = v368;
          unsigned int v392 = v40 - v38;
          block[6] = v73;
          uint64_t v389 = v74;
          uint64_t v29 = a11;
          uint64_t v390 = a11;
          unsigned int v393 = v379;
          unsigned int v394 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            uint64_t v28 = v385;
            unsigned int v36 = a7;
            goto LABEL_28;
          }
          uint64_t v82 = *(void *)(v28 + 208);
          int v83 = *(_DWORD *)(v82 + 52);
          unsigned int v84 = *v73;
          unsigned int v36 = a7;
          if (*v73)
          {
            if (v84 < 0xF0)
            {
              if (v84 == 127)
              {
                int64x2_t v253 = *v72;
                int64x2_t v254 = v72[1];
                int64x2_t v255 = v72[2];
                int64x2_t v256 = v72[3];
                int64x2_t v257 = v72[4];
                int64x2_t v258 = v72[5];
                int64x2_t v259 = v72[6];
                int64x2_t v260 = v72[7];
                int64x2_t v398 = vzip1q_s64(*v72, v254);
                int64x2_t v399 = vzip1q_s64(v257, v258);
                int64x2_t v402 = vzip2q_s64(v253, v254);
                int64x2_t v403 = vzip2q_s64(v257, v258);
                int64x2_t v406 = vzip1q_s64(v255, v256);
                int64x2_t v407 = vzip1q_s64(v259, v260);
                int32x4_t v85 = (int32x4_t)vzip2q_s64(v255, v256);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v259, v260);
                int32x4_t v410 = v85;
                int32x4_t v411 = v31;
                uint64_t v86 = 128;
              }
              else if (v84 == 3)
              {
                int32x4_t v85 = (int32x4_t)vld1q_dup_f32((const float *)v72->i32);
                int64x2_t v398 = (int64x2_t)v85;
                int64x2_t v399 = (int64x2_t)v85;
                int64x2_t v402 = (int64x2_t)v85;
                int64x2_t v403 = (int64x2_t)v85;
                int64x2_t v406 = (int64x2_t)v85;
                int64x2_t v407 = (int64x2_t)v85;
                int32x4_t v410 = v85;
                int32x4_t v411 = v85;
                uint64_t v86 = 4;
              }
              else
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v398, 64, (uint64_t)v72, v84, v27, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v398.i32, 64, (uint64_t)v72, v84, *(_DWORD *)(v82 + 52));
              uint64_t v86 = 64;
            }
          }
          else
          {
            uint64_t v86 = 0;
            int32x4_t v85 = 0uLL;
            int64x2_t v399 = 0u;
            int64x2_t v398 = 0u;
            int64x2_t v402 = 0u;
            int64x2_t v403 = 0u;
            int64x2_t v406 = 0u;
            int64x2_t v407 = 0u;
            int32x4_t v410 = 0u;
            int32x4_t v411 = 0u;
          }
          uint64_t v261 = (uint64_t)v72->i64 + v86;
          unsigned int v262 = v73[1];
          if (v73[1])
          {
            if (v262 < 0xF0)
            {
              if (v262 == 127)
              {
                int64x2_t v265 = *(int64x2_t *)v261;
                int64x2_t v266 = *(int64x2_t *)(v261 + 16);
                int64x2_t v267 = *(int64x2_t *)(v261 + 32);
                int64x2_t v268 = *(int64x2_t *)(v261 + 48);
                int64x2_t v269 = *(int64x2_t *)(v261 + 64);
                int64x2_t v270 = *(int64x2_t *)(v261 + 80);
                int64x2_t v271 = *(int64x2_t *)(v261 + 96);
                int64x2_t v272 = *(int64x2_t *)(v261 + 112);
                int64x2_t v414 = vzip1q_s64(*(int64x2_t *)v261, v266);
                int64x2_t v415 = vzip1q_s64(v269, v270);
                int64x2_t v418 = vzip2q_s64(v265, v266);
                int64x2_t v419 = vzip2q_s64(v269, v270);
                int64x2_t v422 = vzip1q_s64(v267, v268);
                int64x2_t v423 = vzip1q_s64(v271, v272);
                int32x4_t v263 = (int32x4_t)vzip2q_s64(v267, v268);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v271, v272);
                int32x4_t v426 = v263;
                int32x4_t v427 = v31;
                uint64_t v264 = 128;
              }
              else if (v262 == 3)
              {
                int32x4_t v263 = (int32x4_t)vld1q_dup_f32((const float *)v261);
                int64x2_t v414 = (int64x2_t)v263;
                int64x2_t v415 = (int64x2_t)v263;
                int64x2_t v418 = (int64x2_t)v263;
                int64x2_t v419 = (int64x2_t)v263;
                int64x2_t v422 = (int64x2_t)v263;
                int64x2_t v423 = (int64x2_t)v263;
                int32x4_t v426 = v263;
                int32x4_t v427 = v263;
                uint64_t v264 = 4;
              }
              else
              {
                uint64_t v264 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v414, 64, v261, v262, v85, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v414.i32, 64, v261, v262, v83);
              uint64_t v264 = 64;
            }
          }
          else
          {
            uint64_t v264 = 0;
            int32x4_t v263 = 0uLL;
            int64x2_t v414 = 0u;
            int64x2_t v415 = 0u;
            int64x2_t v418 = 0u;
            int64x2_t v419 = 0u;
            int64x2_t v422 = 0u;
            int64x2_t v423 = 0u;
            int32x4_t v426 = 0u;
            int32x4_t v427 = 0u;
          }
          uint64_t v273 = v261 + v264;
          unsigned int v274 = v73[2];
          if (v73[2])
          {
            if (v274 < 0xF0)
            {
              if (v274 == 127)
              {
                int64x2_t v277 = *(int64x2_t *)v273;
                int64x2_t v278 = *(int64x2_t *)(v273 + 16);
                int64x2_t v279 = *(int64x2_t *)(v273 + 32);
                int64x2_t v280 = *(int64x2_t *)(v273 + 48);
                int64x2_t v281 = *(int64x2_t *)(v273 + 64);
                int64x2_t v282 = *(int64x2_t *)(v273 + 80);
                int64x2_t v283 = *(int64x2_t *)(v273 + 96);
                int64x2_t v284 = *(int64x2_t *)(v273 + 112);
                int64x2_t v400 = vzip1q_s64(*(int64x2_t *)v273, v278);
                int64x2_t v401 = vzip1q_s64(v281, v282);
                int64x2_t v404 = vzip2q_s64(v277, v278);
                int64x2_t v405 = vzip2q_s64(v281, v282);
                int64x2_t v408 = vzip1q_s64(v279, v280);
                int64x2_t v409 = vzip1q_s64(v283, v284);
                int32x4_t v275 = (int32x4_t)vzip2q_s64(v279, v280);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v283, v284);
                int32x4_t v412 = v275;
                int32x4_t v413 = v31;
                uint64_t v276 = 128;
              }
              else if (v274 == 3)
              {
                int32x4_t v275 = (int32x4_t)vld1q_dup_f32((const float *)v273);
                int64x2_t v400 = (int64x2_t)v275;
                int64x2_t v401 = (int64x2_t)v275;
                int64x2_t v404 = (int64x2_t)v275;
                int64x2_t v405 = (int64x2_t)v275;
                int64x2_t v408 = (int64x2_t)v275;
                int64x2_t v409 = (int64x2_t)v275;
                int32x4_t v412 = v275;
                int32x4_t v413 = v275;
                uint64_t v276 = 4;
              }
              else
              {
                uint64_t v276 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v400, 64, v273, v274, v263, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v400.i32, 64, v273, v274, v83);
              uint64_t v276 = 64;
            }
          }
          else
          {
            uint64_t v276 = 0;
            int32x4_t v275 = 0uLL;
            int64x2_t v400 = 0u;
            int64x2_t v401 = 0u;
            int64x2_t v404 = 0u;
            int64x2_t v405 = 0u;
            int64x2_t v408 = 0u;
            int64x2_t v409 = 0u;
            int32x4_t v412 = 0u;
            int32x4_t v413 = 0u;
          }
          uint64_t v285 = v273 + v276;
          unsigned int v286 = v73[3];
          if (v73[3])
          {
            if (v286 < 0xF0)
            {
              if (v286 == 127)
              {
                int64x2_t v289 = *(int64x2_t *)v285;
                int64x2_t v290 = *(int64x2_t *)(v285 + 16);
                int64x2_t v291 = *(int64x2_t *)(v285 + 32);
                int64x2_t v292 = *(int64x2_t *)(v285 + 48);
                int64x2_t v293 = *(int64x2_t *)(v285 + 64);
                int64x2_t v294 = *(int64x2_t *)(v285 + 80);
                int64x2_t v295 = *(int64x2_t *)(v285 + 96);
                int64x2_t v296 = *(int64x2_t *)(v285 + 112);
                int64x2_t v416 = vzip1q_s64(*(int64x2_t *)v285, v290);
                int64x2_t v417 = vzip1q_s64(v293, v294);
                int64x2_t v420 = vzip2q_s64(v289, v290);
                int64x2_t v421 = vzip2q_s64(v293, v294);
                int64x2_t v424 = vzip1q_s64(v291, v292);
                int64x2_t v425 = vzip1q_s64(v295, v296);
                int32x4_t v287 = (int32x4_t)vzip2q_s64(v291, v292);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v295, v296);
                int32x4_t v428 = v287;
                int32x4_t v429 = v31;
                uint64_t v288 = 128;
              }
              else if (v286 == 3)
              {
                int32x4_t v287 = (int32x4_t)vld1q_dup_f32((const float *)v285);
                int64x2_t v416 = (int64x2_t)v287;
                int64x2_t v417 = (int64x2_t)v287;
                int64x2_t v420 = (int64x2_t)v287;
                int64x2_t v421 = (int64x2_t)v287;
                int64x2_t v424 = (int64x2_t)v287;
                int64x2_t v425 = (int64x2_t)v287;
                int32x4_t v428 = v287;
                int32x4_t v429 = v287;
                uint64_t v288 = 4;
              }
              else
              {
                uint64_t v288 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v416, 64, v285, v286, v275, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v416.i32, 64, v285, v286, v83);
              uint64_t v288 = 64;
            }
          }
          else
          {
            uint64_t v288 = 0;
            int32x4_t v287 = 0uLL;
            int64x2_t v416 = 0u;
            int64x2_t v417 = 0u;
            int64x2_t v420 = 0u;
            int64x2_t v421 = 0u;
            int64x2_t v424 = 0u;
            int64x2_t v425 = 0u;
            int32x4_t v428 = 0u;
            int32x4_t v429 = 0u;
          }
          uint64_t v297 = v285 + v288;
          unsigned int v298 = v73[4];
          if (v73[4])
          {
            if (v298 < 0xF0)
            {
              if (v298 == 127)
              {
                int64x2_t v301 = *(int64x2_t *)v297;
                int64x2_t v302 = *(int64x2_t *)(v297 + 16);
                int64x2_t v303 = *(int64x2_t *)(v297 + 32);
                int64x2_t v304 = *(int64x2_t *)(v297 + 48);
                int64x2_t v305 = *(int64x2_t *)(v297 + 64);
                int64x2_t v306 = *(int64x2_t *)(v297 + 80);
                int64x2_t v307 = *(int64x2_t *)(v297 + 96);
                int64x2_t v308 = *(int64x2_t *)(v297 + 112);
                int64x2_t v430 = vzip1q_s64(*(int64x2_t *)v297, v302);
                int64x2_t v431 = vzip1q_s64(v305, v306);
                int64x2_t v434 = vzip2q_s64(v301, v302);
                int64x2_t v435 = vzip2q_s64(v305, v306);
                int64x2_t v438 = vzip1q_s64(v303, v304);
                int64x2_t v439 = vzip1q_s64(v307, v308);
                int32x4_t v299 = (int32x4_t)vzip2q_s64(v303, v304);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v307, v308);
                int32x4_t v442 = v299;
                int32x4_t v443 = v31;
                uint64_t v300 = 128;
              }
              else if (v298 == 3)
              {
                int32x4_t v299 = (int32x4_t)vld1q_dup_f32((const float *)v297);
                int64x2_t v430 = (int64x2_t)v299;
                int64x2_t v431 = (int64x2_t)v299;
                int64x2_t v434 = (int64x2_t)v299;
                int64x2_t v435 = (int64x2_t)v299;
                int64x2_t v438 = (int64x2_t)v299;
                int64x2_t v439 = (int64x2_t)v299;
                int32x4_t v442 = v299;
                int32x4_t v443 = v299;
                uint64_t v300 = 4;
              }
              else
              {
                uint64_t v300 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v430, 64, v297, v298, v287, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v430.i32, 64, v297, v298, v83);
              uint64_t v300 = 64;
            }
          }
          else
          {
            uint64_t v300 = 0;
            int32x4_t v299 = 0uLL;
            int64x2_t v430 = 0u;
            int64x2_t v431 = 0u;
            int64x2_t v434 = 0u;
            int64x2_t v435 = 0u;
            int64x2_t v438 = 0u;
            int64x2_t v439 = 0u;
            int32x4_t v442 = 0u;
            int32x4_t v443 = 0u;
          }
          uint64_t v309 = v297 + v300;
          unsigned int v310 = v73[5];
          if (v73[5])
          {
            if (v310 < 0xF0)
            {
              if (v310 == 127)
              {
                int64x2_t v313 = *(int64x2_t *)v309;
                int64x2_t v314 = *(int64x2_t *)(v309 + 16);
                int64x2_t v315 = *(int64x2_t *)(v309 + 32);
                int64x2_t v316 = *(int64x2_t *)(v309 + 48);
                int64x2_t v317 = *(int64x2_t *)(v309 + 64);
                int64x2_t v318 = *(int64x2_t *)(v309 + 80);
                int64x2_t v319 = *(int64x2_t *)(v309 + 96);
                int64x2_t v320 = *(int64x2_t *)(v309 + 112);
                int64x2_t v446 = vzip1q_s64(*(int64x2_t *)v309, v314);
                int64x2_t v447 = vzip1q_s64(v317, v318);
                int64x2_t v450 = vzip2q_s64(v313, v314);
                int64x2_t v451 = vzip2q_s64(v317, v318);
                int64x2_t v454 = vzip1q_s64(v315, v316);
                int64x2_t v455 = vzip1q_s64(v319, v320);
                int32x4_t v311 = (int32x4_t)vzip2q_s64(v315, v316);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v319, v320);
                int32x4_t v458 = v311;
                int32x4_t v459 = v31;
                uint64_t v312 = 128;
              }
              else if (v310 == 3)
              {
                int32x4_t v311 = (int32x4_t)vld1q_dup_f32((const float *)v309);
                int64x2_t v446 = (int64x2_t)v311;
                int64x2_t v447 = (int64x2_t)v311;
                int64x2_t v450 = (int64x2_t)v311;
                int64x2_t v451 = (int64x2_t)v311;
                int64x2_t v454 = (int64x2_t)v311;
                int64x2_t v455 = (int64x2_t)v311;
                int32x4_t v458 = v311;
                int32x4_t v459 = v311;
                uint64_t v312 = 4;
              }
              else
              {
                uint64_t v312 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v446, 64, v309, v310, v299, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v446.i32, 64, v309, v310, v83);
              uint64_t v312 = 64;
            }
          }
          else
          {
            uint64_t v312 = 0;
            int32x4_t v311 = 0uLL;
            int64x2_t v446 = 0u;
            int64x2_t v447 = 0u;
            int64x2_t v450 = 0u;
            int64x2_t v451 = 0u;
            int64x2_t v454 = 0u;
            int64x2_t v455 = 0u;
            int32x4_t v458 = 0u;
            int32x4_t v459 = 0u;
          }
          uint64_t v321 = v309 + v312;
          unsigned int v322 = v73[6];
          if (v73[6])
          {
            if (v322 < 0xF0)
            {
              if (v322 == 127)
              {
                int64x2_t v327 = *(int64x2_t *)v321;
                int64x2_t v328 = *(int64x2_t *)(v321 + 16);
                int64x2_t v329 = *(int64x2_t *)(v321 + 32);
                int64x2_t v330 = *(int64x2_t *)(v321 + 48);
                int64x2_t v331 = *(int64x2_t *)(v321 + 64);
                int64x2_t v332 = *(int64x2_t *)(v321 + 80);
                int64x2_t v333 = *(int64x2_t *)(v321 + 96);
                int64x2_t v334 = *(int64x2_t *)(v321 + 112);
                int64x2_t v432 = vzip1q_s64(*(int64x2_t *)v321, v328);
                int64x2_t v433 = vzip1q_s64(v331, v332);
                int64x2_t v436 = vzip2q_s64(v327, v328);
                int64x2_t v437 = vzip2q_s64(v331, v332);
                int64x2_t v440 = vzip1q_s64(v329, v330);
                int64x2_t v441 = vzip1q_s64(v333, v334);
                int32x4_t v323 = (int32x4_t)vzip2q_s64(v329, v330);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v333, v334);
                int32x4_t v444 = v323;
                int32x4_t v445 = v31;
                uint64_t v324 = 128;
                unsigned int v325 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else if (v322 == 3)
              {
                int32x4_t v323 = (int32x4_t)vld1q_dup_f32((const float *)v321);
                int64x2_t v432 = (int64x2_t)v323;
                int64x2_t v433 = (int64x2_t)v323;
                int64x2_t v436 = (int64x2_t)v323;
                int64x2_t v437 = (int64x2_t)v323;
                int64x2_t v440 = (int64x2_t)v323;
                int64x2_t v441 = (int64x2_t)v323;
                int32x4_t v444 = v323;
                int32x4_t v445 = v323;
                uint64_t v324 = 4;
                unsigned int v325 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v324 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v432, 64, v321, v322, v311, v31);
                unsigned int v325 = v73[7];
                if (!v73[7])
                {
LABEL_226:
                  int32x4_t v27 = 0uLL;
                  int64x2_t v448 = 0u;
                  int64x2_t v449 = 0u;
                  int64x2_t v452 = 0u;
                  int64x2_t v453 = 0u;
                  int64x2_t v456 = 0u;
                  int64x2_t v457 = 0u;
                  int32x4_t v460 = 0u;
                  int32x4_t v461 = 0u;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v432.i32, 64, v321, v322, v83);
              uint64_t v324 = 64;
              unsigned int v325 = v73[7];
              if (!v73[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v324 = 0;
            int32x4_t v323 = 0uLL;
            int64x2_t v432 = 0u;
            int64x2_t v433 = 0u;
            int64x2_t v436 = 0u;
            int64x2_t v437 = 0u;
            int64x2_t v440 = 0u;
            int64x2_t v441 = 0u;
            int32x4_t v444 = 0u;
            int32x4_t v445 = 0u;
            unsigned int v325 = v73[7];
            if (!v73[7]) {
              goto LABEL_226;
            }
          }
          uint64_t v326 = v321 + v324;
          if (v325 < 0xF0)
          {
            if (v325 == 127)
            {
              int64x2_t v335 = *(int64x2_t *)v326;
              int64x2_t v336 = *(int64x2_t *)(v326 + 16);
              int64x2_t v337 = *(int64x2_t *)(v326 + 32);
              int64x2_t v338 = *(int64x2_t *)(v326 + 48);
              int64x2_t v339 = *(int64x2_t *)(v326 + 64);
              int64x2_t v340 = *(int64x2_t *)(v326 + 80);
              int64x2_t v341 = *(int64x2_t *)(v326 + 96);
              int64x2_t v342 = *(int64x2_t *)(v326 + 112);
              int64x2_t v448 = vzip1q_s64(*(int64x2_t *)v326, v336);
              int64x2_t v449 = vzip1q_s64(v339, v340);
              int64x2_t v452 = vzip2q_s64(v335, v336);
              int64x2_t v453 = vzip2q_s64(v339, v340);
              int64x2_t v456 = vzip1q_s64(v337, v338);
              int64x2_t v457 = vzip1q_s64(v341, v342);
              int32x4_t v27 = (int32x4_t)vzip2q_s64(v337, v338);
              int32x4_t v31 = (int32x4_t)vzip2q_s64(v341, v342);
              int32x4_t v460 = v27;
              int32x4_t v461 = v31;
            }
            else if (v325 == 3)
            {
              int32x4_t v27 = (int32x4_t)vld1q_dup_f32((const float *)v326);
              int64x2_t v448 = (int64x2_t)v27;
              int64x2_t v449 = (int64x2_t)v27;
              int64x2_t v452 = (int64x2_t)v27;
              int64x2_t v453 = (int64x2_t)v27;
              int64x2_t v456 = (int64x2_t)v27;
              int64x2_t v457 = (int64x2_t)v27;
              int32x4_t v460 = v27;
              int32x4_t v461 = v27;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v448, 64, v326, v325, v323, v31);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v448.i32, 64, v326, v325, v83);
          }
LABEL_243:
          unsigned int v37 = v34 + 1;
          unint64_t v343 = v393;
          uint64_t v28 = v385;
          if (v393)
          {
            unint64_t v344 = 0;
            unint64_t v345 = &v398.i8[64 * (unint64_t)v391 + 4 * v392];
            unsigned int v346 = v394;
            do
            {
              if (v346)
              {
                uint64_t v347 = 0;
                uint64_t v348 = v389 + v390 * v344;
                do
                {
                  *(unsigned char *)(v348 + v347) = v345[v347];
                  ++v347;
                  unsigned int v346 = v394;
                }
                while (4 * (unint64_t)v394 > v347);
                unint64_t v343 = v393;
              }
              ++v344;
              v345 += 64;
            }
            while (v344 < v343);
          }
LABEL_29:
          BOOL v22 = v34 == v373 >> 4;
          unsigned int v34 = v37;
        }
        while (!v22);
        BOOL v22 = v17++ == v364;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  uint64_t v135 = v23;
  uint64_t v24 = v12;
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v152 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v134 = v14 + a10 - 1;
  unsigned int v136 = v134 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v155 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v146 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v145 = isLevelTiled;
  if (v25 <= v136)
  {
    unsigned int v144 = v16 + a9 - 1;
    unsigned int v133 = v16 >> 4;
    if (v16 >> 4 <= v144 >> 4)
    {
      unsigned int v130 = v20 - 1;
      unsigned int v132 = (v18 - 1) >> 4;
      int v153 = ((v20 - 1) & 0xF) + 1;
      unsigned int v154 = (v20 - 1) >> 4;
      int v131 = ((v18 - 1) & 0xF) + 1;
      uint64_t v137 = 8 * a11;
      uint64_t v138 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v143 = v36.i32[0] | v36.i32[1];
      BOOL v141 = v36.i32[1] != 0;
      int8x8_t v142 = v36;
      BOOL v140 = v36.i32[0] != 0;
      unint64_t v129 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (16 * v25) | 0xF;
        if (16 * v25 <= v152) {
          int v38 = v152;
        }
        else {
          int v38 = 16 * v25;
        }
        unsigned int v39 = v133;
        if (v134 < v37) {
          unsigned int v37 = v134;
        }
        int v139 = v38 - 16 * v25;
        int v150 = v37 - v38 + 1;
        unsigned int v151 = 16 * v25;
        int v40 = v131;
        if (v25 != v132) {
          int v40 = 16;
        }
        unsigned int v156 = v40;
        uint64_t v149 = v135 + (v38 - v152) * a11;
        do
        {
          unsigned int v41 = 16 * v39;
          unsigned int v42 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v39;
          }
          if (v144 < v42) {
            unsigned int v42 = v144;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v154) {
            unsigned int v45 = v153;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v151 >= v152 && v41 >= v16)
          {
            int v47 = v153;
            if (v39 != v154) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v150 != v156;
          }
          if (v145)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v129 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v120 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v121 = 0;
              if (v73) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v122 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v122 | v121) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v124 = 0;
            }
            else
            {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
              if ((v73 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v122 = 0;
              if (!v121) {
                goto LABEL_131;
              }
LABEL_120:
              int v123 = 0;
              uint64_t v124 = 0;
              int v125 = v39 & v120;
              BOOL v126 = v121 != 0;
              BOOL v127 = v122 != 0;
              int v128 = 1;
              do
              {
                --v121;
                if (v126) {
                  v124 |= (unint64_t)(v128 & v125) << v123++;
                }
                else {
                  unsigned int v121 = 0;
                }
                --v122;
                if (v127) {
                  v124 |= (unint64_t)(v128 & v25 & ((v74 >> 4) - 1)) << v123++;
                }
                else {
                  unsigned int v122 = 0;
                }
                v128 *= 2;
                --v123;
                BOOL v127 = v122 != 0;
                BOOL v126 = v121 != 0;
              }
              while (v122 | v121);
            }
            unint64_t v56 = ((unint64_t)(v41 / v70 + v151 / v74 * ((v70 + v130) / v70)) << 14) + (v124 << 10);
            goto LABEL_60;
          }
          if (v143)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v140;
            BOOL v53 = v141;
            __int32 v55 = v142.i32[0];
            __int32 v54 = v142.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 10;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          char v75 = (unsigned char *)(v147 + v56);
          if (v146)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v147 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v155;
            char v75 = __dst;
          }
          unsigned int v78 = (unsigned __int8 *)(v148 + 8 * v64);
          uint64_t v79 = v16;
          int32x4_t v80 = (float64x2_t *)(v149 + 8 * (v43 - v16));
          char v81 = v45 < 0x10 || v46;
          if ((v81 & 1) == 0 && v156 > 0xF)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            uint64_t v83 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80, a11, (uint64_t)v75, *v78, v82, v36)];
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v138), a11, v83, v78[1], v82, v84);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 4, a11, v85, v78[2], v82, v86);
            uint64_t v89 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v138 + 64), a11, v87, v78[3], v82, v88);
            v90 = (float64x2_t *)((char *)v80 + v137);
            uint64_t v92 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v137), a11, v89, v78[4], v82, v91);
            int64x2_t v93 = (float64x2_t *)((char *)v80 + 12 * a11);
            uint64_t v95 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v93, a11, v92, v78[5], v82, v94);
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v90 + 4, a11, v95, v78[6], v82, v96);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v93 + 4, a11, v95 + v97, v78[7], v82, v98);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v164 = v45;
          char v165 = v156;
          unsigned int v160 = v139;
          unsigned int v161 = v43 - v41;
          block[6] = v78;
          int32x4_t v158 = v80;
          uint64_t v159 = a11;
          unsigned int v162 = v150;
          unsigned int v163 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v99 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          uint64_t v100 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v167, 128, (uint64_t)v75, *v78, v99, v36)];
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v169, 128, v100, v78[1], v99, v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v168, 128, v102, v78[2], v99, v103);
          uint64_t v106 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v170, 128, v104, v78[3], v99, v105);
          uint64_t v108 = v106
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v171, 128, v106, v78[4], v99, v107);
          uint64_t v110 = v108
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v173, 128, v108, v78[5], v99, v109);
          uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v172, 128, v110, v78[6], v99, v111);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v174, 128, v110 + v112, v78[7], v99, v113);
          unint64_t v114 = v162;
          uint64_t v16 = v79;
          if (v162)
          {
            unint64_t v115 = 0;
            int64x2_t v116 = (char *)&v167[8 * (unint64_t)v160].f64[v161];
            unsigned int v117 = v163;
            do
            {
              if (v117)
              {
                uint64_t v118 = 0;
                int64x2_t v119 = (char *)v158 + v159 * v115;
                do
                {
                  v119[v118] = v116[v118];
                  ++v118;
                  unsigned int v117 = v163;
                }
                while (8 * (unint64_t)v163 > v118);
                unint64_t v114 = v162;
              }
              ++v115;
              v116 += 128;
            }
            while (v115 < v114);
          }
LABEL_28:
          BOOL v29 = v39++ == v144 >> 4;
          uint64_t v34 = v155;
        }
        while (!v29);
        BOOL v29 = v25++ == v136;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v290 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v241 = a8;
  unsigned int v16 = a8 >> 4;
  unsigned int v222 = a8 + a10 - 1;
  unsigned int v224 = v222 >> 4;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v245 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v235 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v234 = isLevelTiled;
  if (v16 <= v224)
  {
    unsigned int v233 = a7 + a9 - 1;
    if (a7 >> 4 <= v233 >> 4)
    {
      uint64_t v26 = a11;
      unsigned int v219 = a5 - 1;
      unsigned int v244 = (a5 - 1) >> 4;
      int v243 = ((a5 - 1) & 0xF) + 1;
      int v220 = ((a6 - 1) & 0xF) + 1;
      unsigned int v221 = (a6 - 1) >> 4;
      uint64_t v226 = 8 * a11;
      uint64_t v227 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL)));
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v28.i8))));
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v232 = v30.i32[0] | v30.i32[1];
      BOOL v230 = v30.i32[1] != 0;
      uint64_t v231 = v30.i64[0];
      BOOL v229 = v30.i32[0] != 0;
      unint64_t v218 = 8 * v18 * (unint64_t)v17;
      uint64_t v247 = 3 * a11;
      uint64_t v225 = 2 * a11;
      do
      {
        unsigned int v31 = (16 * v16) | 0xF;
        if (16 * v16 <= v241) {
          int v32 = v241;
        }
        else {
          int v32 = 16 * v16;
        }
        unsigned int v33 = a7 >> 4;
        if (v222 < v31) {
          unsigned int v31 = v222;
        }
        unsigned int v240 = 16 * v16;
        int v228 = v32 - 16 * v16;
        int v239 = v31 - v32 + 1;
        int v34 = v220;
        if (v16 != v221) {
          int v34 = 16;
        }
        unsigned int v246 = v34;
        uint64_t v238 = a2 + (v32 - v241) * v26;
        unsigned int v35 = a7;
        do
        {
          unsigned int v40 = 16 * v33;
          unsigned int v41 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= v35) {
            int v42 = v35;
          }
          else {
            int v42 = 16 * v33;
          }
          if (v233 < v41) {
            unsigned int v41 = a7 + a9 - 1;
          }
          int v43 = v41 - v42 + 1;
          if (v33 == v244) {
            unsigned int v44 = v243;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (v240 >= v241 && v40 >= v35)
          {
            int v46 = v243;
            if (v33 != v244) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v239 != v246;
          }
          if (v234)
          {
            unsigned int v69 = 0;
            uint64_t v70 = v218 >> (*(unsigned char *)(v25 + 57) != 0);
            char v71 = 1;
            if (v70 > 127)
            {
              if (v70 > 511)
              {
                if (v70 == 512)
                {
                  unsigned int v69 = 16;
                  char v72 = 1;
                  unsigned int v73 = 16;
                }
                else
                {
                  char v72 = 1;
                  unsigned int v73 = 0;
                  if (v70 == 1024)
                  {
                    unsigned int v73 = 8;
                    unsigned int v69 = 16;
                  }
                }
              }
              else if (v70 == 128)
              {
                char v71 = 0;
                char v72 = 0;
                unsigned int v69 = 32;
                unsigned int v73 = 32;
              }
              else
              {
                char v72 = 1;
                unsigned int v73 = 0;
                if (v70 == 256)
                {
                  char v71 = 0;
                  unsigned int v73 = 16;
                  unsigned int v69 = 32;
                }
              }
            }
            else
            {
              char v72 = 1;
              unsigned int v73 = 0;
              switch(v70)
              {
                case 4:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 128;
                  unsigned int v69 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 128;
                  unsigned int v73 = 128;
                  break;
                case 16:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 64;
                  unsigned int v69 = 128;
                  break;
                case 32:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 64;
                  unsigned int v73 = 64;
                  break;
                default:
                  if (v70 == 64)
                  {
                    char v71 = 0;
                    char v72 = 0;
                    unsigned int v73 = 32;
                    unsigned int v69 = 64;
                  }
                  break;
              }
            }
            unsigned int v209 = (v69 >> 4) - 1;
            if (v71)
            {
              unsigned int v210 = 0;
              if (v72) {
                goto LABEL_276;
              }
LABEL_265:
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(((v73 + 15) >> 4) - 1)));
              if (v211 | v210) {
                goto LABEL_266;
              }
LABEL_277:
              uint64_t v213 = 0;
            }
            else
            {
              unsigned int v210 = 32 - __clz(~(-1 << -(char)__clz(v209)));
              if ((v72 & 1) == 0) {
                goto LABEL_265;
              }
LABEL_276:
              unsigned int v211 = 0;
              if (!v210) {
                goto LABEL_277;
              }
LABEL_266:
              int v212 = 0;
              uint64_t v213 = 0;
              int v214 = v33 & v209;
              BOOL v215 = v210 != 0;
              BOOL v216 = v211 != 0;
              int v217 = 1;
              do
              {
                --v210;
                if (v215) {
                  v213 |= (unint64_t)(v217 & v214) << v212++;
                }
                else {
                  unsigned int v210 = 0;
                }
                --v211;
                if (v216) {
                  v213 |= (unint64_t)(v217 & v16 & ((v73 >> 4) - 1)) << v212++;
                }
                else {
                  unsigned int v211 = 0;
                }
                v217 *= 2;
                --v212;
                BOOL v216 = v211 != 0;
                BOOL v215 = v210 != 0;
              }
              while (v211 | v210);
            }
            unint64_t v55 = ((unint64_t)(v40 / v69 + v240 / v73 * ((v69 + v219) / v69)) << 14) + (v213 << 8);
            goto LABEL_61;
          }
          if (v232)
          {
            int v48 = 0;
            uint64_t v49 = 0;
            int v50 = 1;
            BOOL v51 = v230;
            BOOL v52 = v229;
            int v53 = HIDWORD(v231);
            int v54 = v231;
            do
            {
              --v53;
              if (v51) {
                v49 |= (unint64_t)(v50 & v33) << v48++;
              }
              else {
                int v53 = 0;
              }
              --v54;
              if (v52) {
                v49 |= (unint64_t)(v50 & v16) << v48++;
              }
              else {
                int v54 = 0;
              }
              v50 *= 2;
              --v48;
              BOOL v52 = v54 != 0;
              BOOL v51 = v53 != 0;
            }
            while (v54 | v53);
          }
          else
          {
            uint64_t v49 = 0;
          }
          unint64_t v55 = v49 << 8;
LABEL_61:
          unsigned int v56 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20) {
            unsigned int v58 = 0;
          }
          else {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
          }
          unsigned int v59 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20)
          {
            unsigned int v61 = 0;
            if (!v58)
            {
LABEL_87:
              unint64_t v63 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
            if (!(v61 | v58)) {
              goto LABEL_87;
            }
          }
          int v62 = 0;
          unint64_t v63 = 0;
          BOOL v64 = v58 != 0;
          BOOL v65 = v61 != 0;
          int v66 = 1;
          do
          {
            --v58;
            BOOL v67 = !v64;
            if (v64)
            {
              unint64_t v68 = ((unint64_t)(v66 & v33) << v62) | v63;
            }
            else
            {
              unsigned int v58 = 0;
              unint64_t v68 = v63;
            }
            if (!v67) {
              ++v62;
            }
            --v61;
            if (v65)
            {
              unint64_t v63 = ((unint64_t)(v66 & v16) << v62) | v68;
            }
            else
            {
              unsigned int v61 = 0;
              unint64_t v63 = v68;
            }
            if (v65) {
              ++v62;
            }
            v66 *= 2;
            --v62;
            BOOL v65 = v61 != 0;
            BOOL v64 = v58 != 0;
          }
          while (v61 | v58);
LABEL_88:
          unsigned int v74 = (int32x4_t *)(a3 + v55);
          if (v235)
          {
            memcpy(__dst, v74, sizeof(__dst));
            uint64_t v25 = v245;
            unsigned int v74 = (int32x4_t *)__dst;
          }
          char v75 = (unsigned __int8 *)(a4 + 8 * v63);
          int v76 = (int32x4_t *)(v238 + 2 * (v42 - v35));
          char v77 = v44 < 0x10 || v45;
          if ((v77 & 1) == 0 && v246 > 0xF)
          {
            uint64_t v78 = *(void *)(v25 + 208);
            int v79 = *(_DWORD *)(v78 + 52);
            unsigned int v80 = *v75;
            if (*v75)
            {
              uint64_t v26 = a11;
              uint64_t v81 = 2 * a11;
              if (v80 < 0xF0)
              {
                if (v80 == 63)
                {
                  int32x4_t v90 = *v74;
                  int32x4_t v29 = v74[1];
                  int32x4_t v28 = v74[2];
                  int32x4_t v91 = v74[3];
                  *int v76 = vuzp1q_s32(*v74, v28);
                  *(int32x4_t *)((char *)v76 + a11) = vuzp2q_s32(v90, v28);
                  uint64_t v92 = (int32x4_t *)((char *)v76 + v225);
                  *uint64_t v92 = vuzp1q_s32(v29, v91);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v91);
                  *(int16x8_t *)((char *)v92 + a11) = v30;
                  uint64_t v82 = 64;
                }
                else if (v80 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16(v74->i16);
                  *int v76 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v76 + a11) = v30;
                  *(int16x8_t *)((char *)v76 + 2 * a11) = v30;
                  *(int16x8_t *)((char *)v76 + 3 * a11) = v30;
                  uint64_t v82 = 2;
                }
                else
                {
                  uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v76, a11, (uint64_t)v74, v80, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v76, a11, (uint64_t)v74, v80, *(_DWORD *)(v78 + 52));
                uint64_t v82 = 32;
              }
            }
            else
            {
              uint64_t v82 = 0;
              v76->i64[0] = 0;
              v76->i64[1] = 0;
              uint64_t v26 = a11;
              uint64_t v87 = (uint64_t *)((char *)v76->i64 + a11);
              *uint64_t v87 = 0;
              v87[1] = 0;
              uint64_t v81 = 2 * a11;
              int8x8_t v88 = (uint64_t *)((char *)v76->i64 + v225);
              void *v88 = 0;
              v88[1] = 0;
              uint64_t v89 = (uint64_t *)((char *)v76->i64 + v247);
              void *v89 = 0;
              v89[1] = 0;
            }
            uint64_t v93 = (uint64_t)v74->i64 + v82;
            int8x8_t v94 = (int32x4_t *)((char *)v76 + v227);
            unsigned int v95 = v75[1];
            if (v75[1])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 63)
                {
                  int32x4_t v100 = *(int32x4_t *)v93;
                  int32x4_t v29 = *(int32x4_t *)(v93 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v93 + 32);
                  int32x4_t v101 = *(int32x4_t *)(v93 + 48);
                  *int8x8_t v94 = vuzp1q_s32(*(int32x4_t *)v93, v28);
                  *(int32x4_t *)((char *)v94 + v26) = vuzp2q_s32(v100, v28);
                  uint64_t v102 = (int32x4_t *)((char *)v94 + v81);
                  int32x4_t *v102 = vuzp1q_s32(v29, v101);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v101);
                  *(int16x8_t *)((char *)v102 + v26) = v30;
                  uint64_t v96 = 64;
                }
                else if (v95 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v93);
                  *int8x8_t v94 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v94 + v26) = v30;
                  *(int16x8_t *)((char *)v94 + v81) = v30;
                  *(int16x8_t *)((char *)v94 + 3 * a11) = v30;
                  uint64_t v96 = 2;
                }
                else
                {
                  uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v76 + v227), v26, v93, v95, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v76->i16[(unint64_t)v227 / 2], v26, v93, v95, v79);
                uint64_t v96 = 32;
              }
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              uint64_t v97 = (uint64_t *)((char *)v94->i64 + v26);
              *uint64_t v97 = 0;
              v97[1] = 0;
              int8x8_t v98 = (uint64_t *)((char *)v94->i64 + v81);
              *int8x8_t v98 = 0;
              v98[1] = 0;
              int v99 = (uint64_t *)((char *)v94->i64 + v247);
              *int v99 = 0;
              v99[1] = 0;
            }
            uint64_t v103 = v93 + v96;
            uint64_t v104 = v76 + 1;
            unsigned int v105 = v75[2];
            if (v75[2])
            {
              if (v105 < 0xF0)
              {
                if (v105 == 63)
                {
                  int32x4_t v110 = *(int32x4_t *)v103;
                  int32x4_t v29 = *(int32x4_t *)(v103 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v103 + 32);
                  int32x4_t v111 = *(int32x4_t *)(v103 + 48);
                  *uint64_t v104 = vuzp1q_s32(*(int32x4_t *)v103, v28);
                  *(int32x4_t *)((char *)v104 + v26) = vuzp2q_s32(v110, v28);
                  uint64_t v112 = (int32x4_t *)((char *)v104 + v81);
                  int32x4_t *v112 = vuzp1q_s32(v29, v111);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v111);
                  *(int16x8_t *)((char *)v112 + v26) = v30;
                  uint64_t v106 = 64;
                }
                else if (v105 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v103);
                  *uint64_t v104 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v104 + v26) = v30;
                  *(int16x8_t *)((char *)v104 + v81) = v30;
                  *(int16x8_t *)((char *)v104 + 3 * a11) = v30;
                  uint64_t v106 = 2;
                }
                else
                {
                  uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v104, v26, v103, v105, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v104, v26, v103, v105, v79);
                uint64_t v106 = 32;
              }
            }
            else
            {
              uint64_t v106 = 0;
              v104->i64[0] = 0;
              v76[1].i64[1] = 0;
              int8x8_t v107 = (uint64_t *)((char *)v104->i64 + v26);
              void *v107 = 0;
              v107[1] = 0;
              uint64_t v108 = (uint64_t *)((char *)v104->i64 + v81);
              void *v108 = 0;
              v108[1] = 0;
              int8x8_t v109 = (uint64_t *)((char *)v104->i64 + v247);
              void *v109 = 0;
              v109[1] = 0;
            }
            uint64_t v113 = v103 + v106;
            unint64_t v114 = v94 + 1;
            unsigned int v115 = v75[3];
            if (v75[3])
            {
              if (v115 < 0xF0)
              {
                if (v115 == 63)
                {
                  int32x4_t v120 = *(int32x4_t *)v113;
                  int32x4_t v29 = *(int32x4_t *)(v113 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v113 + 32);
                  int32x4_t v121 = *(int32x4_t *)(v113 + 48);
                  *unint64_t v114 = vuzp1q_s32(*(int32x4_t *)v113, v28);
                  *(int32x4_t *)((char *)v114 + v26) = vuzp2q_s32(v120, v28);
                  unsigned int v122 = (int32x4_t *)((char *)v114 + v81);
                  int32x4_t *v122 = vuzp1q_s32(v29, v121);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v121);
                  *(int16x8_t *)((char *)v122 + v26) = v30;
                  uint64_t v116 = 64;
                }
                else if (v115 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v113);
                  *unint64_t v114 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v114 + v26) = v30;
                  *(int16x8_t *)((char *)v114 + v81) = v30;
                  *(int16x8_t *)((char *)v114 + 3 * a11) = v30;
                  uint64_t v116 = 2;
                }
                else
                {
                  uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v114, v26, v113, v115, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v114, v26, v113, v115, v79);
                uint64_t v116 = 32;
              }
            }
            else
            {
              uint64_t v116 = 0;
              v114->i64[0] = 0;
              v94[1].i64[1] = 0;
              unsigned int v117 = (uint64_t *)((char *)v114->i64 + v26);
              *unsigned int v117 = 0;
              v117[1] = 0;
              uint64_t v118 = (uint64_t *)((char *)v114->i64 + v81);
              *uint64_t v118 = 0;
              v118[1] = 0;
              int64x2_t v119 = (uint64_t *)((char *)v114->i64 + v247);
              *int64x2_t v119 = 0;
              v119[1] = 0;
            }
            uint64_t v123 = v113 + v116;
            uint64_t v124 = (int32x4_t *)((char *)v76 + v226);
            unsigned int v125 = v75[4];
            if (v75[4])
            {
              if (v125 < 0xF0)
              {
                if (v125 == 63)
                {
                  int32x4_t v130 = *(int32x4_t *)v123;
                  int32x4_t v29 = *(int32x4_t *)(v123 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v123 + 32);
                  int32x4_t v131 = *(int32x4_t *)(v123 + 48);
                  int32x4_t *v124 = vuzp1q_s32(*(int32x4_t *)v123, v28);
                  *(int32x4_t *)((char *)v124 + v26) = vuzp2q_s32(v130, v28);
                  unsigned int v132 = (int32x4_t *)((char *)v124 + v81);
                  *unsigned int v132 = vuzp1q_s32(v29, v131);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v131);
                  *(int16x8_t *)((char *)v132 + v26) = v30;
                  uint64_t v126 = 64;
                }
                else if (v125 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v123);
                  int32x4_t *v124 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v124 + v26) = v30;
                  *(int16x8_t *)((char *)v124 + v81) = v30;
                  *(int16x8_t *)((char *)v124 + 3 * a11) = v30;
                  uint64_t v126 = 2;
                }
                else
                {
                  uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v76 + v226), v26, v123, v125, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v76->i16[(unint64_t)v226 / 2], v26, v123, v125, v79);
                uint64_t v126 = 32;
              }
            }
            else
            {
              uint64_t v126 = 0;
              v124->i64[0] = 0;
              v124->i64[1] = 0;
              BOOL v127 = (uint64_t *)((char *)v124->i64 + v26);
              *BOOL v127 = 0;
              v127[1] = 0;
              int v128 = (uint64_t *)((char *)v124->i64 + v81);
              *int v128 = 0;
              v128[1] = 0;
              unint64_t v129 = (uint64_t *)((char *)v124->i64 + v247);
              void *v129 = 0;
              v129[1] = 0;
            }
            uint64_t v133 = v123 + v126;
            unsigned int v134 = (int32x4_t *)((char *)v76 + 12 * a11);
            unsigned int v135 = v75[5];
            if (v75[5])
            {
              if (v135 < 0xF0)
              {
                if (v135 == 63)
                {
                  int32x4_t v140 = *(int32x4_t *)v133;
                  int32x4_t v29 = *(int32x4_t *)(v133 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v133 + 32);
                  int32x4_t v141 = *(int32x4_t *)(v133 + 48);
                  int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v28);
                  *(int32x4_t *)((char *)v134 + v26) = vuzp2q_s32(v140, v28);
                  int8x8_t v142 = (int32x4_t *)((char *)v134 + v81);
                  *int8x8_t v142 = vuzp1q_s32(v29, v141);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v141);
                  *(int16x8_t *)((char *)v142 + v26) = v30;
                  uint64_t v136 = 64;
                }
                else if (v135 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v133);
                  int32x4_t *v134 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v134 + v26) = v30;
                  *(int16x8_t *)((char *)v134 + v81) = v30;
                  *(int16x8_t *)((char *)v134 + 3 * a11) = v30;
                  uint64_t v136 = 2;
                }
                else
                {
                  uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v134, v26, v133, v135, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v134, v26, v133, v135, v79);
                uint64_t v136 = 32;
              }
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              uint64_t v137 = (uint64_t *)((char *)v134->i64 + v26);
              *uint64_t v137 = 0;
              v137[1] = 0;
              uint64_t v138 = (uint64_t *)((char *)v134->i64 + v81);
              *uint64_t v138 = 0;
              v138[1] = 0;
              int v139 = (uint64_t *)((char *)v134->i64 + v247);
              *int v139 = 0;
              v139[1] = 0;
            }
            uint64_t v143 = v133 + v136;
            unsigned int v144 = v124 + 1;
            unsigned int v145 = v75[6];
            if (v75[6])
            {
              if (v145 < 0xF0)
              {
                if (v145 == 63)
                {
                  int32x4_t v150 = *(int32x4_t *)v143;
                  int32x4_t v29 = *(int32x4_t *)(v143 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v143 + 32);
                  int32x4_t v151 = *(int32x4_t *)(v143 + 48);
                  int32x4_t *v144 = vuzp1q_s32(*(int32x4_t *)v143, v28);
                  *(int32x4_t *)((char *)v144 + v26) = vuzp2q_s32(v150, v28);
                  unsigned int v152 = (int32x4_t *)((char *)v144 + v81);
                  int32x4_t *v152 = vuzp1q_s32(v29, v151);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v151);
                  *(int16x8_t *)((char *)v152 + v26) = v30;
                  uint64_t v146 = 64;
                }
                else if (v145 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v143);
                  int32x4_t *v144 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v144 + v26) = v30;
                  *(int16x8_t *)((char *)v144 + v81) = v30;
                  *(int16x8_t *)((char *)v144 + 3 * a11) = v30;
                  uint64_t v146 = 2;
                }
                else
                {
                  uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v144, v26, v143, v145, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v144, v26, v143, v145, v79);
                uint64_t v146 = 32;
              }
            }
            else
            {
              uint64_t v146 = 0;
              v144->i64[0] = 0;
              v124[1].i64[1] = 0;
              uint64_t v147 = (uint64_t *)((char *)v144->i64 + v26);
              *uint64_t v147 = 0;
              v147[1] = 0;
              uint64_t v148 = (uint64_t *)((char *)v144->i64 + v81);
              void *v148 = 0;
              v148[1] = 0;
              uint64_t v149 = (uint64_t *)((char *)v144->i64 + v247);
              *uint64_t v149 = 0;
              v149[1] = 0;
            }
            int v153 = v134 + 1;
            unsigned int v154 = v75[7];
            if (v75[7])
            {
              uint64_t v155 = v143 + v146;
              unsigned int v35 = a7;
              if (v154 < 0xF0)
              {
                if (v154 == 63)
                {
                  int32x4_t v156 = *(int32x4_t *)v155;
                  int32x4_t v29 = *(int32x4_t *)(v155 + 16);
                  int32x4_t v28 = *(int32x4_t *)(v155 + 32);
                  int32x4_t v157 = *(int32x4_t *)(v155 + 48);
                  int32x4_t *v153 = vuzp1q_s32(*(int32x4_t *)v155, v28);
                  *(int32x4_t *)((char *)v153 + v26) = vuzp2q_s32(v156, v28);
                  int32x4_t v158 = (int32x4_t *)((char *)v153 + v81);
                  *int32x4_t v158 = vuzp1q_s32(v29, v157);
                  int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v157);
                  *(int16x8_t *)((char *)v158 + v26) = v30;
                }
                else if (v154 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v155);
                  int32x4_t *v153 = (int32x4_t)v30;
                  *(int16x8_t *)((char *)v153 + v26) = v30;
                  *(int16x8_t *)((char *)v153 + v81) = v30;
                  *(int16x8_t *)((char *)v153 + 3 * a11) = v30;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v153, v26, v155, v154, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v153, v26, v155, v154, v79);
              }
            }
            else
            {
              v153->i64[0] = 0;
              v134[1].i64[1] = 0;
              int8x8_t v36 = (uint64_t *)((char *)v153->i64 + v26);
              *int8x8_t v36 = 0;
              v36[1] = 0;
              unsigned int v37 = (uint64_t *)((char *)v153->i64 + v81);
              *unsigned int v37 = 0;
              v37[1] = 0;
              int v38 = (uint64_t *)((char *)v153->i64 + v247);
              *int v38 = 0;
              v38[1] = 0;
              unsigned int v35 = a7;
            }
            uint64_t v25 = v245;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v25;
          block[5] = v74;
          char v255 = v44;
          char v256 = v246;
          int v251 = v228;
          unsigned int v252 = v42 - v40;
          block[6] = v75;
          int64x2_t v249 = v76;
          uint64_t v26 = a11;
          uint64_t v250 = a11;
          unsigned int v253 = v239;
          unsigned int v254 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
            uint64_t v25 = v245;
            unsigned int v35 = a7;
LABEL_28:
            unsigned int v39 = v33 + 1;
            goto LABEL_29;
          }
          uint64_t v83 = *(void *)(v25 + 208);
          int v84 = *(_DWORD *)(v83 + 52);
          unsigned int v85 = *v75;
          unsigned int v35 = a7;
          if (*v75)
          {
            if (v85 < 0xF0)
            {
              if (v85 == 63)
              {
                int32x4_t v159 = v74[1];
                int32x4_t v28 = v74[2];
                int32x4_t v160 = v74[3];
                int32x4_t v161 = vuzp2q_s32(*v74, v28);
                int32x4_t v258 = vuzp1q_s32(*v74, v28);
                int32x4_t v260 = v161;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v159, v160);
                int32x4_t v29 = vuzp2q_s32(v159, v160);
                int16x8_t v262 = v30;
                int32x4_t v264 = v29;
                uint64_t v86 = 64;
              }
              else if (v85 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16(v74->i16);
                int32x4_t v258 = (int32x4_t)v30;
                int32x4_t v260 = (int32x4_t)v30;
                int16x8_t v262 = v30;
                int32x4_t v264 = (int32x4_t)v30;
                uint64_t v86 = 2;
              }
              else
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v258, 32, (uint64_t)v74, v85, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v258, 32, (uint64_t)v74, v85, *(_DWORD *)(v83 + 52));
              uint64_t v86 = 32;
            }
          }
          else
          {
            uint64_t v86 = 0;
            int32x4_t v258 = 0uLL;
            int32x4_t v260 = 0uLL;
            int16x8_t v262 = 0uLL;
            int32x4_t v264 = 0uLL;
          }
          uint64_t v162 = (uint64_t)v74->i64 + v86;
          unsigned int v163 = v75[1];
          if (v75[1])
          {
            if (v163 < 0xF0)
            {
              if (v163 == 63)
              {
                int32x4_t v165 = *(int32x4_t *)(v162 + 16);
                int32x4_t v28 = *(int32x4_t *)(v162 + 32);
                int32x4_t v166 = *(int32x4_t *)(v162 + 48);
                int32x4_t v167 = vuzp2q_s32(*(int32x4_t *)v162, v28);
                int32x4_t v266 = vuzp1q_s32(*(int32x4_t *)v162, v28);
                int32x4_t v268 = v167;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v165, v166);
                int32x4_t v29 = vuzp2q_s32(v165, v166);
                int16x8_t v270 = v30;
                int32x4_t v272 = v29;
                uint64_t v164 = 64;
              }
              else if (v163 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v162);
                int32x4_t v266 = (int32x4_t)v30;
                int32x4_t v268 = (int32x4_t)v30;
                int16x8_t v270 = v30;
                int32x4_t v272 = (int32x4_t)v30;
                uint64_t v164 = 2;
              }
              else
              {
                uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v266, 32, v162, v163, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v266, 32, v162, v163, v84);
              uint64_t v164 = 32;
            }
          }
          else
          {
            uint64_t v164 = 0;
            int32x4_t v266 = 0uLL;
            int32x4_t v268 = 0uLL;
            int16x8_t v270 = 0uLL;
            int32x4_t v272 = 0uLL;
          }
          uint64_t v168 = v162 + v164;
          unsigned int v169 = v75[2];
          if (v75[2])
          {
            if (v169 < 0xF0)
            {
              if (v169 == 63)
              {
                int32x4_t v171 = *(int32x4_t *)(v168 + 16);
                int32x4_t v28 = *(int32x4_t *)(v168 + 32);
                int32x4_t v172 = *(int32x4_t *)(v168 + 48);
                int32x4_t v173 = vuzp2q_s32(*(int32x4_t *)v168, v28);
                int32x4_t v259 = vuzp1q_s32(*(int32x4_t *)v168, v28);
                int32x4_t v261 = v173;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v171, v172);
                int32x4_t v29 = vuzp2q_s32(v171, v172);
                int16x8_t v263 = v30;
                int32x4_t v265 = v29;
                uint64_t v170 = 64;
              }
              else if (v169 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v168);
                int32x4_t v259 = (int32x4_t)v30;
                int32x4_t v261 = (int32x4_t)v30;
                int16x8_t v263 = v30;
                int32x4_t v265 = (int32x4_t)v30;
                uint64_t v170 = 2;
              }
              else
              {
                uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v259, 32, v168, v169, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v259, 32, v168, v169, v84);
              uint64_t v170 = 32;
            }
          }
          else
          {
            uint64_t v170 = 0;
            int32x4_t v259 = 0uLL;
            int32x4_t v261 = 0uLL;
            int16x8_t v263 = 0uLL;
            int32x4_t v265 = 0uLL;
          }
          uint64_t v174 = v168 + v170;
          unsigned int v175 = v75[3];
          if (v75[3])
          {
            if (v175 < 0xF0)
            {
              if (v175 == 63)
              {
                int32x4_t v177 = *(int32x4_t *)(v174 + 16);
                int32x4_t v28 = *(int32x4_t *)(v174 + 32);
                int32x4_t v178 = *(int32x4_t *)(v174 + 48);
                int32x4_t v179 = vuzp2q_s32(*(int32x4_t *)v174, v28);
                int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v174, v28);
                int32x4_t v269 = v179;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v177, v178);
                int32x4_t v29 = vuzp2q_s32(v177, v178);
                int16x8_t v271 = v30;
                int32x4_t v273 = v29;
                uint64_t v176 = 64;
              }
              else if (v175 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v174);
                int32x4_t v267 = (int32x4_t)v30;
                int32x4_t v269 = (int32x4_t)v30;
                int16x8_t v271 = v30;
                int32x4_t v273 = (int32x4_t)v30;
                uint64_t v176 = 2;
              }
              else
              {
                uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v267, 32, v174, v175, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v267, 32, v174, v175, v84);
              uint64_t v176 = 32;
            }
          }
          else
          {
            uint64_t v176 = 0;
            int32x4_t v267 = 0uLL;
            int32x4_t v269 = 0uLL;
            int16x8_t v271 = 0uLL;
            int32x4_t v273 = 0uLL;
          }
          uint64_t v180 = v174 + v176;
          unsigned int v181 = v75[4];
          if (v75[4])
          {
            if (v181 < 0xF0)
            {
              if (v181 == 63)
              {
                int32x4_t v183 = *(int32x4_t *)(v180 + 16);
                int32x4_t v28 = *(int32x4_t *)(v180 + 32);
                int32x4_t v184 = *(int32x4_t *)(v180 + 48);
                int32x4_t v185 = vuzp2q_s32(*(int32x4_t *)v180, v28);
                int32x4_t v274 = vuzp1q_s32(*(int32x4_t *)v180, v28);
                int32x4_t v276 = v185;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v183, v184);
                int32x4_t v29 = vuzp2q_s32(v183, v184);
                int16x8_t v278 = v30;
                int32x4_t v280 = v29;
                uint64_t v182 = 64;
              }
              else if (v181 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v180);
                int32x4_t v274 = (int32x4_t)v30;
                int32x4_t v276 = (int32x4_t)v30;
                int16x8_t v278 = v30;
                int32x4_t v280 = (int32x4_t)v30;
                uint64_t v182 = 2;
              }
              else
              {
                uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v274, 32, v180, v181, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v274, 32, v180, v181, v84);
              uint64_t v182 = 32;
            }
          }
          else
          {
            uint64_t v182 = 0;
            int32x4_t v274 = 0uLL;
            int32x4_t v276 = 0uLL;
            int16x8_t v278 = 0uLL;
            int32x4_t v280 = 0uLL;
          }
          uint64_t v186 = v180 + v182;
          unsigned int v187 = v75[5];
          if (v75[5])
          {
            if (v187 < 0xF0)
            {
              if (v187 == 63)
              {
                int32x4_t v189 = *(int32x4_t *)(v186 + 16);
                int32x4_t v28 = *(int32x4_t *)(v186 + 32);
                int32x4_t v190 = *(int32x4_t *)(v186 + 48);
                int32x4_t v191 = vuzp2q_s32(*(int32x4_t *)v186, v28);
                int32x4_t v282 = vuzp1q_s32(*(int32x4_t *)v186, v28);
                int32x4_t v284 = v191;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v189, v190);
                int32x4_t v29 = vuzp2q_s32(v189, v190);
                int16x8_t v286 = v30;
                int32x4_t v288 = v29;
                uint64_t v188 = 64;
              }
              else if (v187 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v186);
                int32x4_t v282 = (int32x4_t)v30;
                int32x4_t v284 = (int32x4_t)v30;
                int16x8_t v286 = v30;
                int32x4_t v288 = (int32x4_t)v30;
                uint64_t v188 = 2;
              }
              else
              {
                uint64_t v188 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v282, 32, v186, v187, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v282, 32, v186, v187, v84);
              uint64_t v188 = 32;
            }
          }
          else
          {
            uint64_t v188 = 0;
            int32x4_t v282 = 0uLL;
            int32x4_t v284 = 0uLL;
            int16x8_t v286 = 0uLL;
            int32x4_t v288 = 0uLL;
          }
          uint64_t v192 = v186 + v188;
          unsigned int v193 = v75[6];
          if (v75[6])
          {
            if (v193 < 0xF0)
            {
              if (v193 == 63)
              {
                int32x4_t v196 = *(int32x4_t *)(v192 + 16);
                int32x4_t v28 = *(int32x4_t *)(v192 + 32);
                int32x4_t v197 = *(int32x4_t *)(v192 + 48);
                int32x4_t v198 = vuzp2q_s32(*(int32x4_t *)v192, v28);
                int32x4_t v275 = vuzp1q_s32(*(int32x4_t *)v192, v28);
                int32x4_t v277 = v198;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v196, v197);
                int32x4_t v29 = vuzp2q_s32(v196, v197);
                int16x8_t v279 = v30;
                int32x4_t v281 = v29;
                uint64_t v194 = 64;
                unsigned int v195 = v75[7];
                if (!v75[7]) {
                  goto LABEL_239;
                }
              }
              else if (v193 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v192);
                int32x4_t v275 = (int32x4_t)v30;
                int32x4_t v277 = (int32x4_t)v30;
                int16x8_t v279 = v30;
                int32x4_t v281 = (int32x4_t)v30;
                uint64_t v194 = 2;
                unsigned int v195 = v75[7];
                if (!v75[7]) {
                  goto LABEL_239;
                }
              }
              else
              {
                uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v275, 32, v192, v193, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
                unsigned int v195 = v75[7];
                if (!v75[7])
                {
LABEL_239:
                  int32x4_t v283 = 0uLL;
                  int32x4_t v285 = 0uLL;
                  int16x8_t v287 = 0uLL;
                  int32x4_t v289 = 0uLL;
                  goto LABEL_242;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v275, 32, v192, v193, v84);
              uint64_t v194 = 32;
              unsigned int v195 = v75[7];
              if (!v75[7]) {
                goto LABEL_239;
              }
            }
          }
          else
          {
            uint64_t v194 = 0;
            int32x4_t v275 = 0uLL;
            int32x4_t v277 = 0uLL;
            int16x8_t v279 = 0uLL;
            int32x4_t v281 = 0uLL;
            unsigned int v195 = v75[7];
            if (!v75[7]) {
              goto LABEL_239;
            }
          }
          uint64_t v199 = v192 + v194;
          if (v195 < 0xF0)
          {
            if (v195 == 63)
            {
              int32x4_t v200 = *(int32x4_t *)(v199 + 16);
              int32x4_t v28 = *(int32x4_t *)(v199 + 32);
              int32x4_t v201 = *(int32x4_t *)(v199 + 48);
              int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v199, v28);
              int32x4_t v283 = vuzp1q_s32(*(int32x4_t *)v199, v28);
              int32x4_t v285 = v202;
              int16x8_t v30 = (int16x8_t)vuzp1q_s32(v200, v201);
              int32x4_t v29 = vuzp2q_s32(v200, v201);
              int16x8_t v287 = v30;
              int32x4_t v289 = v29;
            }
            else if (v195 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v199);
              int32x4_t v283 = (int32x4_t)v30;
              int32x4_t v285 = (int32x4_t)v30;
              int16x8_t v287 = v30;
              int32x4_t v289 = (int32x4_t)v30;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v283, 32, v199, v195, *(int8x8_t *)v30.i8, *(double *)v29.i64, *(int8x8_t *)v28.i8);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v283, 32, v199, v195, v84);
          }
LABEL_242:
          unsigned int v39 = v33 + 1;
          unint64_t v203 = v253;
          uint64_t v25 = v245;
          if (v253)
          {
            unint64_t v204 = 0;
            int64x2_t v205 = &v258.i8[32 * v251 + 2 * v252];
            unsigned int v206 = v254;
            do
            {
              if (v206)
              {
                uint64_t v207 = 0;
                int64x2_t v208 = &v249->i8[v250 * v204];
                do
                {
                  v208[v207] = v205[v207];
                  ++v207;
                  unsigned int v206 = v254;
                }
                while (2 * (unint64_t)v254 > v207);
                unint64_t v203 = v253;
              }
              ++v204;
              v205 += 32;
            }
            while (v204 < v203);
          }
LABEL_29:
          BOOL v20 = v33 == v233 >> 4;
          unsigned int v33 = v39;
        }
        while (!v20);
        BOOL v20 = v16++ == v224;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v246 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v238 = v20;
  uint64_t v239 = v21;
  uint64_t v224 = v22;
  uint64_t v23 = v12;
  uint64_t v387 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v24 = v23;
  unsigned int v243 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v223 = v14 + a10 - 1;
  unsigned int v225 = v223 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v247 = v24;
  if (*(void *)(v24 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v24 = v247;
    int v29 = CacheMode & 0xF00;
  }
  else
  {
    int v29 = 0;
  }
  BOOL v30 = (v29 & 0xD00) == 0 || v29 == 768;
  int v31 = v29 & 0xE00;
  int v33 = !v30 && v31 != 1024;
  int v237 = v33;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v35 = v247;
  BOOL v236 = isLevelTiled;
  unsigned int v36 = v246;
  if (v25 <= v225)
  {
    unsigned int v235 = v246 + a9 - 1;
    if (v246 >> 4 <= v235 >> 4)
    {
      uint64_t v37 = a11;
      unsigned int v220 = v19 - 1;
      unsigned int v245 = (v19 - 1) >> 4;
      int v244 = ((v19 - 1) & 0xF) + 1;
      int v221 = ((v17 - 1) & 0xF) + 1;
      unsigned int v222 = (v17 - 1) >> 4;
      uint64_t v228 = 8 * a11;
      uint64_t v229 = 4 * a11;
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v39 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v38, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v38));
      __int32 v234 = v39.i32[0] | v39.i32[1];
      BOOL v232 = v39.i32[1] != 0;
      int8x8_t v233 = v39;
      BOOL v231 = v39.i32[0] != 0;
      unint64_t v219 = 8 * v27 * (unint64_t)v26;
      uint64_t v226 = 3 * a11;
      uint64_t v227 = 2 * a11;
      do
      {
        unsigned int v40 = (16 * v25) | 0xF;
        if (16 * v25 <= v243) {
          int v41 = v243;
        }
        else {
          int v41 = 16 * v25;
        }
        unsigned int v42 = v246 >> 4;
        if (v223 < v40) {
          unsigned int v40 = v223;
        }
        unsigned int v242 = 16 * v25;
        int v230 = v41 - 16 * v25;
        int v241 = v40 - v41 + 1;
        int v43 = v221;
        if (v25 != v222) {
          int v43 = 16;
        }
        unsigned int v248 = v43;
        uint64_t v240 = v224 + (v41 - v243) * v37;
        do
        {
          unsigned int v45 = 16 * v42;
          unsigned int v46 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v36) {
            int v47 = v36;
          }
          else {
            int v47 = 16 * v42;
          }
          if (v235 < v46) {
            unsigned int v46 = v246 + a9 - 1;
          }
          int v48 = v46 - v47 + 1;
          if (v42 == v245) {
            unsigned int v49 = v244;
          }
          else {
            unsigned int v49 = 16;
          }
          BOOL v50 = 1;
          if (v242 >= v243 && v45 >= v36)
          {
            int v51 = v244;
            if (v42 != v245) {
              int v51 = 16;
            }
            BOOL v50 = v48 != v51 || v241 != v248;
          }
          if (v236)
          {
            unsigned int v74 = 0;
            uint64_t v75 = v219 >> (*(unsigned char *)(v35 + 57) != 0);
            char v76 = 1;
            if (v75 > 127)
            {
              if (v75 > 511)
              {
                if (v75 == 512)
                {
                  unsigned int v74 = 16;
                  char v77 = 1;
                  unsigned int v78 = 16;
                }
                else
                {
                  char v77 = 1;
                  unsigned int v78 = 0;
                  if (v75 == 1024)
                  {
                    unsigned int v78 = 8;
                    unsigned int v74 = 16;
                  }
                }
              }
              else if (v75 == 128)
              {
                char v76 = 0;
                char v77 = 0;
                unsigned int v74 = 32;
                unsigned int v78 = 32;
              }
              else
              {
                char v77 = 1;
                unsigned int v78 = 0;
                if (v75 == 256)
                {
                  char v76 = 0;
                  unsigned int v78 = 16;
                  unsigned int v74 = 32;
                }
              }
            }
            else
            {
              char v77 = 1;
              unsigned int v78 = 0;
              switch(v75)
              {
                case 4:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v78 = 128;
                  unsigned int v74 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v74 = 128;
                  unsigned int v78 = 128;
                  break;
                case 16:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v78 = 64;
                  unsigned int v74 = 128;
                  break;
                case 32:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v74 = 64;
                  unsigned int v78 = 64;
                  break;
                default:
                  if (v75 == 64)
                  {
                    char v76 = 0;
                    char v77 = 0;
                    unsigned int v78 = 32;
                    unsigned int v74 = 64;
                  }
                  break;
              }
            }
            unsigned int v210 = (v74 >> 4) - 1;
            if (v76)
            {
              unsigned int v211 = 0;
              if (v77) {
                goto LABEL_243;
              }
LABEL_232:
              unsigned int v212 = 32 - __clz(~(-1 << -(char)__clz(((v78 + 15) >> 4) - 1)));
              if (v212 | v211) {
                goto LABEL_233;
              }
LABEL_244:
              uint64_t v214 = 0;
            }
            else
            {
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(v210)));
              if ((v77 & 1) == 0) {
                goto LABEL_232;
              }
LABEL_243:
              unsigned int v212 = 0;
              if (!v211) {
                goto LABEL_244;
              }
LABEL_233:
              int v213 = 0;
              uint64_t v214 = 0;
              int v215 = v42 & v210;
              BOOL v216 = v211 != 0;
              BOOL v217 = v212 != 0;
              int v218 = 1;
              do
              {
                --v211;
                if (v216) {
                  v214 |= (unint64_t)(v218 & v215) << v213++;
                }
                else {
                  unsigned int v211 = 0;
                }
                --v212;
                if (v217) {
                  v214 |= (unint64_t)(v218 & v25 & ((v78 >> 4) - 1)) << v213++;
                }
                else {
                  unsigned int v212 = 0;
                }
                v218 *= 2;
                --v213;
                BOOL v217 = v212 != 0;
                BOOL v216 = v211 != 0;
              }
              while (v212 | v211);
            }
            unint64_t v60 = ((unint64_t)(v45 / v74 + v242 / v78 * ((v74 + v220) / v74)) << 14) + (v214 << 10);
            goto LABEL_60;
          }
          if (v234)
          {
            int v53 = 0;
            uint64_t v54 = 0;
            int v55 = 1;
            BOOL v56 = v232;
            BOOL v57 = v231;
            __int32 v58 = v233.i32[1];
            __int32 v59 = v233.i32[0];
            do
            {
              --v58;
              if (v56) {
                v54 |= (unint64_t)(v55 & v42) << v53++;
              }
              else {
                __int32 v58 = 0;
              }
              --v59;
              if (v57) {
                v54 |= (unint64_t)(v55 & v25) << v53++;
              }
              else {
                __int32 v59 = 0;
              }
              v55 *= 2;
              --v53;
              BOOL v57 = v59 != 0;
              BOOL v56 = v58 != 0;
            }
            while (v59 | v58);
          }
          else
          {
            uint64_t v54 = 0;
          }
          unint64_t v60 = v54 << 10;
LABEL_60:
          unsigned int v61 = *(_DWORD *)(v35 + 128) >> (*(unsigned char *)(v35 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 15;
          if (v62 < 0x20) {
            unsigned int v63 = 0;
          }
          else {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 4) - 1)));
          }
          unsigned int v64 = *(_DWORD *)(v35 + 132) >> (*(unsigned char *)(v35 + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20)
          {
            unsigned int v66 = 0;
            if (!v63)
            {
LABEL_86:
              unint64_t v68 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
            if (!(v66 | v63)) {
              goto LABEL_86;
            }
          }
          int v67 = 0;
          unint64_t v68 = 0;
          BOOL v69 = v63 != 0;
          BOOL v70 = v66 != 0;
          int v71 = 1;
          do
          {
            --v63;
            BOOL v72 = !v69;
            if (v69)
            {
              unint64_t v73 = ((unint64_t)(v71 & v42) << v67) | v68;
            }
            else
            {
              unsigned int v63 = 0;
              unint64_t v73 = v68;
            }
            if (!v72) {
              ++v67;
            }
            --v66;
            if (v70)
            {
              unint64_t v68 = ((unint64_t)(v71 & v25) << v67) | v73;
            }
            else
            {
              unsigned int v66 = 0;
              unint64_t v68 = v73;
            }
            if (v70) {
              ++v67;
            }
            v71 *= 2;
            --v67;
            BOOL v70 = v66 != 0;
            BOOL v69 = v63 != 0;
          }
          while (v66 | v63);
LABEL_87:
          int v79 = (unsigned char *)(v238 + v60);
          if (v237)
          {
            memcpy(__dst, v79, sizeof(__dst));
            uint64_t v35 = v247;
            unsigned int v36 = v246;
            int v79 = __dst;
          }
          unsigned int v80 = (unsigned __int8 *)(v239 + 8 * v68);
          uint64_t v81 = (float64x2_t *)(v240 + 8 * (v47 - v36));
          char v82 = v49 < 0x10 || v50;
          if ((v82 & 1) == 0 && v248 > 0xF)
          {
            uint64_t v83 = *(void *)(v35 + 208);
            int v84 = *(_DWORD *)(v83 + 52);
            unsigned int v85 = *v80;
            if (*v80)
            {
              uint64_t v37 = a11;
              uint64_t v87 = 3 * a11;
              uint64_t v86 = 2 * a11;
              if (v85 < 0xF0)
              {
                if (v85 == 7)
                {
                  float64x2_t v96 = vld1q_dup_f64((const double *)v79);
                  *uint64_t v81 = v96;
                  v81[1] = v96;
                  v81[2] = v96;
                  v81[3] = v96;
                  uint64_t v97 = (float64x2_t *)((char *)v81 + a11);
                  *uint64_t v97 = v96;
                  v97[1] = v96;
                  v97[2] = v96;
                  v97[3] = v96;
                  int8x8_t v98 = (float64x2_t *)((char *)v81 + v227);
                  *int8x8_t v98 = v96;
                  v98[1] = v96;
                  v98[2] = v96;
                  v98[3] = v96;
                  int v99 = (float64x2_t *)((char *)v81 + v226);
                  *int v99 = v96;
                  v99[1] = v96;
                  v99[2] = v96;
                  v99[3] = v96;
                  uint64_t v88 = 8;
                }
                else
                {
                  uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v81, a11, (uint64_t)v79, v85);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)v81, a11, (unint64_t)v79, v85, *(_DWORD *)(v83 + 52));
                uint64_t v88 = 128;
              }
            }
            else
            {
              uint64_t v88 = 0;
              v81[2] = 0u;
              v81[3] = 0u;
              *uint64_t v81 = 0u;
              v81[1] = 0u;
              uint64_t v37 = a11;
              uint64_t v93 = (_OWORD *)((char *)v81->f64 + a11);
              v93[2] = 0u;
              v93[3] = 0u;
              *uint64_t v93 = 0u;
              v93[1] = 0u;
              uint64_t v87 = 3 * a11;
              uint64_t v86 = 2 * a11;
              int8x8_t v94 = (_OWORD *)((char *)v81->f64 + v227);
              v94[2] = 0u;
              v94[3] = 0u;
              *int8x8_t v94 = 0u;
              v94[1] = 0u;
              unsigned int v95 = (_OWORD *)((char *)v81->f64 + v226);
              v95[2] = 0u;
              v95[3] = 0u;
              *unsigned int v95 = 0u;
              v95[1] = 0u;
            }
            int32x4_t v101 = (const double *)&v79[v88];
            uint64_t v102 = (float64x2_t *)((char *)v81 + v229);
            unsigned int v103 = v80[1];
            if (v80[1])
            {
              if (v103 < 0xF0)
              {
                if (v103 == 7)
                {
                  float64x2_t v108 = vld1q_dup_f64(v101);
                  float64x2_t *v102 = v108;
                  v102[1] = v108;
                  v102[2] = v108;
                  v102[3] = v108;
                  int8x8_t v109 = (float64x2_t *)((char *)v102 + v37);
                  float64x2_t *v109 = v108;
                  v109[1] = v108;
                  v109[2] = v108;
                  v109[3] = v108;
                  int32x4_t v110 = (float64x2_t *)((char *)v102 + v86);
                  *int32x4_t v110 = v108;
                  v110[1] = v108;
                  v110[2] = v108;
                  v110[3] = v108;
                  int32x4_t v111 = (float64x2_t *)((char *)v102 + v87);
                  float64x2_t *v111 = v108;
                  v111[1] = v108;
                  v111[2] = v108;
                  v111[3] = v108;
                  uint64_t v104 = 8;
                }
                else
                {
                  uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((float64_t *)((char *)v81->f64 + v229), v37, (uint64_t)v101, v103);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)((char *)v81 + v229), v37, (unint64_t)v101, v103, v84);
                uint64_t v104 = 128;
              }
            }
            else
            {
              uint64_t v104 = 0;
              v102[2] = 0u;
              v102[3] = 0u;
              float64x2_t *v102 = 0u;
              v102[1] = 0u;
              unsigned int v105 = (_OWORD *)((char *)v102->f64 + v37);
              v105[2] = 0u;
              v105[3] = 0u;
              *unsigned int v105 = 0u;
              v105[1] = 0u;
              uint64_t v106 = (_OWORD *)((char *)v102->f64 + v86);
              v106[2] = 0u;
              v106[3] = 0u;
              *uint64_t v106 = 0u;
              v106[1] = 0u;
              int8x8_t v107 = (_OWORD *)((char *)v102->f64 + v87);
              v107[2] = 0u;
              v107[3] = 0u;
              _OWORD *v107 = 0u;
              v107[1] = 0u;
            }
            uint64_t v112 = (const double *)((char *)v101 + v104);
            uint64_t v113 = (int16x4_t *)&v81[4];
            unsigned int v114 = v80[2];
            if (v80[2])
            {
              if (v114 < 0xF0)
              {
                if (v114 == 7)
                {
                  float64x2_t v119 = vld1q_dup_f64(v112);
                  v81[4] = v119;
                  v81[5] = v119;
                  v81[6] = v119;
                  v81[7] = v119;
                  int32x4_t v120 = (float64x2_t *)((char *)v113 + v37);
                  *int32x4_t v120 = v119;
                  v120[1] = v119;
                  v120[2] = v119;
                  v120[3] = v119;
                  int32x4_t v121 = (float64x2_t *)((char *)v113 + v86);
                  *int32x4_t v121 = v119;
                  v121[1] = v119;
                  v121[2] = v119;
                  v121[3] = v119;
                  unsigned int v122 = (float64x2_t *)((char *)v113 + v87);
                  float64x2_t *v122 = v119;
                  v122[1] = v119;
                  uint64_t v115 = 8;
                  v122[2] = v119;
                  v122[3] = v119;
                }
                else
                {
                  uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v113, v37, (uint64_t)v112, v114);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v113, v37, (unint64_t)v112, v114, v84);
                uint64_t v115 = 128;
              }
            }
            else
            {
              uint64_t v115 = 0;
              v81[6] = 0u;
              v81[7] = 0u;
              *(_OWORD *)v113->i8 = 0u;
              v81[5] = 0u;
              uint64_t v116 = (_OWORD *)((char *)v113 + v37);
              v116[2] = 0u;
              v116[3] = 0u;
              *uint64_t v116 = 0u;
              v116[1] = 0u;
              unsigned int v117 = (_OWORD *)((char *)v113 + v86);
              v117[2] = 0u;
              v117[3] = 0u;
              *unsigned int v117 = 0u;
              v117[1] = 0u;
              uint64_t v118 = (_OWORD *)((char *)v113 + v87);
              v118[2] = 0u;
              v118[3] = 0u;
              *uint64_t v118 = 0u;
              v118[1] = 0u;
            }
            uint64_t v123 = (const double *)((char *)v112 + v115);
            uint64_t v124 = (int16x4_t *)&v102[4];
            unsigned int v125 = v80[3];
            if (v80[3])
            {
              if (v125 < 0xF0)
              {
                if (v125 == 7)
                {
                  float64x2_t v130 = vld1q_dup_f64(v123);
                  v102[4] = v130;
                  v102[5] = v130;
                  v102[6] = v130;
                  v102[7] = v130;
                  int32x4_t v131 = (float64x2_t *)((char *)v124 + v37);
                  float64x2_t *v131 = v130;
                  v131[1] = v130;
                  v131[2] = v130;
                  v131[3] = v130;
                  unsigned int v132 = (float64x2_t *)((char *)v124 + v86);
                  *unsigned int v132 = v130;
                  v132[1] = v130;
                  v132[2] = v130;
                  v132[3] = v130;
                  uint64_t v133 = (float64x2_t *)((char *)v124 + v87);
                  float64x2_t *v133 = v130;
                  v133[1] = v130;
                  uint64_t v126 = 8;
                  v133[2] = v130;
                  v133[3] = v130;
                }
                else
                {
                  uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v124, v37, (uint64_t)v123, v125);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v124, v37, (unint64_t)v123, v125, v84);
                uint64_t v126 = 128;
              }
            }
            else
            {
              uint64_t v126 = 0;
              v102[6] = 0u;
              v102[7] = 0u;
              *(_OWORD *)v124->i8 = 0u;
              v102[5] = 0u;
              BOOL v127 = (_OWORD *)((char *)v124 + v37);
              v127[2] = 0u;
              v127[3] = 0u;
              *BOOL v127 = 0u;
              v127[1] = 0u;
              int v128 = (_OWORD *)((char *)v124 + v86);
              v128[2] = 0u;
              v128[3] = 0u;
              *int v128 = 0u;
              v128[1] = 0u;
              unint64_t v129 = (_OWORD *)((char *)v124 + v87);
              v129[2] = 0u;
              v129[3] = 0u;
              _OWORD *v129 = 0u;
              v129[1] = 0u;
            }
            unsigned int v134 = (const double *)((char *)v123 + v126);
            unsigned int v135 = (float64x2_t *)((char *)v81 + v228);
            unsigned int v136 = v80[4];
            if (v80[4])
            {
              if (v136 < 0xF0)
              {
                if (v136 == 7)
                {
                  float64x2_t v141 = vld1q_dup_f64(v134);
                  float64x2_t *v135 = v141;
                  v135[1] = v141;
                  v135[2] = v141;
                  v135[3] = v141;
                  int8x8_t v142 = (float64x2_t *)((char *)v135 + v37);
                  *int8x8_t v142 = v141;
                  v142[1] = v141;
                  v142[2] = v141;
                  v142[3] = v141;
                  uint64_t v143 = (float64x2_t *)((char *)v135 + v86);
                  *uint64_t v143 = v141;
                  v143[1] = v141;
                  v143[2] = v141;
                  v143[3] = v141;
                  unsigned int v144 = (float64x2_t *)((char *)v135 + v87);
                  float64x2_t *v144 = v141;
                  v144[1] = v141;
                  v144[2] = v141;
                  v144[3] = v141;
                  uint64_t v137 = 8;
                }
                else
                {
                  uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v81->f64[(unint64_t)v228 / 8], v37, (uint64_t)v134, v136);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)((char *)v81 + v228), v37, (unint64_t)v134, v136, v84);
                uint64_t v137 = 128;
              }
            }
            else
            {
              uint64_t v137 = 0;
              v135[2] = 0u;
              v135[3] = 0u;
              float64x2_t *v135 = 0u;
              v135[1] = 0u;
              uint64_t v138 = (_OWORD *)((char *)v135->f64 + v37);
              v138[2] = 0u;
              v138[3] = 0u;
              *uint64_t v138 = 0u;
              v138[1] = 0u;
              int v139 = (_OWORD *)((char *)v135->f64 + v86);
              v139[2] = 0u;
              v139[3] = 0u;
              *int v139 = 0u;
              v139[1] = 0u;
              int32x4_t v140 = (_OWORD *)((char *)v135->f64 + v87);
              v140[2] = 0u;
              v140[3] = 0u;
              *int32x4_t v140 = 0u;
              v140[1] = 0u;
            }
            unsigned int v145 = (const double *)((char *)v134 + v137);
            uint64_t v146 = (float64x2_t *)((char *)v81 + 12 * a11);
            unsigned int v147 = v80[5];
            if (v80[5])
            {
              if (v147 < 0xF0)
              {
                if (v147 == 7)
                {
                  float64x2_t v152 = vld1q_dup_f64(v145);
                  float64x2_t *v146 = v152;
                  v146[1] = v152;
                  v146[2] = v152;
                  v146[3] = v152;
                  int v153 = (float64x2_t *)((char *)v146 + v37);
                  float64x2_t *v153 = v152;
                  v153[1] = v152;
                  v153[2] = v152;
                  v153[3] = v152;
                  unsigned int v154 = (float64x2_t *)((char *)v146 + v86);
                  *unsigned int v154 = v152;
                  v154[1] = v152;
                  v154[2] = v152;
                  v154[3] = v152;
                  uint64_t v155 = (float64x2_t *)((char *)v146 + v87);
                  float64x2_t *v155 = v152;
                  v155[1] = v152;
                  v155[2] = v152;
                  v155[3] = v152;
                  uint64_t v148 = 8;
                }
                else
                {
                  uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v146, v37, (uint64_t)v145, v147);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)v146, v37, (unint64_t)v145, v147, v84);
                uint64_t v148 = 128;
              }
            }
            else
            {
              uint64_t v148 = 0;
              v146[2] = 0u;
              v146[3] = 0u;
              float64x2_t *v146 = 0u;
              v146[1] = 0u;
              uint64_t v149 = (_OWORD *)((char *)v146->f64 + v37);
              v149[2] = 0u;
              v149[3] = 0u;
              *uint64_t v149 = 0u;
              v149[1] = 0u;
              int32x4_t v150 = (_OWORD *)((char *)v146->f64 + v86);
              v150[2] = 0u;
              v150[3] = 0u;
              *int32x4_t v150 = 0u;
              v150[1] = 0u;
              int32x4_t v151 = (_OWORD *)((char *)v146->f64 + v87);
              v151[2] = 0u;
              v151[3] = 0u;
              _OWORD *v151 = 0u;
              v151[1] = 0u;
            }
            int32x4_t v156 = (const double *)((char *)v145 + v148);
            int32x4_t v157 = (int16x4_t *)&v135[4];
            unsigned int v158 = v80[6];
            if (v80[6])
            {
              if (v158 < 0xF0)
              {
                if (v158 == 7)
                {
                  float64x2_t v163 = vld1q_dup_f64(v156);
                  v135[4] = v163;
                  v135[5] = v163;
                  v135[6] = v163;
                  v135[7] = v163;
                  uint64_t v164 = (float64x2_t *)((char *)v157 + v37);
                  *uint64_t v164 = v163;
                  v164[1] = v163;
                  v164[2] = v163;
                  v164[3] = v163;
                  int32x4_t v165 = (float64x2_t *)((char *)v157 + v86);
                  *int32x4_t v165 = v163;
                  v165[1] = v163;
                  v165[2] = v163;
                  v165[3] = v163;
                  int32x4_t v166 = (float64x2_t *)((char *)v157 + v87);
                  float64x2_t *v166 = v163;
                  v166[1] = v163;
                  uint64_t v159 = 8;
                  v166[2] = v163;
                  v166[3] = v163;
                }
                else
                {
                  uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v157, v37, (uint64_t)v156, v158);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v157, v37, (unint64_t)v156, v158, v84);
                uint64_t v159 = 128;
              }
            }
            else
            {
              uint64_t v159 = 0;
              v135[6] = 0u;
              v135[7] = 0u;
              *(_OWORD *)v157->i8 = 0u;
              v135[5] = 0u;
              int32x4_t v160 = (_OWORD *)((char *)v157 + v37);
              v160[2] = 0u;
              v160[3] = 0u;
              *int32x4_t v160 = 0u;
              v160[1] = 0u;
              int32x4_t v161 = (_OWORD *)((char *)v157 + v86);
              v161[2] = 0u;
              v161[3] = 0u;
              *int32x4_t v161 = 0u;
              v161[1] = 0u;
              uint64_t v162 = (_OWORD *)((char *)v157 + v87);
              v162[2] = 0u;
              v162[3] = 0u;
              *uint64_t v162 = 0u;
              v162[1] = 0u;
            }
            int32x4_t v167 = (int16x4_t *)&v146[4];
            unsigned int v168 = v80[7];
            if (v80[7])
            {
              unsigned int v169 = (const double *)((char *)v156 + v159);
              if (v168 < 0xF0)
              {
                if (v168 == 7)
                {
                  float64x2_t v173 = vld1q_dup_f64(v169);
                  v146[4] = v173;
                  v146[5] = v173;
                  v146[6] = v173;
                  v146[7] = v173;
                  uint64_t v174 = (float64x2_t *)((char *)v167 + v37);
                  float64x2_t *v174 = v173;
                  v174[1] = v173;
                  v174[2] = v173;
                  v174[3] = v173;
                  unsigned int v175 = (float64x2_t *)((char *)v167 + v86);
                  float64x2_t *v175 = v173;
                  v175[1] = v173;
                  v175[2] = v173;
                  v175[3] = v173;
                  uint64_t v176 = (float64x2_t *)((char *)v167 + v87);
                  *uint64_t v176 = v173;
                  v176[1] = v173;
                  v176[2] = v173;
                  v176[3] = v173;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v167, v37, (uint64_t)v169, v168);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v167, v37, (unint64_t)v169, v168, v84);
              }
              unsigned int v36 = v246;
              uint64_t v35 = v247;
            }
            else
            {
              v146[6] = 0u;
              v146[7] = 0u;
              *(_OWORD *)v167->i8 = 0u;
              v146[5] = 0u;
              uint64_t v170 = (_OWORD *)((char *)v167 + v37);
              v170[2] = 0u;
              v170[3] = 0u;
              *uint64_t v170 = 0u;
              v170[1] = 0u;
              int32x4_t v171 = (_OWORD *)((char *)v167 + v86);
              v171[2] = 0u;
              v171[3] = 0u;
              *int32x4_t v171 = 0u;
              v171[1] = 0u;
              int32x4_t v172 = (_OWORD *)((char *)v167 + v87);
              v172[2] = 0u;
              v172[3] = 0u;
              *int32x4_t v172 = 0u;
              v172[1] = 0u;
              unsigned int v36 = v246;
              uint64_t v35 = v247;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v35;
          block[5] = v79;
          char v256 = v49;
          char v257 = v248;
          unsigned int v252 = v230;
          unsigned int v253 = v47 - v45;
          block[6] = v80;
          uint64_t v250 = v240 + 8 * (v47 - v36);
          uint64_t v37 = a11;
          uint64_t v251 = a11;
          unsigned int v254 = v241;
          unsigned int v255 = v48;
          if (v50)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v35 + 8) + 7384), block);
            uint64_t v35 = v247;
            unsigned int v36 = v246;
LABEL_27:
            unsigned int v44 = v42 + 1;
            goto LABEL_28;
          }
          uint64_t v89 = *(void *)(v35 + 208);
          int v90 = *(_DWORD *)(v89 + 52);
          unsigned int v91 = *v80;
          if (*v80)
          {
            if (v91 < 0xF0)
            {
              if (v91 == 7)
              {
                float64x2_t v100 = vld1q_dup_f64((const double *)v79);
                float64x2_t v259 = v100;
                float64x2_t v260 = v100;
                float64x2_t v261 = v100;
                float64x2_t v262 = v100;
                float64x2_t v267 = v100;
                float64x2_t v268 = v100;
                float64x2_t v269 = v100;
                float64x2_t v270 = v100;
                float64x2_t v275 = v100;
                float64x2_t v276 = v100;
                float64x2_t v277 = v100;
                float64x2_t v278 = v100;
                float64x2_t v283 = v100;
                float64x2_t v284 = v100;
                uint64_t v92 = 8;
                float64x2_t v285 = v100;
                float64x2_t v286 = v100;
              }
              else
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v259, 128, (uint64_t)v79, v91);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v259, 128, (unint64_t)v79, v91, *(_DWORD *)(v89 + 52));
              uint64_t v92 = 128;
            }
          }
          else
          {
            uint64_t v92 = 0;
            float64x2_t v262 = 0u;
            float64x2_t v261 = 0u;
            float64x2_t v260 = 0u;
            float64x2_t v259 = 0u;
            float64x2_t v267 = 0u;
            float64x2_t v268 = 0u;
            float64x2_t v269 = 0u;
            float64x2_t v270 = 0u;
            float64x2_t v275 = 0u;
            float64x2_t v276 = 0u;
            float64x2_t v277 = 0u;
            float64x2_t v278 = 0u;
            float64x2_t v283 = 0u;
            float64x2_t v284 = 0u;
            float64x2_t v285 = 0u;
            float64x2_t v286 = 0u;
          }
          int32x4_t v177 = (const double *)&v79[v92];
          unsigned int v178 = v80[1];
          if (v80[1])
          {
            if (v178 < 0xF0)
            {
              if (v178 == 7)
              {
                float64x2_t v180 = vld1q_dup_f64(v177);
                float64x2_t v291 = v180;
                float64x2_t v292 = v180;
                float64x2_t v293 = v180;
                float64x2_t v294 = v180;
                float64x2_t v299 = v180;
                float64x2_t v300 = v180;
                float64x2_t v301 = v180;
                float64x2_t v302 = v180;
                float64x2_t v307 = v180;
                float64x2_t v308 = v180;
                float64x2_t v309 = v180;
                float64x2_t v310 = v180;
                float64x2_t v315 = v180;
                float64x2_t v316 = v180;
                uint64_t v179 = 8;
                float64x2_t v317 = v180;
                float64x2_t v318 = v180;
              }
              else
              {
                uint64_t v179 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v291, 128, (uint64_t)v177, v178);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v291, 128, (unint64_t)v177, v178, v90);
              uint64_t v179 = 128;
            }
          }
          else
          {
            uint64_t v179 = 0;
            float64x2_t v293 = 0u;
            float64x2_t v294 = 0u;
            float64x2_t v291 = 0u;
            float64x2_t v292 = 0u;
            float64x2_t v299 = 0u;
            float64x2_t v300 = 0u;
            float64x2_t v301 = 0u;
            float64x2_t v302 = 0u;
            float64x2_t v307 = 0u;
            float64x2_t v308 = 0u;
            float64x2_t v309 = 0u;
            float64x2_t v310 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v318 = 0u;
          }
          unsigned int v181 = (const double *)((char *)v177 + v179);
          unsigned int v182 = v80[2];
          if (v80[2])
          {
            if (v182 < 0xF0)
            {
              if (v182 == 7)
              {
                float64x2_t v184 = vld1q_dup_f64(v181);
                float64x2_t v263 = v184;
                float64x2_t v264 = v184;
                float64x2_t v265 = v184;
                float64x2_t v266 = v184;
                float64x2_t v271 = v184;
                float64x2_t v272 = v184;
                float64x2_t v273 = v184;
                float64x2_t v274 = v184;
                float64x2_t v279 = v184;
                float64x2_t v280 = v184;
                float64x2_t v281 = v184;
                float64x2_t v282 = v184;
                float64x2_t v287 = v184;
                float64x2_t v288 = v184;
                uint64_t v183 = 8;
                float64x2_t v289 = v184;
                float64x2_t v290 = v184;
              }
              else
              {
                uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v263, 128, (uint64_t)v181, v182);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v263, 128, (unint64_t)v181, v182, v90);
              uint64_t v183 = 128;
            }
          }
          else
          {
            uint64_t v183 = 0;
            float64x2_t v265 = 0u;
            float64x2_t v266 = 0u;
            float64x2_t v263 = 0u;
            float64x2_t v264 = 0u;
            float64x2_t v271 = 0u;
            float64x2_t v272 = 0u;
            float64x2_t v273 = 0u;
            float64x2_t v274 = 0u;
            float64x2_t v279 = 0u;
            float64x2_t v280 = 0u;
            float64x2_t v281 = 0u;
            float64x2_t v282 = 0u;
            float64x2_t v287 = 0u;
            float64x2_t v288 = 0u;
            float64x2_t v289 = 0u;
            float64x2_t v290 = 0u;
          }
          int32x4_t v185 = (const double *)((char *)v181 + v183);
          unsigned int v186 = v80[3];
          if (v80[3])
          {
            if (v186 < 0xF0)
            {
              if (v186 == 7)
              {
                float64x2_t v188 = vld1q_dup_f64(v185);
                float64x2_t v295 = v188;
                float64x2_t v296 = v188;
                float64x2_t v297 = v188;
                float64x2_t v298 = v188;
                float64x2_t v303 = v188;
                float64x2_t v304 = v188;
                float64x2_t v305 = v188;
                float64x2_t v306 = v188;
                float64x2_t v311 = v188;
                float64x2_t v312 = v188;
                float64x2_t v313 = v188;
                float64x2_t v314 = v188;
                float64x2_t v319 = v188;
                float64x2_t v320 = v188;
                uint64_t v187 = 8;
                float64x2_t v321 = v188;
                float64x2_t v322 = v188;
              }
              else
              {
                uint64_t v187 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v295, 128, (uint64_t)v185, v186);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v295, 128, (unint64_t)v185, v186, v90);
              uint64_t v187 = 128;
            }
          }
          else
          {
            uint64_t v187 = 0;
            float64x2_t v297 = 0u;
            float64x2_t v298 = 0u;
            float64x2_t v295 = 0u;
            float64x2_t v296 = 0u;
            float64x2_t v303 = 0u;
            float64x2_t v304 = 0u;
            float64x2_t v305 = 0u;
            float64x2_t v306 = 0u;
            float64x2_t v311 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v313 = 0u;
            float64x2_t v314 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v322 = 0u;
          }
          int32x4_t v189 = (const double *)((char *)v185 + v187);
          unsigned int v190 = v80[4];
          if (v80[4])
          {
            if (v190 < 0xF0)
            {
              if (v190 == 7)
              {
                float64x2_t v192 = vld1q_dup_f64(v189);
                float64x2_t v323 = v192;
                float64x2_t v324 = v192;
                float64x2_t v325 = v192;
                float64x2_t v326 = v192;
                float64x2_t v331 = v192;
                float64x2_t v332 = v192;
                float64x2_t v333 = v192;
                float64x2_t v334 = v192;
                float64x2_t v339 = v192;
                float64x2_t v340 = v192;
                float64x2_t v341 = v192;
                float64x2_t v342 = v192;
                float64x2_t v347 = v192;
                float64x2_t v348 = v192;
                float64x2_t v349 = v192;
                uint64_t v191 = 8;
                float64x2_t v350 = v192;
              }
              else
              {
                uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v323, 128, (uint64_t)v189, v190);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v323, 128, (unint64_t)v189, v190, v90);
              uint64_t v191 = 128;
            }
          }
          else
          {
            uint64_t v191 = 0;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
          }
          unsigned int v193 = (const double *)((char *)v189 + v191);
          unsigned int v194 = v80[5];
          if (v80[5])
          {
            if (v194 < 0xF0)
            {
              if (v194 == 7)
              {
                float64x2_t v196 = vld1q_dup_f64(v193);
                float64x2_t v355 = v196;
                float64x2_t v356 = v196;
                float64x2_t v357 = v196;
                float64x2_t v358 = v196;
                float64x2_t v363 = v196;
                float64x2_t v364 = v196;
                float64x2_t v365 = v196;
                float64x2_t v366 = v196;
                float64x2_t v371 = v196;
                float64x2_t v372 = v196;
                float64x2_t v373 = v196;
                float64x2_t v374 = v196;
                float64x2_t v379 = v196;
                float64x2_t v380 = v196;
                float64x2_t v381 = v196;
                uint64_t v195 = 8;
                float64x2_t v382 = v196;
              }
              else
              {
                uint64_t v195 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v355, 128, (uint64_t)v193, v194);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v355, 128, (unint64_t)v193, v194, v90);
              uint64_t v195 = 128;
            }
          }
          else
          {
            uint64_t v195 = 0;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
          }
          int32x4_t v197 = (const double *)((char *)v193 + v195);
          unsigned int v198 = v80[6];
          if (v80[6])
          {
            if (v198 < 0xF0)
            {
              if (v198 == 7)
              {
                float64x2_t v201 = vld1q_dup_f64(v197);
                float64x2_t v327 = v201;
                float64x2_t v328 = v201;
                float64x2_t v329 = v201;
                float64x2_t v330 = v201;
                float64x2_t v335 = v201;
                float64x2_t v336 = v201;
                float64x2_t v337 = v201;
                float64x2_t v338 = v201;
                float64x2_t v343 = v201;
                float64x2_t v344 = v201;
                float64x2_t v345 = v201;
                float64x2_t v346 = v201;
                float64x2_t v351 = v201;
                float64x2_t v352 = v201;
                float64x2_t v353 = v201;
                uint64_t v199 = 8;
                float64x2_t v354 = v201;
                unsigned int v200 = v80[7];
                if (!v80[7]) {
                  goto LABEL_207;
                }
              }
              else
              {
                uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v327, 128, (uint64_t)v197, v198);
                unsigned int v200 = v80[7];
                if (!v80[7])
                {
LABEL_207:
                  float64x2_t v361 = 0u;
                  float64x2_t v362 = 0u;
                  float64x2_t v359 = 0u;
                  float64x2_t v360 = 0u;
                  float64x2_t v367 = 0u;
                  float64x2_t v368 = 0u;
                  float64x2_t v369 = 0u;
                  float64x2_t v370 = 0u;
                  float64x2_t v375 = 0u;
                  float64x2_t v376 = 0u;
                  float64x2_t v377 = 0u;
                  float64x2_t v378 = 0u;
                  float64x2_t v383 = 0u;
                  float64x2_t v384 = 0u;
                  float64x2_t v385 = 0u;
                  float64x2_t v386 = 0u;
                  goto LABEL_209;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v327, 128, (unint64_t)v197, v198, v90);
              uint64_t v199 = 128;
              unsigned int v200 = v80[7];
              if (!v80[7]) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            uint64_t v199 = 0;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            unsigned int v200 = v80[7];
            if (!v80[7]) {
              goto LABEL_207;
            }
          }
          int32x4_t v202 = (const double *)((char *)v197 + v199);
          if (v200 < 0xF0)
          {
            if (v200 == 7)
            {
              float64x2_t v203 = vld1q_dup_f64(v202);
              float64x2_t v359 = v203;
              float64x2_t v360 = v203;
              float64x2_t v361 = v203;
              float64x2_t v362 = v203;
              float64x2_t v367 = v203;
              float64x2_t v368 = v203;
              float64x2_t v369 = v203;
              float64x2_t v370 = v203;
              float64x2_t v375 = v203;
              float64x2_t v376 = v203;
              float64x2_t v377 = v203;
              float64x2_t v378 = v203;
              float64x2_t v383 = v203;
              float64x2_t v384 = v203;
              float64x2_t v385 = v203;
              float64x2_t v386 = v203;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v359, 128, (uint64_t)v202, v200);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v359, 128, (unint64_t)v202, v200, v90);
          }
LABEL_209:
          unsigned int v44 = v42 + 1;
          unint64_t v204 = v254;
          unsigned int v36 = v246;
          uint64_t v35 = v247;
          if (v254)
          {
            unint64_t v205 = 0;
            unsigned int v206 = (char *)&v259 + 128 * (unint64_t)v252 + 8 * v253;
            unsigned int v207 = v255;
            do
            {
              if (v207)
              {
                uint64_t v208 = 0;
                uint64_t v209 = v250 + v251 * v205;
                do
                {
                  *(unsigned char *)(v209 + v208) = v206[v208];
                  ++v208;
                  unsigned int v207 = v255;
                }
                while (8 * (unint64_t)v255 > v208);
                unint64_t v204 = v254;
              }
              ++v205;
              v206 += 128;
            }
            while (v205 < v204);
          }
LABEL_28:
          BOOL v30 = v42 == v235 >> 4;
          unsigned int v42 = v44;
        }
        while (!v30);
        BOOL v30 = v25++ == v225;
      }
      while (!v30);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v133 = v21;
  uint64_t v134 = v22;
  uint64_t v121 = v23;
  uint64_t v24 = v12;
  v160[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v138 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v120 = v14 + a10 - 1;
  unsigned int v122 = v120 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v141 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v132 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v131 = isLevelTiled;
  if (v25 <= v122)
  {
    unsigned int v130 = v16 + a9 - 1;
    unsigned int v119 = v16 >> 4;
    if (v16 >> 4 <= v130 >> 4)
    {
      unsigned int v116 = v20 - 1;
      unsigned int v118 = (v18 - 1) >> 4;
      int v139 = ((v20 - 1) & 0xF) + 1;
      unsigned int v140 = (v20 - 1) >> 4;
      int v117 = ((v18 - 1) & 0xF) + 1;
      uint64_t v123 = 8 * a11;
      uint64_t v124 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v129 = v36.i32[0] | v36.i32[1];
      BOOL v127 = v36.i32[1] != 0;
      int8x8_t v128 = v36;
      BOOL v126 = v36.i32[0] != 0;
      unint64_t v115 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (16 * v25) | 0xF;
        if (16 * v25 <= v138) {
          int v38 = v138;
        }
        else {
          int v38 = 16 * v25;
        }
        unsigned int v39 = v119;
        if (v120 < v37) {
          unsigned int v37 = v120;
        }
        int v125 = v38 - 16 * v25;
        int v136 = v37 - v38 + 1;
        unsigned int v137 = 16 * v25;
        int v40 = v117;
        if (v25 != v118) {
          int v40 = 16;
        }
        unsigned int v142 = v40;
        uint64_t v135 = v121 + (v38 - v138) * a11;
        do
        {
          unsigned int v41 = 16 * v39;
          unsigned int v42 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v39;
          }
          if (v130 < v42) {
            unsigned int v42 = v130;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v140) {
            unsigned int v45 = v139;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v137 >= v138 && v41 >= v16)
          {
            int v47 = v139;
            if (v39 != v140) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v136 != v142;
          }
          if (v131)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v115 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v106 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v107 = 0;
              if (v73) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v108 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v108 | v107) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v110 = 0;
            }
            else
            {
              unsigned int v107 = 32 - __clz(~(-1 << -(char)__clz(v106)));
              if ((v73 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v108 = 0;
              if (!v107) {
                goto LABEL_131;
              }
LABEL_120:
              int v109 = 0;
              uint64_t v110 = 0;
              int v111 = v39 & v106;
              BOOL v112 = v107 != 0;
              BOOL v113 = v108 != 0;
              int v114 = 1;
              do
              {
                --v107;
                if (v112) {
                  v110 |= (unint64_t)(v114 & v111) << v109++;
                }
                else {
                  unsigned int v107 = 0;
                }
                --v108;
                if (v113) {
                  v110 |= (unint64_t)(v114 & v25 & ((v74 >> 4) - 1)) << v109++;
                }
                else {
                  unsigned int v108 = 0;
                }
                v114 *= 2;
                --v109;
                BOOL v113 = v108 != 0;
                BOOL v112 = v107 != 0;
              }
              while (v108 | v107);
            }
            unint64_t v56 = ((unint64_t)(v41 / v70 + v137 / v74 * ((v70 + v116) / v70)) << 14) + (v110 << 11);
            goto LABEL_60;
          }
          if (v129)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v126;
            BOOL v53 = v127;
            __int32 v55 = v128.i32[0];
            __int32 v54 = v128.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          uint64_t v75 = (unsigned char *)(v133 + v56);
          if (v132)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v133 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v141;
            uint64_t v75 = __dst;
          }
          unsigned int v78 = (unsigned __int8 *)(v134 + 8 * v64);
          uint64_t v79 = v16;
          uint64_t v80 = v135 + 16 * (v43 - v16);
          char v81 = v45 < 0x10 || v46;
          if ((v81 & 1) == 0 && v142 > 0xF)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            unint64_t v83 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80, a11, (unint64_t)v75, *v78, v82)];
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v124, a11, v83, v78[1], v82);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 128, a11, v84, v78[2], v82);
            unint64_t v86 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v124 + 128, a11, v85, v78[3], v82);
            uint64_t v87 = v80 + v123;
            unint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v123, a11, v86, v78[4], v82);
            uint64_t v89 = v80 + 12 * a11;
            unint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v89, a11, v88, v78[5], v82);
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v87 + 128, a11, v90, v78[6], v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v89 + 128, a11, v90 + v91, v78[7], v82);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v150 = v45;
          char v151 = v142;
          unsigned int v146 = v125;
          unsigned int v147 = v43 - v41;
          block[6] = v78;
          uint64_t v144 = v80;
          uint64_t v145 = a11;
          unsigned int v148 = v136;
          unsigned int v149 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v92 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          unint64_t v93 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v153, 256, (unint64_t)v75, *v78, v92)];
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v155, 256, v93, v78[1], v92);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v154, 256, v94, v78[2], v92);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 256, v95, v78[3], v92);
          unint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v157, 256, v96, v78[4], v92);
          unint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v159, 256, v97, v78[5], v92);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v158, 256, v98, v78[6], v92);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v160, 256, v98 + v99, v78[7], v92);
          unint64_t v100 = v148;
          uint64_t v16 = v79;
          if (v148)
          {
            unint64_t v101 = 0;
            uint64_t v102 = &v153[256 * (unint64_t)v146 + 16 * v147];
            unsigned int v103 = v149;
            do
            {
              if (v103)
              {
                uint64_t v104 = 0;
                uint64_t v105 = v144 + v145 * v101;
                do
                {
                  *(unsigned char *)(v105 + v104) = v102[v104];
                  ++v104;
                  unsigned int v103 = v149;
                }
                while (16 * (unint64_t)v149 > v104);
                unint64_t v100 = v148;
              }
              ++v101;
              v102 += 256;
            }
            while (v101 < v100);
          }
LABEL_28:
          BOOL v29 = v39++ == v130 >> 4;
          uint64_t v34 = v141;
        }
        while (!v29);
        BOOL v29 = v25++ == v122;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v233 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v232 = v233 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v246 = v24;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v245 = 0;
LABEL_32:
      unsigned int v243 = v26 - 4;
      unsigned int v237 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v230 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v245 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v245 = 0;
  unsigned int v230 = 0;
  unsigned int v237 = 0;
  unsigned int v243 = 0;
LABEL_33:
  if (v20 <= v232)
  {
    unsigned int v244 = a7 + a9 - 1;
    if (a7 >> 4 <= v244 >> 4)
    {
      unsigned int v252 = v18 >> 4;
      unsigned int v229 = v19 >> 4;
      int v251 = (v18 & 0xF) + 1;
      int v228 = (v19 & 0xF) + 1;
      uint64_t v239 = a11;
      uint64_t v240 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v238 = v34.i32[0] | v34.i32[1];
      int8x8_t v236 = v34;
      BOOL v234 = v34.i32[0] != 0;
      BOOL v235 = v34.i32[1] != 0;
      unsigned int v241 = a8;
      do
      {
        unsigned int v35 = (16 * v20) | 0xF;
        if (16 * v20 <= a8) {
          int v36 = a8;
        }
        else {
          int v36 = 16 * v20;
        }
        if (v233 < v35) {
          unsigned int v35 = v233;
        }
        int v242 = v36 - 16 * v20;
        int v250 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v228;
        if (v20 != v229) {
          int v38 = 16;
        }
        unsigned int v253 = v38;
        uint64_t v249 = a2 + (v36 - a8) * a11;
        do
        {
          unsigned int v40 = 16 * v37;
          unsigned int v41 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v37;
          }
          if (v244 < v41) {
            unsigned int v41 = a7 + a9 - 1;
          }
          int v43 = v41 - v42 + 1;
          if (v37 == v252) {
            unsigned int v44 = v251;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (16 * v20 >= a8 && v40 >= a7)
          {
            int v46 = v251;
            if (v37 != v252) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v250 != v253;
          }
          if (v245)
          {
            if (v243 | v237)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v237 != 0;
              int v51 = 1;
              BOOL v53 = v243 != 0;
              unsigned int v52 = v237;
              unsigned int v54 = v243;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v37 & ~(-1 << v243) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v237) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(a1 + 320) * ((v37 >> v243) + (v20 >> v237) * v230) + (v49 << 8);
          }
          else
          {
            if (v238)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v234;
              BOOL v59 = v235;
              __int32 v61 = v236.i32[0];
              __int32 v60 = v236.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v37) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 8;
          }
          unsigned int v63 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20)
          {
            unsigned int v68 = 0;
            if (!v65)
            {
LABEL_111:
              uint64_t v70 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
            if (!(v68 | v65)) {
              goto LABEL_111;
            }
          }
          int v69 = 0;
          uint64_t v70 = 0;
          BOOL v71 = v65 != 0;
          BOOL v72 = v68 != 0;
          int v73 = 1;
          do
          {
            --v65;
            if (v71) {
              v70 |= (unint64_t)(v73 & v37) << v69++;
            }
            else {
              unsigned int v65 = 0;
            }
            --v68;
            if (v72) {
              v70 |= (unint64_t)(v73 & v20) << v69++;
            }
            else {
              unsigned int v68 = 0;
            }
            v73 *= 2;
            --v69;
            BOOL v72 = v68 != 0;
            BOOL v71 = v65 != 0;
          }
          while (v68 | v65);
LABEL_112:
          unsigned int v74 = (_OWORD *)(a3 + v62);
          if (v246)
          {
            long long v75 = v74[13];
            v263[12] = v74[12];
            v263[13] = v75;
            long long v76 = v74[15];
            v263[14] = v74[14];
            v263[15] = v76;
            long long v77 = v74[9];
            v263[8] = v74[8];
            v263[9] = v77;
            long long v78 = v74[11];
            v263[10] = v74[10];
            v263[11] = v78;
            long long v79 = v74[5];
            v263[4] = v74[4];
            v263[5] = v79;
            long long v80 = v74[7];
            v263[6] = v74[6];
            v263[7] = v80;
            long long v81 = v74[1];
            v263[0] = *v74;
            v263[1] = v81;
            long long v82 = v74[2];
            long long v83 = v74[3];
            unsigned int v74 = v263;
            v263[2] = v82;
            v263[3] = v83;
          }
          unint64_t v84 = (unsigned __int8 *)(a4 + 8 * v70);
          unint64_t v85 = (int8x8_t *)(v249 + v42 - a7);
          char v86 = v44 < 0x10 || v45;
          if ((v86 & 1) == 0 && v253 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 96)
            {
              int8x8_t v97 = vdup_lane_s8(*(int8x8_t *)v74, 0);
              int8x8_t *v85 = v97;
              *(int8x8_t *)((char *)v85 + a11) = v97;
              uint64_t v88 = 2 * a11;
              *(int8x8_t *)((char *)v85 + 2 * a11) = v97;
              *(int8x8_t *)((char *)v85 + 3 * a11) = v97;
              uint64_t v89 = 1;
            }
            else
            {
              uint64_t v88 = 2 * a11;
              if (v87 == 31)
              {
                int16x4_t v92 = *(int16x4_t *)v74;
                int16x4_t v93 = *(int16x4_t *)((char *)v74 + 8);
                int16x4_t v94 = (int16x4_t)v74[1];
                int16x4_t v95 = *(int16x4_t *)((char *)v74 + 24);
                int8x8_t *v85 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v74, v94);
                *(int16x4_t *)((char *)v85 + a11) = vuzp2_s16(v92, v94);
                unint64_t v96 = (int16x4_t *)((char *)v85 + 2 * a11);
                *unint64_t v96 = vuzp1_s16(v93, v95);
                *(int16x4_t *)((char *)v96 + a11) = vuzp2_s16(v93, v95);
                uint64_t v89 = 32;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v74, v87);
                uint64_t v88 = 2 * a11;
              }
              else
              {
                uint64_t v89 = 0;
                int8x8_t *v85 = 0;
                *(int8x8_t *)((char *)v85 + a11) = 0;
                *(int8x8_t *)((char *)v85 + 2 * a11) = 0;
                *(int8x8_t *)((char *)v85 + 3 * a11) = 0;
              }
            }
            unint64_t v98 = (int8x8_t *)((char *)v74 + v89);
            uint64_t v99 = (int8x8_t *)((char *)v85 + v240);
            unsigned int v100 = v84[1];
            if (v100 == 96)
            {
              int8x8_t v107 = vdup_lane_s8(*v98, 0);
              *uint64_t v99 = v107;
              *(int8x8_t *)((char *)v99 + a11) = v107;
              *(int8x8_t *)((char *)v99 + v88) = v107;
              *(int8x8_t *)((char *)v99 + 3 * a11) = v107;
              uint64_t v101 = 1;
            }
            else if (v100 == 31)
            {
              int16x4_t v102 = (int16x4_t)*v98;
              int16x4_t v103 = (int16x4_t)v98[1];
              int16x4_t v104 = (int16x4_t)v98[2];
              int16x4_t v105 = (int16x4_t)v98[3];
              *uint64_t v99 = (int8x8_t)vuzp1_s16((int16x4_t)*v98, v104);
              *(int16x4_t *)((char *)v99 + a11) = vuzp2_s16(v102, v104);
              unsigned int v106 = (int16x4_t *)((char *)v99 + v88);
              *unsigned int v106 = vuzp1_s16(v103, v105);
              *(int16x4_t *)((char *)v106 + a11) = vuzp2_s16(v103, v105);
              uint64_t v101 = 32;
            }
            else if (v84[1])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v85 + v240), a11, (uint64_t)v98, v100);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v101 = 0;
              *uint64_t v99 = 0;
              *(int8x8_t *)((char *)v99 + a11) = 0;
              *(int8x8_t *)((char *)v99 + v88) = 0;
              *(int8x8_t *)((char *)v99 + 3 * a11) = 0;
            }
            unsigned int v108 = (int8x8_t *)((char *)v98 + v101);
            int v109 = v85 + 1;
            unsigned int v110 = v84[2];
            if (v110 == 96)
            {
              int8x8_t v117 = vdup_lane_s8(*v108, 0);
              int8x8_t *v109 = v117;
              *(int8x8_t *)((char *)v109 + a11) = v117;
              *(int8x8_t *)((char *)v109 + v88) = v117;
              *(int8x8_t *)((char *)v109 + 3 * a11) = v117;
              uint64_t v111 = 1;
            }
            else if (v110 == 31)
            {
              int16x4_t v112 = (int16x4_t)*v108;
              int16x4_t v113 = (int16x4_t)v108[1];
              int16x4_t v114 = (int16x4_t)v108[2];
              int16x4_t v115 = (int16x4_t)v108[3];
              int8x8_t *v109 = (int8x8_t)vuzp1_s16((int16x4_t)*v108, v114);
              *(int16x4_t *)((char *)v109 + a11) = vuzp2_s16(v112, v114);
              unsigned int v116 = (int16x4_t *)((char *)v109 + v88);
              *unsigned int v116 = vuzp1_s16(v113, v115);
              *(int16x4_t *)((char *)v116 + a11) = vuzp2_s16(v113, v115);
              uint64_t v111 = 32;
            }
            else if (v84[2])
            {
              uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v109, a11, (uint64_t)v108, v110);
              uint64_t v88 = 2 * a11;
              uint64_t v111 = v118;
            }
            else
            {
              uint64_t v111 = 0;
              int8x8_t *v109 = 0;
              *(int8x8_t *)((char *)v109 + a11) = 0;
              *(int8x8_t *)((char *)v109 + v88) = 0;
              *(int8x8_t *)((char *)v109 + 3 * a11) = 0;
            }
            unsigned int v119 = (int8x8_t *)((char *)v108 + v111);
            unsigned int v120 = v99 + 1;
            unsigned int v121 = v84[3];
            if (v121 == 96)
            {
              int8x8_t v128 = vdup_lane_s8(*v119, 0);
              *unsigned int v120 = v128;
              *(int8x8_t *)((char *)v120 + a11) = v128;
              *(int8x8_t *)((char *)v120 + v88) = v128;
              *(int8x8_t *)((char *)v120 + 3 * a11) = v128;
              uint64_t v122 = 1;
            }
            else if (v121 == 31)
            {
              int16x4_t v123 = (int16x4_t)*v119;
              int16x4_t v124 = (int16x4_t)v119[1];
              int16x4_t v125 = (int16x4_t)v119[2];
              int16x4_t v126 = (int16x4_t)v119[3];
              *unsigned int v120 = (int8x8_t)vuzp1_s16((int16x4_t)*v119, v125);
              *(int16x4_t *)((char *)v120 + a11) = vuzp2_s16(v123, v125);
              BOOL v127 = (int16x4_t *)((char *)v120 + v88);
              *BOOL v127 = vuzp1_s16(v124, v126);
              *(int16x4_t *)((char *)v127 + a11) = vuzp2_s16(v124, v126);
              uint64_t v122 = 32;
            }
            else if (v84[3])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v120, a11, (uint64_t)v119, v121);
              uint64_t v88 = 2 * a11;
              uint64_t v122 = v129;
            }
            else
            {
              uint64_t v122 = 0;
              *unsigned int v120 = 0;
              *(int8x8_t *)((char *)v120 + a11) = 0;
              *(int8x8_t *)((char *)v120 + v88) = 0;
              *(int8x8_t *)((char *)v120 + 3 * a11) = 0;
            }
            unsigned int v130 = (int8x8_t *)((char *)v119 + v122);
            BOOL v131 = &v85[v239];
            unsigned int v132 = v84[4];
            if (v132 == 96)
            {
              int8x8_t v139 = vdup_lane_s8(*v130, 0);
              int8x8_t *v131 = v139;
              *(int8x8_t *)((char *)v131 + a11) = v139;
              *(int8x8_t *)((char *)v131 + v88) = v139;
              *(int8x8_t *)((char *)v131 + 3 * a11) = v139;
              uint64_t v133 = 1;
            }
            else if (v132 == 31)
            {
              int16x4_t v134 = (int16x4_t)*v130;
              int16x4_t v135 = (int16x4_t)v130[1];
              int16x4_t v136 = (int16x4_t)v130[2];
              int16x4_t v137 = (int16x4_t)v130[3];
              int8x8_t *v131 = (int8x8_t)vuzp1_s16((int16x4_t)*v130, v136);
              *(int16x4_t *)((char *)v131 + a11) = vuzp2_s16(v134, v136);
              unsigned int v138 = (int16x4_t *)((char *)v131 + v88);
              *unsigned int v138 = vuzp1_s16(v135, v137);
              *(int16x4_t *)((char *)v138 + a11) = vuzp2_s16(v135, v137);
              uint64_t v133 = 32;
            }
            else if (v84[4])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v85[v239], a11, (uint64_t)v130, v132);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v133 = 0;
              int8x8_t *v131 = 0;
              *(int8x8_t *)((char *)v131 + a11) = 0;
              *(int8x8_t *)((char *)v131 + v88) = 0;
              *(int8x8_t *)((char *)v131 + 3 * a11) = 0;
            }
            unsigned int v140 = (int8x8_t *)((char *)v130 + v133);
            uint64_t v141 = (int8x8_t *)((char *)v85 + 12 * a11);
            unsigned int v142 = v84[5];
            if (v142 == 96)
            {
              int8x8_t v149 = vdup_lane_s8(*v140, 0);
              *uint64_t v141 = v149;
              *(int8x8_t *)((char *)v141 + a11) = v149;
              *(int8x8_t *)((char *)v141 + v88) = v149;
              *(int8x8_t *)((char *)v141 + 3 * a11) = v149;
              uint64_t v143 = 1;
            }
            else if (v142 == 31)
            {
              int16x4_t v144 = (int16x4_t)*v140;
              int16x4_t v145 = (int16x4_t)v140[1];
              int16x4_t v146 = (int16x4_t)v140[2];
              int16x4_t v147 = (int16x4_t)v140[3];
              *uint64_t v141 = (int8x8_t)vuzp1_s16((int16x4_t)*v140, v146);
              *(int16x4_t *)((char *)v141 + a11) = vuzp2_s16(v144, v146);
              unsigned int v148 = (int16x4_t *)((char *)v141 + v88);
              int16x4_t *v148 = vuzp1_s16(v145, v147);
              *(int16x4_t *)((char *)v148 + a11) = vuzp2_s16(v145, v147);
              uint64_t v143 = 32;
            }
            else if (v84[5])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v141, a11, (uint64_t)v140, v142);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v143 = 0;
              *uint64_t v141 = 0;
              *(int8x8_t *)((char *)v141 + a11) = 0;
              *(int8x8_t *)((char *)v141 + v88) = 0;
              *(int8x8_t *)((char *)v141 + 3 * a11) = 0;
            }
            char v150 = (int8x8_t *)((char *)v140 + v143);
            char v151 = v131 + 1;
            unsigned int v152 = v84[6];
            if (v152 == 96)
            {
              int8x8_t v159 = vdup_lane_s8(*v150, 0);
              int8x8_t *v151 = v159;
              *(int8x8_t *)((char *)v151 + a11) = v159;
              *(int8x8_t *)((char *)v151 + v88) = v159;
              *(int8x8_t *)((char *)v151 + 3 * a11) = v159;
              uint64_t v153 = 1;
            }
            else if (v152 == 31)
            {
              int16x4_t v154 = (int16x4_t)*v150;
              int16x4_t v155 = (int16x4_t)v150[1];
              int16x4_t v156 = (int16x4_t)v150[2];
              int16x4_t v157 = (int16x4_t)v150[3];
              int8x8_t *v151 = (int8x8_t)vuzp1_s16((int16x4_t)*v150, v156);
              *(int16x4_t *)((char *)v151 + a11) = vuzp2_s16(v154, v156);
              uint64_t v158 = (int16x4_t *)((char *)v151 + v88);
              *uint64_t v158 = vuzp1_s16(v155, v157);
              *(int16x4_t *)((char *)v158 + a11) = vuzp2_s16(v155, v157);
              uint64_t v153 = 32;
            }
            else if (v84[6])
            {
              uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v151, a11, (uint64_t)v150, v152);
              uint64_t v88 = 2 * a11;
              uint64_t v153 = v160;
            }
            else
            {
              uint64_t v153 = 0;
              int8x8_t *v151 = 0;
              *(int8x8_t *)((char *)v151 + a11) = 0;
              *(int8x8_t *)((char *)v151 + v88) = 0;
              *(int8x8_t *)((char *)v151 + 3 * a11) = 0;
            }
            int32x4_t v161 = (int8x8_t *)((char *)v150 + v153);
            uint64_t v162 = v141 + 1;
            unsigned int v163 = v84[7];
            if (v163 == 96)
            {
              int8x8_t v169 = vdup_lane_s8(*v161, 0);
              *uint64_t v162 = v169;
              *(int8x8_t *)((char *)v162 + a11) = v169;
              *(int8x8_t *)((char *)v162 + v88) = v169;
              *(int8x8_t *)((char *)v162 + 3 * a11) = v169;
              a8 = v241;
            }
            else
            {
              a8 = v241;
              if (v163 == 31)
              {
                int16x4_t v164 = (int16x4_t)*v161;
                int16x4_t v165 = (int16x4_t)v161[1];
                int16x4_t v166 = (int16x4_t)v161[2];
                int16x4_t v167 = (int16x4_t)v161[3];
                *uint64_t v162 = (int8x8_t)vuzp1_s16((int16x4_t)*v161, v166);
                *(int16x4_t *)((char *)v162 + a11) = vuzp2_s16(v164, v166);
                unsigned int v168 = (int16x4_t *)((char *)v162 + v88);
                int16x4_t *v168 = vuzp1_s16(v165, v167);
                *(int16x4_t *)((char *)v168 + a11) = vuzp2_s16(v165, v167);
              }
              else if (v84[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v162, a11, (uint64_t)v161, v163);
              }
              else
              {
                *uint64_t v162 = 0;
                *(int8x8_t *)((char *)v162 + a11) = 0;
                *(int8x8_t *)((char *)v162 + v88) = 0;
                *(int8x8_t *)((char *)v162 + 3 * a11) = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v74;
          char v261 = v44;
          char v262 = v253;
          int v257 = v242;
          unsigned int v258 = v42 - v40;
          block[6] = a4 + 8 * v70;
          uint64_t v255 = v249 + v42 - a7;
          uint64_t v256 = a11;
          unsigned int v259 = v250;
          unsigned int v260 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_47:
            unsigned int v39 = v37 + 1;
            goto LABEL_48;
          }
          unsigned int v90 = *v84;
          if (v90 == 96)
          {
            int16x4_t v264 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v74, 0);
            int16x4_t v266 = v264;
            int16x4_t v268 = v264;
            int16x4_t v270 = v264;
            uint64_t v91 = 1;
          }
          else if (v90 == 31)
          {
            int16x4_t v170 = *(int16x4_t *)((char *)v74 + 8);
            int16x4_t v171 = (int16x4_t)v74[1];
            int16x4_t v172 = *(int16x4_t *)((char *)v74 + 24);
            int16x4_t v173 = vuzp2_s16(*(int16x4_t *)v74, v171);
            int16x4_t v264 = vuzp1_s16(*(int16x4_t *)v74, v171);
            int16x4_t v266 = v173;
            int16x4_t v268 = vuzp1_s16(v170, v172);
            int16x4_t v270 = vuzp2_s16(v170, v172);
            uint64_t v91 = 32;
          }
          else if (*v84)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 16, (uint64_t)v74, v90);
          }
          else
          {
            uint64_t v91 = 0;
            int16x4_t v264 = 0;
            int16x4_t v266 = 0;
            int16x4_t v268 = 0;
            int16x4_t v270 = 0;
          }
          uint64_t v174 = (int8x8_t *)((char *)v74 + v91);
          unsigned int v175 = v84[1];
          if (v175 == 96)
          {
            int16x4_t v272 = (int16x4_t)vdup_lane_s8(*v174, 0);
            int16x4_t v274 = v272;
            int16x4_t v276 = v272;
            int16x4_t v278 = v272;
            uint64_t v176 = 1;
          }
          else if (v175 == 31)
          {
            int16x4_t v177 = (int16x4_t)v174[1];
            int16x4_t v178 = (int16x4_t)v174[2];
            int16x4_t v179 = (int16x4_t)v174[3];
            int16x4_t v180 = vuzp2_s16((int16x4_t)*v174, v178);
            int16x4_t v272 = vuzp1_s16((int16x4_t)*v174, v178);
            int16x4_t v274 = v180;
            int16x4_t v276 = vuzp1_s16(v177, v179);
            int16x4_t v278 = vuzp2_s16(v177, v179);
            uint64_t v176 = 32;
          }
          else if (v84[1])
          {
            uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 16, (uint64_t)v174, v175);
          }
          else
          {
            uint64_t v176 = 0;
            int16x4_t v272 = 0;
            int16x4_t v274 = 0;
            int16x4_t v276 = 0;
            int16x4_t v278 = 0;
          }
          unsigned int v181 = (int8x8_t *)((char *)v174 + v176);
          unsigned int v182 = v84[2];
          if (v182 == 96)
          {
            int16x4_t v265 = (int16x4_t)vdup_lane_s8(*v181, 0);
            int16x4_t v267 = v265;
            int16x4_t v269 = v265;
            int16x4_t v271 = v265;
            uint64_t v183 = 1;
          }
          else if (v182 == 31)
          {
            int16x4_t v184 = (int16x4_t)v181[1];
            int16x4_t v185 = (int16x4_t)v181[2];
            int16x4_t v186 = (int16x4_t)v181[3];
            int16x4_t v187 = vuzp2_s16((int16x4_t)*v181, v185);
            int16x4_t v265 = vuzp1_s16((int16x4_t)*v181, v185);
            int16x4_t v267 = v187;
            int16x4_t v269 = vuzp1_s16(v184, v186);
            int16x4_t v271 = vuzp2_s16(v184, v186);
            uint64_t v183 = 32;
          }
          else if (v84[2])
          {
            uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 16, (uint64_t)v181, v182);
          }
          else
          {
            uint64_t v183 = 0;
            int16x4_t v265 = 0;
            int16x4_t v267 = 0;
            int16x4_t v269 = 0;
            int16x4_t v271 = 0;
          }
          float64x2_t v188 = (int8x8_t *)((char *)v181 + v183);
          unsigned int v189 = v84[3];
          if (v189 == 96)
          {
            int16x4_t v273 = (int16x4_t)vdup_lane_s8(*v188, 0);
            int16x4_t v275 = v273;
            int16x4_t v277 = v273;
            int16x4_t v279 = v273;
            uint64_t v190 = 1;
          }
          else if (v189 == 31)
          {
            int16x4_t v191 = (int16x4_t)v188[1];
            int16x4_t v192 = (int16x4_t)v188[2];
            int16x4_t v193 = (int16x4_t)v188[3];
            int16x4_t v194 = vuzp2_s16((int16x4_t)*v188, v192);
            int16x4_t v273 = vuzp1_s16((int16x4_t)*v188, v192);
            int16x4_t v275 = v194;
            int16x4_t v277 = vuzp1_s16(v191, v193);
            int16x4_t v279 = vuzp2_s16(v191, v193);
            uint64_t v190 = 32;
          }
          else if (v84[3])
          {
            uint64_t v190 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 16, (uint64_t)v188, v189);
          }
          else
          {
            uint64_t v190 = 0;
            int16x4_t v273 = 0;
            int16x4_t v275 = 0;
            int16x4_t v277 = 0;
            int16x4_t v279 = 0;
          }
          uint64_t v195 = (int8x8_t *)((char *)v188 + v190);
          unsigned int v196 = v84[4];
          if (v196 == 96)
          {
            int16x4_t v280 = (int16x4_t)vdup_lane_s8(*v195, 0);
            int16x4_t v282 = v280;
            int16x4_t v284 = v280;
            int16x4_t v286 = v280;
            uint64_t v197 = 1;
          }
          else if (v196 == 31)
          {
            int16x4_t v198 = (int16x4_t)v195[1];
            int16x4_t v199 = (int16x4_t)v195[2];
            int16x4_t v200 = (int16x4_t)v195[3];
            int16x4_t v201 = vuzp2_s16((int16x4_t)*v195, v199);
            int16x4_t v280 = vuzp1_s16((int16x4_t)*v195, v199);
            int16x4_t v282 = v201;
            int16x4_t v284 = vuzp1_s16(v198, v200);
            int16x4_t v286 = vuzp2_s16(v198, v200);
            uint64_t v197 = 32;
          }
          else if (v84[4])
          {
            uint64_t v197 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 16, (uint64_t)v195, v196);
          }
          else
          {
            uint64_t v197 = 0;
            int16x4_t v280 = 0;
            int16x4_t v282 = 0;
            int16x4_t v284 = 0;
            int16x4_t v286 = 0;
          }
          int32x4_t v202 = (int8x8_t *)((char *)v195 + v197);
          unsigned int v203 = v84[5];
          if (v203 == 96)
          {
            int16x4_t v288 = (int16x4_t)vdup_lane_s8(*v202, 0);
            int16x4_t v290 = v288;
            int16x4_t v292 = v288;
            int16x4_t v294 = v288;
            uint64_t v204 = 1;
          }
          else if (v203 == 31)
          {
            int16x4_t v205 = (int16x4_t)v202[1];
            int16x4_t v206 = (int16x4_t)v202[2];
            int16x4_t v207 = (int16x4_t)v202[3];
            int16x4_t v208 = vuzp2_s16((int16x4_t)*v202, v206);
            int16x4_t v288 = vuzp1_s16((int16x4_t)*v202, v206);
            int16x4_t v290 = v208;
            int16x4_t v292 = vuzp1_s16(v205, v207);
            int16x4_t v294 = vuzp2_s16(v205, v207);
            uint64_t v204 = 32;
          }
          else if (v84[5])
          {
            uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 16, (uint64_t)v202, v203);
          }
          else
          {
            uint64_t v204 = 0;
            int16x4_t v288 = 0;
            int16x4_t v290 = 0;
            int16x4_t v292 = 0;
            int16x4_t v294 = 0;
          }
          uint64_t v209 = (int8x8_t *)((char *)v202 + v204);
          unsigned int v210 = v84[6];
          if (v210 == 96)
          {
            int16x4_t v281 = (int16x4_t)vdup_lane_s8(*v209, 0);
            int16x4_t v283 = v281;
            int16x4_t v285 = v281;
            int16x4_t v287 = v281;
            uint64_t v211 = 1;
          }
          else if (v210 == 31)
          {
            int16x4_t v212 = (int16x4_t)v209[1];
            int16x4_t v213 = (int16x4_t)v209[2];
            int16x4_t v214 = (int16x4_t)v209[3];
            int16x4_t v215 = vuzp2_s16((int16x4_t)*v209, v213);
            int16x4_t v281 = vuzp1_s16((int16x4_t)*v209, v213);
            int16x4_t v283 = v215;
            int16x4_t v285 = vuzp1_s16(v212, v214);
            int16x4_t v287 = vuzp2_s16(v212, v214);
            uint64_t v211 = 32;
          }
          else if (v84[6])
          {
            uint64_t v211 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 16, (uint64_t)v209, v210);
          }
          else
          {
            uint64_t v211 = 0;
            int16x4_t v281 = 0;
            int16x4_t v283 = 0;
            int16x4_t v285 = 0;
            int16x4_t v287 = 0;
          }
          BOOL v216 = (int8x8_t *)((char *)v209 + v211);
          unsigned int v217 = v84[7];
          if (v217 == 96)
          {
            int16x4_t v289 = (int16x4_t)vdup_lane_s8(*v216, 0);
            int16x4_t v291 = v289;
            int16x4_t v293 = v289;
            int16x4_t v295 = v289;
          }
          else if (v217 == 31)
          {
            int16x4_t v218 = (int16x4_t)v216[1];
            int16x4_t v219 = (int16x4_t)v216[2];
            int16x4_t v220 = (int16x4_t)v216[3];
            int16x4_t v221 = vuzp2_s16((int16x4_t)*v216, v219);
            int16x4_t v289 = vuzp1_s16((int16x4_t)*v216, v219);
            int16x4_t v291 = v221;
            int16x4_t v293 = vuzp1_s16(v218, v220);
            int16x4_t v295 = vuzp2_s16(v218, v220);
          }
          else if (v84[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 16, (uint64_t)v216, v217);
          }
          else
          {
            int16x4_t v289 = 0;
            int16x4_t v291 = 0;
            int16x4_t v293 = 0;
            int16x4_t v295 = 0;
          }
          unint64_t v222 = v259;
          unsigned int v39 = v37 + 1;
          if (v259 && v260)
          {
            unint64_t v223 = 0;
            uint64_t v224 = (char *)&v264 + 16 * v257 + v258;
            int v225 = 1;
            do
            {
              if (v225)
              {
                uint64_t v226 = 0;
                uint64_t v227 = v255 + v256 * v223;
                do
                {
                  *(unsigned char *)(v227 + v226) = v224[v226];
                  int v225 = v260;
                  ++v226;
                }
                while (v260 > v226);
                unint64_t v222 = v259;
              }
              ++v223;
              v224 += 16;
            }
            while (v223 < v222);
          }
LABEL_48:
          BOOL v21 = v37 == v244 >> 4;
          unsigned int v37 = v39;
        }
        while (!v21);
        BOOL v21 = v20++ == v232;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v233 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v232 = v233 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v246 = v24;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v245 = 0;
LABEL_32:
      unsigned int v243 = v26 - 4;
      unsigned int v237 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v230 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v245 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v245 = 0;
  unsigned int v230 = 0;
  unsigned int v237 = 0;
  unsigned int v243 = 0;
LABEL_33:
  if (v20 <= v232)
  {
    unsigned int v244 = a7 + a9 - 1;
    if (a7 >> 4 <= v244 >> 4)
    {
      unsigned int v252 = v18 >> 4;
      unsigned int v229 = v19 >> 4;
      int v251 = (v18 & 0xF) + 1;
      int v228 = (v19 & 0xF) + 1;
      uint64_t v239 = a11;
      uint64_t v240 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v238 = v34.i32[0] | v34.i32[1];
      int8x8_t v236 = v34;
      BOOL v234 = v34.i32[0] != 0;
      BOOL v235 = v34.i32[1] != 0;
      unsigned int v241 = a8;
      do
      {
        unsigned int v35 = (16 * v20) | 0xF;
        if (16 * v20 <= a8) {
          int v36 = a8;
        }
        else {
          int v36 = 16 * v20;
        }
        if (v233 < v35) {
          unsigned int v35 = v233;
        }
        int v242 = v36 - 16 * v20;
        int v250 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v228;
        if (v20 != v229) {
          int v38 = 16;
        }
        unsigned int v253 = v38;
        uint64_t v249 = a2 + (v36 - a8) * a11;
        do
        {
          unsigned int v40 = 16 * v37;
          unsigned int v41 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v37;
          }
          if (v244 < v41) {
            unsigned int v41 = a7 + a9 - 1;
          }
          int v43 = v41 - v42 + 1;
          if (v37 == v252) {
            unsigned int v44 = v251;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (16 * v20 >= a8 && v40 >= a7)
          {
            int v46 = v251;
            if (v37 != v252) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v250 != v253;
          }
          if (v245)
          {
            if (v243 | v237)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v237 != 0;
              int v51 = 1;
              BOOL v53 = v243 != 0;
              unsigned int v52 = v237;
              unsigned int v54 = v243;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v37 & ~(-1 << v243) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v237) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(a1 + 320) * ((v37 >> v243) + (v20 >> v237) * v230) + (v49 << 8);
          }
          else
          {
            if (v238)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v234;
              BOOL v59 = v235;
              __int32 v61 = v236.i32[0];
              __int32 v60 = v236.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v37) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 8;
          }
          unsigned int v63 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20)
          {
            unsigned int v68 = 0;
            if (!v65)
            {
LABEL_111:
              uint64_t v70 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
            if (!(v68 | v65)) {
              goto LABEL_111;
            }
          }
          int v69 = 0;
          uint64_t v70 = 0;
          BOOL v71 = v65 != 0;
          BOOL v72 = v68 != 0;
          int v73 = 1;
          do
          {
            --v65;
            if (v71) {
              v70 |= (unint64_t)(v73 & v37) << v69++;
            }
            else {
              unsigned int v65 = 0;
            }
            --v68;
            if (v72) {
              v70 |= (unint64_t)(v73 & v20) << v69++;
            }
            else {
              unsigned int v68 = 0;
            }
            v73 *= 2;
            --v69;
            BOOL v72 = v68 != 0;
            BOOL v71 = v65 != 0;
          }
          while (v68 | v65);
LABEL_112:
          unsigned int v74 = (_OWORD *)(a3 + v62);
          if (v246)
          {
            long long v75 = v74[13];
            v263[12] = v74[12];
            v263[13] = v75;
            long long v76 = v74[15];
            v263[14] = v74[14];
            v263[15] = v76;
            long long v77 = v74[9];
            v263[8] = v74[8];
            v263[9] = v77;
            long long v78 = v74[11];
            v263[10] = v74[10];
            v263[11] = v78;
            long long v79 = v74[5];
            v263[4] = v74[4];
            v263[5] = v79;
            long long v80 = v74[7];
            v263[6] = v74[6];
            v263[7] = v80;
            long long v81 = v74[1];
            v263[0] = *v74;
            v263[1] = v81;
            long long v82 = v74[2];
            long long v83 = v74[3];
            unsigned int v74 = v263;
            v263[2] = v82;
            v263[3] = v83;
          }
          unint64_t v84 = (unsigned __int8 *)(a4 + 8 * v70);
          unint64_t v85 = (int8x8_t *)(v249 + v42 - a7);
          char v86 = v44 < 0x10 || v45;
          if ((v86 & 1) == 0 && v253 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 96)
            {
              int8x8_t v97 = vdup_lane_s8(*(int8x8_t *)v74, 0);
              int8x8_t *v85 = v97;
              *(int8x8_t *)((char *)v85 + a11) = v97;
              uint64_t v88 = 2 * a11;
              *(int8x8_t *)((char *)v85 + 2 * a11) = v97;
              *(int8x8_t *)((char *)v85 + 3 * a11) = v97;
              uint64_t v89 = 1;
            }
            else
            {
              uint64_t v88 = 2 * a11;
              if (v87 == 31)
              {
                int16x4_t v92 = *(int16x4_t *)v74;
                int16x4_t v93 = *(int16x4_t *)((char *)v74 + 8);
                int16x4_t v94 = (int16x4_t)v74[1];
                int16x4_t v95 = *(int16x4_t *)((char *)v74 + 24);
                int8x8_t *v85 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v74, v94);
                *(int16x4_t *)((char *)v85 + a11) = vuzp2_s16(v92, v94);
                unint64_t v96 = (int16x4_t *)((char *)v85 + 2 * a11);
                *unint64_t v96 = vuzp1_s16(v93, v95);
                *(int16x4_t *)((char *)v96 + a11) = vuzp2_s16(v93, v95);
                uint64_t v89 = 32;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v74, v87);
                uint64_t v88 = 2 * a11;
              }
              else
              {
                uint64_t v89 = 0;
                int8x8_t *v85 = 0;
                *(int8x8_t *)((char *)v85 + a11) = 0;
                *(int8x8_t *)((char *)v85 + 2 * a11) = 0;
                *(int8x8_t *)((char *)v85 + 3 * a11) = 0;
              }
            }
            unint64_t v98 = (int8x8_t *)((char *)v74 + v89);
            uint64_t v99 = (int8x8_t *)((char *)v85 + v240);
            unsigned int v100 = v84[1];
            if (v100 == 96)
            {
              int8x8_t v107 = vdup_lane_s8(*v98, 0);
              *uint64_t v99 = v107;
              *(int8x8_t *)((char *)v99 + a11) = v107;
              *(int8x8_t *)((char *)v99 + v88) = v107;
              *(int8x8_t *)((char *)v99 + 3 * a11) = v107;
              uint64_t v101 = 1;
            }
            else if (v100 == 31)
            {
              int16x4_t v102 = (int16x4_t)*v98;
              int16x4_t v103 = (int16x4_t)v98[1];
              int16x4_t v104 = (int16x4_t)v98[2];
              int16x4_t v105 = (int16x4_t)v98[3];
              *uint64_t v99 = (int8x8_t)vuzp1_s16((int16x4_t)*v98, v104);
              *(int16x4_t *)((char *)v99 + a11) = vuzp2_s16(v102, v104);
              unsigned int v106 = (int16x4_t *)((char *)v99 + v88);
              *unsigned int v106 = vuzp1_s16(v103, v105);
              *(int16x4_t *)((char *)v106 + a11) = vuzp2_s16(v103, v105);
              uint64_t v101 = 32;
            }
            else if (v84[1])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v85 + v240), a11, (uint64_t)v98, v100);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v101 = 0;
              *uint64_t v99 = 0;
              *(int8x8_t *)((char *)v99 + a11) = 0;
              *(int8x8_t *)((char *)v99 + v88) = 0;
              *(int8x8_t *)((char *)v99 + 3 * a11) = 0;
            }
            unsigned int v108 = (int8x8_t *)((char *)v98 + v101);
            int v109 = v85 + 1;
            unsigned int v110 = v84[2];
            if (v110 == 96)
            {
              int8x8_t v117 = vdup_lane_s8(*v108, 0);
              int8x8_t *v109 = v117;
              *(int8x8_t *)((char *)v109 + a11) = v117;
              *(int8x8_t *)((char *)v109 + v88) = v117;
              *(int8x8_t *)((char *)v109 + 3 * a11) = v117;
              uint64_t v111 = 1;
            }
            else if (v110 == 31)
            {
              int16x4_t v112 = (int16x4_t)*v108;
              int16x4_t v113 = (int16x4_t)v108[1];
              int16x4_t v114 = (int16x4_t)v108[2];
              int16x4_t v115 = (int16x4_t)v108[3];
              int8x8_t *v109 = (int8x8_t)vuzp1_s16((int16x4_t)*v108, v114);
              *(int16x4_t *)((char *)v109 + a11) = vuzp2_s16(v112, v114);
              unsigned int v116 = (int16x4_t *)((char *)v109 + v88);
              *unsigned int v116 = vuzp1_s16(v113, v115);
              *(int16x4_t *)((char *)v116 + a11) = vuzp2_s16(v113, v115);
              uint64_t v111 = 32;
            }
            else if (v84[2])
            {
              uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v109, a11, (uint64_t)v108, v110);
              uint64_t v88 = 2 * a11;
              uint64_t v111 = v118;
            }
            else
            {
              uint64_t v111 = 0;
              int8x8_t *v109 = 0;
              *(int8x8_t *)((char *)v109 + a11) = 0;
              *(int8x8_t *)((char *)v109 + v88) = 0;
              *(int8x8_t *)((char *)v109 + 3 * a11) = 0;
            }
            unsigned int v119 = (int8x8_t *)((char *)v108 + v111);
            unsigned int v120 = v99 + 1;
            unsigned int v121 = v84[3];
            if (v121 == 96)
            {
              int8x8_t v128 = vdup_lane_s8(*v119, 0);
              *unsigned int v120 = v128;
              *(int8x8_t *)((char *)v120 + a11) = v128;
              *(int8x8_t *)((char *)v120 + v88) = v128;
              *(int8x8_t *)((char *)v120 + 3 * a11) = v128;
              uint64_t v122 = 1;
            }
            else if (v121 == 31)
            {
              int16x4_t v123 = (int16x4_t)*v119;
              int16x4_t v124 = (int16x4_t)v119[1];
              int16x4_t v125 = (int16x4_t)v119[2];
              int16x4_t v126 = (int16x4_t)v119[3];
              *unsigned int v120 = (int8x8_t)vuzp1_s16((int16x4_t)*v119, v125);
              *(int16x4_t *)((char *)v120 + a11) = vuzp2_s16(v123, v125);
              BOOL v127 = (int16x4_t *)((char *)v120 + v88);
              *BOOL v127 = vuzp1_s16(v124, v126);
              *(int16x4_t *)((char *)v127 + a11) = vuzp2_s16(v124, v126);
              uint64_t v122 = 32;
            }
            else if (v84[3])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v120, a11, (uint64_t)v119, v121);
              uint64_t v88 = 2 * a11;
              uint64_t v122 = v129;
            }
            else
            {
              uint64_t v122 = 0;
              *unsigned int v120 = 0;
              *(int8x8_t *)((char *)v120 + a11) = 0;
              *(int8x8_t *)((char *)v120 + v88) = 0;
              *(int8x8_t *)((char *)v120 + 3 * a11) = 0;
            }
            unsigned int v130 = (int8x8_t *)((char *)v119 + v122);
            BOOL v131 = &v85[v239];
            unsigned int v132 = v84[4];
            if (v132 == 96)
            {
              int8x8_t v139 = vdup_lane_s8(*v130, 0);
              int8x8_t *v131 = v139;
              *(int8x8_t *)((char *)v131 + a11) = v139;
              *(int8x8_t *)((char *)v131 + v88) = v139;
              *(int8x8_t *)((char *)v131 + 3 * a11) = v139;
              uint64_t v133 = 1;
            }
            else if (v132 == 31)
            {
              int16x4_t v134 = (int16x4_t)*v130;
              int16x4_t v135 = (int16x4_t)v130[1];
              int16x4_t v136 = (int16x4_t)v130[2];
              int16x4_t v137 = (int16x4_t)v130[3];
              int8x8_t *v131 = (int8x8_t)vuzp1_s16((int16x4_t)*v130, v136);
              *(int16x4_t *)((char *)v131 + a11) = vuzp2_s16(v134, v136);
              unsigned int v138 = (int16x4_t *)((char *)v131 + v88);
              *unsigned int v138 = vuzp1_s16(v135, v137);
              *(int16x4_t *)((char *)v138 + a11) = vuzp2_s16(v135, v137);
              uint64_t v133 = 32;
            }
            else if (v84[4])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v85[v239], a11, (uint64_t)v130, v132);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v133 = 0;
              int8x8_t *v131 = 0;
              *(int8x8_t *)((char *)v131 + a11) = 0;
              *(int8x8_t *)((char *)v131 + v88) = 0;
              *(int8x8_t *)((char *)v131 + 3 * a11) = 0;
            }
            unsigned int v140 = (int8x8_t *)((char *)v130 + v133);
            uint64_t v141 = (int8x8_t *)((char *)v85 + 12 * a11);
            unsigned int v142 = v84[5];
            if (v142 == 96)
            {
              int8x8_t v149 = vdup_lane_s8(*v140, 0);
              *uint64_t v141 = v149;
              *(int8x8_t *)((char *)v141 + a11) = v149;
              *(int8x8_t *)((char *)v141 + v88) = v149;
              *(int8x8_t *)((char *)v141 + 3 * a11) = v149;
              uint64_t v143 = 1;
            }
            else if (v142 == 31)
            {
              int16x4_t v144 = (int16x4_t)*v140;
              int16x4_t v145 = (int16x4_t)v140[1];
              int16x4_t v146 = (int16x4_t)v140[2];
              int16x4_t v147 = (int16x4_t)v140[3];
              *uint64_t v141 = (int8x8_t)vuzp1_s16((int16x4_t)*v140, v146);
              *(int16x4_t *)((char *)v141 + a11) = vuzp2_s16(v144, v146);
              unsigned int v148 = (int16x4_t *)((char *)v141 + v88);
              int16x4_t *v148 = vuzp1_s16(v145, v147);
              *(int16x4_t *)((char *)v148 + a11) = vuzp2_s16(v145, v147);
              uint64_t v143 = 32;
            }
            else if (v84[5])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v141, a11, (uint64_t)v140, v142);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v143 = 0;
              *uint64_t v141 = 0;
              *(int8x8_t *)((char *)v141 + a11) = 0;
              *(int8x8_t *)((char *)v141 + v88) = 0;
              *(int8x8_t *)((char *)v141 + 3 * a11) = 0;
            }
            char v150 = (int8x8_t *)((char *)v140 + v143);
            char v151 = v131 + 1;
            unsigned int v152 = v84[6];
            if (v152 == 96)
            {
              int8x8_t v159 = vdup_lane_s8(*v150, 0);
              int8x8_t *v151 = v159;
              *(int8x8_t *)((char *)v151 + a11) = v159;
              *(int8x8_t *)((char *)v151 + v88) = v159;
              *(int8x8_t *)((char *)v151 + 3 * a11) = v159;
              uint64_t v153 = 1;
            }
            else if (v152 == 31)
            {
              int16x4_t v154 = (int16x4_t)*v150;
              int16x4_t v155 = (int16x4_t)v150[1];
              int16x4_t v156 = (int16x4_t)v150[2];
              int16x4_t v157 = (int16x4_t)v150[3];
              int8x8_t *v151 = (int8x8_t)vuzp1_s16((int16x4_t)*v150, v156);
              *(int16x4_t *)((char *)v151 + a11) = vuzp2_s16(v154, v156);
              uint64_t v158 = (int16x4_t *)((char *)v151 + v88);
              *uint64_t v158 = vuzp1_s16(v155, v157);
              *(int16x4_t *)((char *)v158 + a11) = vuzp2_s16(v155, v157);
              uint64_t v153 = 32;
            }
            else if (v84[6])
            {
              uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v151, a11, (uint64_t)v150, v152);
              uint64_t v88 = 2 * a11;
              uint64_t v153 = v160;
            }
            else
            {
              uint64_t v153 = 0;
              int8x8_t *v151 = 0;
              *(int8x8_t *)((char *)v151 + a11) = 0;
              *(int8x8_t *)((char *)v151 + v88) = 0;
              *(int8x8_t *)((char *)v151 + 3 * a11) = 0;
            }
            int32x4_t v161 = (int8x8_t *)((char *)v150 + v153);
            uint64_t v162 = v141 + 1;
            unsigned int v163 = v84[7];
            if (v163 == 96)
            {
              int8x8_t v169 = vdup_lane_s8(*v161, 0);
              *uint64_t v162 = v169;
              *(int8x8_t *)((char *)v162 + a11) = v169;
              *(int8x8_t *)((char *)v162 + v88) = v169;
              *(int8x8_t *)((char *)v162 + 3 * a11) = v169;
              a8 = v241;
            }
            else
            {
              a8 = v241;
              if (v163 == 31)
              {
                int16x4_t v164 = (int16x4_t)*v161;
                int16x4_t v165 = (int16x4_t)v161[1];
                int16x4_t v166 = (int16x4_t)v161[2];
                int16x4_t v167 = (int16x4_t)v161[3];
                *uint64_t v162 = (int8x8_t)vuzp1_s16((int16x4_t)*v161, v166);
                *(int16x4_t *)((char *)v162 + a11) = vuzp2_s16(v164, v166);
                unsigned int v168 = (int16x4_t *)((char *)v162 + v88);
                int16x4_t *v168 = vuzp1_s16(v165, v167);
                *(int16x4_t *)((char *)v168 + a11) = vuzp2_s16(v165, v167);
              }
              else if (v84[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v162, a11, (uint64_t)v161, v163);
              }
              else
              {
                *uint64_t v162 = 0;
                *(int8x8_t *)((char *)v162 + a11) = 0;
                *(int8x8_t *)((char *)v162 + v88) = 0;
                *(int8x8_t *)((char *)v162 + 3 * a11) = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v74;
          char v261 = v44;
          char v262 = v253;
          int v257 = v242;
          unsigned int v258 = v42 - v40;
          block[6] = a4 + 8 * v70;
          uint64_t v255 = v249 + v42 - a7;
          uint64_t v256 = a11;
          unsigned int v259 = v250;
          unsigned int v260 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_47:
            unsigned int v39 = v37 + 1;
            goto LABEL_48;
          }
          unsigned int v90 = *v84;
          if (v90 == 96)
          {
            int16x4_t v264 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v74, 0);
            int16x4_t v266 = v264;
            int16x4_t v268 = v264;
            int16x4_t v270 = v264;
            uint64_t v91 = 1;
          }
          else if (v90 == 31)
          {
            int16x4_t v170 = *(int16x4_t *)((char *)v74 + 8);
            int16x4_t v171 = (int16x4_t)v74[1];
            int16x4_t v172 = *(int16x4_t *)((char *)v74 + 24);
            int16x4_t v173 = vuzp2_s16(*(int16x4_t *)v74, v171);
            int16x4_t v264 = vuzp1_s16(*(int16x4_t *)v74, v171);
            int16x4_t v266 = v173;
            int16x4_t v268 = vuzp1_s16(v170, v172);
            int16x4_t v270 = vuzp2_s16(v170, v172);
            uint64_t v91 = 32;
          }
          else if (*v84)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 16, (uint64_t)v74, v90);
          }
          else
          {
            uint64_t v91 = 0;
            int16x4_t v264 = 0;
            int16x4_t v266 = 0;
            int16x4_t v268 = 0;
            int16x4_t v270 = 0;
          }
          uint64_t v174 = (int8x8_t *)((char *)v74 + v91);
          unsigned int v175 = v84[1];
          if (v175 == 96)
          {
            int16x4_t v272 = (int16x4_t)vdup_lane_s8(*v174, 0);
            int16x4_t v274 = v272;
            int16x4_t v276 = v272;
            int16x4_t v278 = v272;
            uint64_t v176 = 1;
          }
          else if (v175 == 31)
          {
            int16x4_t v177 = (int16x4_t)v174[1];
            int16x4_t v178 = (int16x4_t)v174[2];
            int16x4_t v179 = (int16x4_t)v174[3];
            int16x4_t v180 = vuzp2_s16((int16x4_t)*v174, v178);
            int16x4_t v272 = vuzp1_s16((int16x4_t)*v174, v178);
            int16x4_t v274 = v180;
            int16x4_t v276 = vuzp1_s16(v177, v179);
            int16x4_t v278 = vuzp2_s16(v177, v179);
            uint64_t v176 = 32;
          }
          else if (v84[1])
          {
            uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 16, (uint64_t)v174, v175);
          }
          else
          {
            uint64_t v176 = 0;
            int16x4_t v272 = 0;
            int16x4_t v274 = 0;
            int16x4_t v276 = 0;
            int16x4_t v278 = 0;
          }
          unsigned int v181 = (int8x8_t *)((char *)v174 + v176);
          unsigned int v182 = v84[2];
          if (v182 == 96)
          {
            int16x4_t v265 = (int16x4_t)vdup_lane_s8(*v181, 0);
            int16x4_t v267 = v265;
            int16x4_t v269 = v265;
            int16x4_t v271 = v265;
            uint64_t v183 = 1;
          }
          else if (v182 == 31)
          {
            int16x4_t v184 = (int16x4_t)v181[1];
            int16x4_t v185 = (int16x4_t)v181[2];
            int16x4_t v186 = (int16x4_t)v181[3];
            int16x4_t v187 = vuzp2_s16((int16x4_t)*v181, v185);
            int16x4_t v265 = vuzp1_s16((int16x4_t)*v181, v185);
            int16x4_t v267 = v187;
            int16x4_t v269 = vuzp1_s16(v184, v186);
            int16x4_t v271 = vuzp2_s16(v184, v186);
            uint64_t v183 = 32;
          }
          else if (v84[2])
          {
            uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 16, (uint64_t)v181, v182);
          }
          else
          {
            uint64_t v183 = 0;
            int16x4_t v265 = 0;
            int16x4_t v267 = 0;
            int16x4_t v269 = 0;
            int16x4_t v271 = 0;
          }
          float64x2_t v188 = (int8x8_t *)((char *)v181 + v183);
          unsigned int v189 = v84[3];
          if (v189 == 96)
          {
            int16x4_t v273 = (int16x4_t)vdup_lane_s8(*v188, 0);
            int16x4_t v275 = v273;
            int16x4_t v277 = v273;
            int16x4_t v279 = v273;
            uint64_t v190 = 1;
          }
          else if (v189 == 31)
          {
            int16x4_t v191 = (int16x4_t)v188[1];
            int16x4_t v192 = (int16x4_t)v188[2];
            int16x4_t v193 = (int16x4_t)v188[3];
            int16x4_t v194 = vuzp2_s16((int16x4_t)*v188, v192);
            int16x4_t v273 = vuzp1_s16((int16x4_t)*v188, v192);
            int16x4_t v275 = v194;
            int16x4_t v277 = vuzp1_s16(v191, v193);
            int16x4_t v279 = vuzp2_s16(v191, v193);
            uint64_t v190 = 32;
          }
          else if (v84[3])
          {
            uint64_t v190 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 16, (uint64_t)v188, v189);
          }
          else
          {
            uint64_t v190 = 0;
            int16x4_t v273 = 0;
            int16x4_t v275 = 0;
            int16x4_t v277 = 0;
            int16x4_t v279 = 0;
          }
          uint64_t v195 = (int8x8_t *)((char *)v188 + v190);
          unsigned int v196 = v84[4];
          if (v196 == 96)
          {
            int16x4_t v280 = (int16x4_t)vdup_lane_s8(*v195, 0);
            int16x4_t v282 = v280;
            int16x4_t v284 = v280;
            int16x4_t v286 = v280;
            uint64_t v197 = 1;
          }
          else if (v196 == 31)
          {
            int16x4_t v198 = (int16x4_t)v195[1];
            int16x4_t v199 = (int16x4_t)v195[2];
            int16x4_t v200 = (int16x4_t)v195[3];
            int16x4_t v201 = vuzp2_s16((int16x4_t)*v195, v199);
            int16x4_t v280 = vuzp1_s16((int16x4_t)*v195, v199);
            int16x4_t v282 = v201;
            int16x4_t v284 = vuzp1_s16(v198, v200);
            int16x4_t v286 = vuzp2_s16(v198, v200);
            uint64_t v197 = 32;
          }
          else if (v84[4])
          {
            uint64_t v197 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 16, (uint64_t)v195, v196);
          }
          else
          {
            uint64_t v197 = 0;
            int16x4_t v280 = 0;
            int16x4_t v282 = 0;
            int16x4_t v284 = 0;
            int16x4_t v286 = 0;
          }
          int32x4_t v202 = (int8x8_t *)((char *)v195 + v197);
          unsigned int v203 = v84[5];
          if (v203 == 96)
          {
            int16x4_t v288 = (int16x4_t)vdup_lane_s8(*v202, 0);
            int16x4_t v290 = v288;
            int16x4_t v292 = v288;
            int16x4_t v294 = v288;
            uint64_t v204 = 1;
          }
          else if (v203 == 31)
          {
            int16x4_t v205 = (int16x4_t)v202[1];
            int16x4_t v206 = (int16x4_t)v202[2];
            int16x4_t v207 = (int16x4_t)v202[3];
            int16x4_t v208 = vuzp2_s16((int16x4_t)*v202, v206);
            int16x4_t v288 = vuzp1_s16((int16x4_t)*v202, v206);
            int16x4_t v290 = v208;
            int16x4_t v292 = vuzp1_s16(v205, v207);
            int16x4_t v294 = vuzp2_s16(v205, v207);
            uint64_t v204 = 32;
          }
          else if (v84[5])
          {
            uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 16, (uint64_t)v202, v203);
          }
          else
          {
            uint64_t v204 = 0;
            int16x4_t v288 = 0;
            int16x4_t v290 = 0;
            int16x4_t v292 = 0;
            int16x4_t v294 = 0;
          }
          uint64_t v209 = (int8x8_t *)((char *)v202 + v204);
          unsigned int v210 = v84[6];
          if (v210 == 96)
          {
            int16x4_t v281 = (int16x4_t)vdup_lane_s8(*v209, 0);
            int16x4_t v283 = v281;
            int16x4_t v285 = v281;
            int16x4_t v287 = v281;
            uint64_t v211 = 1;
          }
          else if (v210 == 31)
          {
            int16x4_t v212 = (int16x4_t)v209[1];
            int16x4_t v213 = (int16x4_t)v209[2];
            int16x4_t v214 = (int16x4_t)v209[3];
            int16x4_t v215 = vuzp2_s16((int16x4_t)*v209, v213);
            int16x4_t v281 = vuzp1_s16((int16x4_t)*v209, v213);
            int16x4_t v283 = v215;
            int16x4_t v285 = vuzp1_s16(v212, v214);
            int16x4_t v287 = vuzp2_s16(v212, v214);
            uint64_t v211 = 32;
          }
          else if (v84[6])
          {
            uint64_t v211 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 16, (uint64_t)v209, v210);
          }
          else
          {
            uint64_t v211 = 0;
            int16x4_t v281 = 0;
            int16x4_t v283 = 0;
            int16x4_t v285 = 0;
            int16x4_t v287 = 0;
          }
          BOOL v216 = (int8x8_t *)((char *)v209 + v211);
          unsigned int v217 = v84[7];
          if (v217 == 96)
          {
            int16x4_t v289 = (int16x4_t)vdup_lane_s8(*v216, 0);
            int16x4_t v291 = v289;
            int16x4_t v293 = v289;
            int16x4_t v295 = v289;
          }
          else if (v217 == 31)
          {
            int16x4_t v218 = (int16x4_t)v216[1];
            int16x4_t v219 = (int16x4_t)v216[2];
            int16x4_t v220 = (int16x4_t)v216[3];
            int16x4_t v221 = vuzp2_s16((int16x4_t)*v216, v219);
            int16x4_t v289 = vuzp1_s16((int16x4_t)*v216, v219);
            int16x4_t v291 = v221;
            int16x4_t v293 = vuzp1_s16(v218, v220);
            int16x4_t v295 = vuzp2_s16(v218, v220);
          }
          else if (v84[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 16, (uint64_t)v216, v217);
          }
          else
          {
            int16x4_t v289 = 0;
            int16x4_t v291 = 0;
            int16x4_t v293 = 0;
            int16x4_t v295 = 0;
          }
          unint64_t v222 = v259;
          unsigned int v39 = v37 + 1;
          if (v259 && v260)
          {
            unint64_t v223 = 0;
            uint64_t v224 = (char *)&v264 + 16 * v257 + v258;
            int v225 = 1;
            do
            {
              if (v225)
              {
                uint64_t v226 = 0;
                uint64_t v227 = v255 + v256 * v223;
                do
                {
                  *(unsigned char *)(v227 + v226) = v224[v226];
                  int v225 = v260;
                  ++v226;
                }
                while (v260 > v226);
                unint64_t v222 = v259;
              }
              ++v223;
              v224 += 16;
            }
            while (v223 < v222);
          }
LABEL_48:
          BOOL v21 = v37 == v244 >> 4;
          unsigned int v37 = v39;
        }
        while (!v21);
        BOOL v21 = v20++ == v232;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v251 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v232 = v17;
  unsigned int v234 = v17 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v245 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v234)
  {
    unsigned int v243 = a7 + a9 - 1;
    if (a7 >> 4 <= v243 >> 4)
    {
      unsigned int v229 = a5 - 1;
      unsigned int v231 = (a6 - 1) >> 4;
      int v252 = ((a5 - 1) & 0xF) + 1;
      int v230 = ((a6 - 1) & 0xF) + 1;
      uint64_t v235 = a11;
      uint64_t v236 = 4 * a11;
      int32x2_t v26 = (int32x2_t)__PAIR64__(a5, a6);
      unsigned int v27 = (a5 - 1) >> 4;
      uint32x2_t v28 = (uint32x2_t)vadd_s32(v26, (int32x2_t)0xF0000000FLL);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v242 = v29.i32[0] | v29.i32[1];
      BOOL v240 = v29.i32[1] != 0;
      int8x8_t v241 = v29;
      BOOL v239 = v29.i32[0] != 0;
      unint64_t v228 = 8 * v20 * (unint64_t)v19;
      unsigned int v237 = v27;
      do
      {
        unsigned int v30 = (16 * v18) | 0xF;
        if (16 * v18 <= v251) {
          int v31 = v251;
        }
        else {
          int v31 = 16 * v18;
        }
        unsigned int v32 = a7 >> 4;
        if (v232 < v30) {
          unsigned int v30 = v232;
        }
        int v238 = v31 - 16 * v18;
        int v249 = v30 - v31 + 1;
        unsigned int v250 = 16 * v18;
        int v33 = v230;
        if (v18 != v231) {
          int v33 = 16;
        }
        unsigned int v253 = v33;
        uint64_t v248 = a2 + (v31 - v251) * a11;
        do
        {
          unsigned int v39 = 16 * v32;
          unsigned int v40 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v32;
          }
          if (v243 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v32 == v27) {
            unsigned int v43 = v252;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v250 >= v251 && v39 >= a7)
          {
            int v45 = v252;
            if (v32 != v27) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v249 != v253;
          }
          if (isLevelTiled)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v228 >> (*(unsigned char *)(a1 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  unsigned int v66 = 16;
                  char v69 = 1;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v220 = (v66 >> 4) - 1;
            if (v68)
            {
              unsigned int v221 = 0;
              if (v69) {
                goto LABEL_239;
              }
LABEL_228:
              unsigned int v222 = 32 - __clz(~(-1 << -(char)__clz(((v70 + 15) >> 4) - 1)));
              if (v222 | v221) {
                goto LABEL_229;
              }
LABEL_240:
              uint64_t v224 = 0;
            }
            else
            {
              unsigned int v221 = 32 - __clz(~(-1 << -(char)__clz(v220)));
              if ((v69 & 1) == 0) {
                goto LABEL_228;
              }
LABEL_239:
              unsigned int v222 = 0;
              if (!v221) {
                goto LABEL_240;
              }
LABEL_229:
              int v223 = 0;
              uint64_t v224 = 0;
              BOOL v225 = v221 != 0;
              BOOL v226 = v222 != 0;
              int v227 = 1;
              do
              {
                --v221;
                if (v225) {
                  v224 |= (unint64_t)(v227 & v32 & v220) << v223++;
                }
                else {
                  unsigned int v221 = 0;
                }
                --v222;
                if (v226) {
                  v224 |= (unint64_t)(v227 & v18 & ((v70 >> 4) - 1)) << v223++;
                }
                else {
                  unsigned int v222 = 0;
                }
                v227 *= 2;
                --v223;
                BOOL v226 = v222 != 0;
                BOOL v225 = v221 != 0;
              }
              while (v222 | v221);
            }
            unint64_t v54 = ((unint64_t)(v39 / v66 + v250 / v70 * ((v66 + v229) / v66)) << 14) + (v224 << 8);
            goto LABEL_59;
          }
          if (v242)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v239;
            BOOL v51 = v240;
            __int32 v53 = v241.i32[0];
            __int32 v52 = v241.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v32) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_59:
          unsigned int v55 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_81:
              uint64_t v62 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_81;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v32) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_82:
          BOOL v71 = (_OWORD *)(a3 + v54);
          if (v245)
          {
            long long v72 = v71[13];
            v263[12] = v71[12];
            v263[13] = v72;
            long long v73 = v71[15];
            v263[14] = v71[14];
            v263[15] = v73;
            long long v74 = v71[9];
            v263[8] = v71[8];
            v263[9] = v74;
            long long v75 = v71[11];
            v263[10] = v71[10];
            v263[11] = v75;
            long long v76 = v71[5];
            v263[4] = v71[4];
            v263[5] = v76;
            long long v77 = v71[7];
            v263[6] = v71[6];
            v263[7] = v77;
            long long v78 = v71[1];
            v263[0] = *v71;
            v263[1] = v78;
            long long v79 = v71[2];
            long long v80 = v71[3];
            BOOL v71 = v263;
            v263[2] = v79;
            v263[3] = v80;
          }
          long long v81 = (unsigned __int8 *)(a4 + 8 * v62);
          long long v82 = (int8x8_t *)(v248 + v41 - a7);
          char v83 = v43 < 0x10 || v44;
          if ((v83 & 1) != 0 || v253 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v71;
            char v261 = v43;
            char v262 = v253;
            int v257 = v238;
            unsigned int v258 = v41 - v39;
            block[6] = a4 + 8 * v62;
            uint64_t v255 = v248 + v41 - a7;
            uint64_t v256 = a11;
            unsigned int v259 = v249;
            unsigned int v260 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v87 = *v81;
            if (v87 == 96)
            {
              int16x4_t v264 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v71, 0);
              int16x4_t v266 = v264;
              int16x4_t v268 = v264;
              int16x4_t v270 = v264;
              uint64_t v88 = 1;
            }
            else if (v87 == 31)
            {
              int16x4_t v162 = *(int16x4_t *)((char *)v71 + 8);
              int16x4_t v163 = (int16x4_t)v71[1];
              int16x4_t v164 = *(int16x4_t *)((char *)v71 + 24);
              int16x4_t v165 = vuzp2_s16(*(int16x4_t *)v71, v163);
              int16x4_t v264 = vuzp1_s16(*(int16x4_t *)v71, v163);
              int16x4_t v266 = v165;
              int16x4_t v268 = vuzp1_s16(v162, v164);
              int16x4_t v270 = vuzp2_s16(v162, v164);
              uint64_t v88 = 32;
            }
            else if (*v81)
            {
              uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 16, (uint64_t)v71, v87);
            }
            else
            {
              uint64_t v88 = 0;
              int16x4_t v264 = 0;
              int16x4_t v266 = 0;
              int16x4_t v268 = 0;
              int16x4_t v270 = 0;
            }
            int16x4_t v166 = (int8x8_t *)((char *)v71 + v88);
            unsigned int v167 = v81[1];
            if (v167 == 96)
            {
              int16x4_t v272 = (int16x4_t)vdup_lane_s8(*v166, 0);
              int16x4_t v274 = v272;
              int16x4_t v276 = v272;
              int16x4_t v278 = v272;
              uint64_t v168 = 1;
            }
            else if (v167 == 31)
            {
              int16x4_t v169 = (int16x4_t)v166[1];
              int16x4_t v170 = (int16x4_t)v166[2];
              int16x4_t v171 = (int16x4_t)v166[3];
              int16x4_t v172 = vuzp2_s16((int16x4_t)*v166, v170);
              int16x4_t v272 = vuzp1_s16((int16x4_t)*v166, v170);
              int16x4_t v274 = v172;
              int16x4_t v276 = vuzp1_s16(v169, v171);
              int16x4_t v278 = vuzp2_s16(v169, v171);
              uint64_t v168 = 32;
            }
            else if (v81[1])
            {
              uint64_t v168 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 16, (uint64_t)v166, v167);
            }
            else
            {
              uint64_t v168 = 0;
              int16x4_t v272 = 0;
              int16x4_t v274 = 0;
              int16x4_t v276 = 0;
              int16x4_t v278 = 0;
            }
            int16x4_t v173 = (int8x8_t *)((char *)v166 + v168);
            unsigned int v174 = v81[2];
            if (v174 == 96)
            {
              int16x4_t v265 = (int16x4_t)vdup_lane_s8(*v173, 0);
              int16x4_t v267 = v265;
              int16x4_t v269 = v265;
              int16x4_t v271 = v265;
              uint64_t v175 = 1;
            }
            else if (v174 == 31)
            {
              int16x4_t v176 = (int16x4_t)v173[1];
              int16x4_t v177 = (int16x4_t)v173[2];
              int16x4_t v178 = (int16x4_t)v173[3];
              int16x4_t v179 = vuzp2_s16((int16x4_t)*v173, v177);
              int16x4_t v265 = vuzp1_s16((int16x4_t)*v173, v177);
              int16x4_t v267 = v179;
              int16x4_t v269 = vuzp1_s16(v176, v178);
              int16x4_t v271 = vuzp2_s16(v176, v178);
              uint64_t v175 = 32;
            }
            else if (v81[2])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 16, (uint64_t)v173, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int16x4_t v265 = 0;
              int16x4_t v267 = 0;
              int16x4_t v269 = 0;
              int16x4_t v271 = 0;
            }
            int16x4_t v180 = (int8x8_t *)((char *)v173 + v175);
            unsigned int v181 = v81[3];
            if (v181 == 96)
            {
              int16x4_t v273 = (int16x4_t)vdup_lane_s8(*v180, 0);
              int16x4_t v275 = v273;
              int16x4_t v277 = v273;
              int16x4_t v279 = v273;
              uint64_t v182 = 1;
            }
            else if (v181 == 31)
            {
              int16x4_t v183 = (int16x4_t)v180[1];
              int16x4_t v184 = (int16x4_t)v180[2];
              int16x4_t v185 = (int16x4_t)v180[3];
              int16x4_t v186 = vuzp2_s16((int16x4_t)*v180, v184);
              int16x4_t v273 = vuzp1_s16((int16x4_t)*v180, v184);
              int16x4_t v275 = v186;
              int16x4_t v277 = vuzp1_s16(v183, v185);
              int16x4_t v279 = vuzp2_s16(v183, v185);
              uint64_t v182 = 32;
            }
            else if (v81[3])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 16, (uint64_t)v180, v181);
            }
            else
            {
              uint64_t v182 = 0;
              int16x4_t v273 = 0;
              int16x4_t v275 = 0;
              int16x4_t v277 = 0;
              int16x4_t v279 = 0;
            }
            int16x4_t v187 = (int8x8_t *)((char *)v180 + v182);
            unsigned int v188 = v81[4];
            if (v188 == 96)
            {
              int16x4_t v280 = (int16x4_t)vdup_lane_s8(*v187, 0);
              int16x4_t v282 = v280;
              int16x4_t v284 = v280;
              int16x4_t v286 = v280;
              uint64_t v189 = 1;
            }
            else if (v188 == 31)
            {
              int16x4_t v190 = (int16x4_t)v187[1];
              int16x4_t v191 = (int16x4_t)v187[2];
              int16x4_t v192 = (int16x4_t)v187[3];
              int16x4_t v193 = vuzp2_s16((int16x4_t)*v187, v191);
              int16x4_t v280 = vuzp1_s16((int16x4_t)*v187, v191);
              int16x4_t v282 = v193;
              int16x4_t v284 = vuzp1_s16(v190, v192);
              int16x4_t v286 = vuzp2_s16(v190, v192);
              uint64_t v189 = 32;
            }
            else if (v81[4])
            {
              uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 16, (uint64_t)v187, v188);
            }
            else
            {
              uint64_t v189 = 0;
              int16x4_t v280 = 0;
              int16x4_t v282 = 0;
              int16x4_t v284 = 0;
              int16x4_t v286 = 0;
            }
            int16x4_t v194 = (int8x8_t *)((char *)v187 + v189);
            unsigned int v195 = v81[5];
            if (v195 == 96)
            {
              int16x4_t v288 = (int16x4_t)vdup_lane_s8(*v194, 0);
              int16x4_t v290 = v288;
              int16x4_t v292 = v288;
              int16x4_t v294 = v288;
              uint64_t v196 = 1;
            }
            else if (v195 == 31)
            {
              int16x4_t v197 = (int16x4_t)v194[1];
              int16x4_t v198 = (int16x4_t)v194[2];
              int16x4_t v199 = (int16x4_t)v194[3];
              int16x4_t v200 = vuzp2_s16((int16x4_t)*v194, v198);
              int16x4_t v288 = vuzp1_s16((int16x4_t)*v194, v198);
              int16x4_t v290 = v200;
              int16x4_t v292 = vuzp1_s16(v197, v199);
              int16x4_t v294 = vuzp2_s16(v197, v199);
              uint64_t v196 = 32;
            }
            else if (v81[5])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 16, (uint64_t)v194, v195);
            }
            else
            {
              uint64_t v196 = 0;
              int16x4_t v288 = 0;
              int16x4_t v290 = 0;
              int16x4_t v292 = 0;
              int16x4_t v294 = 0;
            }
            int16x4_t v201 = (int8x8_t *)((char *)v194 + v196);
            unsigned int v202 = v81[6];
            if (v202 == 96)
            {
              int16x4_t v281 = (int16x4_t)vdup_lane_s8(*v201, 0);
              int16x4_t v283 = v281;
              int16x4_t v285 = v281;
              int16x4_t v287 = v281;
              uint64_t v203 = 1;
            }
            else if (v202 == 31)
            {
              int16x4_t v204 = (int16x4_t)v201[1];
              int16x4_t v205 = (int16x4_t)v201[2];
              int16x4_t v206 = (int16x4_t)v201[3];
              int16x4_t v207 = vuzp2_s16((int16x4_t)*v201, v205);
              int16x4_t v281 = vuzp1_s16((int16x4_t)*v201, v205);
              int16x4_t v283 = v207;
              int16x4_t v285 = vuzp1_s16(v204, v206);
              int16x4_t v287 = vuzp2_s16(v204, v206);
              uint64_t v203 = 32;
            }
            else if (v81[6])
            {
              uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 16, (uint64_t)v201, v202);
            }
            else
            {
              uint64_t v203 = 0;
              int16x4_t v281 = 0;
              int16x4_t v283 = 0;
              int16x4_t v285 = 0;
              int16x4_t v287 = 0;
            }
            int16x4_t v208 = (int8x8_t *)((char *)v201 + v203);
            unsigned int v209 = v81[7];
            if (v209 == 96)
            {
              int16x4_t v289 = (int16x4_t)vdup_lane_s8(*v208, 0);
              int16x4_t v291 = v289;
              int16x4_t v293 = v289;
              int16x4_t v295 = v289;
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            else if (v209 == 31)
            {
              int16x4_t v211 = (int16x4_t)v208[1];
              int16x4_t v212 = (int16x4_t)v208[2];
              int16x4_t v213 = (int16x4_t)v208[3];
              int16x4_t v214 = vuzp2_s16((int16x4_t)*v208, v212);
              int16x4_t v289 = vuzp1_s16((int16x4_t)*v208, v212);
              int16x4_t v291 = v214;
              int16x4_t v293 = vuzp1_s16(v211, v213);
              int16x4_t v295 = vuzp2_s16(v211, v213);
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            else if (v81[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 16, (uint64_t)v208, v209);
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            else
            {
              int16x4_t v289 = 0;
              int16x4_t v291 = 0;
              int16x4_t v293 = 0;
              int16x4_t v295 = 0;
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            if (v260)
            {
              unint64_t v215 = 0;
              BOOL v216 = (char *)&v264 + 16 * v257 + v258;
              int v217 = 1;
              do
              {
                if (v217)
                {
                  uint64_t v218 = 0;
                  uint64_t v219 = v255 + v256 * v215;
                  do
                  {
                    *(unsigned char *)(v219 + v218) = v216[v218];
                    int v217 = v260;
                    ++v218;
                  }
                  while (v260 > v218);
                  unint64_t v210 = v259;
                }
                ++v215;
                v216 += 16;
              }
              while (v215 < v210);
            }
          }
          else
          {
            unsigned int v84 = *v81;
            if (v84 == 96)
            {
              int8x8_t v94 = vdup_lane_s8(*(int8x8_t *)v71, 0);
              *long long v82 = v94;
              *(int8x8_t *)((char *)v82 + a11) = v94;
              uint64_t v85 = 2 * a11;
              *(int8x8_t *)((char *)v82 + 2 * a11) = v94;
              *(int8x8_t *)((char *)v82 + 3 * a11) = v94;
              uint64_t v86 = 1;
            }
            else
            {
              uint64_t v85 = 2 * a11;
              if (v84 == 31)
              {
                int16x4_t v89 = *(int16x4_t *)v71;
                int16x4_t v90 = *(int16x4_t *)((char *)v71 + 8);
                int16x4_t v91 = (int16x4_t)v71[1];
                int16x4_t v92 = *(int16x4_t *)((char *)v71 + 24);
                *long long v82 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v71, v91);
                *(int16x4_t *)((char *)v82 + a11) = vuzp2_s16(v89, v91);
                int16x4_t v93 = (int16x4_t *)((char *)v82 + 2 * a11);
                *int16x4_t v93 = vuzp1_s16(v90, v92);
                *(int16x4_t *)((char *)v93 + a11) = vuzp2_s16(v90, v92);
                uint64_t v86 = 32;
              }
              else if (*v81)
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, a11, (uint64_t)v71, v84);
                uint64_t v85 = 2 * a11;
              }
              else
              {
                uint64_t v86 = 0;
                *long long v82 = 0;
                *(int8x8_t *)((char *)v82 + a11) = 0;
                *(int8x8_t *)((char *)v82 + 2 * a11) = 0;
                *(int8x8_t *)((char *)v82 + 3 * a11) = 0;
              }
            }
            int16x4_t v95 = (int8x8_t *)((char *)v71 + v86);
            unint64_t v96 = (int8x8_t *)((char *)v82 + v236);
            unsigned int v97 = v81[1];
            if (v97 == 96)
            {
              int8x8_t v104 = vdup_lane_s8(*v95, 0);
              *unint64_t v96 = v104;
              *(int8x8_t *)((char *)v96 + a11) = v104;
              *(int8x8_t *)((char *)v96 + v85) = v104;
              *(int8x8_t *)((char *)v96 + 3 * a11) = v104;
              uint64_t v98 = 1;
            }
            else if (v97 == 31)
            {
              int16x4_t v99 = (int16x4_t)*v95;
              int16x4_t v100 = (int16x4_t)v95[1];
              int16x4_t v101 = (int16x4_t)v95[2];
              int16x4_t v102 = (int16x4_t)v95[3];
              *unint64_t v96 = (int8x8_t)vuzp1_s16((int16x4_t)*v95, v101);
              *(int16x4_t *)((char *)v96 + a11) = vuzp2_s16(v99, v101);
              int16x4_t v103 = (int16x4_t *)((char *)v96 + v85);
              *int16x4_t v103 = vuzp1_s16(v100, v102);
              *(int16x4_t *)((char *)v103 + a11) = vuzp2_s16(v100, v102);
              uint64_t v98 = 32;
            }
            else if (v81[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v82 + v236), a11, (uint64_t)v95, v97);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v98 = 0;
              *unint64_t v96 = 0;
              *(int8x8_t *)((char *)v96 + a11) = 0;
              *(int8x8_t *)((char *)v96 + v85) = 0;
              *(int8x8_t *)((char *)v96 + 3 * a11) = 0;
            }
            int16x4_t v105 = (int8x8_t *)((char *)v95 + v98);
            unsigned int v106 = v82 + 1;
            unsigned int v107 = v81[2];
            if (v107 == 96)
            {
              int8x8_t v114 = vdup_lane_s8(*v105, 0);
              *unsigned int v106 = v114;
              *(int8x8_t *)((char *)v106 + a11) = v114;
              *(int8x8_t *)((char *)v106 + v85) = v114;
              *(int8x8_t *)((char *)v106 + 3 * a11) = v114;
              uint64_t v108 = 1;
            }
            else if (v107 == 31)
            {
              int16x4_t v109 = (int16x4_t)*v105;
              int16x4_t v110 = (int16x4_t)v105[1];
              int16x4_t v111 = (int16x4_t)v105[2];
              int16x4_t v112 = (int16x4_t)v105[3];
              *unsigned int v106 = (int8x8_t)vuzp1_s16((int16x4_t)*v105, v111);
              *(int16x4_t *)((char *)v106 + a11) = vuzp2_s16(v109, v111);
              int16x4_t v113 = (int16x4_t *)((char *)v106 + v85);
              int16x4_t *v113 = vuzp1_s16(v110, v112);
              *(int16x4_t *)((char *)v113 + a11) = vuzp2_s16(v110, v112);
              uint64_t v108 = 32;
            }
            else if (v81[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, a11, (uint64_t)v105, v107);
              uint64_t v85 = 2 * a11;
              uint64_t v108 = v115;
            }
            else
            {
              uint64_t v108 = 0;
              *unsigned int v106 = 0;
              *(int8x8_t *)((char *)v106 + a11) = 0;
              *(int8x8_t *)((char *)v106 + v85) = 0;
              *(int8x8_t *)((char *)v106 + 3 * a11) = 0;
            }
            unsigned int v116 = (int8x8_t *)((char *)v105 + v108);
            int8x8_t v117 = v96 + 1;
            unsigned int v118 = v81[3];
            if (v118 == 96)
            {
              int8x8_t v125 = vdup_lane_s8(*v116, 0);
              *int8x8_t v117 = v125;
              *(int8x8_t *)((char *)v117 + a11) = v125;
              *(int8x8_t *)((char *)v117 + v85) = v125;
              *(int8x8_t *)((char *)v117 + 3 * a11) = v125;
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              int16x4_t v120 = (int16x4_t)*v116;
              int16x4_t v121 = (int16x4_t)v116[1];
              int16x4_t v122 = (int16x4_t)v116[2];
              int16x4_t v123 = (int16x4_t)v116[3];
              *int8x8_t v117 = (int8x8_t)vuzp1_s16((int16x4_t)*v116, v122);
              *(int16x4_t *)((char *)v117 + a11) = vuzp2_s16(v120, v122);
              int16x4_t v124 = (int16x4_t *)((char *)v117 + v85);
              int16x4_t *v124 = vuzp1_s16(v121, v123);
              *(int16x4_t *)((char *)v124 + a11) = vuzp2_s16(v121, v123);
              uint64_t v119 = 32;
            }
            else if (v81[3])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, a11, (uint64_t)v116, v118);
              uint64_t v85 = 2 * a11;
              uint64_t v119 = v126;
            }
            else
            {
              uint64_t v119 = 0;
              *int8x8_t v117 = 0;
              *(int8x8_t *)((char *)v117 + a11) = 0;
              *(int8x8_t *)((char *)v117 + v85) = 0;
              *(int8x8_t *)((char *)v117 + 3 * a11) = 0;
            }
            BOOL v127 = (int8x8_t *)((char *)v116 + v119);
            int8x8_t v128 = &v82[v235];
            unsigned int v129 = v81[4];
            if (v129 == 96)
            {
              int8x8_t v136 = vdup_lane_s8(*v127, 0);
              *int8x8_t v128 = v136;
              *(int8x8_t *)((char *)v128 + a11) = v136;
              *(int8x8_t *)((char *)v128 + v85) = v136;
              *(int8x8_t *)((char *)v128 + 3 * a11) = v136;
              uint64_t v130 = 1;
            }
            else if (v129 == 31)
            {
              int16x4_t v131 = (int16x4_t)*v127;
              int16x4_t v132 = (int16x4_t)v127[1];
              int16x4_t v133 = (int16x4_t)v127[2];
              int16x4_t v134 = (int16x4_t)v127[3];
              *int8x8_t v128 = (int8x8_t)vuzp1_s16((int16x4_t)*v127, v133);
              *(int16x4_t *)((char *)v128 + a11) = vuzp2_s16(v131, v133);
              int16x4_t v135 = (int16x4_t *)((char *)v128 + v85);
              int16x4_t *v135 = vuzp1_s16(v132, v134);
              *(int16x4_t *)((char *)v135 + a11) = vuzp2_s16(v132, v134);
              uint64_t v130 = 32;
            }
            else if (v81[4])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v82[v235], a11, (uint64_t)v127, v129);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v130 = 0;
              *int8x8_t v128 = 0;
              *(int8x8_t *)((char *)v128 + a11) = 0;
              *(int8x8_t *)((char *)v128 + v85) = 0;
              *(int8x8_t *)((char *)v128 + 3 * a11) = 0;
            }
            int16x4_t v137 = (int8x8_t *)((char *)v127 + v130);
            unsigned int v138 = (int8x8_t *)((char *)v82 + 12 * a11);
            unsigned int v139 = v81[5];
            if (v139 == 96)
            {
              int8x8_t v146 = vdup_lane_s8(*v137, 0);
              *unsigned int v138 = v146;
              *(int8x8_t *)((char *)v138 + a11) = v146;
              *(int8x8_t *)((char *)v138 + v85) = v146;
              *(int8x8_t *)((char *)v138 + 3 * a11) = v146;
              uint64_t v140 = 1;
            }
            else if (v139 == 31)
            {
              int16x4_t v141 = (int16x4_t)*v137;
              int16x4_t v142 = (int16x4_t)v137[1];
              int16x4_t v143 = (int16x4_t)v137[2];
              int16x4_t v144 = (int16x4_t)v137[3];
              *unsigned int v138 = (int8x8_t)vuzp1_s16((int16x4_t)*v137, v143);
              *(int16x4_t *)((char *)v138 + a11) = vuzp2_s16(v141, v143);
              int16x4_t v145 = (int16x4_t *)((char *)v138 + v85);
              int16x4_t *v145 = vuzp1_s16(v142, v144);
              *(int16x4_t *)((char *)v145 + a11) = vuzp2_s16(v142, v144);
              uint64_t v140 = 32;
            }
            else if (v81[5])
            {
              uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v138, a11, (uint64_t)v137, v139);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v140 = 0;
              *unsigned int v138 = 0;
              *(int8x8_t *)((char *)v138 + a11) = 0;
              *(int8x8_t *)((char *)v138 + v85) = 0;
              *(int8x8_t *)((char *)v138 + 3 * a11) = 0;
            }
            int16x4_t v147 = (int8x8_t *)((char *)v137 + v140);
            unsigned int v148 = v128 + 1;
            unsigned int v149 = v81[6];
            if (v149 == 96)
            {
              int8x8_t v156 = vdup_lane_s8(*v147, 0);
              int8x8_t *v148 = v156;
              *(int8x8_t *)((char *)v148 + a11) = v156;
              *(int8x8_t *)((char *)v148 + v85) = v156;
              *(int8x8_t *)((char *)v148 + 3 * a11) = v156;
              uint64_t v150 = 1;
            }
            else if (v149 == 31)
            {
              int16x4_t v151 = (int16x4_t)*v147;
              int16x4_t v152 = (int16x4_t)v147[1];
              int16x4_t v153 = (int16x4_t)v147[2];
              int16x4_t v154 = (int16x4_t)v147[3];
              int8x8_t *v148 = (int8x8_t)vuzp1_s16((int16x4_t)*v147, v153);
              *(int16x4_t *)((char *)v148 + a11) = vuzp2_s16(v151, v153);
              int16x4_t v155 = (int16x4_t *)((char *)v148 + v85);
              int16x4_t *v155 = vuzp1_s16(v152, v154);
              *(int16x4_t *)((char *)v155 + a11) = vuzp2_s16(v152, v154);
              uint64_t v150 = 32;
            }
            else if (v81[6])
            {
              uint64_t v157 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v148, a11, (uint64_t)v147, v149);
              uint64_t v85 = 2 * a11;
              uint64_t v150 = v157;
            }
            else
            {
              uint64_t v150 = 0;
              int8x8_t *v148 = 0;
              *(int8x8_t *)((char *)v148 + a11) = 0;
              *(int8x8_t *)((char *)v148 + v85) = 0;
              *(int8x8_t *)((char *)v148 + 3 * a11) = 0;
            }
            uint64_t v158 = (int8x8_t *)((char *)v147 + v150);
            int8x8_t v159 = v138 + 1;
            unsigned int v160 = v81[7];
            if (v160 == 96)
            {
              int8x8_t v161 = vdup_lane_s8(*v158, 0);
              *int8x8_t v159 = v161;
              *(int8x8_t *)((char *)v159 + a11) = v161;
              *(int8x8_t *)((char *)v159 + v85) = v161;
              *(int8x8_t *)((char *)v159 + 3 * a11) = v161;
              unsigned int v27 = v237;
            }
            else
            {
              unsigned int v27 = v237;
              if (v160 == 31)
              {
                int16x4_t v34 = (int16x4_t)*v158;
                int16x4_t v35 = (int16x4_t)v158[1];
                int16x4_t v36 = (int16x4_t)v158[2];
                int16x4_t v37 = (int16x4_t)v158[3];
                *int8x8_t v159 = (int8x8_t)vuzp1_s16((int16x4_t)*v158, v36);
                *(int16x4_t *)((char *)v159 + a11) = vuzp2_s16(v34, v36);
                int v38 = (int16x4_t *)((char *)v159 + v85);
                *int v38 = vuzp1_s16(v35, v37);
                *(int16x4_t *)((char *)v38 + a11) = vuzp2_s16(v35, v37);
              }
              else if (v81[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v159, a11, (uint64_t)v158, v160);
              }
              else
              {
                *int8x8_t v159 = 0;
                *(int8x8_t *)((char *)v159 + a11) = 0;
                *(int8x8_t *)((char *)v159 + v85) = 0;
                *(int8x8_t *)((char *)v159 + 3 * a11) = 0;
              }
            }
          }
LABEL_27:
          BOOL v22 = v32++ == v243 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v234;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v296 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v251 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v232 = v17;
  unsigned int v234 = v17 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v245 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v234)
  {
    unsigned int v243 = a7 + a9 - 1;
    if (a7 >> 4 <= v243 >> 4)
    {
      unsigned int v229 = a5 - 1;
      unsigned int v231 = (a6 - 1) >> 4;
      int v252 = ((a5 - 1) & 0xF) + 1;
      int v230 = ((a6 - 1) & 0xF) + 1;
      uint64_t v235 = a11;
      uint64_t v236 = 4 * a11;
      int32x2_t v26 = (int32x2_t)__PAIR64__(a5, a6);
      unsigned int v27 = (a5 - 1) >> 4;
      uint32x2_t v28 = (uint32x2_t)vadd_s32(v26, (int32x2_t)0xF0000000FLL);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v242 = v29.i32[0] | v29.i32[1];
      BOOL v240 = v29.i32[1] != 0;
      int8x8_t v241 = v29;
      BOOL v239 = v29.i32[0] != 0;
      unint64_t v228 = 8 * v20 * (unint64_t)v19;
      unsigned int v237 = v27;
      do
      {
        unsigned int v30 = (16 * v18) | 0xF;
        if (16 * v18 <= v251) {
          int v31 = v251;
        }
        else {
          int v31 = 16 * v18;
        }
        unsigned int v32 = a7 >> 4;
        if (v232 < v30) {
          unsigned int v30 = v232;
        }
        int v238 = v31 - 16 * v18;
        int v249 = v30 - v31 + 1;
        unsigned int v250 = 16 * v18;
        int v33 = v230;
        if (v18 != v231) {
          int v33 = 16;
        }
        unsigned int v253 = v33;
        uint64_t v248 = a2 + (v31 - v251) * a11;
        do
        {
          unsigned int v39 = 16 * v32;
          unsigned int v40 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v32;
          }
          if (v243 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v32 == v27) {
            unsigned int v43 = v252;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v250 >= v251 && v39 >= a7)
          {
            int v45 = v252;
            if (v32 != v27) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v249 != v253;
          }
          if (isLevelTiled)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v228 >> (*(unsigned char *)(a1 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  unsigned int v66 = 16;
                  char v69 = 1;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v220 = (v66 >> 4) - 1;
            if (v68)
            {
              unsigned int v221 = 0;
              if (v69) {
                goto LABEL_239;
              }
LABEL_228:
              unsigned int v222 = 32 - __clz(~(-1 << -(char)__clz(((v70 + 15) >> 4) - 1)));
              if (v222 | v221) {
                goto LABEL_229;
              }
LABEL_240:
              uint64_t v224 = 0;
            }
            else
            {
              unsigned int v221 = 32 - __clz(~(-1 << -(char)__clz(v220)));
              if ((v69 & 1) == 0) {
                goto LABEL_228;
              }
LABEL_239:
              unsigned int v222 = 0;
              if (!v221) {
                goto LABEL_240;
              }
LABEL_229:
              int v223 = 0;
              uint64_t v224 = 0;
              BOOL v225 = v221 != 0;
              BOOL v226 = v222 != 0;
              int v227 = 1;
              do
              {
                --v221;
                if (v225) {
                  v224 |= (unint64_t)(v227 & v32 & v220) << v223++;
                }
                else {
                  unsigned int v221 = 0;
                }
                --v222;
                if (v226) {
                  v224 |= (unint64_t)(v227 & v18 & ((v70 >> 4) - 1)) << v223++;
                }
                else {
                  unsigned int v222 = 0;
                }
                v227 *= 2;
                --v223;
                BOOL v226 = v222 != 0;
                BOOL v225 = v221 != 0;
              }
              while (v222 | v221);
            }
            unint64_t v54 = ((unint64_t)(v39 / v66 + v250 / v70 * ((v66 + v229) / v66)) << 14) + (v224 << 8);
            goto LABEL_59;
          }
          if (v242)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v239;
            BOOL v51 = v240;
            __int32 v53 = v241.i32[0];
            __int32 v52 = v241.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v32) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_59:
          unsigned int v55 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_81:
              uint64_t v62 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_81;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v32) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_82:
          BOOL v71 = (_OWORD *)(a3 + v54);
          if (v245)
          {
            long long v72 = v71[13];
            v263[12] = v71[12];
            v263[13] = v72;
            long long v73 = v71[15];
            v263[14] = v71[14];
            v263[15] = v73;
            long long v74 = v71[9];
            v263[8] = v71[8];
            v263[9] = v74;
            long long v75 = v71[11];
            v263[10] = v71[10];
            v263[11] = v75;
            long long v76 = v71[5];
            v263[4] = v71[4];
            v263[5] = v76;
            long long v77 = v71[7];
            v263[6] = v71[6];
            v263[7] = v77;
            long long v78 = v71[1];
            v263[0] = *v71;
            v263[1] = v78;
            long long v79 = v71[2];
            long long v80 = v71[3];
            BOOL v71 = v263;
            v263[2] = v79;
            v263[3] = v80;
          }
          long long v81 = (unsigned __int8 *)(a4 + 8 * v62);
          long long v82 = (int8x8_t *)(v248 + v41 - a7);
          char v83 = v43 < 0x10 || v44;
          if ((v83 & 1) != 0 || v253 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v71;
            char v261 = v43;
            char v262 = v253;
            int v257 = v238;
            unsigned int v258 = v41 - v39;
            block[6] = a4 + 8 * v62;
            uint64_t v255 = v248 + v41 - a7;
            uint64_t v256 = a11;
            unsigned int v259 = v249;
            unsigned int v260 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v87 = *v81;
            if (v87 == 96)
            {
              int16x4_t v264 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v71, 0);
              int16x4_t v266 = v264;
              int16x4_t v268 = v264;
              int16x4_t v270 = v264;
              uint64_t v88 = 1;
            }
            else if (v87 == 31)
            {
              int16x4_t v162 = *(int16x4_t *)((char *)v71 + 8);
              int16x4_t v163 = (int16x4_t)v71[1];
              int16x4_t v164 = *(int16x4_t *)((char *)v71 + 24);
              int16x4_t v165 = vuzp2_s16(*(int16x4_t *)v71, v163);
              int16x4_t v264 = vuzp1_s16(*(int16x4_t *)v71, v163);
              int16x4_t v266 = v165;
              int16x4_t v268 = vuzp1_s16(v162, v164);
              int16x4_t v270 = vuzp2_s16(v162, v164);
              uint64_t v88 = 32;
            }
            else if (*v81)
            {
              uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 16, (uint64_t)v71, v87);
            }
            else
            {
              uint64_t v88 = 0;
              int16x4_t v264 = 0;
              int16x4_t v266 = 0;
              int16x4_t v268 = 0;
              int16x4_t v270 = 0;
            }
            int16x4_t v166 = (int8x8_t *)((char *)v71 + v88);
            unsigned int v167 = v81[1];
            if (v167 == 96)
            {
              int16x4_t v272 = (int16x4_t)vdup_lane_s8(*v166, 0);
              int16x4_t v274 = v272;
              int16x4_t v276 = v272;
              int16x4_t v278 = v272;
              uint64_t v168 = 1;
            }
            else if (v167 == 31)
            {
              int16x4_t v169 = (int16x4_t)v166[1];
              int16x4_t v170 = (int16x4_t)v166[2];
              int16x4_t v171 = (int16x4_t)v166[3];
              int16x4_t v172 = vuzp2_s16((int16x4_t)*v166, v170);
              int16x4_t v272 = vuzp1_s16((int16x4_t)*v166, v170);
              int16x4_t v274 = v172;
              int16x4_t v276 = vuzp1_s16(v169, v171);
              int16x4_t v278 = vuzp2_s16(v169, v171);
              uint64_t v168 = 32;
            }
            else if (v81[1])
            {
              uint64_t v168 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 16, (uint64_t)v166, v167);
            }
            else
            {
              uint64_t v168 = 0;
              int16x4_t v272 = 0;
              int16x4_t v274 = 0;
              int16x4_t v276 = 0;
              int16x4_t v278 = 0;
            }
            int16x4_t v173 = (int8x8_t *)((char *)v166 + v168);
            unsigned int v174 = v81[2];
            if (v174 == 96)
            {
              int16x4_t v265 = (int16x4_t)vdup_lane_s8(*v173, 0);
              int16x4_t v267 = v265;
              int16x4_t v269 = v265;
              int16x4_t v271 = v265;
              uint64_t v175 = 1;
            }
            else if (v174 == 31)
            {
              int16x4_t v176 = (int16x4_t)v173[1];
              int16x4_t v177 = (int16x4_t)v173[2];
              int16x4_t v178 = (int16x4_t)v173[3];
              int16x4_t v179 = vuzp2_s16((int16x4_t)*v173, v177);
              int16x4_t v265 = vuzp1_s16((int16x4_t)*v173, v177);
              int16x4_t v267 = v179;
              int16x4_t v269 = vuzp1_s16(v176, v178);
              int16x4_t v271 = vuzp2_s16(v176, v178);
              uint64_t v175 = 32;
            }
            else if (v81[2])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 16, (uint64_t)v173, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int16x4_t v265 = 0;
              int16x4_t v267 = 0;
              int16x4_t v269 = 0;
              int16x4_t v271 = 0;
            }
            int16x4_t v180 = (int8x8_t *)((char *)v173 + v175);
            unsigned int v181 = v81[3];
            if (v181 == 96)
            {
              int16x4_t v273 = (int16x4_t)vdup_lane_s8(*v180, 0);
              int16x4_t v275 = v273;
              int16x4_t v277 = v273;
              int16x4_t v279 = v273;
              uint64_t v182 = 1;
            }
            else if (v181 == 31)
            {
              int16x4_t v183 = (int16x4_t)v180[1];
              int16x4_t v184 = (int16x4_t)v180[2];
              int16x4_t v185 = (int16x4_t)v180[3];
              int16x4_t v186 = vuzp2_s16((int16x4_t)*v180, v184);
              int16x4_t v273 = vuzp1_s16((int16x4_t)*v180, v184);
              int16x4_t v275 = v186;
              int16x4_t v277 = vuzp1_s16(v183, v185);
              int16x4_t v279 = vuzp2_s16(v183, v185);
              uint64_t v182 = 32;
            }
            else if (v81[3])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 16, (uint64_t)v180, v181);
            }
            else
            {
              uint64_t v182 = 0;
              int16x4_t v273 = 0;
              int16x4_t v275 = 0;
              int16x4_t v277 = 0;
              int16x4_t v279 = 0;
            }
            int16x4_t v187 = (int8x8_t *)((char *)v180 + v182);
            unsigned int v188 = v81[4];
            if (v188 == 96)
            {
              int16x4_t v280 = (int16x4_t)vdup_lane_s8(*v187, 0);
              int16x4_t v282 = v280;
              int16x4_t v284 = v280;
              int16x4_t v286 = v280;
              uint64_t v189 = 1;
            }
            else if (v188 == 31)
            {
              int16x4_t v190 = (int16x4_t)v187[1];
              int16x4_t v191 = (int16x4_t)v187[2];
              int16x4_t v192 = (int16x4_t)v187[3];
              int16x4_t v193 = vuzp2_s16((int16x4_t)*v187, v191);
              int16x4_t v280 = vuzp1_s16((int16x4_t)*v187, v191);
              int16x4_t v282 = v193;
              int16x4_t v284 = vuzp1_s16(v190, v192);
              int16x4_t v286 = vuzp2_s16(v190, v192);
              uint64_t v189 = 32;
            }
            else if (v81[4])
            {
              uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 16, (uint64_t)v187, v188);
            }
            else
            {
              uint64_t v189 = 0;
              int16x4_t v280 = 0;
              int16x4_t v282 = 0;
              int16x4_t v284 = 0;
              int16x4_t v286 = 0;
            }
            int16x4_t v194 = (int8x8_t *)((char *)v187 + v189);
            unsigned int v195 = v81[5];
            if (v195 == 96)
            {
              int16x4_t v288 = (int16x4_t)vdup_lane_s8(*v194, 0);
              int16x4_t v290 = v288;
              int16x4_t v292 = v288;
              int16x4_t v294 = v288;
              uint64_t v196 = 1;
            }
            else if (v195 == 31)
            {
              int16x4_t v197 = (int16x4_t)v194[1];
              int16x4_t v198 = (int16x4_t)v194[2];
              int16x4_t v199 = (int16x4_t)v194[3];
              int16x4_t v200 = vuzp2_s16((int16x4_t)*v194, v198);
              int16x4_t v288 = vuzp1_s16((int16x4_t)*v194, v198);
              int16x4_t v290 = v200;
              int16x4_t v292 = vuzp1_s16(v197, v199);
              int16x4_t v294 = vuzp2_s16(v197, v199);
              uint64_t v196 = 32;
            }
            else if (v81[5])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 16, (uint64_t)v194, v195);
            }
            else
            {
              uint64_t v196 = 0;
              int16x4_t v288 = 0;
              int16x4_t v290 = 0;
              int16x4_t v292 = 0;
              int16x4_t v294 = 0;
            }
            int16x4_t v201 = (int8x8_t *)((char *)v194 + v196);
            unsigned int v202 = v81[6];
            if (v202 == 96)
            {
              int16x4_t v281 = (int16x4_t)vdup_lane_s8(*v201, 0);
              int16x4_t v283 = v281;
              int16x4_t v285 = v281;
              int16x4_t v287 = v281;
              uint64_t v203 = 1;
            }
            else if (v202 == 31)
            {
              int16x4_t v204 = (int16x4_t)v201[1];
              int16x4_t v205 = (int16x4_t)v201[2];
              int16x4_t v206 = (int16x4_t)v201[3];
              int16x4_t v207 = vuzp2_s16((int16x4_t)*v201, v205);
              int16x4_t v281 = vuzp1_s16((int16x4_t)*v201, v205);
              int16x4_t v283 = v207;
              int16x4_t v285 = vuzp1_s16(v204, v206);
              int16x4_t v287 = vuzp2_s16(v204, v206);
              uint64_t v203 = 32;
            }
            else if (v81[6])
            {
              uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 16, (uint64_t)v201, v202);
            }
            else
            {
              uint64_t v203 = 0;
              int16x4_t v281 = 0;
              int16x4_t v283 = 0;
              int16x4_t v285 = 0;
              int16x4_t v287 = 0;
            }
            int16x4_t v208 = (int8x8_t *)((char *)v201 + v203);
            unsigned int v209 = v81[7];
            if (v209 == 96)
            {
              int16x4_t v289 = (int16x4_t)vdup_lane_s8(*v208, 0);
              int16x4_t v291 = v289;
              int16x4_t v293 = v289;
              int16x4_t v295 = v289;
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            else if (v209 == 31)
            {
              int16x4_t v211 = (int16x4_t)v208[1];
              int16x4_t v212 = (int16x4_t)v208[2];
              int16x4_t v213 = (int16x4_t)v208[3];
              int16x4_t v214 = vuzp2_s16((int16x4_t)*v208, v212);
              int16x4_t v289 = vuzp1_s16((int16x4_t)*v208, v212);
              int16x4_t v291 = v214;
              int16x4_t v293 = vuzp1_s16(v211, v213);
              int16x4_t v295 = vuzp2_s16(v211, v213);
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            else if (v81[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 16, (uint64_t)v208, v209);
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            else
            {
              int16x4_t v289 = 0;
              int16x4_t v291 = 0;
              int16x4_t v293 = 0;
              int16x4_t v295 = 0;
              unint64_t v210 = v259;
              if (!v259) {
                goto LABEL_27;
              }
            }
            if (v260)
            {
              unint64_t v215 = 0;
              BOOL v216 = (char *)&v264 + 16 * v257 + v258;
              int v217 = 1;
              do
              {
                if (v217)
                {
                  uint64_t v218 = 0;
                  uint64_t v219 = v255 + v256 * v215;
                  do
                  {
                    *(unsigned char *)(v219 + v218) = v216[v218];
                    int v217 = v260;
                    ++v218;
                  }
                  while (v260 > v218);
                  unint64_t v210 = v259;
                }
                ++v215;
                v216 += 16;
              }
              while (v215 < v210);
            }
          }
          else
          {
            unsigned int v84 = *v81;
            if (v84 == 96)
            {
              int8x8_t v94 = vdup_lane_s8(*(int8x8_t *)v71, 0);
              *long long v82 = v94;
              *(int8x8_t *)((char *)v82 + a11) = v94;
              uint64_t v85 = 2 * a11;
              *(int8x8_t *)((char *)v82 + 2 * a11) = v94;
              *(int8x8_t *)((char *)v82 + 3 * a11) = v94;
              uint64_t v86 = 1;
            }
            else
            {
              uint64_t v85 = 2 * a11;
              if (v84 == 31)
              {
                int16x4_t v89 = *(int16x4_t *)v71;
                int16x4_t v90 = *(int16x4_t *)((char *)v71 + 8);
                int16x4_t v91 = (int16x4_t)v71[1];
                int16x4_t v92 = *(int16x4_t *)((char *)v71 + 24);
                *long long v82 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v71, v91);
                *(int16x4_t *)((char *)v82 + a11) = vuzp2_s16(v89, v91);
                int16x4_t v93 = (int16x4_t *)((char *)v82 + 2 * a11);
                *int16x4_t v93 = vuzp1_s16(v90, v92);
                *(int16x4_t *)((char *)v93 + a11) = vuzp2_s16(v90, v92);
                uint64_t v86 = 32;
              }
              else if (*v81)
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, a11, (uint64_t)v71, v84);
                uint64_t v85 = 2 * a11;
              }
              else
              {
                uint64_t v86 = 0;
                *long long v82 = 0;
                *(int8x8_t *)((char *)v82 + a11) = 0;
                *(int8x8_t *)((char *)v82 + 2 * a11) = 0;
                *(int8x8_t *)((char *)v82 + 3 * a11) = 0;
              }
            }
            int16x4_t v95 = (int8x8_t *)((char *)v71 + v86);
            unint64_t v96 = (int8x8_t *)((char *)v82 + v236);
            unsigned int v97 = v81[1];
            if (v97 == 96)
            {
              int8x8_t v104 = vdup_lane_s8(*v95, 0);
              *unint64_t v96 = v104;
              *(int8x8_t *)((char *)v96 + a11) = v104;
              *(int8x8_t *)((char *)v96 + v85) = v104;
              *(int8x8_t *)((char *)v96 + 3 * a11) = v104;
              uint64_t v98 = 1;
            }
            else if (v97 == 31)
            {
              int16x4_t v99 = (int16x4_t)*v95;
              int16x4_t v100 = (int16x4_t)v95[1];
              int16x4_t v101 = (int16x4_t)v95[2];
              int16x4_t v102 = (int16x4_t)v95[3];
              *unint64_t v96 = (int8x8_t)vuzp1_s16((int16x4_t)*v95, v101);
              *(int16x4_t *)((char *)v96 + a11) = vuzp2_s16(v99, v101);
              int16x4_t v103 = (int16x4_t *)((char *)v96 + v85);
              *int16x4_t v103 = vuzp1_s16(v100, v102);
              *(int16x4_t *)((char *)v103 + a11) = vuzp2_s16(v100, v102);
              uint64_t v98 = 32;
            }
            else if (v81[1])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v82 + v236), a11, (uint64_t)v95, v97);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v98 = 0;
              *unint64_t v96 = 0;
              *(int8x8_t *)((char *)v96 + a11) = 0;
              *(int8x8_t *)((char *)v96 + v85) = 0;
              *(int8x8_t *)((char *)v96 + 3 * a11) = 0;
            }
            int16x4_t v105 = (int8x8_t *)((char *)v95 + v98);
            unsigned int v106 = v82 + 1;
            unsigned int v107 = v81[2];
            if (v107 == 96)
            {
              int8x8_t v114 = vdup_lane_s8(*v105, 0);
              *unsigned int v106 = v114;
              *(int8x8_t *)((char *)v106 + a11) = v114;
              *(int8x8_t *)((char *)v106 + v85) = v114;
              *(int8x8_t *)((char *)v106 + 3 * a11) = v114;
              uint64_t v108 = 1;
            }
            else if (v107 == 31)
            {
              int16x4_t v109 = (int16x4_t)*v105;
              int16x4_t v110 = (int16x4_t)v105[1];
              int16x4_t v111 = (int16x4_t)v105[2];
              int16x4_t v112 = (int16x4_t)v105[3];
              *unsigned int v106 = (int8x8_t)vuzp1_s16((int16x4_t)*v105, v111);
              *(int16x4_t *)((char *)v106 + a11) = vuzp2_s16(v109, v111);
              int16x4_t v113 = (int16x4_t *)((char *)v106 + v85);
              int16x4_t *v113 = vuzp1_s16(v110, v112);
              *(int16x4_t *)((char *)v113 + a11) = vuzp2_s16(v110, v112);
              uint64_t v108 = 32;
            }
            else if (v81[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, a11, (uint64_t)v105, v107);
              uint64_t v85 = 2 * a11;
              uint64_t v108 = v115;
            }
            else
            {
              uint64_t v108 = 0;
              *unsigned int v106 = 0;
              *(int8x8_t *)((char *)v106 + a11) = 0;
              *(int8x8_t *)((char *)v106 + v85) = 0;
              *(int8x8_t *)((char *)v106 + 3 * a11) = 0;
            }
            unsigned int v116 = (int8x8_t *)((char *)v105 + v108);
            int8x8_t v117 = v96 + 1;
            unsigned int v118 = v81[3];
            if (v118 == 96)
            {
              int8x8_t v125 = vdup_lane_s8(*v116, 0);
              *int8x8_t v117 = v125;
              *(int8x8_t *)((char *)v117 + a11) = v125;
              *(int8x8_t *)((char *)v117 + v85) = v125;
              *(int8x8_t *)((char *)v117 + 3 * a11) = v125;
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              int16x4_t v120 = (int16x4_t)*v116;
              int16x4_t v121 = (int16x4_t)v116[1];
              int16x4_t v122 = (int16x4_t)v116[2];
              int16x4_t v123 = (int16x4_t)v116[3];
              *int8x8_t v117 = (int8x8_t)vuzp1_s16((int16x4_t)*v116, v122);
              *(int16x4_t *)((char *)v117 + a11) = vuzp2_s16(v120, v122);
              int16x4_t v124 = (int16x4_t *)((char *)v117 + v85);
              int16x4_t *v124 = vuzp1_s16(v121, v123);
              *(int16x4_t *)((char *)v124 + a11) = vuzp2_s16(v121, v123);
              uint64_t v119 = 32;
            }
            else if (v81[3])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, a11, (uint64_t)v116, v118);
              uint64_t v85 = 2 * a11;
              uint64_t v119 = v126;
            }
            else
            {
              uint64_t v119 = 0;
              *int8x8_t v117 = 0;
              *(int8x8_t *)((char *)v117 + a11) = 0;
              *(int8x8_t *)((char *)v117 + v85) = 0;
              *(int8x8_t *)((char *)v117 + 3 * a11) = 0;
            }
            BOOL v127 = (int8x8_t *)((char *)v116 + v119);
            int8x8_t v128 = &v82[v235];
            unsigned int v129 = v81[4];
            if (v129 == 96)
            {
              int8x8_t v136 = vdup_lane_s8(*v127, 0);
              *int8x8_t v128 = v136;
              *(int8x8_t *)((char *)v128 + a11) = v136;
              *(int8x8_t *)((char *)v128 + v85) = v136;
              *(int8x8_t *)((char *)v128 + 3 * a11) = v136;
              uint64_t v130 = 1;
            }
            else if (v129 == 31)
            {
              int16x4_t v131 = (int16x4_t)*v127;
              int16x4_t v132 = (int16x4_t)v127[1];
              int16x4_t v133 = (int16x4_t)v127[2];
              int16x4_t v134 = (int16x4_t)v127[3];
              *int8x8_t v128 = (int8x8_t)vuzp1_s16((int16x4_t)*v127, v133);
              *(int16x4_t *)((char *)v128 + a11) = vuzp2_s16(v131, v133);
              int16x4_t v135 = (int16x4_t *)((char *)v128 + v85);
              int16x4_t *v135 = vuzp1_s16(v132, v134);
              *(int16x4_t *)((char *)v135 + a11) = vuzp2_s16(v132, v134);
              uint64_t v130 = 32;
            }
            else if (v81[4])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v82[v235], a11, (uint64_t)v127, v129);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v130 = 0;
              *int8x8_t v128 = 0;
              *(int8x8_t *)((char *)v128 + a11) = 0;
              *(int8x8_t *)((char *)v128 + v85) = 0;
              *(int8x8_t *)((char *)v128 + 3 * a11) = 0;
            }
            int16x4_t v137 = (int8x8_t *)((char *)v127 + v130);
            unsigned int v138 = (int8x8_t *)((char *)v82 + 12 * a11);
            unsigned int v139 = v81[5];
            if (v139 == 96)
            {
              int8x8_t v146 = vdup_lane_s8(*v137, 0);
              *unsigned int v138 = v146;
              *(int8x8_t *)((char *)v138 + a11) = v146;
              *(int8x8_t *)((char *)v138 + v85) = v146;
              *(int8x8_t *)((char *)v138 + 3 * a11) = v146;
              uint64_t v140 = 1;
            }
            else if (v139 == 31)
            {
              int16x4_t v141 = (int16x4_t)*v137;
              int16x4_t v142 = (int16x4_t)v137[1];
              int16x4_t v143 = (int16x4_t)v137[2];
              int16x4_t v144 = (int16x4_t)v137[3];
              *unsigned int v138 = (int8x8_t)vuzp1_s16((int16x4_t)*v137, v143);
              *(int16x4_t *)((char *)v138 + a11) = vuzp2_s16(v141, v143);
              int16x4_t v145 = (int16x4_t *)((char *)v138 + v85);
              int16x4_t *v145 = vuzp1_s16(v142, v144);
              *(int16x4_t *)((char *)v145 + a11) = vuzp2_s16(v142, v144);
              uint64_t v140 = 32;
            }
            else if (v81[5])
            {
              uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v138, a11, (uint64_t)v137, v139);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v140 = 0;
              *unsigned int v138 = 0;
              *(int8x8_t *)((char *)v138 + a11) = 0;
              *(int8x8_t *)((char *)v138 + v85) = 0;
              *(int8x8_t *)((char *)v138 + 3 * a11) = 0;
            }
            int16x4_t v147 = (int8x8_t *)((char *)v137 + v140);
            unsigned int v148 = v128 + 1;
            unsigned int v149 = v81[6];
            if (v149 == 96)
            {
              int8x8_t v156 = vdup_lane_s8(*v147, 0);
              int8x8_t *v148 = v156;
              *(int8x8_t *)((char *)v148 + a11) = v156;
              *(int8x8_t *)((char *)v148 + v85) = v156;
              *(int8x8_t *)((char *)v148 + 3 * a11) = v156;
              uint64_t v150 = 1;
            }
            else if (v149 == 31)
            {
              int16x4_t v151 = (int16x4_t)*v147;
              int16x4_t v152 = (int16x4_t)v147[1];
              int16x4_t v153 = (int16x4_t)v147[2];
              int16x4_t v154 = (int16x4_t)v147[3];
              int8x8_t *v148 = (int8x8_t)vuzp1_s16((int16x4_t)*v147, v153);
              *(int16x4_t *)((char *)v148 + a11) = vuzp2_s16(v151, v153);
              int16x4_t v155 = (int16x4_t *)((char *)v148 + v85);
              int16x4_t *v155 = vuzp1_s16(v152, v154);
              *(int16x4_t *)((char *)v155 + a11) = vuzp2_s16(v152, v154);
              uint64_t v150 = 32;
            }
            else if (v81[6])
            {
              uint64_t v157 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v148, a11, (uint64_t)v147, v149);
              uint64_t v85 = 2 * a11;
              uint64_t v150 = v157;
            }
            else
            {
              uint64_t v150 = 0;
              int8x8_t *v148 = 0;
              *(int8x8_t *)((char *)v148 + a11) = 0;
              *(int8x8_t *)((char *)v148 + v85) = 0;
              *(int8x8_t *)((char *)v148 + 3 * a11) = 0;
            }
            uint64_t v158 = (int8x8_t *)((char *)v147 + v150);
            int8x8_t v159 = v138 + 1;
            unsigned int v160 = v81[7];
            if (v160 == 96)
            {
              int8x8_t v161 = vdup_lane_s8(*v158, 0);
              *int8x8_t v159 = v161;
              *(int8x8_t *)((char *)v159 + a11) = v161;
              *(int8x8_t *)((char *)v159 + v85) = v161;
              *(int8x8_t *)((char *)v159 + 3 * a11) = v161;
              unsigned int v27 = v237;
            }
            else
            {
              unsigned int v27 = v237;
              if (v160 == 31)
              {
                int16x4_t v34 = (int16x4_t)*v158;
                int16x4_t v35 = (int16x4_t)v158[1];
                int16x4_t v36 = (int16x4_t)v158[2];
                int16x4_t v37 = (int16x4_t)v158[3];
                *int8x8_t v159 = (int8x8_t)vuzp1_s16((int16x4_t)*v158, v36);
                *(int16x4_t *)((char *)v159 + a11) = vuzp2_s16(v34, v36);
                int v38 = (int16x4_t *)((char *)v159 + v85);
                *int v38 = vuzp1_s16(v35, v37);
                *(int16x4_t *)((char *)v38 + a11) = vuzp2_s16(v35, v37);
              }
              else if (v81[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v159, a11, (uint64_t)v158, v160);
              }
              else
              {
                *int8x8_t v159 = 0;
                *(int8x8_t *)((char *)v159 + a11) = 0;
                *(int8x8_t *)((char *)v159 + v85) = 0;
                *(int8x8_t *)((char *)v159 + 3 * a11) = 0;
              }
            }
          }
LABEL_27:
          BOOL v22 = v32++ == v243 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v234;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          long long v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            long long v75 = (int64x2_t *)__dst;
          }
          long long v77 = (unsigned __int8 *)(a4 + 8 * v69);
          long long v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              int16x4_t v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              int16x4_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              int16x4_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              int16x4_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              int16x4_t v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              int8x8_t v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                uint64_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            long long v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            long long v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            long long v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            char v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            unsigned int v84 = (int64x2_t *)((char *)v78 + v113);
            uint64_t v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            uint64_t v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            unsigned int v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          long long v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            long long v75 = (int64x2_t *)__dst;
          }
          long long v77 = (unsigned __int8 *)(a4 + 8 * v69);
          long long v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              int16x4_t v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              int16x4_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              int16x4_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              int16x4_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              int16x4_t v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              int8x8_t v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                uint64_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            long long v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            long long v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            long long v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            char v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            unsigned int v84 = (int64x2_t *)((char *)v78 + v113);
            uint64_t v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            uint64_t v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            unsigned int v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            long long v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            long long v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            long long v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          long long v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          long long v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          char v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          unsigned int v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          uint64_t v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          uint64_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            int16x4_t v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                int16x4_t v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            long long v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            long long v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            long long v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          long long v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          long long v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          char v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          unsigned int v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          uint64_t v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          uint64_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            int16x4_t v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                int16x4_t v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v458 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v379 = a8;
  unsigned int v359 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v358 = v359 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v373 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v372 = 0;
LABEL_32:
      unsigned int v370 = v25 - 4;
      unsigned int v363 = v24 - 4;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v356 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v372 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v372 = 0;
  unsigned int v356 = 0;
  unsigned int v363 = 0;
  unsigned int v370 = 0;
LABEL_33:
  if (v19 <= v358)
  {
    unsigned int v371 = a7 + a9 - 1;
    if (a7 >> 4 <= v371 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v382 = v17 >> 4;
      unsigned int v355 = v18 >> 4;
      int v381 = (v17 & 0xF) + 1;
      int v354 = (v18 & 0xF) + 1;
      int v353 = ~(-1 << v363);
      uint64_t v367 = 8 * a11;
      uint64_t v368 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v366 = v34.i32[0] | v34.i32[1];
      BOOL v361 = v34.i32[1] != 0;
      int8x8_t v362 = v34;
      BOOL v360 = v34.i32[0] != 0;
      uint64_t v380 = v15;
      uint64_t v364 = 3 * a11;
      uint64_t v365 = 2 * a11;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v379) {
          int v36 = v379;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v359 < v35) {
          unsigned int v35 = v359;
        }
        int v369 = v36 - 16 * v19;
        int v377 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v354;
        if (v19 != v355) {
          int v38 = 16;
        }
        unsigned int v383 = v38;
        int v39 = v19 & v353;
        uint64_t v376 = a2 + (v36 - v379) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v371 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v382) {
            unsigned int v46 = v381;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (16 * v19 >= v379 && v42 >= v40)
          {
            int v48 = v381;
            if (v37 != v382) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v377 != v383;
          }
          if (v372)
          {
            if (v370 | v363)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v370 != 0;
              BOOL v54 = v363 != 0;
              unsigned int v55 = v370;
              unsigned int v56 = v363;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v370) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v370) + (v19 >> v363) * v356) + (v51 << 10);
          }
          else
          {
            if (v366)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v361;
              BOOL v61 = v360;
              __int32 v62 = v362.i32[1];
              __int32 v63 = v362.i32[0];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 15;
          if (v69 < 0x20)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 4) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          long long v78 = (int64x2_t *)(a3 + v64);
          if (v373)
          {
            memcpy(__dst, v78, sizeof(__dst));
            long long v78 = (int64x2_t *)__dst;
          }
          char v79 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v80 = v376 + 4 * (v44 - v40);
          char v81 = v46 < 0x10 || v47;
          if ((v81 & 1) == 0 && v383 > 0xF)
          {
            unsigned int v82 = *v79;
            if (v82 == 127)
            {
              int64x2_t v94 = *v78;
              int64x2_t v95 = v78[1];
              int64x2_t v96 = v78[2];
              int64x2_t v97 = v78[3];
              int64x2_t v98 = v78[4];
              int64x2_t v99 = v78[5];
              int64x2_t v100 = v78[6];
              int64x2_t v101 = v78[7];
              uint64_t v83 = 2 * a11;
              *(int64x2_t *)uint64_t v80 = vzip1q_s64(*v78, v95);
              *(int64x2_t *)(v80 + 16) = vzip1q_s64(v98, v99);
              int v102 = (int64x2_t *)(v80 + v365);
              uint64_t v32 = a11;
              unint64_t v103 = (int64x2_t *)(v80 + a11);
              *unint64_t v103 = vzip2q_s64(v94, v95);
              v103[1] = vzip2q_s64(v98, v99);
              int64x2_t *v102 = vzip1q_s64(v96, v97);
              v102[1] = vzip1q_s64(v100, v101);
              unsigned int v104 = (int64x2_t *)(v80 + v365 + a11);
              *unsigned int v104 = vzip2q_s64(v96, v97);
              v104[1] = vzip2q_s64(v100, v101);
              uint64_t v84 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v83 = 2 * a11;
              if (v82 == 3)
              {
                float32x4_t v90 = vld1q_dup_f32((const float *)v78->i32);
                *(float32x4_t *)uint64_t v80 = v90;
                *(float32x4_t *)(v80 + 16) = v90;
                unsigned int v91 = (float32x4_t *)(v80 + a11);
                *unsigned int v91 = v90;
                v91[1] = v90;
                uint64_t v92 = (float32x4_t *)(v80 + v365);
                *uint64_t v92 = v90;
                v92[1] = v90;
                int16x4_t v93 = (float32x4_t *)(v80 + v364);
                *int16x4_t v93 = v90;
                v93[1] = v90;
                uint64_t v84 = 4;
              }
              else if (*v79)
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v80, a11, (uint64_t)v78, v82);
              }
              else
              {
                uint64_t v84 = 0;
                *(_OWORD *)uint64_t v80 = 0u;
                *(_OWORD *)(v80 + 16) = 0u;
                uint64_t v85 = (_OWORD *)(v80 + a11);
                _OWORD *v85 = 0u;
                v85[1] = 0u;
                uint64_t v86 = (_OWORD *)(v80 + v365);
                _OWORD *v86 = 0u;
                v86[1] = 0u;
                uint64_t v87 = (_OWORD *)(v80 + v364);
                *uint64_t v87 = 0u;
                v87[1] = 0u;
              }
            }
            uint64_t v105 = (uint64_t)v78->i64 + v84;
            uint64_t v106 = v80 + v368;
            unsigned int v107 = v79[1];
            if (v107 == 127)
            {
              int64x2_t v116 = *(int64x2_t *)v105;
              int64x2_t v117 = *(int64x2_t *)(v105 + 16);
              int64x2_t v118 = *(int64x2_t *)(v105 + 32);
              int64x2_t v119 = *(int64x2_t *)(v105 + 48);
              int64x2_t v120 = *(int64x2_t *)(v105 + 64);
              int64x2_t v121 = *(int64x2_t *)(v105 + 80);
              int64x2_t v122 = *(int64x2_t *)(v105 + 96);
              int64x2_t v123 = *(int64x2_t *)(v105 + 112);
              *(int64x2_t *)uint64_t v106 = vzip1q_s64(*(int64x2_t *)v105, v117);
              *(int64x2_t *)(v106 + 16) = vzip1q_s64(v120, v121);
              int v124 = (int64x2_t *)(v106 + v83);
              unsigned int v125 = (int64x2_t *)(v106 + v32);
              *unsigned int v125 = vzip2q_s64(v116, v117);
              v125[1] = vzip2q_s64(v120, v121);
              int64x2_t *v124 = vzip1q_s64(v118, v119);
              v124[1] = vzip1q_s64(v122, v123);
              unsigned int v126 = (int64x2_t *)(v106 + v83 + v32);
              int64x2_t *v126 = vzip2q_s64(v118, v119);
              v126[1] = vzip2q_s64(v122, v123);
              uint64_t v108 = 128;
            }
            else if (v107 == 3)
            {
              float32x4_t v112 = vld1q_dup_f32((const float *)v105);
              *(float32x4_t *)uint64_t v106 = v112;
              *(float32x4_t *)(v106 + 16) = v112;
              int v113 = (float32x4_t *)(v106 + v32);
              float32x4_t *v113 = v112;
              v113[1] = v112;
              BOOL v114 = (float32x4_t *)(v106 + v83);
              *BOOL v114 = v112;
              v114[1] = v112;
              BOOL v115 = (float32x4_t *)(v106 + v364);
              *BOOL v115 = v112;
              v115[1] = v112;
              uint64_t v108 = 4;
            }
            else if (v79[1])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v80 + v368), v32, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              *(_OWORD *)uint64_t v106 = 0u;
              *(_OWORD *)(v106 + 16) = 0u;
              BOOL v109 = (_OWORD *)(v106 + v32);
              _OWORD *v109 = 0u;
              v109[1] = 0u;
              unsigned int v110 = (_OWORD *)(v106 + v83);
              *unsigned int v110 = 0u;
              v110[1] = 0u;
              uint64_t v111 = (_OWORD *)(v106 + v364);
              _OWORD *v111 = 0u;
              v111[1] = 0u;
            }
            uint64_t v127 = v105 + v108;
            unsigned int v128 = (_OWORD *)(v80 + 32);
            unsigned int v129 = v79[2];
            if (v129 == 127)
            {
              int64x2_t v138 = *(int64x2_t *)v127;
              int64x2_t v139 = *(int64x2_t *)(v127 + 16);
              int64x2_t v140 = *(int64x2_t *)(v127 + 32);
              int64x2_t v141 = *(int64x2_t *)(v127 + 48);
              int64x2_t v142 = *(int64x2_t *)(v127 + 64);
              int64x2_t v143 = *(int64x2_t *)(v127 + 80);
              int64x2_t v144 = *(int64x2_t *)(v127 + 96);
              int64x2_t v145 = *(int64x2_t *)(v127 + 112);
              *unsigned int v128 = vzip1q_s64(*(int64x2_t *)v127, v139);
              *(int64x2_t *)(v80 + 48) = vzip1q_s64(v142, v143);
              int8x8_t v146 = (int64x2_t *)((char *)v128 + v83);
              int16x4_t v147 = (int64x2_t *)((char *)v128 + v32);
              *int16x4_t v147 = vzip2q_s64(v138, v139);
              v147[1] = vzip2q_s64(v142, v143);
              int64x2_t *v146 = vzip1q_s64(v140, v141);
              v146[1] = vzip1q_s64(v144, v145);
              uint64_t v148 = (int64x2_t *)((char *)v128 + v83 + v32);
              int64x2_t *v148 = vzip2q_s64(v140, v141);
              v148[1] = vzip2q_s64(v144, v145);
              uint64_t v130 = 128;
            }
            else if (v129 == 3)
            {
              float32x4_t v134 = vld1q_dup_f32((const float *)v127);
              *(float32x4_t *)(v80 + 32) = v134;
              *(float32x4_t *)(v80 + 48) = v134;
              unsigned int v135 = (float32x4_t *)((char *)v128 + v32);
              float32x4_t *v135 = v134;
              v135[1] = v134;
              unsigned int v136 = (float32x4_t *)((char *)v128 + v83);
              *unsigned int v136 = v134;
              v136[1] = v134;
              char v137 = (float32x4_t *)((char *)v128 + v364);
              *char v137 = v134;
              v137[1] = v134;
              uint64_t v130 = 4;
            }
            else if (v79[2])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v32, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              *unsigned int v128 = 0u;
              *(_OWORD *)(v80 + 48) = 0u;
              uint64_t v131 = (_OWORD *)((char *)v128 + v32);
              _OWORD *v131 = 0u;
              v131[1] = 0u;
              uint64_t v132 = (_OWORD *)((char *)v128 + v83);
              *uint64_t v132 = 0u;
              v132[1] = 0u;
              unsigned int v133 = (_OWORD *)((char *)v128 + v364);
              _OWORD *v133 = 0u;
              v133[1] = 0u;
            }
            uint64_t v149 = v127 + v130;
            uint64_t v150 = (_OWORD *)(v106 + 32);
            unsigned int v151 = v79[3];
            if (v151 == 127)
            {
              int64x2_t v160 = *(int64x2_t *)v149;
              int64x2_t v161 = *(int64x2_t *)(v149 + 16);
              int64x2_t v162 = *(int64x2_t *)(v149 + 32);
              int64x2_t v163 = *(int64x2_t *)(v149 + 48);
              int64x2_t v164 = *(int64x2_t *)(v149 + 64);
              int64x2_t v165 = *(int64x2_t *)(v149 + 80);
              int64x2_t v166 = *(int64x2_t *)(v149 + 96);
              int64x2_t v167 = *(int64x2_t *)(v149 + 112);
              *uint64_t v150 = vzip1q_s64(*(int64x2_t *)v149, v161);
              *(int64x2_t *)(v106 + 48) = vzip1q_s64(v164, v165);
              uint64_t v168 = (int64x2_t *)((char *)v150 + v83);
              int16x4_t v169 = (int64x2_t *)((char *)v150 + v32);
              *int16x4_t v169 = vzip2q_s64(v160, v161);
              v169[1] = vzip2q_s64(v164, v165);
              int64x2_t *v168 = vzip1q_s64(v162, v163);
              v168[1] = vzip1q_s64(v166, v167);
              int16x4_t v170 = (int64x2_t *)((char *)v150 + v83 + v32);
              *int16x4_t v170 = vzip2q_s64(v162, v163);
              v170[1] = vzip2q_s64(v166, v167);
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              *(float32x4_t *)(v106 + 32) = v156;
              *(float32x4_t *)(v106 + 48) = v156;
              uint64_t v157 = (float32x4_t *)((char *)v150 + v32);
              float32x4_t *v157 = v156;
              v157[1] = v156;
              uint64_t v158 = (float32x4_t *)((char *)v150 + v83);
              *uint64_t v158 = v156;
              v158[1] = v156;
              int8x8_t v159 = (float32x4_t *)((char *)v150 + v364);
              *int8x8_t v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v79[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              *uint64_t v150 = 0u;
              *(_OWORD *)(v106 + 48) = 0u;
              int16x4_t v153 = (_OWORD *)((char *)v150 + v32);
              _OWORD *v153 = 0u;
              v153[1] = 0u;
              int16x4_t v154 = (_OWORD *)((char *)v150 + v83);
              *int16x4_t v154 = 0u;
              v154[1] = 0u;
              int16x4_t v155 = (_OWORD *)((char *)v150 + v364);
              _OWORD *v155 = 0u;
              v155[1] = 0u;
            }
            uint64_t v171 = v149 + v152;
            uint64_t v172 = v80 + v367;
            unsigned int v173 = v79[4];
            if (v173 == 127)
            {
              int64x2_t v182 = *(int64x2_t *)v171;
              int64x2_t v183 = *(int64x2_t *)(v171 + 16);
              int64x2_t v184 = *(int64x2_t *)(v171 + 32);
              int64x2_t v185 = *(int64x2_t *)(v171 + 48);
              int64x2_t v186 = *(int64x2_t *)(v171 + 64);
              int64x2_t v187 = *(int64x2_t *)(v171 + 80);
              int64x2_t v188 = *(int64x2_t *)(v171 + 96);
              int64x2_t v189 = *(int64x2_t *)(v171 + 112);
              *(int64x2_t *)uint64_t v172 = vzip1q_s64(*(int64x2_t *)v171, v183);
              *(int64x2_t *)(v172 + 16) = vzip1q_s64(v186, v187);
              int16x4_t v190 = (int64x2_t *)(v172 + v83);
              int16x4_t v191 = (int64x2_t *)(v172 + v32);
              *int16x4_t v191 = vzip2q_s64(v182, v183);
              v191[1] = vzip2q_s64(v186, v187);
              int64x2_t *v190 = vzip1q_s64(v184, v185);
              v190[1] = vzip1q_s64(v188, v189);
              int16x4_t v192 = (int64x2_t *)(v172 + v83 + v32);
              *int16x4_t v192 = vzip2q_s64(v184, v185);
              v192[1] = vzip2q_s64(v188, v189);
              uint64_t v174 = 128;
            }
            else if (v173 == 3)
            {
              float32x4_t v178 = vld1q_dup_f32((const float *)v171);
              *(float32x4_t *)uint64_t v172 = v178;
              *(float32x4_t *)(v172 + 16) = v178;
              int16x4_t v179 = (float32x4_t *)(v172 + v32);
              float32x4_t *v179 = v178;
              v179[1] = v178;
              int16x4_t v180 = (float32x4_t *)(v172 + v83);
              *int16x4_t v180 = v178;
              v180[1] = v178;
              unsigned int v181 = (float32x4_t *)(v172 + v364);
              *unsigned int v181 = v178;
              v181[1] = v178;
              uint64_t v174 = 4;
            }
            else if (v79[4])
            {
              uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v80 + v367), v32, v171, v173);
            }
            else
            {
              uint64_t v174 = 0;
              *(_OWORD *)uint64_t v172 = 0u;
              *(_OWORD *)(v172 + 16) = 0u;
              uint64_t v175 = (_OWORD *)(v172 + v32);
              _OWORD *v175 = 0u;
              v175[1] = 0u;
              int16x4_t v176 = (_OWORD *)(v172 + v83);
              *int16x4_t v176 = 0u;
              v176[1] = 0u;
              int16x4_t v177 = (_OWORD *)(v172 + v364);
              _OWORD *v177 = 0u;
              v177[1] = 0u;
            }
            uint64_t v193 = v171 + v174;
            uint64_t v194 = v80 + 12 * a11;
            unsigned int v195 = v79[5];
            if (v195 == 127)
            {
              int64x2_t v204 = *(int64x2_t *)v193;
              int64x2_t v205 = *(int64x2_t *)(v193 + 16);
              int64x2_t v206 = *(int64x2_t *)(v193 + 32);
              int64x2_t v207 = *(int64x2_t *)(v193 + 48);
              int64x2_t v208 = *(int64x2_t *)(v193 + 64);
              int64x2_t v209 = *(int64x2_t *)(v193 + 80);
              int64x2_t v210 = *(int64x2_t *)(v193 + 96);
              int64x2_t v211 = *(int64x2_t *)(v193 + 112);
              *(int64x2_t *)uint64_t v194 = vzip1q_s64(*(int64x2_t *)v193, v205);
              *(int64x2_t *)(v194 + 16) = vzip1q_s64(v208, v209);
              int16x4_t v212 = (int64x2_t *)(v194 + v83);
              int16x4_t v213 = (int64x2_t *)(v194 + v32);
              *int16x4_t v213 = vzip2q_s64(v204, v205);
              v213[1] = vzip2q_s64(v208, v209);
              int64x2_t *v212 = vzip1q_s64(v206, v207);
              v212[1] = vzip1q_s64(v210, v211);
              int16x4_t v214 = (int64x2_t *)(v194 + v83 + v32);
              int64x2_t *v214 = vzip2q_s64(v206, v207);
              v214[1] = vzip2q_s64(v210, v211);
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              *(float32x4_t *)uint64_t v194 = v200;
              *(float32x4_t *)(v194 + 16) = v200;
              int16x4_t v201 = (float32x4_t *)(v194 + v32);
              float32x4_t *v201 = v200;
              v201[1] = v200;
              unsigned int v202 = (float32x4_t *)(v194 + v83);
              *unsigned int v202 = v200;
              v202[1] = v200;
              uint64_t v203 = (float32x4_t *)(v194 + v364);
              *uint64_t v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v79[5])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v194, v32, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *(_OWORD *)uint64_t v194 = 0u;
              *(_OWORD *)(v194 + 16) = 0u;
              int16x4_t v197 = (_OWORD *)(v194 + v32);
              _OWORD *v197 = 0u;
              v197[1] = 0u;
              int16x4_t v198 = (_OWORD *)(v194 + v83);
              *int16x4_t v198 = 0u;
              v198[1] = 0u;
              int16x4_t v199 = (_OWORD *)(v194 + v364);
              _OWORD *v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v215 = v193 + v196;
            BOOL v216 = (_OWORD *)(v172 + 32);
            unsigned int v217 = v79[6];
            if (v217 == 127)
            {
              int64x2_t v226 = *(int64x2_t *)v215;
              int64x2_t v227 = *(int64x2_t *)(v215 + 16);
              int64x2_t v228 = *(int64x2_t *)(v215 + 32);
              int64x2_t v229 = *(int64x2_t *)(v215 + 48);
              int64x2_t v230 = *(int64x2_t *)(v215 + 64);
              int64x2_t v231 = *(int64x2_t *)(v215 + 80);
              int64x2_t v232 = *(int64x2_t *)(v215 + 96);
              int64x2_t v233 = *(int64x2_t *)(v215 + 112);
              *BOOL v216 = vzip1q_s64(*(int64x2_t *)v215, v227);
              *(int64x2_t *)(v172 + 48) = vzip1q_s64(v230, v231);
              unsigned int v234 = (int64x2_t *)((char *)v216 + v83);
              uint64_t v235 = (int64x2_t *)((char *)v216 + v32);
              int64x2_t *v235 = vzip2q_s64(v226, v227);
              v235[1] = vzip2q_s64(v230, v231);
              int64x2_t *v234 = vzip1q_s64(v228, v229);
              v234[1] = vzip1q_s64(v232, v233);
              uint64_t v236 = (int64x2_t *)((char *)v216 + v83 + v32);
              *uint64_t v236 = vzip2q_s64(v228, v229);
              v236[1] = vzip2q_s64(v232, v233);
              uint64_t v218 = 128;
            }
            else if (v217 == 3)
            {
              float32x4_t v222 = vld1q_dup_f32((const float *)v215);
              *(float32x4_t *)(v172 + 32) = v222;
              *(float32x4_t *)(v172 + 48) = v222;
              int v223 = (float32x4_t *)((char *)v216 + v32);
              float32x4_t *v223 = v222;
              v223[1] = v222;
              uint64_t v224 = (float32x4_t *)((char *)v216 + v83);
              *uint64_t v224 = v222;
              v224[1] = v222;
              BOOL v225 = (float32x4_t *)((char *)v216 + v364);
              *BOOL v225 = v222;
              v225[1] = v222;
              uint64_t v218 = 4;
            }
            else if (v79[6])
            {
              uint64_t v218 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v216, v32, v215, v217);
            }
            else
            {
              uint64_t v218 = 0;
              *BOOL v216 = 0u;
              *(_OWORD *)(v172 + 48) = 0u;
              uint64_t v219 = (_OWORD *)((char *)v216 + v32);
              _OWORD *v219 = 0u;
              v219[1] = 0u;
              unsigned int v220 = (_OWORD *)((char *)v216 + v83);
              *unsigned int v220 = 0u;
              v220[1] = 0u;
              unsigned int v221 = (_OWORD *)((char *)v216 + v364);
              _OWORD *v221 = 0u;
              v221[1] = 0u;
            }
            uint64_t v237 = v215 + v218;
            int v238 = (_OWORD *)(v194 + 32);
            unsigned int v239 = v79[7];
            if (v239 == 127)
            {
              int64x2_t v244 = *(int64x2_t *)v237;
              int64x2_t v245 = *(int64x2_t *)(v237 + 16);
              int64x2_t v246 = *(int64x2_t *)(v237 + 32);
              int64x2_t v247 = *(int64x2_t *)(v237 + 48);
              int64x2_t v248 = *(int64x2_t *)(v237 + 64);
              int64x2_t v249 = *(int64x2_t *)(v237 + 80);
              int64x2_t v250 = *(int64x2_t *)(v237 + 96);
              int64x2_t v251 = *(int64x2_t *)(v237 + 112);
              *int v238 = vzip1q_s64(*(int64x2_t *)v237, v245);
              *(int64x2_t *)(v194 + 48) = vzip1q_s64(v248, v249);
              int v252 = (int64x2_t *)((char *)v238 + v83);
              unsigned int v253 = (int64x2_t *)((char *)v238 + v32);
              *unsigned int v253 = vzip2q_s64(v244, v245);
              v253[1] = vzip2q_s64(v248, v249);
              int64x2_t *v252 = vzip1q_s64(v246, v247);
              v252[1] = vzip1q_s64(v250, v251);
              unsigned int v254 = (int64x2_t *)((char *)v238 + v83 + v32);
              *unsigned int v254 = vzip2q_s64(v246, v247);
              v254[1] = vzip2q_s64(v250, v251);
              unsigned int v40 = a7;
              uint64_t v15 = v380;
            }
            else
            {
              uint64_t v15 = v380;
              if (v239 == 3)
              {
                float32x4_t v240 = vld1q_dup_f32((const float *)v237);
                *(float32x4_t *)(v194 + 32) = v240;
                *(float32x4_t *)(v194 + 48) = v240;
LABEL_182:
                int8x8_t v241 = (float32x4_t *)((char *)v238 + v32);
                float32x4_t *v241 = v240;
                v241[1] = v240;
                __int32 v242 = (float32x4_t *)((char *)v238 + v83);
                *__int32 v242 = v240;
                v242[1] = v240;
                unsigned int v243 = (float32x4_t *)((char *)v238 + v364);
                *unsigned int v243 = v240;
                v243[1] = v240;
              }
              else
              {
                if (!v239)
                {
                  float32x4_t v240 = 0uLL;
                  *int v238 = 0u;
                  *(_OWORD *)(v194 + 48) = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v238, v32, v237, v239);
              }
              unsigned int v40 = a7;
            }
LABEL_47:
            int v39 = v19 & v353;
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v380;
          block[5] = v78;
          char v391 = v46;
          char v392 = v383;
          unsigned int v387 = v369;
          unsigned int v388 = v44 - v42;
          block[6] = v79;
          uint64_t v385 = v80;
          uint64_t v32 = a11;
          uint64_t v386 = a11;
          unsigned int v389 = v377;
          unsigned int v390 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v380 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v380;
            goto LABEL_47;
          }
          unsigned int v88 = *v79;
          if (v88 == 127)
          {
            int64x2_t v255 = *v78;
            int64x2_t v256 = v78[1];
            int64x2_t v257 = v78[2];
            int64x2_t v258 = v78[3];
            int64x2_t v259 = v78[4];
            int64x2_t v260 = v78[5];
            int64x2_t v261 = v78[6];
            int64x2_t v262 = v78[7];
            int64x2_t v394 = vzip1q_s64(*v78, v256);
            int64x2_t v395 = vzip1q_s64(v259, v260);
            int64x2_t v398 = vzip2q_s64(v255, v256);
            int64x2_t v399 = vzip2q_s64(v259, v260);
            int64x2_t v402 = vzip1q_s64(v257, v258);
            int64x2_t v403 = vzip1q_s64(v261, v262);
            int64x2_t v406 = vzip2q_s64(v257, v258);
            int64x2_t v407 = vzip2q_s64(v261, v262);
            uint64_t v89 = 128;
          }
          else if (v88 == 3)
          {
            float32x4_t v263 = vld1q_dup_f32((const float *)v78->i32);
            int64x2_t v394 = (int64x2_t)v263;
            int64x2_t v395 = (int64x2_t)v263;
            int64x2_t v398 = (int64x2_t)v263;
            int64x2_t v399 = (int64x2_t)v263;
            int64x2_t v402 = (int64x2_t)v263;
            int64x2_t v403 = (int64x2_t)v263;
            int64x2_t v406 = (int64x2_t)v263;
            int64x2_t v407 = (int64x2_t)v263;
            uint64_t v89 = 4;
          }
          else if (*v79)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 64, (uint64_t)v78, v88);
          }
          else
          {
            uint64_t v89 = 0;
            int64x2_t v395 = 0u;
            int64x2_t v394 = 0u;
            int64x2_t v398 = 0u;
            int64x2_t v399 = 0u;
            int64x2_t v402 = 0u;
            int64x2_t v403 = 0u;
            int64x2_t v406 = 0u;
            int64x2_t v407 = 0u;
          }
          uint64_t v264 = (uint64_t)v78->i64 + v89;
          unsigned int v265 = v79[1];
          if (v265 == 127)
          {
            int64x2_t v267 = *(int64x2_t *)v264;
            int64x2_t v268 = *(int64x2_t *)(v264 + 16);
            int64x2_t v269 = *(int64x2_t *)(v264 + 32);
            int64x2_t v270 = *(int64x2_t *)(v264 + 48);
            int64x2_t v271 = *(int64x2_t *)(v264 + 64);
            int64x2_t v272 = *(int64x2_t *)(v264 + 80);
            int64x2_t v273 = *(int64x2_t *)(v264 + 96);
            int64x2_t v274 = *(int64x2_t *)(v264 + 112);
            int64x2_t v410 = vzip1q_s64(*(int64x2_t *)v264, v268);
            int64x2_t v411 = vzip1q_s64(v271, v272);
            int64x2_t v414 = vzip2q_s64(v267, v268);
            int64x2_t v415 = vzip2q_s64(v271, v272);
            int64x2_t v418 = vzip1q_s64(v269, v270);
            int64x2_t v419 = vzip1q_s64(v273, v274);
            int64x2_t v422 = vzip2q_s64(v269, v270);
            int64x2_t v423 = vzip2q_s64(v273, v274);
            uint64_t v266 = 128;
          }
          else if (v265 == 3)
          {
            float32x4_t v275 = vld1q_dup_f32((const float *)v264);
            int64x2_t v410 = (int64x2_t)v275;
            int64x2_t v411 = (int64x2_t)v275;
            int64x2_t v414 = (int64x2_t)v275;
            int64x2_t v415 = (int64x2_t)v275;
            int64x2_t v418 = (int64x2_t)v275;
            int64x2_t v419 = (int64x2_t)v275;
            int64x2_t v422 = (int64x2_t)v275;
            int64x2_t v423 = (int64x2_t)v275;
            uint64_t v266 = 4;
          }
          else if (v79[1])
          {
            uint64_t v266 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v410, 64, v264, v265);
          }
          else
          {
            uint64_t v266 = 0;
            int64x2_t v410 = 0u;
            int64x2_t v411 = 0u;
            int64x2_t v414 = 0u;
            int64x2_t v415 = 0u;
            int64x2_t v418 = 0u;
            int64x2_t v419 = 0u;
            int64x2_t v422 = 0u;
            int64x2_t v423 = 0u;
          }
          uint64_t v276 = v264 + v266;
          unsigned int v277 = v79[2];
          if (v277 == 127)
          {
            int64x2_t v279 = *(int64x2_t *)v276;
            int64x2_t v280 = *(int64x2_t *)(v276 + 16);
            int64x2_t v281 = *(int64x2_t *)(v276 + 32);
            int64x2_t v282 = *(int64x2_t *)(v276 + 48);
            int64x2_t v283 = *(int64x2_t *)(v276 + 64);
            int64x2_t v284 = *(int64x2_t *)(v276 + 80);
            int64x2_t v285 = *(int64x2_t *)(v276 + 96);
            int64x2_t v286 = *(int64x2_t *)(v276 + 112);
            int64x2_t v396 = vzip1q_s64(*(int64x2_t *)v276, v280);
            int64x2_t v397 = vzip1q_s64(v283, v284);
            int64x2_t v400 = vzip2q_s64(v279, v280);
            int64x2_t v401 = vzip2q_s64(v283, v284);
            int64x2_t v404 = vzip1q_s64(v281, v282);
            int64x2_t v405 = vzip1q_s64(v285, v286);
            int64x2_t v408 = vzip2q_s64(v281, v282);
            int64x2_t v409 = vzip2q_s64(v285, v286);
            uint64_t v278 = 128;
          }
          else if (v277 == 3)
          {
            float32x4_t v287 = vld1q_dup_f32((const float *)v276);
            int64x2_t v396 = (int64x2_t)v287;
            int64x2_t v397 = (int64x2_t)v287;
            int64x2_t v400 = (int64x2_t)v287;
            int64x2_t v401 = (int64x2_t)v287;
            int64x2_t v404 = (int64x2_t)v287;
            int64x2_t v405 = (int64x2_t)v287;
            int64x2_t v408 = (int64x2_t)v287;
            int64x2_t v409 = (int64x2_t)v287;
            uint64_t v278 = 4;
          }
          else if (v79[2])
          {
            uint64_t v278 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v396, 64, v276, v277);
          }
          else
          {
            uint64_t v278 = 0;
            int64x2_t v396 = 0u;
            int64x2_t v397 = 0u;
            int64x2_t v400 = 0u;
            int64x2_t v401 = 0u;
            int64x2_t v404 = 0u;
            int64x2_t v405 = 0u;
            int64x2_t v408 = 0u;
            int64x2_t v409 = 0u;
          }
          uint64_t v288 = v276 + v278;
          unsigned int v289 = v79[3];
          if (v289 == 127)
          {
            int64x2_t v291 = *(int64x2_t *)v288;
            int64x2_t v292 = *(int64x2_t *)(v288 + 16);
            int64x2_t v293 = *(int64x2_t *)(v288 + 32);
            int64x2_t v294 = *(int64x2_t *)(v288 + 48);
            int64x2_t v295 = *(int64x2_t *)(v288 + 64);
            int64x2_t v296 = *(int64x2_t *)(v288 + 80);
            int64x2_t v297 = *(int64x2_t *)(v288 + 96);
            int64x2_t v298 = *(int64x2_t *)(v288 + 112);
            int64x2_t v412 = vzip1q_s64(*(int64x2_t *)v288, v292);
            int64x2_t v413 = vzip1q_s64(v295, v296);
            int64x2_t v416 = vzip2q_s64(v291, v292);
            int64x2_t v417 = vzip2q_s64(v295, v296);
            int64x2_t v420 = vzip1q_s64(v293, v294);
            int64x2_t v421 = vzip1q_s64(v297, v298);
            int64x2_t v424 = vzip2q_s64(v293, v294);
            int64x2_t v425 = vzip2q_s64(v297, v298);
            uint64_t v290 = 128;
          }
          else if (v289 == 3)
          {
            float32x4_t v299 = vld1q_dup_f32((const float *)v288);
            int64x2_t v412 = (int64x2_t)v299;
            int64x2_t v413 = (int64x2_t)v299;
            int64x2_t v416 = (int64x2_t)v299;
            int64x2_t v417 = (int64x2_t)v299;
            int64x2_t v420 = (int64x2_t)v299;
            int64x2_t v421 = (int64x2_t)v299;
            int64x2_t v424 = (int64x2_t)v299;
            int64x2_t v425 = (int64x2_t)v299;
            uint64_t v290 = 4;
          }
          else if (v79[3])
          {
            uint64_t v290 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v412, 64, v288, v289);
          }
          else
          {
            uint64_t v290 = 0;
            int64x2_t v412 = 0u;
            int64x2_t v413 = 0u;
            int64x2_t v416 = 0u;
            int64x2_t v417 = 0u;
            int64x2_t v420 = 0u;
            int64x2_t v421 = 0u;
            int64x2_t v424 = 0u;
            int64x2_t v425 = 0u;
          }
          uint64_t v300 = v288 + v290;
          unsigned int v301 = v79[4];
          if (v301 == 127)
          {
            int64x2_t v303 = *(int64x2_t *)v300;
            int64x2_t v304 = *(int64x2_t *)(v300 + 16);
            int64x2_t v305 = *(int64x2_t *)(v300 + 32);
            int64x2_t v306 = *(int64x2_t *)(v300 + 48);
            int64x2_t v307 = *(int64x2_t *)(v300 + 64);
            int64x2_t v308 = *(int64x2_t *)(v300 + 80);
            int64x2_t v309 = *(int64x2_t *)(v300 + 96);
            int64x2_t v310 = *(int64x2_t *)(v300 + 112);
            int64x2_t v426 = vzip1q_s64(*(int64x2_t *)v300, v304);
            int64x2_t v427 = vzip1q_s64(v307, v308);
            int64x2_t v430 = vzip2q_s64(v303, v304);
            int64x2_t v431 = vzip2q_s64(v307, v308);
            int64x2_t v434 = vzip1q_s64(v305, v306);
            int64x2_t v435 = vzip1q_s64(v309, v310);
            int64x2_t v438 = vzip2q_s64(v305, v306);
            int64x2_t v439 = vzip2q_s64(v309, v310);
            uint64_t v302 = 128;
          }
          else if (v301 == 3)
          {
            float32x4_t v311 = vld1q_dup_f32((const float *)v300);
            int64x2_t v426 = (int64x2_t)v311;
            int64x2_t v427 = (int64x2_t)v311;
            int64x2_t v430 = (int64x2_t)v311;
            int64x2_t v431 = (int64x2_t)v311;
            int64x2_t v434 = (int64x2_t)v311;
            int64x2_t v435 = (int64x2_t)v311;
            int64x2_t v438 = (int64x2_t)v311;
            int64x2_t v439 = (int64x2_t)v311;
            uint64_t v302 = 4;
          }
          else if (v79[4])
          {
            uint64_t v302 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v426, 64, v300, v301);
          }
          else
          {
            uint64_t v302 = 0;
            int64x2_t v426 = 0u;
            int64x2_t v427 = 0u;
            int64x2_t v430 = 0u;
            int64x2_t v431 = 0u;
            int64x2_t v434 = 0u;
            int64x2_t v435 = 0u;
            int64x2_t v438 = 0u;
            int64x2_t v439 = 0u;
          }
          uint64_t v312 = v300 + v302;
          unsigned int v313 = v79[5];
          if (v313 == 127)
          {
            int64x2_t v315 = *(int64x2_t *)v312;
            int64x2_t v316 = *(int64x2_t *)(v312 + 16);
            int64x2_t v317 = *(int64x2_t *)(v312 + 32);
            int64x2_t v318 = *(int64x2_t *)(v312 + 48);
            int64x2_t v319 = *(int64x2_t *)(v312 + 64);
            int64x2_t v320 = *(int64x2_t *)(v312 + 80);
            int64x2_t v321 = *(int64x2_t *)(v312 + 96);
            int64x2_t v322 = *(int64x2_t *)(v312 + 112);
            int64x2_t v442 = vzip1q_s64(*(int64x2_t *)v312, v316);
            int64x2_t v443 = vzip1q_s64(v319, v320);
            int64x2_t v446 = vzip2q_s64(v315, v316);
            int64x2_t v447 = vzip2q_s64(v319, v320);
            int64x2_t v450 = vzip1q_s64(v317, v318);
            int64x2_t v451 = vzip1q_s64(v321, v322);
            int64x2_t v454 = vzip2q_s64(v317, v318);
            int64x2_t v455 = vzip2q_s64(v321, v322);
            uint64_t v314 = 128;
          }
          else if (v313 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v312);
            int64x2_t v442 = (int64x2_t)v323;
            int64x2_t v443 = (int64x2_t)v323;
            int64x2_t v446 = (int64x2_t)v323;
            int64x2_t v447 = (int64x2_t)v323;
            int64x2_t v450 = (int64x2_t)v323;
            int64x2_t v451 = (int64x2_t)v323;
            int64x2_t v454 = (int64x2_t)v323;
            int64x2_t v455 = (int64x2_t)v323;
            uint64_t v314 = 4;
          }
          else if (v79[5])
          {
            uint64_t v314 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v442, 64, v312, v313);
          }
          else
          {
            uint64_t v314 = 0;
            int64x2_t v442 = 0u;
            int64x2_t v443 = 0u;
            int64x2_t v446 = 0u;
            int64x2_t v447 = 0u;
            int64x2_t v450 = 0u;
            int64x2_t v451 = 0u;
            int64x2_t v454 = 0u;
            int64x2_t v455 = 0u;
          }
          uint64_t v324 = v312 + v314;
          unsigned int v325 = v79[6];
          if (v325 == 127)
          {
            int64x2_t v327 = *(int64x2_t *)v324;
            int64x2_t v328 = *(int64x2_t *)(v324 + 16);
            int64x2_t v329 = *(int64x2_t *)(v324 + 32);
            int64x2_t v330 = *(int64x2_t *)(v324 + 48);
            int64x2_t v331 = *(int64x2_t *)(v324 + 64);
            int64x2_t v332 = *(int64x2_t *)(v324 + 80);
            int64x2_t v333 = *(int64x2_t *)(v324 + 96);
            int64x2_t v334 = *(int64x2_t *)(v324 + 112);
            int64x2_t v428 = vzip1q_s64(*(int64x2_t *)v324, v328);
            int64x2_t v429 = vzip1q_s64(v331, v332);
            int64x2_t v432 = vzip2q_s64(v327, v328);
            int64x2_t v433 = vzip2q_s64(v331, v332);
            int64x2_t v436 = vzip1q_s64(v329, v330);
            int64x2_t v437 = vzip1q_s64(v333, v334);
            int64x2_t v440 = vzip2q_s64(v329, v330);
            int64x2_t v441 = vzip2q_s64(v333, v334);
            uint64_t v326 = 128;
          }
          else if (v325 == 3)
          {
            float32x4_t v335 = vld1q_dup_f32((const float *)v324);
            int64x2_t v428 = (int64x2_t)v335;
            int64x2_t v429 = (int64x2_t)v335;
            int64x2_t v432 = (int64x2_t)v335;
            int64x2_t v433 = (int64x2_t)v335;
            int64x2_t v436 = (int64x2_t)v335;
            int64x2_t v437 = (int64x2_t)v335;
            int64x2_t v440 = (int64x2_t)v335;
            int64x2_t v441 = (int64x2_t)v335;
            uint64_t v326 = 4;
          }
          else if (v79[6])
          {
            uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v428, 64, v324, v325);
          }
          else
          {
            uint64_t v326 = 0;
            int64x2_t v428 = 0u;
            int64x2_t v429 = 0u;
            int64x2_t v432 = 0u;
            int64x2_t v433 = 0u;
            int64x2_t v436 = 0u;
            int64x2_t v437 = 0u;
            int64x2_t v440 = 0u;
            int64x2_t v441 = 0u;
          }
          uint64_t v336 = v324 + v326;
          unsigned int v337 = v79[7];
          if (v337 == 127)
          {
            int64x2_t v338 = *(int64x2_t *)v336;
            int64x2_t v339 = *(int64x2_t *)(v336 + 16);
            int64x2_t v340 = *(int64x2_t *)(v336 + 32);
            int64x2_t v341 = *(int64x2_t *)(v336 + 48);
            int64x2_t v342 = *(int64x2_t *)(v336 + 64);
            int64x2_t v343 = *(int64x2_t *)(v336 + 80);
            int64x2_t v344 = *(int64x2_t *)(v336 + 96);
            int64x2_t v345 = *(int64x2_t *)(v336 + 112);
            int64x2_t v444 = vzip1q_s64(*(int64x2_t *)v336, v339);
            int64x2_t v445 = vzip1q_s64(v342, v343);
            int64x2_t v448 = vzip2q_s64(v338, v339);
            int64x2_t v449 = vzip2q_s64(v342, v343);
            int64x2_t v452 = vzip1q_s64(v340, v341);
            int64x2_t v453 = vzip1q_s64(v344, v345);
            int64x2_t v456 = vzip2q_s64(v340, v341);
            int64x2_t v457 = vzip2q_s64(v344, v345);
            unsigned int v40 = a7;
            uint64_t v15 = v380;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v380;
            if (v337 == 3)
            {
              float32x4_t v346 = vld1q_dup_f32((const float *)v336);
              int64x2_t v444 = (int64x2_t)v346;
              int64x2_t v445 = (int64x2_t)v346;
              int64x2_t v448 = (int64x2_t)v346;
              int64x2_t v449 = (int64x2_t)v346;
              int64x2_t v452 = (int64x2_t)v346;
              int64x2_t v453 = (int64x2_t)v346;
              int64x2_t v456 = (int64x2_t)v346;
              int64x2_t v457 = (int64x2_t)v346;
            }
            else if (v337)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v444, 64, v336, v337);
            }
            else
            {
              int64x2_t v444 = 0u;
              int64x2_t v445 = 0u;
              int64x2_t v448 = 0u;
              int64x2_t v449 = 0u;
              int64x2_t v452 = 0u;
              int64x2_t v453 = 0u;
              int64x2_t v456 = 0u;
              int64x2_t v457 = 0u;
            }
          }
          unint64_t v347 = v389;
          int v39 = v19 & v353;
          unsigned int v41 = v37 + 1;
          if (v389)
          {
            unint64_t v348 = 0;
            float64x2_t v349 = &v394.i8[64 * (unint64_t)v387 + 4 * v388];
            unsigned int v350 = v390;
            do
            {
              if (v350)
              {
                uint64_t v351 = 0;
                uint64_t v352 = v385 + v386 * v348;
                do
                {
                  *(unsigned char *)(v352 + v351) = v349[v351];
                  ++v351;
                  unsigned int v350 = v390;
                }
                while (4 * (unint64_t)v390 > v351);
                unint64_t v347 = v389;
              }
              ++v348;
              v349 += 64;
            }
            while (v348 < v347);
          }
LABEL_48:
          BOOL v20 = v37 == v371 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v358;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v458 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v379 = a8;
  unsigned int v359 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v358 = v359 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v373 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v372 = 0;
LABEL_32:
      unsigned int v370 = v25 - 4;
      unsigned int v363 = v24 - 4;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v356 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v372 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v372 = 0;
  unsigned int v356 = 0;
  unsigned int v363 = 0;
  unsigned int v370 = 0;
LABEL_33:
  if (v19 <= v358)
  {
    unsigned int v371 = a7 + a9 - 1;
    if (a7 >> 4 <= v371 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v382 = v17 >> 4;
      unsigned int v355 = v18 >> 4;
      int v381 = (v17 & 0xF) + 1;
      int v354 = (v18 & 0xF) + 1;
      int v353 = ~(-1 << v363);
      uint64_t v367 = 8 * a11;
      uint64_t v368 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v366 = v34.i32[0] | v34.i32[1];
      BOOL v361 = v34.i32[1] != 0;
      int8x8_t v362 = v34;
      BOOL v360 = v34.i32[0] != 0;
      uint64_t v380 = v15;
      uint64_t v364 = 3 * a11;
      uint64_t v365 = 2 * a11;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v379) {
          int v36 = v379;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v359 < v35) {
          unsigned int v35 = v359;
        }
        int v369 = v36 - 16 * v19;
        int v377 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v354;
        if (v19 != v355) {
          int v38 = 16;
        }
        unsigned int v383 = v38;
        int v39 = v19 & v353;
        uint64_t v376 = a2 + (v36 - v379) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v371 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v382) {
            unsigned int v46 = v381;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (16 * v19 >= v379 && v42 >= v40)
          {
            int v48 = v381;
            if (v37 != v382) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v377 != v383;
          }
          if (v372)
          {
            if (v370 | v363)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v370 != 0;
              BOOL v54 = v363 != 0;
              unsigned int v55 = v370;
              unsigned int v56 = v363;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v370) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v370) + (v19 >> v363) * v356) + (v51 << 10);
          }
          else
          {
            if (v366)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v361;
              BOOL v61 = v360;
              __int32 v62 = v362.i32[1];
              __int32 v63 = v362.i32[0];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 15;
          if (v69 < 0x20)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 4) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          long long v78 = (int64x2_t *)(a3 + v64);
          if (v373)
          {
            memcpy(__dst, v78, sizeof(__dst));
            long long v78 = (int64x2_t *)__dst;
          }
          char v79 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v80 = v376 + 4 * (v44 - v40);
          char v81 = v46 < 0x10 || v47;
          if ((v81 & 1) == 0 && v383 > 0xF)
          {
            unsigned int v82 = *v79;
            if (v82 == 127)
            {
              int64x2_t v94 = *v78;
              int64x2_t v95 = v78[1];
              int64x2_t v96 = v78[2];
              int64x2_t v97 = v78[3];
              int64x2_t v98 = v78[4];
              int64x2_t v99 = v78[5];
              int64x2_t v100 = v78[6];
              int64x2_t v101 = v78[7];
              uint64_t v83 = 2 * a11;
              *(int64x2_t *)uint64_t v80 = vzip1q_s64(*v78, v95);
              *(int64x2_t *)(v80 + 16) = vzip1q_s64(v98, v99);
              int v102 = (int64x2_t *)(v80 + v365);
              uint64_t v32 = a11;
              unint64_t v103 = (int64x2_t *)(v80 + a11);
              *unint64_t v103 = vzip2q_s64(v94, v95);
              v103[1] = vzip2q_s64(v98, v99);
              int64x2_t *v102 = vzip1q_s64(v96, v97);
              v102[1] = vzip1q_s64(v100, v101);
              unsigned int v104 = (int64x2_t *)(v80 + v365 + a11);
              *unsigned int v104 = vzip2q_s64(v96, v97);
              v104[1] = vzip2q_s64(v100, v101);
              uint64_t v84 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v83 = 2 * a11;
              if (v82 == 3)
              {
                float32x4_t v90 = vld1q_dup_f32((const float *)v78->i32);
                *(float32x4_t *)uint64_t v80 = v90;
                *(float32x4_t *)(v80 + 16) = v90;
                unsigned int v91 = (float32x4_t *)(v80 + a11);
                *unsigned int v91 = v90;
                v91[1] = v90;
                uint64_t v92 = (float32x4_t *)(v80 + v365);
                *uint64_t v92 = v90;
                v92[1] = v90;
                int16x4_t v93 = (float32x4_t *)(v80 + v364);
                *int16x4_t v93 = v90;
                v93[1] = v90;
                uint64_t v84 = 4;
              }
              else if (*v79)
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v80, a11, (uint64_t)v78, v82);
              }
              else
              {
                uint64_t v84 = 0;
                *(_OWORD *)uint64_t v80 = 0u;
                *(_OWORD *)(v80 + 16) = 0u;
                uint64_t v85 = (_OWORD *)(v80 + a11);
                _OWORD *v85 = 0u;
                v85[1] = 0u;
                uint64_t v86 = (_OWORD *)(v80 + v365);
                _OWORD *v86 = 0u;
                v86[1] = 0u;
                uint64_t v87 = (_OWORD *)(v80 + v364);
                *uint64_t v87 = 0u;
                v87[1] = 0u;
              }
            }
            uint64_t v105 = (uint64_t)v78->i64 + v84;
            uint64_t v106 = v80 + v368;
            unsigned int v107 = v79[1];
            if (v107 == 127)
            {
              int64x2_t v116 = *(int64x2_t *)v105;
              int64x2_t v117 = *(int64x2_t *)(v105 + 16);
              int64x2_t v118 = *(int64x2_t *)(v105 + 32);
              int64x2_t v119 = *(int64x2_t *)(v105 + 48);
              int64x2_t v120 = *(int64x2_t *)(v105 + 64);
              int64x2_t v121 = *(int64x2_t *)(v105 + 80);
              int64x2_t v122 = *(int64x2_t *)(v105 + 96);
              int64x2_t v123 = *(int64x2_t *)(v105 + 112);
              *(int64x2_t *)uint64_t v106 = vzip1q_s64(*(int64x2_t *)v105, v117);
              *(int64x2_t *)(v106 + 16) = vzip1q_s64(v120, v121);
              int v124 = (int64x2_t *)(v106 + v83);
              unsigned int v125 = (int64x2_t *)(v106 + v32);
              *unsigned int v125 = vzip2q_s64(v116, v117);
              v125[1] = vzip2q_s64(v120, v121);
              int64x2_t *v124 = vzip1q_s64(v118, v119);
              v124[1] = vzip1q_s64(v122, v123);
              unsigned int v126 = (int64x2_t *)(v106 + v83 + v32);
              int64x2_t *v126 = vzip2q_s64(v118, v119);
              v126[1] = vzip2q_s64(v122, v123);
              uint64_t v108 = 128;
            }
            else if (v107 == 3)
            {
              float32x4_t v112 = vld1q_dup_f32((const float *)v105);
              *(float32x4_t *)uint64_t v106 = v112;
              *(float32x4_t *)(v106 + 16) = v112;
              int v113 = (float32x4_t *)(v106 + v32);
              float32x4_t *v113 = v112;
              v113[1] = v112;
              BOOL v114 = (float32x4_t *)(v106 + v83);
              *BOOL v114 = v112;
              v114[1] = v112;
              BOOL v115 = (float32x4_t *)(v106 + v364);
              *BOOL v115 = v112;
              v115[1] = v112;
              uint64_t v108 = 4;
            }
            else if (v79[1])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v80 + v368), v32, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              *(_OWORD *)uint64_t v106 = 0u;
              *(_OWORD *)(v106 + 16) = 0u;
              BOOL v109 = (_OWORD *)(v106 + v32);
              _OWORD *v109 = 0u;
              v109[1] = 0u;
              unsigned int v110 = (_OWORD *)(v106 + v83);
              *unsigned int v110 = 0u;
              v110[1] = 0u;
              uint64_t v111 = (_OWORD *)(v106 + v364);
              _OWORD *v111 = 0u;
              v111[1] = 0u;
            }
            uint64_t v127 = v105 + v108;
            unsigned int v128 = (_OWORD *)(v80 + 32);
            unsigned int v129 = v79[2];
            if (v129 == 127)
            {
              int64x2_t v138 = *(int64x2_t *)v127;
              int64x2_t v139 = *(int64x2_t *)(v127 + 16);
              int64x2_t v140 = *(int64x2_t *)(v127 + 32);
              int64x2_t v141 = *(int64x2_t *)(v127 + 48);
              int64x2_t v142 = *(int64x2_t *)(v127 + 64);
              int64x2_t v143 = *(int64x2_t *)(v127 + 80);
              int64x2_t v144 = *(int64x2_t *)(v127 + 96);
              int64x2_t v145 = *(int64x2_t *)(v127 + 112);
              *unsigned int v128 = vzip1q_s64(*(int64x2_t *)v127, v139);
              *(int64x2_t *)(v80 + 48) = vzip1q_s64(v142, v143);
              int8x8_t v146 = (int64x2_t *)((char *)v128 + v83);
              int16x4_t v147 = (int64x2_t *)((char *)v128 + v32);
              *int16x4_t v147 = vzip2q_s64(v138, v139);
              v147[1] = vzip2q_s64(v142, v143);
              int64x2_t *v146 = vzip1q_s64(v140, v141);
              v146[1] = vzip1q_s64(v144, v145);
              uint64_t v148 = (int64x2_t *)((char *)v128 + v83 + v32);
              int64x2_t *v148 = vzip2q_s64(v140, v141);
              v148[1] = vzip2q_s64(v144, v145);
              uint64_t v130 = 128;
            }
            else if (v129 == 3)
            {
              float32x4_t v134 = vld1q_dup_f32((const float *)v127);
              *(float32x4_t *)(v80 + 32) = v134;
              *(float32x4_t *)(v80 + 48) = v134;
              unsigned int v135 = (float32x4_t *)((char *)v128 + v32);
              float32x4_t *v135 = v134;
              v135[1] = v134;
              unsigned int v136 = (float32x4_t *)((char *)v128 + v83);
              *unsigned int v136 = v134;
              v136[1] = v134;
              char v137 = (float32x4_t *)((char *)v128 + v364);
              *char v137 = v134;
              v137[1] = v134;
              uint64_t v130 = 4;
            }
            else if (v79[2])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v32, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              *unsigned int v128 = 0u;
              *(_OWORD *)(v80 + 48) = 0u;
              uint64_t v131 = (_OWORD *)((char *)v128 + v32);
              _OWORD *v131 = 0u;
              v131[1] = 0u;
              uint64_t v132 = (_OWORD *)((char *)v128 + v83);
              *uint64_t v132 = 0u;
              v132[1] = 0u;
              unsigned int v133 = (_OWORD *)((char *)v128 + v364);
              _OWORD *v133 = 0u;
              v133[1] = 0u;
            }
            uint64_t v149 = v127 + v130;
            uint64_t v150 = (_OWORD *)(v106 + 32);
            unsigned int v151 = v79[3];
            if (v151 == 127)
            {
              int64x2_t v160 = *(int64x2_t *)v149;
              int64x2_t v161 = *(int64x2_t *)(v149 + 16);
              int64x2_t v162 = *(int64x2_t *)(v149 + 32);
              int64x2_t v163 = *(int64x2_t *)(v149 + 48);
              int64x2_t v164 = *(int64x2_t *)(v149 + 64);
              int64x2_t v165 = *(int64x2_t *)(v149 + 80);
              int64x2_t v166 = *(int64x2_t *)(v149 + 96);
              int64x2_t v167 = *(int64x2_t *)(v149 + 112);
              *uint64_t v150 = vzip1q_s64(*(int64x2_t *)v149, v161);
              *(int64x2_t *)(v106 + 48) = vzip1q_s64(v164, v165);
              uint64_t v168 = (int64x2_t *)((char *)v150 + v83);
              int16x4_t v169 = (int64x2_t *)((char *)v150 + v32);
              *int16x4_t v169 = vzip2q_s64(v160, v161);
              v169[1] = vzip2q_s64(v164, v165);
              int64x2_t *v168 = vzip1q_s64(v162, v163);
              v168[1] = vzip1q_s64(v166, v167);
              int16x4_t v170 = (int64x2_t *)((char *)v150 + v83 + v32);
              *int16x4_t v170 = vzip2q_s64(v162, v163);
              v170[1] = vzip2q_s64(v166, v167);
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              *(float32x4_t *)(v106 + 32) = v156;
              *(float32x4_t *)(v106 + 48) = v156;
              uint64_t v157 = (float32x4_t *)((char *)v150 + v32);
              float32x4_t *v157 = v156;
              v157[1] = v156;
              uint64_t v158 = (float32x4_t *)((char *)v150 + v83);
              *uint64_t v158 = v156;
              v158[1] = v156;
              int8x8_t v159 = (float32x4_t *)((char *)v150 + v364);
              *int8x8_t v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v79[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              *uint64_t v150 = 0u;
              *(_OWORD *)(v106 + 48) = 0u;
              int16x4_t v153 = (_OWORD *)((char *)v150 + v32);
              _OWORD *v153 = 0u;
              v153[1] = 0u;
              int16x4_t v154 = (_OWORD *)((char *)v150 + v83);
              *int16x4_t v154 = 0u;
              v154[1] = 0u;
              int16x4_t v155 = (_OWORD *)((char *)v150 + v364);
              _OWORD *v155 = 0u;
              v155[1] = 0u;
            }
            uint64_t v171 = v149 + v152;
            uint64_t v172 = v80 + v367;
            unsigned int v173 = v79[4];
            if (v173 == 127)
            {
              int64x2_t v182 = *(int64x2_t *)v171;
              int64x2_t v183 = *(int64x2_t *)(v171 + 16);
              int64x2_t v184 = *(int64x2_t *)(v171 + 32);
              int64x2_t v185 = *(int64x2_t *)(v171 + 48);
              int64x2_t v186 = *(int64x2_t *)(v171 + 64);
              int64x2_t v187 = *(int64x2_t *)(v171 + 80);
              int64x2_t v188 = *(int64x2_t *)(v171 + 96);
              int64x2_t v189 = *(int64x2_t *)(v171 + 112);
              *(int64x2_t *)uint64_t v172 = vzip1q_s64(*(int64x2_t *)v171, v183);
              *(int64x2_t *)(v172 + 16) = vzip1q_s64(v186, v187);
              int16x4_t v190 = (int64x2_t *)(v172 + v83);
              int16x4_t v191 = (int64x2_t *)(v172 + v32);
              *int16x4_t v191 = vzip2q_s64(v182, v183);
              v191[1] = vzip2q_s64(v186, v187);
              int64x2_t *v190 = vzip1q_s64(v184, v185);
              v190[1] = vzip1q_s64(v188, v189);
              int16x4_t v192 = (int64x2_t *)(v172 + v83 + v32);
              *int16x4_t v192 = vzip2q_s64(v184, v185);
              v192[1] = vzip2q_s64(v188, v189);
              uint64_t v174 = 128;
            }
            else if (v173 == 3)
            {
              float32x4_t v178 = vld1q_dup_f32((const float *)v171);
              *(float32x4_t *)uint64_t v172 = v178;
              *(float32x4_t *)(v172 + 16) = v178;
              int16x4_t v179 = (float32x4_t *)(v172 + v32);
              float32x4_t *v179 = v178;
              v179[1] = v178;
              int16x4_t v180 = (float32x4_t *)(v172 + v83);
              *int16x4_t v180 = v178;
              v180[1] = v178;
              unsigned int v181 = (float32x4_t *)(v172 + v364);
              *unsigned int v181 = v178;
              v181[1] = v178;
              uint64_t v174 = 4;
            }
            else if (v79[4])
            {
              uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v80 + v367), v32, v171, v173);
            }
            else
            {
              uint64_t v174 = 0;
              *(_OWORD *)uint64_t v172 = 0u;
              *(_OWORD *)(v172 + 16) = 0u;
              uint64_t v175 = (_OWORD *)(v172 + v32);
              _OWORD *v175 = 0u;
              v175[1] = 0u;
              int16x4_t v176 = (_OWORD *)(v172 + v83);
              *int16x4_t v176 = 0u;
              v176[1] = 0u;
              int16x4_t v177 = (_OWORD *)(v172 + v364);
              _OWORD *v177 = 0u;
              v177[1] = 0u;
            }
            uint64_t v193 = v171 + v174;
            uint64_t v194 = v80 + 12 * a11;
            unsigned int v195 = v79[5];
            if (v195 == 127)
            {
              int64x2_t v204 = *(int64x2_t *)v193;
              int64x2_t v205 = *(int64x2_t *)(v193 + 16);
              int64x2_t v206 = *(int64x2_t *)(v193 + 32);
              int64x2_t v207 = *(int64x2_t *)(v193 + 48);
              int64x2_t v208 = *(int64x2_t *)(v193 + 64);
              int64x2_t v209 = *(int64x2_t *)(v193 + 80);
              int64x2_t v210 = *(int64x2_t *)(v193 + 96);
              int64x2_t v211 = *(int64x2_t *)(v193 + 112);
              *(int64x2_t *)uint64_t v194 = vzip1q_s64(*(int64x2_t *)v193, v205);
              *(int64x2_t *)(v194 + 16) = vzip1q_s64(v208, v209);
              int16x4_t v212 = (int64x2_t *)(v194 + v83);
              int16x4_t v213 = (int64x2_t *)(v194 + v32);
              *int16x4_t v213 = vzip2q_s64(v204, v205);
              v213[1] = vzip2q_s64(v208, v209);
              int64x2_t *v212 = vzip1q_s64(v206, v207);
              v212[1] = vzip1q_s64(v210, v211);
              int16x4_t v214 = (int64x2_t *)(v194 + v83 + v32);
              int64x2_t *v214 = vzip2q_s64(v206, v207);
              v214[1] = vzip2q_s64(v210, v211);
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              *(float32x4_t *)uint64_t v194 = v200;
              *(float32x4_t *)(v194 + 16) = v200;
              int16x4_t v201 = (float32x4_t *)(v194 + v32);
              float32x4_t *v201 = v200;
              v201[1] = v200;
              unsigned int v202 = (float32x4_t *)(v194 + v83);
              *unsigned int v202 = v200;
              v202[1] = v200;
              uint64_t v203 = (float32x4_t *)(v194 + v364);
              *uint64_t v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v79[5])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v194, v32, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *(_OWORD *)uint64_t v194 = 0u;
              *(_OWORD *)(v194 + 16) = 0u;
              int16x4_t v197 = (_OWORD *)(v194 + v32);
              _OWORD *v197 = 0u;
              v197[1] = 0u;
              int16x4_t v198 = (_OWORD *)(v194 + v83);
              *int16x4_t v198 = 0u;
              v198[1] = 0u;
              int16x4_t v199 = (_OWORD *)(v194 + v364);
              _OWORD *v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v215 = v193 + v196;
            BOOL v216 = (_OWORD *)(v172 + 32);
            unsigned int v217 = v79[6];
            if (v217 == 127)
            {
              int64x2_t v226 = *(int64x2_t *)v215;
              int64x2_t v227 = *(int64x2_t *)(v215 + 16);
              int64x2_t v228 = *(int64x2_t *)(v215 + 32);
              int64x2_t v229 = *(int64x2_t *)(v215 + 48);
              int64x2_t v230 = *(int64x2_t *)(v215 + 64);
              int64x2_t v231 = *(int64x2_t *)(v215 + 80);
              int64x2_t v232 = *(int64x2_t *)(v215 + 96);
              int64x2_t v233 = *(int64x2_t *)(v215 + 112);
              *BOOL v216 = vzip1q_s64(*(int64x2_t *)v215, v227);
              *(int64x2_t *)(v172 + 48) = vzip1q_s64(v230, v231);
              unsigned int v234 = (int64x2_t *)((char *)v216 + v83);
              uint64_t v235 = (int64x2_t *)((char *)v216 + v32);
              int64x2_t *v235 = vzip2q_s64(v226, v227);
              v235[1] = vzip2q_s64(v230, v231);
              int64x2_t *v234 = vzip1q_s64(v228, v229);
              v234[1] = vzip1q_s64(v232, v233);
              uint64_t v236 = (int64x2_t *)((char *)v216 + v83 + v32);
              *uint64_t v236 = vzip2q_s64(v228, v229);
              v236[1] = vzip2q_s64(v232, v233);
              uint64_t v218 = 128;
            }
            else if (v217 == 3)
            {
              float32x4_t v222 = vld1q_dup_f32((const float *)v215);
              *(float32x4_t *)(v172 + 32) = v222;
              *(float32x4_t *)(v172 + 48) = v222;
              int v223 = (float32x4_t *)((char *)v216 + v32);
              float32x4_t *v223 = v222;
              v223[1] = v222;
              uint64_t v224 = (float32x4_t *)((char *)v216 + v83);
              *uint64_t v224 = v222;
              v224[1] = v222;
              BOOL v225 = (float32x4_t *)((char *)v216 + v364);
              *BOOL v225 = v222;
              v225[1] = v222;
              uint64_t v218 = 4;
            }
            else if (v79[6])
            {
              uint64_t v218 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v216, v32, v215, v217);
            }
            else
            {
              uint64_t v218 = 0;
              *BOOL v216 = 0u;
              *(_OWORD *)(v172 + 48) = 0u;
              uint64_t v219 = (_OWORD *)((char *)v216 + v32);
              _OWORD *v219 = 0u;
              v219[1] = 0u;
              unsigned int v220 = (_OWORD *)((char *)v216 + v83);
              *unsigned int v220 = 0u;
              v220[1] = 0u;
              unsigned int v221 = (_OWORD *)((char *)v216 + v364);
              _OWORD *v221 = 0u;
              v221[1] = 0u;
            }
            uint64_t v237 = v215 + v218;
            int v238 = (_OWORD *)(v194 + 32);
            unsigned int v239 = v79[7];
            if (v239 == 127)
            {
              int64x2_t v244 = *(int64x2_t *)v237;
              int64x2_t v245 = *(int64x2_t *)(v237 + 16);
              int64x2_t v246 = *(int64x2_t *)(v237 + 32);
              int64x2_t v247 = *(int64x2_t *)(v237 + 48);
              int64x2_t v248 = *(int64x2_t *)(v237 + 64);
              int64x2_t v249 = *(int64x2_t *)(v237 + 80);
              int64x2_t v250 = *(int64x2_t *)(v237 + 96);
              int64x2_t v251 = *(int64x2_t *)(v237 + 112);
              *int v238 = vzip1q_s64(*(int64x2_t *)v237, v245);
              *(int64x2_t *)(v194 + 48) = vzip1q_s64(v248, v249);
              int v252 = (int64x2_t *)((char *)v238 + v83);
              unsigned int v253 = (int64x2_t *)((char *)v238 + v32);
              *unsigned int v253 = vzip2q_s64(v244, v245);
              v253[1] = vzip2q_s64(v248, v249);
              int64x2_t *v252 = vzip1q_s64(v246, v247);
              v252[1] = vzip1q_s64(v250, v251);
              unsigned int v254 = (int64x2_t *)((char *)v238 + v83 + v32);
              *unsigned int v254 = vzip2q_s64(v246, v247);
              v254[1] = vzip2q_s64(v250, v251);
              unsigned int v40 = a7;
              uint64_t v15 = v380;
            }
            else
            {
              uint64_t v15 = v380;
              if (v239 == 3)
              {
                float32x4_t v240 = vld1q_dup_f32((const float *)v237);
                *(float32x4_t *)(v194 + 32) = v240;
                *(float32x4_t *)(v194 + 48) = v240;
LABEL_182:
                int8x8_t v241 = (float32x4_t *)((char *)v238 + v32);
                float32x4_t *v241 = v240;
                v241[1] = v240;
                __int32 v242 = (float32x4_t *)((char *)v238 + v83);
                *__int32 v242 = v240;
                v242[1] = v240;
                unsigned int v243 = (float32x4_t *)((char *)v238 + v364);
                *unsigned int v243 = v240;
                v243[1] = v240;
              }
              else
              {
                if (!v239)
                {
                  float32x4_t v240 = 0uLL;
                  *int v238 = 0u;
                  *(_OWORD *)(v194 + 48) = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v238, v32, v237, v239);
              }
              unsigned int v40 = a7;
            }
LABEL_47:
            int v39 = v19 & v353;
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v380;
          block[5] = v78;
          char v391 = v46;
          char v392 = v383;
          unsigned int v387 = v369;
          unsigned int v388 = v44 - v42;
          block[6] = v79;
          uint64_t v385 = v80;
          uint64_t v32 = a11;
          uint64_t v386 = a11;
          unsigned int v389 = v377;
          unsigned int v390 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v380 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v380;
            goto LABEL_47;
          }
          unsigned int v88 = *v79;
          if (v88 == 127)
          {
            int64x2_t v255 = *v78;
            int64x2_t v256 = v78[1];
            int64x2_t v257 = v78[2];
            int64x2_t v258 = v78[3];
            int64x2_t v259 = v78[4];
            int64x2_t v260 = v78[5];
            int64x2_t v261 = v78[6];
            int64x2_t v262 = v78[7];
            int64x2_t v394 = vzip1q_s64(*v78, v256);
            int64x2_t v395 = vzip1q_s64(v259, v260);
            int64x2_t v398 = vzip2q_s64(v255, v256);
            int64x2_t v399 = vzip2q_s64(v259, v260);
            int64x2_t v402 = vzip1q_s64(v257, v258);
            int64x2_t v403 = vzip1q_s64(v261, v262);
            int64x2_t v406 = vzip2q_s64(v257, v258);
            int64x2_t v407 = vzip2q_s64(v261, v262);
            uint64_t v89 = 128;
          }
          else if (v88 == 3)
          {
            float32x4_t v263 = vld1q_dup_f32((const float *)v78->i32);
            int64x2_t v394 = (int64x2_t)v263;
            int64x2_t v395 = (int64x2_t)v263;
            int64x2_t v398 = (int64x2_t)v263;
            int64x2_t v399 = (int64x2_t)v263;
            int64x2_t v402 = (int64x2_t)v263;
            int64x2_t v403 = (int64x2_t)v263;
            int64x2_t v406 = (int64x2_t)v263;
            int64x2_t v407 = (int64x2_t)v263;
            uint64_t v89 = 4;
          }
          else if (*v79)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 64, (uint64_t)v78, v88);
          }
          else
          {
            uint64_t v89 = 0;
            int64x2_t v395 = 0u;
            int64x2_t v394 = 0u;
            int64x2_t v398 = 0u;
            int64x2_t v399 = 0u;
            int64x2_t v402 = 0u;
            int64x2_t v403 = 0u;
            int64x2_t v406 = 0u;
            int64x2_t v407 = 0u;
          }
          uint64_t v264 = (uint64_t)v78->i64 + v89;
          unsigned int v265 = v79[1];
          if (v265 == 127)
          {
            int64x2_t v267 = *(int64x2_t *)v264;
            int64x2_t v268 = *(int64x2_t *)(v264 + 16);
            int64x2_t v269 = *(int64x2_t *)(v264 + 32);
            int64x2_t v270 = *(int64x2_t *)(v264 + 48);
            int64x2_t v271 = *(int64x2_t *)(v264 + 64);
            int64x2_t v272 = *(int64x2_t *)(v264 + 80);
            int64x2_t v273 = *(int64x2_t *)(v264 + 96);
            int64x2_t v274 = *(int64x2_t *)(v264 + 112);
            int64x2_t v410 = vzip1q_s64(*(int64x2_t *)v264, v268);
            int64x2_t v411 = vzip1q_s64(v271, v272);
            int64x2_t v414 = vzip2q_s64(v267, v268);
            int64x2_t v415 = vzip2q_s64(v271, v272);
            int64x2_t v418 = vzip1q_s64(v269, v270);
            int64x2_t v419 = vzip1q_s64(v273, v274);
            int64x2_t v422 = vzip2q_s64(v269, v270);
            int64x2_t v423 = vzip2q_s64(v273, v274);
            uint64_t v266 = 128;
          }
          else if (v265 == 3)
          {
            float32x4_t v275 = vld1q_dup_f32((const float *)v264);
            int64x2_t v410 = (int64x2_t)v275;
            int64x2_t v411 = (int64x2_t)v275;
            int64x2_t v414 = (int64x2_t)v275;
            int64x2_t v415 = (int64x2_t)v275;
            int64x2_t v418 = (int64x2_t)v275;
            int64x2_t v419 = (int64x2_t)v275;
            int64x2_t v422 = (int64x2_t)v275;
            int64x2_t v423 = (int64x2_t)v275;
            uint64_t v266 = 4;
          }
          else if (v79[1])
          {
            uint64_t v266 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v410, 64, v264, v265);
          }
          else
          {
            uint64_t v266 = 0;
            int64x2_t v410 = 0u;
            int64x2_t v411 = 0u;
            int64x2_t v414 = 0u;
            int64x2_t v415 = 0u;
            int64x2_t v418 = 0u;
            int64x2_t v419 = 0u;
            int64x2_t v422 = 0u;
            int64x2_t v423 = 0u;
          }
          uint64_t v276 = v264 + v266;
          unsigned int v277 = v79[2];
          if (v277 == 127)
          {
            int64x2_t v279 = *(int64x2_t *)v276;
            int64x2_t v280 = *(int64x2_t *)(v276 + 16);
            int64x2_t v281 = *(int64x2_t *)(v276 + 32);
            int64x2_t v282 = *(int64x2_t *)(v276 + 48);
            int64x2_t v283 = *(int64x2_t *)(v276 + 64);
            int64x2_t v284 = *(int64x2_t *)(v276 + 80);
            int64x2_t v285 = *(int64x2_t *)(v276 + 96);
            int64x2_t v286 = *(int64x2_t *)(v276 + 112);
            int64x2_t v396 = vzip1q_s64(*(int64x2_t *)v276, v280);
            int64x2_t v397 = vzip1q_s64(v283, v284);
            int64x2_t v400 = vzip2q_s64(v279, v280);
            int64x2_t v401 = vzip2q_s64(v283, v284);
            int64x2_t v404 = vzip1q_s64(v281, v282);
            int64x2_t v405 = vzip1q_s64(v285, v286);
            int64x2_t v408 = vzip2q_s64(v281, v282);
            int64x2_t v409 = vzip2q_s64(v285, v286);
            uint64_t v278 = 128;
          }
          else if (v277 == 3)
          {
            float32x4_t v287 = vld1q_dup_f32((const float *)v276);
            int64x2_t v396 = (int64x2_t)v287;
            int64x2_t v397 = (int64x2_t)v287;
            int64x2_t v400 = (int64x2_t)v287;
            int64x2_t v401 = (int64x2_t)v287;
            int64x2_t v404 = (int64x2_t)v287;
            int64x2_t v405 = (int64x2_t)v287;
            int64x2_t v408 = (int64x2_t)v287;
            int64x2_t v409 = (int64x2_t)v287;
            uint64_t v278 = 4;
          }
          else if (v79[2])
          {
            uint64_t v278 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v396, 64, v276, v277);
          }
          else
          {
            uint64_t v278 = 0;
            int64x2_t v396 = 0u;
            int64x2_t v397 = 0u;
            int64x2_t v400 = 0u;
            int64x2_t v401 = 0u;
            int64x2_t v404 = 0u;
            int64x2_t v405 = 0u;
            int64x2_t v408 = 0u;
            int64x2_t v409 = 0u;
          }
          uint64_t v288 = v276 + v278;
          unsigned int v289 = v79[3];
          if (v289 == 127)
          {
            int64x2_t v291 = *(int64x2_t *)v288;
            int64x2_t v292 = *(int64x2_t *)(v288 + 16);
            int64x2_t v293 = *(int64x2_t *)(v288 + 32);
            int64x2_t v294 = *(int64x2_t *)(v288 + 48);
            int64x2_t v295 = *(int64x2_t *)(v288 + 64);
            int64x2_t v296 = *(int64x2_t *)(v288 + 80);
            int64x2_t v297 = *(int64x2_t *)(v288 + 96);
            int64x2_t v298 = *(int64x2_t *)(v288 + 112);
            int64x2_t v412 = vzip1q_s64(*(int64x2_t *)v288, v292);
            int64x2_t v413 = vzip1q_s64(v295, v296);
            int64x2_t v416 = vzip2q_s64(v291, v292);
            int64x2_t v417 = vzip2q_s64(v295, v296);
            int64x2_t v420 = vzip1q_s64(v293, v294);
            int64x2_t v421 = vzip1q_s64(v297, v298);
            int64x2_t v424 = vzip2q_s64(v293, v294);
            int64x2_t v425 = vzip2q_s64(v297, v298);
            uint64_t v290 = 128;
          }
          else if (v289 == 3)
          {
            float32x4_t v299 = vld1q_dup_f32((const float *)v288);
            int64x2_t v412 = (int64x2_t)v299;
            int64x2_t v413 = (int64x2_t)v299;
            int64x2_t v416 = (int64x2_t)v299;
            int64x2_t v417 = (int64x2_t)v299;
            int64x2_t v420 = (int64x2_t)v299;
            int64x2_t v421 = (int64x2_t)v299;
            int64x2_t v424 = (int64x2_t)v299;
            int64x2_t v425 = (int64x2_t)v299;
            uint64_t v290 = 4;
          }
          else if (v79[3])
          {
            uint64_t v290 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v412, 64, v288, v289);
          }
          else
          {
            uint64_t v290 = 0;
            int64x2_t v412 = 0u;
            int64x2_t v413 = 0u;
            int64x2_t v416 = 0u;
            int64x2_t v417 = 0u;
            int64x2_t v420 = 0u;
            int64x2_t v421 = 0u;
            int64x2_t v424 = 0u;
            int64x2_t v425 = 0u;
          }
          uint64_t v300 = v288 + v290;
          unsigned int v301 = v79[4];
          if (v301 == 127)
          {
            int64x2_t v303 = *(int64x2_t *)v300;
            int64x2_t v304 = *(int64x2_t *)(v300 + 16);
            int64x2_t v305 = *(int64x2_t *)(v300 + 32);
            int64x2_t v306 = *(int64x2_t *)(v300 + 48);
            int64x2_t v307 = *(int64x2_t *)(v300 + 64);
            int64x2_t v308 = *(int64x2_t *)(v300 + 80);
            int64x2_t v309 = *(int64x2_t *)(v300 + 96);
            int64x2_t v310 = *(int64x2_t *)(v300 + 112);
            int64x2_t v426 = vzip1q_s64(*(int64x2_t *)v300, v304);
            int64x2_t v427 = vzip1q_s64(v307, v308);
            int64x2_t v430 = vzip2q_s64(v303, v304);
            int64x2_t v431 = vzip2q_s64(v307, v308);
            int64x2_t v434 = vzip1q_s64(v305, v306);
            int64x2_t v435 = vzip1q_s64(v309, v310);
            int64x2_t v438 = vzip2q_s64(v305, v306);
            int64x2_t v439 = vzip2q_s64(v309, v310);
            uint64_t v302 = 128;
          }
          else if (v301 == 3)
          {
            float32x4_t v311 = vld1q_dup_f32((const float *)v300);
            int64x2_t v426 = (int64x2_t)v311;
            int64x2_t v427 = (int64x2_t)v311;
            int64x2_t v430 = (int64x2_t)v311;
            int64x2_t v431 = (int64x2_t)v311;
            int64x2_t v434 = (int64x2_t)v311;
            int64x2_t v435 = (int64x2_t)v311;
            int64x2_t v438 = (int64x2_t)v311;
            int64x2_t v439 = (int64x2_t)v311;
            uint64_t v302 = 4;
          }
          else if (v79[4])
          {
            uint64_t v302 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v426, 64, v300, v301);
          }
          else
          {
            uint64_t v302 = 0;
            int64x2_t v426 = 0u;
            int64x2_t v427 = 0u;
            int64x2_t v430 = 0u;
            int64x2_t v431 = 0u;
            int64x2_t v434 = 0u;
            int64x2_t v435 = 0u;
            int64x2_t v438 = 0u;
            int64x2_t v439 = 0u;
          }
          uint64_t v312 = v300 + v302;
          unsigned int v313 = v79[5];
          if (v313 == 127)
          {
            int64x2_t v315 = *(int64x2_t *)v312;
            int64x2_t v316 = *(int64x2_t *)(v312 + 16);
            int64x2_t v317 = *(int64x2_t *)(v312 + 32);
            int64x2_t v318 = *(int64x2_t *)(v312 + 48);
            int64x2_t v319 = *(int64x2_t *)(v312 + 64);
            int64x2_t v320 = *(int64x2_t *)(v312 + 80);
            int64x2_t v321 = *(int64x2_t *)(v312 + 96);
            int64x2_t v322 = *(int64x2_t *)(v312 + 112);
            int64x2_t v442 = vzip1q_s64(*(int64x2_t *)v312, v316);
            int64x2_t v443 = vzip1q_s64(v319, v320);
            int64x2_t v446 = vzip2q_s64(v315, v316);
            int64x2_t v447 = vzip2q_s64(v319, v320);
            int64x2_t v450 = vzip1q_s64(v317, v318);
            int64x2_t v451 = vzip1q_s64(v321, v322);
            int64x2_t v454 = vzip2q_s64(v317, v318);
            int64x2_t v455 = vzip2q_s64(v321, v322);
            uint64_t v314 = 128;
          }
          else if (v313 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v312);
            int64x2_t v442 = (int64x2_t)v323;
            int64x2_t v443 = (int64x2_t)v323;
            int64x2_t v446 = (int64x2_t)v323;
            int64x2_t v447 = (int64x2_t)v323;
            int64x2_t v450 = (int64x2_t)v323;
            int64x2_t v451 = (int64x2_t)v323;
            int64x2_t v454 = (int64x2_t)v323;
            int64x2_t v455 = (int64x2_t)v323;
            uint64_t v314 = 4;
          }
          else if (v79[5])
          {
            uint64_t v314 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v442, 64, v312, v313);
          }
          else
          {
            uint64_t v314 = 0;
            int64x2_t v442 = 0u;
            int64x2_t v443 = 0u;
            int64x2_t v446 = 0u;
            int64x2_t v447 = 0u;
            int64x2_t v450 = 0u;
            int64x2_t v451 = 0u;
            int64x2_t v454 = 0u;
            int64x2_t v455 = 0u;
          }
          uint64_t v324 = v312 + v314;
          unsigned int v325 = v79[6];
          if (v325 == 127)
          {
            int64x2_t v327 = *(int64x2_t *)v324;
            int64x2_t v328 = *(int64x2_t *)(v324 + 16);
            int64x2_t v329 = *(int64x2_t *)(v324 + 32);
            int64x2_t v330 = *(int64x2_t *)(v324 + 48);
            int64x2_t v331 = *(int64x2_t *)(v324 + 64);
            int64x2_t v332 = *(int64x2_t *)(v324 + 80);
            int64x2_t v333 = *(int64x2_t *)(v324 + 96);
            int64x2_t v334 = *(int64x2_t *)(v324 + 112);
            int64x2_t v428 = vzip1q_s64(*(int64x2_t *)v324, v328);
            int64x2_t v429 = vzip1q_s64(v331, v332);
            int64x2_t v432 = vzip2q_s64(v327, v328);
            int64x2_t v433 = vzip2q_s64(v331, v332);
            int64x2_t v436 = vzip1q_s64(v329, v330);
            int64x2_t v437 = vzip1q_s64(v333, v334);
            int64x2_t v440 = vzip2q_s64(v329, v330);
            int64x2_t v441 = vzip2q_s64(v333, v334);
            uint64_t v326 = 128;
          }
          else if (v325 == 3)
          {
            float32x4_t v335 = vld1q_dup_f32((const float *)v324);
            int64x2_t v428 = (int64x2_t)v335;
            int64x2_t v429 = (int64x2_t)v335;
            int64x2_t v432 = (int64x2_t)v335;
            int64x2_t v433 = (int64x2_t)v335;
            int64x2_t v436 = (int64x2_t)v335;
            int64x2_t v437 = (int64x2_t)v335;
            int64x2_t v440 = (int64x2_t)v335;
            int64x2_t v441 = (int64x2_t)v335;
            uint64_t v326 = 4;
          }
          else if (v79[6])
          {
            uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v428, 64, v324, v325);
          }
          else
          {
            uint64_t v326 = 0;
            int64x2_t v428 = 0u;
            int64x2_t v429 = 0u;
            int64x2_t v432 = 0u;
            int64x2_t v433 = 0u;
            int64x2_t v436 = 0u;
            int64x2_t v437 = 0u;
            int64x2_t v440 = 0u;
            int64x2_t v441 = 0u;
          }
          uint64_t v336 = v324 + v326;
          unsigned int v337 = v79[7];
          if (v337 == 127)
          {
            int64x2_t v338 = *(int64x2_t *)v336;
            int64x2_t v339 = *(int64x2_t *)(v336 + 16);
            int64x2_t v340 = *(int64x2_t *)(v336 + 32);
            int64x2_t v341 = *(int64x2_t *)(v336 + 48);
            int64x2_t v342 = *(int64x2_t *)(v336 + 64);
            int64x2_t v343 = *(int64x2_t *)(v336 + 80);
            int64x2_t v344 = *(int64x2_t *)(v336 + 96);
            int64x2_t v345 = *(int64x2_t *)(v336 + 112);
            int64x2_t v444 = vzip1q_s64(*(int64x2_t *)v336, v339);
            int64x2_t v445 = vzip1q_s64(v342, v343);
            int64x2_t v448 = vzip2q_s64(v338, v339);
            int64x2_t v449 = vzip2q_s64(v342, v343);
            int64x2_t v452 = vzip1q_s64(v340, v341);
            int64x2_t v453 = vzip1q_s64(v344, v345);
            int64x2_t v456 = vzip2q_s64(v340, v341);
            int64x2_t v457 = vzip2q_s64(v344, v345);
            unsigned int v40 = a7;
            uint64_t v15 = v380;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v380;
            if (v337 == 3)
            {
              float32x4_t v346 = vld1q_dup_f32((const float *)v336);
              int64x2_t v444 = (int64x2_t)v346;
              int64x2_t v445 = (int64x2_t)v346;
              int64x2_t v448 = (int64x2_t)v346;
              int64x2_t v449 = (int64x2_t)v346;
              int64x2_t v452 = (int64x2_t)v346;
              int64x2_t v453 = (int64x2_t)v346;
              int64x2_t v456 = (int64x2_t)v346;
              int64x2_t v457 = (int64x2_t)v346;
            }
            else if (v337)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v444, 64, v336, v337);
            }
            else
            {
              int64x2_t v444 = 0u;
              int64x2_t v445 = 0u;
              int64x2_t v448 = 0u;
              int64x2_t v449 = 0u;
              int64x2_t v452 = 0u;
              int64x2_t v453 = 0u;
              int64x2_t v456 = 0u;
              int64x2_t v457 = 0u;
            }
          }
          unint64_t v347 = v389;
          int v39 = v19 & v353;
          unsigned int v41 = v37 + 1;
          if (v389)
          {
            unint64_t v348 = 0;
            float64x2_t v349 = &v394.i8[64 * (unint64_t)v387 + 4 * v388];
            unsigned int v350 = v390;
            do
            {
              if (v350)
              {
                uint64_t v351 = 0;
                uint64_t v352 = v385 + v386 * v348;
                do
                {
                  *(unsigned char *)(v352 + v351) = v349[v351];
                  ++v351;
                  unsigned int v350 = v390;
                }
                while (4 * (unint64_t)v390 > v351);
                unint64_t v347 = v389;
              }
              ++v348;
              v349 += 64;
            }
            while (v348 < v347);
          }
LABEL_48:
          BOOL v20 = v37 == v371 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v358;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v456 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v377 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v356 = a8 + a10 - 1;
  unsigned int v358 = v356 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v371 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v358)
  {
    unsigned int v369 = a7 + a9 - 1;
    unsigned int v355 = a7 >> 4;
    if (a7 >> 4 <= v369 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v352 = a5 - 1;
      unsigned int v380 = (a5 - 1) >> 4;
      int v379 = ((a5 - 1) & 0xF) + 1;
      int v353 = ((a6 - 1) & 0xF) + 1;
      unsigned int v354 = (a6 - 1) >> 4;
      uint64_t v361 = 8 * a11;
      uint64_t v362 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v367 = v27.i32[0] | v27.i32[1];
      BOOL v365 = v27.i32[1] != 0;
      int8x8_t v366 = v27;
      BOOL v364 = v27.i32[0] != 0;
      unint64_t v351 = 8 * v19 * (unint64_t)v18;
      unsigned int v368 = a7;
      uint64_t v378 = v16;
      uint64_t v359 = 3 * a11;
      uint64_t v360 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v377) {
          int v29 = v377;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v355;
        if (v356 < v28) {
          unsigned int v28 = v356;
        }
        unsigned int v376 = 16 * v17;
        int v363 = v29 - 16 * v17;
        int v375 = v28 - v29 + 1;
        int v31 = v353;
        if (v17 != v354) {
          int v31 = 16;
        }
        unsigned int v381 = v31;
        uint64_t v374 = a2 + (v29 - v377) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v369 < v34) {
            unsigned int v34 = v369;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v380) {
            unsigned int v37 = v379;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v376 >= v377 && v33 >= a7)
          {
            int v39 = v379;
            if (v30 != v380) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v375 != v381;
          }
          if (isLevelTiled)
          {
            unsigned int v337 = 0;
            uint64_t v338 = v351 >> (*(unsigned char *)(v16 + 57) != 0);
            char v339 = 1;
            if (v338 > 127)
            {
              if (v338 > 511)
              {
                if (v338 == 512)
                {
                  unsigned int v337 = 16;
                  char v340 = 1;
                  unsigned int v341 = 16;
                }
                else
                {
                  char v340 = 1;
                  unsigned int v341 = 0;
                  if (v338 == 1024)
                  {
                    unsigned int v341 = 8;
                    unsigned int v337 = 16;
                  }
                }
              }
              else if (v338 == 128)
              {
                char v339 = 0;
                char v340 = 0;
                unsigned int v337 = 32;
                unsigned int v341 = 32;
              }
              else
              {
                char v340 = 1;
                unsigned int v341 = 0;
                if (v338 == 256)
                {
                  char v339 = 0;
                  unsigned int v341 = 16;
                  unsigned int v337 = 32;
                }
              }
            }
            else
            {
              char v340 = 1;
              unsigned int v341 = 0;
              switch(v338)
              {
                case 4:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v341 = 128;
                  unsigned int v337 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v337 = 128;
                  unsigned int v341 = 128;
                  break;
                case 16:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v341 = 64;
                  unsigned int v337 = 128;
                  break;
                case 32:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v337 = 64;
                  unsigned int v341 = 64;
                  break;
                default:
                  if (v338 == 64)
                  {
                    char v339 = 0;
                    char v340 = 0;
                    unsigned int v341 = 32;
                    unsigned int v337 = 64;
                  }
                  break;
              }
            }
            unsigned int v342 = (v337 >> 4) - 1;
            if (v339)
            {
              unsigned int v343 = 0;
              if (v340) {
                goto LABEL_243;
              }
LABEL_232:
              unsigned int v344 = 32 - __clz(~(-1 << -(char)__clz(((v341 + 15) >> 4) - 1)));
              if (v344 | v343) {
                goto LABEL_233;
              }
LABEL_244:
              uint64_t v346 = 0;
            }
            else
            {
              unsigned int v343 = 32 - __clz(~(-1 << -(char)__clz(v342)));
              if ((v340 & 1) == 0) {
                goto LABEL_232;
              }
LABEL_243:
              unsigned int v344 = 0;
              if (!v343) {
                goto LABEL_244;
              }
LABEL_233:
              int v345 = 0;
              uint64_t v346 = 0;
              int v347 = v30 & v342;
              BOOL v348 = v343 != 0;
              BOOL v349 = v344 != 0;
              int v350 = 1;
              do
              {
                --v343;
                if (v348) {
                  v346 |= (unint64_t)(v350 & v347) << v345++;
                }
                else {
                  unsigned int v343 = 0;
                }
                --v344;
                if (v349) {
                  v346 |= (unint64_t)(v350 & v17 & ((v341 >> 4) - 1)) << v345++;
                }
                else {
                  unsigned int v344 = 0;
                }
                v350 *= 2;
                --v345;
                BOOL v349 = v344 != 0;
                BOOL v348 = v343 != 0;
              }
              while (v344 | v343);
            }
            unint64_t v48 = ((unint64_t)(v33 / v337 + v376 / v341 * ((v337 + v352) / v337)) << 14) + (v346 << 10);
            goto LABEL_59;
          }
          if (v367)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v365;
            BOOL v45 = v364;
            __int32 v46 = v366.i32[1];
            __int32 v47 = v366.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (int64x2_t *)(a3 + v48);
          if (v371)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (int64x2_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v374 + 4 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v381 > 0xF)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              int64x2_t v78 = *v62;
              int64x2_t v79 = v62[1];
              int64x2_t v80 = v62[2];
              int64x2_t v81 = v62[3];
              int64x2_t v82 = v62[4];
              int64x2_t v83 = v62[5];
              int64x2_t v84 = v62[6];
              int64x2_t v85 = v62[7];
              uint64_t v67 = 2 * a11;
              *(int64x2_t *)uint64_t v64 = vzip1q_s64(*v62, v79);
              *(int64x2_t *)(v64 + 16) = vzip1q_s64(v82, v83);
              uint64_t v86 = (int64x2_t *)(v64 + v360);
              uint64_t v25 = a11;
              uint64_t v87 = (int64x2_t *)(v64 + a11);
              *uint64_t v87 = vzip2q_s64(v78, v79);
              v87[1] = vzip2q_s64(v82, v83);
              int64x2_t *v86 = vzip1q_s64(v80, v81);
              v86[1] = vzip1q_s64(v84, v85);
              unsigned int v88 = (int64x2_t *)(v64 + v360 + a11);
              int64x2_t *v88 = vzip2q_s64(v80, v81);
              v88[1] = vzip2q_s64(v84, v85);
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32((const float *)v62->i32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                *int v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v360);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v359);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v360);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v359);
                _OWORD *v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v89 = (uint64_t)v62->i64 + v68;
            uint64_t v90 = v64 + v362;
            unsigned int v91 = v63[1];
            if (v91 == 127)
            {
              int64x2_t v100 = *(int64x2_t *)v89;
              int64x2_t v101 = *(int64x2_t *)(v89 + 16);
              int64x2_t v102 = *(int64x2_t *)(v89 + 32);
              int64x2_t v103 = *(int64x2_t *)(v89 + 48);
              int64x2_t v104 = *(int64x2_t *)(v89 + 64);
              int64x2_t v105 = *(int64x2_t *)(v89 + 80);
              int64x2_t v106 = *(int64x2_t *)(v89 + 96);
              int64x2_t v107 = *(int64x2_t *)(v89 + 112);
              *(int64x2_t *)uint64_t v90 = vzip1q_s64(*(int64x2_t *)v89, v101);
              *(int64x2_t *)(v90 + 16) = vzip1q_s64(v104, v105);
              uint64_t v108 = (int64x2_t *)(v90 + v67);
              BOOL v109 = (int64x2_t *)(v90 + v25);
              int64x2_t *v109 = vzip2q_s64(v100, v101);
              v109[1] = vzip2q_s64(v104, v105);
              int64x2_t *v108 = vzip1q_s64(v102, v103);
              v108[1] = vzip1q_s64(v106, v107);
              unsigned int v110 = (int64x2_t *)(v90 + v67 + v25);
              *unsigned int v110 = vzip2q_s64(v102, v103);
              v110[1] = vzip2q_s64(v106, v107);
              uint64_t v92 = 128;
            }
            else if (v91 == 3)
            {
              float32x4_t v96 = vld1q_dup_f32((const float *)v89);
              *(float32x4_t *)uint64_t v90 = v96;
              *(float32x4_t *)(v90 + 16) = v96;
              int64x2_t v97 = (float32x4_t *)(v90 + v25);
              *int64x2_t v97 = v96;
              v97[1] = v96;
              int64x2_t v98 = (float32x4_t *)(v90 + v67);
              *int64x2_t v98 = v96;
              v98[1] = v96;
              int64x2_t v99 = (float32x4_t *)(v90 + v359);
              *int64x2_t v99 = v96;
              v99[1] = v96;
              uint64_t v92 = 4;
            }
            else if (v63[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v64 + v362), v25, v89, v91);
            }
            else
            {
              uint64_t v92 = 0;
              *(_OWORD *)uint64_t v90 = 0u;
              *(_OWORD *)(v90 + 16) = 0u;
              int16x4_t v93 = (_OWORD *)(v90 + v25);
              *int16x4_t v93 = 0u;
              v93[1] = 0u;
              int64x2_t v94 = (_OWORD *)(v90 + v67);
              *int64x2_t v94 = 0u;
              v94[1] = 0u;
              int64x2_t v95 = (_OWORD *)(v90 + v359);
              *int64x2_t v95 = 0u;
              v95[1] = 0u;
            }
            uint64_t v111 = v89 + v92;
            float32x4_t v112 = (_OWORD *)(v64 + 32);
            unsigned int v113 = v63[2];
            if (v113 == 127)
            {
              int64x2_t v122 = *(int64x2_t *)v111;
              int64x2_t v123 = *(int64x2_t *)(v111 + 16);
              int64x2_t v124 = *(int64x2_t *)(v111 + 32);
              int64x2_t v125 = *(int64x2_t *)(v111 + 48);
              int64x2_t v126 = *(int64x2_t *)(v111 + 64);
              int64x2_t v127 = *(int64x2_t *)(v111 + 80);
              int64x2_t v128 = *(int64x2_t *)(v111 + 96);
              int64x2_t v129 = *(int64x2_t *)(v111 + 112);
              _OWORD *v112 = vzip1q_s64(*(int64x2_t *)v111, v123);
              *(int64x2_t *)(v64 + 48) = vzip1q_s64(v126, v127);
              uint64_t v130 = (int64x2_t *)((char *)v112 + v67);
              uint64_t v131 = (int64x2_t *)((char *)v112 + v25);
              int64x2_t *v131 = vzip2q_s64(v122, v123);
              v131[1] = vzip2q_s64(v126, v127);
              int64x2_t *v130 = vzip1q_s64(v124, v125);
              v130[1] = vzip1q_s64(v128, v129);
              uint64_t v132 = (int64x2_t *)((char *)v112 + v67 + v25);
              *uint64_t v132 = vzip2q_s64(v124, v125);
              v132[1] = vzip2q_s64(v128, v129);
              uint64_t v114 = 128;
            }
            else if (v113 == 3)
            {
              float32x4_t v118 = vld1q_dup_f32((const float *)v111);
              *(float32x4_t *)(v64 + 32) = v118;
              *(float32x4_t *)(v64 + 48) = v118;
              int64x2_t v119 = (float32x4_t *)((char *)v112 + v25);
              *int64x2_t v119 = v118;
              v119[1] = v118;
              int64x2_t v120 = (float32x4_t *)((char *)v112 + v67);
              *int64x2_t v120 = v118;
              v120[1] = v118;
              int64x2_t v121 = (float32x4_t *)((char *)v112 + v359);
              *int64x2_t v121 = v118;
              v121[1] = v118;
              uint64_t v114 = 4;
            }
            else if (v63[2])
            {
              uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v112, v25, v111, v113);
            }
            else
            {
              uint64_t v114 = 0;
              _OWORD *v112 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              BOOL v115 = (_OWORD *)((char *)v112 + v25);
              *BOOL v115 = 0u;
              v115[1] = 0u;
              int64x2_t v116 = (_OWORD *)((char *)v112 + v67);
              *int64x2_t v116 = 0u;
              v116[1] = 0u;
              int64x2_t v117 = (_OWORD *)((char *)v112 + v359);
              *int64x2_t v117 = 0u;
              v117[1] = 0u;
            }
            uint64_t v133 = v111 + v114;
            float32x4_t v134 = (_OWORD *)(v90 + 32);
            unsigned int v135 = v63[3];
            if (v135 == 127)
            {
              int64x2_t v144 = *(int64x2_t *)v133;
              int64x2_t v145 = *(int64x2_t *)(v133 + 16);
              int64x2_t v146 = *(int64x2_t *)(v133 + 32);
              int64x2_t v147 = *(int64x2_t *)(v133 + 48);
              int64x2_t v148 = *(int64x2_t *)(v133 + 64);
              int64x2_t v149 = *(int64x2_t *)(v133 + 80);
              int64x2_t v150 = *(int64x2_t *)(v133 + 96);
              int64x2_t v151 = *(int64x2_t *)(v133 + 112);
              _OWORD *v134 = vzip1q_s64(*(int64x2_t *)v133, v145);
              *(int64x2_t *)(v90 + 48) = vzip1q_s64(v148, v149);
              uint64_t v152 = (int64x2_t *)((char *)v134 + v67);
              int16x4_t v153 = (int64x2_t *)((char *)v134 + v25);
              int64x2_t *v153 = vzip2q_s64(v144, v145);
              v153[1] = vzip2q_s64(v148, v149);
              int64x2_t *v152 = vzip1q_s64(v146, v147);
              v152[1] = vzip1q_s64(v150, v151);
              int16x4_t v154 = (int64x2_t *)((char *)v134 + v67 + v25);
              *int16x4_t v154 = vzip2q_s64(v146, v147);
              v154[1] = vzip2q_s64(v150, v151);
              uint64_t v136 = 128;
            }
            else if (v135 == 3)
            {
              float32x4_t v140 = vld1q_dup_f32((const float *)v133);
              *(float32x4_t *)(v90 + 32) = v140;
              *(float32x4_t *)(v90 + 48) = v140;
              int64x2_t v141 = (float32x4_t *)((char *)v134 + v25);
              *int64x2_t v141 = v140;
              v141[1] = v140;
              int64x2_t v142 = (float32x4_t *)((char *)v134 + v67);
              *int64x2_t v142 = v140;
              v142[1] = v140;
              int64x2_t v143 = (float32x4_t *)((char *)v134 + v359);
              *int64x2_t v143 = v140;
              v143[1] = v140;
              uint64_t v136 = 4;
            }
            else if (v63[3])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              _OWORD *v134 = 0u;
              *(_OWORD *)(v90 + 48) = 0u;
              char v137 = (_OWORD *)((char *)v134 + v25);
              *char v137 = 0u;
              v137[1] = 0u;
              int64x2_t v138 = (_OWORD *)((char *)v134 + v67);
              *int64x2_t v138 = 0u;
              v138[1] = 0u;
              int64x2_t v139 = (_OWORD *)((char *)v134 + v359);
              *int64x2_t v139 = 0u;
              v139[1] = 0u;
            }
            uint64_t v155 = v133 + v136;
            uint64_t v156 = v64 + v361;
            unsigned int v157 = v63[4];
            if (v157 == 127)
            {
              int64x2_t v166 = *(int64x2_t *)v155;
              int64x2_t v167 = *(int64x2_t *)(v155 + 16);
              int64x2_t v168 = *(int64x2_t *)(v155 + 32);
              int64x2_t v169 = *(int64x2_t *)(v155 + 48);
              int64x2_t v170 = *(int64x2_t *)(v155 + 64);
              int64x2_t v171 = *(int64x2_t *)(v155 + 80);
              int64x2_t v172 = *(int64x2_t *)(v155 + 96);
              int64x2_t v173 = *(int64x2_t *)(v155 + 112);
              *(int64x2_t *)uint64_t v156 = vzip1q_s64(*(int64x2_t *)v155, v167);
              *(int64x2_t *)(v156 + 16) = vzip1q_s64(v170, v171);
              uint64_t v174 = (int64x2_t *)(v156 + v67);
              uint64_t v175 = (int64x2_t *)(v156 + v25);
              int64x2_t *v175 = vzip2q_s64(v166, v167);
              v175[1] = vzip2q_s64(v170, v171);
              int64x2_t *v174 = vzip1q_s64(v168, v169);
              v174[1] = vzip1q_s64(v172, v173);
              int16x4_t v176 = (int64x2_t *)(v156 + v67 + v25);
              *int16x4_t v176 = vzip2q_s64(v168, v169);
              v176[1] = vzip2q_s64(v172, v173);
              uint64_t v158 = 128;
            }
            else if (v157 == 3)
            {
              float32x4_t v162 = vld1q_dup_f32((const float *)v155);
              *(float32x4_t *)uint64_t v156 = v162;
              *(float32x4_t *)(v156 + 16) = v162;
              int64x2_t v163 = (float32x4_t *)(v156 + v25);
              *int64x2_t v163 = v162;
              v163[1] = v162;
              int64x2_t v164 = (float32x4_t *)(v156 + v67);
              *int64x2_t v164 = v162;
              v164[1] = v162;
              int64x2_t v165 = (float32x4_t *)(v156 + v359);
              *int64x2_t v165 = v162;
              v165[1] = v162;
              uint64_t v158 = 4;
            }
            else if (v63[4])
            {
              uint64_t v158 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v64 + v361), v25, v155, v157);
            }
            else
            {
              uint64_t v158 = 0;
              *(_OWORD *)uint64_t v156 = 0u;
              *(_OWORD *)(v156 + 16) = 0u;
              int8x8_t v159 = (_OWORD *)(v156 + v25);
              *int8x8_t v159 = 0u;
              v159[1] = 0u;
              int64x2_t v160 = (_OWORD *)(v156 + v67);
              *int64x2_t v160 = 0u;
              v160[1] = 0u;
              int64x2_t v161 = (_OWORD *)(v156 + v359);
              *int64x2_t v161 = 0u;
              v161[1] = 0u;
            }
            uint64_t v177 = v155 + v158;
            uint64_t v178 = v64 + 12 * a11;
            unsigned int v179 = v63[5];
            if (v179 == 127)
            {
              int64x2_t v188 = *(int64x2_t *)v177;
              int64x2_t v189 = *(int64x2_t *)(v177 + 16);
              int64x2_t v190 = *(int64x2_t *)(v177 + 32);
              int64x2_t v191 = *(int64x2_t *)(v177 + 48);
              int64x2_t v192 = *(int64x2_t *)(v177 + 64);
              int64x2_t v193 = *(int64x2_t *)(v177 + 80);
              int64x2_t v194 = *(int64x2_t *)(v177 + 96);
              int64x2_t v195 = *(int64x2_t *)(v177 + 112);
              *(int64x2_t *)uint64_t v178 = vzip1q_s64(*(int64x2_t *)v177, v189);
              *(int64x2_t *)(v178 + 16) = vzip1q_s64(v192, v193);
              uint64_t v196 = (int64x2_t *)(v178 + v67);
              int16x4_t v197 = (int64x2_t *)(v178 + v25);
              int64x2_t *v197 = vzip2q_s64(v188, v189);
              v197[1] = vzip2q_s64(v192, v193);
              int64x2_t *v196 = vzip1q_s64(v190, v191);
              v196[1] = vzip1q_s64(v194, v195);
              int16x4_t v198 = (int64x2_t *)(v178 + v67 + v25);
              *int16x4_t v198 = vzip2q_s64(v190, v191);
              v198[1] = vzip2q_s64(v194, v195);
              uint64_t v180 = 128;
            }
            else if (v179 == 3)
            {
              float32x4_t v184 = vld1q_dup_f32((const float *)v177);
              *(float32x4_t *)uint64_t v178 = v184;
              *(float32x4_t *)(v178 + 16) = v184;
              int64x2_t v185 = (float32x4_t *)(v178 + v25);
              *int64x2_t v185 = v184;
              v185[1] = v184;
              int64x2_t v186 = (float32x4_t *)(v178 + v67);
              *int64x2_t v186 = v184;
              v186[1] = v184;
              int64x2_t v187 = (float32x4_t *)(v178 + v359);
              *int64x2_t v187 = v184;
              v187[1] = v184;
              uint64_t v180 = 4;
            }
            else if (v63[5])
            {
              uint64_t v180 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v178, v25, v177, v179);
            }
            else
            {
              uint64_t v180 = 0;
              *(_OWORD *)uint64_t v178 = 0u;
              *(_OWORD *)(v178 + 16) = 0u;
              unsigned int v181 = (_OWORD *)(v178 + v25);
              *unsigned int v181 = 0u;
              v181[1] = 0u;
              int64x2_t v182 = (_OWORD *)(v178 + v67);
              *int64x2_t v182 = 0u;
              v182[1] = 0u;
              int64x2_t v183 = (_OWORD *)(v178 + v359);
              *int64x2_t v183 = 0u;
              v183[1] = 0u;
            }
            uint64_t v199 = v177 + v180;
            float32x4_t v200 = (_OWORD *)(v156 + 32);
            unsigned int v201 = v63[6];
            if (v201 == 127)
            {
              int64x2_t v210 = *(int64x2_t *)v199;
              int64x2_t v211 = *(int64x2_t *)(v199 + 16);
              int64x2_t v212 = *(int64x2_t *)(v199 + 32);
              int64x2_t v213 = *(int64x2_t *)(v199 + 48);
              int64x2_t v214 = *(int64x2_t *)(v199 + 64);
              int64x2_t v215 = *(int64x2_t *)(v199 + 80);
              int64x2_t v216 = *(int64x2_t *)(v199 + 96);
              int64x2_t v217 = *(int64x2_t *)(v199 + 112);
              _OWORD *v200 = vzip1q_s64(*(int64x2_t *)v199, v211);
              *(int64x2_t *)(v156 + 48) = vzip1q_s64(v214, v215);
              uint64_t v218 = (int64x2_t *)((char *)v200 + v67);
              uint64_t v219 = (int64x2_t *)((char *)v200 + v25);
              int64x2_t *v219 = vzip2q_s64(v210, v211);
              v219[1] = vzip2q_s64(v214, v215);
              int64x2_t *v218 = vzip1q_s64(v212, v213);
              v218[1] = vzip1q_s64(v216, v217);
              unsigned int v220 = (int64x2_t *)((char *)v200 + v67 + v25);
              *unsigned int v220 = vzip2q_s64(v212, v213);
              v220[1] = vzip2q_s64(v216, v217);
              uint64_t v202 = 128;
            }
            else if (v201 == 3)
            {
              float32x4_t v206 = vld1q_dup_f32((const float *)v199);
              *(float32x4_t *)(v156 + 32) = v206;
              *(float32x4_t *)(v156 + 48) = v206;
              int64x2_t v207 = (float32x4_t *)((char *)v200 + v25);
              *int64x2_t v207 = v206;
              v207[1] = v206;
              int64x2_t v208 = (float32x4_t *)((char *)v200 + v67);
              *int64x2_t v208 = v206;
              v208[1] = v206;
              int64x2_t v209 = (float32x4_t *)((char *)v200 + v359);
              *int64x2_t v209 = v206;
              v209[1] = v206;
              uint64_t v202 = 4;
            }
            else if (v63[6])
            {
              uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v200, v25, v199, v201);
            }
            else
            {
              uint64_t v202 = 0;
              _OWORD *v200 = 0u;
              *(_OWORD *)(v156 + 48) = 0u;
              uint64_t v203 = (_OWORD *)((char *)v200 + v25);
              *uint64_t v203 = 0u;
              v203[1] = 0u;
              int64x2_t v204 = (_OWORD *)((char *)v200 + v67);
              *int64x2_t v204 = 0u;
              v204[1] = 0u;
              int64x2_t v205 = (_OWORD *)((char *)v200 + v359);
              *int64x2_t v205 = 0u;
              v205[1] = 0u;
            }
            unsigned int v32 = v30 + 1;
            uint64_t v221 = v199 + v202;
            float32x4_t v222 = (_OWORD *)(v178 + 32);
            unsigned int v223 = v63[7];
            if (v223 == 127)
            {
              int64x2_t v228 = *(int64x2_t *)v221;
              int64x2_t v229 = *(int64x2_t *)(v221 + 16);
              int64x2_t v230 = *(int64x2_t *)(v221 + 32);
              int64x2_t v231 = *(int64x2_t *)(v221 + 48);
              int64x2_t v232 = *(int64x2_t *)(v221 + 64);
              int64x2_t v233 = *(int64x2_t *)(v221 + 80);
              int64x2_t v234 = *(int64x2_t *)(v221 + 96);
              int64x2_t v235 = *(int64x2_t *)(v221 + 112);
              _OWORD *v222 = vzip1q_s64(*(int64x2_t *)v221, v229);
              *(int64x2_t *)(v178 + 48) = vzip1q_s64(v232, v233);
              uint64_t v236 = (int64x2_t *)((char *)v222 + v67);
              uint64_t v237 = (int64x2_t *)((char *)v222 + v25);
              *uint64_t v237 = vzip2q_s64(v228, v229);
              v237[1] = vzip2q_s64(v232, v233);
              *uint64_t v236 = vzip1q_s64(v230, v231);
              v236[1] = vzip1q_s64(v234, v235);
              int v238 = (int64x2_t *)((char *)v222 + v67 + v25);
              *int v238 = vzip2q_s64(v230, v231);
              v238[1] = vzip2q_s64(v234, v235);
              a7 = v368;
              uint64_t v16 = v378;
              goto LABEL_27;
            }
            uint64_t v16 = v378;
            if (v223 == 3)
            {
              float32x4_t v224 = vld1q_dup_f32((const float *)v221);
              *(float32x4_t *)(v178 + 32) = v224;
              *(float32x4_t *)(v178 + 48) = v224;
LABEL_148:
              BOOL v225 = (float32x4_t *)((char *)v222 + v25);
              *BOOL v225 = v224;
              v225[1] = v224;
              int64x2_t v226 = (float32x4_t *)((char *)v222 + v67);
              *int64x2_t v226 = v224;
              v226[1] = v224;
              int64x2_t v227 = (float32x4_t *)((char *)v222 + v359);
              *int64x2_t v227 = v224;
              v227[1] = v224;
            }
            else
            {
              if (!v223)
              {
                float32x4_t v224 = 0uLL;
                _OWORD *v222 = 0u;
                *(_OWORD *)(v178 + 48) = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v222, v25, v221, v223);
            }
            a7 = v368;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v378;
          block[5] = v62;
          char v389 = v37;
          char v390 = v381;
          unsigned int v385 = v363;
          unsigned int v386 = v35 - v33;
          block[6] = v63;
          uint64_t v383 = v64;
          uint64_t v25 = a11;
          uint64_t v384 = a11;
          unsigned int v387 = v375;
          unsigned int v388 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v378 + 8) + 7384), block);
            a7 = v368;
            uint64_t v16 = v378;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            unsigned int v72 = *v63;
            a7 = v368;
            if (v72 == 127)
            {
              int64x2_t v239 = *v62;
              int64x2_t v240 = v62[1];
              int64x2_t v241 = v62[2];
              int64x2_t v242 = v62[3];
              int64x2_t v243 = v62[4];
              int64x2_t v244 = v62[5];
              int64x2_t v245 = v62[6];
              int64x2_t v246 = v62[7];
              int64x2_t v392 = vzip1q_s64(*v62, v240);
              int64x2_t v393 = vzip1q_s64(v243, v244);
              int64x2_t v396 = vzip2q_s64(v239, v240);
              int64x2_t v397 = vzip2q_s64(v243, v244);
              int64x2_t v400 = vzip1q_s64(v241, v242);
              int64x2_t v401 = vzip1q_s64(v245, v246);
              int64x2_t v404 = vzip2q_s64(v241, v242);
              int64x2_t v405 = vzip2q_s64(v245, v246);
              uint64_t v73 = 128;
            }
            else if (v72 == 3)
            {
              float32x4_t v247 = vld1q_dup_f32((const float *)v62->i32);
              int64x2_t v392 = (int64x2_t)v247;
              int64x2_t v393 = (int64x2_t)v247;
              int64x2_t v396 = (int64x2_t)v247;
              int64x2_t v397 = (int64x2_t)v247;
              int64x2_t v400 = (int64x2_t)v247;
              int64x2_t v401 = (int64x2_t)v247;
              int64x2_t v404 = (int64x2_t)v247;
              int64x2_t v405 = (int64x2_t)v247;
              uint64_t v73 = 4;
            }
            else if (*v63)
            {
              uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v392, 64, (uint64_t)v62, v72);
            }
            else
            {
              uint64_t v73 = 0;
              int64x2_t v393 = 0u;
              int64x2_t v392 = 0u;
              int64x2_t v396 = 0u;
              int64x2_t v397 = 0u;
              int64x2_t v400 = 0u;
              int64x2_t v401 = 0u;
              int64x2_t v404 = 0u;
              int64x2_t v405 = 0u;
            }
            uint64_t v248 = (uint64_t)v62->i64 + v73;
            unsigned int v249 = v63[1];
            if (v249 == 127)
            {
              int64x2_t v251 = *(int64x2_t *)v248;
              int64x2_t v252 = *(int64x2_t *)(v248 + 16);
              int64x2_t v253 = *(int64x2_t *)(v248 + 32);
              int64x2_t v254 = *(int64x2_t *)(v248 + 48);
              int64x2_t v255 = *(int64x2_t *)(v248 + 64);
              int64x2_t v256 = *(int64x2_t *)(v248 + 80);
              int64x2_t v257 = *(int64x2_t *)(v248 + 96);
              int64x2_t v258 = *(int64x2_t *)(v248 + 112);
              int64x2_t v408 = vzip1q_s64(*(int64x2_t *)v248, v252);
              int64x2_t v409 = vzip1q_s64(v255, v256);
              int64x2_t v412 = vzip2q_s64(v251, v252);
              int64x2_t v413 = vzip2q_s64(v255, v256);
              int64x2_t v416 = vzip1q_s64(v253, v254);
              int64x2_t v417 = vzip1q_s64(v257, v258);
              int64x2_t v420 = vzip2q_s64(v253, v254);
              int64x2_t v421 = vzip2q_s64(v257, v258);
              uint64_t v250 = 128;
            }
            else if (v249 == 3)
            {
              float32x4_t v259 = vld1q_dup_f32((const float *)v248);
              int64x2_t v408 = (int64x2_t)v259;
              int64x2_t v409 = (int64x2_t)v259;
              int64x2_t v412 = (int64x2_t)v259;
              int64x2_t v413 = (int64x2_t)v259;
              int64x2_t v416 = (int64x2_t)v259;
              int64x2_t v417 = (int64x2_t)v259;
              int64x2_t v420 = (int64x2_t)v259;
              int64x2_t v421 = (int64x2_t)v259;
              uint64_t v250 = 4;
            }
            else if (v63[1])
            {
              uint64_t v250 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v408, 64, v248, v249);
            }
            else
            {
              uint64_t v250 = 0;
              int64x2_t v408 = 0u;
              int64x2_t v409 = 0u;
              int64x2_t v412 = 0u;
              int64x2_t v413 = 0u;
              int64x2_t v416 = 0u;
              int64x2_t v417 = 0u;
              int64x2_t v420 = 0u;
              int64x2_t v421 = 0u;
            }
            uint64_t v260 = v248 + v250;
            unsigned int v261 = v63[2];
            if (v261 == 127)
            {
              int64x2_t v263 = *(int64x2_t *)v260;
              int64x2_t v264 = *(int64x2_t *)(v260 + 16);
              int64x2_t v265 = *(int64x2_t *)(v260 + 32);
              int64x2_t v266 = *(int64x2_t *)(v260 + 48);
              int64x2_t v267 = *(int64x2_t *)(v260 + 64);
              int64x2_t v268 = *(int64x2_t *)(v260 + 80);
              int64x2_t v269 = *(int64x2_t *)(v260 + 96);
              int64x2_t v270 = *(int64x2_t *)(v260 + 112);
              int64x2_t v394 = vzip1q_s64(*(int64x2_t *)v260, v264);
              int64x2_t v395 = vzip1q_s64(v267, v268);
              int64x2_t v398 = vzip2q_s64(v263, v264);
              int64x2_t v399 = vzip2q_s64(v267, v268);
              int64x2_t v402 = vzip1q_s64(v265, v266);
              int64x2_t v403 = vzip1q_s64(v269, v270);
              int64x2_t v406 = vzip2q_s64(v265, v266);
              int64x2_t v407 = vzip2q_s64(v269, v270);
              uint64_t v262 = 128;
            }
            else if (v261 == 3)
            {
              float32x4_t v271 = vld1q_dup_f32((const float *)v260);
              int64x2_t v394 = (int64x2_t)v271;
              int64x2_t v395 = (int64x2_t)v271;
              int64x2_t v398 = (int64x2_t)v271;
              int64x2_t v399 = (int64x2_t)v271;
              int64x2_t v402 = (int64x2_t)v271;
              int64x2_t v403 = (int64x2_t)v271;
              int64x2_t v406 = (int64x2_t)v271;
              int64x2_t v407 = (int64x2_t)v271;
              uint64_t v262 = 4;
            }
            else if (v63[2])
            {
              uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 64, v260, v261);
            }
            else
            {
              uint64_t v262 = 0;
              int64x2_t v394 = 0u;
              int64x2_t v395 = 0u;
              int64x2_t v398 = 0u;
              int64x2_t v399 = 0u;
              int64x2_t v402 = 0u;
              int64x2_t v403 = 0u;
              int64x2_t v406 = 0u;
              int64x2_t v407 = 0u;
            }
            uint64_t v272 = v260 + v262;
            unsigned int v273 = v63[3];
            if (v273 == 127)
            {
              int64x2_t v275 = *(int64x2_t *)v272;
              int64x2_t v276 = *(int64x2_t *)(v272 + 16);
              int64x2_t v277 = *(int64x2_t *)(v272 + 32);
              int64x2_t v278 = *(int64x2_t *)(v272 + 48);
              int64x2_t v279 = *(int64x2_t *)(v272 + 64);
              int64x2_t v280 = *(int64x2_t *)(v272 + 80);
              int64x2_t v281 = *(int64x2_t *)(v272 + 96);
              int64x2_t v282 = *(int64x2_t *)(v272 + 112);
              int64x2_t v410 = vzip1q_s64(*(int64x2_t *)v272, v276);
              int64x2_t v411 = vzip1q_s64(v279, v280);
              int64x2_t v414 = vzip2q_s64(v275, v276);
              int64x2_t v415 = vzip2q_s64(v279, v280);
              int64x2_t v418 = vzip1q_s64(v277, v278);
              int64x2_t v419 = vzip1q_s64(v281, v282);
              int64x2_t v422 = vzip2q_s64(v277, v278);
              int64x2_t v423 = vzip2q_s64(v281, v282);
              uint64_t v274 = 128;
            }
            else if (v273 == 3)
            {
              float32x4_t v283 = vld1q_dup_f32((const float *)v272);
              int64x2_t v410 = (int64x2_t)v283;
              int64x2_t v411 = (int64x2_t)v283;
              int64x2_t v414 = (int64x2_t)v283;
              int64x2_t v415 = (int64x2_t)v283;
              int64x2_t v418 = (int64x2_t)v283;
              int64x2_t v419 = (int64x2_t)v283;
              int64x2_t v422 = (int64x2_t)v283;
              int64x2_t v423 = (int64x2_t)v283;
              uint64_t v274 = 4;
            }
            else if (v63[3])
            {
              uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v410, 64, v272, v273);
            }
            else
            {
              uint64_t v274 = 0;
              int64x2_t v410 = 0u;
              int64x2_t v411 = 0u;
              int64x2_t v414 = 0u;
              int64x2_t v415 = 0u;
              int64x2_t v418 = 0u;
              int64x2_t v419 = 0u;
              int64x2_t v422 = 0u;
              int64x2_t v423 = 0u;
            }
            uint64_t v284 = v272 + v274;
            unsigned int v285 = v63[4];
            if (v285 == 127)
            {
              int64x2_t v287 = *(int64x2_t *)v284;
              int64x2_t v288 = *(int64x2_t *)(v284 + 16);
              int64x2_t v289 = *(int64x2_t *)(v284 + 32);
              int64x2_t v290 = *(int64x2_t *)(v284 + 48);
              int64x2_t v291 = *(int64x2_t *)(v284 + 64);
              int64x2_t v292 = *(int64x2_t *)(v284 + 80);
              int64x2_t v293 = *(int64x2_t *)(v284 + 96);
              int64x2_t v294 = *(int64x2_t *)(v284 + 112);
              int64x2_t v424 = vzip1q_s64(*(int64x2_t *)v284, v288);
              int64x2_t v425 = vzip1q_s64(v291, v292);
              int64x2_t v428 = vzip2q_s64(v287, v288);
              int64x2_t v429 = vzip2q_s64(v291, v292);
              int64x2_t v432 = vzip1q_s64(v289, v290);
              int64x2_t v433 = vzip1q_s64(v293, v294);
              int64x2_t v436 = vzip2q_s64(v289, v290);
              int64x2_t v437 = vzip2q_s64(v293, v294);
              uint64_t v286 = 128;
            }
            else if (v285 == 3)
            {
              float32x4_t v295 = vld1q_dup_f32((const float *)v284);
              int64x2_t v424 = (int64x2_t)v295;
              int64x2_t v425 = (int64x2_t)v295;
              int64x2_t v428 = (int64x2_t)v295;
              int64x2_t v429 = (int64x2_t)v295;
              int64x2_t v432 = (int64x2_t)v295;
              int64x2_t v433 = (int64x2_t)v295;
              int64x2_t v436 = (int64x2_t)v295;
              int64x2_t v437 = (int64x2_t)v295;
              uint64_t v286 = 4;
            }
            else if (v63[4])
            {
              uint64_t v286 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v424, 64, v284, v285);
            }
            else
            {
              uint64_t v286 = 0;
              int64x2_t v424 = 0u;
              int64x2_t v425 = 0u;
              int64x2_t v428 = 0u;
              int64x2_t v429 = 0u;
              int64x2_t v432 = 0u;
              int64x2_t v433 = 0u;
              int64x2_t v436 = 0u;
              int64x2_t v437 = 0u;
            }
            uint64_t v296 = v284 + v286;
            unsigned int v297 = v63[5];
            if (v297 == 127)
            {
              int64x2_t v299 = *(int64x2_t *)v296;
              int64x2_t v300 = *(int64x2_t *)(v296 + 16);
              int64x2_t v301 = *(int64x2_t *)(v296 + 32);
              int64x2_t v302 = *(int64x2_t *)(v296 + 48);
              int64x2_t v303 = *(int64x2_t *)(v296 + 64);
              int64x2_t v304 = *(int64x2_t *)(v296 + 80);
              int64x2_t v305 = *(int64x2_t *)(v296 + 96);
              int64x2_t v306 = *(int64x2_t *)(v296 + 112);
              int64x2_t v440 = vzip1q_s64(*(int64x2_t *)v296, v300);
              int64x2_t v441 = vzip1q_s64(v303, v304);
              int64x2_t v444 = vzip2q_s64(v299, v300);
              int64x2_t v445 = vzip2q_s64(v303, v304);
              int64x2_t v448 = vzip1q_s64(v301, v302);
              int64x2_t v449 = vzip1q_s64(v305, v306);
              int64x2_t v452 = vzip2q_s64(v301, v302);
              int64x2_t v453 = vzip2q_s64(v305, v306);
              uint64_t v298 = 128;
            }
            else if (v297 == 3)
            {
              float32x4_t v307 = vld1q_dup_f32((const float *)v296);
              int64x2_t v440 = (int64x2_t)v307;
              int64x2_t v441 = (int64x2_t)v307;
              int64x2_t v444 = (int64x2_t)v307;
              int64x2_t v445 = (int64x2_t)v307;
              int64x2_t v448 = (int64x2_t)v307;
              int64x2_t v449 = (int64x2_t)v307;
              int64x2_t v452 = (int64x2_t)v307;
              int64x2_t v453 = (int64x2_t)v307;
              uint64_t v298 = 4;
            }
            else if (v63[5])
            {
              uint64_t v298 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v440, 64, v296, v297);
            }
            else
            {
              uint64_t v298 = 0;
              int64x2_t v440 = 0u;
              int64x2_t v441 = 0u;
              int64x2_t v444 = 0u;
              int64x2_t v445 = 0u;
              int64x2_t v448 = 0u;
              int64x2_t v449 = 0u;
              int64x2_t v452 = 0u;
              int64x2_t v453 = 0u;
            }
            uint64_t v308 = v296 + v298;
            unsigned int v309 = v63[6];
            if (v309 == 127)
            {
              int64x2_t v311 = *(int64x2_t *)v308;
              int64x2_t v312 = *(int64x2_t *)(v308 + 16);
              int64x2_t v313 = *(int64x2_t *)(v308 + 32);
              int64x2_t v314 = *(int64x2_t *)(v308 + 48);
              int64x2_t v315 = *(int64x2_t *)(v308 + 64);
              int64x2_t v316 = *(int64x2_t *)(v308 + 80);
              int64x2_t v317 = *(int64x2_t *)(v308 + 96);
              int64x2_t v318 = *(int64x2_t *)(v308 + 112);
              int64x2_t v426 = vzip1q_s64(*(int64x2_t *)v308, v312);
              int64x2_t v427 = vzip1q_s64(v315, v316);
              int64x2_t v430 = vzip2q_s64(v311, v312);
              int64x2_t v431 = vzip2q_s64(v315, v316);
              int64x2_t v434 = vzip1q_s64(v313, v314);
              int64x2_t v435 = vzip1q_s64(v317, v318);
              int64x2_t v438 = vzip2q_s64(v313, v314);
              int64x2_t v439 = vzip2q_s64(v317, v318);
              uint64_t v310 = 128;
            }
            else if (v309 == 3)
            {
              float32x4_t v319 = vld1q_dup_f32((const float *)v308);
              int64x2_t v426 = (int64x2_t)v319;
              int64x2_t v427 = (int64x2_t)v319;
              int64x2_t v430 = (int64x2_t)v319;
              int64x2_t v431 = (int64x2_t)v319;
              int64x2_t v434 = (int64x2_t)v319;
              int64x2_t v435 = (int64x2_t)v319;
              int64x2_t v438 = (int64x2_t)v319;
              int64x2_t v439 = (int64x2_t)v319;
              uint64_t v310 = 4;
            }
            else if (v63[6])
            {
              uint64_t v310 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v426, 64, v308, v309);
            }
            else
            {
              uint64_t v310 = 0;
              int64x2_t v426 = 0u;
              int64x2_t v427 = 0u;
              int64x2_t v430 = 0u;
              int64x2_t v431 = 0u;
              int64x2_t v434 = 0u;
              int64x2_t v435 = 0u;
              int64x2_t v438 = 0u;
              int64x2_t v439 = 0u;
            }
            uint64_t v320 = v308 + v310;
            unsigned int v321 = v63[7];
            if (v321 == 127)
            {
              int64x2_t v322 = *(int64x2_t *)v320;
              int64x2_t v323 = *(int64x2_t *)(v320 + 16);
              int64x2_t v324 = *(int64x2_t *)(v320 + 32);
              int64x2_t v325 = *(int64x2_t *)(v320 + 48);
              int64x2_t v326 = *(int64x2_t *)(v320 + 64);
              int64x2_t v327 = *(int64x2_t *)(v320 + 80);
              int64x2_t v328 = *(int64x2_t *)(v320 + 96);
              int64x2_t v329 = *(int64x2_t *)(v320 + 112);
              int64x2_t v442 = vzip1q_s64(*(int64x2_t *)v320, v323);
              int64x2_t v443 = vzip1q_s64(v326, v327);
              int64x2_t v446 = vzip2q_s64(v322, v323);
              int64x2_t v447 = vzip2q_s64(v326, v327);
              int64x2_t v450 = vzip1q_s64(v324, v325);
              int64x2_t v451 = vzip1q_s64(v328, v329);
              int64x2_t v454 = vzip2q_s64(v324, v325);
              int64x2_t v455 = vzip2q_s64(v328, v329);
              uint64_t v16 = v378;
              unsigned int v32 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v378;
              unsigned int v32 = v30 + 1;
              if (v321 == 3)
              {
                float32x4_t v330 = vld1q_dup_f32((const float *)v320);
                int64x2_t v442 = (int64x2_t)v330;
                int64x2_t v443 = (int64x2_t)v330;
                int64x2_t v446 = (int64x2_t)v330;
                int64x2_t v447 = (int64x2_t)v330;
                int64x2_t v450 = (int64x2_t)v330;
                int64x2_t v451 = (int64x2_t)v330;
                int64x2_t v454 = (int64x2_t)v330;
                int64x2_t v455 = (int64x2_t)v330;
              }
              else if (v321)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v442, 64, v320, v321);
              }
              else
              {
                int64x2_t v442 = 0u;
                int64x2_t v443 = 0u;
                int64x2_t v446 = 0u;
                int64x2_t v447 = 0u;
                int64x2_t v450 = 0u;
                int64x2_t v451 = 0u;
                int64x2_t v454 = 0u;
                int64x2_t v455 = 0u;
              }
            }
            unint64_t v331 = v387;
            if (v387)
            {
              unint64_t v332 = 0;
              int64x2_t v333 = &v392.i8[64 * (unint64_t)v385 + 4 * v386];
              unsigned int v334 = v388;
              do
              {
                if (v334)
                {
                  uint64_t v335 = 0;
                  uint64_t v336 = v383 + v384 * v332;
                  do
                  {
                    *(unsigned char *)(v336 + v335) = v333[v335];
                    ++v335;
                    unsigned int v334 = v388;
                  }
                  while (4 * (unint64_t)v388 > v335);
                  unint64_t v331 = v387;
                }
                ++v332;
                v333 += 64;
              }
              while (v332 < v331);
            }
          }
LABEL_27:
          BOOL v21 = v30 == v369 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v358;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v456 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v377 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v356 = a8 + a10 - 1;
  unsigned int v358 = v356 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v371 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v358)
  {
    unsigned int v369 = a7 + a9 - 1;
    unsigned int v355 = a7 >> 4;
    if (a7 >> 4 <= v369 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v352 = a5 - 1;
      unsigned int v380 = (a5 - 1) >> 4;
      int v379 = ((a5 - 1) & 0xF) + 1;
      int v353 = ((a6 - 1) & 0xF) + 1;
      unsigned int v354 = (a6 - 1) >> 4;
      uint64_t v361 = 8 * a11;
      uint64_t v362 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v367 = v27.i32[0] | v27.i32[1];
      BOOL v365 = v27.i32[1] != 0;
      int8x8_t v366 = v27;
      BOOL v364 = v27.i32[0] != 0;
      unint64_t v351 = 8 * v19 * (unint64_t)v18;
      unsigned int v368 = a7;
      uint64_t v378 = v16;
      uint64_t v359 = 3 * a11;
      uint64_t v360 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v377) {
          int v29 = v377;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v355;
        if (v356 < v28) {
          unsigned int v28 = v356;
        }
        unsigned int v376 = 16 * v17;
        int v363 = v29 - 16 * v17;
        int v375 = v28 - v29 + 1;
        int v31 = v353;
        if (v17 != v354) {
          int v31 = 16;
        }
        unsigned int v381 = v31;
        uint64_t v374 = a2 + (v29 - v377) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v369 < v34) {
            unsigned int v34 = v369;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v380) {
            unsigned int v37 = v379;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v376 >= v377 && v33 >= a7)
          {
            int v39 = v379;
            if (v30 != v380) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v375 != v381;
          }
          if (isLevelTiled)
          {
            unsigned int v337 = 0;
            uint64_t v338 = v351 >> (*(unsigned char *)(v16 + 57) != 0);
            char v339 = 1;
            if (v338 > 127)
            {
              if (v338 > 511)
              {
                if (v338 == 512)
                {
                  unsigned int v337 = 16;
                  char v340 = 1;
                  unsigned int v341 = 16;
                }
                else
                {
                  char v340 = 1;
                  unsigned int v341 = 0;
                  if (v338 == 1024)
                  {
                    unsigned int v341 = 8;
                    unsigned int v337 = 16;
                  }
                }
              }
              else if (v338 == 128)
              {
                char v339 = 0;
                char v340 = 0;
                unsigned int v337 = 32;
                unsigned int v341 = 32;
              }
              else
              {
                char v340 = 1;
                unsigned int v341 = 0;
                if (v338 == 256)
                {
                  char v339 = 0;
                  unsigned int v341 = 16;
                  unsigned int v337 = 32;
                }
              }
            }
            else
            {
              char v340 = 1;
              unsigned int v341 = 0;
              switch(v338)
              {
                case 4:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v341 = 128;
                  unsigned int v337 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v337 = 128;
                  unsigned int v341 = 128;
                  break;
                case 16:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v341 = 64;
                  unsigned int v337 = 128;
                  break;
                case 32:
                  char v339 = 0;
                  char v340 = 0;
                  unsigned int v337 = 64;
                  unsigned int v341 = 64;
                  break;
                default:
                  if (v338 == 64)
                  {
                    char v339 = 0;
                    char v340 = 0;
                    unsigned int v341 = 32;
                    unsigned int v337 = 64;
                  }
                  break;
              }
            }
            unsigned int v342 = (v337 >> 4) - 1;
            if (v339)
            {
              unsigned int v343 = 0;
              if (v340) {
                goto LABEL_243;
              }
LABEL_232:
              unsigned int v344 = 32 - __clz(~(-1 << -(char)__clz(((v341 + 15) >> 4) - 1)));
              if (v344 | v343) {
                goto LABEL_233;
              }
LABEL_244:
              uint64_t v346 = 0;
            }
            else
            {
              unsigned int v343 = 32 - __clz(~(-1 << -(char)__clz(v342)));
              if ((v340 & 1) == 0) {
                goto LABEL_232;
              }
LABEL_243:
              unsigned int v344 = 0;
              if (!v343) {
                goto LABEL_244;
              }
LABEL_233:
              int v345 = 0;
              uint64_t v346 = 0;
              int v347 = v30 & v342;
              BOOL v348 = v343 != 0;
              BOOL v349 = v344 != 0;
              int v350 = 1;
              do
              {
                --v343;
                if (v348) {
                  v346 |= (unint64_t)(v350 & v347) << v345++;
                }
                else {
                  unsigned int v343 = 0;
                }
                --v344;
                if (v349) {
                  v346 |= (unint64_t)(v350 & v17 & ((v341 >> 4) - 1)) << v345++;
                }
                else {
                  unsigned int v344 = 0;
                }
                v350 *= 2;
                --v345;
                BOOL v349 = v344 != 0;
                BOOL v348 = v343 != 0;
              }
              while (v344 | v343);
            }
            unint64_t v48 = ((unint64_t)(v33 / v337 + v376 / v341 * ((v337 + v352) / v337)) << 14) + (v346 << 10);
            goto LABEL_59;
          }
          if (v367)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v365;
            BOOL v45 = v364;
            __int32 v46 = v366.i32[1];
            __int32 v47 = v366.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (int64x2_t *)(a3 + v48);
          if (v371)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (int64x2_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v374 + 4 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v381 > 0xF)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              int64x2_t v78 = *v62;
              int64x2_t v79 = v62[1];
              int64x2_t v80 = v62[2];
              int64x2_t v81 = v62[3];
              int64x2_t v82 = v62[4];
              int64x2_t v83 = v62[5];
              int64x2_t v84 = v62[6];
              int64x2_t v85 = v62[7];
              uint64_t v67 = 2 * a11;
              *(int64x2_t *)uint64_t v64 = vzip1q_s64(*v62, v79);
              *(int64x2_t *)(v64 + 16) = vzip1q_s64(v82, v83);
              uint64_t v86 = (int64x2_t *)(v64 + v360);
              uint64_t v25 = a11;
              uint64_t v87 = (int64x2_t *)(v64 + a11);
              *uint64_t v87 = vzip2q_s64(v78, v79);
              v87[1] = vzip2q_s64(v82, v83);
              int64x2_t *v86 = vzip1q_s64(v80, v81);
              v86[1] = vzip1q_s64(v84, v85);
              unsigned int v88 = (int64x2_t *)(v64 + v360 + a11);
              int64x2_t *v88 = vzip2q_s64(v80, v81);
              v88[1] = vzip2q_s64(v84, v85);
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32((const float *)v62->i32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                *int v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v360);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v359);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v360);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v359);
                _OWORD *v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v89 = (uint64_t)v62->i64 + v68;
            uint64_t v90 = v64 + v362;
            unsigned int v91 = v63[1];
            if (v91 == 127)
            {
              int64x2_t v100 = *(int64x2_t *)v89;
              int64x2_t v101 = *(int64x2_t *)(v89 + 16);
              int64x2_t v102 = *(int64x2_t *)(v89 + 32);
              int64x2_t v103 = *(int64x2_t *)(v89 + 48);
              int64x2_t v104 = *(int64x2_t *)(v89 + 64);
              int64x2_t v105 = *(int64x2_t *)(v89 + 80);
              int64x2_t v106 = *(int64x2_t *)(v89 + 96);
              int64x2_t v107 = *(int64x2_t *)(v89 + 112);
              *(int64x2_t *)uint64_t v90 = vzip1q_s64(*(int64x2_t *)v89, v101);
              *(int64x2_t *)(v90 + 16) = vzip1q_s64(v104, v105);
              uint64_t v108 = (int64x2_t *)(v90 + v67);
              BOOL v109 = (int64x2_t *)(v90 + v25);
              int64x2_t *v109 = vzip2q_s64(v100, v101);
              v109[1] = vzip2q_s64(v104, v105);
              int64x2_t *v108 = vzip1q_s64(v102, v103);
              v108[1] = vzip1q_s64(v106, v107);
              unsigned int v110 = (int64x2_t *)(v90 + v67 + v25);
              *unsigned int v110 = vzip2q_s64(v102, v103);
              v110[1] = vzip2q_s64(v106, v107);
              uint64_t v92 = 128;
            }
            else if (v91 == 3)
            {
              float32x4_t v96 = vld1q_dup_f32((const float *)v89);
              *(float32x4_t *)uint64_t v90 = v96;
              *(float32x4_t *)(v90 + 16) = v96;
              int64x2_t v97 = (float32x4_t *)(v90 + v25);
              *int64x2_t v97 = v96;
              v97[1] = v96;
              int64x2_t v98 = (float32x4_t *)(v90 + v67);
              *int64x2_t v98 = v96;
              v98[1] = v96;
              int64x2_t v99 = (float32x4_t *)(v90 + v359);
              *int64x2_t v99 = v96;
              v99[1] = v96;
              uint64_t v92 = 4;
            }
            else if (v63[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v64 + v362), v25, v89, v91);
            }
            else
            {
              uint64_t v92 = 0;
              *(_OWORD *)uint64_t v90 = 0u;
              *(_OWORD *)(v90 + 16) = 0u;
              int16x4_t v93 = (_OWORD *)(v90 + v25);
              *int16x4_t v93 = 0u;
              v93[1] = 0u;
              int64x2_t v94 = (_OWORD *)(v90 + v67);
              *int64x2_t v94 = 0u;
              v94[1] = 0u;
              int64x2_t v95 = (_OWORD *)(v90 + v359);
              *int64x2_t v95 = 0u;
              v95[1] = 0u;
            }
            uint64_t v111 = v89 + v92;
            float32x4_t v112 = (_OWORD *)(v64 + 32);
            unsigned int v113 = v63[2];
            if (v113 == 127)
            {
              int64x2_t v122 = *(int64x2_t *)v111;
              int64x2_t v123 = *(int64x2_t *)(v111 + 16);
              int64x2_t v124 = *(int64x2_t *)(v111 + 32);
              int64x2_t v125 = *(int64x2_t *)(v111 + 48);
              int64x2_t v126 = *(int64x2_t *)(v111 + 64);
              int64x2_t v127 = *(int64x2_t *)(v111 + 80);
              int64x2_t v128 = *(int64x2_t *)(v111 + 96);
              int64x2_t v129 = *(int64x2_t *)(v111 + 112);
              _OWORD *v112 = vzip1q_s64(*(int64x2_t *)v111, v123);
              *(int64x2_t *)(v64 + 48) = vzip1q_s64(v126, v127);
              uint64_t v130 = (int64x2_t *)((char *)v112 + v67);
              uint64_t v131 = (int64x2_t *)((char *)v112 + v25);
              int64x2_t *v131 = vzip2q_s64(v122, v123);
              v131[1] = vzip2q_s64(v126, v127);
              int64x2_t *v130 = vzip1q_s64(v124, v125);
              v130[1] = vzip1q_s64(v128, v129);
              uint64_t v132 = (int64x2_t *)((char *)v112 + v67 + v25);
              *uint64_t v132 = vzip2q_s64(v124, v125);
              v132[1] = vzip2q_s64(v128, v129);
              uint64_t v114 = 128;
            }
            else if (v113 == 3)
            {
              float32x4_t v118 = vld1q_dup_f32((const float *)v111);
              *(float32x4_t *)(v64 + 32) = v118;
              *(float32x4_t *)(v64 + 48) = v118;
              int64x2_t v119 = (float32x4_t *)((char *)v112 + v25);
              *int64x2_t v119 = v118;
              v119[1] = v118;
              int64x2_t v120 = (float32x4_t *)((char *)v112 + v67);
              *int64x2_t v120 = v118;
              v120[1] = v118;
              int64x2_t v121 = (float32x4_t *)((char *)v112 + v359);
              *int64x2_t v121 = v118;
              v121[1] = v118;
              uint64_t v114 = 4;
            }
            else if (v63[2])
            {
              uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v112, v25, v111, v113);
            }
            else
            {
              uint64_t v114 = 0;
              _OWORD *v112 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              BOOL v115 = (_OWORD *)((char *)v112 + v25);
              *BOOL v115 = 0u;
              v115[1] = 0u;
              int64x2_t v116 = (_OWORD *)((char *)v112 + v67);
              *int64x2_t v116 = 0u;
              v116[1] = 0u;
              int64x2_t v117 = (_OWORD *)((char *)v112 + v359);
              *int64x2_t v117 = 0u;
              v117[1] = 0u;
            }
            uint64_t v133 = v111 + v114;
            float32x4_t v134 = (_OWORD *)(v90 + 32);
            unsigned int v135 = v63[3];
            if (v135 == 127)
            {
              int64x2_t v144 = *(int64x2_t *)v133;
              int64x2_t v145 = *(int64x2_t *)(v133 + 16);
              int64x2_t v146 = *(int64x2_t *)(v133 + 32);
              int64x2_t v147 = *(int64x2_t *)(v133 + 48);
              int64x2_t v148 = *(int64x2_t *)(v133 + 64);
              int64x2_t v149 = *(int64x2_t *)(v133 + 80);
              int64x2_t v150 = *(int64x2_t *)(v133 + 96);
              int64x2_t v151 = *(int64x2_t *)(v133 + 112);
              _OWORD *v134 = vzip1q_s64(*(int64x2_t *)v133, v145);
              *(int64x2_t *)(v90 + 48) = vzip1q_s64(v148, v149);
              uint64_t v152 = (int64x2_t *)((char *)v134 + v67);
              int16x4_t v153 = (int64x2_t *)((char *)v134 + v25);
              int64x2_t *v153 = vzip2q_s64(v144, v145);
              v153[1] = vzip2q_s64(v148, v149);
              int64x2_t *v152 = vzip1q_s64(v146, v147);
              v152[1] = vzip1q_s64(v150, v151);
              int16x4_t v154 = (int64x2_t *)((char *)v134 + v67 + v25);
              *int16x4_t v154 = vzip2q_s64(v146, v147);
              v154[1] = vzip2q_s64(v150, v151);
              uint64_t v136 = 128;
            }
            else if (v135 == 3)
            {
              float32x4_t v140 = vld1q_dup_f32((const float *)v133);
              *(float32x4_t *)(v90 + 32) = v140;
              *(float32x4_t *)(v90 + 48) = v140;
              int64x2_t v141 = (float32x4_t *)((char *)v134 + v25);
              *int64x2_t v141 = v140;
              v141[1] = v140;
              int64x2_t v142 = (float32x4_t *)((char *)v134 + v67);
              *int64x2_t v142 = v140;
              v142[1] = v140;
              int64x2_t v143 = (float32x4_t *)((char *)v134 + v359);
              *int64x2_t v143 = v140;
              v143[1] = v140;
              uint64_t v136 = 4;
            }
            else if (v63[3])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              _OWORD *v134 = 0u;
              *(_OWORD *)(v90 + 48) = 0u;
              char v137 = (_OWORD *)((char *)v134 + v25);
              *char v137 = 0u;
              v137[1] = 0u;
              int64x2_t v138 = (_OWORD *)((char *)v134 + v67);
              *int64x2_t v138 = 0u;
              v138[1] = 0u;
              int64x2_t v139 = (_OWORD *)((char *)v134 + v359);
              *int64x2_t v139 = 0u;
              v139[1] = 0u;
            }
            uint64_t v155 = v133 + v136;
            uint64_t v156 = v64 + v361;
            unsigned int v157 = v63[4];
            if (v157 == 127)
            {
              int64x2_t v166 = *(int64x2_t *)v155;
              int64x2_t v167 = *(int64x2_t *)(v155 + 16);
              int64x2_t v168 = *(int64x2_t *)(v155 + 32);
              int64x2_t v169 = *(int64x2_t *)(v155 + 48);
              int64x2_t v170 = *(int64x2_t *)(v155 + 64);
              int64x2_t v171 = *(int64x2_t *)(v155 + 80);
              int64x2_t v172 = *(int64x2_t *)(v155 + 96);
              int64x2_t v173 = *(int64x2_t *)(v155 + 112);
              *(int64x2_t *)uint64_t v156 = vzip1q_s64(*(int64x2_t *)v155, v167);
              *(int64x2_t *)(v156 + 16) = vzip1q_s64(v170, v171);
              uint64_t v174 = (int64x2_t *)(v156 + v67);
              uint64_t v175 = (int64x2_t *)(v156 + v25);
              int64x2_t *v175 = vzip2q_s64(v166, v167);
              v175[1] = vzip2q_s64(v170, v171);
              int64x2_t *v174 = vzip1q_s64(v168, v169);
              v174[1] = vzip1q_s64(v172, v173);
              int16x4_t v176 = (int64x2_t *)(v156 + v67 + v25);
              *int16x4_t v176 = vzip2q_s64(v168, v169);
              v176[1] = vzip2q_s64(v172, v173);
              uint64_t v158 = 128;
            }
            else if (v157 == 3)
            {
              float32x4_t v162 = vld1q_dup_f32((const float *)v155);
              *(float32x4_t *)uint64_t v156 = v162;
              *(float32x4_t *)(v156 + 16) = v162;
              int64x2_t v163 = (float32x4_t *)(v156 + v25);
              *int64x2_t v163 = v162;
              v163[1] = v162;
              int64x2_t v164 = (float32x4_t *)(v156 + v67);
              *int64x2_t v164 = v162;
              v164[1] = v162;
              int64x2_t v165 = (float32x4_t *)(v156 + v359);
              *int64x2_t v165 = v162;
              v165[1] = v162;
              uint64_t v158 = 4;
            }
            else if (v63[4])
            {
              uint64_t v158 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v64 + v361), v25, v155, v157);
            }
            else
            {
              uint64_t v158 = 0;
              *(_OWORD *)uint64_t v156 = 0u;
              *(_OWORD *)(v156 + 16) = 0u;
              int8x8_t v159 = (_OWORD *)(v156 + v25);
              *int8x8_t v159 = 0u;
              v159[1] = 0u;
              int64x2_t v160 = (_OWORD *)(v156 + v67);
              *int64x2_t v160 = 0u;
              v160[1] = 0u;
              int64x2_t v161 = (_OWORD *)(v156 + v359);
              *int64x2_t v161 = 0u;
              v161[1] = 0u;
            }
            uint64_t v177 = v155 + v158;
            uint64_t v178 = v64 + 12 * a11;
            unsigned int v179 = v63[5];
            if (v179 == 127)
            {
              int64x2_t v188 = *(int64x2_t *)v177;
              int64x2_t v189 = *(int64x2_t *)(v177 + 16);
              int64x2_t v190 = *(int64x2_t *)(v177 + 32);
              int64x2_t v191 = *(int64x2_t *)(v177 + 48);
              int64x2_t v192 = *(int64x2_t *)(v177 + 64);
              int64x2_t v193 = *(int64x2_t *)(v177 + 80);
              int64x2_t v194 = *(int64x2_t *)(v177 + 96);
              int64x2_t v195 = *(int64x2_t *)(v177 + 112);
              *(int64x2_t *)uint64_t v178 = vzip1q_s64(*(int64x2_t *)v177, v189);
              *(int64x2_t *)(v178 + 16) = vzip1q_s64(v192, v193);
              uint64_t v196 = (int64x2_t *)(v178 + v67);
              int16x4_t v197 = (int64x2_t *)(v178 + v25);
              int64x2_t *v197 = vzip2q_s64(v188, v189);
              v197[1] = vzip2q_s64(v192, v193);
              int64x2_t *v196 = vzip1q_s64(v190, v191);
              v196[1] = vzip1q_s64(v194, v195);
              int16x4_t v198 = (int64x2_t *)(v178 + v67 + v25);
              *int16x4_t v198 = vzip2q_s64(v190, v191);
              v198[1] = vzip2q_s64(v194, v195);
              uint64_t v180 = 128;
            }
            else if (v179 == 3)
            {
              float32x4_t v184 = vld1q_dup_f32((const float *)v177);
              *(float32x4_t *)uint64_t v178 = v184;
              *(float32x4_t *)(v178 + 16) = v184;
              int64x2_t v185 = (float32x4_t *)(v178 + v25);
              *int64x2_t v185 = v184;
              v185[1] = v184;
              int64x2_t v186 = (float32x4_t *)(v178 + v67);
              *int64x2_t v186 = v184;
              v186[1] = v184;
              int64x2_t v187 = (float32x4_t *)(v178 + v359);
              *int64x2_t v187 = v184;
              v187[1] = v184;
              uint64_t v180 = 4;
            }
            else if (v63[5])
            {
              uint64_t v180 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v178, v25, v177, v179);
            }
            else
            {
              uint64_t v180 = 0;
              *(_OWORD *)uint64_t v178 = 0u;
              *(_OWORD *)(v178 + 16) = 0u;
              unsigned int v181 = (_OWORD *)(v178 + v25);
              *unsigned int v181 = 0u;
              v181[1] = 0u;
              int64x2_t v182 = (_OWORD *)(v178 + v67);
              *int64x2_t v182 = 0u;
              v182[1] = 0u;
              int64x2_t v183 = (_OWORD *)(v178 + v359);
              *int64x2_t v183 = 0u;
              v183[1] = 0u;
            }
            uint64_t v199 = v177 + v180;
            float32x4_t v200 = (_OWORD *)(v156 + 32);
            unsigned int v201 = v63[6];
            if (v201 == 127)
            {
              int64x2_t v210 = *(int64x2_t *)v199;
              int64x2_t v211 = *(int64x2_t *)(v199 + 16);
              int64x2_t v212 = *(int64x2_t *)(v199 + 32);
              int64x2_t v213 = *(int64x2_t *)(v199 + 48);
              int64x2_t v214 = *(int64x2_t *)(v199 + 64);
              int64x2_t v215 = *(int64x2_t *)(v199 + 80);
              int64x2_t v216 = *(int64x2_t *)(v199 + 96);
              int64x2_t v217 = *(int64x2_t *)(v199 + 112);
              _OWORD *v200 = vzip1q_s64(*(int64x2_t *)v199, v211);
              *(int64x2_t *)(v156 + 48) = vzip1q_s64(v214, v215);
              uint64_t v218 = (int64x2_t *)((char *)v200 + v67);
              uint64_t v219 = (int64x2_t *)((char *)v200 + v25);
              int64x2_t *v219 = vzip2q_s64(v210, v211);
              v219[1] = vzip2q_s64(v214, v215);
              int64x2_t *v218 = vzip1q_s64(v212, v213);
              v218[1] = vzip1q_s64(v216, v217);
              unsigned int v220 = (int64x2_t *)((char *)v200 + v67 + v25);
              *unsigned int v220 = vzip2q_s64(v212, v213);
              v220[1] = vzip2q_s64(v216, v217);
              uint64_t v202 = 128;
            }
            else if (v201 == 3)
            {
              float32x4_t v206 = vld1q_dup_f32((const float *)v199);
              *(float32x4_t *)(v156 + 32) = v206;
              *(float32x4_t *)(v156 + 48) = v206;
              int64x2_t v207 = (float32x4_t *)((char *)v200 + v25);
              *int64x2_t v207 = v206;
              v207[1] = v206;
              int64x2_t v208 = (float32x4_t *)((char *)v200 + v67);
              *int64x2_t v208 = v206;
              v208[1] = v206;
              int64x2_t v209 = (float32x4_t *)((char *)v200 + v359);
              *int64x2_t v209 = v206;
              v209[1] = v206;
              uint64_t v202 = 4;
            }
            else if (v63[6])
            {
              uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v200, v25, v199, v201);
            }
            else
            {
              uint64_t v202 = 0;
              _OWORD *v200 = 0u;
              *(_OWORD *)(v156 + 48) = 0u;
              uint64_t v203 = (_OWORD *)((char *)v200 + v25);
              *uint64_t v203 = 0u;
              v203[1] = 0u;
              int64x2_t v204 = (_OWORD *)((char *)v200 + v67);
              *int64x2_t v204 = 0u;
              v204[1] = 0u;
              int64x2_t v205 = (_OWORD *)((char *)v200 + v359);
              *int64x2_t v205 = 0u;
              v205[1] = 0u;
            }
            unsigned int v32 = v30 + 1;
            uint64_t v221 = v199 + v202;
            float32x4_t v222 = (_OWORD *)(v178 + 32);
            unsigned int v223 = v63[7];
            if (v223 == 127)
            {
              int64x2_t v228 = *(int64x2_t *)v221;
              int64x2_t v229 = *(int64x2_t *)(v221 + 16);
              int64x2_t v230 = *(int64x2_t *)(v221 + 32);
              int64x2_t v231 = *(int64x2_t *)(v221 + 48);
              int64x2_t v232 = *(int64x2_t *)(v221 + 64);
              int64x2_t v233 = *(int64x2_t *)(v221 + 80);
              int64x2_t v234 = *(int64x2_t *)(v221 + 96);
              int64x2_t v235 = *(int64x2_t *)(v221 + 112);
              _OWORD *v222 = vzip1q_s64(*(int64x2_t *)v221, v229);
              *(int64x2_t *)(v178 + 48) = vzip1q_s64(v232, v233);
              uint64_t v236 = (int64x2_t *)((char *)v222 + v67);
              uint64_t v237 = (int64x2_t *)((char *)v222 + v25);
              *uint64_t v237 = vzip2q_s64(v228, v229);
              v237[1] = vzip2q_s64(v232, v233);
              *uint64_t v236 = vzip1q_s64(v230, v231);
              v236[1] = vzip1q_s64(v234, v235);
              int v238 = (int64x2_t *)((char *)v222 + v67 + v25);
              *int v238 = vzip2q_s64(v230, v231);
              v238[1] = vzip2q_s64(v234, v235);
              a7 = v368;
              uint64_t v16 = v378;
              goto LABEL_27;
            }
            uint64_t v16 = v378;
            if (v223 == 3)
            {
              float32x4_t v224 = vld1q_dup_f32((const float *)v221);
              *(float32x4_t *)(v178 + 32) = v224;
              *(float32x4_t *)(v178 + 48) = v224;
LABEL_148:
              BOOL v225 = (float32x4_t *)((char *)v222 + v25);
              *BOOL v225 = v224;
              v225[1] = v224;
              int64x2_t v226 = (float32x4_t *)((char *)v222 + v67);
              *int64x2_t v226 = v224;
              v226[1] = v224;
              int64x2_t v227 = (float32x4_t *)((char *)v222 + v359);
              *int64x2_t v227 = v224;
              v227[1] = v224;
            }
            else
            {
              if (!v223)
              {
                float32x4_t v224 = 0uLL;
                _OWORD *v222 = 0u;
                *(_OWORD *)(v178 + 48) = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v222, v25, v221, v223);
            }
            a7 = v368;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v378;
          block[5] = v62;
          char v389 = v37;
          char v390 = v381;
          unsigned int v385 = v363;
          unsigned int v386 = v35 - v33;
          block[6] = v63;
          uint64_t v383 = v64;
          uint64_t v25 = a11;
          uint64_t v384 = a11;
          unsigned int v387 = v375;
          unsigned int v388 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v378 + 8) + 7384), block);
            a7 = v368;
            uint64_t v16 = v378;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            unsigned int v72 = *v63;
            a7 = v368;
            if (v72 == 127)
            {
              int64x2_t v239 = *v62;
              int64x2_t v240 = v62[1];
              int64x2_t v241 = v62[2];
              int64x2_t v242 = v62[3];
              int64x2_t v243 = v62[4];
              int64x2_t v244 = v62[5];
              int64x2_t v245 = v62[6];
              int64x2_t v246 = v62[7];
              int64x2_t v392 = vzip1q_s64(*v62, v240);
              int64x2_t v393 = vzip1q_s64(v243, v244);
              int64x2_t v396 = vzip2q_s64(v239, v240);
              int64x2_t v397 = vzip2q_s64(v243, v244);
              int64x2_t v400 = vzip1q_s64(v241, v242);
              int64x2_t v401 = vzip1q_s64(v245, v246);
              int64x2_t v404 = vzip2q_s64(v241, v242);
              int64x2_t v405 = vzip2q_s64(v245, v246);
              uint64_t v73 = 128;
            }
            else if (v72 == 3)
            {
              float32x4_t v247 = vld1q_dup_f32((const float *)v62->i32);
              int64x2_t v392 = (int64x2_t)v247;
              int64x2_t v393 = (int64x2_t)v247;
              int64x2_t v396 = (int64x2_t)v247;
              int64x2_t v397 = (int64x2_t)v247;
              int64x2_t v400 = (int64x2_t)v247;
              int64x2_t v401 = (int64x2_t)v247;
              int64x2_t v404 = (int64x2_t)v247;
              int64x2_t v405 = (int64x2_t)v247;
              uint64_t v73 = 4;
            }
            else if (*v63)
            {
              uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v392, 64, (uint64_t)v62, v72);
            }
            else
            {
              uint64_t v73 = 0;
              int64x2_t v393 = 0u;
              int64x2_t v392 = 0u;
              int64x2_t v396 = 0u;
              int64x2_t v397 = 0u;
              int64x2_t v400 = 0u;
              int64x2_t v401 = 0u;
              int64x2_t v404 = 0u;
              int64x2_t v405 = 0u;
            }
            uint64_t v248 = (uint64_t)v62->i64 + v73;
            unsigned int v249 = v63[1];
            if (v249 == 127)
            {
              int64x2_t v251 = *(int64x2_t *)v248;
              int64x2_t v252 = *(int64x2_t *)(v248 + 16);
              int64x2_t v253 = *(int64x2_t *)(v248 + 32);
              int64x2_t v254 = *(int64x2_t *)(v248 + 48);
              int64x2_t v255 = *(int64x2_t *)(v248 + 64);
              int64x2_t v256 = *(int64x2_t *)(v248 + 80);
              int64x2_t v257 = *(int64x2_t *)(v248 + 96);
              int64x2_t v258 = *(int64x2_t *)(v248 + 112);
              int64x2_t v408 = vzip1q_s64(*(int64x2_t *)v248, v252);
              int64x2_t v409 = vzip1q_s64(v255, v256);
              int64x2_t v412 = vzip2q_s64(v251, v252);
              int64x2_t v413 = vzip2q_s64(v255, v256);
              int64x2_t v416 = vzip1q_s64(v253, v254);
              int64x2_t v417 = vzip1q_s64(v257, v258);
              int64x2_t v420 = vzip2q_s64(v253, v254);
              int64x2_t v421 = vzip2q_s64(v257, v258);
              uint64_t v250 = 128;
            }
            else if (v249 == 3)
            {
              float32x4_t v259 = vld1q_dup_f32((const float *)v248);
              int64x2_t v408 = (int64x2_t)v259;
              int64x2_t v409 = (int64x2_t)v259;
              int64x2_t v412 = (int64x2_t)v259;
              int64x2_t v413 = (int64x2_t)v259;
              int64x2_t v416 = (int64x2_t)v259;
              int64x2_t v417 = (int64x2_t)v259;
              int64x2_t v420 = (int64x2_t)v259;
              int64x2_t v421 = (int64x2_t)v259;
              uint64_t v250 = 4;
            }
            else if (v63[1])
            {
              uint64_t v250 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v408, 64, v248, v249);
            }
            else
            {
              uint64_t v250 = 0;
              int64x2_t v408 = 0u;
              int64x2_t v409 = 0u;
              int64x2_t v412 = 0u;
              int64x2_t v413 = 0u;
              int64x2_t v416 = 0u;
              int64x2_t v417 = 0u;
              int64x2_t v420 = 0u;
              int64x2_t v421 = 0u;
            }
            uint64_t v260 = v248 + v250;
            unsigned int v261 = v63[2];
            if (v261 == 127)
            {
              int64x2_t v263 = *(int64x2_t *)v260;
              int64x2_t v264 = *(int64x2_t *)(v260 + 16);
              int64x2_t v265 = *(int64x2_t *)(v260 + 32);
              int64x2_t v266 = *(int64x2_t *)(v260 + 48);
              int64x2_t v267 = *(int64x2_t *)(v260 + 64);
              int64x2_t v268 = *(int64x2_t *)(v260 + 80);
              int64x2_t v269 = *(int64x2_t *)(v260 + 96);
              int64x2_t v270 = *(int64x2_t *)(v260 + 112);
              int64x2_t v394 = vzip1q_s64(*(int64x2_t *)v260, v264);
              int64x2_t v395 = vzip1q_s64(v267, v268);
              int64x2_t v398 = vzip2q_s64(v263, v264);
              int64x2_t v399 = vzip2q_s64(v267, v268);
              int64x2_t v402 = vzip1q_s64(v265, v266);
              int64x2_t v403 = vzip1q_s64(v269, v270);
              int64x2_t v406 = vzip2q_s64(v265, v266);
              int64x2_t v407 = vzip2q_s64(v269, v270);
              uint64_t v262 = 128;
            }
            else if (v261 == 3)
            {
              float32x4_t v271 = vld1q_dup_f32((const float *)v260);
              int64x2_t v394 = (int64x2_t)v271;
              int64x2_t v395 = (int64x2_t)v271;
              int64x2_t v398 = (int64x2_t)v271;
              int64x2_t v399 = (int64x2_t)v271;
              int64x2_t v402 = (int64x2_t)v271;
              int64x2_t v403 = (int64x2_t)v271;
              int64x2_t v406 = (int64x2_t)v271;
              int64x2_t v407 = (int64x2_t)v271;
              uint64_t v262 = 4;
            }
            else if (v63[2])
            {
              uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 64, v260, v261);
            }
            else
            {
              uint64_t v262 = 0;
              int64x2_t v394 = 0u;
              int64x2_t v395 = 0u;
              int64x2_t v398 = 0u;
              int64x2_t v399 = 0u;
              int64x2_t v402 = 0u;
              int64x2_t v403 = 0u;
              int64x2_t v406 = 0u;
              int64x2_t v407 = 0u;
            }
            uint64_t v272 = v260 + v262;
            unsigned int v273 = v63[3];
            if (v273 == 127)
            {
              int64x2_t v275 = *(int64x2_t *)v272;
              int64x2_t v276 = *(int64x2_t *)(v272 + 16);
              int64x2_t v277 = *(int64x2_t *)(v272 + 32);
              int64x2_t v278 = *(int64x2_t *)(v272 + 48);
              int64x2_t v279 = *(int64x2_t *)(v272 + 64);
              int64x2_t v280 = *(int64x2_t *)(v272 + 80);
              int64x2_t v281 = *(int64x2_t *)(v272 + 96);
              int64x2_t v282 = *(int64x2_t *)(v272 + 112);
              int64x2_t v410 = vzip1q_s64(*(int64x2_t *)v272, v276);
              int64x2_t v411 = vzip1q_s64(v279, v280);
              int64x2_t v414 = vzip2q_s64(v275, v276);
              int64x2_t v415 = vzip2q_s64(v279, v280);
              int64x2_t v418 = vzip1q_s64(v277, v278);
              int64x2_t v419 = vzip1q_s64(v281, v282);
              int64x2_t v422 = vzip2q_s64(v277, v278);
              int64x2_t v423 = vzip2q_s64(v281, v282);
              uint64_t v274 = 128;
            }
            else if (v273 == 3)
            {
              float32x4_t v283 = vld1q_dup_f32((const float *)v272);
              int64x2_t v410 = (int64x2_t)v283;
              int64x2_t v411 = (int64x2_t)v283;
              int64x2_t v414 = (int64x2_t)v283;
              int64x2_t v415 = (int64x2_t)v283;
              int64x2_t v418 = (int64x2_t)v283;
              int64x2_t v419 = (int64x2_t)v283;
              int64x2_t v422 = (int64x2_t)v283;
              int64x2_t v423 = (int64x2_t)v283;
              uint64_t v274 = 4;
            }
            else if (v63[3])
            {
              uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v410, 64, v272, v273);
            }
            else
            {
              uint64_t v274 = 0;
              int64x2_t v410 = 0u;
              int64x2_t v411 = 0u;
              int64x2_t v414 = 0u;
              int64x2_t v415 = 0u;
              int64x2_t v418 = 0u;
              int64x2_t v419 = 0u;
              int64x2_t v422 = 0u;
              int64x2_t v423 = 0u;
            }
            uint64_t v284 = v272 + v274;
            unsigned int v285 = v63[4];
            if (v285 == 127)
            {
              int64x2_t v287 = *(int64x2_t *)v284;
              int64x2_t v288 = *(int64x2_t *)(v284 + 16);
              int64x2_t v289 = *(int64x2_t *)(v284 + 32);
              int64x2_t v290 = *(int64x2_t *)(v284 + 48);
              int64x2_t v291 = *(int64x2_t *)(v284 + 64);
              int64x2_t v292 = *(int64x2_t *)(v284 + 80);
              int64x2_t v293 = *(int64x2_t *)(v284 + 96);
              int64x2_t v294 = *(int64x2_t *)(v284 + 112);
              int64x2_t v424 = vzip1q_s64(*(int64x2_t *)v284, v288);
              int64x2_t v425 = vzip1q_s64(v291, v292);
              int64x2_t v428 = vzip2q_s64(v287, v288);
              int64x2_t v429 = vzip2q_s64(v291, v292);
              int64x2_t v432 = vzip1q_s64(v289, v290);
              int64x2_t v433 = vzip1q_s64(v293, v294);
              int64x2_t v436 = vzip2q_s64(v289, v290);
              int64x2_t v437 = vzip2q_s64(v293, v294);
              uint64_t v286 = 128;
            }
            else if (v285 == 3)
            {
              float32x4_t v295 = vld1q_dup_f32((const float *)v284);
              int64x2_t v424 = (int64x2_t)v295;
              int64x2_t v425 = (int64x2_t)v295;
              int64x2_t v428 = (int64x2_t)v295;
              int64x2_t v429 = (int64x2_t)v295;
              int64x2_t v432 = (int64x2_t)v295;
              int64x2_t v433 = (int64x2_t)v295;
              int64x2_t v436 = (int64x2_t)v295;
              int64x2_t v437 = (int64x2_t)v295;
              uint64_t v286 = 4;
            }
            else if (v63[4])
            {
              uint64_t v286 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v424, 64, v284, v285);
            }
            else
            {
              uint64_t v286 = 0;
              int64x2_t v424 = 0u;
              int64x2_t v425 = 0u;
              int64x2_t v428 = 0u;
              int64x2_t v429 = 0u;
              int64x2_t v432 = 0u;
              int64x2_t v433 = 0u;
              int64x2_t v436 = 0u;
              int64x2_t v437 = 0u;
            }
            uint64_t v296 = v284 + v286;
            unsigned int v297 = v63[5];
            if (v297 == 127)
            {
              int64x2_t v299 = *(int64x2_t *)v296;
              int64x2_t v300 = *(int64x2_t *)(v296 + 16);
              int64x2_t v301 = *(int64x2_t *)(v296 + 32);
              int64x2_t v302 = *(int64x2_t *)(v296 + 48);
              int64x2_t v303 = *(int64x2_t *)(v296 + 64);
              int64x2_t v304 = *(int64x2_t *)(v296 + 80);
              int64x2_t v305 = *(int64x2_t *)(v296 + 96);
              int64x2_t v306 = *(int64x2_t *)(v296 + 112);
              int64x2_t v440 = vzip1q_s64(*(int64x2_t *)v296, v300);
              int64x2_t v441 = vzip1q_s64(v303, v304);
              int64x2_t v444 = vzip2q_s64(v299, v300);
              int64x2_t v445 = vzip2q_s64(v303, v304);
              int64x2_t v448 = vzip1q_s64(v301, v302);
              int64x2_t v449 = vzip1q_s64(v305, v306);
              int64x2_t v452 = vzip2q_s64(v301, v302);
              int64x2_t v453 = vzip2q_s64(v305, v306);
              uint64_t v298 = 128;
            }
            else if (v297 == 3)
            {
              float32x4_t v307 = vld1q_dup_f32((const float *)v296);
              int64x2_t v440 = (int64x2_t)v307;
              int64x2_t v441 = (int64x2_t)v307;
              int64x2_t v444 = (int64x2_t)v307;
              int64x2_t v445 = (int64x2_t)v307;
              int64x2_t v448 = (int64x2_t)v307;
              int64x2_t v449 = (int64x2_t)v307;
              int64x2_t v452 = (int64x2_t)v307;
              int64x2_t v453 = (int64x2_t)v307;
              uint64_t v298 = 4;
            }
            else if (v63[5])
            {
              uint64_t v298 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v440, 64, v296, v297);
            }
            else
            {
              uint64_t v298 = 0;
              int64x2_t v440 = 0u;
              int64x2_t v441 = 0u;
              int64x2_t v444 = 0u;
              int64x2_t v445 = 0u;
              int64x2_t v448 = 0u;
              int64x2_t v449 = 0u;
              int64x2_t v452 = 0u;
              int64x2_t v453 = 0u;
            }
            uint64_t v308 = v296 + v298;
            unsigned int v309 = v63[6];
            if (v309 == 127)
            {
              int64x2_t v311 = *(int64x2_t *)v308;
              int64x2_t v312 = *(int64x2_t *)(v308 + 16);
              int64x2_t v313 = *(int64x2_t *)(v308 + 32);
              int64x2_t v314 = *(int64x2_t *)(v308 + 48);
              int64x2_t v315 = *(int64x2_t *)(v308 + 64);
              int64x2_t v316 = *(int64x2_t *)(v308 + 80);
              int64x2_t v317 = *(int64x2_t *)(v308 + 96);
              int64x2_t v318 = *(int64x2_t *)(v308 + 112);
              int64x2_t v426 = vzip1q_s64(*(int64x2_t *)v308, v312);
              int64x2_t v427 = vzip1q_s64(v315, v316);
              int64x2_t v430 = vzip2q_s64(v311, v312);
              int64x2_t v431 = vzip2q_s64(v315, v316);
              int64x2_t v434 = vzip1q_s64(v313, v314);
              int64x2_t v435 = vzip1q_s64(v317, v318);
              int64x2_t v438 = vzip2q_s64(v313, v314);
              int64x2_t v439 = vzip2q_s64(v317, v318);
              uint64_t v310 = 128;
            }
            else if (v309 == 3)
            {
              float32x4_t v319 = vld1q_dup_f32((const float *)v308);
              int64x2_t v426 = (int64x2_t)v319;
              int64x2_t v427 = (int64x2_t)v319;
              int64x2_t v430 = (int64x2_t)v319;
              int64x2_t v431 = (int64x2_t)v319;
              int64x2_t v434 = (int64x2_t)v319;
              int64x2_t v435 = (int64x2_t)v319;
              int64x2_t v438 = (int64x2_t)v319;
              int64x2_t v439 = (int64x2_t)v319;
              uint64_t v310 = 4;
            }
            else if (v63[6])
            {
              uint64_t v310 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v426, 64, v308, v309);
            }
            else
            {
              uint64_t v310 = 0;
              int64x2_t v426 = 0u;
              int64x2_t v427 = 0u;
              int64x2_t v430 = 0u;
              int64x2_t v431 = 0u;
              int64x2_t v434 = 0u;
              int64x2_t v435 = 0u;
              int64x2_t v438 = 0u;
              int64x2_t v439 = 0u;
            }
            uint64_t v320 = v308 + v310;
            unsigned int v321 = v63[7];
            if (v321 == 127)
            {
              int64x2_t v322 = *(int64x2_t *)v320;
              int64x2_t v323 = *(int64x2_t *)(v320 + 16);
              int64x2_t v324 = *(int64x2_t *)(v320 + 32);
              int64x2_t v325 = *(int64x2_t *)(v320 + 48);
              int64x2_t v326 = *(int64x2_t *)(v320 + 64);
              int64x2_t v327 = *(int64x2_t *)(v320 + 80);
              int64x2_t v328 = *(int64x2_t *)(v320 + 96);
              int64x2_t v329 = *(int64x2_t *)(v320 + 112);
              int64x2_t v442 = vzip1q_s64(*(int64x2_t *)v320, v323);
              int64x2_t v443 = vzip1q_s64(v326, v327);
              int64x2_t v446 = vzip2q_s64(v322, v323);
              int64x2_t v447 = vzip2q_s64(v326, v327);
              int64x2_t v450 = vzip1q_s64(v324, v325);
              int64x2_t v451 = vzip1q_s64(v328, v329);
              int64x2_t v454 = vzip2q_s64(v324, v325);
              int64x2_t v455 = vzip2q_s64(v328, v329);
              uint64_t v16 = v378;
              unsigned int v32 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v378;
              unsigned int v32 = v30 + 1;
              if (v321 == 3)
              {
                float32x4_t v330 = vld1q_dup_f32((const float *)v320);
                int64x2_t v442 = (int64x2_t)v330;
                int64x2_t v443 = (int64x2_t)v330;
                int64x2_t v446 = (int64x2_t)v330;
                int64x2_t v447 = (int64x2_t)v330;
                int64x2_t v450 = (int64x2_t)v330;
                int64x2_t v451 = (int64x2_t)v330;
                int64x2_t v454 = (int64x2_t)v330;
                int64x2_t v455 = (int64x2_t)v330;
              }
              else if (v321)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v442, 64, v320, v321);
              }
              else
              {
                int64x2_t v442 = 0u;
                int64x2_t v443 = 0u;
                int64x2_t v446 = 0u;
                int64x2_t v447 = 0u;
                int64x2_t v450 = 0u;
                int64x2_t v451 = 0u;
                int64x2_t v454 = 0u;
                int64x2_t v455 = 0u;
              }
            }
            unint64_t v331 = v387;
            if (v387)
            {
              unint64_t v332 = 0;
              int64x2_t v333 = &v392.i8[64 * (unint64_t)v385 + 4 * v386];
              unsigned int v334 = v388;
              do
              {
                if (v334)
                {
                  uint64_t v335 = 0;
                  uint64_t v336 = v383 + v384 * v332;
                  do
                  {
                    *(unsigned char *)(v336 + v335) = v333[v335];
                    ++v335;
                    unsigned int v334 = v388;
                  }
                  while (4 * (unint64_t)v388 > v335);
                  unint64_t v331 = v387;
                }
                ++v332;
                v333 += 64;
              }
              while (v332 < v331);
            }
          }
LABEL_27:
          BOOL v21 = v30 == v369 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v358;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v276 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v209 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v229 >> 4;
  unsigned int v208 = v209 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v223 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v222 = 0;
LABEL_32:
      unsigned int v220 = v27 - 4;
      unsigned int v213 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v206 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v222 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v222 = 0;
  unsigned int v206 = 0;
  unsigned int v213 = 0;
  unsigned int v220 = 0;
LABEL_33:
  if (v21 <= v208)
  {
    unsigned int v221 = a7 + a9 - 1;
    if (a7 >> 4 <= v221 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v232 = v19 >> 4;
      unsigned int v205 = v20 >> 4;
      int v231 = (v19 & 0xF) + 1;
      int v204 = (v20 & 0xF) + 1;
      uint64_t v217 = 8 * a11;
      uint64_t v218 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL)));
      *(int32x2_t *)v38.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v37.i8))));
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v38.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v216 = v39.i32[0] | v39.i32[1];
      BOOL v211 = v39.i32[1] != 0;
      uint64_t v212 = v39.i64[0];
      BOOL v210 = v39.i32[0] != 0;
      uint64_t v230 = a1;
      uint64_t v214 = 3 * a11;
      uint64_t v215 = 2 * a11;
      do
      {
        unsigned int v40 = (16 * v21) | 0xF;
        if (16 * v21 <= v229) {
          int v41 = v229;
        }
        else {
          int v41 = 16 * v21;
        }
        if (v209 < v40) {
          unsigned int v40 = v209;
        }
        int v219 = v41 - 16 * v21;
        int v227 = v40 - v41 + 1;
        unsigned int v42 = a7 >> 4;
        int v43 = v204;
        if (v21 != v205) {
          int v43 = 16;
        }
        unsigned int v233 = v43;
        uint64_t v44 = v21 & ~(-1 << v213);
        uint64_t v226 = a2 + (v41 - v229) * v34;
        unsigned int v45 = a7;
        do
        {
          unsigned int v47 = 16 * v42;
          unsigned int v48 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v45) {
            int v49 = v45;
          }
          else {
            int v49 = 16 * v42;
          }
          if (v221 < v48) {
            unsigned int v48 = a7 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v42 == v232) {
            unsigned int v51 = v231;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v21 >= v229 && v47 >= v45)
          {
            int v53 = v231;
            if (v42 != v232) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v227 != v233;
          }
          if (v222)
          {
            if (v220 | v213)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v220 != 0;
              BOOL v59 = v213 != 0;
              unsigned int v60 = v220;
              unsigned int v61 = v213;
              do
              {
                --v60;
                if (v58) {
                  v56 |= (unint64_t)(v42 & ~(-1 << v220) & v57) << v55++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v61;
                if (v59) {
                  v56 |= (unint64_t)(v44 & v57) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v59 = v61 != 0;
                BOOL v58 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v17 + 320) * ((v42 >> v220) + (v21 >> v213) * v206) + (v56 << 9);
          }
          else
          {
            if (v216)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v211;
              BOOL v66 = v210;
              int v67 = HIDWORD(v212);
              int v68 = v212;
              do
              {
                --v67;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v42) << v62++;
                }
                else {
                  int v67 = 0;
                }
                --v68;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v21) << v62++;
                }
                else {
                  int v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v66 = v68 != 0;
                BOOL v65 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 9;
          }
          unsigned int v70 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_115:
              unint64_t v77 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_115;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v42) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v21) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_116:
          int64x2_t v83 = (int32x4_t *)(a3 + v69);
          if (v223)
          {
            uint64_t v84 = v44;
            int v85 = v50;
            BOOL v86 = v52;
            memcpy(__dst, (const void *)(a3 + v69), sizeof(__dst));
            BOOL v52 = v86;
            int v50 = v85;
            uint64_t v44 = v84;
            int64x2_t v83 = (int32x4_t *)__dst;
          }
          uint64_t v87 = (unsigned __int8 *)(a4 + 8 * v77);
          unsigned int v88 = (int32x4_t *)(v226 + 2 * (v49 - v45));
          char v89 = v51 < 0x10 || v52;
          if ((v89 & 1) == 0 && v233 > 0xF)
          {
            unsigned int v90 = *v87;
            if (v90 == 63)
            {
              int32x4_t v98 = *v83;
              int32x4_t v38 = v83[1];
              int32x4_t v37 = v83[2];
              int32x4_t v36 = v83[3];
              int32x4_t *v88 = vuzp1q_s32(*v83, v37);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v88 + a11) = vuzp2q_s32(v98, v37);
              uint64_t v91 = 2 * a11;
              int64x2_t v99 = (int32x4_t *)((char *)v88 + v215);
              *int64x2_t v99 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v99 + a11) = v39;
              uint64_t v92 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 1)
              {
                int16x8_t v39 = vld1q_dup_s16(v83->i16);
                int32x4_t *v88 = (int32x4_t)v39;
                *(int16x8_t *)((char *)v88 + a11) = v39;
                *(int16x8_t *)((char *)v88 + 2 * a11) = v39;
                *(int16x8_t *)((char *)v88 + 3 * a11) = v39;
                uint64_t v92 = 2;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, a11, (uint64_t)v83, v90, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v92 = 0;
                v88->i64[0] = 0;
                v88->i64[1] = 0;
                int16x4_t v93 = (uint64_t *)((char *)v88->i64 + a11);
                *int16x4_t v93 = 0;
                v93[1] = 0;
                int64x2_t v94 = (uint64_t *)((char *)v88->i64 + v215);
                *int64x2_t v94 = 0;
                v94[1] = 0;
                int64x2_t v95 = (uint64_t *)((char *)v88->i64 + v214);
                *int64x2_t v95 = 0;
                v95[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)v83->i64 + v92;
            int64x2_t v101 = (int32x4_t *)((char *)v88 + v218);
            unsigned int v102 = v87[1];
            if (v102 == 63)
            {
              int32x4_t v107 = *(int32x4_t *)v100;
              int32x4_t v38 = *(int32x4_t *)(v100 + 16);
              int32x4_t v37 = *(int32x4_t *)(v100 + 32);
              int32x4_t v36 = *(int32x4_t *)(v100 + 48);
              int32x4_t *v101 = vuzp1q_s32(*(int32x4_t *)v100, v37);
              *(int32x4_t *)((char *)v101 + v34) = vuzp2q_s32(v107, v37);
              uint64_t v108 = (int32x4_t *)((char *)v101 + v91);
              int32x4_t *v108 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v108 + v34) = v39;
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v100);
              int32x4_t *v101 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v101 + v34) = v39;
              *(int16x8_t *)((char *)v101 + v91) = v39;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v39;
              uint64_t v103 = 2;
            }
            else if (v87[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v88 + v218), v34, v100, v102, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v101->i64[1] = 0;
              int64x2_t v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int64x2_t v104 = 0;
              v104[1] = 0;
              int64x2_t v105 = (uint64_t *)((char *)v101->i64 + v91);
              *int64x2_t v105 = 0;
              v105[1] = 0;
              int64x2_t v106 = (uint64_t *)((char *)v101->i64 + v214);
              *int64x2_t v106 = 0;
              v106[1] = 0;
            }
            uint64_t v109 = v100 + v103;
            unsigned int v110 = v88 + 1;
            unsigned int v111 = v87[2];
            if (v111 == 63)
            {
              int32x4_t v116 = *(int32x4_t *)v109;
              int32x4_t v38 = *(int32x4_t *)(v109 + 16);
              int32x4_t v37 = *(int32x4_t *)(v109 + 32);
              int32x4_t v36 = *(int32x4_t *)(v109 + 48);
              *unsigned int v110 = vuzp1q_s32(*(int32x4_t *)v109, v37);
              *(int32x4_t *)((char *)v110 + v34) = vuzp2q_s32(v116, v37);
              int64x2_t v117 = (int32x4_t *)((char *)v110 + v91);
              *int64x2_t v117 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v117 + v34) = v39;
              uint64_t v112 = 64;
            }
            else if (v111 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v109);
              *unsigned int v110 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v110 + v34) = v39;
              *(int16x8_t *)((char *)v110 + v91) = v39;
              *(int16x8_t *)((char *)v110 + 3 * a11) = v39;
              uint64_t v112 = 2;
            }
            else if (v87[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v110, v34, v109, v111, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v112 = 0;
              v110->i64[0] = 0;
              v88[1].i64[1] = 0;
              unsigned int v113 = (uint64_t *)((char *)v110->i64 + v34);
              void *v113 = 0;
              v113[1] = 0;
              uint64_t v114 = (uint64_t *)((char *)v110->i64 + v91);
              *uint64_t v114 = 0;
              v114[1] = 0;
              BOOL v115 = (uint64_t *)((char *)v110->i64 + v214);
              *BOOL v115 = 0;
              v115[1] = 0;
            }
            uint64_t v118 = v109 + v112;
            int64x2_t v119 = v101 + 1;
            unsigned int v120 = v87[3];
            if (v120 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)v118;
              int32x4_t v38 = *(int32x4_t *)(v118 + 16);
              int32x4_t v37 = *(int32x4_t *)(v118 + 32);
              int32x4_t v36 = *(int32x4_t *)(v118 + 48);
              *int64x2_t v119 = vuzp1q_s32(*(int32x4_t *)v118, v37);
              *(int32x4_t *)((char *)v119 + v34) = vuzp2q_s32(v125, v37);
              int64x2_t v126 = (int32x4_t *)((char *)v119 + v91);
              int32x4_t *v126 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v126 + v34) = v39;
              uint64_t v121 = 64;
            }
            else if (v120 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v118);
              *int64x2_t v119 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v119 + v34) = v39;
              *(int16x8_t *)((char *)v119 + v91) = v39;
              *(int16x8_t *)((char *)v119 + 3 * a11) = v39;
              uint64_t v121 = 2;
            }
            else if (v87[3])
            {
              uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v119, v34, v118, v120, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v121 = 0;
              v119->i64[0] = 0;
              v101[1].i64[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v119->i64 + v34);
              void *v122 = 0;
              v122[1] = 0;
              int64x2_t v123 = (uint64_t *)((char *)v119->i64 + v91);
              void *v123 = 0;
              v123[1] = 0;
              int64x2_t v124 = (uint64_t *)((char *)v119->i64 + v214);
              void *v124 = 0;
              v124[1] = 0;
            }
            uint64_t v127 = v118 + v121;
            int64x2_t v128 = (int32x4_t *)((char *)v88 + v217);
            unsigned int v129 = v87[4];
            if (v129 == 63)
            {
              int32x4_t v134 = *(int32x4_t *)v127;
              int32x4_t v38 = *(int32x4_t *)(v127 + 16);
              int32x4_t v37 = *(int32x4_t *)(v127 + 32);
              int32x4_t v36 = *(int32x4_t *)(v127 + 48);
              *int64x2_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v37);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v134, v37);
              unsigned int v135 = (int32x4_t *)((char *)v128 + v91);
              int32x4_t *v135 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v135 + v34) = v39;
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v127);
              *int64x2_t v128 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v128 + v34) = v39;
              *(int16x8_t *)((char *)v128 + v91) = v39;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v39;
              uint64_t v130 = 2;
            }
            else if (v87[4])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v88 + v217), v34, v127, v129, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v128->i64[1] = 0;
              uint64_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              uint64_t v132 = (uint64_t *)((char *)v128->i64 + v91);
              *uint64_t v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v214);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v136 = v127 + v130;
            char v137 = (int32x4_t *)((char *)v88 + 12 * a11);
            unsigned int v138 = v87[5];
            if (v138 == 63)
            {
              int32x4_t v143 = *(int32x4_t *)v136;
              int32x4_t v38 = *(int32x4_t *)(v136 + 16);
              int32x4_t v37 = *(int32x4_t *)(v136 + 32);
              int32x4_t v36 = *(int32x4_t *)(v136 + 48);
              *char v137 = vuzp1q_s32(*(int32x4_t *)v136, v37);
              *(int32x4_t *)((char *)v137 + v34) = vuzp2q_s32(v143, v37);
              int64x2_t v144 = (int32x4_t *)((char *)v137 + v91);
              int32x4_t *v144 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v144 + v34) = v39;
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v136);
              *char v137 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v137 + v34) = v39;
              *(int16x8_t *)((char *)v137 + v91) = v39;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v39;
              uint64_t v139 = 2;
            }
            else if (v87[5])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v137->i64[1] = 0;
              float32x4_t v140 = (uint64_t *)((char *)v137->i64 + v34);
              *float32x4_t v140 = 0;
              v140[1] = 0;
              int64x2_t v141 = (uint64_t *)((char *)v137->i64 + v91);
              *int64x2_t v141 = 0;
              v141[1] = 0;
              int64x2_t v142 = (uint64_t *)((char *)v137->i64 + v214);
              *int64x2_t v142 = 0;
              v142[1] = 0;
            }
            uint64_t v145 = v136 + v139;
            int64x2_t v146 = v128 + 1;
            unsigned int v147 = v87[6];
            if (v147 == 63)
            {
              int32x4_t v152 = *(int32x4_t *)v145;
              int32x4_t v38 = *(int32x4_t *)(v145 + 16);
              int32x4_t v37 = *(int32x4_t *)(v145 + 32);
              int32x4_t v36 = *(int32x4_t *)(v145 + 48);
              int32x4_t *v146 = vuzp1q_s32(*(int32x4_t *)v145, v37);
              *(int32x4_t *)((char *)v146 + v34) = vuzp2q_s32(v152, v37);
              int16x4_t v153 = (int32x4_t *)((char *)v146 + v91);
              int32x4_t *v153 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v153 + v34) = v39;
              uint64_t v148 = 64;
            }
            else if (v147 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v145);
              int32x4_t *v146 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v146 + v34) = v39;
              *(int16x8_t *)((char *)v146 + v91) = v39;
              *(int16x8_t *)((char *)v146 + 3 * a11) = v39;
              uint64_t v148 = 2;
            }
            else if (v87[6])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v146, v34, v145, v147, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v148 = 0;
              v146->i64[0] = 0;
              v128[1].i64[1] = 0;
              int64x2_t v149 = (uint64_t *)((char *)v146->i64 + v34);
              *int64x2_t v149 = 0;
              v149[1] = 0;
              int64x2_t v150 = (uint64_t *)((char *)v146->i64 + v91);
              *int64x2_t v150 = 0;
              v150[1] = 0;
              int64x2_t v151 = (uint64_t *)((char *)v146->i64 + v214);
              void *v151 = 0;
              v151[1] = 0;
            }
            uint64_t v154 = v145 + v148;
            uint64_t v155 = v137 + 1;
            unsigned int v156 = v87[7];
            if (v156 == 63)
            {
              int32x4_t v160 = *(int32x4_t *)v154;
              int32x4_t v38 = *(int32x4_t *)(v154 + 16);
              int32x4_t v37 = *(int32x4_t *)(v154 + 32);
              int32x4_t v36 = *(int32x4_t *)(v154 + 48);
              int32x4_t *v155 = vuzp1q_s32(*(int32x4_t *)v154, v37);
              *(int32x4_t *)((char *)v155 + v34) = vuzp2q_s32(v160, v37);
              int64x2_t v161 = (int32x4_t *)((char *)v155 + v91);
              *int64x2_t v161 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v161 + v34) = v39;
              unsigned int v45 = a7;
              uint64_t v17 = v230;
            }
            else
            {
              unsigned int v45 = a7;
              uint64_t v17 = v230;
              if (v156 == 1)
              {
                int16x8_t v39 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t *v155 = (int32x4_t)v39;
                *(int16x8_t *)((char *)v155 + v34) = v39;
                *(int16x8_t *)((char *)v155 + v91) = v39;
                *(int16x8_t *)((char *)v155 + 3 * a11) = v39;
              }
              else if (v156)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v155, v34, v154, v156, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v155->i64[0] = 0;
                v155->i64[1] = 0;
                unsigned int v157 = (uint64_t *)((char *)v155->i64 + v34);
                void *v157 = 0;
                v157[1] = 0;
                uint64_t v158 = (uint64_t *)((char *)v155->i64 + v91);
                *uint64_t v158 = 0;
                v158[1] = 0;
                int8x8_t v159 = (uint64_t *)((char *)v155->i64 + v214);
                *int8x8_t v159 = 0;
                v159[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v230;
          block[5] = v83;
          char v241 = v51;
          char v242 = v233;
          int v237 = v219;
          unsigned int v238 = v49 - v47;
          block[6] = v87;
          int64x2_t v235 = v88;
          uint64_t v34 = a11;
          uint64_t v236 = a11;
          unsigned int v239 = v227;
          unsigned int v240 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v230 + 8) + 7384), block);
            unsigned int v45 = a7;
            uint64_t v17 = v230;
LABEL_47:
            unsigned int v46 = v42 + 1;
            goto LABEL_48;
          }
          unsigned int v96 = *v87;
          if (v96 == 63)
          {
            int32x4_t v162 = v83[1];
            int32x4_t v37 = v83[2];
            int32x4_t v36 = v83[3];
            int32x4_t v163 = vuzp2q_s32(*v83, v37);
            int32x4_t v244 = vuzp1q_s32(*v83, v37);
            int32x4_t v246 = v163;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v162, v36);
            int32x4_t v38 = vuzp2q_s32(v162, v36);
            int16x8_t v248 = v39;
            int32x4_t v250 = v38;
            uint64_t v97 = 64;
          }
          else if (v96 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16(v83->i16);
            int32x4_t v244 = (int32x4_t)v39;
            int32x4_t v246 = (int32x4_t)v39;
            int16x8_t v248 = v39;
            int32x4_t v250 = (int32x4_t)v39;
            uint64_t v97 = 2;
          }
          else if (*v87)
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 32, (uint64_t)v83, v96, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int16x8_t v248 = 0uLL;
            int32x4_t v250 = 0uLL;
          }
          uint64_t v164 = (uint64_t)v83->i64 + v97;
          unsigned int v165 = v87[1];
          if (v165 == 63)
          {
            int32x4_t v167 = *(int32x4_t *)(v164 + 16);
            int32x4_t v37 = *(int32x4_t *)(v164 + 32);
            int32x4_t v36 = *(int32x4_t *)(v164 + 48);
            int32x4_t v168 = vuzp2q_s32(*(int32x4_t *)v164, v37);
            int32x4_t v252 = vuzp1q_s32(*(int32x4_t *)v164, v37);
            int32x4_t v254 = v168;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v167, v36);
            int32x4_t v38 = vuzp2q_s32(v167, v36);
            int16x8_t v256 = v39;
            int32x4_t v258 = v38;
            uint64_t v166 = 64;
          }
          else if (v165 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v164);
            int32x4_t v252 = (int32x4_t)v39;
            int32x4_t v254 = (int32x4_t)v39;
            int16x8_t v256 = v39;
            int32x4_t v258 = (int32x4_t)v39;
            uint64_t v166 = 2;
          }
          else if (v87[1])
          {
            uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 32, v164, v165, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v166 = 0;
            int32x4_t v252 = 0uLL;
            int32x4_t v254 = 0uLL;
            int16x8_t v256 = 0uLL;
            int32x4_t v258 = 0uLL;
          }
          uint64_t v169 = v164 + v166;
          unsigned int v170 = v87[2];
          if (v170 == 63)
          {
            int32x4_t v172 = *(int32x4_t *)(v169 + 16);
            int32x4_t v37 = *(int32x4_t *)(v169 + 32);
            int32x4_t v36 = *(int32x4_t *)(v169 + 48);
            int32x4_t v173 = vuzp2q_s32(*(int32x4_t *)v169, v37);
            int32x4_t v245 = vuzp1q_s32(*(int32x4_t *)v169, v37);
            int32x4_t v247 = v173;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v172, v36);
            int32x4_t v38 = vuzp2q_s32(v172, v36);
            int16x8_t v249 = v39;
            int32x4_t v251 = v38;
            uint64_t v171 = 64;
          }
          else if (v170 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v169);
            int32x4_t v245 = (int32x4_t)v39;
            int32x4_t v247 = (int32x4_t)v39;
            int16x8_t v249 = v39;
            int32x4_t v251 = (int32x4_t)v39;
            uint64_t v171 = 2;
          }
          else if (v87[2])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 32, v169, v170, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v171 = 0;
            int32x4_t v245 = 0uLL;
            int32x4_t v247 = 0uLL;
            int16x8_t v249 = 0uLL;
            int32x4_t v251 = 0uLL;
          }
          uint64_t v174 = v169 + v171;
          unsigned int v175 = v87[3];
          if (v175 == 63)
          {
            int32x4_t v177 = *(int32x4_t *)(v174 + 16);
            int32x4_t v37 = *(int32x4_t *)(v174 + 32);
            int32x4_t v36 = *(int32x4_t *)(v174 + 48);
            int32x4_t v178 = vuzp2q_s32(*(int32x4_t *)v174, v37);
            int32x4_t v253 = vuzp1q_s32(*(int32x4_t *)v174, v37);
            int32x4_t v255 = v178;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v177, v36);
            int32x4_t v38 = vuzp2q_s32(v177, v36);
            int16x8_t v257 = v39;
            int32x4_t v259 = v38;
            uint64_t v176 = 64;
          }
          else if (v175 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v174);
            int32x4_t v253 = (int32x4_t)v39;
            int32x4_t v255 = (int32x4_t)v39;
            int16x8_t v257 = v39;
            int32x4_t v259 = (int32x4_t)v39;
            uint64_t v176 = 2;
          }
          else if (v87[3])
          {
            uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 32, v174, v175, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v176 = 0;
            int32x4_t v253 = 0uLL;
            int32x4_t v255 = 0uLL;
            int16x8_t v257 = 0uLL;
            int32x4_t v259 = 0uLL;
          }
          uint64_t v179 = v174 + v176;
          unsigned int v180 = v87[4];
          if (v180 == 63)
          {
            int32x4_t v182 = *(int32x4_t *)(v179 + 16);
            int32x4_t v37 = *(int32x4_t *)(v179 + 32);
            int32x4_t v36 = *(int32x4_t *)(v179 + 48);
            int32x4_t v183 = vuzp2q_s32(*(int32x4_t *)v179, v37);
            int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v179, v37);
            int32x4_t v262 = v183;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v182, v36);
            int32x4_t v38 = vuzp2q_s32(v182, v36);
            int16x8_t v264 = v39;
            int32x4_t v266 = v38;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v179);
            int32x4_t v260 = (int32x4_t)v39;
            int32x4_t v262 = (int32x4_t)v39;
            int16x8_t v264 = v39;
            int32x4_t v266 = (int32x4_t)v39;
            uint64_t v181 = 2;
          }
          else if (v87[4])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v179, v180, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v181 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v262 = 0uLL;
            int16x8_t v264 = 0uLL;
            int32x4_t v266 = 0uLL;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v87[5];
          if (v185 == 63)
          {
            int32x4_t v187 = *(int32x4_t *)(v184 + 16);
            int32x4_t v37 = *(int32x4_t *)(v184 + 32);
            int32x4_t v36 = *(int32x4_t *)(v184 + 48);
            int32x4_t v188 = vuzp2q_s32(*(int32x4_t *)v184, v37);
            int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v184, v37);
            int32x4_t v270 = v188;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v187, v36);
            int32x4_t v38 = vuzp2q_s32(v187, v36);
            int16x8_t v272 = v39;
            int32x4_t v274 = v38;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v184);
            int32x4_t v268 = (int32x4_t)v39;
            int32x4_t v270 = (int32x4_t)v39;
            int16x8_t v272 = v39;
            int32x4_t v274 = (int32x4_t)v39;
            uint64_t v186 = 2;
          }
          else if (v87[5])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v184, v185, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v186 = 0;
            int32x4_t v268 = 0uLL;
            int32x4_t v270 = 0uLL;
            int16x8_t v272 = 0uLL;
            int32x4_t v274 = 0uLL;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v87[6];
          if (v190 == 63)
          {
            int32x4_t v192 = *(int32x4_t *)(v189 + 16);
            int32x4_t v37 = *(int32x4_t *)(v189 + 32);
            int32x4_t v36 = *(int32x4_t *)(v189 + 48);
            int32x4_t v193 = vuzp2q_s32(*(int32x4_t *)v189, v37);
            int32x4_t v261 = vuzp1q_s32(*(int32x4_t *)v189, v37);
            int32x4_t v263 = v193;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v192, v36);
            int32x4_t v38 = vuzp2q_s32(v192, v36);
            int16x8_t v265 = v39;
            int32x4_t v267 = v38;
            uint64_t v191 = 64;
          }
          else if (v190 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v189);
            int32x4_t v261 = (int32x4_t)v39;
            int32x4_t v263 = (int32x4_t)v39;
            int16x8_t v265 = v39;
            int32x4_t v267 = (int32x4_t)v39;
            uint64_t v191 = 2;
          }
          else if (v87[6])
          {
            uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 32, v189, v190, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v191 = 0;
            int32x4_t v261 = 0uLL;
            int32x4_t v263 = 0uLL;
            int16x8_t v265 = 0uLL;
            int32x4_t v267 = 0uLL;
          }
          uint64_t v194 = v189 + v191;
          unsigned int v195 = v87[7];
          if (v195 == 63)
          {
            int32x4_t v196 = *(int32x4_t *)(v194 + 16);
            int32x4_t v37 = *(int32x4_t *)(v194 + 32);
            int32x4_t v36 = *(int32x4_t *)(v194 + 48);
            int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v194, v37);
            int32x4_t v269 = vuzp1q_s32(*(int32x4_t *)v194, v37);
            int32x4_t v271 = v197;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v196, v36);
            int32x4_t v38 = vuzp2q_s32(v196, v36);
            int16x8_t v273 = v39;
            int32x4_t v275 = v38;
            unsigned int v45 = a7;
            uint64_t v17 = v230;
          }
          else
          {
            unsigned int v45 = a7;
            uint64_t v17 = v230;
            if (v195 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v194);
              int32x4_t v269 = (int32x4_t)v39;
              int32x4_t v271 = (int32x4_t)v39;
              int16x8_t v273 = v39;
              int32x4_t v275 = (int32x4_t)v39;
            }
            else if (v195)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, v194, v195, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              int32x4_t v269 = 0uLL;
              int32x4_t v271 = 0uLL;
              int16x8_t v273 = 0uLL;
              int32x4_t v275 = 0uLL;
            }
          }
          unint64_t v198 = v239;
          unsigned int v46 = v42 + 1;
          if (v239)
          {
            unint64_t v199 = 0;
            float32x4_t v200 = &v244.i8[32 * v237 + 2 * v238];
            unsigned int v201 = v240;
            do
            {
              if (v201)
              {
                uint64_t v202 = 0;
                uint64_t v203 = &v235->i8[v236 * v199];
                do
                {
                  v203[v202] = v200[v202];
                  ++v202;
                  unsigned int v201 = v240;
                }
                while (2 * (unint64_t)v240 > v202);
                unint64_t v198 = v239;
              }
              ++v199;
              v200 += 32;
            }
            while (v199 < v198);
          }
LABEL_48:
          BOOL v22 = v42 == v221 >> 4;
          unsigned int v42 = v46;
        }
        while (!v22);
        BOOL v22 = v21++ == v208;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v276 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v229 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v209 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v229 >> 4;
  unsigned int v208 = v209 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v223 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v222 = 0;
LABEL_32:
      unsigned int v220 = v27 - 4;
      unsigned int v213 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v206 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v222 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v222 = 0;
  unsigned int v206 = 0;
  unsigned int v213 = 0;
  unsigned int v220 = 0;
LABEL_33:
  if (v21 <= v208)
  {
    unsigned int v221 = a7 + a9 - 1;
    if (a7 >> 4 <= v221 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v232 = v19 >> 4;
      unsigned int v205 = v20 >> 4;
      int v231 = (v19 & 0xF) + 1;
      int v204 = (v20 & 0xF) + 1;
      uint64_t v217 = 8 * a11;
      uint64_t v218 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL)));
      *(int32x2_t *)v38.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v37.i8))));
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v38.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v216 = v39.i32[0] | v39.i32[1];
      BOOL v211 = v39.i32[1] != 0;
      uint64_t v212 = v39.i64[0];
      BOOL v210 = v39.i32[0] != 0;
      uint64_t v230 = a1;
      uint64_t v214 = 3 * a11;
      uint64_t v215 = 2 * a11;
      do
      {
        unsigned int v40 = (16 * v21) | 0xF;
        if (16 * v21 <= v229) {
          int v41 = v229;
        }
        else {
          int v41 = 16 * v21;
        }
        if (v209 < v40) {
          unsigned int v40 = v209;
        }
        int v219 = v41 - 16 * v21;
        int v227 = v40 - v41 + 1;
        unsigned int v42 = a7 >> 4;
        int v43 = v204;
        if (v21 != v205) {
          int v43 = 16;
        }
        unsigned int v233 = v43;
        uint64_t v44 = v21 & ~(-1 << v213);
        uint64_t v226 = a2 + (v41 - v229) * v34;
        unsigned int v45 = a7;
        do
        {
          unsigned int v47 = 16 * v42;
          unsigned int v48 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v45) {
            int v49 = v45;
          }
          else {
            int v49 = 16 * v42;
          }
          if (v221 < v48) {
            unsigned int v48 = a7 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v42 == v232) {
            unsigned int v51 = v231;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v21 >= v229 && v47 >= v45)
          {
            int v53 = v231;
            if (v42 != v232) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v227 != v233;
          }
          if (v222)
          {
            if (v220 | v213)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v220 != 0;
              BOOL v59 = v213 != 0;
              unsigned int v60 = v220;
              unsigned int v61 = v213;
              do
              {
                --v60;
                if (v58) {
                  v56 |= (unint64_t)(v42 & ~(-1 << v220) & v57) << v55++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v61;
                if (v59) {
                  v56 |= (unint64_t)(v44 & v57) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v59 = v61 != 0;
                BOOL v58 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v17 + 320) * ((v42 >> v220) + (v21 >> v213) * v206) + (v56 << 9);
          }
          else
          {
            if (v216)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v211;
              BOOL v66 = v210;
              int v67 = HIDWORD(v212);
              int v68 = v212;
              do
              {
                --v67;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v42) << v62++;
                }
                else {
                  int v67 = 0;
                }
                --v68;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v21) << v62++;
                }
                else {
                  int v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v66 = v68 != 0;
                BOOL v65 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 9;
          }
          unsigned int v70 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_115:
              unint64_t v77 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_115;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v42) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v21) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_116:
          int64x2_t v83 = (int32x4_t *)(a3 + v69);
          if (v223)
          {
            uint64_t v84 = v44;
            int v85 = v50;
            BOOL v86 = v52;
            memcpy(__dst, (const void *)(a3 + v69), sizeof(__dst));
            BOOL v52 = v86;
            int v50 = v85;
            uint64_t v44 = v84;
            int64x2_t v83 = (int32x4_t *)__dst;
          }
          uint64_t v87 = (unsigned __int8 *)(a4 + 8 * v77);
          unsigned int v88 = (int32x4_t *)(v226 + 2 * (v49 - v45));
          char v89 = v51 < 0x10 || v52;
          if ((v89 & 1) == 0 && v233 > 0xF)
          {
            unsigned int v90 = *v87;
            if (v90 == 63)
            {
              int32x4_t v98 = *v83;
              int32x4_t v38 = v83[1];
              int32x4_t v37 = v83[2];
              int32x4_t v36 = v83[3];
              int32x4_t *v88 = vuzp1q_s32(*v83, v37);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v88 + a11) = vuzp2q_s32(v98, v37);
              uint64_t v91 = 2 * a11;
              int64x2_t v99 = (int32x4_t *)((char *)v88 + v215);
              *int64x2_t v99 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v99 + a11) = v39;
              uint64_t v92 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 1)
              {
                int16x8_t v39 = vld1q_dup_s16(v83->i16);
                int32x4_t *v88 = (int32x4_t)v39;
                *(int16x8_t *)((char *)v88 + a11) = v39;
                *(int16x8_t *)((char *)v88 + 2 * a11) = v39;
                *(int16x8_t *)((char *)v88 + 3 * a11) = v39;
                uint64_t v92 = 2;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, a11, (uint64_t)v83, v90, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v92 = 0;
                v88->i64[0] = 0;
                v88->i64[1] = 0;
                int16x4_t v93 = (uint64_t *)((char *)v88->i64 + a11);
                *int16x4_t v93 = 0;
                v93[1] = 0;
                int64x2_t v94 = (uint64_t *)((char *)v88->i64 + v215);
                *int64x2_t v94 = 0;
                v94[1] = 0;
                int64x2_t v95 = (uint64_t *)((char *)v88->i64 + v214);
                *int64x2_t v95 = 0;
                v95[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)v83->i64 + v92;
            int64x2_t v101 = (int32x4_t *)((char *)v88 + v218);
            unsigned int v102 = v87[1];
            if (v102 == 63)
            {
              int32x4_t v107 = *(int32x4_t *)v100;
              int32x4_t v38 = *(int32x4_t *)(v100 + 16);
              int32x4_t v37 = *(int32x4_t *)(v100 + 32);
              int32x4_t v36 = *(int32x4_t *)(v100 + 48);
              int32x4_t *v101 = vuzp1q_s32(*(int32x4_t *)v100, v37);
              *(int32x4_t *)((char *)v101 + v34) = vuzp2q_s32(v107, v37);
              uint64_t v108 = (int32x4_t *)((char *)v101 + v91);
              int32x4_t *v108 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v108 + v34) = v39;
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v100);
              int32x4_t *v101 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v101 + v34) = v39;
              *(int16x8_t *)((char *)v101 + v91) = v39;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v39;
              uint64_t v103 = 2;
            }
            else if (v87[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v88 + v218), v34, v100, v102, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v101->i64[1] = 0;
              int64x2_t v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int64x2_t v104 = 0;
              v104[1] = 0;
              int64x2_t v105 = (uint64_t *)((char *)v101->i64 + v91);
              *int64x2_t v105 = 0;
              v105[1] = 0;
              int64x2_t v106 = (uint64_t *)((char *)v101->i64 + v214);
              *int64x2_t v106 = 0;
              v106[1] = 0;
            }
            uint64_t v109 = v100 + v103;
            unsigned int v110 = v88 + 1;
            unsigned int v111 = v87[2];
            if (v111 == 63)
            {
              int32x4_t v116 = *(int32x4_t *)v109;
              int32x4_t v38 = *(int32x4_t *)(v109 + 16);
              int32x4_t v37 = *(int32x4_t *)(v109 + 32);
              int32x4_t v36 = *(int32x4_t *)(v109 + 48);
              *unsigned int v110 = vuzp1q_s32(*(int32x4_t *)v109, v37);
              *(int32x4_t *)((char *)v110 + v34) = vuzp2q_s32(v116, v37);
              int64x2_t v117 = (int32x4_t *)((char *)v110 + v91);
              *int64x2_t v117 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v117 + v34) = v39;
              uint64_t v112 = 64;
            }
            else if (v111 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v109);
              *unsigned int v110 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v110 + v34) = v39;
              *(int16x8_t *)((char *)v110 + v91) = v39;
              *(int16x8_t *)((char *)v110 + 3 * a11) = v39;
              uint64_t v112 = 2;
            }
            else if (v87[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v110, v34, v109, v111, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v112 = 0;
              v110->i64[0] = 0;
              v88[1].i64[1] = 0;
              unsigned int v113 = (uint64_t *)((char *)v110->i64 + v34);
              void *v113 = 0;
              v113[1] = 0;
              uint64_t v114 = (uint64_t *)((char *)v110->i64 + v91);
              *uint64_t v114 = 0;
              v114[1] = 0;
              BOOL v115 = (uint64_t *)((char *)v110->i64 + v214);
              *BOOL v115 = 0;
              v115[1] = 0;
            }
            uint64_t v118 = v109 + v112;
            int64x2_t v119 = v101 + 1;
            unsigned int v120 = v87[3];
            if (v120 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)v118;
              int32x4_t v38 = *(int32x4_t *)(v118 + 16);
              int32x4_t v37 = *(int32x4_t *)(v118 + 32);
              int32x4_t v36 = *(int32x4_t *)(v118 + 48);
              *int64x2_t v119 = vuzp1q_s32(*(int32x4_t *)v118, v37);
              *(int32x4_t *)((char *)v119 + v34) = vuzp2q_s32(v125, v37);
              int64x2_t v126 = (int32x4_t *)((char *)v119 + v91);
              int32x4_t *v126 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v126 + v34) = v39;
              uint64_t v121 = 64;
            }
            else if (v120 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v118);
              *int64x2_t v119 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v119 + v34) = v39;
              *(int16x8_t *)((char *)v119 + v91) = v39;
              *(int16x8_t *)((char *)v119 + 3 * a11) = v39;
              uint64_t v121 = 2;
            }
            else if (v87[3])
            {
              uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v119, v34, v118, v120, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v121 = 0;
              v119->i64[0] = 0;
              v101[1].i64[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v119->i64 + v34);
              void *v122 = 0;
              v122[1] = 0;
              int64x2_t v123 = (uint64_t *)((char *)v119->i64 + v91);
              void *v123 = 0;
              v123[1] = 0;
              int64x2_t v124 = (uint64_t *)((char *)v119->i64 + v214);
              void *v124 = 0;
              v124[1] = 0;
            }
            uint64_t v127 = v118 + v121;
            int64x2_t v128 = (int32x4_t *)((char *)v88 + v217);
            unsigned int v129 = v87[4];
            if (v129 == 63)
            {
              int32x4_t v134 = *(int32x4_t *)v127;
              int32x4_t v38 = *(int32x4_t *)(v127 + 16);
              int32x4_t v37 = *(int32x4_t *)(v127 + 32);
              int32x4_t v36 = *(int32x4_t *)(v127 + 48);
              *int64x2_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v37);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v134, v37);
              unsigned int v135 = (int32x4_t *)((char *)v128 + v91);
              int32x4_t *v135 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v135 + v34) = v39;
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v127);
              *int64x2_t v128 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v128 + v34) = v39;
              *(int16x8_t *)((char *)v128 + v91) = v39;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v39;
              uint64_t v130 = 2;
            }
            else if (v87[4])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v88 + v217), v34, v127, v129, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v128->i64[1] = 0;
              uint64_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              uint64_t v132 = (uint64_t *)((char *)v128->i64 + v91);
              *uint64_t v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v214);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v136 = v127 + v130;
            char v137 = (int32x4_t *)((char *)v88 + 12 * a11);
            unsigned int v138 = v87[5];
            if (v138 == 63)
            {
              int32x4_t v143 = *(int32x4_t *)v136;
              int32x4_t v38 = *(int32x4_t *)(v136 + 16);
              int32x4_t v37 = *(int32x4_t *)(v136 + 32);
              int32x4_t v36 = *(int32x4_t *)(v136 + 48);
              *char v137 = vuzp1q_s32(*(int32x4_t *)v136, v37);
              *(int32x4_t *)((char *)v137 + v34) = vuzp2q_s32(v143, v37);
              int64x2_t v144 = (int32x4_t *)((char *)v137 + v91);
              int32x4_t *v144 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v144 + v34) = v39;
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v136);
              *char v137 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v137 + v34) = v39;
              *(int16x8_t *)((char *)v137 + v91) = v39;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v39;
              uint64_t v139 = 2;
            }
            else if (v87[5])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v137->i64[1] = 0;
              float32x4_t v140 = (uint64_t *)((char *)v137->i64 + v34);
              *float32x4_t v140 = 0;
              v140[1] = 0;
              int64x2_t v141 = (uint64_t *)((char *)v137->i64 + v91);
              *int64x2_t v141 = 0;
              v141[1] = 0;
              int64x2_t v142 = (uint64_t *)((char *)v137->i64 + v214);
              *int64x2_t v142 = 0;
              v142[1] = 0;
            }
            uint64_t v145 = v136 + v139;
            int64x2_t v146 = v128 + 1;
            unsigned int v147 = v87[6];
            if (v147 == 63)
            {
              int32x4_t v152 = *(int32x4_t *)v145;
              int32x4_t v38 = *(int32x4_t *)(v145 + 16);
              int32x4_t v37 = *(int32x4_t *)(v145 + 32);
              int32x4_t v36 = *(int32x4_t *)(v145 + 48);
              int32x4_t *v146 = vuzp1q_s32(*(int32x4_t *)v145, v37);
              *(int32x4_t *)((char *)v146 + v34) = vuzp2q_s32(v152, v37);
              int16x4_t v153 = (int32x4_t *)((char *)v146 + v91);
              int32x4_t *v153 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v153 + v34) = v39;
              uint64_t v148 = 64;
            }
            else if (v147 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v145);
              int32x4_t *v146 = (int32x4_t)v39;
              *(int16x8_t *)((char *)v146 + v34) = v39;
              *(int16x8_t *)((char *)v146 + v91) = v39;
              *(int16x8_t *)((char *)v146 + 3 * a11) = v39;
              uint64_t v148 = 2;
            }
            else if (v87[6])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v146, v34, v145, v147, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v148 = 0;
              v146->i64[0] = 0;
              v128[1].i64[1] = 0;
              int64x2_t v149 = (uint64_t *)((char *)v146->i64 + v34);
              *int64x2_t v149 = 0;
              v149[1] = 0;
              int64x2_t v150 = (uint64_t *)((char *)v146->i64 + v91);
              *int64x2_t v150 = 0;
              v150[1] = 0;
              int64x2_t v151 = (uint64_t *)((char *)v146->i64 + v214);
              void *v151 = 0;
              v151[1] = 0;
            }
            uint64_t v154 = v145 + v148;
            uint64_t v155 = v137 + 1;
            unsigned int v156 = v87[7];
            if (v156 == 63)
            {
              int32x4_t v160 = *(int32x4_t *)v154;
              int32x4_t v38 = *(int32x4_t *)(v154 + 16);
              int32x4_t v37 = *(int32x4_t *)(v154 + 32);
              int32x4_t v36 = *(int32x4_t *)(v154 + 48);
              int32x4_t *v155 = vuzp1q_s32(*(int32x4_t *)v154, v37);
              *(int32x4_t *)((char *)v155 + v34) = vuzp2q_s32(v160, v37);
              int64x2_t v161 = (int32x4_t *)((char *)v155 + v91);
              *int64x2_t v161 = vuzp1q_s32(v38, v36);
              int16x8_t v39 = (int16x8_t)vuzp2q_s32(v38, v36);
              *(int16x8_t *)((char *)v161 + v34) = v39;
              unsigned int v45 = a7;
              uint64_t v17 = v230;
            }
            else
            {
              unsigned int v45 = a7;
              uint64_t v17 = v230;
              if (v156 == 1)
              {
                int16x8_t v39 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t *v155 = (int32x4_t)v39;
                *(int16x8_t *)((char *)v155 + v34) = v39;
                *(int16x8_t *)((char *)v155 + v91) = v39;
                *(int16x8_t *)((char *)v155 + 3 * a11) = v39;
              }
              else if (v156)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v155, v34, v154, v156, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v155->i64[0] = 0;
                v155->i64[1] = 0;
                unsigned int v157 = (uint64_t *)((char *)v155->i64 + v34);
                void *v157 = 0;
                v157[1] = 0;
                uint64_t v158 = (uint64_t *)((char *)v155->i64 + v91);
                *uint64_t v158 = 0;
                v158[1] = 0;
                int8x8_t v159 = (uint64_t *)((char *)v155->i64 + v214);
                *int8x8_t v159 = 0;
                v159[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v230;
          block[5] = v83;
          char v241 = v51;
          char v242 = v233;
          int v237 = v219;
          unsigned int v238 = v49 - v47;
          block[6] = v87;
          int64x2_t v235 = v88;
          uint64_t v34 = a11;
          uint64_t v236 = a11;
          unsigned int v239 = v227;
          unsigned int v240 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v230 + 8) + 7384), block);
            unsigned int v45 = a7;
            uint64_t v17 = v230;
LABEL_47:
            unsigned int v46 = v42 + 1;
            goto LABEL_48;
          }
          unsigned int v96 = *v87;
          if (v96 == 63)
          {
            int32x4_t v162 = v83[1];
            int32x4_t v37 = v83[2];
            int32x4_t v36 = v83[3];
            int32x4_t v163 = vuzp2q_s32(*v83, v37);
            int32x4_t v244 = vuzp1q_s32(*v83, v37);
            int32x4_t v246 = v163;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v162, v36);
            int32x4_t v38 = vuzp2q_s32(v162, v36);
            int16x8_t v248 = v39;
            int32x4_t v250 = v38;
            uint64_t v97 = 64;
          }
          else if (v96 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16(v83->i16);
            int32x4_t v244 = (int32x4_t)v39;
            int32x4_t v246 = (int32x4_t)v39;
            int16x8_t v248 = v39;
            int32x4_t v250 = (int32x4_t)v39;
            uint64_t v97 = 2;
          }
          else if (*v87)
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 32, (uint64_t)v83, v96, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v97 = 0;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int16x8_t v248 = 0uLL;
            int32x4_t v250 = 0uLL;
          }
          uint64_t v164 = (uint64_t)v83->i64 + v97;
          unsigned int v165 = v87[1];
          if (v165 == 63)
          {
            int32x4_t v167 = *(int32x4_t *)(v164 + 16);
            int32x4_t v37 = *(int32x4_t *)(v164 + 32);
            int32x4_t v36 = *(int32x4_t *)(v164 + 48);
            int32x4_t v168 = vuzp2q_s32(*(int32x4_t *)v164, v37);
            int32x4_t v252 = vuzp1q_s32(*(int32x4_t *)v164, v37);
            int32x4_t v254 = v168;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v167, v36);
            int32x4_t v38 = vuzp2q_s32(v167, v36);
            int16x8_t v256 = v39;
            int32x4_t v258 = v38;
            uint64_t v166 = 64;
          }
          else if (v165 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v164);
            int32x4_t v252 = (int32x4_t)v39;
            int32x4_t v254 = (int32x4_t)v39;
            int16x8_t v256 = v39;
            int32x4_t v258 = (int32x4_t)v39;
            uint64_t v166 = 2;
          }
          else if (v87[1])
          {
            uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v252, 32, v164, v165, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v166 = 0;
            int32x4_t v252 = 0uLL;
            int32x4_t v254 = 0uLL;
            int16x8_t v256 = 0uLL;
            int32x4_t v258 = 0uLL;
          }
          uint64_t v169 = v164 + v166;
          unsigned int v170 = v87[2];
          if (v170 == 63)
          {
            int32x4_t v172 = *(int32x4_t *)(v169 + 16);
            int32x4_t v37 = *(int32x4_t *)(v169 + 32);
            int32x4_t v36 = *(int32x4_t *)(v169 + 48);
            int32x4_t v173 = vuzp2q_s32(*(int32x4_t *)v169, v37);
            int32x4_t v245 = vuzp1q_s32(*(int32x4_t *)v169, v37);
            int32x4_t v247 = v173;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v172, v36);
            int32x4_t v38 = vuzp2q_s32(v172, v36);
            int16x8_t v249 = v39;
            int32x4_t v251 = v38;
            uint64_t v171 = 64;
          }
          else if (v170 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v169);
            int32x4_t v245 = (int32x4_t)v39;
            int32x4_t v247 = (int32x4_t)v39;
            int16x8_t v249 = v39;
            int32x4_t v251 = (int32x4_t)v39;
            uint64_t v171 = 2;
          }
          else if (v87[2])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 32, v169, v170, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v171 = 0;
            int32x4_t v245 = 0uLL;
            int32x4_t v247 = 0uLL;
            int16x8_t v249 = 0uLL;
            int32x4_t v251 = 0uLL;
          }
          uint64_t v174 = v169 + v171;
          unsigned int v175 = v87[3];
          if (v175 == 63)
          {
            int32x4_t v177 = *(int32x4_t *)(v174 + 16);
            int32x4_t v37 = *(int32x4_t *)(v174 + 32);
            int32x4_t v36 = *(int32x4_t *)(v174 + 48);
            int32x4_t v178 = vuzp2q_s32(*(int32x4_t *)v174, v37);
            int32x4_t v253 = vuzp1q_s32(*(int32x4_t *)v174, v37);
            int32x4_t v255 = v178;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v177, v36);
            int32x4_t v38 = vuzp2q_s32(v177, v36);
            int16x8_t v257 = v39;
            int32x4_t v259 = v38;
            uint64_t v176 = 64;
          }
          else if (v175 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v174);
            int32x4_t v253 = (int32x4_t)v39;
            int32x4_t v255 = (int32x4_t)v39;
            int16x8_t v257 = v39;
            int32x4_t v259 = (int32x4_t)v39;
            uint64_t v176 = 2;
          }
          else if (v87[3])
          {
            uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 32, v174, v175, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v176 = 0;
            int32x4_t v253 = 0uLL;
            int32x4_t v255 = 0uLL;
            int16x8_t v257 = 0uLL;
            int32x4_t v259 = 0uLL;
          }
          uint64_t v179 = v174 + v176;
          unsigned int v180 = v87[4];
          if (v180 == 63)
          {
            int32x4_t v182 = *(int32x4_t *)(v179 + 16);
            int32x4_t v37 = *(int32x4_t *)(v179 + 32);
            int32x4_t v36 = *(int32x4_t *)(v179 + 48);
            int32x4_t v183 = vuzp2q_s32(*(int32x4_t *)v179, v37);
            int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v179, v37);
            int32x4_t v262 = v183;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v182, v36);
            int32x4_t v38 = vuzp2q_s32(v182, v36);
            int16x8_t v264 = v39;
            int32x4_t v266 = v38;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v179);
            int32x4_t v260 = (int32x4_t)v39;
            int32x4_t v262 = (int32x4_t)v39;
            int16x8_t v264 = v39;
            int32x4_t v266 = (int32x4_t)v39;
            uint64_t v181 = 2;
          }
          else if (v87[4])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v179, v180, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v181 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v262 = 0uLL;
            int16x8_t v264 = 0uLL;
            int32x4_t v266 = 0uLL;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v87[5];
          if (v185 == 63)
          {
            int32x4_t v187 = *(int32x4_t *)(v184 + 16);
            int32x4_t v37 = *(int32x4_t *)(v184 + 32);
            int32x4_t v36 = *(int32x4_t *)(v184 + 48);
            int32x4_t v188 = vuzp2q_s32(*(int32x4_t *)v184, v37);
            int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v184, v37);
            int32x4_t v270 = v188;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v187, v36);
            int32x4_t v38 = vuzp2q_s32(v187, v36);
            int16x8_t v272 = v39;
            int32x4_t v274 = v38;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v184);
            int32x4_t v268 = (int32x4_t)v39;
            int32x4_t v270 = (int32x4_t)v39;
            int16x8_t v272 = v39;
            int32x4_t v274 = (int32x4_t)v39;
            uint64_t v186 = 2;
          }
          else if (v87[5])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v184, v185, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v186 = 0;
            int32x4_t v268 = 0uLL;
            int32x4_t v270 = 0uLL;
            int16x8_t v272 = 0uLL;
            int32x4_t v274 = 0uLL;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v87[6];
          if (v190 == 63)
          {
            int32x4_t v192 = *(int32x4_t *)(v189 + 16);
            int32x4_t v37 = *(int32x4_t *)(v189 + 32);
            int32x4_t v36 = *(int32x4_t *)(v189 + 48);
            int32x4_t v193 = vuzp2q_s32(*(int32x4_t *)v189, v37);
            int32x4_t v261 = vuzp1q_s32(*(int32x4_t *)v189, v37);
            int32x4_t v263 = v193;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v192, v36);
            int32x4_t v38 = vuzp2q_s32(v192, v36);
            int16x8_t v265 = v39;
            int32x4_t v267 = v38;
            uint64_t v191 = 64;
          }
          else if (v190 == 1)
          {
            int16x8_t v39 = vld1q_dup_s16((const __int16 *)v189);
            int32x4_t v261 = (int32x4_t)v39;
            int32x4_t v263 = (int32x4_t)v39;
            int16x8_t v265 = v39;
            int32x4_t v267 = (int32x4_t)v39;
            uint64_t v191 = 2;
          }
          else if (v87[6])
          {
            uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 32, v189, v190, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v191 = 0;
            int32x4_t v261 = 0uLL;
            int32x4_t v263 = 0uLL;
            int16x8_t v265 = 0uLL;
            int32x4_t v267 = 0uLL;
          }
          uint64_t v194 = v189 + v191;
          unsigned int v195 = v87[7];
          if (v195 == 63)
          {
            int32x4_t v196 = *(int32x4_t *)(v194 + 16);
            int32x4_t v37 = *(int32x4_t *)(v194 + 32);
            int32x4_t v36 = *(int32x4_t *)(v194 + 48);
            int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v194, v37);
            int32x4_t v269 = vuzp1q_s32(*(int32x4_t *)v194, v37);
            int32x4_t v271 = v197;
            int16x8_t v39 = (int16x8_t)vuzp1q_s32(v196, v36);
            int32x4_t v38 = vuzp2q_s32(v196, v36);
            int16x8_t v273 = v39;
            int32x4_t v275 = v38;
            unsigned int v45 = a7;
            uint64_t v17 = v230;
          }
          else
          {
            unsigned int v45 = a7;
            uint64_t v17 = v230;
            if (v195 == 1)
            {
              int16x8_t v39 = vld1q_dup_s16((const __int16 *)v194);
              int32x4_t v269 = (int32x4_t)v39;
              int32x4_t v271 = (int32x4_t)v39;
              int16x8_t v273 = v39;
              int32x4_t v275 = (int32x4_t)v39;
            }
            else if (v195)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, v194, v195, *(double *)v39.i64, *(double *)v38.i64, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              int32x4_t v269 = 0uLL;
              int32x4_t v271 = 0uLL;
              int16x8_t v273 = 0uLL;
              int32x4_t v275 = 0uLL;
            }
          }
          unint64_t v198 = v239;
          unsigned int v46 = v42 + 1;
          if (v239)
          {
            unint64_t v199 = 0;
            float32x4_t v200 = &v244.i8[32 * v237 + 2 * v238];
            unsigned int v201 = v240;
            do
            {
              if (v201)
              {
                uint64_t v202 = 0;
                uint64_t v203 = &v235->i8[v236 * v199];
                do
                {
                  v203[v202] = v200[v202];
                  ++v202;
                  unsigned int v201 = v240;
                }
                while (2 * (unint64_t)v240 > v202);
                unint64_t v198 = v239;
              }
              ++v199;
              v200 += 32;
            }
            while (v199 < v198);
          }
LABEL_48:
          BOOL v22 = v42 == v221 >> 4;
          unsigned int v42 = v46;
        }
        while (!v22);
        BOOL v22 = v21++ == v208;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v270 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v223 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v202 = a8 + a10 - 1;
  unsigned int v204 = v202 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v217 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v204)
  {
    unsigned int v215 = a7 + a9 - 1;
    unsigned int v201 = a7 >> 4;
    if (a7 >> 4 <= v215 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v198 = a5 - 1;
      unsigned int v226 = (a5 - 1) >> 4;
      int v225 = ((a5 - 1) & 0xF) + 1;
      int v199 = ((a6 - 1) & 0xF) + 1;
      unsigned int v200 = (a6 - 1) >> 4;
      uint64_t v207 = 8 * a11;
      uint64_t v208 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL)));
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v28.i8))));
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v213 = v30.i32[0] | v30.i32[1];
      BOOL v211 = v30.i32[1] != 0;
      uint64_t v212 = v30.i64[0];
      BOOL v210 = v30.i32[0] != 0;
      unint64_t v197 = 8 * v19 * (unint64_t)v18;
      unsigned int v214 = a7;
      uint64_t v224 = v16;
      uint64_t v205 = 3 * a11;
      uint64_t v206 = 2 * a11;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v223) {
          int v32 = v223;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = v201;
        if (v202 < v31) {
          unsigned int v31 = v202;
        }
        unsigned int v222 = 16 * v17;
        int v209 = v32 - 16 * v17;
        int v221 = v31 - v32 + 1;
        int v34 = v199;
        if (v17 != v200) {
          int v34 = 16;
        }
        unsigned int v227 = v34;
        uint64_t v220 = a2 + (v32 - v223) * v25;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v215 < v36) {
            unsigned int v36 = v215;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v226) {
            unsigned int v39 = v225;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v222 >= v223 && v35 >= a7)
          {
            int v41 = v225;
            if (v33 != v226) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v221 != v227;
          }
          if (isLevelTiled)
          {
            unsigned int v183 = 0;
            uint64_t v184 = v197 >> (*(unsigned char *)(v16 + 57) != 0);
            char v185 = 1;
            if (v184 > 127)
            {
              if (v184 > 511)
              {
                if (v184 == 512)
                {
                  unsigned int v183 = 16;
                  char v186 = 1;
                  unsigned int v187 = 16;
                }
                else
                {
                  char v186 = 1;
                  unsigned int v187 = 0;
                  if (v184 == 1024)
                  {
                    unsigned int v187 = 8;
                    unsigned int v183 = 16;
                  }
                }
              }
              else if (v184 == 128)
              {
                char v185 = 0;
                char v186 = 0;
                unsigned int v183 = 32;
                unsigned int v187 = 32;
              }
              else
              {
                char v186 = 1;
                unsigned int v187 = 0;
                if (v184 == 256)
                {
                  char v185 = 0;
                  unsigned int v187 = 16;
                  unsigned int v183 = 32;
                }
              }
            }
            else
            {
              char v186 = 1;
              unsigned int v187 = 0;
              switch(v184)
              {
                case 4:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v187 = 128;
                  unsigned int v183 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v183 = 128;
                  unsigned int v187 = 128;
                  break;
                case 16:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v187 = 64;
                  unsigned int v183 = 128;
                  break;
                case 32:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v183 = 64;
                  unsigned int v187 = 64;
                  break;
                default:
                  if (v184 == 64)
                  {
                    char v185 = 0;
                    char v186 = 0;
                    unsigned int v187 = 32;
                    unsigned int v183 = 64;
                  }
                  break;
              }
            }
            unsigned int v188 = (v183 >> 4) - 1;
            if (v185)
            {
              unsigned int v189 = 0;
              if (v186) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v190 = 32 - __clz(~(-1 << -(char)__clz(((v187 + 15) >> 4) - 1)));
              if (v190 | v189) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v192 = 0;
            }
            else
            {
              unsigned int v189 = 32 - __clz(~(-1 << -(char)__clz(v188)));
              if ((v186 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v190 = 0;
              if (!v189) {
                goto LABEL_242;
              }
LABEL_231:
              int v191 = 0;
              uint64_t v192 = 0;
              int v193 = v33 & v188;
              BOOL v194 = v189 != 0;
              BOOL v195 = v190 != 0;
              int v196 = 1;
              do
              {
                --v189;
                if (v194) {
                  v192 |= (unint64_t)(v196 & v193) << v191++;
                }
                else {
                  unsigned int v189 = 0;
                }
                --v190;
                if (v195) {
                  v192 |= (unint64_t)(v196 & v17 & ((v187 >> 4) - 1)) << v191++;
                }
                else {
                  unsigned int v190 = 0;
                }
                v196 *= 2;
                --v191;
                BOOL v195 = v190 != 0;
                BOOL v194 = v189 != 0;
              }
              while (v190 | v189);
            }
            unint64_t v50 = ((unint64_t)(v35 / v183 + v222 / v187 * ((v183 + v198) / v183)) << 14) + (v192 << 9);
            goto LABEL_59;
          }
          if (v213)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v211;
            BOOL v47 = v210;
            int v48 = HIDWORD(v212);
            int v49 = v212;
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                int v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                int v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          if (v56 | v53)
          {
            int v57 = 0;
            unint64_t v58 = 0;
            BOOL v59 = v53 != 0;
            BOOL v60 = v56 != 0;
            int v61 = 1;
            do
            {
              --v53;
              BOOL v62 = !v59;
              if (v59)
              {
                unint64_t v63 = ((unint64_t)(v61 & v33) << v57) | v58;
              }
              else
              {
                unsigned int v53 = 0;
                unint64_t v63 = v58;
              }
              if (!v62) {
                ++v57;
              }
              --v56;
              if (v60)
              {
                unint64_t v58 = ((unint64_t)(v61 & v17) << v57) | v63;
              }
              else
              {
                unsigned int v56 = 0;
                unint64_t v58 = v63;
              }
              if (v60) {
                ++v57;
              }
              v61 *= 2;
              --v57;
              BOOL v60 = v56 != 0;
              BOOL v59 = v53 != 0;
            }
            while (v56 | v53);
          }
          else
          {
            unint64_t v58 = 0;
          }
          int v64 = (int32x4_t *)(a3 + v50);
          if (v217)
          {
            memcpy(__dst, v64, sizeof(__dst));
            int v64 = (int32x4_t *)__dst;
          }
          BOOL v65 = (unsigned __int8 *)(a4 + 8 * v58);
          BOOL v66 = (int32x4_t *)(v220 + 2 * (v37 - a7));
          char v67 = v39 < 0x10 || v40;
          if ((v67 & 1) != 0 || v227 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v224;
            block[5] = v64;
            char v235 = v39;
            char v236 = v227;
            int v231 = v209;
            unsigned int v232 = v37 - v35;
            block[6] = v65;
            unsigned int v229 = v66;
            uint64_t v25 = a11;
            uint64_t v230 = a11;
            unsigned int v233 = v221;
            unsigned int v234 = v38;
            if (v40)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v224 + 8) + 7384), block);
              a7 = v214;
              uint64_t v16 = v224;
              unsigned int v74 = v33 + 1;
            }
            else
            {
              unsigned int v75 = *v65;
              a7 = v214;
              if (v75 == 63)
              {
                int32x4_t v141 = v64[1];
                int32x4_t v28 = v64[2];
                int32x4_t v27 = v64[3];
                int32x4_t v142 = vuzp2q_s32(*v64, v28);
                int32x4_t v238 = vuzp1q_s32(*v64, v28);
                int32x4_t v240 = v142;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v141, v27);
                int32x4_t v29 = vuzp2q_s32(v141, v27);
                int16x8_t v242 = v30;
                int32x4_t v244 = v29;
                uint64_t v76 = 64;
              }
              else if (v75 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16(v64->i16);
                int32x4_t v238 = (int32x4_t)v30;
                int32x4_t v240 = (int32x4_t)v30;
                int16x8_t v242 = v30;
                int32x4_t v244 = (int32x4_t)v30;
                uint64_t v76 = 2;
              }
              else if (*v65)
              {
                uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 32, (uint64_t)v64, v75, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v76 = 0;
                int32x4_t v238 = 0uLL;
                int32x4_t v240 = 0uLL;
                int16x8_t v242 = 0uLL;
                int32x4_t v244 = 0uLL;
              }
              uint64_t v143 = (uint64_t)v64->i64 + v76;
              unsigned int v144 = v65[1];
              if (v144 == 63)
              {
                int32x4_t v146 = *(int32x4_t *)(v143 + 16);
                int32x4_t v28 = *(int32x4_t *)(v143 + 32);
                int32x4_t v27 = *(int32x4_t *)(v143 + 48);
                int32x4_t v147 = vuzp2q_s32(*(int32x4_t *)v143, v28);
                int32x4_t v246 = vuzp1q_s32(*(int32x4_t *)v143, v28);
                int32x4_t v248 = v147;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v146, v27);
                int32x4_t v29 = vuzp2q_s32(v146, v27);
                int16x8_t v250 = v30;
                int32x4_t v252 = v29;
                uint64_t v145 = 64;
              }
              else if (v144 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v143);
                int32x4_t v246 = (int32x4_t)v30;
                int32x4_t v248 = (int32x4_t)v30;
                int16x8_t v250 = v30;
                int32x4_t v252 = (int32x4_t)v30;
                uint64_t v145 = 2;
              }
              else if (v65[1])
              {
                uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 32, v143, v144, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v145 = 0;
                int32x4_t v246 = 0uLL;
                int32x4_t v248 = 0uLL;
                int16x8_t v250 = 0uLL;
                int32x4_t v252 = 0uLL;
              }
              uint64_t v148 = v143 + v145;
              unsigned int v149 = v65[2];
              if (v149 == 63)
              {
                int32x4_t v151 = *(int32x4_t *)(v148 + 16);
                int32x4_t v28 = *(int32x4_t *)(v148 + 32);
                int32x4_t v27 = *(int32x4_t *)(v148 + 48);
                int32x4_t v152 = vuzp2q_s32(*(int32x4_t *)v148, v28);
                int32x4_t v239 = vuzp1q_s32(*(int32x4_t *)v148, v28);
                int32x4_t v241 = v152;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v151, v27);
                int32x4_t v29 = vuzp2q_s32(v151, v27);
                int16x8_t v243 = v30;
                int32x4_t v245 = v29;
                uint64_t v150 = 64;
              }
              else if (v149 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v148);
                int32x4_t v239 = (int32x4_t)v30;
                int32x4_t v241 = (int32x4_t)v30;
                int16x8_t v243 = v30;
                int32x4_t v245 = (int32x4_t)v30;
                uint64_t v150 = 2;
              }
              else if (v65[2])
              {
                uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 32, v148, v149, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v150 = 0;
                int32x4_t v239 = 0uLL;
                int32x4_t v241 = 0uLL;
                int16x8_t v243 = 0uLL;
                int32x4_t v245 = 0uLL;
              }
              uint64_t v153 = v148 + v150;
              unsigned int v154 = v65[3];
              if (v154 == 63)
              {
                int32x4_t v156 = *(int32x4_t *)(v153 + 16);
                int32x4_t v28 = *(int32x4_t *)(v153 + 32);
                int32x4_t v27 = *(int32x4_t *)(v153 + 48);
                int32x4_t v157 = vuzp2q_s32(*(int32x4_t *)v153, v28);
                int32x4_t v247 = vuzp1q_s32(*(int32x4_t *)v153, v28);
                int32x4_t v249 = v157;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v156, v27);
                int32x4_t v29 = vuzp2q_s32(v156, v27);
                int16x8_t v251 = v30;
                int32x4_t v253 = v29;
                uint64_t v155 = 64;
              }
              else if (v154 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v153);
                int32x4_t v247 = (int32x4_t)v30;
                int32x4_t v249 = (int32x4_t)v30;
                int16x8_t v251 = v30;
                int32x4_t v253 = (int32x4_t)v30;
                uint64_t v155 = 2;
              }
              else if (v65[3])
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 32, v153, v154, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v155 = 0;
                int32x4_t v247 = 0uLL;
                int32x4_t v249 = 0uLL;
                int16x8_t v251 = 0uLL;
                int32x4_t v253 = 0uLL;
              }
              uint64_t v158 = v153 + v155;
              unsigned int v159 = v65[4];
              if (v159 == 63)
              {
                int32x4_t v161 = *(int32x4_t *)(v158 + 16);
                int32x4_t v28 = *(int32x4_t *)(v158 + 32);
                int32x4_t v27 = *(int32x4_t *)(v158 + 48);
                int32x4_t v162 = vuzp2q_s32(*(int32x4_t *)v158, v28);
                int32x4_t v254 = vuzp1q_s32(*(int32x4_t *)v158, v28);
                int32x4_t v256 = v162;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v161, v27);
                int32x4_t v29 = vuzp2q_s32(v161, v27);
                int16x8_t v258 = v30;
                int32x4_t v260 = v29;
                uint64_t v160 = 64;
              }
              else if (v159 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v158);
                int32x4_t v254 = (int32x4_t)v30;
                int32x4_t v256 = (int32x4_t)v30;
                int16x8_t v258 = v30;
                int32x4_t v260 = (int32x4_t)v30;
                uint64_t v160 = 2;
              }
              else if (v65[4])
              {
                uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 32, v158, v159, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v160 = 0;
                int32x4_t v254 = 0uLL;
                int32x4_t v256 = 0uLL;
                int16x8_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
              }
              uint64_t v163 = v158 + v160;
              unsigned int v164 = v65[5];
              if (v164 == 63)
              {
                int32x4_t v166 = *(int32x4_t *)(v163 + 16);
                int32x4_t v28 = *(int32x4_t *)(v163 + 32);
                int32x4_t v27 = *(int32x4_t *)(v163 + 48);
                int32x4_t v167 = vuzp2q_s32(*(int32x4_t *)v163, v28);
                int32x4_t v262 = vuzp1q_s32(*(int32x4_t *)v163, v28);
                int32x4_t v264 = v167;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v166, v27);
                int32x4_t v29 = vuzp2q_s32(v166, v27);
                int16x8_t v266 = v30;
                int32x4_t v268 = v29;
                uint64_t v165 = 64;
              }
              else if (v164 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v163);
                int32x4_t v262 = (int32x4_t)v30;
                int32x4_t v264 = (int32x4_t)v30;
                int16x8_t v266 = v30;
                int32x4_t v268 = (int32x4_t)v30;
                uint64_t v165 = 2;
              }
              else if (v65[5])
              {
                uint64_t v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 32, v163, v164, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v165 = 0;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int16x8_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
              }
              uint64_t v168 = v163 + v165;
              unsigned int v169 = v65[6];
              if (v169 == 63)
              {
                int32x4_t v171 = *(int32x4_t *)(v168 + 16);
                int32x4_t v28 = *(int32x4_t *)(v168 + 32);
                int32x4_t v27 = *(int32x4_t *)(v168 + 48);
                int32x4_t v172 = vuzp2q_s32(*(int32x4_t *)v168, v28);
                int32x4_t v255 = vuzp1q_s32(*(int32x4_t *)v168, v28);
                int32x4_t v257 = v172;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v171, v27);
                int32x4_t v29 = vuzp2q_s32(v171, v27);
                int16x8_t v259 = v30;
                int32x4_t v261 = v29;
                uint64_t v170 = 64;
              }
              else if (v169 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v168);
                int32x4_t v255 = (int32x4_t)v30;
                int32x4_t v257 = (int32x4_t)v30;
                int16x8_t v259 = v30;
                int32x4_t v261 = (int32x4_t)v30;
                uint64_t v170 = 2;
              }
              else if (v65[6])
              {
                uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 32, v168, v169, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v170 = 0;
                int32x4_t v255 = 0uLL;
                int32x4_t v257 = 0uLL;
                int16x8_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
              }
              uint64_t v173 = v168 + v170;
              unsigned int v174 = v65[7];
              if (v174 == 63)
              {
                int32x4_t v175 = *(int32x4_t *)(v173 + 16);
                int32x4_t v28 = *(int32x4_t *)(v173 + 32);
                int32x4_t v27 = *(int32x4_t *)(v173 + 48);
                int32x4_t v176 = vuzp2q_s32(*(int32x4_t *)v173, v28);
                int32x4_t v263 = vuzp1q_s32(*(int32x4_t *)v173, v28);
                int32x4_t v265 = v176;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v175, v27);
                int32x4_t v29 = vuzp2q_s32(v175, v27);
                int16x8_t v267 = v30;
                int32x4_t v269 = v29;
                uint64_t v16 = v224;
                unsigned int v74 = v33 + 1;
              }
              else
              {
                uint64_t v16 = v224;
                unsigned int v74 = v33 + 1;
                if (v174 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v173);
                  int32x4_t v263 = (int32x4_t)v30;
                  int32x4_t v265 = (int32x4_t)v30;
                  int16x8_t v267 = v30;
                  int32x4_t v269 = (int32x4_t)v30;
                }
                else if (v174)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 32, v173, v174, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
                }
                else
                {
                  int32x4_t v263 = 0uLL;
                  int32x4_t v265 = 0uLL;
                  int16x8_t v267 = 0uLL;
                  int32x4_t v269 = 0uLL;
                }
              }
              unint64_t v177 = v233;
              if (v233)
              {
                unint64_t v178 = 0;
                uint64_t v179 = &v238.i8[32 * v231 + 2 * v232];
                unsigned int v180 = v234;
                do
                {
                  if (v180)
                  {
                    uint64_t v181 = 0;
                    int32x4_t v182 = &v229->i8[v230 * v178];
                    do
                    {
                      v182[v181] = v179[v181];
                      ++v181;
                      unsigned int v180 = v234;
                    }
                    while (2 * (unint64_t)v234 > v181);
                    unint64_t v177 = v233;
                  }
                  ++v178;
                  v179 += 32;
                }
                while (v178 < v177);
              }
            }
          }
          else
          {
            unsigned int v68 = *v65;
            if (v68 == 63)
            {
              int32x4_t v77 = *v64;
              int32x4_t v29 = v64[1];
              int32x4_t v28 = v64[2];
              int32x4_t v27 = v64[3];
              *BOOL v66 = vuzp1q_s32(*v64, v28);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v66 + a11) = vuzp2q_s32(v77, v28);
              uint64_t v69 = 2 * a11;
              BOOL v78 = (int32x4_t *)((char *)v66 + v206);
              *BOOL v78 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v78 + a11) = v30;
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16(v64->i16);
                *BOOL v66 = (int32x4_t)v30;
                *(int16x8_t *)((char *)v66 + a11) = v30;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v30;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v30;
                uint64_t v70 = 2;
              }
              else if (*v65)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v64, v68, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                void *v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v206);
                void *v72 = 0;
                v72[1] = 0;
                unsigned int v73 = (uint64_t *)((char *)v66->i64 + v205);
                *unsigned int v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v79 = (uint64_t)v64->i64 + v70;
            int v80 = (int32x4_t *)((char *)v66 + v208);
            unsigned int v81 = v65[1];
            if (v81 == 63)
            {
              int32x4_t v86 = *(int32x4_t *)v79;
              int32x4_t v29 = *(int32x4_t *)(v79 + 16);
              int32x4_t v28 = *(int32x4_t *)(v79 + 32);
              int32x4_t v27 = *(int32x4_t *)(v79 + 48);
              *int v80 = vuzp1q_s32(*(int32x4_t *)v79, v28);
              *(int32x4_t *)((char *)v80 + v25) = vuzp2q_s32(v86, v28);
              uint64_t v87 = (int32x4_t *)((char *)v80 + v69);
              *uint64_t v87 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v87 + v25) = v30;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v79);
              *int v80 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v80 + v25) = v30;
              *(int16x8_t *)((char *)v80 + v69) = v30;
              *(int16x8_t *)((char *)v80 + 3 * a11) = v30;
              uint64_t v82 = 2;
            }
            else if (v65[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v66 + v208), v25, v79, v81, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v82 = 0;
              v80->i64[0] = 0;
              v80->i64[1] = 0;
              int64x2_t v83 = (uint64_t *)((char *)v80->i64 + v25);
              *int64x2_t v83 = 0;
              v83[1] = 0;
              uint64_t v84 = (uint64_t *)((char *)v80->i64 + v69);
              void *v84 = 0;
              v84[1] = 0;
              int v85 = (uint64_t *)((char *)v80->i64 + v205);
              void *v85 = 0;
              v85[1] = 0;
            }
            uint64_t v88 = v79 + v82;
            char v89 = v66 + 1;
            unsigned int v90 = v65[2];
            if (v90 == 63)
            {
              int32x4_t v95 = *(int32x4_t *)v88;
              int32x4_t v29 = *(int32x4_t *)(v88 + 16);
              int32x4_t v28 = *(int32x4_t *)(v88 + 32);
              int32x4_t v27 = *(int32x4_t *)(v88 + 48);
              int32x4_t *v89 = vuzp1q_s32(*(int32x4_t *)v88, v28);
              *(int32x4_t *)((char *)v89 + v25) = vuzp2q_s32(v95, v28);
              unsigned int v96 = (int32x4_t *)((char *)v89 + v69);
              *unsigned int v96 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v96 + v25) = v30;
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v88);
              int32x4_t *v89 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v89 + v25) = v30;
              *(int16x8_t *)((char *)v89 + v69) = v30;
              *(int16x8_t *)((char *)v89 + 3 * a11) = v30;
              uint64_t v91 = 2;
            }
            else if (v65[2])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v91 = 0;
              v89->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v92 = (uint64_t *)((char *)v89->i64 + v25);
              *uint64_t v92 = 0;
              v92[1] = 0;
              int16x4_t v93 = (uint64_t *)((char *)v89->i64 + v69);
              *int16x4_t v93 = 0;
              v93[1] = 0;
              int64x2_t v94 = (uint64_t *)((char *)v89->i64 + v205);
              *int64x2_t v94 = 0;
              v94[1] = 0;
            }
            uint64_t v97 = v88 + v91;
            int32x4_t v98 = v80 + 1;
            unsigned int v99 = v65[3];
            if (v99 == 63)
            {
              int32x4_t v104 = *(int32x4_t *)v97;
              int32x4_t v29 = *(int32x4_t *)(v97 + 16);
              int32x4_t v28 = *(int32x4_t *)(v97 + 32);
              int32x4_t v27 = *(int32x4_t *)(v97 + 48);
              *int32x4_t v98 = vuzp1q_s32(*(int32x4_t *)v97, v28);
              *(int32x4_t *)((char *)v98 + v25) = vuzp2q_s32(v104, v28);
              int64x2_t v105 = (int32x4_t *)((char *)v98 + v69);
              *int64x2_t v105 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v105 + v25) = v30;
              uint64_t v100 = 64;
            }
            else if (v99 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v97);
              *int32x4_t v98 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v98 + v25) = v30;
              *(int16x8_t *)((char *)v98 + v69) = v30;
              *(int16x8_t *)((char *)v98 + 3 * a11) = v30;
              uint64_t v100 = 2;
            }
            else if (v65[3])
            {
              uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v98, v25, v97, v99, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v100 = 0;
              v98->i64[0] = 0;
              v80[1].i64[1] = 0;
              int64x2_t v101 = (uint64_t *)((char *)v98->i64 + v25);
              void *v101 = 0;
              v101[1] = 0;
              unsigned int v102 = (uint64_t *)((char *)v98->i64 + v69);
              void *v102 = 0;
              v102[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v98->i64 + v205);
              *uint64_t v103 = 0;
              v103[1] = 0;
            }
            uint64_t v106 = v97 + v100;
            int32x4_t v107 = (int32x4_t *)((char *)v66 + v207);
            unsigned int v108 = v65[4];
            if (v108 == 63)
            {
              int32x4_t v113 = *(int32x4_t *)v106;
              int32x4_t v29 = *(int32x4_t *)(v106 + 16);
              int32x4_t v28 = *(int32x4_t *)(v106 + 32);
              int32x4_t v27 = *(int32x4_t *)(v106 + 48);
              int32x4_t *v107 = vuzp1q_s32(*(int32x4_t *)v106, v28);
              *(int32x4_t *)((char *)v107 + v25) = vuzp2q_s32(v113, v28);
              uint64_t v114 = (int32x4_t *)((char *)v107 + v69);
              *uint64_t v114 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v114 + v25) = v30;
              uint64_t v109 = 64;
            }
            else if (v108 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v106);
              int32x4_t *v107 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v107 + v25) = v30;
              *(int16x8_t *)((char *)v107 + v69) = v30;
              *(int16x8_t *)((char *)v107 + 3 * a11) = v30;
              uint64_t v109 = 2;
            }
            else if (v65[4])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v66 + v207), v25, v106, v108, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v109 = 0;
              v107->i64[0] = 0;
              v107->i64[1] = 0;
              unsigned int v110 = (uint64_t *)((char *)v107->i64 + v25);
              *unsigned int v110 = 0;
              v110[1] = 0;
              unsigned int v111 = (uint64_t *)((char *)v107->i64 + v69);
              void *v111 = 0;
              v111[1] = 0;
              uint64_t v112 = (uint64_t *)((char *)v107->i64 + v205);
              void *v112 = 0;
              v112[1] = 0;
            }
            uint64_t v115 = v106 + v109;
            int32x4_t v116 = (int32x4_t *)((char *)v66 + 12 * a11);
            unsigned int v117 = v65[5];
            if (v117 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v115;
              int32x4_t v29 = *(int32x4_t *)(v115 + 16);
              int32x4_t v28 = *(int32x4_t *)(v115 + 32);
              int32x4_t v27 = *(int32x4_t *)(v115 + 48);
              *int32x4_t v116 = vuzp1q_s32(*(int32x4_t *)v115, v28);
              *(int32x4_t *)((char *)v116 + v25) = vuzp2q_s32(v122, v28);
              int64x2_t v123 = (int32x4_t *)((char *)v116 + v69);
              int32x4_t *v123 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v123 + v25) = v30;
              uint64_t v118 = 64;
            }
            else if (v117 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v115);
              *int32x4_t v116 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v116 + v25) = v30;
              *(int16x8_t *)((char *)v116 + v69) = v30;
              *(int16x8_t *)((char *)v116 + 3 * a11) = v30;
              uint64_t v118 = 2;
            }
            else if (v65[5])
            {
              uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v116, v25, v115, v117, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v118 = 0;
              v116->i64[0] = 0;
              v116->i64[1] = 0;
              int64x2_t v119 = (uint64_t *)((char *)v116->i64 + v25);
              *int64x2_t v119 = 0;
              v119[1] = 0;
              unsigned int v120 = (uint64_t *)((char *)v116->i64 + v69);
              *unsigned int v120 = 0;
              v120[1] = 0;
              uint64_t v121 = (uint64_t *)((char *)v116->i64 + v205);
              *uint64_t v121 = 0;
              v121[1] = 0;
            }
            uint64_t v124 = v115 + v118;
            int32x4_t v125 = v107 + 1;
            unsigned int v126 = v65[6];
            if (v126 == 63)
            {
              int32x4_t v131 = *(int32x4_t *)v124;
              int32x4_t v29 = *(int32x4_t *)(v124 + 16);
              int32x4_t v28 = *(int32x4_t *)(v124 + 32);
              int32x4_t v27 = *(int32x4_t *)(v124 + 48);
              *int32x4_t v125 = vuzp1q_s32(*(int32x4_t *)v124, v28);
              *(int32x4_t *)((char *)v125 + v25) = vuzp2q_s32(v131, v28);
              uint64_t v132 = (int32x4_t *)((char *)v125 + v69);
              *uint64_t v132 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v132 + v25) = v30;
              uint64_t v127 = 64;
              unsigned int v74 = v33 + 1;
            }
            else
            {
              unsigned int v74 = v33 + 1;
              if (v126 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v124);
                *int32x4_t v125 = (int32x4_t)v30;
                *(int16x8_t *)((char *)v125 + v25) = v30;
                *(int16x8_t *)((char *)v125 + v69) = v30;
                *(int16x8_t *)((char *)v125 + 3 * a11) = v30;
                uint64_t v127 = 2;
              }
              else if (v65[6])
              {
                uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v25, v124, v126, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v127 = 0;
                v125->i64[0] = 0;
                v125->i64[1] = 0;
                int64x2_t v128 = (uint64_t *)((char *)v125->i64 + v25);
                *int64x2_t v128 = 0;
                v128[1] = 0;
                unsigned int v129 = (uint64_t *)((char *)v125->i64 + v69);
                void *v129 = 0;
                v129[1] = 0;
                uint64_t v130 = (uint64_t *)((char *)v125->i64 + v205);
                void *v130 = 0;
                v130[1] = 0;
              }
            }
            uint64_t v133 = v124 + v127;
            int32x4_t v134 = v116 + 1;
            unsigned int v135 = v65[7];
            if (v135 == 63)
            {
              int32x4_t v139 = *(int32x4_t *)v133;
              int32x4_t v29 = *(int32x4_t *)(v133 + 16);
              int32x4_t v28 = *(int32x4_t *)(v133 + 32);
              int32x4_t v27 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v28);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v139, v28);
              float32x4_t v140 = (int32x4_t *)((char *)v134 + v69);
              *float32x4_t v140 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v140 + v25) = v30;
              a7 = v214;
              uint64_t v16 = v224;
            }
            else
            {
              a7 = v214;
              uint64_t v16 = v224;
              if (v135 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v133);
                int32x4_t *v134 = (int32x4_t)v30;
                *(int16x8_t *)((char *)v134 + v25) = v30;
                *(int16x8_t *)((char *)v134 + v69) = v30;
                *(int16x8_t *)((char *)v134 + 3 * a11) = v30;
              }
              else if (v135)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v134->i64[0] = 0;
                v134->i64[1] = 0;
                uint64_t v136 = (uint64_t *)((char *)v134->i64 + v25);
                *uint64_t v136 = 0;
                v136[1] = 0;
                char v137 = (uint64_t *)((char *)v134->i64 + v69);
                *char v137 = 0;
                v137[1] = 0;
                unsigned int v138 = (uint64_t *)((char *)v134->i64 + v205);
                *unsigned int v138 = 0;
                v138[1] = 0;
              }
            }
          }
          BOOL v21 = v33 == v215 >> 4;
          unsigned int v33 = v74;
        }
        while (!v21);
        BOOL v21 = v17++ == v204;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v270 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v223 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v202 = a8 + a10 - 1;
  unsigned int v204 = v202 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v217 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v204)
  {
    unsigned int v215 = a7 + a9 - 1;
    unsigned int v201 = a7 >> 4;
    if (a7 >> 4 <= v215 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v198 = a5 - 1;
      unsigned int v226 = (a5 - 1) >> 4;
      int v225 = ((a5 - 1) & 0xF) + 1;
      int v199 = ((a6 - 1) & 0xF) + 1;
      unsigned int v200 = (a6 - 1) >> 4;
      uint64_t v207 = 8 * a11;
      uint64_t v208 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL)));
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v28.i8))));
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v213 = v30.i32[0] | v30.i32[1];
      BOOL v211 = v30.i32[1] != 0;
      uint64_t v212 = v30.i64[0];
      BOOL v210 = v30.i32[0] != 0;
      unint64_t v197 = 8 * v19 * (unint64_t)v18;
      unsigned int v214 = a7;
      uint64_t v224 = v16;
      uint64_t v205 = 3 * a11;
      uint64_t v206 = 2 * a11;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v223) {
          int v32 = v223;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = v201;
        if (v202 < v31) {
          unsigned int v31 = v202;
        }
        unsigned int v222 = 16 * v17;
        int v209 = v32 - 16 * v17;
        int v221 = v31 - v32 + 1;
        int v34 = v199;
        if (v17 != v200) {
          int v34 = 16;
        }
        unsigned int v227 = v34;
        uint64_t v220 = a2 + (v32 - v223) * v25;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v215 < v36) {
            unsigned int v36 = v215;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v226) {
            unsigned int v39 = v225;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v222 >= v223 && v35 >= a7)
          {
            int v41 = v225;
            if (v33 != v226) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v221 != v227;
          }
          if (isLevelTiled)
          {
            unsigned int v183 = 0;
            uint64_t v184 = v197 >> (*(unsigned char *)(v16 + 57) != 0);
            char v185 = 1;
            if (v184 > 127)
            {
              if (v184 > 511)
              {
                if (v184 == 512)
                {
                  unsigned int v183 = 16;
                  char v186 = 1;
                  unsigned int v187 = 16;
                }
                else
                {
                  char v186 = 1;
                  unsigned int v187 = 0;
                  if (v184 == 1024)
                  {
                    unsigned int v187 = 8;
                    unsigned int v183 = 16;
                  }
                }
              }
              else if (v184 == 128)
              {
                char v185 = 0;
                char v186 = 0;
                unsigned int v183 = 32;
                unsigned int v187 = 32;
              }
              else
              {
                char v186 = 1;
                unsigned int v187 = 0;
                if (v184 == 256)
                {
                  char v185 = 0;
                  unsigned int v187 = 16;
                  unsigned int v183 = 32;
                }
              }
            }
            else
            {
              char v186 = 1;
              unsigned int v187 = 0;
              switch(v184)
              {
                case 4:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v187 = 128;
                  unsigned int v183 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v183 = 128;
                  unsigned int v187 = 128;
                  break;
                case 16:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v187 = 64;
                  unsigned int v183 = 128;
                  break;
                case 32:
                  char v185 = 0;
                  char v186 = 0;
                  unsigned int v183 = 64;
                  unsigned int v187 = 64;
                  break;
                default:
                  if (v184 == 64)
                  {
                    char v185 = 0;
                    char v186 = 0;
                    unsigned int v187 = 32;
                    unsigned int v183 = 64;
                  }
                  break;
              }
            }
            unsigned int v188 = (v183 >> 4) - 1;
            if (v185)
            {
              unsigned int v189 = 0;
              if (v186) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v190 = 32 - __clz(~(-1 << -(char)__clz(((v187 + 15) >> 4) - 1)));
              if (v190 | v189) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v192 = 0;
            }
            else
            {
              unsigned int v189 = 32 - __clz(~(-1 << -(char)__clz(v188)));
              if ((v186 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v190 = 0;
              if (!v189) {
                goto LABEL_242;
              }
LABEL_231:
              int v191 = 0;
              uint64_t v192 = 0;
              int v193 = v33 & v188;
              BOOL v194 = v189 != 0;
              BOOL v195 = v190 != 0;
              int v196 = 1;
              do
              {
                --v189;
                if (v194) {
                  v192 |= (unint64_t)(v196 & v193) << v191++;
                }
                else {
                  unsigned int v189 = 0;
                }
                --v190;
                if (v195) {
                  v192 |= (unint64_t)(v196 & v17 & ((v187 >> 4) - 1)) << v191++;
                }
                else {
                  unsigned int v190 = 0;
                }
                v196 *= 2;
                --v191;
                BOOL v195 = v190 != 0;
                BOOL v194 = v189 != 0;
              }
              while (v190 | v189);
            }
            unint64_t v50 = ((unint64_t)(v35 / v183 + v222 / v187 * ((v183 + v198) / v183)) << 14) + (v192 << 9);
            goto LABEL_59;
          }
          if (v213)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v211;
            BOOL v47 = v210;
            int v48 = HIDWORD(v212);
            int v49 = v212;
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                int v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                int v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          if (v56 | v53)
          {
            int v57 = 0;
            unint64_t v58 = 0;
            BOOL v59 = v53 != 0;
            BOOL v60 = v56 != 0;
            int v61 = 1;
            do
            {
              --v53;
              BOOL v62 = !v59;
              if (v59)
              {
                unint64_t v63 = ((unint64_t)(v61 & v33) << v57) | v58;
              }
              else
              {
                unsigned int v53 = 0;
                unint64_t v63 = v58;
              }
              if (!v62) {
                ++v57;
              }
              --v56;
              if (v60)
              {
                unint64_t v58 = ((unint64_t)(v61 & v17) << v57) | v63;
              }
              else
              {
                unsigned int v56 = 0;
                unint64_t v58 = v63;
              }
              if (v60) {
                ++v57;
              }
              v61 *= 2;
              --v57;
              BOOL v60 = v56 != 0;
              BOOL v59 = v53 != 0;
            }
            while (v56 | v53);
          }
          else
          {
            unint64_t v58 = 0;
          }
          int v64 = (int32x4_t *)(a3 + v50);
          if (v217)
          {
            memcpy(__dst, v64, sizeof(__dst));
            int v64 = (int32x4_t *)__dst;
          }
          BOOL v65 = (unsigned __int8 *)(a4 + 8 * v58);
          BOOL v66 = (int32x4_t *)(v220 + 2 * (v37 - a7));
          char v67 = v39 < 0x10 || v40;
          if ((v67 & 1) != 0 || v227 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v224;
            block[5] = v64;
            char v235 = v39;
            char v236 = v227;
            int v231 = v209;
            unsigned int v232 = v37 - v35;
            block[6] = v65;
            unsigned int v229 = v66;
            uint64_t v25 = a11;
            uint64_t v230 = a11;
            unsigned int v233 = v221;
            unsigned int v234 = v38;
            if (v40)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v224 + 8) + 7384), block);
              a7 = v214;
              uint64_t v16 = v224;
              unsigned int v74 = v33 + 1;
            }
            else
            {
              unsigned int v75 = *v65;
              a7 = v214;
              if (v75 == 63)
              {
                int32x4_t v141 = v64[1];
                int32x4_t v28 = v64[2];
                int32x4_t v27 = v64[3];
                int32x4_t v142 = vuzp2q_s32(*v64, v28);
                int32x4_t v238 = vuzp1q_s32(*v64, v28);
                int32x4_t v240 = v142;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v141, v27);
                int32x4_t v29 = vuzp2q_s32(v141, v27);
                int16x8_t v242 = v30;
                int32x4_t v244 = v29;
                uint64_t v76 = 64;
              }
              else if (v75 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16(v64->i16);
                int32x4_t v238 = (int32x4_t)v30;
                int32x4_t v240 = (int32x4_t)v30;
                int16x8_t v242 = v30;
                int32x4_t v244 = (int32x4_t)v30;
                uint64_t v76 = 2;
              }
              else if (*v65)
              {
                uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 32, (uint64_t)v64, v75, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v76 = 0;
                int32x4_t v238 = 0uLL;
                int32x4_t v240 = 0uLL;
                int16x8_t v242 = 0uLL;
                int32x4_t v244 = 0uLL;
              }
              uint64_t v143 = (uint64_t)v64->i64 + v76;
              unsigned int v144 = v65[1];
              if (v144 == 63)
              {
                int32x4_t v146 = *(int32x4_t *)(v143 + 16);
                int32x4_t v28 = *(int32x4_t *)(v143 + 32);
                int32x4_t v27 = *(int32x4_t *)(v143 + 48);
                int32x4_t v147 = vuzp2q_s32(*(int32x4_t *)v143, v28);
                int32x4_t v246 = vuzp1q_s32(*(int32x4_t *)v143, v28);
                int32x4_t v248 = v147;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v146, v27);
                int32x4_t v29 = vuzp2q_s32(v146, v27);
                int16x8_t v250 = v30;
                int32x4_t v252 = v29;
                uint64_t v145 = 64;
              }
              else if (v144 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v143);
                int32x4_t v246 = (int32x4_t)v30;
                int32x4_t v248 = (int32x4_t)v30;
                int16x8_t v250 = v30;
                int32x4_t v252 = (int32x4_t)v30;
                uint64_t v145 = 2;
              }
              else if (v65[1])
              {
                uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 32, v143, v144, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v145 = 0;
                int32x4_t v246 = 0uLL;
                int32x4_t v248 = 0uLL;
                int16x8_t v250 = 0uLL;
                int32x4_t v252 = 0uLL;
              }
              uint64_t v148 = v143 + v145;
              unsigned int v149 = v65[2];
              if (v149 == 63)
              {
                int32x4_t v151 = *(int32x4_t *)(v148 + 16);
                int32x4_t v28 = *(int32x4_t *)(v148 + 32);
                int32x4_t v27 = *(int32x4_t *)(v148 + 48);
                int32x4_t v152 = vuzp2q_s32(*(int32x4_t *)v148, v28);
                int32x4_t v239 = vuzp1q_s32(*(int32x4_t *)v148, v28);
                int32x4_t v241 = v152;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v151, v27);
                int32x4_t v29 = vuzp2q_s32(v151, v27);
                int16x8_t v243 = v30;
                int32x4_t v245 = v29;
                uint64_t v150 = 64;
              }
              else if (v149 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v148);
                int32x4_t v239 = (int32x4_t)v30;
                int32x4_t v241 = (int32x4_t)v30;
                int16x8_t v243 = v30;
                int32x4_t v245 = (int32x4_t)v30;
                uint64_t v150 = 2;
              }
              else if (v65[2])
              {
                uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 32, v148, v149, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v150 = 0;
                int32x4_t v239 = 0uLL;
                int32x4_t v241 = 0uLL;
                int16x8_t v243 = 0uLL;
                int32x4_t v245 = 0uLL;
              }
              uint64_t v153 = v148 + v150;
              unsigned int v154 = v65[3];
              if (v154 == 63)
              {
                int32x4_t v156 = *(int32x4_t *)(v153 + 16);
                int32x4_t v28 = *(int32x4_t *)(v153 + 32);
                int32x4_t v27 = *(int32x4_t *)(v153 + 48);
                int32x4_t v157 = vuzp2q_s32(*(int32x4_t *)v153, v28);
                int32x4_t v247 = vuzp1q_s32(*(int32x4_t *)v153, v28);
                int32x4_t v249 = v157;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v156, v27);
                int32x4_t v29 = vuzp2q_s32(v156, v27);
                int16x8_t v251 = v30;
                int32x4_t v253 = v29;
                uint64_t v155 = 64;
              }
              else if (v154 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v153);
                int32x4_t v247 = (int32x4_t)v30;
                int32x4_t v249 = (int32x4_t)v30;
                int16x8_t v251 = v30;
                int32x4_t v253 = (int32x4_t)v30;
                uint64_t v155 = 2;
              }
              else if (v65[3])
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 32, v153, v154, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v155 = 0;
                int32x4_t v247 = 0uLL;
                int32x4_t v249 = 0uLL;
                int16x8_t v251 = 0uLL;
                int32x4_t v253 = 0uLL;
              }
              uint64_t v158 = v153 + v155;
              unsigned int v159 = v65[4];
              if (v159 == 63)
              {
                int32x4_t v161 = *(int32x4_t *)(v158 + 16);
                int32x4_t v28 = *(int32x4_t *)(v158 + 32);
                int32x4_t v27 = *(int32x4_t *)(v158 + 48);
                int32x4_t v162 = vuzp2q_s32(*(int32x4_t *)v158, v28);
                int32x4_t v254 = vuzp1q_s32(*(int32x4_t *)v158, v28);
                int32x4_t v256 = v162;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v161, v27);
                int32x4_t v29 = vuzp2q_s32(v161, v27);
                int16x8_t v258 = v30;
                int32x4_t v260 = v29;
                uint64_t v160 = 64;
              }
              else if (v159 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v158);
                int32x4_t v254 = (int32x4_t)v30;
                int32x4_t v256 = (int32x4_t)v30;
                int16x8_t v258 = v30;
                int32x4_t v260 = (int32x4_t)v30;
                uint64_t v160 = 2;
              }
              else if (v65[4])
              {
                uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 32, v158, v159, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v160 = 0;
                int32x4_t v254 = 0uLL;
                int32x4_t v256 = 0uLL;
                int16x8_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
              }
              uint64_t v163 = v158 + v160;
              unsigned int v164 = v65[5];
              if (v164 == 63)
              {
                int32x4_t v166 = *(int32x4_t *)(v163 + 16);
                int32x4_t v28 = *(int32x4_t *)(v163 + 32);
                int32x4_t v27 = *(int32x4_t *)(v163 + 48);
                int32x4_t v167 = vuzp2q_s32(*(int32x4_t *)v163, v28);
                int32x4_t v262 = vuzp1q_s32(*(int32x4_t *)v163, v28);
                int32x4_t v264 = v167;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v166, v27);
                int32x4_t v29 = vuzp2q_s32(v166, v27);
                int16x8_t v266 = v30;
                int32x4_t v268 = v29;
                uint64_t v165 = 64;
              }
              else if (v164 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v163);
                int32x4_t v262 = (int32x4_t)v30;
                int32x4_t v264 = (int32x4_t)v30;
                int16x8_t v266 = v30;
                int32x4_t v268 = (int32x4_t)v30;
                uint64_t v165 = 2;
              }
              else if (v65[5])
              {
                uint64_t v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 32, v163, v164, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v165 = 0;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int16x8_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
              }
              uint64_t v168 = v163 + v165;
              unsigned int v169 = v65[6];
              if (v169 == 63)
              {
                int32x4_t v171 = *(int32x4_t *)(v168 + 16);
                int32x4_t v28 = *(int32x4_t *)(v168 + 32);
                int32x4_t v27 = *(int32x4_t *)(v168 + 48);
                int32x4_t v172 = vuzp2q_s32(*(int32x4_t *)v168, v28);
                int32x4_t v255 = vuzp1q_s32(*(int32x4_t *)v168, v28);
                int32x4_t v257 = v172;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v171, v27);
                int32x4_t v29 = vuzp2q_s32(v171, v27);
                int16x8_t v259 = v30;
                int32x4_t v261 = v29;
                uint64_t v170 = 64;
              }
              else if (v169 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v168);
                int32x4_t v255 = (int32x4_t)v30;
                int32x4_t v257 = (int32x4_t)v30;
                int16x8_t v259 = v30;
                int32x4_t v261 = (int32x4_t)v30;
                uint64_t v170 = 2;
              }
              else if (v65[6])
              {
                uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 32, v168, v169, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v170 = 0;
                int32x4_t v255 = 0uLL;
                int32x4_t v257 = 0uLL;
                int16x8_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
              }
              uint64_t v173 = v168 + v170;
              unsigned int v174 = v65[7];
              if (v174 == 63)
              {
                int32x4_t v175 = *(int32x4_t *)(v173 + 16);
                int32x4_t v28 = *(int32x4_t *)(v173 + 32);
                int32x4_t v27 = *(int32x4_t *)(v173 + 48);
                int32x4_t v176 = vuzp2q_s32(*(int32x4_t *)v173, v28);
                int32x4_t v263 = vuzp1q_s32(*(int32x4_t *)v173, v28);
                int32x4_t v265 = v176;
                int16x8_t v30 = (int16x8_t)vuzp1q_s32(v175, v27);
                int32x4_t v29 = vuzp2q_s32(v175, v27);
                int16x8_t v267 = v30;
                int32x4_t v269 = v29;
                uint64_t v16 = v224;
                unsigned int v74 = v33 + 1;
              }
              else
              {
                uint64_t v16 = v224;
                unsigned int v74 = v33 + 1;
                if (v174 == 1)
                {
                  int16x8_t v30 = vld1q_dup_s16((const __int16 *)v173);
                  int32x4_t v263 = (int32x4_t)v30;
                  int32x4_t v265 = (int32x4_t)v30;
                  int16x8_t v267 = v30;
                  int32x4_t v269 = (int32x4_t)v30;
                }
                else if (v174)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 32, v173, v174, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
                }
                else
                {
                  int32x4_t v263 = 0uLL;
                  int32x4_t v265 = 0uLL;
                  int16x8_t v267 = 0uLL;
                  int32x4_t v269 = 0uLL;
                }
              }
              unint64_t v177 = v233;
              if (v233)
              {
                unint64_t v178 = 0;
                uint64_t v179 = &v238.i8[32 * v231 + 2 * v232];
                unsigned int v180 = v234;
                do
                {
                  if (v180)
                  {
                    uint64_t v181 = 0;
                    int32x4_t v182 = &v229->i8[v230 * v178];
                    do
                    {
                      v182[v181] = v179[v181];
                      ++v181;
                      unsigned int v180 = v234;
                    }
                    while (2 * (unint64_t)v234 > v181);
                    unint64_t v177 = v233;
                  }
                  ++v178;
                  v179 += 32;
                }
                while (v178 < v177);
              }
            }
          }
          else
          {
            unsigned int v68 = *v65;
            if (v68 == 63)
            {
              int32x4_t v77 = *v64;
              int32x4_t v29 = v64[1];
              int32x4_t v28 = v64[2];
              int32x4_t v27 = v64[3];
              *BOOL v66 = vuzp1q_s32(*v64, v28);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v66 + a11) = vuzp2q_s32(v77, v28);
              uint64_t v69 = 2 * a11;
              BOOL v78 = (int32x4_t *)((char *)v66 + v206);
              *BOOL v78 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v78 + a11) = v30;
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16(v64->i16);
                *BOOL v66 = (int32x4_t)v30;
                *(int16x8_t *)((char *)v66 + a11) = v30;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v30;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v30;
                uint64_t v70 = 2;
              }
              else if (*v65)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v64, v68, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                void *v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v206);
                void *v72 = 0;
                v72[1] = 0;
                unsigned int v73 = (uint64_t *)((char *)v66->i64 + v205);
                *unsigned int v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v79 = (uint64_t)v64->i64 + v70;
            int v80 = (int32x4_t *)((char *)v66 + v208);
            unsigned int v81 = v65[1];
            if (v81 == 63)
            {
              int32x4_t v86 = *(int32x4_t *)v79;
              int32x4_t v29 = *(int32x4_t *)(v79 + 16);
              int32x4_t v28 = *(int32x4_t *)(v79 + 32);
              int32x4_t v27 = *(int32x4_t *)(v79 + 48);
              *int v80 = vuzp1q_s32(*(int32x4_t *)v79, v28);
              *(int32x4_t *)((char *)v80 + v25) = vuzp2q_s32(v86, v28);
              uint64_t v87 = (int32x4_t *)((char *)v80 + v69);
              *uint64_t v87 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v87 + v25) = v30;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v79);
              *int v80 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v80 + v25) = v30;
              *(int16x8_t *)((char *)v80 + v69) = v30;
              *(int16x8_t *)((char *)v80 + 3 * a11) = v30;
              uint64_t v82 = 2;
            }
            else if (v65[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v66 + v208), v25, v79, v81, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v82 = 0;
              v80->i64[0] = 0;
              v80->i64[1] = 0;
              int64x2_t v83 = (uint64_t *)((char *)v80->i64 + v25);
              *int64x2_t v83 = 0;
              v83[1] = 0;
              uint64_t v84 = (uint64_t *)((char *)v80->i64 + v69);
              void *v84 = 0;
              v84[1] = 0;
              int v85 = (uint64_t *)((char *)v80->i64 + v205);
              void *v85 = 0;
              v85[1] = 0;
            }
            uint64_t v88 = v79 + v82;
            char v89 = v66 + 1;
            unsigned int v90 = v65[2];
            if (v90 == 63)
            {
              int32x4_t v95 = *(int32x4_t *)v88;
              int32x4_t v29 = *(int32x4_t *)(v88 + 16);
              int32x4_t v28 = *(int32x4_t *)(v88 + 32);
              int32x4_t v27 = *(int32x4_t *)(v88 + 48);
              int32x4_t *v89 = vuzp1q_s32(*(int32x4_t *)v88, v28);
              *(int32x4_t *)((char *)v89 + v25) = vuzp2q_s32(v95, v28);
              unsigned int v96 = (int32x4_t *)((char *)v89 + v69);
              *unsigned int v96 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v96 + v25) = v30;
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v88);
              int32x4_t *v89 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v89 + v25) = v30;
              *(int16x8_t *)((char *)v89 + v69) = v30;
              *(int16x8_t *)((char *)v89 + 3 * a11) = v30;
              uint64_t v91 = 2;
            }
            else if (v65[2])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v91 = 0;
              v89->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v92 = (uint64_t *)((char *)v89->i64 + v25);
              *uint64_t v92 = 0;
              v92[1] = 0;
              int16x4_t v93 = (uint64_t *)((char *)v89->i64 + v69);
              *int16x4_t v93 = 0;
              v93[1] = 0;
              int64x2_t v94 = (uint64_t *)((char *)v89->i64 + v205);
              *int64x2_t v94 = 0;
              v94[1] = 0;
            }
            uint64_t v97 = v88 + v91;
            int32x4_t v98 = v80 + 1;
            unsigned int v99 = v65[3];
            if (v99 == 63)
            {
              int32x4_t v104 = *(int32x4_t *)v97;
              int32x4_t v29 = *(int32x4_t *)(v97 + 16);
              int32x4_t v28 = *(int32x4_t *)(v97 + 32);
              int32x4_t v27 = *(int32x4_t *)(v97 + 48);
              *int32x4_t v98 = vuzp1q_s32(*(int32x4_t *)v97, v28);
              *(int32x4_t *)((char *)v98 + v25) = vuzp2q_s32(v104, v28);
              int64x2_t v105 = (int32x4_t *)((char *)v98 + v69);
              *int64x2_t v105 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v105 + v25) = v30;
              uint64_t v100 = 64;
            }
            else if (v99 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v97);
              *int32x4_t v98 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v98 + v25) = v30;
              *(int16x8_t *)((char *)v98 + v69) = v30;
              *(int16x8_t *)((char *)v98 + 3 * a11) = v30;
              uint64_t v100 = 2;
            }
            else if (v65[3])
            {
              uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v98, v25, v97, v99, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v100 = 0;
              v98->i64[0] = 0;
              v80[1].i64[1] = 0;
              int64x2_t v101 = (uint64_t *)((char *)v98->i64 + v25);
              void *v101 = 0;
              v101[1] = 0;
              unsigned int v102 = (uint64_t *)((char *)v98->i64 + v69);
              void *v102 = 0;
              v102[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v98->i64 + v205);
              *uint64_t v103 = 0;
              v103[1] = 0;
            }
            uint64_t v106 = v97 + v100;
            int32x4_t v107 = (int32x4_t *)((char *)v66 + v207);
            unsigned int v108 = v65[4];
            if (v108 == 63)
            {
              int32x4_t v113 = *(int32x4_t *)v106;
              int32x4_t v29 = *(int32x4_t *)(v106 + 16);
              int32x4_t v28 = *(int32x4_t *)(v106 + 32);
              int32x4_t v27 = *(int32x4_t *)(v106 + 48);
              int32x4_t *v107 = vuzp1q_s32(*(int32x4_t *)v106, v28);
              *(int32x4_t *)((char *)v107 + v25) = vuzp2q_s32(v113, v28);
              uint64_t v114 = (int32x4_t *)((char *)v107 + v69);
              *uint64_t v114 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v114 + v25) = v30;
              uint64_t v109 = 64;
            }
            else if (v108 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v106);
              int32x4_t *v107 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v107 + v25) = v30;
              *(int16x8_t *)((char *)v107 + v69) = v30;
              *(int16x8_t *)((char *)v107 + 3 * a11) = v30;
              uint64_t v109 = 2;
            }
            else if (v65[4])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v66 + v207), v25, v106, v108, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v109 = 0;
              v107->i64[0] = 0;
              v107->i64[1] = 0;
              unsigned int v110 = (uint64_t *)((char *)v107->i64 + v25);
              *unsigned int v110 = 0;
              v110[1] = 0;
              unsigned int v111 = (uint64_t *)((char *)v107->i64 + v69);
              void *v111 = 0;
              v111[1] = 0;
              uint64_t v112 = (uint64_t *)((char *)v107->i64 + v205);
              void *v112 = 0;
              v112[1] = 0;
            }
            uint64_t v115 = v106 + v109;
            int32x4_t v116 = (int32x4_t *)((char *)v66 + 12 * a11);
            unsigned int v117 = v65[5];
            if (v117 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v115;
              int32x4_t v29 = *(int32x4_t *)(v115 + 16);
              int32x4_t v28 = *(int32x4_t *)(v115 + 32);
              int32x4_t v27 = *(int32x4_t *)(v115 + 48);
              *int32x4_t v116 = vuzp1q_s32(*(int32x4_t *)v115, v28);
              *(int32x4_t *)((char *)v116 + v25) = vuzp2q_s32(v122, v28);
              int64x2_t v123 = (int32x4_t *)((char *)v116 + v69);
              int32x4_t *v123 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v123 + v25) = v30;
              uint64_t v118 = 64;
            }
            else if (v117 == 1)
            {
              int16x8_t v30 = vld1q_dup_s16((const __int16 *)v115);
              *int32x4_t v116 = (int32x4_t)v30;
              *(int16x8_t *)((char *)v116 + v25) = v30;
              *(int16x8_t *)((char *)v116 + v69) = v30;
              *(int16x8_t *)((char *)v116 + 3 * a11) = v30;
              uint64_t v118 = 2;
            }
            else if (v65[5])
            {
              uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v116, v25, v115, v117, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v118 = 0;
              v116->i64[0] = 0;
              v116->i64[1] = 0;
              int64x2_t v119 = (uint64_t *)((char *)v116->i64 + v25);
              *int64x2_t v119 = 0;
              v119[1] = 0;
              unsigned int v120 = (uint64_t *)((char *)v116->i64 + v69);
              *unsigned int v120 = 0;
              v120[1] = 0;
              uint64_t v121 = (uint64_t *)((char *)v116->i64 + v205);
              *uint64_t v121 = 0;
              v121[1] = 0;
            }
            uint64_t v124 = v115 + v118;
            int32x4_t v125 = v107 + 1;
            unsigned int v126 = v65[6];
            if (v126 == 63)
            {
              int32x4_t v131 = *(int32x4_t *)v124;
              int32x4_t v29 = *(int32x4_t *)(v124 + 16);
              int32x4_t v28 = *(int32x4_t *)(v124 + 32);
              int32x4_t v27 = *(int32x4_t *)(v124 + 48);
              *int32x4_t v125 = vuzp1q_s32(*(int32x4_t *)v124, v28);
              *(int32x4_t *)((char *)v125 + v25) = vuzp2q_s32(v131, v28);
              uint64_t v132 = (int32x4_t *)((char *)v125 + v69);
              *uint64_t v132 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v132 + v25) = v30;
              uint64_t v127 = 64;
              unsigned int v74 = v33 + 1;
            }
            else
            {
              unsigned int v74 = v33 + 1;
              if (v126 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v124);
                *int32x4_t v125 = (int32x4_t)v30;
                *(int16x8_t *)((char *)v125 + v25) = v30;
                *(int16x8_t *)((char *)v125 + v69) = v30;
                *(int16x8_t *)((char *)v125 + 3 * a11) = v30;
                uint64_t v127 = 2;
              }
              else if (v65[6])
              {
                uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v25, v124, v126, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v127 = 0;
                v125->i64[0] = 0;
                v125->i64[1] = 0;
                int64x2_t v128 = (uint64_t *)((char *)v125->i64 + v25);
                *int64x2_t v128 = 0;
                v128[1] = 0;
                unsigned int v129 = (uint64_t *)((char *)v125->i64 + v69);
                void *v129 = 0;
                v129[1] = 0;
                uint64_t v130 = (uint64_t *)((char *)v125->i64 + v205);
                void *v130 = 0;
                v130[1] = 0;
              }
            }
            uint64_t v133 = v124 + v127;
            int32x4_t v134 = v116 + 1;
            unsigned int v135 = v65[7];
            if (v135 == 63)
            {
              int32x4_t v139 = *(int32x4_t *)v133;
              int32x4_t v29 = *(int32x4_t *)(v133 + 16);
              int32x4_t v28 = *(int32x4_t *)(v133 + 32);
              int32x4_t v27 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v28);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v139, v28);
              float32x4_t v140 = (int32x4_t *)((char *)v134 + v69);
              *float32x4_t v140 = vuzp1q_s32(v29, v27);
              int16x8_t v30 = (int16x8_t)vuzp2q_s32(v29, v27);
              *(int16x8_t *)((char *)v140 + v25) = v30;
              a7 = v214;
              uint64_t v16 = v224;
            }
            else
            {
              a7 = v214;
              uint64_t v16 = v224;
              if (v135 == 1)
              {
                int16x8_t v30 = vld1q_dup_s16((const __int16 *)v133);
                int32x4_t *v134 = (int32x4_t)v30;
                *(int16x8_t *)((char *)v134 + v25) = v30;
                *(int16x8_t *)((char *)v134 + v69) = v30;
                *(int16x8_t *)((char *)v134 + 3 * a11) = v30;
              }
              else if (v135)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135, *(double *)v30.i64, *(double *)v29.i64, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v134->i64[0] = 0;
                v134->i64[1] = 0;
                uint64_t v136 = (uint64_t *)((char *)v134->i64 + v25);
                *uint64_t v136 = 0;
                v136[1] = 0;
                char v137 = (uint64_t *)((char *)v134->i64 + v69);
                *char v137 = 0;
                v137[1] = 0;
                unsigned int v138 = (uint64_t *)((char *)v134->i64 + v205);
                *unsigned int v138 = 0;
                v138[1] = 0;
              }
            }
          }
          BOOL v21 = v33 == v215 >> 4;
          unsigned int v33 = v74;
        }
        while (!v21);
        BOOL v21 = v17++ == v204;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          unsigned int v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            unsigned int v75 = (int64x2_t *)__dst;
          }
          int32x4_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              char v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              unsigned int v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              uint64_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              uint64_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              int16x4_t v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              int64x2_t v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int32x4_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            int v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            unsigned int v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            uint64_t v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            int64x2_t v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            uint64_t v84 = (int64x2_t *)((char *)v78 + v113);
            int v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            int32x4_t v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            uint64_t v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          unsigned int v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            unsigned int v75 = (int64x2_t *)__dst;
          }
          int32x4_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          BOOL v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              char v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              unsigned int v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              uint64_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              uint64_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              int16x4_t v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              int64x2_t v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int32x4_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            int v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            unsigned int v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            uint64_t v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            int64x2_t v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            uint64_t v84 = (int64x2_t *)((char *)v78 + v113);
            int v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            int32x4_t v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            uint64_t v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            unsigned int v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            int32x4_t v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            BOOL v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          unsigned int v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          uint64_t v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          int64x2_t v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          uint64_t v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          int v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          int32x4_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            unsigned int v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                int16x4_t v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            unsigned int v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            int32x4_t v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            BOOL v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          unsigned int v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          uint64_t v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          int64x2_t v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          uint64_t v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          int v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          int32x4_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            unsigned int v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                int16x4_t v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v457 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v378 = a8;
  unsigned int v358 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v357 = v358 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v372 = v24;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v371 = 0;
LABEL_32:
      unsigned int v369 = v26 - 4;
      unsigned int v362 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v355 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v371 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v371 = 0;
  unsigned int v355 = 0;
  unsigned int v362 = 0;
  unsigned int v369 = 0;
LABEL_33:
  if (v20 <= v357)
  {
    unsigned int v370 = a7 + a9 - 1;
    if (a7 >> 4 <= v370 >> 4)
    {
      uint64_t v33 = a11;
      unsigned int v381 = v18 >> 4;
      unsigned int v354 = v19 >> 4;
      int v380 = (v18 & 0xF) + 1;
      int v353 = (v19 & 0xF) + 1;
      int v352 = ~(-1 << v362);
      uint64_t v366 = 8 * a11;
      uint64_t v367 = 4 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v35.i64[1] = -1;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v365 = v16.i32[0] | v16.i32[1];
      BOOL v360 = v16.i32[1] != 0;
      uint64_t v361 = v16.i64[0];
      BOOL v359 = v16.i32[0] != 0;
      uint64_t v379 = v15;
      uint64_t v363 = 3 * a11;
      uint64_t v364 = 2 * a11;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v378) {
          int v37 = v378;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v358 < v36) {
          unsigned int v36 = v358;
        }
        int v368 = v37 - 16 * v20;
        int v376 = v36 - v37 + 1;
        unsigned int v38 = a7 >> 4;
        int v39 = v353;
        if (v20 != v354) {
          int v39 = 16;
        }
        unsigned int v382 = v39;
        int v40 = v20 & v352;
        uint64_t v375 = a2 + (v37 - v378) * v33;
        unsigned int v41 = a7;
        do
        {
          unsigned int v43 = 16 * v38;
          unsigned int v44 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v41) {
            int v45 = v41;
          }
          else {
            int v45 = 16 * v38;
          }
          if (v370 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v38 == v381) {
            unsigned int v47 = v380;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (16 * v20 >= v378 && v43 >= v41)
          {
            int v49 = v380;
            if (v38 != v381) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v376 != v382;
          }
          if (v371)
          {
            if (v369 | v362)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v369 != 0;
              BOOL v55 = v362 != 0;
              unsigned int v56 = v369;
              unsigned int v57 = v362;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v38 & ~(-1 << v369) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v40 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v15 + 320) * ((v38 >> v369) + (v20 >> v362) * v355) + (v52 << 10);
          }
          else
          {
            if (v365)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v360;
              BOOL v62 = v359;
              int v63 = HIDWORD(v361);
              int v64 = v361;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v38) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_115:
              unint64_t v73 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_115;
            }
          }
          int v72 = 0;
          unint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            BOOL v77 = !v74;
            if (v74)
            {
              unint64_t v78 = ((unint64_t)(v76 & v38) << v72) | v73;
            }
            else
            {
              unsigned int v68 = 0;
              unint64_t v78 = v73;
            }
            if (!v77) {
              ++v72;
            }
            --v71;
            if (v75)
            {
              unint64_t v73 = ((unint64_t)(v76 & v20) << v72) | v78;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v73 = v78;
            }
            if (v75) {
              ++v72;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_116:
          char v79 = (int64x2_t *)(a3 + v65);
          if (v372)
          {
            memcpy(__dst, v79, sizeof(__dst));
            char v79 = (int64x2_t *)__dst;
          }
          uint64_t v80 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v81 = v375 + 4 * (v45 - v41);
          char v82 = v47 < 0x10 || v48;
          if ((v82 & 1) == 0 && v382 > 0xF)
          {
            unsigned int v83 = *v80;
            if (v83 == 127)
            {
              int64x2_t v96 = *v79;
              int64x2_t v97 = v79[1];
              int64x2_t v98 = v79[2];
              int64x2_t v99 = v79[3];
              int64x2_t v100 = v79[4];
              int64x2_t v101 = v79[5];
              int64x2_t v102 = v79[6];
              int64x2_t v103 = v79[7];
              uint64_t v84 = 2 * a11;
              *(int64x2_t *)uint64_t v81 = vzip1q_s64(*v79, v97);
              *(int64x2_t *)(v81 + 16) = vzip1q_s64(v100, v101);
              unsigned int v104 = (int64x2_t *)(v81 + v364);
              uint64_t v33 = a11;
              int v105 = (int64x2_t *)(v81 + a11);
              *int v105 = vzip2q_s64(v96, v97);
              v105[1] = vzip2q_s64(v100, v101);
              *unsigned int v104 = vzip1q_s64(v98, v99);
              v104[1] = vzip1q_s64(v102, v103);
              unsigned int v106 = (int32x4_t *)(v81 + v364 + a11);
              int32x4_t v86 = (int32x4_t)vzip2q_s64(v98, v99);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v102, v103);
              *unsigned int v106 = v86;
              v106[1] = v35;
              uint64_t v85 = 128;
            }
            else
            {
              uint64_t v33 = a11;
              uint64_t v84 = 2 * a11;
              if (v83 == 3)
              {
                int32x4_t v86 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
                *(int32x4_t *)uint64_t v81 = v86;
                *(int32x4_t *)(v81 + 16) = v86;
                int16x4_t v93 = (int32x4_t *)(v81 + a11);
                *int16x4_t v93 = v86;
                v93[1] = v86;
                unsigned int v94 = (int32x4_t *)(v81 + v364);
                *unsigned int v94 = v86;
                v94[1] = v86;
                unsigned int v95 = (int32x4_t *)(v81 + v363);
                *unsigned int v95 = v86;
                v95[1] = v86;
                uint64_t v85 = 4;
              }
              else if (*v80)
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v81, a11, (uint64_t)v79, v83, v16, v35);
              }
              else
              {
                uint64_t v85 = 0;
                int32x4_t v86 = 0uLL;
                *(_OWORD *)uint64_t v81 = 0u;
                *(_OWORD *)(v81 + 16) = 0u;
                uint64_t v87 = (_OWORD *)(v81 + a11);
                *uint64_t v87 = 0u;
                v87[1] = 0u;
                unint64_t v88 = (_OWORD *)(v81 + v364);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                unint64_t v89 = (_OWORD *)(v81 + v363);
                _OWORD *v89 = 0u;
                v89[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)v79->i64 + v85;
            uint64_t v108 = v81 + v367;
            unsigned int v109 = v80[1];
            if (v109 == 127)
            {
              int64x2_t v118 = *(int64x2_t *)v107;
              int64x2_t v119 = *(int64x2_t *)(v107 + 16);
              int64x2_t v120 = *(int64x2_t *)(v107 + 32);
              int64x2_t v121 = *(int64x2_t *)(v107 + 48);
              int64x2_t v122 = *(int64x2_t *)(v107 + 64);
              int64x2_t v123 = *(int64x2_t *)(v107 + 80);
              int64x2_t v124 = *(int64x2_t *)(v107 + 96);
              int64x2_t v125 = *(int64x2_t *)(v107 + 112);
              *(int64x2_t *)uint64_t v108 = vzip1q_s64(*(int64x2_t *)v107, v119);
              *(int64x2_t *)(v108 + 16) = vzip1q_s64(v122, v123);
              unsigned int v126 = (int64x2_t *)(v108 + v84);
              int v127 = (int64x2_t *)(v108 + v33);
              *int v127 = vzip2q_s64(v118, v119);
              v127[1] = vzip2q_s64(v122, v123);
              int64x2_t *v126 = vzip1q_s64(v120, v121);
              v126[1] = vzip1q_s64(v124, v125);
              unsigned int v128 = (int32x4_t *)(v108 + v84 + v33);
              int32x4_t v111 = (int32x4_t)vzip2q_s64(v120, v121);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v124, v125);
              *unsigned int v128 = v111;
              v128[1] = v35;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              int32x4_t v111 = (int32x4_t)vld1q_dup_f32((const float *)v107);
              *(int32x4_t *)uint64_t v108 = v111;
              *(int32x4_t *)(v108 + 16) = v111;
              BOOL v115 = (int32x4_t *)(v108 + v33);
              *BOOL v115 = v111;
              v115[1] = v111;
              int8x8_t v116 = (int32x4_t *)(v108 + v84);
              *int8x8_t v116 = v111;
              v116[1] = v111;
              __int32 v117 = (int32x4_t *)(v108 + v363);
              *__int32 v117 = v111;
              v117[1] = v111;
              uint64_t v110 = 4;
            }
            else if (v80[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v81 + v367), v33, v107, v109, v86, v35);
            }
            else
            {
              uint64_t v110 = 0;
              int32x4_t v111 = 0uLL;
              *(_OWORD *)uint64_t v108 = 0u;
              *(_OWORD *)(v108 + 16) = 0u;
              uint64_t v112 = (_OWORD *)(v108 + v33);
              _OWORD *v112 = 0u;
              v112[1] = 0u;
              int v113 = (_OWORD *)(v108 + v84);
              _OWORD *v113 = 0u;
              v113[1] = 0u;
              BOOL v114 = (_OWORD *)(v108 + v363);
              *BOOL v114 = 0u;
              v114[1] = 0u;
            }
            uint64_t v129 = v107 + v110;
            uint64_t v130 = (_OWORD *)(v81 + 32);
            unsigned int v131 = v80[2];
            if (v131 == 127)
            {
              int64x2_t v140 = *(int64x2_t *)v129;
              int64x2_t v141 = *(int64x2_t *)(v129 + 16);
              int64x2_t v142 = *(int64x2_t *)(v129 + 32);
              int64x2_t v143 = *(int64x2_t *)(v129 + 48);
              int64x2_t v144 = *(int64x2_t *)(v129 + 64);
              int64x2_t v145 = *(int64x2_t *)(v129 + 80);
              int64x2_t v146 = *(int64x2_t *)(v129 + 96);
              int64x2_t v147 = *(int64x2_t *)(v129 + 112);
              _OWORD *v130 = vzip1q_s64(*(int64x2_t *)v129, v141);
              *(int64x2_t *)(v81 + 48) = vzip1q_s64(v144, v145);
              uint64_t v148 = (int64x2_t *)((char *)v130 + v84);
              unsigned int v149 = (int64x2_t *)((char *)v130 + v33);
              *unsigned int v149 = vzip2q_s64(v140, v141);
              v149[1] = vzip2q_s64(v144, v145);
              int64x2_t *v148 = vzip1q_s64(v142, v143);
              v148[1] = vzip1q_s64(v146, v147);
              uint64_t v150 = (int32x4_t *)((char *)v130 + v84 + v33);
              int32x4_t v133 = (int32x4_t)vzip2q_s64(v142, v143);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v146, v147);
              *uint64_t v150 = v133;
              v150[1] = v35;
              uint64_t v132 = 128;
            }
            else if (v131 == 3)
            {
              int32x4_t v133 = (int32x4_t)vld1q_dup_f32((const float *)v129);
              *(int32x4_t *)(v81 + 32) = v133;
              *(int32x4_t *)(v81 + 48) = v133;
              char v137 = (int32x4_t *)((char *)v130 + v33);
              *char v137 = v133;
              v137[1] = v133;
              char v138 = (int32x4_t *)((char *)v130 + v84);
              *char v138 = v133;
              v138[1] = v133;
              int32x4_t v139 = (int32x4_t *)((char *)v130 + v363);
              *int32x4_t v139 = v133;
              v139[1] = v133;
              uint64_t v132 = 4;
            }
            else if (v80[2])
            {
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v33, v129, v131, v111, v35);
            }
            else
            {
              uint64_t v132 = 0;
              int32x4_t v133 = 0uLL;
              _OWORD *v130 = 0u;
              *(_OWORD *)(v81 + 48) = 0u;
              unsigned int v134 = (_OWORD *)((char *)v130 + v33);
              _OWORD *v134 = 0u;
              v134[1] = 0u;
              unsigned int v135 = (_OWORD *)((char *)v130 + v84);
              _OWORD *v135 = 0u;
              v135[1] = 0u;
              unsigned int v136 = (_OWORD *)((char *)v130 + v363);
              *unsigned int v136 = 0u;
              v136[1] = 0u;
            }
            uint64_t v151 = v129 + v132;
            int32x4_t v152 = (_OWORD *)(v108 + 32);
            unsigned int v153 = v80[3];
            if (v153 == 127)
            {
              int64x2_t v162 = *(int64x2_t *)v151;
              int64x2_t v163 = *(int64x2_t *)(v151 + 16);
              int64x2_t v164 = *(int64x2_t *)(v151 + 32);
              int64x2_t v165 = *(int64x2_t *)(v151 + 48);
              int64x2_t v166 = *(int64x2_t *)(v151 + 64);
              int64x2_t v167 = *(int64x2_t *)(v151 + 80);
              int64x2_t v168 = *(int64x2_t *)(v151 + 96);
              int64x2_t v169 = *(int64x2_t *)(v151 + 112);
              _OWORD *v152 = vzip1q_s64(*(int64x2_t *)v151, v163);
              *(int64x2_t *)(v108 + 48) = vzip1q_s64(v166, v167);
              uint64_t v170 = (int64x2_t *)((char *)v152 + v84);
              int32x4_t v171 = (int64x2_t *)((char *)v152 + v33);
              *int32x4_t v171 = vzip2q_s64(v162, v163);
              v171[1] = vzip2q_s64(v166, v167);
              *uint64_t v170 = vzip1q_s64(v164, v165);
              v170[1] = vzip1q_s64(v168, v169);
              int32x4_t v172 = (int32x4_t *)((char *)v152 + v84 + v33);
              int32x4_t v155 = (int32x4_t)vzip2q_s64(v164, v165);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v168, v169);
              *int32x4_t v172 = v155;
              v172[1] = v35;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              int32x4_t v155 = (int32x4_t)vld1q_dup_f32((const float *)v151);
              *(int32x4_t *)(v108 + 32) = v155;
              *(int32x4_t *)(v108 + 48) = v155;
              unsigned int v159 = (int32x4_t *)((char *)v152 + v33);
              *unsigned int v159 = v155;
              v159[1] = v155;
              uint64_t v160 = (int32x4_t *)((char *)v152 + v84);
              *uint64_t v160 = v155;
              v160[1] = v155;
              int32x4_t v161 = (int32x4_t *)((char *)v152 + v363);
              *int32x4_t v161 = v155;
              v161[1] = v155;
              uint64_t v154 = 4;
            }
            else if (v80[3])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v33, v151, v153, v133, v35);
            }
            else
            {
              uint64_t v154 = 0;
              int32x4_t v155 = 0uLL;
              _OWORD *v152 = 0u;
              *(_OWORD *)(v108 + 48) = 0u;
              int32x4_t v156 = (_OWORD *)((char *)v152 + v33);
              _OWORD *v156 = 0u;
              v156[1] = 0u;
              int32x4_t v157 = (_OWORD *)((char *)v152 + v84);
              _OWORD *v157 = 0u;
              v157[1] = 0u;
              uint64_t v158 = (_OWORD *)((char *)v152 + v363);
              *uint64_t v158 = 0u;
              v158[1] = 0u;
            }
            uint64_t v173 = v151 + v154;
            uint64_t v174 = v81 + v366;
            unsigned int v175 = v80[4];
            if (v175 == 127)
            {
              int64x2_t v184 = *(int64x2_t *)v173;
              int64x2_t v185 = *(int64x2_t *)(v173 + 16);
              int64x2_t v186 = *(int64x2_t *)(v173 + 32);
              int64x2_t v187 = *(int64x2_t *)(v173 + 48);
              int64x2_t v188 = *(int64x2_t *)(v173 + 64);
              int64x2_t v189 = *(int64x2_t *)(v173 + 80);
              int64x2_t v190 = *(int64x2_t *)(v173 + 96);
              int64x2_t v191 = *(int64x2_t *)(v173 + 112);
              *(int64x2_t *)uint64_t v174 = vzip1q_s64(*(int64x2_t *)v173, v185);
              *(int64x2_t *)(v174 + 16) = vzip1q_s64(v188, v189);
              uint64_t v192 = (int64x2_t *)(v174 + v84);
              int v193 = (int64x2_t *)(v174 + v33);
              *int v193 = vzip2q_s64(v184, v185);
              v193[1] = vzip2q_s64(v188, v189);
              *uint64_t v192 = vzip1q_s64(v186, v187);
              v192[1] = vzip1q_s64(v190, v191);
              BOOL v194 = (int32x4_t *)(v174 + v84 + v33);
              int32x4_t v177 = (int32x4_t)vzip2q_s64(v186, v187);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v190, v191);
              *BOOL v194 = v177;
              v194[1] = v35;
              uint64_t v176 = 128;
            }
            else if (v175 == 3)
            {
              int32x4_t v177 = (int32x4_t)vld1q_dup_f32((const float *)v173);
              *(int32x4_t *)uint64_t v174 = v177;
              *(int32x4_t *)(v174 + 16) = v177;
              uint64_t v181 = (int32x4_t *)(v174 + v33);
              *uint64_t v181 = v177;
              v181[1] = v177;
              int32x4_t v182 = (int32x4_t *)(v174 + v84);
              *int32x4_t v182 = v177;
              v182[1] = v177;
              unsigned int v183 = (int32x4_t *)(v174 + v363);
              *unsigned int v183 = v177;
              v183[1] = v177;
              uint64_t v176 = 4;
            }
            else if (v80[4])
            {
              uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v81 + v366), v33, v173, v175, v155, v35);
            }
            else
            {
              uint64_t v176 = 0;
              int32x4_t v177 = 0uLL;
              *(_OWORD *)uint64_t v174 = 0u;
              *(_OWORD *)(v174 + 16) = 0u;
              unint64_t v178 = (_OWORD *)(v174 + v33);
              _OWORD *v178 = 0u;
              v178[1] = 0u;
              uint64_t v179 = (_OWORD *)(v174 + v84);
              _OWORD *v179 = 0u;
              v179[1] = 0u;
              unsigned int v180 = (_OWORD *)(v174 + v363);
              *unsigned int v180 = 0u;
              v180[1] = 0u;
            }
            uint64_t v195 = v173 + v176;
            uint64_t v196 = v81 + 12 * a11;
            unsigned int v197 = v80[5];
            if (v197 == 127)
            {
              int64x2_t v206 = *(int64x2_t *)v195;
              int64x2_t v207 = *(int64x2_t *)(v195 + 16);
              int64x2_t v208 = *(int64x2_t *)(v195 + 32);
              int64x2_t v209 = *(int64x2_t *)(v195 + 48);
              int64x2_t v210 = *(int64x2_t *)(v195 + 64);
              int64x2_t v211 = *(int64x2_t *)(v195 + 80);
              int64x2_t v212 = *(int64x2_t *)(v195 + 96);
              int64x2_t v213 = *(int64x2_t *)(v195 + 112);
              *(int64x2_t *)uint64_t v196 = vzip1q_s64(*(int64x2_t *)v195, v207);
              *(int64x2_t *)(v196 + 16) = vzip1q_s64(v210, v211);
              unsigned int v214 = (int64x2_t *)(v196 + v84);
              unsigned int v215 = (int64x2_t *)(v196 + v33);
              *unsigned int v215 = vzip2q_s64(v206, v207);
              v215[1] = vzip2q_s64(v210, v211);
              int64x2_t *v214 = vzip1q_s64(v208, v209);
              v214[1] = vzip1q_s64(v212, v213);
              __int32 v216 = (int32x4_t *)(v196 + v84 + v33);
              int32x4_t v199 = (int32x4_t)vzip2q_s64(v208, v209);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v212, v213);
              *__int32 v216 = v199;
              v216[1] = v35;
              uint64_t v198 = 128;
            }
            else if (v197 == 3)
            {
              int32x4_t v199 = (int32x4_t)vld1q_dup_f32((const float *)v195);
              *(int32x4_t *)uint64_t v196 = v199;
              *(int32x4_t *)(v196 + 16) = v199;
              uint64_t v203 = (int32x4_t *)(v196 + v33);
              *uint64_t v203 = v199;
              v203[1] = v199;
              unsigned int v204 = (int32x4_t *)(v196 + v84);
              *unsigned int v204 = v199;
              v204[1] = v199;
              uint64_t v205 = (int32x4_t *)(v196 + v363);
              *uint64_t v205 = v199;
              v205[1] = v199;
              uint64_t v198 = 4;
            }
            else if (v80[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v196, v33, v195, v197, v177, v35);
            }
            else
            {
              uint64_t v198 = 0;
              int32x4_t v199 = 0uLL;
              *(_OWORD *)uint64_t v196 = 0u;
              *(_OWORD *)(v196 + 16) = 0u;
              unsigned int v200 = (_OWORD *)(v196 + v33);
              _OWORD *v200 = 0u;
              v200[1] = 0u;
              unsigned int v201 = (_OWORD *)(v196 + v84);
              _OWORD *v201 = 0u;
              v201[1] = 0u;
              unsigned int v202 = (_OWORD *)(v196 + v363);
              *unsigned int v202 = 0u;
              v202[1] = 0u;
            }
            uint64_t v217 = v195 + v198;
            uint64_t v218 = (_OWORD *)(v174 + 32);
            unsigned int v219 = v80[6];
            if (v219 == 127)
            {
              int64x2_t v228 = *(int64x2_t *)v217;
              int64x2_t v229 = *(int64x2_t *)(v217 + 16);
              int64x2_t v230 = *(int64x2_t *)(v217 + 32);
              int64x2_t v231 = *(int64x2_t *)(v217 + 48);
              int64x2_t v232 = *(int64x2_t *)(v217 + 64);
              int64x2_t v233 = *(int64x2_t *)(v217 + 80);
              int64x2_t v234 = *(int64x2_t *)(v217 + 96);
              int64x2_t v235 = *(int64x2_t *)(v217 + 112);
              _OWORD *v218 = vzip1q_s64(*(int64x2_t *)v217, v229);
              *(int64x2_t *)(v174 + 48) = vzip1q_s64(v232, v233);
              char v236 = (int64x2_t *)((char *)v218 + v84);
              int v237 = (int64x2_t *)((char *)v218 + v33);
              *int v237 = vzip2q_s64(v228, v229);
              v237[1] = vzip2q_s64(v232, v233);
              *char v236 = vzip1q_s64(v230, v231);
              v236[1] = vzip1q_s64(v234, v235);
              int32x4_t v238 = (int32x4_t *)((char *)v218 + v84 + v33);
              int32x4_t v221 = (int32x4_t)vzip2q_s64(v230, v231);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v234, v235);
              *int32x4_t v238 = v221;
              v238[1] = v35;
              uint64_t v220 = 128;
            }
            else if (v219 == 3)
            {
              int32x4_t v221 = (int32x4_t)vld1q_dup_f32((const float *)v217);
              *(int32x4_t *)(v174 + 32) = v221;
              *(int32x4_t *)(v174 + 48) = v221;
              int v225 = (int32x4_t *)((char *)v218 + v33);
              *int v225 = v221;
              v225[1] = v221;
              unsigned int v226 = (int32x4_t *)((char *)v218 + v84);
              *unsigned int v226 = v221;
              v226[1] = v221;
              unsigned int v227 = (int32x4_t *)((char *)v218 + v363);
              *unsigned int v227 = v221;
              v227[1] = v221;
              uint64_t v220 = 4;
            }
            else if (v80[6])
            {
              uint64_t v220 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v218, v33, v217, v219, v199, v35);
            }
            else
            {
              uint64_t v220 = 0;
              int32x4_t v221 = 0uLL;
              _OWORD *v218 = 0u;
              *(_OWORD *)(v174 + 48) = 0u;
              unsigned int v222 = (_OWORD *)((char *)v218 + v33);
              _OWORD *v222 = 0u;
              v222[1] = 0u;
              unsigned int v223 = (_OWORD *)((char *)v218 + v84);
              _OWORD *v223 = 0u;
              v223[1] = 0u;
              uint64_t v224 = (_OWORD *)((char *)v218 + v363);
              *uint64_t v224 = 0u;
              v224[1] = 0u;
            }
            uint64_t v239 = v217 + v220;
            int32x4_t v240 = (_OWORD *)(v196 + 32);
            unsigned int v241 = v80[7];
            if (v241 == 127)
            {
              int64x2_t v245 = *(int64x2_t *)v239;
              int64x2_t v246 = *(int64x2_t *)(v239 + 16);
              int64x2_t v247 = *(int64x2_t *)(v239 + 32);
              int64x2_t v248 = *(int64x2_t *)(v239 + 48);
              int64x2_t v249 = *(int64x2_t *)(v239 + 64);
              int64x2_t v250 = *(int64x2_t *)(v239 + 80);
              int64x2_t v251 = *(int64x2_t *)(v239 + 96);
              int64x2_t v252 = *(int64x2_t *)(v239 + 112);
              _OWORD *v240 = vzip1q_s64(*(int64x2_t *)v239, v246);
              *(int64x2_t *)(v196 + 48) = vzip1q_s64(v249, v250);
              int32x4_t v253 = (int64x2_t *)((char *)v240 + v84);
              int32x4_t v254 = (int64x2_t *)((char *)v240 + v33);
              *int32x4_t v254 = vzip2q_s64(v245, v246);
              v254[1] = vzip2q_s64(v249, v250);
              *int32x4_t v253 = vzip1q_s64(v247, v248);
              v253[1] = vzip1q_s64(v251, v252);
              int32x4_t v255 = (int32x4_t *)((char *)v240 + v84 + v33);
              int32x4_t v16 = (int32x4_t)vzip2q_s64(v247, v248);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v251, v252);
              *int32x4_t v255 = v16;
              v255[1] = v35;
              unsigned int v41 = a7;
              uint64_t v15 = v379;
            }
            else
            {
              uint64_t v15 = v379;
              if (v241 == 3)
              {
                int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v239);
                *(int32x4_t *)(v196 + 32) = v16;
                *(int32x4_t *)(v196 + 48) = v16;
LABEL_182:
                int16x8_t v242 = (int32x4_t *)((char *)v240 + v33);
                *int16x8_t v242 = v16;
                v242[1] = v16;
                int16x8_t v243 = (int32x4_t *)((char *)v240 + v84);
                *int16x8_t v243 = v16;
                v243[1] = v16;
                int32x4_t v244 = (int32x4_t *)((char *)v240 + v363);
                *int32x4_t v244 = v16;
                v244[1] = v16;
              }
              else
              {
                if (!v241)
                {
                  int32x4_t v16 = 0uLL;
                  _OWORD *v240 = 0u;
                  *(_OWORD *)(v196 + 48) = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v240, v33, v239, v241, v221, v35);
              }
              unsigned int v41 = a7;
            }
LABEL_47:
            int v40 = v20 & v352;
            unsigned int v42 = v38 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v379;
          block[5] = v79;
          char v390 = v47;
          char v391 = v382;
          unsigned int v386 = v368;
          unsigned int v387 = v45 - v43;
          block[6] = v80;
          uint64_t v384 = v81;
          uint64_t v33 = a11;
          uint64_t v385 = a11;
          unsigned int v388 = v376;
          unsigned int v389 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v379 + 8) + 7384), block);
            unsigned int v41 = a7;
            uint64_t v15 = v379;
            goto LABEL_47;
          }
          unsigned int v90 = *v80;
          if (v90 == 127)
          {
            int64x2_t v256 = *v79;
            int64x2_t v257 = v79[1];
            int64x2_t v258 = v79[2];
            int64x2_t v259 = v79[3];
            int64x2_t v260 = v79[4];
            int64x2_t v261 = v79[5];
            int64x2_t v262 = v79[6];
            int64x2_t v263 = v79[7];
            int64x2_t v393 = vzip1q_s64(*v79, v257);
            int64x2_t v394 = vzip1q_s64(v260, v261);
            int64x2_t v397 = vzip2q_s64(v256, v257);
            int64x2_t v398 = vzip2q_s64(v260, v261);
            int64x2_t v401 = vzip1q_s64(v258, v259);
            int64x2_t v402 = vzip1q_s64(v262, v263);
            int32x4_t v92 = (int32x4_t)vzip2q_s64(v258, v259);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v262, v263);
            int32x4_t v405 = v92;
            int32x4_t v406 = v35;
            uint64_t v91 = 128;
          }
          else if (v90 == 3)
          {
            int32x4_t v92 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
            int64x2_t v393 = (int64x2_t)v92;
            int64x2_t v394 = (int64x2_t)v92;
            int64x2_t v397 = (int64x2_t)v92;
            int64x2_t v398 = (int64x2_t)v92;
            int64x2_t v401 = (int64x2_t)v92;
            int64x2_t v402 = (int64x2_t)v92;
            int32x4_t v405 = v92;
            int32x4_t v406 = v92;
            uint64_t v91 = 4;
          }
          else if (*v80)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v393, 64, (uint64_t)v79, v90, v16, v35);
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v92 = 0uLL;
            int64x2_t v394 = 0u;
            int64x2_t v393 = 0u;
            int64x2_t v397 = 0u;
            int64x2_t v398 = 0u;
            int64x2_t v401 = 0u;
            int64x2_t v402 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v406 = 0u;
          }
          uint64_t v264 = (uint64_t)v79->i64 + v91;
          unsigned int v265 = v80[1];
          if (v265 == 127)
          {
            int64x2_t v268 = *(int64x2_t *)v264;
            int64x2_t v269 = *(int64x2_t *)(v264 + 16);
            int64x2_t v270 = *(int64x2_t *)(v264 + 32);
            int64x2_t v271 = *(int64x2_t *)(v264 + 48);
            int64x2_t v272 = *(int64x2_t *)(v264 + 64);
            int64x2_t v273 = *(int64x2_t *)(v264 + 80);
            int64x2_t v274 = *(int64x2_t *)(v264 + 96);
            int64x2_t v275 = *(int64x2_t *)(v264 + 112);
            int64x2_t v409 = vzip1q_s64(*(int64x2_t *)v264, v269);
            int64x2_t v410 = vzip1q_s64(v272, v273);
            int64x2_t v413 = vzip2q_s64(v268, v269);
            int64x2_t v414 = vzip2q_s64(v272, v273);
            int64x2_t v417 = vzip1q_s64(v270, v271);
            int64x2_t v418 = vzip1q_s64(v274, v275);
            int32x4_t v267 = (int32x4_t)vzip2q_s64(v270, v271);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v274, v275);
            int32x4_t v421 = v267;
            int32x4_t v422 = v35;
            uint64_t v266 = 128;
          }
          else if (v265 == 3)
          {
            int32x4_t v267 = (int32x4_t)vld1q_dup_f32((const float *)v264);
            int64x2_t v409 = (int64x2_t)v267;
            int64x2_t v410 = (int64x2_t)v267;
            int64x2_t v413 = (int64x2_t)v267;
            int64x2_t v414 = (int64x2_t)v267;
            int64x2_t v417 = (int64x2_t)v267;
            int64x2_t v418 = (int64x2_t)v267;
            int32x4_t v421 = v267;
            int32x4_t v422 = v267;
            uint64_t v266 = 4;
          }
          else if (v80[1])
          {
            uint64_t v266 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 64, v264, v265, v92, v35);
          }
          else
          {
            uint64_t v266 = 0;
            int32x4_t v267 = 0uLL;
            int64x2_t v409 = 0u;
            int64x2_t v410 = 0u;
            int64x2_t v413 = 0u;
            int64x2_t v414 = 0u;
            int64x2_t v417 = 0u;
            int64x2_t v418 = 0u;
            int32x4_t v421 = 0u;
            int32x4_t v422 = 0u;
          }
          uint64_t v276 = v264 + v266;
          unsigned int v277 = v80[2];
          if (v277 == 127)
          {
            int64x2_t v280 = *(int64x2_t *)v276;
            int64x2_t v281 = *(int64x2_t *)(v276 + 16);
            int64x2_t v282 = *(int64x2_t *)(v276 + 32);
            int64x2_t v283 = *(int64x2_t *)(v276 + 48);
            int64x2_t v284 = *(int64x2_t *)(v276 + 64);
            int64x2_t v285 = *(int64x2_t *)(v276 + 80);
            int64x2_t v286 = *(int64x2_t *)(v276 + 96);
            int64x2_t v287 = *(int64x2_t *)(v276 + 112);
            int64x2_t v395 = vzip1q_s64(*(int64x2_t *)v276, v281);
            int64x2_t v396 = vzip1q_s64(v284, v285);
            int64x2_t v399 = vzip2q_s64(v280, v281);
            int64x2_t v400 = vzip2q_s64(v284, v285);
            int64x2_t v403 = vzip1q_s64(v282, v283);
            int64x2_t v404 = vzip1q_s64(v286, v287);
            int32x4_t v279 = (int32x4_t)vzip2q_s64(v282, v283);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v286, v287);
            int32x4_t v407 = v279;
            int32x4_t v408 = v35;
            uint64_t v278 = 128;
          }
          else if (v277 == 3)
          {
            int32x4_t v279 = (int32x4_t)vld1q_dup_f32((const float *)v276);
            int64x2_t v395 = (int64x2_t)v279;
            int64x2_t v396 = (int64x2_t)v279;
            int64x2_t v399 = (int64x2_t)v279;
            int64x2_t v400 = (int64x2_t)v279;
            int64x2_t v403 = (int64x2_t)v279;
            int64x2_t v404 = (int64x2_t)v279;
            int32x4_t v407 = v279;
            int32x4_t v408 = v279;
            uint64_t v278 = 4;
          }
          else if (v80[2])
          {
            uint64_t v278 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v395, 64, v276, v277, v267, v35);
          }
          else
          {
            uint64_t v278 = 0;
            int32x4_t v279 = 0uLL;
            int64x2_t v395 = 0u;
            int64x2_t v396 = 0u;
            int64x2_t v399 = 0u;
            int64x2_t v400 = 0u;
            int64x2_t v403 = 0u;
            int64x2_t v404 = 0u;
            int32x4_t v407 = 0u;
            int32x4_t v408 = 0u;
          }
          uint64_t v288 = v276 + v278;
          unsigned int v289 = v80[3];
          if (v289 == 127)
          {
            int64x2_t v292 = *(int64x2_t *)v288;
            int64x2_t v293 = *(int64x2_t *)(v288 + 16);
            int64x2_t v294 = *(int64x2_t *)(v288 + 32);
            int64x2_t v295 = *(int64x2_t *)(v288 + 48);
            int64x2_t v296 = *(int64x2_t *)(v288 + 64);
            int64x2_t v297 = *(int64x2_t *)(v288 + 80);
            int64x2_t v298 = *(int64x2_t *)(v288 + 96);
            int64x2_t v299 = *(int64x2_t *)(v288 + 112);
            int64x2_t v411 = vzip1q_s64(*(int64x2_t *)v288, v293);
            int64x2_t v412 = vzip1q_s64(v296, v297);
            int64x2_t v415 = vzip2q_s64(v292, v293);
            int64x2_t v416 = vzip2q_s64(v296, v297);
            int64x2_t v419 = vzip1q_s64(v294, v295);
            int64x2_t v420 = vzip1q_s64(v298, v299);
            int32x4_t v291 = (int32x4_t)vzip2q_s64(v294, v295);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v298, v299);
            int32x4_t v423 = v291;
            int32x4_t v424 = v35;
            uint64_t v290 = 128;
          }
          else if (v289 == 3)
          {
            int32x4_t v291 = (int32x4_t)vld1q_dup_f32((const float *)v288);
            int64x2_t v411 = (int64x2_t)v291;
            int64x2_t v412 = (int64x2_t)v291;
            int64x2_t v415 = (int64x2_t)v291;
            int64x2_t v416 = (int64x2_t)v291;
            int64x2_t v419 = (int64x2_t)v291;
            int64x2_t v420 = (int64x2_t)v291;
            int32x4_t v423 = v291;
            int32x4_t v424 = v291;
            uint64_t v290 = 4;
          }
          else if (v80[3])
          {
            uint64_t v290 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 64, v288, v289, v279, v35);
          }
          else
          {
            uint64_t v290 = 0;
            int32x4_t v291 = 0uLL;
            int64x2_t v411 = 0u;
            int64x2_t v412 = 0u;
            int64x2_t v415 = 0u;
            int64x2_t v416 = 0u;
            int64x2_t v419 = 0u;
            int64x2_t v420 = 0u;
            int32x4_t v423 = 0u;
            int32x4_t v424 = 0u;
          }
          uint64_t v300 = v288 + v290;
          unsigned int v301 = v80[4];
          if (v301 == 127)
          {
            int64x2_t v304 = *(int64x2_t *)v300;
            int64x2_t v305 = *(int64x2_t *)(v300 + 16);
            int64x2_t v306 = *(int64x2_t *)(v300 + 32);
            int64x2_t v307 = *(int64x2_t *)(v300 + 48);
            int64x2_t v308 = *(int64x2_t *)(v300 + 64);
            int64x2_t v309 = *(int64x2_t *)(v300 + 80);
            int64x2_t v310 = *(int64x2_t *)(v300 + 96);
            int64x2_t v311 = *(int64x2_t *)(v300 + 112);
            int64x2_t v425 = vzip1q_s64(*(int64x2_t *)v300, v305);
            int64x2_t v426 = vzip1q_s64(v308, v309);
            int64x2_t v429 = vzip2q_s64(v304, v305);
            int64x2_t v430 = vzip2q_s64(v308, v309);
            int64x2_t v433 = vzip1q_s64(v306, v307);
            int64x2_t v434 = vzip1q_s64(v310, v311);
            int32x4_t v303 = (int32x4_t)vzip2q_s64(v306, v307);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v310, v311);
            int32x4_t v437 = v303;
            int32x4_t v438 = v35;
            uint64_t v302 = 128;
          }
          else if (v301 == 3)
          {
            int32x4_t v303 = (int32x4_t)vld1q_dup_f32((const float *)v300);
            int64x2_t v425 = (int64x2_t)v303;
            int64x2_t v426 = (int64x2_t)v303;
            int64x2_t v429 = (int64x2_t)v303;
            int64x2_t v430 = (int64x2_t)v303;
            int64x2_t v433 = (int64x2_t)v303;
            int64x2_t v434 = (int64x2_t)v303;
            int32x4_t v437 = v303;
            int32x4_t v438 = v303;
            uint64_t v302 = 4;
          }
          else if (v80[4])
          {
            uint64_t v302 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v425, 64, v300, v301, v291, v35);
          }
          else
          {
            uint64_t v302 = 0;
            int32x4_t v303 = 0uLL;
            int64x2_t v425 = 0u;
            int64x2_t v426 = 0u;
            int64x2_t v429 = 0u;
            int64x2_t v430 = 0u;
            int64x2_t v433 = 0u;
            int64x2_t v434 = 0u;
            int32x4_t v437 = 0u;
            int32x4_t v438 = 0u;
          }
          uint64_t v312 = v300 + v302;
          unsigned int v313 = v80[5];
          if (v313 == 127)
          {
            int64x2_t v316 = *(int64x2_t *)v312;
            int64x2_t v317 = *(int64x2_t *)(v312 + 16);
            int64x2_t v318 = *(int64x2_t *)(v312 + 32);
            int64x2_t v319 = *(int64x2_t *)(v312 + 48);
            int64x2_t v320 = *(int64x2_t *)(v312 + 64);
            int64x2_t v321 = *(int64x2_t *)(v312 + 80);
            int64x2_t v322 = *(int64x2_t *)(v312 + 96);
            int64x2_t v323 = *(int64x2_t *)(v312 + 112);
            int64x2_t v441 = vzip1q_s64(*(int64x2_t *)v312, v317);
            int64x2_t v442 = vzip1q_s64(v320, v321);
            int64x2_t v445 = vzip2q_s64(v316, v317);
            int64x2_t v446 = vzip2q_s64(v320, v321);
            int64x2_t v449 = vzip1q_s64(v318, v319);
            int64x2_t v450 = vzip1q_s64(v322, v323);
            int32x4_t v315 = (int32x4_t)vzip2q_s64(v318, v319);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v322, v323);
            int32x4_t v453 = v315;
            int32x4_t v454 = v35;
            uint64_t v314 = 128;
          }
          else if (v313 == 3)
          {
            int32x4_t v315 = (int32x4_t)vld1q_dup_f32((const float *)v312);
            int64x2_t v441 = (int64x2_t)v315;
            int64x2_t v442 = (int64x2_t)v315;
            int64x2_t v445 = (int64x2_t)v315;
            int64x2_t v446 = (int64x2_t)v315;
            int64x2_t v449 = (int64x2_t)v315;
            int64x2_t v450 = (int64x2_t)v315;
            int32x4_t v453 = v315;
            int32x4_t v454 = v315;
            uint64_t v314 = 4;
          }
          else if (v80[5])
          {
            uint64_t v314 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v441, 64, v312, v313, v303, v35);
          }
          else
          {
            uint64_t v314 = 0;
            int32x4_t v315 = 0uLL;
            int64x2_t v441 = 0u;
            int64x2_t v442 = 0u;
            int64x2_t v445 = 0u;
            int64x2_t v446 = 0u;
            int64x2_t v449 = 0u;
            int64x2_t v450 = 0u;
            int32x4_t v453 = 0u;
            int32x4_t v454 = 0u;
          }
          uint64_t v324 = v312 + v314;
          unsigned int v325 = v80[6];
          if (v325 == 127)
          {
            int64x2_t v328 = *(int64x2_t *)v324;
            int64x2_t v329 = *(int64x2_t *)(v324 + 16);
            int64x2_t v330 = *(int64x2_t *)(v324 + 32);
            int64x2_t v331 = *(int64x2_t *)(v324 + 48);
            int64x2_t v332 = *(int64x2_t *)(v324 + 64);
            int64x2_t v333 = *(int64x2_t *)(v324 + 80);
            int64x2_t v334 = *(int64x2_t *)(v324 + 96);
            int64x2_t v335 = *(int64x2_t *)(v324 + 112);
            int64x2_t v427 = vzip1q_s64(*(int64x2_t *)v324, v329);
            int64x2_t v428 = vzip1q_s64(v332, v333);
            int64x2_t v431 = vzip2q_s64(v328, v329);
            int64x2_t v432 = vzip2q_s64(v332, v333);
            int64x2_t v435 = vzip1q_s64(v330, v331);
            int64x2_t v436 = vzip1q_s64(v334, v335);
            int32x4_t v327 = (int32x4_t)vzip2q_s64(v330, v331);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v334, v335);
            int32x4_t v439 = v327;
            int32x4_t v440 = v35;
            uint64_t v326 = 128;
          }
          else if (v325 == 3)
          {
            int32x4_t v327 = (int32x4_t)vld1q_dup_f32((const float *)v324);
            int64x2_t v427 = (int64x2_t)v327;
            int64x2_t v428 = (int64x2_t)v327;
            int64x2_t v431 = (int64x2_t)v327;
            int64x2_t v432 = (int64x2_t)v327;
            int64x2_t v435 = (int64x2_t)v327;
            int64x2_t v436 = (int64x2_t)v327;
            int32x4_t v439 = v327;
            int32x4_t v440 = v327;
            uint64_t v326 = 4;
          }
          else if (v80[6])
          {
            uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v427, 64, v324, v325, v315, v35);
          }
          else
          {
            uint64_t v326 = 0;
            int32x4_t v327 = 0uLL;
            int64x2_t v427 = 0u;
            int64x2_t v428 = 0u;
            int64x2_t v431 = 0u;
            int64x2_t v432 = 0u;
            int64x2_t v435 = 0u;
            int64x2_t v436 = 0u;
            int32x4_t v439 = 0u;
            int32x4_t v440 = 0u;
          }
          uint64_t v336 = v324 + v326;
          unsigned int v337 = v80[7];
          if (v337 == 127)
          {
            int64x2_t v338 = *(int64x2_t *)v336;
            int64x2_t v339 = *(int64x2_t *)(v336 + 16);
            int64x2_t v340 = *(int64x2_t *)(v336 + 32);
            int64x2_t v341 = *(int64x2_t *)(v336 + 48);
            int64x2_t v342 = *(int64x2_t *)(v336 + 64);
            int64x2_t v343 = *(int64x2_t *)(v336 + 80);
            int64x2_t v344 = *(int64x2_t *)(v336 + 96);
            int64x2_t v345 = *(int64x2_t *)(v336 + 112);
            int64x2_t v443 = vzip1q_s64(*(int64x2_t *)v336, v339);
            int64x2_t v444 = vzip1q_s64(v342, v343);
            int64x2_t v447 = vzip2q_s64(v338, v339);
            int64x2_t v448 = vzip2q_s64(v342, v343);
            int64x2_t v451 = vzip1q_s64(v340, v341);
            int64x2_t v452 = vzip1q_s64(v344, v345);
            int32x4_t v16 = (int32x4_t)vzip2q_s64(v340, v341);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v344, v345);
            int32x4_t v455 = v16;
            int32x4_t v456 = v35;
            unsigned int v41 = a7;
            uint64_t v15 = v379;
          }
          else
          {
            unsigned int v41 = a7;
            uint64_t v15 = v379;
            if (v337 == 3)
            {
              int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v336);
              int64x2_t v443 = (int64x2_t)v16;
              int64x2_t v444 = (int64x2_t)v16;
              int64x2_t v447 = (int64x2_t)v16;
              int64x2_t v448 = (int64x2_t)v16;
              int64x2_t v451 = (int64x2_t)v16;
              int64x2_t v452 = (int64x2_t)v16;
              int32x4_t v455 = v16;
              int32x4_t v456 = v16;
            }
            else if (v337)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v443, 64, v336, v337, v327, v35);
            }
            else
            {
              int32x4_t v16 = 0uLL;
              int64x2_t v443 = 0u;
              int64x2_t v444 = 0u;
              int64x2_t v447 = 0u;
              int64x2_t v448 = 0u;
              int64x2_t v451 = 0u;
              int64x2_t v452 = 0u;
              int32x4_t v455 = 0u;
              int32x4_t v456 = 0u;
            }
          }
          unint64_t v346 = v388;
          int v40 = v20 & v352;
          unsigned int v42 = v38 + 1;
          if (v388)
          {
            unint64_t v347 = 0;
            BOOL v348 = &v393.i8[64 * (unint64_t)v386 + 4 * v387];
            unsigned int v349 = v389;
            do
            {
              if (v349)
              {
                uint64_t v350 = 0;
                uint64_t v351 = v384 + v385 * v347;
                do
                {
                  *(unsigned char *)(v351 + v350) = v348[v350];
                  ++v350;
                  unsigned int v349 = v389;
                }
                while (4 * (unint64_t)v389 > v350);
                unint64_t v346 = v388;
              }
              ++v347;
              v348 += 64;
            }
            while (v347 < v346);
          }
LABEL_48:
          BOOL v21 = v38 == v370 >> 4;
          unsigned int v38 = v42;
        }
        while (!v21);
        BOOL v21 = v20++ == v357;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v457 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v378 = a8;
  unsigned int v358 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v357 = v358 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v372 = v24;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v371 = 0;
LABEL_32:
      unsigned int v369 = v26 - 4;
      unsigned int v362 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v355 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v371 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v371 = 0;
  unsigned int v355 = 0;
  unsigned int v362 = 0;
  unsigned int v369 = 0;
LABEL_33:
  if (v20 <= v357)
  {
    unsigned int v370 = a7 + a9 - 1;
    if (a7 >> 4 <= v370 >> 4)
    {
      uint64_t v33 = a11;
      unsigned int v381 = v18 >> 4;
      unsigned int v354 = v19 >> 4;
      int v380 = (v18 & 0xF) + 1;
      int v353 = (v19 & 0xF) + 1;
      int v352 = ~(-1 << v362);
      uint64_t v366 = 8 * a11;
      uint64_t v367 = 4 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v35.i64[1] = -1;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v35.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v365 = v16.i32[0] | v16.i32[1];
      BOOL v360 = v16.i32[1] != 0;
      uint64_t v361 = v16.i64[0];
      BOOL v359 = v16.i32[0] != 0;
      uint64_t v379 = v15;
      uint64_t v363 = 3 * a11;
      uint64_t v364 = 2 * a11;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v378) {
          int v37 = v378;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v358 < v36) {
          unsigned int v36 = v358;
        }
        int v368 = v37 - 16 * v20;
        int v376 = v36 - v37 + 1;
        unsigned int v38 = a7 >> 4;
        int v39 = v353;
        if (v20 != v354) {
          int v39 = 16;
        }
        unsigned int v382 = v39;
        int v40 = v20 & v352;
        uint64_t v375 = a2 + (v37 - v378) * v33;
        unsigned int v41 = a7;
        do
        {
          unsigned int v43 = 16 * v38;
          unsigned int v44 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v41) {
            int v45 = v41;
          }
          else {
            int v45 = 16 * v38;
          }
          if (v370 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v38 == v381) {
            unsigned int v47 = v380;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (16 * v20 >= v378 && v43 >= v41)
          {
            int v49 = v380;
            if (v38 != v381) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v376 != v382;
          }
          if (v371)
          {
            if (v369 | v362)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v369 != 0;
              BOOL v55 = v362 != 0;
              unsigned int v56 = v369;
              unsigned int v57 = v362;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v38 & ~(-1 << v369) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v40 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v15 + 320) * ((v38 >> v369) + (v20 >> v362) * v355) + (v52 << 10);
          }
          else
          {
            if (v365)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v360;
              BOOL v62 = v359;
              int v63 = HIDWORD(v361);
              int v64 = v361;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v38) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_115:
              unint64_t v73 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_115;
            }
          }
          int v72 = 0;
          unint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            BOOL v77 = !v74;
            if (v74)
            {
              unint64_t v78 = ((unint64_t)(v76 & v38) << v72) | v73;
            }
            else
            {
              unsigned int v68 = 0;
              unint64_t v78 = v73;
            }
            if (!v77) {
              ++v72;
            }
            --v71;
            if (v75)
            {
              unint64_t v73 = ((unint64_t)(v76 & v20) << v72) | v78;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v73 = v78;
            }
            if (v75) {
              ++v72;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_116:
          char v79 = (int64x2_t *)(a3 + v65);
          if (v372)
          {
            memcpy(__dst, v79, sizeof(__dst));
            char v79 = (int64x2_t *)__dst;
          }
          uint64_t v80 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v81 = v375 + 4 * (v45 - v41);
          char v82 = v47 < 0x10 || v48;
          if ((v82 & 1) == 0 && v382 > 0xF)
          {
            unsigned int v83 = *v80;
            if (v83 == 127)
            {
              int64x2_t v96 = *v79;
              int64x2_t v97 = v79[1];
              int64x2_t v98 = v79[2];
              int64x2_t v99 = v79[3];
              int64x2_t v100 = v79[4];
              int64x2_t v101 = v79[5];
              int64x2_t v102 = v79[6];
              int64x2_t v103 = v79[7];
              uint64_t v84 = 2 * a11;
              *(int64x2_t *)uint64_t v81 = vzip1q_s64(*v79, v97);
              *(int64x2_t *)(v81 + 16) = vzip1q_s64(v100, v101);
              unsigned int v104 = (int64x2_t *)(v81 + v364);
              uint64_t v33 = a11;
              int v105 = (int64x2_t *)(v81 + a11);
              *int v105 = vzip2q_s64(v96, v97);
              v105[1] = vzip2q_s64(v100, v101);
              *unsigned int v104 = vzip1q_s64(v98, v99);
              v104[1] = vzip1q_s64(v102, v103);
              unsigned int v106 = (int32x4_t *)(v81 + v364 + a11);
              int32x4_t v86 = (int32x4_t)vzip2q_s64(v98, v99);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v102, v103);
              *unsigned int v106 = v86;
              v106[1] = v35;
              uint64_t v85 = 128;
            }
            else
            {
              uint64_t v33 = a11;
              uint64_t v84 = 2 * a11;
              if (v83 == 3)
              {
                int32x4_t v86 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
                *(int32x4_t *)uint64_t v81 = v86;
                *(int32x4_t *)(v81 + 16) = v86;
                int16x4_t v93 = (int32x4_t *)(v81 + a11);
                *int16x4_t v93 = v86;
                v93[1] = v86;
                unsigned int v94 = (int32x4_t *)(v81 + v364);
                *unsigned int v94 = v86;
                v94[1] = v86;
                unsigned int v95 = (int32x4_t *)(v81 + v363);
                *unsigned int v95 = v86;
                v95[1] = v86;
                uint64_t v85 = 4;
              }
              else if (*v80)
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v81, a11, (uint64_t)v79, v83, v16, v35);
              }
              else
              {
                uint64_t v85 = 0;
                int32x4_t v86 = 0uLL;
                *(_OWORD *)uint64_t v81 = 0u;
                *(_OWORD *)(v81 + 16) = 0u;
                uint64_t v87 = (_OWORD *)(v81 + a11);
                *uint64_t v87 = 0u;
                v87[1] = 0u;
                unint64_t v88 = (_OWORD *)(v81 + v364);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                unint64_t v89 = (_OWORD *)(v81 + v363);
                _OWORD *v89 = 0u;
                v89[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)v79->i64 + v85;
            uint64_t v108 = v81 + v367;
            unsigned int v109 = v80[1];
            if (v109 == 127)
            {
              int64x2_t v118 = *(int64x2_t *)v107;
              int64x2_t v119 = *(int64x2_t *)(v107 + 16);
              int64x2_t v120 = *(int64x2_t *)(v107 + 32);
              int64x2_t v121 = *(int64x2_t *)(v107 + 48);
              int64x2_t v122 = *(int64x2_t *)(v107 + 64);
              int64x2_t v123 = *(int64x2_t *)(v107 + 80);
              int64x2_t v124 = *(int64x2_t *)(v107 + 96);
              int64x2_t v125 = *(int64x2_t *)(v107 + 112);
              *(int64x2_t *)uint64_t v108 = vzip1q_s64(*(int64x2_t *)v107, v119);
              *(int64x2_t *)(v108 + 16) = vzip1q_s64(v122, v123);
              unsigned int v126 = (int64x2_t *)(v108 + v84);
              int v127 = (int64x2_t *)(v108 + v33);
              *int v127 = vzip2q_s64(v118, v119);
              v127[1] = vzip2q_s64(v122, v123);
              int64x2_t *v126 = vzip1q_s64(v120, v121);
              v126[1] = vzip1q_s64(v124, v125);
              unsigned int v128 = (int32x4_t *)(v108 + v84 + v33);
              int32x4_t v111 = (int32x4_t)vzip2q_s64(v120, v121);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v124, v125);
              *unsigned int v128 = v111;
              v128[1] = v35;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              int32x4_t v111 = (int32x4_t)vld1q_dup_f32((const float *)v107);
              *(int32x4_t *)uint64_t v108 = v111;
              *(int32x4_t *)(v108 + 16) = v111;
              BOOL v115 = (int32x4_t *)(v108 + v33);
              *BOOL v115 = v111;
              v115[1] = v111;
              int8x8_t v116 = (int32x4_t *)(v108 + v84);
              *int8x8_t v116 = v111;
              v116[1] = v111;
              __int32 v117 = (int32x4_t *)(v108 + v363);
              *__int32 v117 = v111;
              v117[1] = v111;
              uint64_t v110 = 4;
            }
            else if (v80[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v81 + v367), v33, v107, v109, v86, v35);
            }
            else
            {
              uint64_t v110 = 0;
              int32x4_t v111 = 0uLL;
              *(_OWORD *)uint64_t v108 = 0u;
              *(_OWORD *)(v108 + 16) = 0u;
              uint64_t v112 = (_OWORD *)(v108 + v33);
              _OWORD *v112 = 0u;
              v112[1] = 0u;
              int v113 = (_OWORD *)(v108 + v84);
              _OWORD *v113 = 0u;
              v113[1] = 0u;
              BOOL v114 = (_OWORD *)(v108 + v363);
              *BOOL v114 = 0u;
              v114[1] = 0u;
            }
            uint64_t v129 = v107 + v110;
            uint64_t v130 = (_OWORD *)(v81 + 32);
            unsigned int v131 = v80[2];
            if (v131 == 127)
            {
              int64x2_t v140 = *(int64x2_t *)v129;
              int64x2_t v141 = *(int64x2_t *)(v129 + 16);
              int64x2_t v142 = *(int64x2_t *)(v129 + 32);
              int64x2_t v143 = *(int64x2_t *)(v129 + 48);
              int64x2_t v144 = *(int64x2_t *)(v129 + 64);
              int64x2_t v145 = *(int64x2_t *)(v129 + 80);
              int64x2_t v146 = *(int64x2_t *)(v129 + 96);
              int64x2_t v147 = *(int64x2_t *)(v129 + 112);
              _OWORD *v130 = vzip1q_s64(*(int64x2_t *)v129, v141);
              *(int64x2_t *)(v81 + 48) = vzip1q_s64(v144, v145);
              uint64_t v148 = (int64x2_t *)((char *)v130 + v84);
              unsigned int v149 = (int64x2_t *)((char *)v130 + v33);
              *unsigned int v149 = vzip2q_s64(v140, v141);
              v149[1] = vzip2q_s64(v144, v145);
              int64x2_t *v148 = vzip1q_s64(v142, v143);
              v148[1] = vzip1q_s64(v146, v147);
              uint64_t v150 = (int32x4_t *)((char *)v130 + v84 + v33);
              int32x4_t v133 = (int32x4_t)vzip2q_s64(v142, v143);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v146, v147);
              *uint64_t v150 = v133;
              v150[1] = v35;
              uint64_t v132 = 128;
            }
            else if (v131 == 3)
            {
              int32x4_t v133 = (int32x4_t)vld1q_dup_f32((const float *)v129);
              *(int32x4_t *)(v81 + 32) = v133;
              *(int32x4_t *)(v81 + 48) = v133;
              char v137 = (int32x4_t *)((char *)v130 + v33);
              *char v137 = v133;
              v137[1] = v133;
              char v138 = (int32x4_t *)((char *)v130 + v84);
              *char v138 = v133;
              v138[1] = v133;
              int32x4_t v139 = (int32x4_t *)((char *)v130 + v363);
              *int32x4_t v139 = v133;
              v139[1] = v133;
              uint64_t v132 = 4;
            }
            else if (v80[2])
            {
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v33, v129, v131, v111, v35);
            }
            else
            {
              uint64_t v132 = 0;
              int32x4_t v133 = 0uLL;
              _OWORD *v130 = 0u;
              *(_OWORD *)(v81 + 48) = 0u;
              unsigned int v134 = (_OWORD *)((char *)v130 + v33);
              _OWORD *v134 = 0u;
              v134[1] = 0u;
              unsigned int v135 = (_OWORD *)((char *)v130 + v84);
              _OWORD *v135 = 0u;
              v135[1] = 0u;
              unsigned int v136 = (_OWORD *)((char *)v130 + v363);
              *unsigned int v136 = 0u;
              v136[1] = 0u;
            }
            uint64_t v151 = v129 + v132;
            int32x4_t v152 = (_OWORD *)(v108 + 32);
            unsigned int v153 = v80[3];
            if (v153 == 127)
            {
              int64x2_t v162 = *(int64x2_t *)v151;
              int64x2_t v163 = *(int64x2_t *)(v151 + 16);
              int64x2_t v164 = *(int64x2_t *)(v151 + 32);
              int64x2_t v165 = *(int64x2_t *)(v151 + 48);
              int64x2_t v166 = *(int64x2_t *)(v151 + 64);
              int64x2_t v167 = *(int64x2_t *)(v151 + 80);
              int64x2_t v168 = *(int64x2_t *)(v151 + 96);
              int64x2_t v169 = *(int64x2_t *)(v151 + 112);
              _OWORD *v152 = vzip1q_s64(*(int64x2_t *)v151, v163);
              *(int64x2_t *)(v108 + 48) = vzip1q_s64(v166, v167);
              uint64_t v170 = (int64x2_t *)((char *)v152 + v84);
              int32x4_t v171 = (int64x2_t *)((char *)v152 + v33);
              *int32x4_t v171 = vzip2q_s64(v162, v163);
              v171[1] = vzip2q_s64(v166, v167);
              *uint64_t v170 = vzip1q_s64(v164, v165);
              v170[1] = vzip1q_s64(v168, v169);
              int32x4_t v172 = (int32x4_t *)((char *)v152 + v84 + v33);
              int32x4_t v155 = (int32x4_t)vzip2q_s64(v164, v165);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v168, v169);
              *int32x4_t v172 = v155;
              v172[1] = v35;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              int32x4_t v155 = (int32x4_t)vld1q_dup_f32((const float *)v151);
              *(int32x4_t *)(v108 + 32) = v155;
              *(int32x4_t *)(v108 + 48) = v155;
              unsigned int v159 = (int32x4_t *)((char *)v152 + v33);
              *unsigned int v159 = v155;
              v159[1] = v155;
              uint64_t v160 = (int32x4_t *)((char *)v152 + v84);
              *uint64_t v160 = v155;
              v160[1] = v155;
              int32x4_t v161 = (int32x4_t *)((char *)v152 + v363);
              *int32x4_t v161 = v155;
              v161[1] = v155;
              uint64_t v154 = 4;
            }
            else if (v80[3])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v33, v151, v153, v133, v35);
            }
            else
            {
              uint64_t v154 = 0;
              int32x4_t v155 = 0uLL;
              _OWORD *v152 = 0u;
              *(_OWORD *)(v108 + 48) = 0u;
              int32x4_t v156 = (_OWORD *)((char *)v152 + v33);
              _OWORD *v156 = 0u;
              v156[1] = 0u;
              int32x4_t v157 = (_OWORD *)((char *)v152 + v84);
              _OWORD *v157 = 0u;
              v157[1] = 0u;
              uint64_t v158 = (_OWORD *)((char *)v152 + v363);
              *uint64_t v158 = 0u;
              v158[1] = 0u;
            }
            uint64_t v173 = v151 + v154;
            uint64_t v174 = v81 + v366;
            unsigned int v175 = v80[4];
            if (v175 == 127)
            {
              int64x2_t v184 = *(int64x2_t *)v173;
              int64x2_t v185 = *(int64x2_t *)(v173 + 16);
              int64x2_t v186 = *(int64x2_t *)(v173 + 32);
              int64x2_t v187 = *(int64x2_t *)(v173 + 48);
              int64x2_t v188 = *(int64x2_t *)(v173 + 64);
              int64x2_t v189 = *(int64x2_t *)(v173 + 80);
              int64x2_t v190 = *(int64x2_t *)(v173 + 96);
              int64x2_t v191 = *(int64x2_t *)(v173 + 112);
              *(int64x2_t *)uint64_t v174 = vzip1q_s64(*(int64x2_t *)v173, v185);
              *(int64x2_t *)(v174 + 16) = vzip1q_s64(v188, v189);
              uint64_t v192 = (int64x2_t *)(v174 + v84);
              int v193 = (int64x2_t *)(v174 + v33);
              *int v193 = vzip2q_s64(v184, v185);
              v193[1] = vzip2q_s64(v188, v189);
              *uint64_t v192 = vzip1q_s64(v186, v187);
              v192[1] = vzip1q_s64(v190, v191);
              BOOL v194 = (int32x4_t *)(v174 + v84 + v33);
              int32x4_t v177 = (int32x4_t)vzip2q_s64(v186, v187);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v190, v191);
              *BOOL v194 = v177;
              v194[1] = v35;
              uint64_t v176 = 128;
            }
            else if (v175 == 3)
            {
              int32x4_t v177 = (int32x4_t)vld1q_dup_f32((const float *)v173);
              *(int32x4_t *)uint64_t v174 = v177;
              *(int32x4_t *)(v174 + 16) = v177;
              uint64_t v181 = (int32x4_t *)(v174 + v33);
              *uint64_t v181 = v177;
              v181[1] = v177;
              int32x4_t v182 = (int32x4_t *)(v174 + v84);
              *int32x4_t v182 = v177;
              v182[1] = v177;
              unsigned int v183 = (int32x4_t *)(v174 + v363);
              *unsigned int v183 = v177;
              v183[1] = v177;
              uint64_t v176 = 4;
            }
            else if (v80[4])
            {
              uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v81 + v366), v33, v173, v175, v155, v35);
            }
            else
            {
              uint64_t v176 = 0;
              int32x4_t v177 = 0uLL;
              *(_OWORD *)uint64_t v174 = 0u;
              *(_OWORD *)(v174 + 16) = 0u;
              unint64_t v178 = (_OWORD *)(v174 + v33);
              _OWORD *v178 = 0u;
              v178[1] = 0u;
              uint64_t v179 = (_OWORD *)(v174 + v84);
              _OWORD *v179 = 0u;
              v179[1] = 0u;
              unsigned int v180 = (_OWORD *)(v174 + v363);
              *unsigned int v180 = 0u;
              v180[1] = 0u;
            }
            uint64_t v195 = v173 + v176;
            uint64_t v196 = v81 + 12 * a11;
            unsigned int v197 = v80[5];
            if (v197 == 127)
            {
              int64x2_t v206 = *(int64x2_t *)v195;
              int64x2_t v207 = *(int64x2_t *)(v195 + 16);
              int64x2_t v208 = *(int64x2_t *)(v195 + 32);
              int64x2_t v209 = *(int64x2_t *)(v195 + 48);
              int64x2_t v210 = *(int64x2_t *)(v195 + 64);
              int64x2_t v211 = *(int64x2_t *)(v195 + 80);
              int64x2_t v212 = *(int64x2_t *)(v195 + 96);
              int64x2_t v213 = *(int64x2_t *)(v195 + 112);
              *(int64x2_t *)uint64_t v196 = vzip1q_s64(*(int64x2_t *)v195, v207);
              *(int64x2_t *)(v196 + 16) = vzip1q_s64(v210, v211);
              unsigned int v214 = (int64x2_t *)(v196 + v84);
              unsigned int v215 = (int64x2_t *)(v196 + v33);
              *unsigned int v215 = vzip2q_s64(v206, v207);
              v215[1] = vzip2q_s64(v210, v211);
              int64x2_t *v214 = vzip1q_s64(v208, v209);
              v214[1] = vzip1q_s64(v212, v213);
              __int32 v216 = (int32x4_t *)(v196 + v84 + v33);
              int32x4_t v199 = (int32x4_t)vzip2q_s64(v208, v209);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v212, v213);
              *__int32 v216 = v199;
              v216[1] = v35;
              uint64_t v198 = 128;
            }
            else if (v197 == 3)
            {
              int32x4_t v199 = (int32x4_t)vld1q_dup_f32((const float *)v195);
              *(int32x4_t *)uint64_t v196 = v199;
              *(int32x4_t *)(v196 + 16) = v199;
              uint64_t v203 = (int32x4_t *)(v196 + v33);
              *uint64_t v203 = v199;
              v203[1] = v199;
              unsigned int v204 = (int32x4_t *)(v196 + v84);
              *unsigned int v204 = v199;
              v204[1] = v199;
              uint64_t v205 = (int32x4_t *)(v196 + v363);
              *uint64_t v205 = v199;
              v205[1] = v199;
              uint64_t v198 = 4;
            }
            else if (v80[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v196, v33, v195, v197, v177, v35);
            }
            else
            {
              uint64_t v198 = 0;
              int32x4_t v199 = 0uLL;
              *(_OWORD *)uint64_t v196 = 0u;
              *(_OWORD *)(v196 + 16) = 0u;
              unsigned int v200 = (_OWORD *)(v196 + v33);
              _OWORD *v200 = 0u;
              v200[1] = 0u;
              unsigned int v201 = (_OWORD *)(v196 + v84);
              _OWORD *v201 = 0u;
              v201[1] = 0u;
              unsigned int v202 = (_OWORD *)(v196 + v363);
              *unsigned int v202 = 0u;
              v202[1] = 0u;
            }
            uint64_t v217 = v195 + v198;
            uint64_t v218 = (_OWORD *)(v174 + 32);
            unsigned int v219 = v80[6];
            if (v219 == 127)
            {
              int64x2_t v228 = *(int64x2_t *)v217;
              int64x2_t v229 = *(int64x2_t *)(v217 + 16);
              int64x2_t v230 = *(int64x2_t *)(v217 + 32);
              int64x2_t v231 = *(int64x2_t *)(v217 + 48);
              int64x2_t v232 = *(int64x2_t *)(v217 + 64);
              int64x2_t v233 = *(int64x2_t *)(v217 + 80);
              int64x2_t v234 = *(int64x2_t *)(v217 + 96);
              int64x2_t v235 = *(int64x2_t *)(v217 + 112);
              _OWORD *v218 = vzip1q_s64(*(int64x2_t *)v217, v229);
              *(int64x2_t *)(v174 + 48) = vzip1q_s64(v232, v233);
              char v236 = (int64x2_t *)((char *)v218 + v84);
              int v237 = (int64x2_t *)((char *)v218 + v33);
              *int v237 = vzip2q_s64(v228, v229);
              v237[1] = vzip2q_s64(v232, v233);
              *char v236 = vzip1q_s64(v230, v231);
              v236[1] = vzip1q_s64(v234, v235);
              int32x4_t v238 = (int32x4_t *)((char *)v218 + v84 + v33);
              int32x4_t v221 = (int32x4_t)vzip2q_s64(v230, v231);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v234, v235);
              *int32x4_t v238 = v221;
              v238[1] = v35;
              uint64_t v220 = 128;
            }
            else if (v219 == 3)
            {
              int32x4_t v221 = (int32x4_t)vld1q_dup_f32((const float *)v217);
              *(int32x4_t *)(v174 + 32) = v221;
              *(int32x4_t *)(v174 + 48) = v221;
              int v225 = (int32x4_t *)((char *)v218 + v33);
              *int v225 = v221;
              v225[1] = v221;
              unsigned int v226 = (int32x4_t *)((char *)v218 + v84);
              *unsigned int v226 = v221;
              v226[1] = v221;
              unsigned int v227 = (int32x4_t *)((char *)v218 + v363);
              *unsigned int v227 = v221;
              v227[1] = v221;
              uint64_t v220 = 4;
            }
            else if (v80[6])
            {
              uint64_t v220 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v218, v33, v217, v219, v199, v35);
            }
            else
            {
              uint64_t v220 = 0;
              int32x4_t v221 = 0uLL;
              _OWORD *v218 = 0u;
              *(_OWORD *)(v174 + 48) = 0u;
              unsigned int v222 = (_OWORD *)((char *)v218 + v33);
              _OWORD *v222 = 0u;
              v222[1] = 0u;
              unsigned int v223 = (_OWORD *)((char *)v218 + v84);
              _OWORD *v223 = 0u;
              v223[1] = 0u;
              uint64_t v224 = (_OWORD *)((char *)v218 + v363);
              *uint64_t v224 = 0u;
              v224[1] = 0u;
            }
            uint64_t v239 = v217 + v220;
            int32x4_t v240 = (_OWORD *)(v196 + 32);
            unsigned int v241 = v80[7];
            if (v241 == 127)
            {
              int64x2_t v245 = *(int64x2_t *)v239;
              int64x2_t v246 = *(int64x2_t *)(v239 + 16);
              int64x2_t v247 = *(int64x2_t *)(v239 + 32);
              int64x2_t v248 = *(int64x2_t *)(v239 + 48);
              int64x2_t v249 = *(int64x2_t *)(v239 + 64);
              int64x2_t v250 = *(int64x2_t *)(v239 + 80);
              int64x2_t v251 = *(int64x2_t *)(v239 + 96);
              int64x2_t v252 = *(int64x2_t *)(v239 + 112);
              _OWORD *v240 = vzip1q_s64(*(int64x2_t *)v239, v246);
              *(int64x2_t *)(v196 + 48) = vzip1q_s64(v249, v250);
              int32x4_t v253 = (int64x2_t *)((char *)v240 + v84);
              int32x4_t v254 = (int64x2_t *)((char *)v240 + v33);
              *int32x4_t v254 = vzip2q_s64(v245, v246);
              v254[1] = vzip2q_s64(v249, v250);
              *int32x4_t v253 = vzip1q_s64(v247, v248);
              v253[1] = vzip1q_s64(v251, v252);
              int32x4_t v255 = (int32x4_t *)((char *)v240 + v84 + v33);
              int32x4_t v16 = (int32x4_t)vzip2q_s64(v247, v248);
              int32x4_t v35 = (int32x4_t)vzip2q_s64(v251, v252);
              *int32x4_t v255 = v16;
              v255[1] = v35;
              unsigned int v41 = a7;
              uint64_t v15 = v379;
            }
            else
            {
              uint64_t v15 = v379;
              if (v241 == 3)
              {
                int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v239);
                *(int32x4_t *)(v196 + 32) = v16;
                *(int32x4_t *)(v196 + 48) = v16;
LABEL_182:
                int16x8_t v242 = (int32x4_t *)((char *)v240 + v33);
                *int16x8_t v242 = v16;
                v242[1] = v16;
                int16x8_t v243 = (int32x4_t *)((char *)v240 + v84);
                *int16x8_t v243 = v16;
                v243[1] = v16;
                int32x4_t v244 = (int32x4_t *)((char *)v240 + v363);
                *int32x4_t v244 = v16;
                v244[1] = v16;
              }
              else
              {
                if (!v241)
                {
                  int32x4_t v16 = 0uLL;
                  _OWORD *v240 = 0u;
                  *(_OWORD *)(v196 + 48) = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v240, v33, v239, v241, v221, v35);
              }
              unsigned int v41 = a7;
            }
LABEL_47:
            int v40 = v20 & v352;
            unsigned int v42 = v38 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v379;
          block[5] = v79;
          char v390 = v47;
          char v391 = v382;
          unsigned int v386 = v368;
          unsigned int v387 = v45 - v43;
          block[6] = v80;
          uint64_t v384 = v81;
          uint64_t v33 = a11;
          uint64_t v385 = a11;
          unsigned int v388 = v376;
          unsigned int v389 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v379 + 8) + 7384), block);
            unsigned int v41 = a7;
            uint64_t v15 = v379;
            goto LABEL_47;
          }
          unsigned int v90 = *v80;
          if (v90 == 127)
          {
            int64x2_t v256 = *v79;
            int64x2_t v257 = v79[1];
            int64x2_t v258 = v79[2];
            int64x2_t v259 = v79[3];
            int64x2_t v260 = v79[4];
            int64x2_t v261 = v79[5];
            int64x2_t v262 = v79[6];
            int64x2_t v263 = v79[7];
            int64x2_t v393 = vzip1q_s64(*v79, v257);
            int64x2_t v394 = vzip1q_s64(v260, v261);
            int64x2_t v397 = vzip2q_s64(v256, v257);
            int64x2_t v398 = vzip2q_s64(v260, v261);
            int64x2_t v401 = vzip1q_s64(v258, v259);
            int64x2_t v402 = vzip1q_s64(v262, v263);
            int32x4_t v92 = (int32x4_t)vzip2q_s64(v258, v259);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v262, v263);
            int32x4_t v405 = v92;
            int32x4_t v406 = v35;
            uint64_t v91 = 128;
          }
          else if (v90 == 3)
          {
            int32x4_t v92 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
            int64x2_t v393 = (int64x2_t)v92;
            int64x2_t v394 = (int64x2_t)v92;
            int64x2_t v397 = (int64x2_t)v92;
            int64x2_t v398 = (int64x2_t)v92;
            int64x2_t v401 = (int64x2_t)v92;
            int64x2_t v402 = (int64x2_t)v92;
            int32x4_t v405 = v92;
            int32x4_t v406 = v92;
            uint64_t v91 = 4;
          }
          else if (*v80)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v393, 64, (uint64_t)v79, v90, v16, v35);
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v92 = 0uLL;
            int64x2_t v394 = 0u;
            int64x2_t v393 = 0u;
            int64x2_t v397 = 0u;
            int64x2_t v398 = 0u;
            int64x2_t v401 = 0u;
            int64x2_t v402 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v406 = 0u;
          }
          uint64_t v264 = (uint64_t)v79->i64 + v91;
          unsigned int v265 = v80[1];
          if (v265 == 127)
          {
            int64x2_t v268 = *(int64x2_t *)v264;
            int64x2_t v269 = *(int64x2_t *)(v264 + 16);
            int64x2_t v270 = *(int64x2_t *)(v264 + 32);
            int64x2_t v271 = *(int64x2_t *)(v264 + 48);
            int64x2_t v272 = *(int64x2_t *)(v264 + 64);
            int64x2_t v273 = *(int64x2_t *)(v264 + 80);
            int64x2_t v274 = *(int64x2_t *)(v264 + 96);
            int64x2_t v275 = *(int64x2_t *)(v264 + 112);
            int64x2_t v409 = vzip1q_s64(*(int64x2_t *)v264, v269);
            int64x2_t v410 = vzip1q_s64(v272, v273);
            int64x2_t v413 = vzip2q_s64(v268, v269);
            int64x2_t v414 = vzip2q_s64(v272, v273);
            int64x2_t v417 = vzip1q_s64(v270, v271);
            int64x2_t v418 = vzip1q_s64(v274, v275);
            int32x4_t v267 = (int32x4_t)vzip2q_s64(v270, v271);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v274, v275);
            int32x4_t v421 = v267;
            int32x4_t v422 = v35;
            uint64_t v266 = 128;
          }
          else if (v265 == 3)
          {
            int32x4_t v267 = (int32x4_t)vld1q_dup_f32((const float *)v264);
            int64x2_t v409 = (int64x2_t)v267;
            int64x2_t v410 = (int64x2_t)v267;
            int64x2_t v413 = (int64x2_t)v267;
            int64x2_t v414 = (int64x2_t)v267;
            int64x2_t v417 = (int64x2_t)v267;
            int64x2_t v418 = (int64x2_t)v267;
            int32x4_t v421 = v267;
            int32x4_t v422 = v267;
            uint64_t v266 = 4;
          }
          else if (v80[1])
          {
            uint64_t v266 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 64, v264, v265, v92, v35);
          }
          else
          {
            uint64_t v266 = 0;
            int32x4_t v267 = 0uLL;
            int64x2_t v409 = 0u;
            int64x2_t v410 = 0u;
            int64x2_t v413 = 0u;
            int64x2_t v414 = 0u;
            int64x2_t v417 = 0u;
            int64x2_t v418 = 0u;
            int32x4_t v421 = 0u;
            int32x4_t v422 = 0u;
          }
          uint64_t v276 = v264 + v266;
          unsigned int v277 = v80[2];
          if (v277 == 127)
          {
            int64x2_t v280 = *(int64x2_t *)v276;
            int64x2_t v281 = *(int64x2_t *)(v276 + 16);
            int64x2_t v282 = *(int64x2_t *)(v276 + 32);
            int64x2_t v283 = *(int64x2_t *)(v276 + 48);
            int64x2_t v284 = *(int64x2_t *)(v276 + 64);
            int64x2_t v285 = *(int64x2_t *)(v276 + 80);
            int64x2_t v286 = *(int64x2_t *)(v276 + 96);
            int64x2_t v287 = *(int64x2_t *)(v276 + 112);
            int64x2_t v395 = vzip1q_s64(*(int64x2_t *)v276, v281);
            int64x2_t v396 = vzip1q_s64(v284, v285);
            int64x2_t v399 = vzip2q_s64(v280, v281);
            int64x2_t v400 = vzip2q_s64(v284, v285);
            int64x2_t v403 = vzip1q_s64(v282, v283);
            int64x2_t v404 = vzip1q_s64(v286, v287);
            int32x4_t v279 = (int32x4_t)vzip2q_s64(v282, v283);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v286, v287);
            int32x4_t v407 = v279;
            int32x4_t v408 = v35;
            uint64_t v278 = 128;
          }
          else if (v277 == 3)
          {
            int32x4_t v279 = (int32x4_t)vld1q_dup_f32((const float *)v276);
            int64x2_t v395 = (int64x2_t)v279;
            int64x2_t v396 = (int64x2_t)v279;
            int64x2_t v399 = (int64x2_t)v279;
            int64x2_t v400 = (int64x2_t)v279;
            int64x2_t v403 = (int64x2_t)v279;
            int64x2_t v404 = (int64x2_t)v279;
            int32x4_t v407 = v279;
            int32x4_t v408 = v279;
            uint64_t v278 = 4;
          }
          else if (v80[2])
          {
            uint64_t v278 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v395, 64, v276, v277, v267, v35);
          }
          else
          {
            uint64_t v278 = 0;
            int32x4_t v279 = 0uLL;
            int64x2_t v395 = 0u;
            int64x2_t v396 = 0u;
            int64x2_t v399 = 0u;
            int64x2_t v400 = 0u;
            int64x2_t v403 = 0u;
            int64x2_t v404 = 0u;
            int32x4_t v407 = 0u;
            int32x4_t v408 = 0u;
          }
          uint64_t v288 = v276 + v278;
          unsigned int v289 = v80[3];
          if (v289 == 127)
          {
            int64x2_t v292 = *(int64x2_t *)v288;
            int64x2_t v293 = *(int64x2_t *)(v288 + 16);
            int64x2_t v294 = *(int64x2_t *)(v288 + 32);
            int64x2_t v295 = *(int64x2_t *)(v288 + 48);
            int64x2_t v296 = *(int64x2_t *)(v288 + 64);
            int64x2_t v297 = *(int64x2_t *)(v288 + 80);
            int64x2_t v298 = *(int64x2_t *)(v288 + 96);
            int64x2_t v299 = *(int64x2_t *)(v288 + 112);
            int64x2_t v411 = vzip1q_s64(*(int64x2_t *)v288, v293);
            int64x2_t v412 = vzip1q_s64(v296, v297);
            int64x2_t v415 = vzip2q_s64(v292, v293);
            int64x2_t v416 = vzip2q_s64(v296, v297);
            int64x2_t v419 = vzip1q_s64(v294, v295);
            int64x2_t v420 = vzip1q_s64(v298, v299);
            int32x4_t v291 = (int32x4_t)vzip2q_s64(v294, v295);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v298, v299);
            int32x4_t v423 = v291;
            int32x4_t v424 = v35;
            uint64_t v290 = 128;
          }
          else if (v289 == 3)
          {
            int32x4_t v291 = (int32x4_t)vld1q_dup_f32((const float *)v288);
            int64x2_t v411 = (int64x2_t)v291;
            int64x2_t v412 = (int64x2_t)v291;
            int64x2_t v415 = (int64x2_t)v291;
            int64x2_t v416 = (int64x2_t)v291;
            int64x2_t v419 = (int64x2_t)v291;
            int64x2_t v420 = (int64x2_t)v291;
            int32x4_t v423 = v291;
            int32x4_t v424 = v291;
            uint64_t v290 = 4;
          }
          else if (v80[3])
          {
            uint64_t v290 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 64, v288, v289, v279, v35);
          }
          else
          {
            uint64_t v290 = 0;
            int32x4_t v291 = 0uLL;
            int64x2_t v411 = 0u;
            int64x2_t v412 = 0u;
            int64x2_t v415 = 0u;
            int64x2_t v416 = 0u;
            int64x2_t v419 = 0u;
            int64x2_t v420 = 0u;
            int32x4_t v423 = 0u;
            int32x4_t v424 = 0u;
          }
          uint64_t v300 = v288 + v290;
          unsigned int v301 = v80[4];
          if (v301 == 127)
          {
            int64x2_t v304 = *(int64x2_t *)v300;
            int64x2_t v305 = *(int64x2_t *)(v300 + 16);
            int64x2_t v306 = *(int64x2_t *)(v300 + 32);
            int64x2_t v307 = *(int64x2_t *)(v300 + 48);
            int64x2_t v308 = *(int64x2_t *)(v300 + 64);
            int64x2_t v309 = *(int64x2_t *)(v300 + 80);
            int64x2_t v310 = *(int64x2_t *)(v300 + 96);
            int64x2_t v311 = *(int64x2_t *)(v300 + 112);
            int64x2_t v425 = vzip1q_s64(*(int64x2_t *)v300, v305);
            int64x2_t v426 = vzip1q_s64(v308, v309);
            int64x2_t v429 = vzip2q_s64(v304, v305);
            int64x2_t v430 = vzip2q_s64(v308, v309);
            int64x2_t v433 = vzip1q_s64(v306, v307);
            int64x2_t v434 = vzip1q_s64(v310, v311);
            int32x4_t v303 = (int32x4_t)vzip2q_s64(v306, v307);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v310, v311);
            int32x4_t v437 = v303;
            int32x4_t v438 = v35;
            uint64_t v302 = 128;
          }
          else if (v301 == 3)
          {
            int32x4_t v303 = (int32x4_t)vld1q_dup_f32((const float *)v300);
            int64x2_t v425 = (int64x2_t)v303;
            int64x2_t v426 = (int64x2_t)v303;
            int64x2_t v429 = (int64x2_t)v303;
            int64x2_t v430 = (int64x2_t)v303;
            int64x2_t v433 = (int64x2_t)v303;
            int64x2_t v434 = (int64x2_t)v303;
            int32x4_t v437 = v303;
            int32x4_t v438 = v303;
            uint64_t v302 = 4;
          }
          else if (v80[4])
          {
            uint64_t v302 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v425, 64, v300, v301, v291, v35);
          }
          else
          {
            uint64_t v302 = 0;
            int32x4_t v303 = 0uLL;
            int64x2_t v425 = 0u;
            int64x2_t v426 = 0u;
            int64x2_t v429 = 0u;
            int64x2_t v430 = 0u;
            int64x2_t v433 = 0u;
            int64x2_t v434 = 0u;
            int32x4_t v437 = 0u;
            int32x4_t v438 = 0u;
          }
          uint64_t v312 = v300 + v302;
          unsigned int v313 = v80[5];
          if (v313 == 127)
          {
            int64x2_t v316 = *(int64x2_t *)v312;
            int64x2_t v317 = *(int64x2_t *)(v312 + 16);
            int64x2_t v318 = *(int64x2_t *)(v312 + 32);
            int64x2_t v319 = *(int64x2_t *)(v312 + 48);
            int64x2_t v320 = *(int64x2_t *)(v312 + 64);
            int64x2_t v321 = *(int64x2_t *)(v312 + 80);
            int64x2_t v322 = *(int64x2_t *)(v312 + 96);
            int64x2_t v323 = *(int64x2_t *)(v312 + 112);
            int64x2_t v441 = vzip1q_s64(*(int64x2_t *)v312, v317);
            int64x2_t v442 = vzip1q_s64(v320, v321);
            int64x2_t v445 = vzip2q_s64(v316, v317);
            int64x2_t v446 = vzip2q_s64(v320, v321);
            int64x2_t v449 = vzip1q_s64(v318, v319);
            int64x2_t v450 = vzip1q_s64(v322, v323);
            int32x4_t v315 = (int32x4_t)vzip2q_s64(v318, v319);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v322, v323);
            int32x4_t v453 = v315;
            int32x4_t v454 = v35;
            uint64_t v314 = 128;
          }
          else if (v313 == 3)
          {
            int32x4_t v315 = (int32x4_t)vld1q_dup_f32((const float *)v312);
            int64x2_t v441 = (int64x2_t)v315;
            int64x2_t v442 = (int64x2_t)v315;
            int64x2_t v445 = (int64x2_t)v315;
            int64x2_t v446 = (int64x2_t)v315;
            int64x2_t v449 = (int64x2_t)v315;
            int64x2_t v450 = (int64x2_t)v315;
            int32x4_t v453 = v315;
            int32x4_t v454 = v315;
            uint64_t v314 = 4;
          }
          else if (v80[5])
          {
            uint64_t v314 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v441, 64, v312, v313, v303, v35);
          }
          else
          {
            uint64_t v314 = 0;
            int32x4_t v315 = 0uLL;
            int64x2_t v441 = 0u;
            int64x2_t v442 = 0u;
            int64x2_t v445 = 0u;
            int64x2_t v446 = 0u;
            int64x2_t v449 = 0u;
            int64x2_t v450 = 0u;
            int32x4_t v453 = 0u;
            int32x4_t v454 = 0u;
          }
          uint64_t v324 = v312 + v314;
          unsigned int v325 = v80[6];
          if (v325 == 127)
          {
            int64x2_t v328 = *(int64x2_t *)v324;
            int64x2_t v329 = *(int64x2_t *)(v324 + 16);
            int64x2_t v330 = *(int64x2_t *)(v324 + 32);
            int64x2_t v331 = *(int64x2_t *)(v324 + 48);
            int64x2_t v332 = *(int64x2_t *)(v324 + 64);
            int64x2_t v333 = *(int64x2_t *)(v324 + 80);
            int64x2_t v334 = *(int64x2_t *)(v324 + 96);
            int64x2_t v335 = *(int64x2_t *)(v324 + 112);
            int64x2_t v427 = vzip1q_s64(*(int64x2_t *)v324, v329);
            int64x2_t v428 = vzip1q_s64(v332, v333);
            int64x2_t v431 = vzip2q_s64(v328, v329);
            int64x2_t v432 = vzip2q_s64(v332, v333);
            int64x2_t v435 = vzip1q_s64(v330, v331);
            int64x2_t v436 = vzip1q_s64(v334, v335);
            int32x4_t v327 = (int32x4_t)vzip2q_s64(v330, v331);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v334, v335);
            int32x4_t v439 = v327;
            int32x4_t v440 = v35;
            uint64_t v326 = 128;
          }
          else if (v325 == 3)
          {
            int32x4_t v327 = (int32x4_t)vld1q_dup_f32((const float *)v324);
            int64x2_t v427 = (int64x2_t)v327;
            int64x2_t v428 = (int64x2_t)v327;
            int64x2_t v431 = (int64x2_t)v327;
            int64x2_t v432 = (int64x2_t)v327;
            int64x2_t v435 = (int64x2_t)v327;
            int64x2_t v436 = (int64x2_t)v327;
            int32x4_t v439 = v327;
            int32x4_t v440 = v327;
            uint64_t v326 = 4;
          }
          else if (v80[6])
          {
            uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v427, 64, v324, v325, v315, v35);
          }
          else
          {
            uint64_t v326 = 0;
            int32x4_t v327 = 0uLL;
            int64x2_t v427 = 0u;
            int64x2_t v428 = 0u;
            int64x2_t v431 = 0u;
            int64x2_t v432 = 0u;
            int64x2_t v435 = 0u;
            int64x2_t v436 = 0u;
            int32x4_t v439 = 0u;
            int32x4_t v440 = 0u;
          }
          uint64_t v336 = v324 + v326;
          unsigned int v337 = v80[7];
          if (v337 == 127)
          {
            int64x2_t v338 = *(int64x2_t *)v336;
            int64x2_t v339 = *(int64x2_t *)(v336 + 16);
            int64x2_t v340 = *(int64x2_t *)(v336 + 32);
            int64x2_t v341 = *(int64x2_t *)(v336 + 48);
            int64x2_t v342 = *(int64x2_t *)(v336 + 64);
            int64x2_t v343 = *(int64x2_t *)(v336 + 80);
            int64x2_t v344 = *(int64x2_t *)(v336 + 96);
            int64x2_t v345 = *(int64x2_t *)(v336 + 112);
            int64x2_t v443 = vzip1q_s64(*(int64x2_t *)v336, v339);
            int64x2_t v444 = vzip1q_s64(v342, v343);
            int64x2_t v447 = vzip2q_s64(v338, v339);
            int64x2_t v448 = vzip2q_s64(v342, v343);
            int64x2_t v451 = vzip1q_s64(v340, v341);
            int64x2_t v452 = vzip1q_s64(v344, v345);
            int32x4_t v16 = (int32x4_t)vzip2q_s64(v340, v341);
            int32x4_t v35 = (int32x4_t)vzip2q_s64(v344, v345);
            int32x4_t v455 = v16;
            int32x4_t v456 = v35;
            unsigned int v41 = a7;
            uint64_t v15 = v379;
          }
          else
          {
            unsigned int v41 = a7;
            uint64_t v15 = v379;
            if (v337 == 3)
            {
              int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v336);
              int64x2_t v443 = (int64x2_t)v16;
              int64x2_t v444 = (int64x2_t)v16;
              int64x2_t v447 = (int64x2_t)v16;
              int64x2_t v448 = (int64x2_t)v16;
              int64x2_t v451 = (int64x2_t)v16;
              int64x2_t v452 = (int64x2_t)v16;
              int32x4_t v455 = v16;
              int32x4_t v456 = v16;
            }
            else if (v337)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v443, 64, v336, v337, v327, v35);
            }
            else
            {
              int32x4_t v16 = 0uLL;
              int64x2_t v443 = 0u;
              int64x2_t v444 = 0u;
              int64x2_t v447 = 0u;
              int64x2_t v448 = 0u;
              int64x2_t v451 = 0u;
              int64x2_t v452 = 0u;
              int32x4_t v455 = 0u;
              int32x4_t v456 = 0u;
            }
          }
          unint64_t v346 = v388;
          int v40 = v20 & v352;
          unsigned int v42 = v38 + 1;
          if (v388)
          {
            unint64_t v347 = 0;
            BOOL v348 = &v393.i8[64 * (unint64_t)v386 + 4 * v387];
            unsigned int v349 = v389;
            do
            {
              if (v349)
              {
                uint64_t v350 = 0;
                uint64_t v351 = v384 + v385 * v347;
                do
                {
                  *(unsigned char *)(v351 + v350) = v348[v350];
                  ++v350;
                  unsigned int v349 = v389;
                }
                while (4 * (unint64_t)v389 > v350);
                unint64_t v346 = v388;
              }
              ++v347;
              v348 += 64;
            }
            while (v347 < v346);
          }
LABEL_48:
          BOOL v21 = v38 == v370 >> 4;
          unsigned int v38 = v42;
        }
        while (!v21);
        BOOL v21 = v20++ == v357;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v455 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v376 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v355 = a8 + a10 - 1;
  unsigned int v357 = v355 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v370 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v357)
  {
    unsigned int v368 = a7 + a9 - 1;
    unsigned int v354 = a7 >> 4;
    if (a7 >> 4 <= v368 >> 4)
    {
      uint64_t v26 = a11;
      unsigned int v351 = a5 - 1;
      unsigned int v379 = (a5 - 1) >> 4;
      int v378 = ((a5 - 1) & 0xF) + 1;
      int v352 = ((a6 - 1) & 0xF) + 1;
      unsigned int v353 = (a6 - 1) >> 4;
      uint64_t v360 = 8 * a11;
      uint64_t v361 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v28.i64[1] = -1;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL)))))));
      *(int8x8_t *)v25.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v366 = v25.i32[0] | v25.i32[1];
      BOOL v364 = v25.i32[1] != 0;
      uint64_t v365 = v25.i64[0];
      BOOL v363 = v25.i32[0] != 0;
      unint64_t v350 = 8 * v19 * (unint64_t)v18;
      unsigned int v367 = a7;
      uint64_t v377 = v16;
      uint64_t v358 = 3 * a11;
      uint64_t v359 = 2 * a11;
      do
      {
        unsigned int v29 = (16 * v17) | 0xF;
        if (16 * v17 <= v376) {
          int v30 = v376;
        }
        else {
          int v30 = 16 * v17;
        }
        unsigned int v31 = v354;
        if (v355 < v29) {
          unsigned int v29 = v355;
        }
        unsigned int v375 = 16 * v17;
        int v362 = v30 - 16 * v17;
        int v374 = v29 - v30 + 1;
        int v32 = v352;
        if (v17 != v353) {
          int v32 = 16;
        }
        unsigned int v380 = v32;
        uint64_t v373 = a2 + (v30 - v376) * v26;
        do
        {
          unsigned int v34 = 16 * v31;
          unsigned int v35 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v31;
          }
          if (v368 < v35) {
            unsigned int v35 = v368;
          }
          int v37 = v35 - v36 + 1;
          if (v31 == v379) {
            unsigned int v38 = v378;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v375 >= v376 && v34 >= a7)
          {
            int v40 = v378;
            if (v31 != v379) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v374 != v380;
          }
          if (isLevelTiled)
          {
            unsigned int v336 = 0;
            uint64_t v337 = v350 >> (*(unsigned char *)(v16 + 57) != 0);
            char v338 = 1;
            if (v337 > 127)
            {
              if (v337 > 511)
              {
                if (v337 == 512)
                {
                  unsigned int v336 = 16;
                  char v339 = 1;
                  unsigned int v340 = 16;
                }
                else
                {
                  char v339 = 1;
                  unsigned int v340 = 0;
                  if (v337 == 1024)
                  {
                    unsigned int v340 = 8;
                    unsigned int v336 = 16;
                  }
                }
              }
              else if (v337 == 128)
              {
                char v338 = 0;
                char v339 = 0;
                unsigned int v336 = 32;
                unsigned int v340 = 32;
              }
              else
              {
                char v339 = 1;
                unsigned int v340 = 0;
                if (v337 == 256)
                {
                  char v338 = 0;
                  unsigned int v340 = 16;
                  unsigned int v336 = 32;
                }
              }
            }
            else
            {
              char v339 = 1;
              unsigned int v340 = 0;
              switch(v337)
              {
                case 4:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v340 = 128;
                  unsigned int v336 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v336 = 128;
                  unsigned int v340 = 128;
                  break;
                case 16:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v340 = 64;
                  unsigned int v336 = 128;
                  break;
                case 32:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v336 = 64;
                  unsigned int v340 = 64;
                  break;
                default:
                  if (v337 == 64)
                  {
                    char v338 = 0;
                    char v339 = 0;
                    unsigned int v340 = 32;
                    unsigned int v336 = 64;
                  }
                  break;
              }
            }
            unsigned int v341 = (v336 >> 4) - 1;
            if (v338)
            {
              unsigned int v342 = 0;
              if (v339) {
                goto LABEL_243;
              }
LABEL_232:
              unsigned int v343 = 32 - __clz(~(-1 << -(char)__clz(((v340 + 15) >> 4) - 1)));
              if (v343 | v342) {
                goto LABEL_233;
              }
LABEL_244:
              uint64_t v345 = 0;
            }
            else
            {
              unsigned int v342 = 32 - __clz(~(-1 << -(char)__clz(v341)));
              if ((v339 & 1) == 0) {
                goto LABEL_232;
              }
LABEL_243:
              unsigned int v343 = 0;
              if (!v342) {
                goto LABEL_244;
              }
LABEL_233:
              int v344 = 0;
              uint64_t v345 = 0;
              int v346 = v31 & v341;
              BOOL v347 = v342 != 0;
              BOOL v348 = v343 != 0;
              int v349 = 1;
              do
              {
                --v342;
                if (v347) {
                  v345 |= (unint64_t)(v349 & v346) << v344++;
                }
                else {
                  unsigned int v342 = 0;
                }
                --v343;
                if (v348) {
                  v345 |= (unint64_t)(v349 & v17 & ((v340 >> 4) - 1)) << v344++;
                }
                else {
                  unsigned int v343 = 0;
                }
                v349 *= 2;
                --v344;
                BOOL v348 = v343 != 0;
                BOOL v347 = v342 != 0;
              }
              while (v343 | v342);
            }
            unint64_t v49 = ((unint64_t)(v34 / v336 + v375 / v340 * ((v336 + v351) / v336)) << 14) + (v345 << 10);
            goto LABEL_59;
          }
          if (v366)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v364;
            BOOL v46 = v363;
            int v47 = HIDWORD(v365);
            int v48 = v365;
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v31) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 10;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v31) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int64x2_t *)(a3 + v49);
          if (v370)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int64x2_t *)__dst;
          }
          int v64 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v65 = v373 + 4 * (v36 - a7);
          char v66 = v38 < 0x10 || v39;
          if ((v66 & 1) == 0 && v380 > 0xF)
          {
            unsigned int v67 = *v64;
            if (v67 == 127)
            {
              int64x2_t v80 = *v63;
              int64x2_t v81 = v63[1];
              int64x2_t v82 = v63[2];
              int64x2_t v83 = v63[3];
              int64x2_t v84 = v63[4];
              int64x2_t v85 = v63[5];
              int64x2_t v86 = v63[6];
              int64x2_t v87 = v63[7];
              uint64_t v68 = 2 * a11;
              *(int64x2_t *)uint64_t v65 = vzip1q_s64(*v63, v81);
              *(int64x2_t *)(v65 + 16) = vzip1q_s64(v84, v85);
              unint64_t v88 = (int64x2_t *)(v65 + v359);
              uint64_t v26 = a11;
              unint64_t v89 = (int64x2_t *)(v65 + a11);
              int64x2_t *v89 = vzip2q_s64(v80, v81);
              v89[1] = vzip2q_s64(v84, v85);
              int64x2_t *v88 = vzip1q_s64(v82, v83);
              v88[1] = vzip1q_s64(v86, v87);
              unsigned int v90 = (int32x4_t *)(v65 + v359 + a11);
              int32x4_t v70 = (int32x4_t)vzip2q_s64(v82, v83);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v86, v87);
              int32x4_t *v90 = v70;
              v90[1] = v28;
              uint64_t v69 = 128;
            }
            else
            {
              uint64_t v26 = a11;
              uint64_t v68 = 2 * a11;
              if (v67 == 3)
              {
                int32x4_t v70 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                *(int32x4_t *)uint64_t v65 = v70;
                *(int32x4_t *)(v65 + 16) = v70;
                BOOL v77 = (int32x4_t *)(v65 + a11);
                *BOOL v77 = v70;
                v77[1] = v70;
                unint64_t v78 = (int32x4_t *)(v65 + v359);
                *unint64_t v78 = v70;
                v78[1] = v70;
                char v79 = (int32x4_t *)(v65 + v358);
                *char v79 = v70;
                v79[1] = v70;
                uint64_t v69 = 4;
              }
              else if (*v64)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v65, a11, (uint64_t)v63, v67, v25, v28);
              }
              else
              {
                uint64_t v69 = 0;
                int32x4_t v70 = 0uLL;
                *(_OWORD *)uint64_t v65 = 0u;
                *(_OWORD *)(v65 + 16) = 0u;
                unsigned int v71 = (_OWORD *)(v65 + a11);
                _OWORD *v71 = 0u;
                v71[1] = 0u;
                int v72 = (_OWORD *)(v65 + v359);
                _OWORD *v72 = 0u;
                v72[1] = 0u;
                unint64_t v73 = (_OWORD *)(v65 + v358);
                *unint64_t v73 = 0u;
                v73[1] = 0u;
              }
            }
            uint64_t v91 = (uint64_t)v63->i64 + v69;
            uint64_t v92 = v65 + v361;
            unsigned int v93 = v64[1];
            if (v93 == 127)
            {
              int64x2_t v102 = *(int64x2_t *)v91;
              int64x2_t v103 = *(int64x2_t *)(v91 + 16);
              int64x2_t v104 = *(int64x2_t *)(v91 + 32);
              int64x2_t v105 = *(int64x2_t *)(v91 + 48);
              int64x2_t v106 = *(int64x2_t *)(v91 + 64);
              int64x2_t v107 = *(int64x2_t *)(v91 + 80);
              int64x2_t v108 = *(int64x2_t *)(v91 + 96);
              int64x2_t v109 = *(int64x2_t *)(v91 + 112);
              *(int64x2_t *)uint64_t v92 = vzip1q_s64(*(int64x2_t *)v91, v103);
              *(int64x2_t *)(v92 + 16) = vzip1q_s64(v106, v107);
              uint64_t v110 = (int64x2_t *)(v92 + v68);
              int32x4_t v111 = (int64x2_t *)(v92 + v26);
              int64x2_t *v111 = vzip2q_s64(v102, v103);
              v111[1] = vzip2q_s64(v106, v107);
              *uint64_t v110 = vzip1q_s64(v104, v105);
              v110[1] = vzip1q_s64(v108, v109);
              uint64_t v112 = (int32x4_t *)(v92 + v68 + v26);
              int32x4_t v95 = (int32x4_t)vzip2q_s64(v104, v105);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v108, v109);
              int32x4_t *v112 = v95;
              v112[1] = v28;
              uint64_t v94 = 128;
            }
            else if (v93 == 3)
            {
              int32x4_t v95 = (int32x4_t)vld1q_dup_f32((const float *)v91);
              *(int32x4_t *)uint64_t v92 = v95;
              *(int32x4_t *)(v92 + 16) = v95;
              int64x2_t v99 = (int32x4_t *)(v92 + v26);
              *int64x2_t v99 = v95;
              v99[1] = v95;
              int64x2_t v100 = (int32x4_t *)(v92 + v68);
              int32x4_t *v100 = v95;
              v100[1] = v95;
              int64x2_t v101 = (int32x4_t *)(v92 + v358);
              int32x4_t *v101 = v95;
              v101[1] = v95;
              uint64_t v94 = 4;
            }
            else if (v64[1])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v65 + v361), v26, v91, v93, v70, v28);
            }
            else
            {
              uint64_t v94 = 0;
              int32x4_t v95 = 0uLL;
              *(_OWORD *)uint64_t v92 = 0u;
              *(_OWORD *)(v92 + 16) = 0u;
              int64x2_t v96 = (_OWORD *)(v92 + v26);
              *int64x2_t v96 = 0u;
              v96[1] = 0u;
              int64x2_t v97 = (_OWORD *)(v92 + v68);
              *int64x2_t v97 = 0u;
              v97[1] = 0u;
              int64x2_t v98 = (_OWORD *)(v92 + v358);
              *int64x2_t v98 = 0u;
              v98[1] = 0u;
            }
            uint64_t v113 = v91 + v94;
            BOOL v114 = (_OWORD *)(v65 + 32);
            unsigned int v115 = v64[2];
            if (v115 == 127)
            {
              int64x2_t v124 = *(int64x2_t *)v113;
              int64x2_t v125 = *(int64x2_t *)(v113 + 16);
              int64x2_t v126 = *(int64x2_t *)(v113 + 32);
              int64x2_t v127 = *(int64x2_t *)(v113 + 48);
              int64x2_t v128 = *(int64x2_t *)(v113 + 64);
              int64x2_t v129 = *(int64x2_t *)(v113 + 80);
              int64x2_t v130 = *(int64x2_t *)(v113 + 96);
              int64x2_t v131 = *(int64x2_t *)(v113 + 112);
              *BOOL v114 = vzip1q_s64(*(int64x2_t *)v113, v125);
              *(int64x2_t *)(v65 + 48) = vzip1q_s64(v128, v129);
              uint64_t v132 = (int64x2_t *)((char *)v114 + v68);
              int32x4_t v133 = (int64x2_t *)((char *)v114 + v26);
              int64x2_t *v133 = vzip2q_s64(v124, v125);
              v133[1] = vzip2q_s64(v128, v129);
              *uint64_t v132 = vzip1q_s64(v126, v127);
              v132[1] = vzip1q_s64(v130, v131);
              unsigned int v134 = (int32x4_t *)((char *)v114 + v68 + v26);
              int32x4_t v117 = (int32x4_t)vzip2q_s64(v126, v127);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v130, v131);
              int32x4_t *v134 = v117;
              v134[1] = v28;
              uint64_t v116 = 128;
            }
            else if (v115 == 3)
            {
              int32x4_t v117 = (int32x4_t)vld1q_dup_f32((const float *)v113);
              *(int32x4_t *)(v65 + 32) = v117;
              *(int32x4_t *)(v65 + 48) = v117;
              int64x2_t v121 = (int32x4_t *)((char *)v114 + v26);
              *int64x2_t v121 = v117;
              v121[1] = v117;
              int64x2_t v122 = (int32x4_t *)((char *)v114 + v68);
              int32x4_t *v122 = v117;
              v122[1] = v117;
              int64x2_t v123 = (int32x4_t *)((char *)v114 + v358);
              int32x4_t *v123 = v117;
              v123[1] = v117;
              uint64_t v116 = 4;
            }
            else if (v64[2])
            {
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v114, v26, v113, v115, v95, v28);
            }
            else
            {
              uint64_t v116 = 0;
              int32x4_t v117 = 0uLL;
              *BOOL v114 = 0u;
              *(_OWORD *)(v65 + 48) = 0u;
              int64x2_t v118 = (_OWORD *)((char *)v114 + v26);
              *int64x2_t v118 = 0u;
              v118[1] = 0u;
              int64x2_t v119 = (_OWORD *)((char *)v114 + v68);
              *int64x2_t v119 = 0u;
              v119[1] = 0u;
              int64x2_t v120 = (_OWORD *)((char *)v114 + v358);
              *int64x2_t v120 = 0u;
              v120[1] = 0u;
            }
            uint64_t v135 = v113 + v116;
            unsigned int v136 = (_OWORD *)(v92 + 32);
            unsigned int v137 = v64[3];
            if (v137 == 127)
            {
              int64x2_t v146 = *(int64x2_t *)v135;
              int64x2_t v147 = *(int64x2_t *)(v135 + 16);
              int64x2_t v148 = *(int64x2_t *)(v135 + 32);
              int64x2_t v149 = *(int64x2_t *)(v135 + 48);
              int64x2_t v150 = *(int64x2_t *)(v135 + 64);
              int64x2_t v151 = *(int64x2_t *)(v135 + 80);
              int64x2_t v152 = *(int64x2_t *)(v135 + 96);
              int64x2_t v153 = *(int64x2_t *)(v135 + 112);
              *unsigned int v136 = vzip1q_s64(*(int64x2_t *)v135, v147);
              *(int64x2_t *)(v92 + 48) = vzip1q_s64(v150, v151);
              uint64_t v154 = (int64x2_t *)((char *)v136 + v68);
              int32x4_t v155 = (int64x2_t *)((char *)v136 + v26);
              int64x2_t *v155 = vzip2q_s64(v146, v147);
              v155[1] = vzip2q_s64(v150, v151);
              *uint64_t v154 = vzip1q_s64(v148, v149);
              v154[1] = vzip1q_s64(v152, v153);
              int32x4_t v156 = (int32x4_t *)((char *)v136 + v68 + v26);
              int32x4_t v139 = (int32x4_t)vzip2q_s64(v148, v149);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v152, v153);
              int32x4_t *v156 = v139;
              v156[1] = v28;
              uint64_t v138 = 128;
            }
            else if (v137 == 3)
            {
              int32x4_t v139 = (int32x4_t)vld1q_dup_f32((const float *)v135);
              *(int32x4_t *)(v92 + 32) = v139;
              *(int32x4_t *)(v92 + 48) = v139;
              int64x2_t v143 = (int32x4_t *)((char *)v136 + v26);
              *int64x2_t v143 = v139;
              v143[1] = v139;
              int64x2_t v144 = (int32x4_t *)((char *)v136 + v68);
              int32x4_t *v144 = v139;
              v144[1] = v139;
              int64x2_t v145 = (int32x4_t *)((char *)v136 + v358);
              int32x4_t *v145 = v139;
              v145[1] = v139;
              uint64_t v138 = 4;
            }
            else if (v64[3])
            {
              uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v136, v26, v135, v137, v117, v28);
            }
            else
            {
              uint64_t v138 = 0;
              int32x4_t v139 = 0uLL;
              *unsigned int v136 = 0u;
              *(_OWORD *)(v92 + 48) = 0u;
              int64x2_t v140 = (_OWORD *)((char *)v136 + v26);
              *int64x2_t v140 = 0u;
              v140[1] = 0u;
              int64x2_t v141 = (_OWORD *)((char *)v136 + v68);
              *int64x2_t v141 = 0u;
              v141[1] = 0u;
              int64x2_t v142 = (_OWORD *)((char *)v136 + v358);
              *int64x2_t v142 = 0u;
              v142[1] = 0u;
            }
            uint64_t v157 = v135 + v138;
            uint64_t v158 = v65 + v360;
            unsigned int v159 = v64[4];
            if (v159 == 127)
            {
              int64x2_t v168 = *(int64x2_t *)v157;
              int64x2_t v169 = *(int64x2_t *)(v157 + 16);
              int64x2_t v170 = *(int64x2_t *)(v157 + 32);
              int64x2_t v171 = *(int64x2_t *)(v157 + 48);
              int64x2_t v172 = *(int64x2_t *)(v157 + 64);
              int64x2_t v173 = *(int64x2_t *)(v157 + 80);
              int64x2_t v174 = *(int64x2_t *)(v157 + 96);
              int64x2_t v175 = *(int64x2_t *)(v157 + 112);
              *(int64x2_t *)uint64_t v158 = vzip1q_s64(*(int64x2_t *)v157, v169);
              *(int64x2_t *)(v158 + 16) = vzip1q_s64(v172, v173);
              uint64_t v176 = (int64x2_t *)(v158 + v68);
              int32x4_t v177 = (int64x2_t *)(v158 + v26);
              int64x2_t *v177 = vzip2q_s64(v168, v169);
              v177[1] = vzip2q_s64(v172, v173);
              *uint64_t v176 = vzip1q_s64(v170, v171);
              v176[1] = vzip1q_s64(v174, v175);
              unint64_t v178 = (int32x4_t *)(v158 + v68 + v26);
              int32x4_t v161 = (int32x4_t)vzip2q_s64(v170, v171);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v174, v175);
              int32x4_t *v178 = v161;
              v178[1] = v28;
              uint64_t v160 = 128;
            }
            else if (v159 == 3)
            {
              int32x4_t v161 = (int32x4_t)vld1q_dup_f32((const float *)v157);
              *(int32x4_t *)uint64_t v158 = v161;
              *(int32x4_t *)(v158 + 16) = v161;
              int64x2_t v165 = (int32x4_t *)(v158 + v26);
              *int64x2_t v165 = v161;
              v165[1] = v161;
              int64x2_t v166 = (int32x4_t *)(v158 + v68);
              int32x4_t *v166 = v161;
              v166[1] = v161;
              int64x2_t v167 = (int32x4_t *)(v158 + v358);
              int32x4_t *v167 = v161;
              v167[1] = v161;
              uint64_t v160 = 4;
            }
            else if (v64[4])
            {
              uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v65 + v360), v26, v157, v159, v139, v28);
            }
            else
            {
              uint64_t v160 = 0;
              int32x4_t v161 = 0uLL;
              *(_OWORD *)uint64_t v158 = 0u;
              *(_OWORD *)(v158 + 16) = 0u;
              int64x2_t v162 = (_OWORD *)(v158 + v26);
              *int64x2_t v162 = 0u;
              v162[1] = 0u;
              int64x2_t v163 = (_OWORD *)(v158 + v68);
              *int64x2_t v163 = 0u;
              v163[1] = 0u;
              int64x2_t v164 = (_OWORD *)(v158 + v358);
              *int64x2_t v164 = 0u;
              v164[1] = 0u;
            }
            uint64_t v179 = v157 + v160;
            uint64_t v180 = v65 + 12 * a11;
            unsigned int v181 = v64[5];
            if (v181 == 127)
            {
              int64x2_t v190 = *(int64x2_t *)v179;
              int64x2_t v191 = *(int64x2_t *)(v179 + 16);
              int64x2_t v192 = *(int64x2_t *)(v179 + 32);
              int64x2_t v193 = *(int64x2_t *)(v179 + 48);
              int64x2_t v194 = *(int64x2_t *)(v179 + 64);
              int64x2_t v195 = *(int64x2_t *)(v179 + 80);
              int64x2_t v196 = *(int64x2_t *)(v179 + 96);
              int64x2_t v197 = *(int64x2_t *)(v179 + 112);
              *(int64x2_t *)uint64_t v180 = vzip1q_s64(*(int64x2_t *)v179, v191);
              *(int64x2_t *)(v180 + 16) = vzip1q_s64(v194, v195);
              uint64_t v198 = (int64x2_t *)(v180 + v68);
              int32x4_t v199 = (int64x2_t *)(v180 + v26);
              int64x2_t *v199 = vzip2q_s64(v190, v191);
              v199[1] = vzip2q_s64(v194, v195);
              *uint64_t v198 = vzip1q_s64(v192, v193);
              v198[1] = vzip1q_s64(v196, v197);
              unsigned int v200 = (int32x4_t *)(v180 + v68 + v26);
              int32x4_t v183 = (int32x4_t)vzip2q_s64(v192, v193);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v196, v197);
              int32x4_t *v200 = v183;
              v200[1] = v28;
              uint64_t v182 = 128;
            }
            else if (v181 == 3)
            {
              int32x4_t v183 = (int32x4_t)vld1q_dup_f32((const float *)v179);
              *(int32x4_t *)uint64_t v180 = v183;
              *(int32x4_t *)(v180 + 16) = v183;
              int64x2_t v187 = (int32x4_t *)(v180 + v26);
              *int64x2_t v187 = v183;
              v187[1] = v183;
              int64x2_t v188 = (int32x4_t *)(v180 + v68);
              int32x4_t *v188 = v183;
              v188[1] = v183;
              int64x2_t v189 = (int32x4_t *)(v180 + v358);
              int32x4_t *v189 = v183;
              v189[1] = v183;
              uint64_t v182 = 4;
            }
            else if (v64[5])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v180, v26, v179, v181, v161, v28);
            }
            else
            {
              uint64_t v182 = 0;
              int32x4_t v183 = 0uLL;
              *(_OWORD *)uint64_t v180 = 0u;
              *(_OWORD *)(v180 + 16) = 0u;
              int64x2_t v184 = (_OWORD *)(v180 + v26);
              *int64x2_t v184 = 0u;
              v184[1] = 0u;
              int64x2_t v185 = (_OWORD *)(v180 + v68);
              *int64x2_t v185 = 0u;
              v185[1] = 0u;
              int64x2_t v186 = (_OWORD *)(v180 + v358);
              *int64x2_t v186 = 0u;
              v186[1] = 0u;
            }
            uint64_t v201 = v179 + v182;
            unsigned int v202 = (_OWORD *)(v158 + 32);
            unsigned int v203 = v64[6];
            if (v203 == 127)
            {
              int64x2_t v212 = *(int64x2_t *)v201;
              int64x2_t v213 = *(int64x2_t *)(v201 + 16);
              int64x2_t v214 = *(int64x2_t *)(v201 + 32);
              int64x2_t v215 = *(int64x2_t *)(v201 + 48);
              int64x2_t v216 = *(int64x2_t *)(v201 + 64);
              int64x2_t v217 = *(int64x2_t *)(v201 + 80);
              int64x2_t v218 = *(int64x2_t *)(v201 + 96);
              int64x2_t v219 = *(int64x2_t *)(v201 + 112);
              *unsigned int v202 = vzip1q_s64(*(int64x2_t *)v201, v213);
              *(int64x2_t *)(v158 + 48) = vzip1q_s64(v216, v217);
              uint64_t v220 = (int64x2_t *)((char *)v202 + v68);
              int32x4_t v221 = (int64x2_t *)((char *)v202 + v26);
              int64x2_t *v221 = vzip2q_s64(v212, v213);
              v221[1] = vzip2q_s64(v216, v217);
              *uint64_t v220 = vzip1q_s64(v214, v215);
              v220[1] = vzip1q_s64(v218, v219);
              unsigned int v222 = (int32x4_t *)((char *)v202 + v68 + v26);
              int32x4_t v205 = (int32x4_t)vzip2q_s64(v214, v215);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v218, v219);
              int32x4_t *v222 = v205;
              v222[1] = v28;
              uint64_t v204 = 128;
            }
            else if (v203 == 3)
            {
              int32x4_t v205 = (int32x4_t)vld1q_dup_f32((const float *)v201);
              *(int32x4_t *)(v158 + 32) = v205;
              *(int32x4_t *)(v158 + 48) = v205;
              int64x2_t v209 = (int32x4_t *)((char *)v202 + v26);
              *int64x2_t v209 = v205;
              v209[1] = v205;
              int64x2_t v210 = (int32x4_t *)((char *)v202 + v68);
              int32x4_t *v210 = v205;
              v210[1] = v205;
              int64x2_t v211 = (int32x4_t *)((char *)v202 + v358);
              int32x4_t *v211 = v205;
              v211[1] = v205;
              uint64_t v204 = 4;
            }
            else if (v64[6])
            {
              uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v202, v26, v201, v203, v183, v28);
            }
            else
            {
              uint64_t v204 = 0;
              int32x4_t v205 = 0uLL;
              *unsigned int v202 = 0u;
              *(_OWORD *)(v158 + 48) = 0u;
              int64x2_t v206 = (_OWORD *)((char *)v202 + v26);
              *int64x2_t v206 = 0u;
              v206[1] = 0u;
              int64x2_t v207 = (_OWORD *)((char *)v202 + v68);
              *int64x2_t v207 = 0u;
              v207[1] = 0u;
              int64x2_t v208 = (_OWORD *)((char *)v202 + v358);
              *int64x2_t v208 = 0u;
              v208[1] = 0u;
            }
            unsigned int v33 = v31 + 1;
            uint64_t v223 = v201 + v204;
            uint64_t v224 = (_OWORD *)(v180 + 32);
            unsigned int v225 = v64[7];
            if (v225 == 127)
            {
              int64x2_t v229 = *(int64x2_t *)v223;
              int64x2_t v230 = *(int64x2_t *)(v223 + 16);
              int64x2_t v231 = *(int64x2_t *)(v223 + 32);
              int64x2_t v232 = *(int64x2_t *)(v223 + 48);
              int64x2_t v233 = *(int64x2_t *)(v223 + 64);
              int64x2_t v234 = *(int64x2_t *)(v223 + 80);
              int64x2_t v235 = *(int64x2_t *)(v223 + 96);
              int64x2_t v236 = *(int64x2_t *)(v223 + 112);
              *uint64_t v224 = vzip1q_s64(*(int64x2_t *)v223, v230);
              *(int64x2_t *)(v180 + 48) = vzip1q_s64(v233, v234);
              int v237 = (int64x2_t *)((char *)v224 + v68);
              int32x4_t v238 = (int64x2_t *)((char *)v224 + v26);
              *int32x4_t v238 = vzip2q_s64(v229, v230);
              v238[1] = vzip2q_s64(v233, v234);
              *int v237 = vzip1q_s64(v231, v232);
              v237[1] = vzip1q_s64(v235, v236);
              uint64_t v239 = (int32x4_t *)((char *)v224 + v68 + v26);
              int32x4_t v25 = (int32x4_t)vzip2q_s64(v231, v232);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v235, v236);
              int32x4_t *v239 = v25;
              v239[1] = v28;
              a7 = v367;
              uint64_t v16 = v377;
              goto LABEL_27;
            }
            uint64_t v16 = v377;
            if (v225 == 3)
            {
              int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v223);
              *(int32x4_t *)(v180 + 32) = v25;
              *(int32x4_t *)(v180 + 48) = v25;
LABEL_148:
              unsigned int v226 = (int32x4_t *)((char *)v224 + v26);
              *unsigned int v226 = v25;
              v226[1] = v25;
              unsigned int v227 = (int32x4_t *)((char *)v224 + v68);
              *unsigned int v227 = v25;
              v227[1] = v25;
              int64x2_t v228 = (int32x4_t *)((char *)v224 + v358);
              *int64x2_t v228 = v25;
              v228[1] = v25;
            }
            else
            {
              if (!v225)
              {
                int32x4_t v25 = 0uLL;
                *uint64_t v224 = 0u;
                *(_OWORD *)(v180 + 48) = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v224, v26, v223, v225, v205, v28);
            }
            a7 = v367;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v377;
          block[5] = v63;
          char v388 = v38;
          char v389 = v380;
          unsigned int v384 = v362;
          unsigned int v385 = v36 - v34;
          block[6] = v64;
          uint64_t v382 = v65;
          uint64_t v26 = a11;
          uint64_t v383 = a11;
          unsigned int v386 = v374;
          unsigned int v387 = v37;
          if (v39)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v377 + 8) + 7384), block);
            a7 = v367;
            uint64_t v16 = v377;
            unsigned int v33 = v31 + 1;
          }
          else
          {
            unsigned int v74 = *v64;
            a7 = v367;
            if (v74 == 127)
            {
              int64x2_t v240 = *v63;
              int64x2_t v241 = v63[1];
              int64x2_t v242 = v63[2];
              int64x2_t v243 = v63[3];
              int64x2_t v244 = v63[4];
              int64x2_t v245 = v63[5];
              int64x2_t v246 = v63[6];
              int64x2_t v247 = v63[7];
              int64x2_t v391 = vzip1q_s64(*v63, v241);
              int64x2_t v392 = vzip1q_s64(v244, v245);
              int64x2_t v395 = vzip2q_s64(v240, v241);
              int64x2_t v396 = vzip2q_s64(v244, v245);
              int64x2_t v399 = vzip1q_s64(v242, v243);
              int64x2_t v400 = vzip1q_s64(v246, v247);
              int32x4_t v76 = (int32x4_t)vzip2q_s64(v242, v243);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v246, v247);
              int32x4_t v403 = v76;
              int32x4_t v404 = v28;
              uint64_t v75 = 128;
            }
            else if (v74 == 3)
            {
              int32x4_t v76 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
              int64x2_t v391 = (int64x2_t)v76;
              int64x2_t v392 = (int64x2_t)v76;
              int64x2_t v395 = (int64x2_t)v76;
              int64x2_t v396 = (int64x2_t)v76;
              int64x2_t v399 = (int64x2_t)v76;
              int64x2_t v400 = (int64x2_t)v76;
              int32x4_t v403 = v76;
              int32x4_t v404 = v76;
              uint64_t v75 = 4;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v391, 64, (uint64_t)v63, v74, v25, v28);
            }
            else
            {
              uint64_t v75 = 0;
              int32x4_t v76 = 0uLL;
              int64x2_t v392 = 0u;
              int64x2_t v391 = 0u;
              int64x2_t v395 = 0u;
              int64x2_t v396 = 0u;
              int64x2_t v399 = 0u;
              int64x2_t v400 = 0u;
              int32x4_t v403 = 0u;
              int32x4_t v404 = 0u;
            }
            uint64_t v248 = (uint64_t)v63->i64 + v75;
            unsigned int v249 = v64[1];
            if (v249 == 127)
            {
              int64x2_t v252 = *(int64x2_t *)v248;
              int64x2_t v253 = *(int64x2_t *)(v248 + 16);
              int64x2_t v254 = *(int64x2_t *)(v248 + 32);
              int64x2_t v255 = *(int64x2_t *)(v248 + 48);
              int64x2_t v256 = *(int64x2_t *)(v248 + 64);
              int64x2_t v257 = *(int64x2_t *)(v248 + 80);
              int64x2_t v258 = *(int64x2_t *)(v248 + 96);
              int64x2_t v259 = *(int64x2_t *)(v248 + 112);
              int64x2_t v407 = vzip1q_s64(*(int64x2_t *)v248, v253);
              int64x2_t v408 = vzip1q_s64(v256, v257);
              int64x2_t v411 = vzip2q_s64(v252, v253);
              int64x2_t v412 = vzip2q_s64(v256, v257);
              int64x2_t v415 = vzip1q_s64(v254, v255);
              int64x2_t v416 = vzip1q_s64(v258, v259);
              int32x4_t v251 = (int32x4_t)vzip2q_s64(v254, v255);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v258, v259);
              int32x4_t v419 = v251;
              int32x4_t v420 = v28;
              uint64_t v250 = 128;
            }
            else if (v249 == 3)
            {
              int32x4_t v251 = (int32x4_t)vld1q_dup_f32((const float *)v248);
              int64x2_t v407 = (int64x2_t)v251;
              int64x2_t v408 = (int64x2_t)v251;
              int64x2_t v411 = (int64x2_t)v251;
              int64x2_t v412 = (int64x2_t)v251;
              int64x2_t v415 = (int64x2_t)v251;
              int64x2_t v416 = (int64x2_t)v251;
              int32x4_t v419 = v251;
              int32x4_t v420 = v251;
              uint64_t v250 = 4;
            }
            else if (v64[1])
            {
              uint64_t v250 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v407, 64, v248, v249, v76, v28);
            }
            else
            {
              uint64_t v250 = 0;
              int32x4_t v251 = 0uLL;
              int64x2_t v407 = 0u;
              int64x2_t v408 = 0u;
              int64x2_t v411 = 0u;
              int64x2_t v412 = 0u;
              int64x2_t v415 = 0u;
              int64x2_t v416 = 0u;
              int32x4_t v419 = 0u;
              int32x4_t v420 = 0u;
            }
            uint64_t v260 = v248 + v250;
            unsigned int v261 = v64[2];
            if (v261 == 127)
            {
              int64x2_t v264 = *(int64x2_t *)v260;
              int64x2_t v265 = *(int64x2_t *)(v260 + 16);
              int64x2_t v266 = *(int64x2_t *)(v260 + 32);
              int64x2_t v267 = *(int64x2_t *)(v260 + 48);
              int64x2_t v268 = *(int64x2_t *)(v260 + 64);
              int64x2_t v269 = *(int64x2_t *)(v260 + 80);
              int64x2_t v270 = *(int64x2_t *)(v260 + 96);
              int64x2_t v271 = *(int64x2_t *)(v260 + 112);
              int64x2_t v393 = vzip1q_s64(*(int64x2_t *)v260, v265);
              int64x2_t v394 = vzip1q_s64(v268, v269);
              int64x2_t v397 = vzip2q_s64(v264, v265);
              int64x2_t v398 = vzip2q_s64(v268, v269);
              int64x2_t v401 = vzip1q_s64(v266, v267);
              int64x2_t v402 = vzip1q_s64(v270, v271);
              int32x4_t v263 = (int32x4_t)vzip2q_s64(v266, v267);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v270, v271);
              int32x4_t v405 = v263;
              int32x4_t v406 = v28;
              uint64_t v262 = 128;
            }
            else if (v261 == 3)
            {
              int32x4_t v263 = (int32x4_t)vld1q_dup_f32((const float *)v260);
              int64x2_t v393 = (int64x2_t)v263;
              int64x2_t v394 = (int64x2_t)v263;
              int64x2_t v397 = (int64x2_t)v263;
              int64x2_t v398 = (int64x2_t)v263;
              int64x2_t v401 = (int64x2_t)v263;
              int64x2_t v402 = (int64x2_t)v263;
              int32x4_t v405 = v263;
              int32x4_t v406 = v263;
              uint64_t v262 = 4;
            }
            else if (v64[2])
            {
              uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v393, 64, v260, v261, v251, v28);
            }
            else
            {
              uint64_t v262 = 0;
              int32x4_t v263 = 0uLL;
              int64x2_t v393 = 0u;
              int64x2_t v394 = 0u;
              int64x2_t v397 = 0u;
              int64x2_t v398 = 0u;
              int64x2_t v401 = 0u;
              int64x2_t v402 = 0u;
              int32x4_t v405 = 0u;
              int32x4_t v406 = 0u;
            }
            uint64_t v272 = v260 + v262;
            unsigned int v273 = v64[3];
            if (v273 == 127)
            {
              int64x2_t v276 = *(int64x2_t *)v272;
              int64x2_t v277 = *(int64x2_t *)(v272 + 16);
              int64x2_t v278 = *(int64x2_t *)(v272 + 32);
              int64x2_t v279 = *(int64x2_t *)(v272 + 48);
              int64x2_t v280 = *(int64x2_t *)(v272 + 64);
              int64x2_t v281 = *(int64x2_t *)(v272 + 80);
              int64x2_t v282 = *(int64x2_t *)(v272 + 96);
              int64x2_t v283 = *(int64x2_t *)(v272 + 112);
              int64x2_t v409 = vzip1q_s64(*(int64x2_t *)v272, v277);
              int64x2_t v410 = vzip1q_s64(v280, v281);
              int64x2_t v413 = vzip2q_s64(v276, v277);
              int64x2_t v414 = vzip2q_s64(v280, v281);
              int64x2_t v417 = vzip1q_s64(v278, v279);
              int64x2_t v418 = vzip1q_s64(v282, v283);
              int32x4_t v275 = (int32x4_t)vzip2q_s64(v278, v279);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v282, v283);
              int32x4_t v421 = v275;
              int32x4_t v422 = v28;
              uint64_t v274 = 128;
            }
            else if (v273 == 3)
            {
              int32x4_t v275 = (int32x4_t)vld1q_dup_f32((const float *)v272);
              int64x2_t v409 = (int64x2_t)v275;
              int64x2_t v410 = (int64x2_t)v275;
              int64x2_t v413 = (int64x2_t)v275;
              int64x2_t v414 = (int64x2_t)v275;
              int64x2_t v417 = (int64x2_t)v275;
              int64x2_t v418 = (int64x2_t)v275;
              int32x4_t v421 = v275;
              int32x4_t v422 = v275;
              uint64_t v274 = 4;
            }
            else if (v64[3])
            {
              uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 64, v272, v273, v263, v28);
            }
            else
            {
              uint64_t v274 = 0;
              int32x4_t v275 = 0uLL;
              int64x2_t v409 = 0u;
              int64x2_t v410 = 0u;
              int64x2_t v413 = 0u;
              int64x2_t v414 = 0u;
              int64x2_t v417 = 0u;
              int64x2_t v418 = 0u;
              int32x4_t v421 = 0u;
              int32x4_t v422 = 0u;
            }
            uint64_t v284 = v272 + v274;
            unsigned int v285 = v64[4];
            if (v285 == 127)
            {
              int64x2_t v288 = *(int64x2_t *)v284;
              int64x2_t v289 = *(int64x2_t *)(v284 + 16);
              int64x2_t v290 = *(int64x2_t *)(v284 + 32);
              int64x2_t v291 = *(int64x2_t *)(v284 + 48);
              int64x2_t v292 = *(int64x2_t *)(v284 + 64);
              int64x2_t v293 = *(int64x2_t *)(v284 + 80);
              int64x2_t v294 = *(int64x2_t *)(v284 + 96);
              int64x2_t v295 = *(int64x2_t *)(v284 + 112);
              int64x2_t v423 = vzip1q_s64(*(int64x2_t *)v284, v289);
              int64x2_t v424 = vzip1q_s64(v292, v293);
              int64x2_t v427 = vzip2q_s64(v288, v289);
              int64x2_t v428 = vzip2q_s64(v292, v293);
              int64x2_t v431 = vzip1q_s64(v290, v291);
              int64x2_t v432 = vzip1q_s64(v294, v295);
              int32x4_t v287 = (int32x4_t)vzip2q_s64(v290, v291);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v294, v295);
              int32x4_t v435 = v287;
              int32x4_t v436 = v28;
              uint64_t v286 = 128;
            }
            else if (v285 == 3)
            {
              int32x4_t v287 = (int32x4_t)vld1q_dup_f32((const float *)v284);
              int64x2_t v423 = (int64x2_t)v287;
              int64x2_t v424 = (int64x2_t)v287;
              int64x2_t v427 = (int64x2_t)v287;
              int64x2_t v428 = (int64x2_t)v287;
              int64x2_t v431 = (int64x2_t)v287;
              int64x2_t v432 = (int64x2_t)v287;
              int32x4_t v435 = v287;
              int32x4_t v436 = v287;
              uint64_t v286 = 4;
            }
            else if (v64[4])
            {
              uint64_t v286 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v423, 64, v284, v285, v275, v28);
            }
            else
            {
              uint64_t v286 = 0;
              int32x4_t v287 = 0uLL;
              int64x2_t v423 = 0u;
              int64x2_t v424 = 0u;
              int64x2_t v427 = 0u;
              int64x2_t v428 = 0u;
              int64x2_t v431 = 0u;
              int64x2_t v432 = 0u;
              int32x4_t v435 = 0u;
              int32x4_t v436 = 0u;
            }
            uint64_t v296 = v284 + v286;
            unsigned int v297 = v64[5];
            if (v297 == 127)
            {
              int64x2_t v300 = *(int64x2_t *)v296;
              int64x2_t v301 = *(int64x2_t *)(v296 + 16);
              int64x2_t v302 = *(int64x2_t *)(v296 + 32);
              int64x2_t v303 = *(int64x2_t *)(v296 + 48);
              int64x2_t v304 = *(int64x2_t *)(v296 + 64);
              int64x2_t v305 = *(int64x2_t *)(v296 + 80);
              int64x2_t v306 = *(int64x2_t *)(v296 + 96);
              int64x2_t v307 = *(int64x2_t *)(v296 + 112);
              int64x2_t v439 = vzip1q_s64(*(int64x2_t *)v296, v301);
              int64x2_t v440 = vzip1q_s64(v304, v305);
              int64x2_t v443 = vzip2q_s64(v300, v301);
              int64x2_t v444 = vzip2q_s64(v304, v305);
              int64x2_t v447 = vzip1q_s64(v302, v303);
              int64x2_t v448 = vzip1q_s64(v306, v307);
              int32x4_t v299 = (int32x4_t)vzip2q_s64(v302, v303);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v306, v307);
              int32x4_t v451 = v299;
              int32x4_t v452 = v28;
              uint64_t v298 = 128;
            }
            else if (v297 == 3)
            {
              int32x4_t v299 = (int32x4_t)vld1q_dup_f32((const float *)v296);
              int64x2_t v439 = (int64x2_t)v299;
              int64x2_t v440 = (int64x2_t)v299;
              int64x2_t v443 = (int64x2_t)v299;
              int64x2_t v444 = (int64x2_t)v299;
              int64x2_t v447 = (int64x2_t)v299;
              int64x2_t v448 = (int64x2_t)v299;
              int32x4_t v451 = v299;
              int32x4_t v452 = v299;
              uint64_t v298 = 4;
            }
            else if (v64[5])
            {
              uint64_t v298 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v439, 64, v296, v297, v287, v28);
            }
            else
            {
              uint64_t v298 = 0;
              int32x4_t v299 = 0uLL;
              int64x2_t v439 = 0u;
              int64x2_t v440 = 0u;
              int64x2_t v443 = 0u;
              int64x2_t v444 = 0u;
              int64x2_t v447 = 0u;
              int64x2_t v448 = 0u;
              int32x4_t v451 = 0u;
              int32x4_t v452 = 0u;
            }
            uint64_t v308 = v296 + v298;
            unsigned int v309 = v64[6];
            if (v309 == 127)
            {
              int64x2_t v312 = *(int64x2_t *)v308;
              int64x2_t v313 = *(int64x2_t *)(v308 + 16);
              int64x2_t v314 = *(int64x2_t *)(v308 + 32);
              int64x2_t v315 = *(int64x2_t *)(v308 + 48);
              int64x2_t v316 = *(int64x2_t *)(v308 + 64);
              int64x2_t v317 = *(int64x2_t *)(v308 + 80);
              int64x2_t v318 = *(int64x2_t *)(v308 + 96);
              int64x2_t v319 = *(int64x2_t *)(v308 + 112);
              int64x2_t v425 = vzip1q_s64(*(int64x2_t *)v308, v313);
              int64x2_t v426 = vzip1q_s64(v316, v317);
              int64x2_t v429 = vzip2q_s64(v312, v313);
              int64x2_t v430 = vzip2q_s64(v316, v317);
              int64x2_t v433 = vzip1q_s64(v314, v315);
              int64x2_t v434 = vzip1q_s64(v318, v319);
              int32x4_t v311 = (int32x4_t)vzip2q_s64(v314, v315);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v318, v319);
              int32x4_t v437 = v311;
              int32x4_t v438 = v28;
              uint64_t v310 = 128;
            }
            else if (v309 == 3)
            {
              int32x4_t v311 = (int32x4_t)vld1q_dup_f32((const float *)v308);
              int64x2_t v425 = (int64x2_t)v311;
              int64x2_t v426 = (int64x2_t)v311;
              int64x2_t v429 = (int64x2_t)v311;
              int64x2_t v430 = (int64x2_t)v311;
              int64x2_t v433 = (int64x2_t)v311;
              int64x2_t v434 = (int64x2_t)v311;
              int32x4_t v437 = v311;
              int32x4_t v438 = v311;
              uint64_t v310 = 4;
            }
            else if (v64[6])
            {
              uint64_t v310 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v425, 64, v308, v309, v299, v28);
            }
            else
            {
              uint64_t v310 = 0;
              int32x4_t v311 = 0uLL;
              int64x2_t v425 = 0u;
              int64x2_t v426 = 0u;
              int64x2_t v429 = 0u;
              int64x2_t v430 = 0u;
              int64x2_t v433 = 0u;
              int64x2_t v434 = 0u;
              int32x4_t v437 = 0u;
              int32x4_t v438 = 0u;
            }
            uint64_t v320 = v308 + v310;
            unsigned int v321 = v64[7];
            if (v321 == 127)
            {
              int64x2_t v322 = *(int64x2_t *)v320;
              int64x2_t v323 = *(int64x2_t *)(v320 + 16);
              int64x2_t v324 = *(int64x2_t *)(v320 + 32);
              int64x2_t v325 = *(int64x2_t *)(v320 + 48);
              int64x2_t v326 = *(int64x2_t *)(v320 + 64);
              int64x2_t v327 = *(int64x2_t *)(v320 + 80);
              int64x2_t v328 = *(int64x2_t *)(v320 + 96);
              int64x2_t v329 = *(int64x2_t *)(v320 + 112);
              int64x2_t v441 = vzip1q_s64(*(int64x2_t *)v320, v323);
              int64x2_t v442 = vzip1q_s64(v326, v327);
              int64x2_t v445 = vzip2q_s64(v322, v323);
              int64x2_t v446 = vzip2q_s64(v326, v327);
              int64x2_t v449 = vzip1q_s64(v324, v325);
              int64x2_t v450 = vzip1q_s64(v328, v329);
              int32x4_t v25 = (int32x4_t)vzip2q_s64(v324, v325);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v328, v329);
              int32x4_t v453 = v25;
              int32x4_t v454 = v28;
              uint64_t v16 = v377;
              unsigned int v33 = v31 + 1;
            }
            else
            {
              uint64_t v16 = v377;
              unsigned int v33 = v31 + 1;
              if (v321 == 3)
              {
                int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v320);
                int64x2_t v441 = (int64x2_t)v25;
                int64x2_t v442 = (int64x2_t)v25;
                int64x2_t v445 = (int64x2_t)v25;
                int64x2_t v446 = (int64x2_t)v25;
                int64x2_t v449 = (int64x2_t)v25;
                int64x2_t v450 = (int64x2_t)v25;
                int32x4_t v453 = v25;
                int32x4_t v454 = v25;
              }
              else if (v321)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v441, 64, v320, v321, v311, v28);
              }
              else
              {
                int32x4_t v25 = 0uLL;
                int64x2_t v441 = 0u;
                int64x2_t v442 = 0u;
                int64x2_t v445 = 0u;
                int64x2_t v446 = 0u;
                int64x2_t v449 = 0u;
                int64x2_t v450 = 0u;
                int32x4_t v453 = 0u;
                int32x4_t v454 = 0u;
              }
            }
            unint64_t v330 = v386;
            if (v386)
            {
              unint64_t v331 = 0;
              int64x2_t v332 = &v391.i8[64 * (unint64_t)v384 + 4 * v385];
              unsigned int v333 = v387;
              do
              {
                if (v333)
                {
                  uint64_t v334 = 0;
                  uint64_t v335 = v382 + v383 * v331;
                  do
                  {
                    *(unsigned char *)(v335 + v334) = v332[v334];
                    ++v334;
                    unsigned int v333 = v387;
                  }
                  while (4 * (unint64_t)v387 > v334);
                  unint64_t v330 = v386;
                }
                ++v331;
                v332 += 64;
              }
              while (v331 < v330);
            }
          }
LABEL_27:
          BOOL v21 = v31 == v368 >> 4;
          unsigned int v31 = v33;
        }
        while (!v21);
        BOOL v21 = v17++ == v357;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v455 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v376 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v355 = a8 + a10 - 1;
  unsigned int v357 = v355 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v370 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v357)
  {
    unsigned int v368 = a7 + a9 - 1;
    unsigned int v354 = a7 >> 4;
    if (a7 >> 4 <= v368 >> 4)
    {
      uint64_t v26 = a11;
      unsigned int v351 = a5 - 1;
      unsigned int v379 = (a5 - 1) >> 4;
      int v378 = ((a5 - 1) & 0xF) + 1;
      int v352 = ((a6 - 1) & 0xF) + 1;
      unsigned int v353 = (a6 - 1) >> 4;
      uint64_t v360 = 8 * a11;
      uint64_t v361 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v28.i64[1] = -1;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL)))))));
      *(int8x8_t *)v25.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v366 = v25.i32[0] | v25.i32[1];
      BOOL v364 = v25.i32[1] != 0;
      uint64_t v365 = v25.i64[0];
      BOOL v363 = v25.i32[0] != 0;
      unint64_t v350 = 8 * v19 * (unint64_t)v18;
      unsigned int v367 = a7;
      uint64_t v377 = v16;
      uint64_t v358 = 3 * a11;
      uint64_t v359 = 2 * a11;
      do
      {
        unsigned int v29 = (16 * v17) | 0xF;
        if (16 * v17 <= v376) {
          int v30 = v376;
        }
        else {
          int v30 = 16 * v17;
        }
        unsigned int v31 = v354;
        if (v355 < v29) {
          unsigned int v29 = v355;
        }
        unsigned int v375 = 16 * v17;
        int v362 = v30 - 16 * v17;
        int v374 = v29 - v30 + 1;
        int v32 = v352;
        if (v17 != v353) {
          int v32 = 16;
        }
        unsigned int v380 = v32;
        uint64_t v373 = a2 + (v30 - v376) * v26;
        do
        {
          unsigned int v34 = 16 * v31;
          unsigned int v35 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v31;
          }
          if (v368 < v35) {
            unsigned int v35 = v368;
          }
          int v37 = v35 - v36 + 1;
          if (v31 == v379) {
            unsigned int v38 = v378;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v375 >= v376 && v34 >= a7)
          {
            int v40 = v378;
            if (v31 != v379) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v374 != v380;
          }
          if (isLevelTiled)
          {
            unsigned int v336 = 0;
            uint64_t v337 = v350 >> (*(unsigned char *)(v16 + 57) != 0);
            char v338 = 1;
            if (v337 > 127)
            {
              if (v337 > 511)
              {
                if (v337 == 512)
                {
                  unsigned int v336 = 16;
                  char v339 = 1;
                  unsigned int v340 = 16;
                }
                else
                {
                  char v339 = 1;
                  unsigned int v340 = 0;
                  if (v337 == 1024)
                  {
                    unsigned int v340 = 8;
                    unsigned int v336 = 16;
                  }
                }
              }
              else if (v337 == 128)
              {
                char v338 = 0;
                char v339 = 0;
                unsigned int v336 = 32;
                unsigned int v340 = 32;
              }
              else
              {
                char v339 = 1;
                unsigned int v340 = 0;
                if (v337 == 256)
                {
                  char v338 = 0;
                  unsigned int v340 = 16;
                  unsigned int v336 = 32;
                }
              }
            }
            else
            {
              char v339 = 1;
              unsigned int v340 = 0;
              switch(v337)
              {
                case 4:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v340 = 128;
                  unsigned int v336 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v336 = 128;
                  unsigned int v340 = 128;
                  break;
                case 16:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v340 = 64;
                  unsigned int v336 = 128;
                  break;
                case 32:
                  char v338 = 0;
                  char v339 = 0;
                  unsigned int v336 = 64;
                  unsigned int v340 = 64;
                  break;
                default:
                  if (v337 == 64)
                  {
                    char v338 = 0;
                    char v339 = 0;
                    unsigned int v340 = 32;
                    unsigned int v336 = 64;
                  }
                  break;
              }
            }
            unsigned int v341 = (v336 >> 4) - 1;
            if (v338)
            {
              unsigned int v342 = 0;
              if (v339) {
                goto LABEL_243;
              }
LABEL_232:
              unsigned int v343 = 32 - __clz(~(-1 << -(char)__clz(((v340 + 15) >> 4) - 1)));
              if (v343 | v342) {
                goto LABEL_233;
              }
LABEL_244:
              uint64_t v345 = 0;
            }
            else
            {
              unsigned int v342 = 32 - __clz(~(-1 << -(char)__clz(v341)));
              if ((v339 & 1) == 0) {
                goto LABEL_232;
              }
LABEL_243:
              unsigned int v343 = 0;
              if (!v342) {
                goto LABEL_244;
              }
LABEL_233:
              int v344 = 0;
              uint64_t v345 = 0;
              int v346 = v31 & v341;
              BOOL v347 = v342 != 0;
              BOOL v348 = v343 != 0;
              int v349 = 1;
              do
              {
                --v342;
                if (v347) {
                  v345 |= (unint64_t)(v349 & v346) << v344++;
                }
                else {
                  unsigned int v342 = 0;
                }
                --v343;
                if (v348) {
                  v345 |= (unint64_t)(v349 & v17 & ((v340 >> 4) - 1)) << v344++;
                }
                else {
                  unsigned int v343 = 0;
                }
                v349 *= 2;
                --v344;
                BOOL v348 = v343 != 0;
                BOOL v347 = v342 != 0;
              }
              while (v343 | v342);
            }
            unint64_t v49 = ((unint64_t)(v34 / v336 + v375 / v340 * ((v336 + v351) / v336)) << 14) + (v345 << 10);
            goto LABEL_59;
          }
          if (v366)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v364;
            BOOL v46 = v363;
            int v47 = HIDWORD(v365);
            int v48 = v365;
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v31) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 10;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v31) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int64x2_t *)(a3 + v49);
          if (v370)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int64x2_t *)__dst;
          }
          int v64 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v65 = v373 + 4 * (v36 - a7);
          char v66 = v38 < 0x10 || v39;
          if ((v66 & 1) == 0 && v380 > 0xF)
          {
            unsigned int v67 = *v64;
            if (v67 == 127)
            {
              int64x2_t v80 = *v63;
              int64x2_t v81 = v63[1];
              int64x2_t v82 = v63[2];
              int64x2_t v83 = v63[3];
              int64x2_t v84 = v63[4];
              int64x2_t v85 = v63[5];
              int64x2_t v86 = v63[6];
              int64x2_t v87 = v63[7];
              uint64_t v68 = 2 * a11;
              *(int64x2_t *)uint64_t v65 = vzip1q_s64(*v63, v81);
              *(int64x2_t *)(v65 + 16) = vzip1q_s64(v84, v85);
              unint64_t v88 = (int64x2_t *)(v65 + v359);
              uint64_t v26 = a11;
              unint64_t v89 = (int64x2_t *)(v65 + a11);
              int64x2_t *v89 = vzip2q_s64(v80, v81);
              v89[1] = vzip2q_s64(v84, v85);
              int64x2_t *v88 = vzip1q_s64(v82, v83);
              v88[1] = vzip1q_s64(v86, v87);
              unsigned int v90 = (int32x4_t *)(v65 + v359 + a11);
              int32x4_t v70 = (int32x4_t)vzip2q_s64(v82, v83);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v86, v87);
              int32x4_t *v90 = v70;
              v90[1] = v28;
              uint64_t v69 = 128;
            }
            else
            {
              uint64_t v26 = a11;
              uint64_t v68 = 2 * a11;
              if (v67 == 3)
              {
                int32x4_t v70 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                *(int32x4_t *)uint64_t v65 = v70;
                *(int32x4_t *)(v65 + 16) = v70;
                BOOL v77 = (int32x4_t *)(v65 + a11);
                *BOOL v77 = v70;
                v77[1] = v70;
                unint64_t v78 = (int32x4_t *)(v65 + v359);
                *unint64_t v78 = v70;
                v78[1] = v70;
                char v79 = (int32x4_t *)(v65 + v358);
                *char v79 = v70;
                v79[1] = v70;
                uint64_t v69 = 4;
              }
              else if (*v64)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v65, a11, (uint64_t)v63, v67, v25, v28);
              }
              else
              {
                uint64_t v69 = 0;
                int32x4_t v70 = 0uLL;
                *(_OWORD *)uint64_t v65 = 0u;
                *(_OWORD *)(v65 + 16) = 0u;
                unsigned int v71 = (_OWORD *)(v65 + a11);
                _OWORD *v71 = 0u;
                v71[1] = 0u;
                int v72 = (_OWORD *)(v65 + v359);
                _OWORD *v72 = 0u;
                v72[1] = 0u;
                unint64_t v73 = (_OWORD *)(v65 + v358);
                *unint64_t v73 = 0u;
                v73[1] = 0u;
              }
            }
            uint64_t v91 = (uint64_t)v63->i64 + v69;
            uint64_t v92 = v65 + v361;
            unsigned int v93 = v64[1];
            if (v93 == 127)
            {
              int64x2_t v102 = *(int64x2_t *)v91;
              int64x2_t v103 = *(int64x2_t *)(v91 + 16);
              int64x2_t v104 = *(int64x2_t *)(v91 + 32);
              int64x2_t v105 = *(int64x2_t *)(v91 + 48);
              int64x2_t v106 = *(int64x2_t *)(v91 + 64);
              int64x2_t v107 = *(int64x2_t *)(v91 + 80);
              int64x2_t v108 = *(int64x2_t *)(v91 + 96);
              int64x2_t v109 = *(int64x2_t *)(v91 + 112);
              *(int64x2_t *)uint64_t v92 = vzip1q_s64(*(int64x2_t *)v91, v103);
              *(int64x2_t *)(v92 + 16) = vzip1q_s64(v106, v107);
              uint64_t v110 = (int64x2_t *)(v92 + v68);
              int32x4_t v111 = (int64x2_t *)(v92 + v26);
              int64x2_t *v111 = vzip2q_s64(v102, v103);
              v111[1] = vzip2q_s64(v106, v107);
              *uint64_t v110 = vzip1q_s64(v104, v105);
              v110[1] = vzip1q_s64(v108, v109);
              uint64_t v112 = (int32x4_t *)(v92 + v68 + v26);
              int32x4_t v95 = (int32x4_t)vzip2q_s64(v104, v105);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v108, v109);
              int32x4_t *v112 = v95;
              v112[1] = v28;
              uint64_t v94 = 128;
            }
            else if (v93 == 3)
            {
              int32x4_t v95 = (int32x4_t)vld1q_dup_f32((const float *)v91);
              *(int32x4_t *)uint64_t v92 = v95;
              *(int32x4_t *)(v92 + 16) = v95;
              int64x2_t v99 = (int32x4_t *)(v92 + v26);
              *int64x2_t v99 = v95;
              v99[1] = v95;
              int64x2_t v100 = (int32x4_t *)(v92 + v68);
              int32x4_t *v100 = v95;
              v100[1] = v95;
              int64x2_t v101 = (int32x4_t *)(v92 + v358);
              int32x4_t *v101 = v95;
              v101[1] = v95;
              uint64_t v94 = 4;
            }
            else if (v64[1])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v65 + v361), v26, v91, v93, v70, v28);
            }
            else
            {
              uint64_t v94 = 0;
              int32x4_t v95 = 0uLL;
              *(_OWORD *)uint64_t v92 = 0u;
              *(_OWORD *)(v92 + 16) = 0u;
              int64x2_t v96 = (_OWORD *)(v92 + v26);
              *int64x2_t v96 = 0u;
              v96[1] = 0u;
              int64x2_t v97 = (_OWORD *)(v92 + v68);
              *int64x2_t v97 = 0u;
              v97[1] = 0u;
              int64x2_t v98 = (_OWORD *)(v92 + v358);
              *int64x2_t v98 = 0u;
              v98[1] = 0u;
            }
            uint64_t v113 = v91 + v94;
            BOOL v114 = (_OWORD *)(v65 + 32);
            unsigned int v115 = v64[2];
            if (v115 == 127)
            {
              int64x2_t v124 = *(int64x2_t *)v113;
              int64x2_t v125 = *(int64x2_t *)(v113 + 16);
              int64x2_t v126 = *(int64x2_t *)(v113 + 32);
              int64x2_t v127 = *(int64x2_t *)(v113 + 48);
              int64x2_t v128 = *(int64x2_t *)(v113 + 64);
              int64x2_t v129 = *(int64x2_t *)(v113 + 80);
              int64x2_t v130 = *(int64x2_t *)(v113 + 96);
              int64x2_t v131 = *(int64x2_t *)(v113 + 112);
              *BOOL v114 = vzip1q_s64(*(int64x2_t *)v113, v125);
              *(int64x2_t *)(v65 + 48) = vzip1q_s64(v128, v129);
              uint64_t v132 = (int64x2_t *)((char *)v114 + v68);
              int32x4_t v133 = (int64x2_t *)((char *)v114 + v26);
              int64x2_t *v133 = vzip2q_s64(v124, v125);
              v133[1] = vzip2q_s64(v128, v129);
              *uint64_t v132 = vzip1q_s64(v126, v127);
              v132[1] = vzip1q_s64(v130, v131);
              unsigned int v134 = (int32x4_t *)((char *)v114 + v68 + v26);
              int32x4_t v117 = (int32x4_t)vzip2q_s64(v126, v127);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v130, v131);
              int32x4_t *v134 = v117;
              v134[1] = v28;
              uint64_t v116 = 128;
            }
            else if (v115 == 3)
            {
              int32x4_t v117 = (int32x4_t)vld1q_dup_f32((const float *)v113);
              *(int32x4_t *)(v65 + 32) = v117;
              *(int32x4_t *)(v65 + 48) = v117;
              int64x2_t v121 = (int32x4_t *)((char *)v114 + v26);
              *int64x2_t v121 = v117;
              v121[1] = v117;
              int64x2_t v122 = (int32x4_t *)((char *)v114 + v68);
              int32x4_t *v122 = v117;
              v122[1] = v117;
              int64x2_t v123 = (int32x4_t *)((char *)v114 + v358);
              int32x4_t *v123 = v117;
              v123[1] = v117;
              uint64_t v116 = 4;
            }
            else if (v64[2])
            {
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v114, v26, v113, v115, v95, v28);
            }
            else
            {
              uint64_t v116 = 0;
              int32x4_t v117 = 0uLL;
              *BOOL v114 = 0u;
              *(_OWORD *)(v65 + 48) = 0u;
              int64x2_t v118 = (_OWORD *)((char *)v114 + v26);
              *int64x2_t v118 = 0u;
              v118[1] = 0u;
              int64x2_t v119 = (_OWORD *)((char *)v114 + v68);
              *int64x2_t v119 = 0u;
              v119[1] = 0u;
              int64x2_t v120 = (_OWORD *)((char *)v114 + v358);
              *int64x2_t v120 = 0u;
              v120[1] = 0u;
            }
            uint64_t v135 = v113 + v116;
            unsigned int v136 = (_OWORD *)(v92 + 32);
            unsigned int v137 = v64[3];
            if (v137 == 127)
            {
              int64x2_t v146 = *(int64x2_t *)v135;
              int64x2_t v147 = *(int64x2_t *)(v135 + 16);
              int64x2_t v148 = *(int64x2_t *)(v135 + 32);
              int64x2_t v149 = *(int64x2_t *)(v135 + 48);
              int64x2_t v150 = *(int64x2_t *)(v135 + 64);
              int64x2_t v151 = *(int64x2_t *)(v135 + 80);
              int64x2_t v152 = *(int64x2_t *)(v135 + 96);
              int64x2_t v153 = *(int64x2_t *)(v135 + 112);
              *unsigned int v136 = vzip1q_s64(*(int64x2_t *)v135, v147);
              *(int64x2_t *)(v92 + 48) = vzip1q_s64(v150, v151);
              uint64_t v154 = (int64x2_t *)((char *)v136 + v68);
              int32x4_t v155 = (int64x2_t *)((char *)v136 + v26);
              int64x2_t *v155 = vzip2q_s64(v146, v147);
              v155[1] = vzip2q_s64(v150, v151);
              *uint64_t v154 = vzip1q_s64(v148, v149);
              v154[1] = vzip1q_s64(v152, v153);
              int32x4_t v156 = (int32x4_t *)((char *)v136 + v68 + v26);
              int32x4_t v139 = (int32x4_t)vzip2q_s64(v148, v149);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v152, v153);
              int32x4_t *v156 = v139;
              v156[1] = v28;
              uint64_t v138 = 128;
            }
            else if (v137 == 3)
            {
              int32x4_t v139 = (int32x4_t)vld1q_dup_f32((const float *)v135);
              *(int32x4_t *)(v92 + 32) = v139;
              *(int32x4_t *)(v92 + 48) = v139;
              int64x2_t v143 = (int32x4_t *)((char *)v136 + v26);
              *int64x2_t v143 = v139;
              v143[1] = v139;
              int64x2_t v144 = (int32x4_t *)((char *)v136 + v68);
              int32x4_t *v144 = v139;
              v144[1] = v139;
              int64x2_t v145 = (int32x4_t *)((char *)v136 + v358);
              int32x4_t *v145 = v139;
              v145[1] = v139;
              uint64_t v138 = 4;
            }
            else if (v64[3])
            {
              uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v136, v26, v135, v137, v117, v28);
            }
            else
            {
              uint64_t v138 = 0;
              int32x4_t v139 = 0uLL;
              *unsigned int v136 = 0u;
              *(_OWORD *)(v92 + 48) = 0u;
              int64x2_t v140 = (_OWORD *)((char *)v136 + v26);
              *int64x2_t v140 = 0u;
              v140[1] = 0u;
              int64x2_t v141 = (_OWORD *)((char *)v136 + v68);
              *int64x2_t v141 = 0u;
              v141[1] = 0u;
              int64x2_t v142 = (_OWORD *)((char *)v136 + v358);
              *int64x2_t v142 = 0u;
              v142[1] = 0u;
            }
            uint64_t v157 = v135 + v138;
            uint64_t v158 = v65 + v360;
            unsigned int v159 = v64[4];
            if (v159 == 127)
            {
              int64x2_t v168 = *(int64x2_t *)v157;
              int64x2_t v169 = *(int64x2_t *)(v157 + 16);
              int64x2_t v170 = *(int64x2_t *)(v157 + 32);
              int64x2_t v171 = *(int64x2_t *)(v157 + 48);
              int64x2_t v172 = *(int64x2_t *)(v157 + 64);
              int64x2_t v173 = *(int64x2_t *)(v157 + 80);
              int64x2_t v174 = *(int64x2_t *)(v157 + 96);
              int64x2_t v175 = *(int64x2_t *)(v157 + 112);
              *(int64x2_t *)uint64_t v158 = vzip1q_s64(*(int64x2_t *)v157, v169);
              *(int64x2_t *)(v158 + 16) = vzip1q_s64(v172, v173);
              uint64_t v176 = (int64x2_t *)(v158 + v68);
              int32x4_t v177 = (int64x2_t *)(v158 + v26);
              int64x2_t *v177 = vzip2q_s64(v168, v169);
              v177[1] = vzip2q_s64(v172, v173);
              *uint64_t v176 = vzip1q_s64(v170, v171);
              v176[1] = vzip1q_s64(v174, v175);
              unint64_t v178 = (int32x4_t *)(v158 + v68 + v26);
              int32x4_t v161 = (int32x4_t)vzip2q_s64(v170, v171);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v174, v175);
              int32x4_t *v178 = v161;
              v178[1] = v28;
              uint64_t v160 = 128;
            }
            else if (v159 == 3)
            {
              int32x4_t v161 = (int32x4_t)vld1q_dup_f32((const float *)v157);
              *(int32x4_t *)uint64_t v158 = v161;
              *(int32x4_t *)(v158 + 16) = v161;
              int64x2_t v165 = (int32x4_t *)(v158 + v26);
              *int64x2_t v165 = v161;
              v165[1] = v161;
              int64x2_t v166 = (int32x4_t *)(v158 + v68);
              int32x4_t *v166 = v161;
              v166[1] = v161;
              int64x2_t v167 = (int32x4_t *)(v158 + v358);
              int32x4_t *v167 = v161;
              v167[1] = v161;
              uint64_t v160 = 4;
            }
            else if (v64[4])
            {
              uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)(v65 + v360), v26, v157, v159, v139, v28);
            }
            else
            {
              uint64_t v160 = 0;
              int32x4_t v161 = 0uLL;
              *(_OWORD *)uint64_t v158 = 0u;
              *(_OWORD *)(v158 + 16) = 0u;
              int64x2_t v162 = (_OWORD *)(v158 + v26);
              *int64x2_t v162 = 0u;
              v162[1] = 0u;
              int64x2_t v163 = (_OWORD *)(v158 + v68);
              *int64x2_t v163 = 0u;
              v163[1] = 0u;
              int64x2_t v164 = (_OWORD *)(v158 + v358);
              *int64x2_t v164 = 0u;
              v164[1] = 0u;
            }
            uint64_t v179 = v157 + v160;
            uint64_t v180 = v65 + 12 * a11;
            unsigned int v181 = v64[5];
            if (v181 == 127)
            {
              int64x2_t v190 = *(int64x2_t *)v179;
              int64x2_t v191 = *(int64x2_t *)(v179 + 16);
              int64x2_t v192 = *(int64x2_t *)(v179 + 32);
              int64x2_t v193 = *(int64x2_t *)(v179 + 48);
              int64x2_t v194 = *(int64x2_t *)(v179 + 64);
              int64x2_t v195 = *(int64x2_t *)(v179 + 80);
              int64x2_t v196 = *(int64x2_t *)(v179 + 96);
              int64x2_t v197 = *(int64x2_t *)(v179 + 112);
              *(int64x2_t *)uint64_t v180 = vzip1q_s64(*(int64x2_t *)v179, v191);
              *(int64x2_t *)(v180 + 16) = vzip1q_s64(v194, v195);
              uint64_t v198 = (int64x2_t *)(v180 + v68);
              int32x4_t v199 = (int64x2_t *)(v180 + v26);
              int64x2_t *v199 = vzip2q_s64(v190, v191);
              v199[1] = vzip2q_s64(v194, v195);
              *uint64_t v198 = vzip1q_s64(v192, v193);
              v198[1] = vzip1q_s64(v196, v197);
              unsigned int v200 = (int32x4_t *)(v180 + v68 + v26);
              int32x4_t v183 = (int32x4_t)vzip2q_s64(v192, v193);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v196, v197);
              int32x4_t *v200 = v183;
              v200[1] = v28;
              uint64_t v182 = 128;
            }
            else if (v181 == 3)
            {
              int32x4_t v183 = (int32x4_t)vld1q_dup_f32((const float *)v179);
              *(int32x4_t *)uint64_t v180 = v183;
              *(int32x4_t *)(v180 + 16) = v183;
              int64x2_t v187 = (int32x4_t *)(v180 + v26);
              *int64x2_t v187 = v183;
              v187[1] = v183;
              int64x2_t v188 = (int32x4_t *)(v180 + v68);
              int32x4_t *v188 = v183;
              v188[1] = v183;
              int64x2_t v189 = (int32x4_t *)(v180 + v358);
              int32x4_t *v189 = v183;
              v189[1] = v183;
              uint64_t v182 = 4;
            }
            else if (v64[5])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((_OWORD *)v180, v26, v179, v181, v161, v28);
            }
            else
            {
              uint64_t v182 = 0;
              int32x4_t v183 = 0uLL;
              *(_OWORD *)uint64_t v180 = 0u;
              *(_OWORD *)(v180 + 16) = 0u;
              int64x2_t v184 = (_OWORD *)(v180 + v26);
              *int64x2_t v184 = 0u;
              v184[1] = 0u;
              int64x2_t v185 = (_OWORD *)(v180 + v68);
              *int64x2_t v185 = 0u;
              v185[1] = 0u;
              int64x2_t v186 = (_OWORD *)(v180 + v358);
              *int64x2_t v186 = 0u;
              v186[1] = 0u;
            }
            uint64_t v201 = v179 + v182;
            unsigned int v202 = (_OWORD *)(v158 + 32);
            unsigned int v203 = v64[6];
            if (v203 == 127)
            {
              int64x2_t v212 = *(int64x2_t *)v201;
              int64x2_t v213 = *(int64x2_t *)(v201 + 16);
              int64x2_t v214 = *(int64x2_t *)(v201 + 32);
              int64x2_t v215 = *(int64x2_t *)(v201 + 48);
              int64x2_t v216 = *(int64x2_t *)(v201 + 64);
              int64x2_t v217 = *(int64x2_t *)(v201 + 80);
              int64x2_t v218 = *(int64x2_t *)(v201 + 96);
              int64x2_t v219 = *(int64x2_t *)(v201 + 112);
              *unsigned int v202 = vzip1q_s64(*(int64x2_t *)v201, v213);
              *(int64x2_t *)(v158 + 48) = vzip1q_s64(v216, v217);
              uint64_t v220 = (int64x2_t *)((char *)v202 + v68);
              int32x4_t v221 = (int64x2_t *)((char *)v202 + v26);
              int64x2_t *v221 = vzip2q_s64(v212, v213);
              v221[1] = vzip2q_s64(v216, v217);
              *uint64_t v220 = vzip1q_s64(v214, v215);
              v220[1] = vzip1q_s64(v218, v219);
              unsigned int v222 = (int32x4_t *)((char *)v202 + v68 + v26);
              int32x4_t v205 = (int32x4_t)vzip2q_s64(v214, v215);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v218, v219);
              int32x4_t *v222 = v205;
              v222[1] = v28;
              uint64_t v204 = 128;
            }
            else if (v203 == 3)
            {
              int32x4_t v205 = (int32x4_t)vld1q_dup_f32((const float *)v201);
              *(int32x4_t *)(v158 + 32) = v205;
              *(int32x4_t *)(v158 + 48) = v205;
              int64x2_t v209 = (int32x4_t *)((char *)v202 + v26);
              *int64x2_t v209 = v205;
              v209[1] = v205;
              int64x2_t v210 = (int32x4_t *)((char *)v202 + v68);
              int32x4_t *v210 = v205;
              v210[1] = v205;
              int64x2_t v211 = (int32x4_t *)((char *)v202 + v358);
              int32x4_t *v211 = v205;
              v211[1] = v205;
              uint64_t v204 = 4;
            }
            else if (v64[6])
            {
              uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v202, v26, v201, v203, v183, v28);
            }
            else
            {
              uint64_t v204 = 0;
              int32x4_t v205 = 0uLL;
              *unsigned int v202 = 0u;
              *(_OWORD *)(v158 + 48) = 0u;
              int64x2_t v206 = (_OWORD *)((char *)v202 + v26);
              *int64x2_t v206 = 0u;
              v206[1] = 0u;
              int64x2_t v207 = (_OWORD *)((char *)v202 + v68);
              *int64x2_t v207 = 0u;
              v207[1] = 0u;
              int64x2_t v208 = (_OWORD *)((char *)v202 + v358);
              *int64x2_t v208 = 0u;
              v208[1] = 0u;
            }
            unsigned int v33 = v31 + 1;
            uint64_t v223 = v201 + v204;
            uint64_t v224 = (_OWORD *)(v180 + 32);
            unsigned int v225 = v64[7];
            if (v225 == 127)
            {
              int64x2_t v229 = *(int64x2_t *)v223;
              int64x2_t v230 = *(int64x2_t *)(v223 + 16);
              int64x2_t v231 = *(int64x2_t *)(v223 + 32);
              int64x2_t v232 = *(int64x2_t *)(v223 + 48);
              int64x2_t v233 = *(int64x2_t *)(v223 + 64);
              int64x2_t v234 = *(int64x2_t *)(v223 + 80);
              int64x2_t v235 = *(int64x2_t *)(v223 + 96);
              int64x2_t v236 = *(int64x2_t *)(v223 + 112);
              *uint64_t v224 = vzip1q_s64(*(int64x2_t *)v223, v230);
              *(int64x2_t *)(v180 + 48) = vzip1q_s64(v233, v234);
              int v237 = (int64x2_t *)((char *)v224 + v68);
              int32x4_t v238 = (int64x2_t *)((char *)v224 + v26);
              *int32x4_t v238 = vzip2q_s64(v229, v230);
              v238[1] = vzip2q_s64(v233, v234);
              *int v237 = vzip1q_s64(v231, v232);
              v237[1] = vzip1q_s64(v235, v236);
              uint64_t v239 = (int32x4_t *)((char *)v224 + v68 + v26);
              int32x4_t v25 = (int32x4_t)vzip2q_s64(v231, v232);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v235, v236);
              int32x4_t *v239 = v25;
              v239[1] = v28;
              a7 = v367;
              uint64_t v16 = v377;
              goto LABEL_27;
            }
            uint64_t v16 = v377;
            if (v225 == 3)
            {
              int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v223);
              *(int32x4_t *)(v180 + 32) = v25;
              *(int32x4_t *)(v180 + 48) = v25;
LABEL_148:
              unsigned int v226 = (int32x4_t *)((char *)v224 + v26);
              *unsigned int v226 = v25;
              v226[1] = v25;
              unsigned int v227 = (int32x4_t *)((char *)v224 + v68);
              *unsigned int v227 = v25;
              v227[1] = v25;
              int64x2_t v228 = (int32x4_t *)((char *)v224 + v358);
              *int64x2_t v228 = v25;
              v228[1] = v25;
            }
            else
            {
              if (!v225)
              {
                int32x4_t v25 = 0uLL;
                *uint64_t v224 = 0u;
                *(_OWORD *)(v180 + 48) = 0u;
                goto LABEL_148;
              }
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v224, v26, v223, v225, v205, v28);
            }
            a7 = v367;
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v377;
          block[5] = v63;
          char v388 = v38;
          char v389 = v380;
          unsigned int v384 = v362;
          unsigned int v385 = v36 - v34;
          block[6] = v64;
          uint64_t v382 = v65;
          uint64_t v26 = a11;
          uint64_t v383 = a11;
          unsigned int v386 = v374;
          unsigned int v387 = v37;
          if (v39)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v377 + 8) + 7384), block);
            a7 = v367;
            uint64_t v16 = v377;
            unsigned int v33 = v31 + 1;
          }
          else
          {
            unsigned int v74 = *v64;
            a7 = v367;
            if (v74 == 127)
            {
              int64x2_t v240 = *v63;
              int64x2_t v241 = v63[1];
              int64x2_t v242 = v63[2];
              int64x2_t v243 = v63[3];
              int64x2_t v244 = v63[4];
              int64x2_t v245 = v63[5];
              int64x2_t v246 = v63[6];
              int64x2_t v247 = v63[7];
              int64x2_t v391 = vzip1q_s64(*v63, v241);
              int64x2_t v392 = vzip1q_s64(v244, v245);
              int64x2_t v395 = vzip2q_s64(v240, v241);
              int64x2_t v396 = vzip2q_s64(v244, v245);
              int64x2_t v399 = vzip1q_s64(v242, v243);
              int64x2_t v400 = vzip1q_s64(v246, v247);
              int32x4_t v76 = (int32x4_t)vzip2q_s64(v242, v243);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v246, v247);
              int32x4_t v403 = v76;
              int32x4_t v404 = v28;
              uint64_t v75 = 128;
            }
            else if (v74 == 3)
            {
              int32x4_t v76 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
              int64x2_t v391 = (int64x2_t)v76;
              int64x2_t v392 = (int64x2_t)v76;
              int64x2_t v395 = (int64x2_t)v76;
              int64x2_t v396 = (int64x2_t)v76;
              int64x2_t v399 = (int64x2_t)v76;
              int64x2_t v400 = (int64x2_t)v76;
              int32x4_t v403 = v76;
              int32x4_t v404 = v76;
              uint64_t v75 = 4;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v391, 64, (uint64_t)v63, v74, v25, v28);
            }
            else
            {
              uint64_t v75 = 0;
              int32x4_t v76 = 0uLL;
              int64x2_t v392 = 0u;
              int64x2_t v391 = 0u;
              int64x2_t v395 = 0u;
              int64x2_t v396 = 0u;
              int64x2_t v399 = 0u;
              int64x2_t v400 = 0u;
              int32x4_t v403 = 0u;
              int32x4_t v404 = 0u;
            }
            uint64_t v248 = (uint64_t)v63->i64 + v75;
            unsigned int v249 = v64[1];
            if (v249 == 127)
            {
              int64x2_t v252 = *(int64x2_t *)v248;
              int64x2_t v253 = *(int64x2_t *)(v248 + 16);
              int64x2_t v254 = *(int64x2_t *)(v248 + 32);
              int64x2_t v255 = *(int64x2_t *)(v248 + 48);
              int64x2_t v256 = *(int64x2_t *)(v248 + 64);
              int64x2_t v257 = *(int64x2_t *)(v248 + 80);
              int64x2_t v258 = *(int64x2_t *)(v248 + 96);
              int64x2_t v259 = *(int64x2_t *)(v248 + 112);
              int64x2_t v407 = vzip1q_s64(*(int64x2_t *)v248, v253);
              int64x2_t v408 = vzip1q_s64(v256, v257);
              int64x2_t v411 = vzip2q_s64(v252, v253);
              int64x2_t v412 = vzip2q_s64(v256, v257);
              int64x2_t v415 = vzip1q_s64(v254, v255);
              int64x2_t v416 = vzip1q_s64(v258, v259);
              int32x4_t v251 = (int32x4_t)vzip2q_s64(v254, v255);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v258, v259);
              int32x4_t v419 = v251;
              int32x4_t v420 = v28;
              uint64_t v250 = 128;
            }
            else if (v249 == 3)
            {
              int32x4_t v251 = (int32x4_t)vld1q_dup_f32((const float *)v248);
              int64x2_t v407 = (int64x2_t)v251;
              int64x2_t v408 = (int64x2_t)v251;
              int64x2_t v411 = (int64x2_t)v251;
              int64x2_t v412 = (int64x2_t)v251;
              int64x2_t v415 = (int64x2_t)v251;
              int64x2_t v416 = (int64x2_t)v251;
              int32x4_t v419 = v251;
              int32x4_t v420 = v251;
              uint64_t v250 = 4;
            }
            else if (v64[1])
            {
              uint64_t v250 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v407, 64, v248, v249, v76, v28);
            }
            else
            {
              uint64_t v250 = 0;
              int32x4_t v251 = 0uLL;
              int64x2_t v407 = 0u;
              int64x2_t v408 = 0u;
              int64x2_t v411 = 0u;
              int64x2_t v412 = 0u;
              int64x2_t v415 = 0u;
              int64x2_t v416 = 0u;
              int32x4_t v419 = 0u;
              int32x4_t v420 = 0u;
            }
            uint64_t v260 = v248 + v250;
            unsigned int v261 = v64[2];
            if (v261 == 127)
            {
              int64x2_t v264 = *(int64x2_t *)v260;
              int64x2_t v265 = *(int64x2_t *)(v260 + 16);
              int64x2_t v266 = *(int64x2_t *)(v260 + 32);
              int64x2_t v267 = *(int64x2_t *)(v260 + 48);
              int64x2_t v268 = *(int64x2_t *)(v260 + 64);
              int64x2_t v269 = *(int64x2_t *)(v260 + 80);
              int64x2_t v270 = *(int64x2_t *)(v260 + 96);
              int64x2_t v271 = *(int64x2_t *)(v260 + 112);
              int64x2_t v393 = vzip1q_s64(*(int64x2_t *)v260, v265);
              int64x2_t v394 = vzip1q_s64(v268, v269);
              int64x2_t v397 = vzip2q_s64(v264, v265);
              int64x2_t v398 = vzip2q_s64(v268, v269);
              int64x2_t v401 = vzip1q_s64(v266, v267);
              int64x2_t v402 = vzip1q_s64(v270, v271);
              int32x4_t v263 = (int32x4_t)vzip2q_s64(v266, v267);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v270, v271);
              int32x4_t v405 = v263;
              int32x4_t v406 = v28;
              uint64_t v262 = 128;
            }
            else if (v261 == 3)
            {
              int32x4_t v263 = (int32x4_t)vld1q_dup_f32((const float *)v260);
              int64x2_t v393 = (int64x2_t)v263;
              int64x2_t v394 = (int64x2_t)v263;
              int64x2_t v397 = (int64x2_t)v263;
              int64x2_t v398 = (int64x2_t)v263;
              int64x2_t v401 = (int64x2_t)v263;
              int64x2_t v402 = (int64x2_t)v263;
              int32x4_t v405 = v263;
              int32x4_t v406 = v263;
              uint64_t v262 = 4;
            }
            else if (v64[2])
            {
              uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v393, 64, v260, v261, v251, v28);
            }
            else
            {
              uint64_t v262 = 0;
              int32x4_t v263 = 0uLL;
              int64x2_t v393 = 0u;
              int64x2_t v394 = 0u;
              int64x2_t v397 = 0u;
              int64x2_t v398 = 0u;
              int64x2_t v401 = 0u;
              int64x2_t v402 = 0u;
              int32x4_t v405 = 0u;
              int32x4_t v406 = 0u;
            }
            uint64_t v272 = v260 + v262;
            unsigned int v273 = v64[3];
            if (v273 == 127)
            {
              int64x2_t v276 = *(int64x2_t *)v272;
              int64x2_t v277 = *(int64x2_t *)(v272 + 16);
              int64x2_t v278 = *(int64x2_t *)(v272 + 32);
              int64x2_t v279 = *(int64x2_t *)(v272 + 48);
              int64x2_t v280 = *(int64x2_t *)(v272 + 64);
              int64x2_t v281 = *(int64x2_t *)(v272 + 80);
              int64x2_t v282 = *(int64x2_t *)(v272 + 96);
              int64x2_t v283 = *(int64x2_t *)(v272 + 112);
              int64x2_t v409 = vzip1q_s64(*(int64x2_t *)v272, v277);
              int64x2_t v410 = vzip1q_s64(v280, v281);
              int64x2_t v413 = vzip2q_s64(v276, v277);
              int64x2_t v414 = vzip2q_s64(v280, v281);
              int64x2_t v417 = vzip1q_s64(v278, v279);
              int64x2_t v418 = vzip1q_s64(v282, v283);
              int32x4_t v275 = (int32x4_t)vzip2q_s64(v278, v279);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v282, v283);
              int32x4_t v421 = v275;
              int32x4_t v422 = v28;
              uint64_t v274 = 128;
            }
            else if (v273 == 3)
            {
              int32x4_t v275 = (int32x4_t)vld1q_dup_f32((const float *)v272);
              int64x2_t v409 = (int64x2_t)v275;
              int64x2_t v410 = (int64x2_t)v275;
              int64x2_t v413 = (int64x2_t)v275;
              int64x2_t v414 = (int64x2_t)v275;
              int64x2_t v417 = (int64x2_t)v275;
              int64x2_t v418 = (int64x2_t)v275;
              int32x4_t v421 = v275;
              int32x4_t v422 = v275;
              uint64_t v274 = 4;
            }
            else if (v64[3])
            {
              uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 64, v272, v273, v263, v28);
            }
            else
            {
              uint64_t v274 = 0;
              int32x4_t v275 = 0uLL;
              int64x2_t v409 = 0u;
              int64x2_t v410 = 0u;
              int64x2_t v413 = 0u;
              int64x2_t v414 = 0u;
              int64x2_t v417 = 0u;
              int64x2_t v418 = 0u;
              int32x4_t v421 = 0u;
              int32x4_t v422 = 0u;
            }
            uint64_t v284 = v272 + v274;
            unsigned int v285 = v64[4];
            if (v285 == 127)
            {
              int64x2_t v288 = *(int64x2_t *)v284;
              int64x2_t v289 = *(int64x2_t *)(v284 + 16);
              int64x2_t v290 = *(int64x2_t *)(v284 + 32);
              int64x2_t v291 = *(int64x2_t *)(v284 + 48);
              int64x2_t v292 = *(int64x2_t *)(v284 + 64);
              int64x2_t v293 = *(int64x2_t *)(v284 + 80);
              int64x2_t v294 = *(int64x2_t *)(v284 + 96);
              int64x2_t v295 = *(int64x2_t *)(v284 + 112);
              int64x2_t v423 = vzip1q_s64(*(int64x2_t *)v284, v289);
              int64x2_t v424 = vzip1q_s64(v292, v293);
              int64x2_t v427 = vzip2q_s64(v288, v289);
              int64x2_t v428 = vzip2q_s64(v292, v293);
              int64x2_t v431 = vzip1q_s64(v290, v291);
              int64x2_t v432 = vzip1q_s64(v294, v295);
              int32x4_t v287 = (int32x4_t)vzip2q_s64(v290, v291);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v294, v295);
              int32x4_t v435 = v287;
              int32x4_t v436 = v28;
              uint64_t v286 = 128;
            }
            else if (v285 == 3)
            {
              int32x4_t v287 = (int32x4_t)vld1q_dup_f32((const float *)v284);
              int64x2_t v423 = (int64x2_t)v287;
              int64x2_t v424 = (int64x2_t)v287;
              int64x2_t v427 = (int64x2_t)v287;
              int64x2_t v428 = (int64x2_t)v287;
              int64x2_t v431 = (int64x2_t)v287;
              int64x2_t v432 = (int64x2_t)v287;
              int32x4_t v435 = v287;
              int32x4_t v436 = v287;
              uint64_t v286 = 4;
            }
            else if (v64[4])
            {
              uint64_t v286 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v423, 64, v284, v285, v275, v28);
            }
            else
            {
              uint64_t v286 = 0;
              int32x4_t v287 = 0uLL;
              int64x2_t v423 = 0u;
              int64x2_t v424 = 0u;
              int64x2_t v427 = 0u;
              int64x2_t v428 = 0u;
              int64x2_t v431 = 0u;
              int64x2_t v432 = 0u;
              int32x4_t v435 = 0u;
              int32x4_t v436 = 0u;
            }
            uint64_t v296 = v284 + v286;
            unsigned int v297 = v64[5];
            if (v297 == 127)
            {
              int64x2_t v300 = *(int64x2_t *)v296;
              int64x2_t v301 = *(int64x2_t *)(v296 + 16);
              int64x2_t v302 = *(int64x2_t *)(v296 + 32);
              int64x2_t v303 = *(int64x2_t *)(v296 + 48);
              int64x2_t v304 = *(int64x2_t *)(v296 + 64);
              int64x2_t v305 = *(int64x2_t *)(v296 + 80);
              int64x2_t v306 = *(int64x2_t *)(v296 + 96);
              int64x2_t v307 = *(int64x2_t *)(v296 + 112);
              int64x2_t v439 = vzip1q_s64(*(int64x2_t *)v296, v301);
              int64x2_t v440 = vzip1q_s64(v304, v305);
              int64x2_t v443 = vzip2q_s64(v300, v301);
              int64x2_t v444 = vzip2q_s64(v304, v305);
              int64x2_t v447 = vzip1q_s64(v302, v303);
              int64x2_t v448 = vzip1q_s64(v306, v307);
              int32x4_t v299 = (int32x4_t)vzip2q_s64(v302, v303);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v306, v307);
              int32x4_t v451 = v299;
              int32x4_t v452 = v28;
              uint64_t v298 = 128;
            }
            else if (v297 == 3)
            {
              int32x4_t v299 = (int32x4_t)vld1q_dup_f32((const float *)v296);
              int64x2_t v439 = (int64x2_t)v299;
              int64x2_t v440 = (int64x2_t)v299;
              int64x2_t v443 = (int64x2_t)v299;
              int64x2_t v444 = (int64x2_t)v299;
              int64x2_t v447 = (int64x2_t)v299;
              int64x2_t v448 = (int64x2_t)v299;
              int32x4_t v451 = v299;
              int32x4_t v452 = v299;
              uint64_t v298 = 4;
            }
            else if (v64[5])
            {
              uint64_t v298 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v439, 64, v296, v297, v287, v28);
            }
            else
            {
              uint64_t v298 = 0;
              int32x4_t v299 = 0uLL;
              int64x2_t v439 = 0u;
              int64x2_t v440 = 0u;
              int64x2_t v443 = 0u;
              int64x2_t v444 = 0u;
              int64x2_t v447 = 0u;
              int64x2_t v448 = 0u;
              int32x4_t v451 = 0u;
              int32x4_t v452 = 0u;
            }
            uint64_t v308 = v296 + v298;
            unsigned int v309 = v64[6];
            if (v309 == 127)
            {
              int64x2_t v312 = *(int64x2_t *)v308;
              int64x2_t v313 = *(int64x2_t *)(v308 + 16);
              int64x2_t v314 = *(int64x2_t *)(v308 + 32);
              int64x2_t v315 = *(int64x2_t *)(v308 + 48);
              int64x2_t v316 = *(int64x2_t *)(v308 + 64);
              int64x2_t v317 = *(int64x2_t *)(v308 + 80);
              int64x2_t v318 = *(int64x2_t *)(v308 + 96);
              int64x2_t v319 = *(int64x2_t *)(v308 + 112);
              int64x2_t v425 = vzip1q_s64(*(int64x2_t *)v308, v313);
              int64x2_t v426 = vzip1q_s64(v316, v317);
              int64x2_t v429 = vzip2q_s64(v312, v313);
              int64x2_t v430 = vzip2q_s64(v316, v317);
              int64x2_t v433 = vzip1q_s64(v314, v315);
              int64x2_t v434 = vzip1q_s64(v318, v319);
              int32x4_t v311 = (int32x4_t)vzip2q_s64(v314, v315);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v318, v319);
              int32x4_t v437 = v311;
              int32x4_t v438 = v28;
              uint64_t v310 = 128;
            }
            else if (v309 == 3)
            {
              int32x4_t v311 = (int32x4_t)vld1q_dup_f32((const float *)v308);
              int64x2_t v425 = (int64x2_t)v311;
              int64x2_t v426 = (int64x2_t)v311;
              int64x2_t v429 = (int64x2_t)v311;
              int64x2_t v430 = (int64x2_t)v311;
              int64x2_t v433 = (int64x2_t)v311;
              int64x2_t v434 = (int64x2_t)v311;
              int32x4_t v437 = v311;
              int32x4_t v438 = v311;
              uint64_t v310 = 4;
            }
            else if (v64[6])
            {
              uint64_t v310 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v425, 64, v308, v309, v299, v28);
            }
            else
            {
              uint64_t v310 = 0;
              int32x4_t v311 = 0uLL;
              int64x2_t v425 = 0u;
              int64x2_t v426 = 0u;
              int64x2_t v429 = 0u;
              int64x2_t v430 = 0u;
              int64x2_t v433 = 0u;
              int64x2_t v434 = 0u;
              int32x4_t v437 = 0u;
              int32x4_t v438 = 0u;
            }
            uint64_t v320 = v308 + v310;
            unsigned int v321 = v64[7];
            if (v321 == 127)
            {
              int64x2_t v322 = *(int64x2_t *)v320;
              int64x2_t v323 = *(int64x2_t *)(v320 + 16);
              int64x2_t v324 = *(int64x2_t *)(v320 + 32);
              int64x2_t v325 = *(int64x2_t *)(v320 + 48);
              int64x2_t v326 = *(int64x2_t *)(v320 + 64);
              int64x2_t v327 = *(int64x2_t *)(v320 + 80);
              int64x2_t v328 = *(int64x2_t *)(v320 + 96);
              int64x2_t v329 = *(int64x2_t *)(v320 + 112);
              int64x2_t v441 = vzip1q_s64(*(int64x2_t *)v320, v323);
              int64x2_t v442 = vzip1q_s64(v326, v327);
              int64x2_t v445 = vzip2q_s64(v322, v323);
              int64x2_t v446 = vzip2q_s64(v326, v327);
              int64x2_t v449 = vzip1q_s64(v324, v325);
              int64x2_t v450 = vzip1q_s64(v328, v329);
              int32x4_t v25 = (int32x4_t)vzip2q_s64(v324, v325);
              int32x4_t v28 = (int32x4_t)vzip2q_s64(v328, v329);
              int32x4_t v453 = v25;
              int32x4_t v454 = v28;
              uint64_t v16 = v377;
              unsigned int v33 = v31 + 1;
            }
            else
            {
              uint64_t v16 = v377;
              unsigned int v33 = v31 + 1;
              if (v321 == 3)
              {
                int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v320);
                int64x2_t v441 = (int64x2_t)v25;
                int64x2_t v442 = (int64x2_t)v25;
                int64x2_t v445 = (int64x2_t)v25;
                int64x2_t v446 = (int64x2_t)v25;
                int64x2_t v449 = (int64x2_t)v25;
                int64x2_t v450 = (int64x2_t)v25;
                int32x4_t v453 = v25;
                int32x4_t v454 = v25;
              }
              else if (v321)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v441, 64, v320, v321, v311, v28);
              }
              else
              {
                int32x4_t v25 = 0uLL;
                int64x2_t v441 = 0u;
                int64x2_t v442 = 0u;
                int64x2_t v445 = 0u;
                int64x2_t v446 = 0u;
                int64x2_t v449 = 0u;
                int64x2_t v450 = 0u;
                int32x4_t v453 = 0u;
                int32x4_t v454 = 0u;
              }
            }
            unint64_t v330 = v386;
            if (v386)
            {
              unint64_t v331 = 0;
              int64x2_t v332 = &v391.i8[64 * (unint64_t)v384 + 4 * v385];
              unsigned int v333 = v387;
              do
              {
                if (v333)
                {
                  uint64_t v334 = 0;
                  uint64_t v335 = v382 + v383 * v331;
                  do
                  {
                    *(unsigned char *)(v335 + v334) = v332[v334];
                    ++v334;
                    unsigned int v333 = v387;
                  }
                  while (4 * (unint64_t)v387 > v334);
                  unint64_t v330 = v386;
                }
                ++v331;
                v332 += 64;
              }
              while (v331 < v330);
            }
          }
LABEL_27:
          BOOL v21 = v31 == v368 >> 4;
          unsigned int v31 = v33;
        }
        while (!v21);
        BOOL v21 = v17++ == v357;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v150 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v143 = v20;
  uint64_t v144 = v21;
  uint64_t v127 = v22;
  uint64_t v23 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v147 = v14;
  unsigned int v129 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v128 = v129 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v142 = v31;
  unsigned int v32 = v150;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v141 = 0;
LABEL_32:
      unsigned int v138 = v34 - 4;
      unsigned int v133 = v33 - 4;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v126 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v141 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v141 = 0;
  unsigned int v126 = 0;
  unsigned int v133 = 0;
  unsigned int v138 = 0;
LABEL_33:
  if (v27 <= v128)
  {
    unsigned int v140 = v150 + a9 - 1;
    if (v150 >> 4 <= v140 >> 4)
    {
      unsigned int v149 = v25 >> 4;
      unsigned int v125 = v26 >> 4;
      int v148 = (v25 & 0xF) + 1;
      int v124 = (v26 & 0xF) + 1;
      uint64_t v135 = 8 * a11;
      uint64_t v136 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v134 = v42.i32[0] | v42.i32[1];
      int8x8_t v132 = v42;
      BOOL v130 = v42.i32[0] != 0;
      BOOL v131 = v42.i32[1] != 0;
      uint64_t v139 = v23;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v147) {
          int v44 = v147;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v129 < v43) {
          unsigned int v43 = v129;
        }
        int v137 = v44 - 16 * v27;
        int v146 = v43 - v44 + 1;
        unsigned int v45 = v150 >> 4;
        int v46 = v124;
        if (v27 != v125) {
          int v46 = 16;
        }
        unsigned int v151 = v46;
        uint64_t v145 = v127 + (v44 - v147) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v140 < v48) {
            unsigned int v48 = v150 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v149) {
            unsigned int v51 = v148;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v27 >= v147 && v47 >= v32)
          {
            int v53 = v148;
            if (v45 != v149) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v146 != v151;
          }
          if (v141)
          {
            if (v138 | v133)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v133 != 0;
              int v58 = 1;
              BOOL v60 = v138 != 0;
              unsigned int v59 = v133;
              unsigned int v61 = v138;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v138) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v133) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v138) + (v27 >> v133) * v126) + (v56 << 11);
          }
          else
          {
            if (v134)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v130;
              BOOL v66 = v131;
              __int32 v68 = v132.i32[0];
              __int32 v67 = v132.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          int64x2_t v83 = (unsigned char *)(v143 + v69);
          if (v142)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v150;
            int64x2_t v83 = __dst;
          }
          int64x2_t v85 = (unsigned __int8 *)(v144 + 8 * v77);
          int64x2_t v86 = (float64x2_t *)(v145 + 8 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v151 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v139;
            block[5] = v83;
            char v159 = v51;
            char v160 = v151;
            unsigned int v155 = v137;
            unsigned int v156 = v49 - v47;
            block[6] = v85;
            uint64_t v153 = v145 + 8 * (v49 - v32);
            uint64_t v154 = a11;
            unsigned int v157 = v146;
            unsigned int v158 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v139 + 8) + 7384), block);
              unsigned int v32 = v150;
              uint64_t v23 = v139;
            }
            else
            {
              uint64_t v104 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 128, (uint64_t)v83, *v85, v42)];
              uint64_t v106 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 128, v104, v85[1], v105);
              uint64_t v108 = v106
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 128, v106, v85[2], v107);
              uint64_t v110 = v108
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 128, v108, v85[3], v109);
              uint64_t v112 = v110
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 128, v110, v85[4], v111);
              uint64_t v114 = v112
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 128, v112, v85[5], v113);
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 128, v114, v85[6], v115);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 128, v114 + v116, v85[7], v117);
              unint64_t v118 = v157;
              uint64_t v23 = v139;
              if (v157)
              {
                unint64_t v119 = 0;
                int64x2_t v120 = (char *)&v162[8 * (unint64_t)v155].f64[v156];
                unsigned int v121 = v158;
                do
                {
                  if (v121)
                  {
                    uint64_t v122 = 0;
                    uint64_t v123 = v153 + v154 * v119;
                    do
                    {
                      *(unsigned char *)(v123 + v122) = v120[v122];
                      ++v122;
                      unsigned int v121 = v158;
                    }
                    while (8 * (unint64_t)v158 > v122);
                    unint64_t v118 = v157;
                  }
                  ++v119;
                  v120 += 128;
                }
                while (v119 < v118);
              }
              unsigned int v32 = v150;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85, v42)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136), a11, v88, v85[1], v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v90, v85[2], v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136 + 64), a11, v92, v85[3], v93);
            int32x4_t v95 = (float64x2_t *)((char *)v86 + v135);
            uint64_t v97 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v135), a11, v94, v85[4], v96);
            int64x2_t v98 = (float64x2_t *)((char *)v86 + 12 * a11);
            uint64_t v100 = v97
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98, a11, v97, v85[5], v99);
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v95 + 4, a11, v100, v85[6], v101);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98 + 4, a11, v100 + v102, v85[7], v103);
            unsigned int v32 = v150;
            uint64_t v23 = v139;
          }
          BOOL v28 = v45++ == v140 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v128;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v150 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v143 = v20;
  uint64_t v144 = v21;
  uint64_t v127 = v22;
  uint64_t v23 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v147 = v14;
  unsigned int v129 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v128 = v129 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v142 = v31;
  unsigned int v32 = v150;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v141 = 0;
LABEL_32:
      unsigned int v138 = v34 - 4;
      unsigned int v133 = v33 - 4;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v126 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v141 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v141 = 0;
  unsigned int v126 = 0;
  unsigned int v133 = 0;
  unsigned int v138 = 0;
LABEL_33:
  if (v27 <= v128)
  {
    unsigned int v140 = v150 + a9 - 1;
    if (v150 >> 4 <= v140 >> 4)
    {
      unsigned int v149 = v25 >> 4;
      unsigned int v125 = v26 >> 4;
      int v148 = (v25 & 0xF) + 1;
      int v124 = (v26 & 0xF) + 1;
      uint64_t v135 = 8 * a11;
      uint64_t v136 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v134 = v42.i32[0] | v42.i32[1];
      int8x8_t v132 = v42;
      BOOL v130 = v42.i32[0] != 0;
      BOOL v131 = v42.i32[1] != 0;
      uint64_t v139 = v23;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v147) {
          int v44 = v147;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v129 < v43) {
          unsigned int v43 = v129;
        }
        int v137 = v44 - 16 * v27;
        int v146 = v43 - v44 + 1;
        unsigned int v45 = v150 >> 4;
        int v46 = v124;
        if (v27 != v125) {
          int v46 = 16;
        }
        unsigned int v151 = v46;
        uint64_t v145 = v127 + (v44 - v147) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v140 < v48) {
            unsigned int v48 = v150 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v149) {
            unsigned int v51 = v148;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v27 >= v147 && v47 >= v32)
          {
            int v53 = v148;
            if (v45 != v149) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v146 != v151;
          }
          if (v141)
          {
            if (v138 | v133)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v133 != 0;
              int v58 = 1;
              BOOL v60 = v138 != 0;
              unsigned int v59 = v133;
              unsigned int v61 = v138;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v138) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v133) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v138) + (v27 >> v133) * v126) + (v56 << 11);
          }
          else
          {
            if (v134)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v130;
              BOOL v66 = v131;
              __int32 v68 = v132.i32[0];
              __int32 v67 = v132.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          int64x2_t v83 = (unsigned char *)(v143 + v69);
          if (v142)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v150;
            int64x2_t v83 = __dst;
          }
          int64x2_t v85 = (unsigned __int8 *)(v144 + 8 * v77);
          int64x2_t v86 = (float64x2_t *)(v145 + 8 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v151 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v139;
            block[5] = v83;
            char v159 = v51;
            char v160 = v151;
            unsigned int v155 = v137;
            unsigned int v156 = v49 - v47;
            block[6] = v85;
            uint64_t v153 = v145 + 8 * (v49 - v32);
            uint64_t v154 = a11;
            unsigned int v157 = v146;
            unsigned int v158 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v139 + 8) + 7384), block);
              unsigned int v32 = v150;
              uint64_t v23 = v139;
            }
            else
            {
              uint64_t v104 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 128, (uint64_t)v83, *v85, v42)];
              uint64_t v106 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 128, v104, v85[1], v105);
              uint64_t v108 = v106
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 128, v106, v85[2], v107);
              uint64_t v110 = v108
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 128, v108, v85[3], v109);
              uint64_t v112 = v110
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 128, v110, v85[4], v111);
              uint64_t v114 = v112
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 128, v112, v85[5], v113);
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 128, v114, v85[6], v115);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 128, v114 + v116, v85[7], v117);
              unint64_t v118 = v157;
              uint64_t v23 = v139;
              if (v157)
              {
                unint64_t v119 = 0;
                int64x2_t v120 = (char *)&v162[8 * (unint64_t)v155].f64[v156];
                unsigned int v121 = v158;
                do
                {
                  if (v121)
                  {
                    uint64_t v122 = 0;
                    uint64_t v123 = v153 + v154 * v119;
                    do
                    {
                      *(unsigned char *)(v123 + v122) = v120[v122];
                      ++v122;
                      unsigned int v121 = v158;
                    }
                    while (8 * (unint64_t)v158 > v122);
                    unint64_t v118 = v157;
                  }
                  ++v119;
                  v120 += 128;
                }
                while (v119 < v118);
              }
              unsigned int v32 = v150;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85, v42)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136), a11, v88, v85[1], v89);
            uint64_t v92 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v90, v85[2], v91);
            uint64_t v94 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v136 + 64), a11, v92, v85[3], v93);
            int32x4_t v95 = (float64x2_t *)((char *)v86 + v135);
            uint64_t v97 = v94
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v135), a11, v94, v85[4], v96);
            int64x2_t v98 = (float64x2_t *)((char *)v86 + 12 * a11);
            uint64_t v100 = v97
                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98, a11, v97, v85[5], v99);
            uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v95 + 4, a11, v100, v85[6], v101);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v98 + 4, a11, v100 + v102, v85[7], v103);
            unsigned int v32 = v150;
            uint64_t v23 = v139;
          }
          BOOL v28 = v45++ == v140 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v128;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v143 = v21;
  uint64_t v144 = v22;
  uint64_t v131 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v148 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v130 = v14 + a10 - 1;
  unsigned int v132 = v130 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v142 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v132)
  {
    unsigned int v140 = v16 + a9 - 1;
    unsigned int v129 = v16 >> 4;
    if (v16 >> 4 <= v140 >> 4)
    {
      unsigned int v126 = v20 - 1;
      unsigned int v128 = (v18 - 1) >> 4;
      int v149 = ((v20 - 1) & 0xF) + 1;
      unsigned int v150 = (v20 - 1) >> 4;
      int v127 = ((v18 - 1) & 0xF) + 1;
      uint64_t v133 = 8 * a11;
      uint64_t v134 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v139 = v34.i32[0] | v34.i32[1];
      BOOL v137 = v34.i32[1] != 0;
      int8x8_t v138 = v34;
      BOOL v136 = v34.i32[0] != 0;
      unint64_t v125 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (16 * v25) | 0xF;
        if (16 * v25 <= v148) {
          int v36 = v148;
        }
        else {
          int v36 = 16 * v25;
        }
        unsigned int v37 = v129;
        if (v130 < v35) {
          unsigned int v35 = v130;
        }
        int v135 = v36 - 16 * v25;
        int v146 = v35 - v36 + 1;
        unsigned int v147 = 16 * v25;
        int v38 = v127;
        if (v25 != v128) {
          int v38 = 16;
        }
        unsigned int v151 = v38;
        uint64_t v145 = v131 + (v36 - v148) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v140 < v40) {
            unsigned int v40 = v140;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v150) {
            unsigned int v43 = v149;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v147 >= v148 && v39 >= v16)
          {
            int v45 = v149;
            if (v37 != v150) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v146 != v151;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v125 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  unsigned int v68 = 16;
                  char v71 = 1;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v116 = (v68 >> 4) - 1;
            if (v70)
            {
              unsigned int v117 = 0;
              if (v71) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v118 = 32 - __clz(~(-1 << -(char)__clz(((v72 + 15) >> 4) - 1)));
              if (v118 | v117) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v120 = 0;
            }
            else
            {
              unsigned int v117 = 32 - __clz(~(-1 << -(char)__clz(v116)));
              if ((v71 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v118 = 0;
              if (!v117) {
                goto LABEL_131;
              }
LABEL_120:
              int v119 = 0;
              uint64_t v120 = 0;
              int v121 = v37 & v116;
              BOOL v122 = v117 != 0;
              BOOL v123 = v118 != 0;
              int v124 = 1;
              do
              {
                --v117;
                if (v122) {
                  v120 |= (unint64_t)(v124 & v121) << v119++;
                }
                else {
                  unsigned int v117 = 0;
                }
                --v118;
                if (v123) {
                  v120 |= (unint64_t)(v124 & v25 & ((v72 >> 4) - 1)) << v119++;
                }
                else {
                  unsigned int v118 = 0;
                }
                v124 *= 2;
                --v119;
                BOOL v123 = v118 != 0;
                BOOL v122 = v117 != 0;
              }
              while (v118 | v117);
            }
            unint64_t v54 = ((unint64_t)(v39 / v68 + v147 / v72 * ((v68 + v126) / v68)) << 14) + (v120 << 11);
            goto LABEL_60;
          }
          if (v139)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v136;
            BOOL v51 = v137;
            __int32 v53 = v138.i32[0];
            __int32 v52 = v138.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v143 + v54);
          if (v142)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v143 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v144 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (float64x2_t *)(v145 + 8 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v151 > 0xF)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76, v34)];
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v134), a11, v80, v76[1], v81);
            uint64_t v84 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v82, v76[2], v83);
            uint64_t v86 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v134 + 64), a11, v84, v76[3], v85);
            char v87 = (float64x2_t *)((char *)v78 + v133);
            uint64_t v89 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133), a11, v86, v76[4], v88);
            uint64_t v90 = (float64x2_t *)((char *)v78 + 12 * a11);
            uint64_t v92 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90, a11, v89, v76[5], v91);
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v87 + 4, a11, v92, v76[6], v93);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 4, a11, v92 + v94, v76[7], v95);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v159 = v43;
          char v160 = v151;
          unsigned int v155 = v135;
          unsigned int v156 = v41 - v39;
          block[6] = v76;
          uint64_t v153 = v78;
          uint64_t v154 = a11;
          unsigned int v157 = v146;
          unsigned int v158 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v96 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 128, (uint64_t)v73, *v76, v34)];
          uint64_t v98 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 128, v96, v76[1], v97);
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 128, v98, v76[2], v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 128, v100, v76[3], v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 128, v102, v76[4], v103);
          uint64_t v106 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 128, v104, v76[5], v105);
          uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 128, v106, v76[6], v107);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 128, v106 + v108, v76[7], v109);
          unint64_t v110 = v157;
          uint64_t v16 = v77;
          if (v157)
          {
            unint64_t v111 = 0;
            uint64_t v112 = (char *)&v162[8 * (unint64_t)v155].f64[v156];
            unsigned int v113 = v158;
            do
            {
              if (v113)
              {
                uint64_t v114 = 0;
                int8x8_t v115 = (char *)v153 + v154 * v111;
                do
                {
                  v115[v114] = v112[v114];
                  ++v114;
                  unsigned int v113 = v158;
                }
                while (8 * (unint64_t)v158 > v114);
                unint64_t v110 = v157;
              }
              ++v111;
              v112 += 128;
            }
            while (v111 < v110);
          }
LABEL_28:
          BOOL v29 = v37++ == v140 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v132;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v143 = v21;
  uint64_t v144 = v22;
  uint64_t v131 = v23;
  uint64_t v24 = v12;
  uint64_t v170 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v148 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v130 = v14 + a10 - 1;
  unsigned int v132 = v130 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v142 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v132)
  {
    unsigned int v140 = v16 + a9 - 1;
    unsigned int v129 = v16 >> 4;
    if (v16 >> 4 <= v140 >> 4)
    {
      unsigned int v126 = v20 - 1;
      unsigned int v128 = (v18 - 1) >> 4;
      int v149 = ((v20 - 1) & 0xF) + 1;
      unsigned int v150 = (v20 - 1) >> 4;
      int v127 = ((v18 - 1) & 0xF) + 1;
      uint64_t v133 = 8 * a11;
      uint64_t v134 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v139 = v34.i32[0] | v34.i32[1];
      BOOL v137 = v34.i32[1] != 0;
      int8x8_t v138 = v34;
      BOOL v136 = v34.i32[0] != 0;
      unint64_t v125 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (16 * v25) | 0xF;
        if (16 * v25 <= v148) {
          int v36 = v148;
        }
        else {
          int v36 = 16 * v25;
        }
        unsigned int v37 = v129;
        if (v130 < v35) {
          unsigned int v35 = v130;
        }
        int v135 = v36 - 16 * v25;
        int v146 = v35 - v36 + 1;
        unsigned int v147 = 16 * v25;
        int v38 = v127;
        if (v25 != v128) {
          int v38 = 16;
        }
        unsigned int v151 = v38;
        uint64_t v145 = v131 + (v36 - v148) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v140 < v40) {
            unsigned int v40 = v140;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v150) {
            unsigned int v43 = v149;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v147 >= v148 && v39 >= v16)
          {
            int v45 = v149;
            if (v37 != v150) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v146 != v151;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v125 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  unsigned int v68 = 16;
                  char v71 = 1;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v116 = (v68 >> 4) - 1;
            if (v70)
            {
              unsigned int v117 = 0;
              if (v71) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v118 = 32 - __clz(~(-1 << -(char)__clz(((v72 + 15) >> 4) - 1)));
              if (v118 | v117) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v120 = 0;
            }
            else
            {
              unsigned int v117 = 32 - __clz(~(-1 << -(char)__clz(v116)));
              if ((v71 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v118 = 0;
              if (!v117) {
                goto LABEL_131;
              }
LABEL_120:
              int v119 = 0;
              uint64_t v120 = 0;
              int v121 = v37 & v116;
              BOOL v122 = v117 != 0;
              BOOL v123 = v118 != 0;
              int v124 = 1;
              do
              {
                --v117;
                if (v122) {
                  v120 |= (unint64_t)(v124 & v121) << v119++;
                }
                else {
                  unsigned int v117 = 0;
                }
                --v118;
                if (v123) {
                  v120 |= (unint64_t)(v124 & v25 & ((v72 >> 4) - 1)) << v119++;
                }
                else {
                  unsigned int v118 = 0;
                }
                v124 *= 2;
                --v119;
                BOOL v123 = v118 != 0;
                BOOL v122 = v117 != 0;
              }
              while (v118 | v117);
            }
            unint64_t v54 = ((unint64_t)(v39 / v68 + v147 / v72 * ((v68 + v126) / v68)) << 14) + (v120 << 11);
            goto LABEL_60;
          }
          if (v139)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v136;
            BOOL v51 = v137;
            __int32 v53 = v138.i32[0];
            __int32 v52 = v138.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v143 + v54);
          if (v142)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v143 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v144 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (float64x2_t *)(v145 + 8 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v151 > 0xF)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76, v34)];
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v134), a11, v80, v76[1], v81);
            uint64_t v84 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v82, v76[2], v83);
            uint64_t v86 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v134 + 64), a11, v84, v76[3], v85);
            char v87 = (float64x2_t *)((char *)v78 + v133);
            uint64_t v89 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133), a11, v86, v76[4], v88);
            uint64_t v90 = (float64x2_t *)((char *)v78 + 12 * a11);
            uint64_t v92 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90, a11, v89, v76[5], v91);
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v87 + 4, a11, v92, v76[6], v93);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 4, a11, v92 + v94, v76[7], v95);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v159 = v43;
          char v160 = v151;
          unsigned int v155 = v135;
          unsigned int v156 = v41 - v39;
          block[6] = v76;
          uint64_t v153 = v78;
          uint64_t v154 = a11;
          unsigned int v157 = v146;
          unsigned int v158 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v96 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 128, (uint64_t)v73, *v76, v34)];
          uint64_t v98 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 128, v96, v76[1], v97);
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 128, v98, v76[2], v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 128, v100, v76[3], v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 128, v102, v76[4], v103);
          uint64_t v106 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 128, v104, v76[5], v105);
          uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 128, v106, v76[6], v107);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 128, v106 + v108, v76[7], v109);
          unint64_t v110 = v157;
          uint64_t v16 = v77;
          if (v157)
          {
            unint64_t v111 = 0;
            uint64_t v112 = (char *)&v162[8 * (unint64_t)v155].f64[v156];
            unsigned int v113 = v158;
            do
            {
              if (v113)
              {
                uint64_t v114 = 0;
                int8x8_t v115 = (char *)v153 + v154 * v111;
                do
                {
                  v115[v114] = v112[v114];
                  ++v114;
                  unsigned int v113 = v158;
                }
                while (8 * (unint64_t)v158 > v114);
                unint64_t v110 = v157;
              }
              ++v111;
              v112 += 128;
            }
            while (v111 < v110);
          }
LABEL_28:
          BOOL v29 = v37++ == v140 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v132;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v244 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v224 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v244 >> 4;
  unsigned int v223 = v224 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v238 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v237 = 0;
LABEL_32:
      unsigned int v235 = v27 - 4;
      unsigned int v228 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v221 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v237 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v237 = 0;
  unsigned int v221 = 0;
  unsigned int v228 = 0;
  unsigned int v235 = 0;
LABEL_33:
  if (v21 <= v223)
  {
    unsigned int v236 = a7 + a9 - 1;
    if (a7 >> 4 <= v236 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v247 = v19 >> 4;
      unsigned int v220 = v20 >> 4;
      int v246 = (v19 & 0xF) + 1;
      int v219 = (v20 & 0xF) + 1;
      uint64_t v232 = 8 * a11;
      uint64_t v233 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL)));
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v36.i8))));
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v231 = v38.i32[0] | v38.i32[1];
      BOOL v226 = v38.i32[1] != 0;
      uint64_t v227 = v38.i64[0];
      BOOL v225 = v38.i32[0] != 0;
      uint64_t v245 = a1;
      uint64_t v229 = 3 * a11;
      uint64_t v230 = 2 * a11;
      do
      {
        unsigned int v39 = (16 * v21) | 0xF;
        if (16 * v21 <= v244) {
          int v40 = v244;
        }
        else {
          int v40 = 16 * v21;
        }
        if (v224 < v39) {
          unsigned int v39 = v224;
        }
        int v234 = v40 - 16 * v21;
        int v242 = v39 - v40 + 1;
        unsigned int v41 = a7 >> 4;
        int v42 = v219;
        if (v21 != v220) {
          int v42 = 16;
        }
        unsigned int v248 = v42;
        uint64_t v43 = v21 & ~(-1 << v228);
        uint64_t v241 = a2 + (v40 - v244) * v34;
        unsigned int v44 = a7;
        do
        {
          unsigned int v46 = 16 * v41;
          unsigned int v47 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v44) {
            int v48 = v44;
          }
          else {
            int v48 = 16 * v41;
          }
          if (v236 < v47) {
            unsigned int v47 = a7 + a9 - 1;
          }
          int v49 = v47 - v48 + 1;
          if (v41 == v247) {
            unsigned int v50 = v246;
          }
          else {
            unsigned int v50 = 16;
          }
          BOOL v51 = 1;
          if (16 * v21 >= v244 && v46 >= v44)
          {
            int v52 = v246;
            if (v41 != v247) {
              int v52 = 16;
            }
            BOOL v51 = v49 != v52 || v242 != v248;
          }
          if (v237)
          {
            if (v235 | v228)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v235 != 0;
              BOOL v58 = v228 != 0;
              unsigned int v59 = v235;
              unsigned int v60 = v228;
              do
              {
                --v59;
                if (v57) {
                  v55 |= (unint64_t)(v41 & ~(-1 << v235) & v56) << v54++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v60;
                if (v58) {
                  v55 |= (unint64_t)(v43 & v56) << v54++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v58 = v60 != 0;
                BOOL v57 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v68 = *(void *)(v17 + 320) * ((v41 >> v235) + (v21 >> v228) * v221) + (v55 << 9);
          }
          else
          {
            if (v231)
            {
              int v61 = 0;
              uint64_t v62 = 0;
              int v63 = 1;
              BOOL v64 = v226;
              BOOL v65 = v225;
              int v66 = HIDWORD(v227);
              int v67 = v227;
              do
              {
                --v66;
                if (v64) {
                  v62 |= (unint64_t)(v63 & v41) << v61++;
                }
                else {
                  int v66 = 0;
                }
                --v67;
                if (v65) {
                  v62 |= (unint64_t)(v63 & v21) << v61++;
                }
                else {
                  int v67 = 0;
                }
                v63 *= 2;
                --v61;
                BOOL v65 = v67 != 0;
                BOOL v64 = v66 != 0;
              }
              while (v67 | v66);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v68 = v62 << 9;
          }
          unsigned int v69 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
          }
          unsigned int v72 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20)
          {
            unsigned int v74 = 0;
            if (!v71)
            {
LABEL_115:
              unint64_t v76 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
            if (!(v74 | v71)) {
              goto LABEL_115;
            }
          }
          int v75 = 0;
          unint64_t v76 = 0;
          BOOL v77 = v71 != 0;
          BOOL v78 = v74 != 0;
          int v79 = 1;
          do
          {
            --v71;
            BOOL v80 = !v77;
            if (v77)
            {
              unint64_t v81 = ((unint64_t)(v79 & v41) << v75) | v76;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v81 = v76;
            }
            if (!v80) {
              ++v75;
            }
            --v74;
            if (v78)
            {
              unint64_t v76 = ((unint64_t)(v79 & v21) << v75) | v81;
            }
            else
            {
              unsigned int v74 = 0;
              unint64_t v76 = v81;
            }
            if (v78) {
              ++v75;
            }
            v79 *= 2;
            --v75;
            BOOL v78 = v74 != 0;
            BOOL v77 = v71 != 0;
          }
          while (v74 | v71);
LABEL_116:
          uint64_t v82 = (int32x4_t *)(a3 + v68);
          if (v238)
          {
            uint64_t v83 = v43;
            int v84 = v49;
            BOOL v85 = v51;
            memcpy(__dst, (const void *)(a3 + v68), sizeof(__dst));
            BOOL v51 = v85;
            int v49 = v84;
            uint64_t v43 = v83;
            uint64_t v82 = (int32x4_t *)__dst;
          }
          uint64_t v86 = (unsigned __int8 *)(a4 + 8 * v76);
          char v87 = (int32x4_t *)(v241 + 2 * (v48 - v44));
          char v88 = v50 < 0x10 || v51;
          if ((v88 & 1) == 0 && v248 > 0xF)
          {
            unsigned int v89 = *v86;
            if (v89 == 63)
            {
              int32x4_t v97 = *v82;
              int32x4_t v37 = v82[1];
              int32x4_t v36 = v82[2];
              int32x4_t v98 = v82[3];
              *char v87 = vuzp1q_s32(*v82, v36);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v87 + a11) = vuzp2q_s32(v97, v36);
              uint64_t v90 = 2 * a11;
              int8x8_t v99 = (int32x4_t *)((char *)v87 + v230);
              *int8x8_t v99 = vuzp1q_s32(v37, v98);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v98);
              *(int16x8_t *)((char *)v99 + a11) = v38;
              uint64_t v91 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v90 = 2 * a11;
              if (v89 == 1)
              {
                int16x8_t v38 = vld1q_dup_s16(v82->i16);
                *char v87 = (int32x4_t)v38;
                *(int16x8_t *)((char *)v87 + a11) = v38;
                *(int16x8_t *)((char *)v87 + 2 * a11) = v38;
                *(int16x8_t *)((char *)v87 + 3 * a11) = v38;
                uint64_t v91 = 2;
              }
              else if (*v86)
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, (uint64_t)v82, v89, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v91 = 0;
                v87->i64[0] = 0;
                v87->i64[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v87->i64 + a11);
                *uint64_t v92 = 0;
                v92[1] = 0;
                int8x8_t v93 = (uint64_t *)((char *)v87->i64 + v230);
                *int8x8_t v93 = 0;
                v93[1] = 0;
                uint64_t v94 = (uint64_t *)((char *)v87->i64 + v229);
                *uint64_t v94 = 0;
                v94[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)v82->i64 + v91;
            int8x8_t v101 = (int32x4_t *)((char *)v87 + v233);
            unsigned int v102 = v86[1];
            if (v102 == 63)
            {
              int32x4_t v107 = *(int32x4_t *)v100;
              int32x4_t v37 = *(int32x4_t *)(v100 + 16);
              int32x4_t v36 = *(int32x4_t *)(v100 + 32);
              int32x4_t v108 = *(int32x4_t *)(v100 + 48);
              int32x4_t *v101 = vuzp1q_s32(*(int32x4_t *)v100, v36);
              *(int32x4_t *)((char *)v101 + v34) = vuzp2q_s32(v107, v36);
              int8x8_t v109 = (int32x4_t *)((char *)v101 + v90);
              int32x4_t *v109 = vuzp1q_s32(v37, v108);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v108);
              *(int16x8_t *)((char *)v109 + v34) = v38;
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v100);
              int32x4_t *v101 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v101 + v34) = v38;
              *(int16x8_t *)((char *)v101 + v90) = v38;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v38;
              uint64_t v103 = 2;
            }
            else if (v86[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v87 + v233), v34, v100, v102, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v101->i64[1] = 0;
              uint64_t v104 = (uint64_t *)((char *)v101->i64 + v34);
              *uint64_t v104 = 0;
              v104[1] = 0;
              int8x8_t v105 = (uint64_t *)((char *)v101->i64 + v90);
              *int8x8_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v101->i64 + v229);
              *uint64_t v106 = 0;
              v106[1] = 0;
            }
            uint64_t v110 = v100 + v103;
            unint64_t v111 = v87 + 1;
            unsigned int v112 = v86[2];
            if (v112 == 63)
            {
              int32x4_t v117 = *(int32x4_t *)v110;
              int32x4_t v37 = *(int32x4_t *)(v110 + 16);
              int32x4_t v36 = *(int32x4_t *)(v110 + 32);
              int32x4_t v118 = *(int32x4_t *)(v110 + 48);
              int32x4_t *v111 = vuzp1q_s32(*(int32x4_t *)v110, v36);
              *(int32x4_t *)((char *)v111 + v34) = vuzp2q_s32(v117, v36);
              int v119 = (int32x4_t *)((char *)v111 + v90);
              *int v119 = vuzp1q_s32(v37, v118);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v118);
              *(int16x8_t *)((char *)v119 + v34) = v38;
              uint64_t v113 = 64;
            }
            else if (v112 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v110);
              int32x4_t *v111 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v111 + v34) = v38;
              *(int16x8_t *)((char *)v111 + v90) = v38;
              *(int16x8_t *)((char *)v111 + 3 * a11) = v38;
              uint64_t v113 = 2;
            }
            else if (v86[2])
            {
              uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v111, v34, v110, v112, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v113 = 0;
              v111->i64[0] = 0;
              v87[1].i64[1] = 0;
              uint64_t v114 = (uint64_t *)((char *)v111->i64 + v34);
              *uint64_t v114 = 0;
              v114[1] = 0;
              int8x8_t v115 = (uint64_t *)((char *)v111->i64 + v90);
              *int8x8_t v115 = 0;
              v115[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v111->i64 + v229);
              *unsigned int v116 = 0;
              v116[1] = 0;
            }
            uint64_t v120 = v110 + v113;
            int v121 = v101 + 1;
            unsigned int v122 = v86[3];
            if (v122 == 63)
            {
              int32x4_t v127 = *(int32x4_t *)v120;
              int32x4_t v37 = *(int32x4_t *)(v120 + 16);
              int32x4_t v36 = *(int32x4_t *)(v120 + 32);
              int32x4_t v128 = *(int32x4_t *)(v120 + 48);
              *int v121 = vuzp1q_s32(*(int32x4_t *)v120, v36);
              *(int32x4_t *)((char *)v121 + v34) = vuzp2q_s32(v127, v36);
              unsigned int v129 = (int32x4_t *)((char *)v121 + v90);
              int32x4_t *v129 = vuzp1q_s32(v37, v128);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v128);
              *(int16x8_t *)((char *)v129 + v34) = v38;
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v120);
              *int v121 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v121 + v34) = v38;
              *(int16x8_t *)((char *)v121 + v90) = v38;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v38;
              uint64_t v123 = 2;
            }
            else if (v86[3])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v121, v34, v120, v122, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v101[1].i64[1] = 0;
              int v124 = (uint64_t *)((char *)v121->i64 + v34);
              void *v124 = 0;
              v124[1] = 0;
              unint64_t v125 = (uint64_t *)((char *)v121->i64 + v90);
              *unint64_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v229);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v130 = v120 + v123;
            uint64_t v131 = (int32x4_t *)((char *)v87 + v232);
            unsigned int v132 = v86[4];
            if (v132 == 63)
            {
              int32x4_t v137 = *(int32x4_t *)v130;
              int32x4_t v37 = *(int32x4_t *)(v130 + 16);
              int32x4_t v36 = *(int32x4_t *)(v130 + 32);
              int32x4_t v138 = *(int32x4_t *)(v130 + 48);
              int32x4_t *v131 = vuzp1q_s32(*(int32x4_t *)v130, v36);
              *(int32x4_t *)((char *)v131 + v34) = vuzp2q_s32(v137, v36);
              __int32 v139 = (int32x4_t *)((char *)v131 + v90);
              *__int32 v139 = vuzp1q_s32(v37, v138);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v138);
              *(int16x8_t *)((char *)v139 + v34) = v38;
              uint64_t v133 = 64;
            }
            else if (v132 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v130);
              int32x4_t *v131 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v131 + v34) = v38;
              *(int16x8_t *)((char *)v131 + v90) = v38;
              *(int16x8_t *)((char *)v131 + 3 * a11) = v38;
              uint64_t v133 = 2;
            }
            else if (v86[4])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v87 + v232), v34, v130, v132, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v133 = 0;
              v131->i64[0] = 0;
              v131->i64[1] = 0;
              uint64_t v134 = (uint64_t *)((char *)v131->i64 + v34);
              void *v134 = 0;
              v134[1] = 0;
              int v135 = (uint64_t *)((char *)v131->i64 + v90);
              void *v135 = 0;
              v135[1] = 0;
              BOOL v136 = (uint64_t *)((char *)v131->i64 + v229);
              *BOOL v136 = 0;
              v136[1] = 0;
            }
            uint64_t v140 = v130 + v133;
            BOOL v141 = (int32x4_t *)((char *)v87 + 12 * a11);
            unsigned int v142 = v86[5];
            if (v142 == 63)
            {
              int32x4_t v147 = *(int32x4_t *)v140;
              int32x4_t v37 = *(int32x4_t *)(v140 + 16);
              int32x4_t v36 = *(int32x4_t *)(v140 + 32);
              int32x4_t v148 = *(int32x4_t *)(v140 + 48);
              *BOOL v141 = vuzp1q_s32(*(int32x4_t *)v140, v36);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v147, v36);
              int v149 = (int32x4_t *)((char *)v141 + v90);
              *int v149 = vuzp1q_s32(v37, v148);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v148);
              *(int16x8_t *)((char *)v149 + v34) = v38;
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v140);
              *BOOL v141 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v141 + v34) = v38;
              *(int16x8_t *)((char *)v141 + v90) = v38;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v38;
              uint64_t v143 = 2;
            }
            else if (v86[5])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v141, v34, v140, v142, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              uint64_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              uint64_t v145 = (uint64_t *)((char *)v141->i64 + v90);
              void *v145 = 0;
              v145[1] = 0;
              int v146 = (uint64_t *)((char *)v141->i64 + v229);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v150 = v140 + v143;
            unsigned int v151 = v131 + 1;
            unsigned int v152 = v86[6];
            if (v152 == 63)
            {
              int32x4_t v157 = *(int32x4_t *)v150;
              int32x4_t v37 = *(int32x4_t *)(v150 + 16);
              int32x4_t v36 = *(int32x4_t *)(v150 + 32);
              int32x4_t v158 = *(int32x4_t *)(v150 + 48);
              int32x4_t *v151 = vuzp1q_s32(*(int32x4_t *)v150, v36);
              *(int32x4_t *)((char *)v151 + v34) = vuzp2q_s32(v157, v36);
              char v159 = (int32x4_t *)((char *)v151 + v90);
              *char v159 = vuzp1q_s32(v37, v158);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v158);
              *(int16x8_t *)((char *)v159 + v34) = v38;
              uint64_t v153 = 64;
            }
            else if (v152 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v150);
              int32x4_t *v151 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v151 + v34) = v38;
              *(int16x8_t *)((char *)v151 + v90) = v38;
              *(int16x8_t *)((char *)v151 + 3 * a11) = v38;
              uint64_t v153 = 2;
            }
            else if (v86[6])
            {
              uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v151, v34, v150, v152, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v153 = 0;
              v151->i64[0] = 0;
              v131[1].i64[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v151->i64 + v34);
              *uint64_t v154 = 0;
              v154[1] = 0;
              unsigned int v155 = (uint64_t *)((char *)v151->i64 + v90);
              void *v155 = 0;
              v155[1] = 0;
              unsigned int v156 = (uint64_t *)((char *)v151->i64 + v229);
              void *v156 = 0;
              v156[1] = 0;
            }
            uint64_t v160 = v150 + v153;
            int32x4_t v161 = v141 + 1;
            unsigned int v162 = v86[7];
            if (v162 == 63)
            {
              int32x4_t v166 = *(int32x4_t *)v160;
              int32x4_t v37 = *(int32x4_t *)(v160 + 16);
              int32x4_t v36 = *(int32x4_t *)(v160 + 32);
              int32x4_t v167 = *(int32x4_t *)(v160 + 48);
              *int32x4_t v161 = vuzp1q_s32(*(int32x4_t *)v160, v36);
              *(int32x4_t *)((char *)v161 + v34) = vuzp2q_s32(v166, v36);
              int64x2_t v168 = (int32x4_t *)((char *)v161 + v90);
              int32x4_t *v168 = vuzp1q_s32(v37, v167);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v167);
              *(int16x8_t *)((char *)v168 + v34) = v38;
              unsigned int v44 = a7;
              uint64_t v17 = v245;
            }
            else
            {
              unsigned int v44 = a7;
              uint64_t v17 = v245;
              if (v162 == 1)
              {
                int16x8_t v38 = vld1q_dup_s16((const __int16 *)v160);
                *int32x4_t v161 = (int32x4_t)v38;
                *(int16x8_t *)((char *)v161 + v34) = v38;
                *(int16x8_t *)((char *)v161 + v90) = v38;
                *(int16x8_t *)((char *)v161 + 3 * a11) = v38;
              }
              else if (v162)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v160, v162, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v161->i64[0] = 0;
                v161->i64[1] = 0;
                int64x2_t v163 = (uint64_t *)((char *)v161->i64 + v34);
                *int64x2_t v163 = 0;
                v163[1] = 0;
                int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v90);
                *int64x2_t v164 = 0;
                v164[1] = 0;
                int64x2_t v165 = (uint64_t *)((char *)v161->i64 + v229);
                *int64x2_t v165 = 0;
                v165[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v245;
          block[5] = v82;
          char v256 = v50;
          char v257 = v248;
          int v252 = v234;
          unsigned int v253 = v48 - v46;
          block[6] = v86;
          uint64_t v250 = v87;
          uint64_t v34 = a11;
          uint64_t v251 = a11;
          unsigned int v254 = v242;
          unsigned int v255 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v245 + 8) + 7384), block);
            unsigned int v44 = a7;
            uint64_t v17 = v245;
LABEL_47:
            unsigned int v45 = v41 + 1;
            goto LABEL_48;
          }
          unsigned int v95 = *v86;
          if (v95 == 63)
          {
            int32x4_t v169 = v82[1];
            int32x4_t v36 = v82[2];
            int32x4_t v170 = v82[3];
            int32x4_t v171 = vuzp2q_s32(*v82, v36);
            int32x4_t v259 = vuzp1q_s32(*v82, v36);
            int32x4_t v261 = v171;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v169, v170);
            int32x4_t v37 = vuzp2q_s32(v169, v170);
            int16x8_t v263 = v38;
            int32x4_t v265 = v37;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16(v82->i16);
            int32x4_t v259 = (int32x4_t)v38;
            int32x4_t v261 = (int32x4_t)v38;
            int16x8_t v263 = v38;
            int32x4_t v265 = (int32x4_t)v38;
            uint64_t v96 = 2;
          }
          else if (*v86)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 32, (uint64_t)v82, v95, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v96 = 0;
            int32x4_t v259 = 0uLL;
            int32x4_t v261 = 0uLL;
            int16x8_t v263 = 0uLL;
            int32x4_t v265 = 0uLL;
          }
          uint64_t v172 = (uint64_t)v82->i64 + v96;
          unsigned int v173 = v86[1];
          if (v173 == 63)
          {
            int32x4_t v175 = *(int32x4_t *)(v172 + 16);
            int32x4_t v36 = *(int32x4_t *)(v172 + 32);
            int32x4_t v176 = *(int32x4_t *)(v172 + 48);
            int32x4_t v177 = vuzp2q_s32(*(int32x4_t *)v172, v36);
            int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v172, v36);
            int32x4_t v269 = v177;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v175, v176);
            int32x4_t v37 = vuzp2q_s32(v175, v176);
            int16x8_t v271 = v38;
            int32x4_t v273 = v37;
            uint64_t v174 = 64;
          }
          else if (v173 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v172);
            int32x4_t v267 = (int32x4_t)v38;
            int32x4_t v269 = (int32x4_t)v38;
            int16x8_t v271 = v38;
            int32x4_t v273 = (int32x4_t)v38;
            uint64_t v174 = 2;
          }
          else if (v86[1])
          {
            uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v172, v173, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v174 = 0;
            int32x4_t v267 = 0uLL;
            int32x4_t v269 = 0uLL;
            int16x8_t v271 = 0uLL;
            int32x4_t v273 = 0uLL;
          }
          uint64_t v178 = v172 + v174;
          unsigned int v179 = v86[2];
          if (v179 == 63)
          {
            int32x4_t v181 = *(int32x4_t *)(v178 + 16);
            int32x4_t v36 = *(int32x4_t *)(v178 + 32);
            int32x4_t v182 = *(int32x4_t *)(v178 + 48);
            int32x4_t v183 = vuzp2q_s32(*(int32x4_t *)v178, v36);
            int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v178, v36);
            int32x4_t v262 = v183;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v181, v182);
            int32x4_t v37 = vuzp2q_s32(v181, v182);
            int16x8_t v264 = v38;
            int32x4_t v266 = v37;
            uint64_t v180 = 64;
          }
          else if (v179 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v178);
            int32x4_t v260 = (int32x4_t)v38;
            int32x4_t v262 = (int32x4_t)v38;
            int16x8_t v264 = v38;
            int32x4_t v266 = (int32x4_t)v38;
            uint64_t v180 = 2;
          }
          else if (v86[2])
          {
            uint64_t v180 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v178, v179, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v180 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v262 = 0uLL;
            int16x8_t v264 = 0uLL;
            int32x4_t v266 = 0uLL;
          }
          uint64_t v184 = v178 + v180;
          unsigned int v185 = v86[3];
          if (v185 == 63)
          {
            int32x4_t v187 = *(int32x4_t *)(v184 + 16);
            int32x4_t v36 = *(int32x4_t *)(v184 + 32);
            int32x4_t v188 = *(int32x4_t *)(v184 + 48);
            int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v184, v36);
            int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v184, v36);
            int32x4_t v270 = v189;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v187, v188);
            int32x4_t v37 = vuzp2q_s32(v187, v188);
            int16x8_t v272 = v38;
            int32x4_t v274 = v37;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v184);
            int32x4_t v268 = (int32x4_t)v38;
            int32x4_t v270 = (int32x4_t)v38;
            int16x8_t v272 = v38;
            int32x4_t v274 = (int32x4_t)v38;
            uint64_t v186 = 2;
          }
          else if (v86[3])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v184, v185, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v186 = 0;
            int32x4_t v268 = 0uLL;
            int32x4_t v270 = 0uLL;
            int16x8_t v272 = 0uLL;
            int32x4_t v274 = 0uLL;
          }
          uint64_t v190 = v184 + v186;
          unsigned int v191 = v86[4];
          if (v191 == 63)
          {
            int32x4_t v193 = *(int32x4_t *)(v190 + 16);
            int32x4_t v36 = *(int32x4_t *)(v190 + 32);
            int32x4_t v194 = *(int32x4_t *)(v190 + 48);
            int32x4_t v195 = vuzp2q_s32(*(int32x4_t *)v190, v36);
            int32x4_t v275 = vuzp1q_s32(*(int32x4_t *)v190, v36);
            int32x4_t v277 = v195;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v193, v194);
            int32x4_t v37 = vuzp2q_s32(v193, v194);
            int16x8_t v279 = v38;
            int32x4_t v281 = v37;
            uint64_t v192 = 64;
          }
          else if (v191 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v190);
            int32x4_t v275 = (int32x4_t)v38;
            int32x4_t v277 = (int32x4_t)v38;
            int16x8_t v279 = v38;
            int32x4_t v281 = (int32x4_t)v38;
            uint64_t v192 = 2;
          }
          else if (v86[4])
          {
            uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v190, v191, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v192 = 0;
            int32x4_t v275 = 0uLL;
            int32x4_t v277 = 0uLL;
            int16x8_t v279 = 0uLL;
            int32x4_t v281 = 0uLL;
          }
          uint64_t v196 = v190 + v192;
          unsigned int v197 = v86[5];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v36 = *(int32x4_t *)(v196 + 32);
            int32x4_t v200 = *(int32x4_t *)(v196 + 48);
            int32x4_t v201 = vuzp2q_s32(*(int32x4_t *)v196, v36);
            int32x4_t v283 = vuzp1q_s32(*(int32x4_t *)v196, v36);
            int32x4_t v285 = v201;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v199, v200);
            int32x4_t v37 = vuzp2q_s32(v199, v200);
            int16x8_t v287 = v38;
            int32x4_t v289 = v37;
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v283 = (int32x4_t)v38;
            int32x4_t v285 = (int32x4_t)v38;
            int16x8_t v287 = v38;
            int32x4_t v289 = (int32x4_t)v38;
            uint64_t v198 = 2;
          }
          else if (v86[5])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, v196, v197, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v283 = 0uLL;
            int32x4_t v285 = 0uLL;
            int16x8_t v287 = 0uLL;
            int32x4_t v289 = 0uLL;
          }
          uint64_t v202 = v196 + v198;
          unsigned int v203 = v86[6];
          if (v203 == 63)
          {
            int32x4_t v205 = *(int32x4_t *)(v202 + 16);
            int32x4_t v36 = *(int32x4_t *)(v202 + 32);
            int32x4_t v206 = *(int32x4_t *)(v202 + 48);
            int32x4_t v207 = vuzp2q_s32(*(int32x4_t *)v202, v36);
            int32x4_t v276 = vuzp1q_s32(*(int32x4_t *)v202, v36);
            int32x4_t v278 = v207;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v205, v206);
            int32x4_t v37 = vuzp2q_s32(v205, v206);
            int16x8_t v280 = v38;
            int32x4_t v282 = v37;
            uint64_t v204 = 64;
          }
          else if (v203 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v202);
            int32x4_t v276 = (int32x4_t)v38;
            int32x4_t v278 = (int32x4_t)v38;
            int16x8_t v280 = v38;
            int32x4_t v282 = (int32x4_t)v38;
            uint64_t v204 = 2;
          }
          else if (v86[6])
          {
            uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v202, v203, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v204 = 0;
            int32x4_t v276 = 0uLL;
            int32x4_t v278 = 0uLL;
            int16x8_t v280 = 0uLL;
            int32x4_t v282 = 0uLL;
          }
          uint64_t v208 = v202 + v204;
          unsigned int v209 = v86[7];
          if (v209 == 63)
          {
            int32x4_t v210 = *(int32x4_t *)(v208 + 16);
            int32x4_t v36 = *(int32x4_t *)(v208 + 32);
            int32x4_t v211 = *(int32x4_t *)(v208 + 48);
            int32x4_t v212 = vuzp2q_s32(*(int32x4_t *)v208, v36);
            int32x4_t v284 = vuzp1q_s32(*(int32x4_t *)v208, v36);
            int32x4_t v286 = v212;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v210, v211);
            int32x4_t v37 = vuzp2q_s32(v210, v211);
            int16x8_t v288 = v38;
            int32x4_t v290 = v37;
            unsigned int v44 = a7;
            uint64_t v17 = v245;
          }
          else
          {
            unsigned int v44 = a7;
            uint64_t v17 = v245;
            if (v209 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v208);
              int32x4_t v284 = (int32x4_t)v38;
              int32x4_t v286 = (int32x4_t)v38;
              int16x8_t v288 = v38;
              int32x4_t v290 = (int32x4_t)v38;
            }
            else if (v209)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, v208, v209, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              int32x4_t v284 = 0uLL;
              int32x4_t v286 = 0uLL;
              int16x8_t v288 = 0uLL;
              int32x4_t v290 = 0uLL;
            }
          }
          unint64_t v213 = v254;
          unsigned int v45 = v41 + 1;
          if (v254)
          {
            unint64_t v214 = 0;
            int64x2_t v215 = &v259.i8[32 * v252 + 2 * v253];
            unsigned int v216 = v255;
            do
            {
              if (v216)
              {
                uint64_t v217 = 0;
                int64x2_t v218 = &v250->i8[v251 * v214];
                do
                {
                  v218[v217] = v215[v217];
                  ++v217;
                  unsigned int v216 = v255;
                }
                while (2 * (unint64_t)v255 > v217);
                unint64_t v213 = v254;
              }
              ++v214;
              v215 += 32;
            }
            while (v214 < v213);
          }
LABEL_48:
          BOOL v22 = v41 == v236 >> 4;
          unsigned int v41 = v45;
        }
        while (!v22);
        BOOL v22 = v21++ == v223;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v244 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v224 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v244 >> 4;
  unsigned int v223 = v224 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v238 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v237 = 0;
LABEL_32:
      unsigned int v235 = v27 - 4;
      unsigned int v228 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v221 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v237 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v237 = 0;
  unsigned int v221 = 0;
  unsigned int v228 = 0;
  unsigned int v235 = 0;
LABEL_33:
  if (v21 <= v223)
  {
    unsigned int v236 = a7 + a9 - 1;
    if (a7 >> 4 <= v236 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v247 = v19 >> 4;
      unsigned int v220 = v20 >> 4;
      int v246 = (v19 & 0xF) + 1;
      int v219 = (v20 & 0xF) + 1;
      uint64_t v232 = 8 * a11;
      uint64_t v233 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL)));
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v36.i8))));
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v231 = v38.i32[0] | v38.i32[1];
      BOOL v226 = v38.i32[1] != 0;
      uint64_t v227 = v38.i64[0];
      BOOL v225 = v38.i32[0] != 0;
      uint64_t v245 = a1;
      uint64_t v229 = 3 * a11;
      uint64_t v230 = 2 * a11;
      do
      {
        unsigned int v39 = (16 * v21) | 0xF;
        if (16 * v21 <= v244) {
          int v40 = v244;
        }
        else {
          int v40 = 16 * v21;
        }
        if (v224 < v39) {
          unsigned int v39 = v224;
        }
        int v234 = v40 - 16 * v21;
        int v242 = v39 - v40 + 1;
        unsigned int v41 = a7 >> 4;
        int v42 = v219;
        if (v21 != v220) {
          int v42 = 16;
        }
        unsigned int v248 = v42;
        uint64_t v43 = v21 & ~(-1 << v228);
        uint64_t v241 = a2 + (v40 - v244) * v34;
        unsigned int v44 = a7;
        do
        {
          unsigned int v46 = 16 * v41;
          unsigned int v47 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v44) {
            int v48 = v44;
          }
          else {
            int v48 = 16 * v41;
          }
          if (v236 < v47) {
            unsigned int v47 = a7 + a9 - 1;
          }
          int v49 = v47 - v48 + 1;
          if (v41 == v247) {
            unsigned int v50 = v246;
          }
          else {
            unsigned int v50 = 16;
          }
          BOOL v51 = 1;
          if (16 * v21 >= v244 && v46 >= v44)
          {
            int v52 = v246;
            if (v41 != v247) {
              int v52 = 16;
            }
            BOOL v51 = v49 != v52 || v242 != v248;
          }
          if (v237)
          {
            if (v235 | v228)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v235 != 0;
              BOOL v58 = v228 != 0;
              unsigned int v59 = v235;
              unsigned int v60 = v228;
              do
              {
                --v59;
                if (v57) {
                  v55 |= (unint64_t)(v41 & ~(-1 << v235) & v56) << v54++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v60;
                if (v58) {
                  v55 |= (unint64_t)(v43 & v56) << v54++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v58 = v60 != 0;
                BOOL v57 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v68 = *(void *)(v17 + 320) * ((v41 >> v235) + (v21 >> v228) * v221) + (v55 << 9);
          }
          else
          {
            if (v231)
            {
              int v61 = 0;
              uint64_t v62 = 0;
              int v63 = 1;
              BOOL v64 = v226;
              BOOL v65 = v225;
              int v66 = HIDWORD(v227);
              int v67 = v227;
              do
              {
                --v66;
                if (v64) {
                  v62 |= (unint64_t)(v63 & v41) << v61++;
                }
                else {
                  int v66 = 0;
                }
                --v67;
                if (v65) {
                  v62 |= (unint64_t)(v63 & v21) << v61++;
                }
                else {
                  int v67 = 0;
                }
                v63 *= 2;
                --v61;
                BOOL v65 = v67 != 0;
                BOOL v64 = v66 != 0;
              }
              while (v67 | v66);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v68 = v62 << 9;
          }
          unsigned int v69 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
          }
          unsigned int v72 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20)
          {
            unsigned int v74 = 0;
            if (!v71)
            {
LABEL_115:
              unint64_t v76 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
            if (!(v74 | v71)) {
              goto LABEL_115;
            }
          }
          int v75 = 0;
          unint64_t v76 = 0;
          BOOL v77 = v71 != 0;
          BOOL v78 = v74 != 0;
          int v79 = 1;
          do
          {
            --v71;
            BOOL v80 = !v77;
            if (v77)
            {
              unint64_t v81 = ((unint64_t)(v79 & v41) << v75) | v76;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v81 = v76;
            }
            if (!v80) {
              ++v75;
            }
            --v74;
            if (v78)
            {
              unint64_t v76 = ((unint64_t)(v79 & v21) << v75) | v81;
            }
            else
            {
              unsigned int v74 = 0;
              unint64_t v76 = v81;
            }
            if (v78) {
              ++v75;
            }
            v79 *= 2;
            --v75;
            BOOL v78 = v74 != 0;
            BOOL v77 = v71 != 0;
          }
          while (v74 | v71);
LABEL_116:
          uint64_t v82 = (int32x4_t *)(a3 + v68);
          if (v238)
          {
            uint64_t v83 = v43;
            int v84 = v49;
            BOOL v85 = v51;
            memcpy(__dst, (const void *)(a3 + v68), sizeof(__dst));
            BOOL v51 = v85;
            int v49 = v84;
            uint64_t v43 = v83;
            uint64_t v82 = (int32x4_t *)__dst;
          }
          uint64_t v86 = (unsigned __int8 *)(a4 + 8 * v76);
          char v87 = (int32x4_t *)(v241 + 2 * (v48 - v44));
          char v88 = v50 < 0x10 || v51;
          if ((v88 & 1) == 0 && v248 > 0xF)
          {
            unsigned int v89 = *v86;
            if (v89 == 63)
            {
              int32x4_t v97 = *v82;
              int32x4_t v37 = v82[1];
              int32x4_t v36 = v82[2];
              int32x4_t v98 = v82[3];
              *char v87 = vuzp1q_s32(*v82, v36);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v87 + a11) = vuzp2q_s32(v97, v36);
              uint64_t v90 = 2 * a11;
              int8x8_t v99 = (int32x4_t *)((char *)v87 + v230);
              *int8x8_t v99 = vuzp1q_s32(v37, v98);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v98);
              *(int16x8_t *)((char *)v99 + a11) = v38;
              uint64_t v91 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v90 = 2 * a11;
              if (v89 == 1)
              {
                int16x8_t v38 = vld1q_dup_s16(v82->i16);
                *char v87 = (int32x4_t)v38;
                *(int16x8_t *)((char *)v87 + a11) = v38;
                *(int16x8_t *)((char *)v87 + 2 * a11) = v38;
                *(int16x8_t *)((char *)v87 + 3 * a11) = v38;
                uint64_t v91 = 2;
              }
              else if (*v86)
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, (uint64_t)v82, v89, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v91 = 0;
                v87->i64[0] = 0;
                v87->i64[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v87->i64 + a11);
                *uint64_t v92 = 0;
                v92[1] = 0;
                int8x8_t v93 = (uint64_t *)((char *)v87->i64 + v230);
                *int8x8_t v93 = 0;
                v93[1] = 0;
                uint64_t v94 = (uint64_t *)((char *)v87->i64 + v229);
                *uint64_t v94 = 0;
                v94[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)v82->i64 + v91;
            int8x8_t v101 = (int32x4_t *)((char *)v87 + v233);
            unsigned int v102 = v86[1];
            if (v102 == 63)
            {
              int32x4_t v107 = *(int32x4_t *)v100;
              int32x4_t v37 = *(int32x4_t *)(v100 + 16);
              int32x4_t v36 = *(int32x4_t *)(v100 + 32);
              int32x4_t v108 = *(int32x4_t *)(v100 + 48);
              int32x4_t *v101 = vuzp1q_s32(*(int32x4_t *)v100, v36);
              *(int32x4_t *)((char *)v101 + v34) = vuzp2q_s32(v107, v36);
              int8x8_t v109 = (int32x4_t *)((char *)v101 + v90);
              int32x4_t *v109 = vuzp1q_s32(v37, v108);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v108);
              *(int16x8_t *)((char *)v109 + v34) = v38;
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v100);
              int32x4_t *v101 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v101 + v34) = v38;
              *(int16x8_t *)((char *)v101 + v90) = v38;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v38;
              uint64_t v103 = 2;
            }
            else if (v86[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v87 + v233), v34, v100, v102, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v101->i64[1] = 0;
              uint64_t v104 = (uint64_t *)((char *)v101->i64 + v34);
              *uint64_t v104 = 0;
              v104[1] = 0;
              int8x8_t v105 = (uint64_t *)((char *)v101->i64 + v90);
              *int8x8_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v101->i64 + v229);
              *uint64_t v106 = 0;
              v106[1] = 0;
            }
            uint64_t v110 = v100 + v103;
            unint64_t v111 = v87 + 1;
            unsigned int v112 = v86[2];
            if (v112 == 63)
            {
              int32x4_t v117 = *(int32x4_t *)v110;
              int32x4_t v37 = *(int32x4_t *)(v110 + 16);
              int32x4_t v36 = *(int32x4_t *)(v110 + 32);
              int32x4_t v118 = *(int32x4_t *)(v110 + 48);
              int32x4_t *v111 = vuzp1q_s32(*(int32x4_t *)v110, v36);
              *(int32x4_t *)((char *)v111 + v34) = vuzp2q_s32(v117, v36);
              int v119 = (int32x4_t *)((char *)v111 + v90);
              *int v119 = vuzp1q_s32(v37, v118);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v118);
              *(int16x8_t *)((char *)v119 + v34) = v38;
              uint64_t v113 = 64;
            }
            else if (v112 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v110);
              int32x4_t *v111 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v111 + v34) = v38;
              *(int16x8_t *)((char *)v111 + v90) = v38;
              *(int16x8_t *)((char *)v111 + 3 * a11) = v38;
              uint64_t v113 = 2;
            }
            else if (v86[2])
            {
              uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v111, v34, v110, v112, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v113 = 0;
              v111->i64[0] = 0;
              v87[1].i64[1] = 0;
              uint64_t v114 = (uint64_t *)((char *)v111->i64 + v34);
              *uint64_t v114 = 0;
              v114[1] = 0;
              int8x8_t v115 = (uint64_t *)((char *)v111->i64 + v90);
              *int8x8_t v115 = 0;
              v115[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v111->i64 + v229);
              *unsigned int v116 = 0;
              v116[1] = 0;
            }
            uint64_t v120 = v110 + v113;
            int v121 = v101 + 1;
            unsigned int v122 = v86[3];
            if (v122 == 63)
            {
              int32x4_t v127 = *(int32x4_t *)v120;
              int32x4_t v37 = *(int32x4_t *)(v120 + 16);
              int32x4_t v36 = *(int32x4_t *)(v120 + 32);
              int32x4_t v128 = *(int32x4_t *)(v120 + 48);
              *int v121 = vuzp1q_s32(*(int32x4_t *)v120, v36);
              *(int32x4_t *)((char *)v121 + v34) = vuzp2q_s32(v127, v36);
              unsigned int v129 = (int32x4_t *)((char *)v121 + v90);
              int32x4_t *v129 = vuzp1q_s32(v37, v128);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v128);
              *(int16x8_t *)((char *)v129 + v34) = v38;
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v120);
              *int v121 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v121 + v34) = v38;
              *(int16x8_t *)((char *)v121 + v90) = v38;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v38;
              uint64_t v123 = 2;
            }
            else if (v86[3])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v121, v34, v120, v122, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v101[1].i64[1] = 0;
              int v124 = (uint64_t *)((char *)v121->i64 + v34);
              void *v124 = 0;
              v124[1] = 0;
              unint64_t v125 = (uint64_t *)((char *)v121->i64 + v90);
              *unint64_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v229);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v130 = v120 + v123;
            uint64_t v131 = (int32x4_t *)((char *)v87 + v232);
            unsigned int v132 = v86[4];
            if (v132 == 63)
            {
              int32x4_t v137 = *(int32x4_t *)v130;
              int32x4_t v37 = *(int32x4_t *)(v130 + 16);
              int32x4_t v36 = *(int32x4_t *)(v130 + 32);
              int32x4_t v138 = *(int32x4_t *)(v130 + 48);
              int32x4_t *v131 = vuzp1q_s32(*(int32x4_t *)v130, v36);
              *(int32x4_t *)((char *)v131 + v34) = vuzp2q_s32(v137, v36);
              __int32 v139 = (int32x4_t *)((char *)v131 + v90);
              *__int32 v139 = vuzp1q_s32(v37, v138);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v138);
              *(int16x8_t *)((char *)v139 + v34) = v38;
              uint64_t v133 = 64;
            }
            else if (v132 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v130);
              int32x4_t *v131 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v131 + v34) = v38;
              *(int16x8_t *)((char *)v131 + v90) = v38;
              *(int16x8_t *)((char *)v131 + 3 * a11) = v38;
              uint64_t v133 = 2;
            }
            else if (v86[4])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v87 + v232), v34, v130, v132, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v133 = 0;
              v131->i64[0] = 0;
              v131->i64[1] = 0;
              uint64_t v134 = (uint64_t *)((char *)v131->i64 + v34);
              void *v134 = 0;
              v134[1] = 0;
              int v135 = (uint64_t *)((char *)v131->i64 + v90);
              void *v135 = 0;
              v135[1] = 0;
              BOOL v136 = (uint64_t *)((char *)v131->i64 + v229);
              *BOOL v136 = 0;
              v136[1] = 0;
            }
            uint64_t v140 = v130 + v133;
            BOOL v141 = (int32x4_t *)((char *)v87 + 12 * a11);
            unsigned int v142 = v86[5];
            if (v142 == 63)
            {
              int32x4_t v147 = *(int32x4_t *)v140;
              int32x4_t v37 = *(int32x4_t *)(v140 + 16);
              int32x4_t v36 = *(int32x4_t *)(v140 + 32);
              int32x4_t v148 = *(int32x4_t *)(v140 + 48);
              *BOOL v141 = vuzp1q_s32(*(int32x4_t *)v140, v36);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v147, v36);
              int v149 = (int32x4_t *)((char *)v141 + v90);
              *int v149 = vuzp1q_s32(v37, v148);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v148);
              *(int16x8_t *)((char *)v149 + v34) = v38;
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v140);
              *BOOL v141 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v141 + v34) = v38;
              *(int16x8_t *)((char *)v141 + v90) = v38;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v38;
              uint64_t v143 = 2;
            }
            else if (v86[5])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v141, v34, v140, v142, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              uint64_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              uint64_t v145 = (uint64_t *)((char *)v141->i64 + v90);
              void *v145 = 0;
              v145[1] = 0;
              int v146 = (uint64_t *)((char *)v141->i64 + v229);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v150 = v140 + v143;
            unsigned int v151 = v131 + 1;
            unsigned int v152 = v86[6];
            if (v152 == 63)
            {
              int32x4_t v157 = *(int32x4_t *)v150;
              int32x4_t v37 = *(int32x4_t *)(v150 + 16);
              int32x4_t v36 = *(int32x4_t *)(v150 + 32);
              int32x4_t v158 = *(int32x4_t *)(v150 + 48);
              int32x4_t *v151 = vuzp1q_s32(*(int32x4_t *)v150, v36);
              *(int32x4_t *)((char *)v151 + v34) = vuzp2q_s32(v157, v36);
              char v159 = (int32x4_t *)((char *)v151 + v90);
              *char v159 = vuzp1q_s32(v37, v158);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v158);
              *(int16x8_t *)((char *)v159 + v34) = v38;
              uint64_t v153 = 64;
            }
            else if (v152 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v150);
              int32x4_t *v151 = (int32x4_t)v38;
              *(int16x8_t *)((char *)v151 + v34) = v38;
              *(int16x8_t *)((char *)v151 + v90) = v38;
              *(int16x8_t *)((char *)v151 + 3 * a11) = v38;
              uint64_t v153 = 2;
            }
            else if (v86[6])
            {
              uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v151, v34, v150, v152, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v153 = 0;
              v151->i64[0] = 0;
              v131[1].i64[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v151->i64 + v34);
              *uint64_t v154 = 0;
              v154[1] = 0;
              unsigned int v155 = (uint64_t *)((char *)v151->i64 + v90);
              void *v155 = 0;
              v155[1] = 0;
              unsigned int v156 = (uint64_t *)((char *)v151->i64 + v229);
              void *v156 = 0;
              v156[1] = 0;
            }
            uint64_t v160 = v150 + v153;
            int32x4_t v161 = v141 + 1;
            unsigned int v162 = v86[7];
            if (v162 == 63)
            {
              int32x4_t v166 = *(int32x4_t *)v160;
              int32x4_t v37 = *(int32x4_t *)(v160 + 16);
              int32x4_t v36 = *(int32x4_t *)(v160 + 32);
              int32x4_t v167 = *(int32x4_t *)(v160 + 48);
              *int32x4_t v161 = vuzp1q_s32(*(int32x4_t *)v160, v36);
              *(int32x4_t *)((char *)v161 + v34) = vuzp2q_s32(v166, v36);
              int64x2_t v168 = (int32x4_t *)((char *)v161 + v90);
              int32x4_t *v168 = vuzp1q_s32(v37, v167);
              int16x8_t v38 = (int16x8_t)vuzp2q_s32(v37, v167);
              *(int16x8_t *)((char *)v168 + v34) = v38;
              unsigned int v44 = a7;
              uint64_t v17 = v245;
            }
            else
            {
              unsigned int v44 = a7;
              uint64_t v17 = v245;
              if (v162 == 1)
              {
                int16x8_t v38 = vld1q_dup_s16((const __int16 *)v160);
                *int32x4_t v161 = (int32x4_t)v38;
                *(int16x8_t *)((char *)v161 + v34) = v38;
                *(int16x8_t *)((char *)v161 + v90) = v38;
                *(int16x8_t *)((char *)v161 + 3 * a11) = v38;
              }
              else if (v162)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v160, v162, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v161->i64[0] = 0;
                v161->i64[1] = 0;
                int64x2_t v163 = (uint64_t *)((char *)v161->i64 + v34);
                *int64x2_t v163 = 0;
                v163[1] = 0;
                int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v90);
                *int64x2_t v164 = 0;
                v164[1] = 0;
                int64x2_t v165 = (uint64_t *)((char *)v161->i64 + v229);
                *int64x2_t v165 = 0;
                v165[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v245;
          block[5] = v82;
          char v256 = v50;
          char v257 = v248;
          int v252 = v234;
          unsigned int v253 = v48 - v46;
          block[6] = v86;
          uint64_t v250 = v87;
          uint64_t v34 = a11;
          uint64_t v251 = a11;
          unsigned int v254 = v242;
          unsigned int v255 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v245 + 8) + 7384), block);
            unsigned int v44 = a7;
            uint64_t v17 = v245;
LABEL_47:
            unsigned int v45 = v41 + 1;
            goto LABEL_48;
          }
          unsigned int v95 = *v86;
          if (v95 == 63)
          {
            int32x4_t v169 = v82[1];
            int32x4_t v36 = v82[2];
            int32x4_t v170 = v82[3];
            int32x4_t v171 = vuzp2q_s32(*v82, v36);
            int32x4_t v259 = vuzp1q_s32(*v82, v36);
            int32x4_t v261 = v171;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v169, v170);
            int32x4_t v37 = vuzp2q_s32(v169, v170);
            int16x8_t v263 = v38;
            int32x4_t v265 = v37;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16(v82->i16);
            int32x4_t v259 = (int32x4_t)v38;
            int32x4_t v261 = (int32x4_t)v38;
            int16x8_t v263 = v38;
            int32x4_t v265 = (int32x4_t)v38;
            uint64_t v96 = 2;
          }
          else if (*v86)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 32, (uint64_t)v82, v95, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v96 = 0;
            int32x4_t v259 = 0uLL;
            int32x4_t v261 = 0uLL;
            int16x8_t v263 = 0uLL;
            int32x4_t v265 = 0uLL;
          }
          uint64_t v172 = (uint64_t)v82->i64 + v96;
          unsigned int v173 = v86[1];
          if (v173 == 63)
          {
            int32x4_t v175 = *(int32x4_t *)(v172 + 16);
            int32x4_t v36 = *(int32x4_t *)(v172 + 32);
            int32x4_t v176 = *(int32x4_t *)(v172 + 48);
            int32x4_t v177 = vuzp2q_s32(*(int32x4_t *)v172, v36);
            int32x4_t v267 = vuzp1q_s32(*(int32x4_t *)v172, v36);
            int32x4_t v269 = v177;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v175, v176);
            int32x4_t v37 = vuzp2q_s32(v175, v176);
            int16x8_t v271 = v38;
            int32x4_t v273 = v37;
            uint64_t v174 = 64;
          }
          else if (v173 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v172);
            int32x4_t v267 = (int32x4_t)v38;
            int32x4_t v269 = (int32x4_t)v38;
            int16x8_t v271 = v38;
            int32x4_t v273 = (int32x4_t)v38;
            uint64_t v174 = 2;
          }
          else if (v86[1])
          {
            uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v172, v173, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v174 = 0;
            int32x4_t v267 = 0uLL;
            int32x4_t v269 = 0uLL;
            int16x8_t v271 = 0uLL;
            int32x4_t v273 = 0uLL;
          }
          uint64_t v178 = v172 + v174;
          unsigned int v179 = v86[2];
          if (v179 == 63)
          {
            int32x4_t v181 = *(int32x4_t *)(v178 + 16);
            int32x4_t v36 = *(int32x4_t *)(v178 + 32);
            int32x4_t v182 = *(int32x4_t *)(v178 + 48);
            int32x4_t v183 = vuzp2q_s32(*(int32x4_t *)v178, v36);
            int32x4_t v260 = vuzp1q_s32(*(int32x4_t *)v178, v36);
            int32x4_t v262 = v183;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v181, v182);
            int32x4_t v37 = vuzp2q_s32(v181, v182);
            int16x8_t v264 = v38;
            int32x4_t v266 = v37;
            uint64_t v180 = 64;
          }
          else if (v179 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v178);
            int32x4_t v260 = (int32x4_t)v38;
            int32x4_t v262 = (int32x4_t)v38;
            int16x8_t v264 = v38;
            int32x4_t v266 = (int32x4_t)v38;
            uint64_t v180 = 2;
          }
          else if (v86[2])
          {
            uint64_t v180 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, v178, v179, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v180 = 0;
            int32x4_t v260 = 0uLL;
            int32x4_t v262 = 0uLL;
            int16x8_t v264 = 0uLL;
            int32x4_t v266 = 0uLL;
          }
          uint64_t v184 = v178 + v180;
          unsigned int v185 = v86[3];
          if (v185 == 63)
          {
            int32x4_t v187 = *(int32x4_t *)(v184 + 16);
            int32x4_t v36 = *(int32x4_t *)(v184 + 32);
            int32x4_t v188 = *(int32x4_t *)(v184 + 48);
            int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v184, v36);
            int32x4_t v268 = vuzp1q_s32(*(int32x4_t *)v184, v36);
            int32x4_t v270 = v189;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v187, v188);
            int32x4_t v37 = vuzp2q_s32(v187, v188);
            int16x8_t v272 = v38;
            int32x4_t v274 = v37;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v184);
            int32x4_t v268 = (int32x4_t)v38;
            int32x4_t v270 = (int32x4_t)v38;
            int16x8_t v272 = v38;
            int32x4_t v274 = (int32x4_t)v38;
            uint64_t v186 = 2;
          }
          else if (v86[3])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v184, v185, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v186 = 0;
            int32x4_t v268 = 0uLL;
            int32x4_t v270 = 0uLL;
            int16x8_t v272 = 0uLL;
            int32x4_t v274 = 0uLL;
          }
          uint64_t v190 = v184 + v186;
          unsigned int v191 = v86[4];
          if (v191 == 63)
          {
            int32x4_t v193 = *(int32x4_t *)(v190 + 16);
            int32x4_t v36 = *(int32x4_t *)(v190 + 32);
            int32x4_t v194 = *(int32x4_t *)(v190 + 48);
            int32x4_t v195 = vuzp2q_s32(*(int32x4_t *)v190, v36);
            int32x4_t v275 = vuzp1q_s32(*(int32x4_t *)v190, v36);
            int32x4_t v277 = v195;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v193, v194);
            int32x4_t v37 = vuzp2q_s32(v193, v194);
            int16x8_t v279 = v38;
            int32x4_t v281 = v37;
            uint64_t v192 = 64;
          }
          else if (v191 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v190);
            int32x4_t v275 = (int32x4_t)v38;
            int32x4_t v277 = (int32x4_t)v38;
            int16x8_t v279 = v38;
            int32x4_t v281 = (int32x4_t)v38;
            uint64_t v192 = 2;
          }
          else if (v86[4])
          {
            uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v190, v191, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v192 = 0;
            int32x4_t v275 = 0uLL;
            int32x4_t v277 = 0uLL;
            int16x8_t v279 = 0uLL;
            int32x4_t v281 = 0uLL;
          }
          uint64_t v196 = v190 + v192;
          unsigned int v197 = v86[5];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v36 = *(int32x4_t *)(v196 + 32);
            int32x4_t v200 = *(int32x4_t *)(v196 + 48);
            int32x4_t v201 = vuzp2q_s32(*(int32x4_t *)v196, v36);
            int32x4_t v283 = vuzp1q_s32(*(int32x4_t *)v196, v36);
            int32x4_t v285 = v201;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v199, v200);
            int32x4_t v37 = vuzp2q_s32(v199, v200);
            int16x8_t v287 = v38;
            int32x4_t v289 = v37;
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v283 = (int32x4_t)v38;
            int32x4_t v285 = (int32x4_t)v38;
            int16x8_t v287 = v38;
            int32x4_t v289 = (int32x4_t)v38;
            uint64_t v198 = 2;
          }
          else if (v86[5])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, v196, v197, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v283 = 0uLL;
            int32x4_t v285 = 0uLL;
            int16x8_t v287 = 0uLL;
            int32x4_t v289 = 0uLL;
          }
          uint64_t v202 = v196 + v198;
          unsigned int v203 = v86[6];
          if (v203 == 63)
          {
            int32x4_t v205 = *(int32x4_t *)(v202 + 16);
            int32x4_t v36 = *(int32x4_t *)(v202 + 32);
            int32x4_t v206 = *(int32x4_t *)(v202 + 48);
            int32x4_t v207 = vuzp2q_s32(*(int32x4_t *)v202, v36);
            int32x4_t v276 = vuzp1q_s32(*(int32x4_t *)v202, v36);
            int32x4_t v278 = v207;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v205, v206);
            int32x4_t v37 = vuzp2q_s32(v205, v206);
            int16x8_t v280 = v38;
            int32x4_t v282 = v37;
            uint64_t v204 = 64;
          }
          else if (v203 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v202);
            int32x4_t v276 = (int32x4_t)v38;
            int32x4_t v278 = (int32x4_t)v38;
            int16x8_t v280 = v38;
            int32x4_t v282 = (int32x4_t)v38;
            uint64_t v204 = 2;
          }
          else if (v86[6])
          {
            uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v202, v203, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v204 = 0;
            int32x4_t v276 = 0uLL;
            int32x4_t v278 = 0uLL;
            int16x8_t v280 = 0uLL;
            int32x4_t v282 = 0uLL;
          }
          uint64_t v208 = v202 + v204;
          unsigned int v209 = v86[7];
          if (v209 == 63)
          {
            int32x4_t v210 = *(int32x4_t *)(v208 + 16);
            int32x4_t v36 = *(int32x4_t *)(v208 + 32);
            int32x4_t v211 = *(int32x4_t *)(v208 + 48);
            int32x4_t v212 = vuzp2q_s32(*(int32x4_t *)v208, v36);
            int32x4_t v284 = vuzp1q_s32(*(int32x4_t *)v208, v36);
            int32x4_t v286 = v212;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v210, v211);
            int32x4_t v37 = vuzp2q_s32(v210, v211);
            int16x8_t v288 = v38;
            int32x4_t v290 = v37;
            unsigned int v44 = a7;
            uint64_t v17 = v245;
          }
          else
          {
            unsigned int v44 = a7;
            uint64_t v17 = v245;
            if (v209 == 1)
            {
              int16x8_t v38 = vld1q_dup_s16((const __int16 *)v208);
              int32x4_t v284 = (int32x4_t)v38;
              int32x4_t v286 = (int32x4_t)v38;
              int16x8_t v288 = v38;
              int32x4_t v290 = (int32x4_t)v38;
            }
            else if (v209)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, v208, v209, *(int8x8_t *)v38.i8, *(double *)v37.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              int32x4_t v284 = 0uLL;
              int32x4_t v286 = 0uLL;
              int16x8_t v288 = 0uLL;
              int32x4_t v290 = 0uLL;
            }
          }
          unint64_t v213 = v254;
          unsigned int v45 = v41 + 1;
          if (v254)
          {
            unint64_t v214 = 0;
            int64x2_t v215 = &v259.i8[32 * v252 + 2 * v253];
            unsigned int v216 = v255;
            do
            {
              if (v216)
              {
                uint64_t v217 = 0;
                int64x2_t v218 = &v250->i8[v251 * v214];
                do
                {
                  v218[v217] = v215[v217];
                  ++v217;
                  unsigned int v216 = v255;
                }
                while (2 * (unint64_t)v255 > v217);
                unint64_t v213 = v254;
              }
              ++v214;
              v215 += 32;
            }
            while (v214 < v213);
          }
LABEL_48:
          BOOL v22 = v41 == v236 >> 4;
          unsigned int v41 = v45;
        }
        while (!v22);
        BOOL v22 = v21++ == v223;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v285 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v238 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v217 = a8 + a10 - 1;
  unsigned int v219 = v217 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v232 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v219)
  {
    unsigned int v230 = a7 + a9 - 1;
    unsigned int v216 = a7 >> 4;
    if (a7 >> 4 <= v230 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v213 = a5 - 1;
      unsigned int v241 = (a5 - 1) >> 4;
      int v240 = ((a5 - 1) & 0xF) + 1;
      int v214 = ((a6 - 1) & 0xF) + 1;
      unsigned int v215 = (a6 - 1) >> 4;
      uint64_t v222 = 8 * a11;
      uint64_t v223 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL)));
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v27.i8))));
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v228 = v29.i32[0] | v29.i32[1];
      BOOL v226 = v29.i32[1] != 0;
      uint64_t v227 = v29.i64[0];
      BOOL v225 = v29.i32[0] != 0;
      unint64_t v212 = 8 * v19 * (unint64_t)v18;
      unsigned int v229 = a7;
      uint64_t v239 = v16;
      uint64_t v220 = 3 * a11;
      uint64_t v221 = 2 * a11;
      do
      {
        unsigned int v30 = (16 * v17) | 0xF;
        if (16 * v17 <= v238) {
          int v31 = v238;
        }
        else {
          int v31 = 16 * v17;
        }
        unsigned int v32 = v216;
        if (v217 < v30) {
          unsigned int v30 = v217;
        }
        unsigned int v237 = 16 * v17;
        int v224 = v31 - 16 * v17;
        int v236 = v30 - v31 + 1;
        int v33 = v214;
        if (v17 != v215) {
          int v33 = 16;
        }
        unsigned int v242 = v33;
        uint64_t v235 = a2 + (v31 - v238) * v25;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v230 < v35) {
            unsigned int v35 = v230;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v241) {
            unsigned int v38 = v240;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v237 >= v238 && v34 >= a7)
          {
            int v40 = v240;
            if (v32 != v241) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v236 != v242;
          }
          if (isLevelTiled)
          {
            unsigned int v198 = 0;
            uint64_t v199 = v212 >> (*(unsigned char *)(v16 + 57) != 0);
            char v200 = 1;
            if (v199 > 127)
            {
              if (v199 > 511)
              {
                if (v199 == 512)
                {
                  unsigned int v198 = 16;
                  char v201 = 1;
                  unsigned int v202 = 16;
                }
                else
                {
                  char v201 = 1;
                  unsigned int v202 = 0;
                  if (v199 == 1024)
                  {
                    unsigned int v202 = 8;
                    unsigned int v198 = 16;
                  }
                }
              }
              else if (v199 == 128)
              {
                char v200 = 0;
                char v201 = 0;
                unsigned int v198 = 32;
                unsigned int v202 = 32;
              }
              else
              {
                char v201 = 1;
                unsigned int v202 = 0;
                if (v199 == 256)
                {
                  char v200 = 0;
                  unsigned int v202 = 16;
                  unsigned int v198 = 32;
                }
              }
            }
            else
            {
              char v201 = 1;
              unsigned int v202 = 0;
              switch(v199)
              {
                case 4:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v202 = 128;
                  unsigned int v198 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v198 = 128;
                  unsigned int v202 = 128;
                  break;
                case 16:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v202 = 64;
                  unsigned int v198 = 128;
                  break;
                case 32:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v198 = 64;
                  unsigned int v202 = 64;
                  break;
                default:
                  if (v199 == 64)
                  {
                    char v200 = 0;
                    char v201 = 0;
                    unsigned int v202 = 32;
                    unsigned int v198 = 64;
                  }
                  break;
              }
            }
            unsigned int v203 = (v198 >> 4) - 1;
            if (v200)
            {
              unsigned int v204 = 0;
              if (v201) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v205 = 32 - __clz(~(-1 << -(char)__clz(((v202 + 15) >> 4) - 1)));
              if (v205 | v204) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v207 = 0;
            }
            else
            {
              unsigned int v204 = 32 - __clz(~(-1 << -(char)__clz(v203)));
              if ((v201 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v205 = 0;
              if (!v204) {
                goto LABEL_242;
              }
LABEL_231:
              int v206 = 0;
              uint64_t v207 = 0;
              int v208 = v32 & v203;
              BOOL v209 = v204 != 0;
              BOOL v210 = v205 != 0;
              int v211 = 1;
              do
              {
                --v204;
                if (v209) {
                  v207 |= (unint64_t)(v211 & v208) << v206++;
                }
                else {
                  unsigned int v204 = 0;
                }
                --v205;
                if (v210) {
                  v207 |= (unint64_t)(v211 & v17 & ((v202 >> 4) - 1)) << v206++;
                }
                else {
                  unsigned int v205 = 0;
                }
                v211 *= 2;
                --v206;
                BOOL v210 = v205 != 0;
                BOOL v209 = v204 != 0;
              }
              while (v205 | v204);
            }
            unint64_t v49 = ((unint64_t)(v34 / v198 + v237 / v202 * ((v198 + v213) / v198)) << 14) + (v207 << 9);
            goto LABEL_59;
          }
          if (v228)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v226;
            BOOL v46 = v225;
            int v47 = HIDWORD(v227);
            int v48 = v227;
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v32) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(a3 + v49);
          if (v232)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int32x4_t *)__dst;
          }
          BOOL v64 = (unsigned __int8 *)(a4 + 8 * v57);
          BOOL v65 = (int32x4_t *)(v235 + 2 * (v36 - a7));
          char v66 = v38 < 0x10 || v39;
          if ((v66 & 1) != 0 || v242 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v239;
            block[5] = v63;
            char v250 = v38;
            char v251 = v242;
            int v246 = v224;
            unsigned int v247 = v36 - v34;
            block[6] = v64;
            unsigned int v244 = v65;
            uint64_t v25 = a11;
            uint64_t v245 = a11;
            unsigned int v248 = v236;
            unsigned int v249 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v239 + 8) + 7384), block);
              a7 = v229;
              uint64_t v16 = v239;
              unsigned int v73 = v32 + 1;
            }
            else
            {
              unsigned int v74 = *v64;
              a7 = v229;
              if (v74 == 63)
              {
                int32x4_t v148 = v63[1];
                int32x4_t v27 = v63[2];
                int32x4_t v149 = v63[3];
                int32x4_t v150 = vuzp2q_s32(*v63, v27);
                int32x4_t v253 = vuzp1q_s32(*v63, v27);
                int32x4_t v255 = v150;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v148, v149);
                int32x4_t v28 = vuzp2q_s32(v148, v149);
                int16x8_t v257 = v29;
                int32x4_t v259 = v28;
                uint64_t v75 = 64;
              }
              else if (v74 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16(v63->i16);
                int32x4_t v253 = (int32x4_t)v29;
                int32x4_t v255 = (int32x4_t)v29;
                int16x8_t v257 = v29;
                int32x4_t v259 = (int32x4_t)v29;
                uint64_t v75 = 2;
              }
              else if (*v64)
              {
                uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 32, (uint64_t)v63, v74, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v75 = 0;
                int32x4_t v253 = 0uLL;
                int32x4_t v255 = 0uLL;
                int16x8_t v257 = 0uLL;
                int32x4_t v259 = 0uLL;
              }
              uint64_t v151 = (uint64_t)v63->i64 + v75;
              unsigned int v152 = v64[1];
              if (v152 == 63)
              {
                int32x4_t v154 = *(int32x4_t *)(v151 + 16);
                int32x4_t v27 = *(int32x4_t *)(v151 + 32);
                int32x4_t v155 = *(int32x4_t *)(v151 + 48);
                int32x4_t v156 = vuzp2q_s32(*(int32x4_t *)v151, v27);
                int32x4_t v261 = vuzp1q_s32(*(int32x4_t *)v151, v27);
                int32x4_t v263 = v156;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v154, v155);
                int32x4_t v28 = vuzp2q_s32(v154, v155);
                int16x8_t v265 = v29;
                int32x4_t v267 = v28;
                uint64_t v153 = 64;
              }
              else if (v152 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v151);
                int32x4_t v261 = (int32x4_t)v29;
                int32x4_t v263 = (int32x4_t)v29;
                int16x8_t v265 = v29;
                int32x4_t v267 = (int32x4_t)v29;
                uint64_t v153 = 2;
              }
              else if (v64[1])
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 32, v151, v152, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v153 = 0;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
                int16x8_t v265 = 0uLL;
                int32x4_t v267 = 0uLL;
              }
              uint64_t v157 = v151 + v153;
              unsigned int v158 = v64[2];
              if (v158 == 63)
              {
                int32x4_t v160 = *(int32x4_t *)(v157 + 16);
                int32x4_t v27 = *(int32x4_t *)(v157 + 32);
                int32x4_t v161 = *(int32x4_t *)(v157 + 48);
                int32x4_t v162 = vuzp2q_s32(*(int32x4_t *)v157, v27);
                int32x4_t v254 = vuzp1q_s32(*(int32x4_t *)v157, v27);
                int32x4_t v256 = v162;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v160, v161);
                int32x4_t v28 = vuzp2q_s32(v160, v161);
                int16x8_t v258 = v29;
                int32x4_t v260 = v28;
                uint64_t v159 = 64;
              }
              else if (v158 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v157);
                int32x4_t v254 = (int32x4_t)v29;
                int32x4_t v256 = (int32x4_t)v29;
                int16x8_t v258 = v29;
                int32x4_t v260 = (int32x4_t)v29;
                uint64_t v159 = 2;
              }
              else if (v64[2])
              {
                uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 32, v157, v158, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v159 = 0;
                int32x4_t v254 = 0uLL;
                int32x4_t v256 = 0uLL;
                int16x8_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
              }
              uint64_t v163 = v157 + v159;
              unsigned int v164 = v64[3];
              if (v164 == 63)
              {
                int32x4_t v166 = *(int32x4_t *)(v163 + 16);
                int32x4_t v27 = *(int32x4_t *)(v163 + 32);
                int32x4_t v167 = *(int32x4_t *)(v163 + 48);
                int32x4_t v168 = vuzp2q_s32(*(int32x4_t *)v163, v27);
                int32x4_t v262 = vuzp1q_s32(*(int32x4_t *)v163, v27);
                int32x4_t v264 = v168;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v166, v167);
                int32x4_t v28 = vuzp2q_s32(v166, v167);
                int16x8_t v266 = v29;
                int32x4_t v268 = v28;
                uint64_t v165 = 64;
              }
              else if (v164 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v163);
                int32x4_t v262 = (int32x4_t)v29;
                int32x4_t v264 = (int32x4_t)v29;
                int16x8_t v266 = v29;
                int32x4_t v268 = (int32x4_t)v29;
                uint64_t v165 = 2;
              }
              else if (v64[3])
              {
                uint64_t v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 32, v163, v164, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v165 = 0;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int16x8_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
              }
              uint64_t v169 = v163 + v165;
              unsigned int v170 = v64[4];
              if (v170 == 63)
              {
                int32x4_t v172 = *(int32x4_t *)(v169 + 16);
                int32x4_t v27 = *(int32x4_t *)(v169 + 32);
                int32x4_t v173 = *(int32x4_t *)(v169 + 48);
                int32x4_t v174 = vuzp2q_s32(*(int32x4_t *)v169, v27);
                int32x4_t v269 = vuzp1q_s32(*(int32x4_t *)v169, v27);
                int32x4_t v271 = v174;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v172, v173);
                int32x4_t v28 = vuzp2q_s32(v172, v173);
                int16x8_t v273 = v29;
                int32x4_t v275 = v28;
                uint64_t v171 = 64;
              }
              else if (v170 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v169);
                int32x4_t v269 = (int32x4_t)v29;
                int32x4_t v271 = (int32x4_t)v29;
                int16x8_t v273 = v29;
                int32x4_t v275 = (int32x4_t)v29;
                uint64_t v171 = 2;
              }
              else if (v64[4])
              {
                uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, v169, v170, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v171 = 0;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
                int16x8_t v273 = 0uLL;
                int32x4_t v275 = 0uLL;
              }
              uint64_t v175 = v169 + v171;
              unsigned int v176 = v64[5];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v27 = *(int32x4_t *)(v175 + 32);
                int32x4_t v179 = *(int32x4_t *)(v175 + 48);
                int32x4_t v180 = vuzp2q_s32(*(int32x4_t *)v175, v27);
                int32x4_t v277 = vuzp1q_s32(*(int32x4_t *)v175, v27);
                int32x4_t v279 = v180;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v178, v179);
                int32x4_t v28 = vuzp2q_s32(v178, v179);
                int16x8_t v281 = v29;
                int32x4_t v283 = v28;
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v277 = (int32x4_t)v29;
                int32x4_t v279 = (int32x4_t)v29;
                int16x8_t v281 = v29;
                int32x4_t v283 = (int32x4_t)v29;
                uint64_t v177 = 2;
              }
              else if (v64[5])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 32, v175, v176, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
                int16x8_t v281 = 0uLL;
                int32x4_t v283 = 0uLL;
              }
              uint64_t v181 = v175 + v177;
              unsigned int v182 = v64[6];
              if (v182 == 63)
              {
                int32x4_t v184 = *(int32x4_t *)(v181 + 16);
                int32x4_t v27 = *(int32x4_t *)(v181 + 32);
                int32x4_t v185 = *(int32x4_t *)(v181 + 48);
                int32x4_t v186 = vuzp2q_s32(*(int32x4_t *)v181, v27);
                int32x4_t v270 = vuzp1q_s32(*(int32x4_t *)v181, v27);
                int32x4_t v272 = v186;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v184, v185);
                int32x4_t v28 = vuzp2q_s32(v184, v185);
                int16x8_t v274 = v29;
                int32x4_t v276 = v28;
                uint64_t v183 = 64;
              }
              else if (v182 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v181);
                int32x4_t v270 = (int32x4_t)v29;
                int32x4_t v272 = (int32x4_t)v29;
                int16x8_t v274 = v29;
                int32x4_t v276 = (int32x4_t)v29;
                uint64_t v183 = 2;
              }
              else if (v64[6])
              {
                uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 32, v181, v182, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v183 = 0;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
                int16x8_t v274 = 0uLL;
                int32x4_t v276 = 0uLL;
              }
              uint64_t v187 = v181 + v183;
              unsigned int v188 = v64[7];
              if (v188 == 63)
              {
                int32x4_t v189 = *(int32x4_t *)(v187 + 16);
                int32x4_t v27 = *(int32x4_t *)(v187 + 32);
                int32x4_t v190 = *(int32x4_t *)(v187 + 48);
                int32x4_t v191 = vuzp2q_s32(*(int32x4_t *)v187, v27);
                int32x4_t v278 = vuzp1q_s32(*(int32x4_t *)v187, v27);
                int32x4_t v280 = v191;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v189, v190);
                int32x4_t v28 = vuzp2q_s32(v189, v190);
                int16x8_t v282 = v29;
                int32x4_t v284 = v28;
                uint64_t v16 = v239;
                unsigned int v73 = v32 + 1;
              }
              else
              {
                uint64_t v16 = v239;
                unsigned int v73 = v32 + 1;
                if (v188 == 1)
                {
                  int16x8_t v29 = vld1q_dup_s16((const __int16 *)v187);
                  int32x4_t v278 = (int32x4_t)v29;
                  int32x4_t v280 = (int32x4_t)v29;
                  int16x8_t v282 = v29;
                  int32x4_t v284 = (int32x4_t)v29;
                }
                else if (v188)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 32, v187, v188, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
                }
                else
                {
                  int32x4_t v278 = 0uLL;
                  int32x4_t v280 = 0uLL;
                  int16x8_t v282 = 0uLL;
                  int32x4_t v284 = 0uLL;
                }
              }
              unint64_t v192 = v248;
              if (v248)
              {
                unint64_t v193 = 0;
                int32x4_t v194 = &v253.i8[32 * v246 + 2 * v247];
                unsigned int v195 = v249;
                do
                {
                  if (v195)
                  {
                    uint64_t v196 = 0;
                    unsigned int v197 = &v244->i8[v245 * v193];
                    do
                    {
                      v197[v196] = v194[v196];
                      ++v196;
                      unsigned int v195 = v249;
                    }
                    while (2 * (unint64_t)v249 > v196);
                    unint64_t v192 = v248;
                  }
                  ++v193;
                  v194 += 32;
                }
                while (v193 < v192);
              }
            }
          }
          else
          {
            unsigned int v67 = *v64;
            if (v67 == 63)
            {
              int32x4_t v76 = *v63;
              int32x4_t v28 = v63[1];
              int32x4_t v27 = v63[2];
              int32x4_t v77 = v63[3];
              *BOOL v65 = vuzp1q_s32(*v63, v27);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v65 + a11) = vuzp2q_s32(v76, v27);
              uint64_t v68 = 2 * a11;
              BOOL v78 = (int32x4_t *)((char *)v65 + v221);
              *BOOL v78 = vuzp1q_s32(v28, v77);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v77);
              *(int16x8_t *)((char *)v78 + a11) = v29;
              uint64_t v69 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v68 = 2 * a11;
              if (v67 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16(v63->i16);
                *BOOL v65 = (int32x4_t)v29;
                *(int16x8_t *)((char *)v65 + a11) = v29;
                *(int16x8_t *)((char *)v65 + 2 * a11) = v29;
                *(int16x8_t *)((char *)v65 + 3 * a11) = v29;
                uint64_t v69 = 2;
              }
              else if (*v64)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v65, a11, (uint64_t)v63, v67, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v69 = 0;
                v65->i64[0] = 0;
                v65->i64[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v65->i64 + a11);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v65->i64 + v221);
                void *v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v65->i64 + v220);
                void *v72 = 0;
                v72[1] = 0;
              }
            }
            uint64_t v79 = (uint64_t)v63->i64 + v69;
            BOOL v80 = (int32x4_t *)((char *)v65 + v223);
            unsigned int v81 = v64[1];
            if (v81 == 63)
            {
              int32x4_t v86 = *(int32x4_t *)v79;
              int32x4_t v28 = *(int32x4_t *)(v79 + 16);
              int32x4_t v27 = *(int32x4_t *)(v79 + 32);
              int32x4_t v87 = *(int32x4_t *)(v79 + 48);
              *BOOL v80 = vuzp1q_s32(*(int32x4_t *)v79, v27);
              *(int32x4_t *)((char *)v80 + v25) = vuzp2q_s32(v86, v27);
              char v88 = (int32x4_t *)((char *)v80 + v68);
              int32x4_t *v88 = vuzp1q_s32(v28, v87);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v87);
              *(int16x8_t *)((char *)v88 + v25) = v29;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v79);
              *BOOL v80 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v80 + v25) = v29;
              *(int16x8_t *)((char *)v80 + v68) = v29;
              *(int16x8_t *)((char *)v80 + 3 * a11) = v29;
              uint64_t v82 = 2;
            }
            else if (v64[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v65 + v223), v25, v79, v81, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v82 = 0;
              v80->i64[0] = 0;
              v80->i64[1] = 0;
              uint64_t v83 = (uint64_t *)((char *)v80->i64 + v25);
              *uint64_t v83 = 0;
              v83[1] = 0;
              int v84 = (uint64_t *)((char *)v80->i64 + v68);
              void *v84 = 0;
              v84[1] = 0;
              BOOL v85 = (uint64_t *)((char *)v80->i64 + v220);
              void *v85 = 0;
              v85[1] = 0;
            }
            uint64_t v89 = v79 + v82;
            uint64_t v90 = v65 + 1;
            unsigned int v91 = v64[2];
            if (v91 == 63)
            {
              int32x4_t v96 = *(int32x4_t *)v89;
              int32x4_t v28 = *(int32x4_t *)(v89 + 16);
              int32x4_t v27 = *(int32x4_t *)(v89 + 32);
              int32x4_t v97 = *(int32x4_t *)(v89 + 48);
              int32x4_t *v90 = vuzp1q_s32(*(int32x4_t *)v89, v27);
              *(int32x4_t *)((char *)v90 + v25) = vuzp2q_s32(v96, v27);
              int32x4_t v98 = (int32x4_t *)((char *)v90 + v68);
              *int32x4_t v98 = vuzp1q_s32(v28, v97);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v97);
              *(int16x8_t *)((char *)v98 + v25) = v29;
              uint64_t v92 = 64;
            }
            else if (v91 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v89);
              int32x4_t *v90 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v90 + v25) = v29;
              *(int16x8_t *)((char *)v90 + v68) = v29;
              *(int16x8_t *)((char *)v90 + 3 * a11) = v29;
              uint64_t v92 = 2;
            }
            else if (v64[2])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v90, v25, v89, v91, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v92 = 0;
              v90->i64[0] = 0;
              v65[1].i64[1] = 0;
              int8x8_t v93 = (uint64_t *)((char *)v90->i64 + v25);
              *int8x8_t v93 = 0;
              v93[1] = 0;
              uint64_t v94 = (uint64_t *)((char *)v90->i64 + v68);
              *uint64_t v94 = 0;
              v94[1] = 0;
              unsigned int v95 = (uint64_t *)((char *)v90->i64 + v220);
              *unsigned int v95 = 0;
              v95[1] = 0;
            }
            uint64_t v99 = v89 + v92;
            uint64_t v100 = v80 + 1;
            unsigned int v101 = v64[3];
            if (v101 == 63)
            {
              int32x4_t v106 = *(int32x4_t *)v99;
              int32x4_t v28 = *(int32x4_t *)(v99 + 16);
              int32x4_t v27 = *(int32x4_t *)(v99 + 32);
              int32x4_t v107 = *(int32x4_t *)(v99 + 48);
              int32x4_t *v100 = vuzp1q_s32(*(int32x4_t *)v99, v27);
              *(int32x4_t *)((char *)v100 + v25) = vuzp2q_s32(v106, v27);
              int32x4_t v108 = (int32x4_t *)((char *)v100 + v68);
              int32x4_t *v108 = vuzp1q_s32(v28, v107);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v107);
              *(int16x8_t *)((char *)v108 + v25) = v29;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v99);
              int32x4_t *v100 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v100 + v25) = v29;
              *(int16x8_t *)((char *)v100 + v68) = v29;
              *(int16x8_t *)((char *)v100 + 3 * a11) = v29;
              uint64_t v102 = 2;
            }
            else if (v64[3])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v100, v25, v99, v101, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v102 = 0;
              v100->i64[0] = 0;
              v80[1].i64[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v100->i64 + v25);
              *uint64_t v103 = 0;
              v103[1] = 0;
              uint64_t v104 = (uint64_t *)((char *)v100->i64 + v68);
              *uint64_t v104 = 0;
              v104[1] = 0;
              int8x8_t v105 = (uint64_t *)((char *)v100->i64 + v220);
              *int8x8_t v105 = 0;
              v105[1] = 0;
            }
            uint64_t v109 = v99 + v102;
            uint64_t v110 = (int32x4_t *)((char *)v65 + v222);
            unsigned int v111 = v64[4];
            if (v111 == 63)
            {
              int32x4_t v116 = *(int32x4_t *)v109;
              int32x4_t v28 = *(int32x4_t *)(v109 + 16);
              int32x4_t v27 = *(int32x4_t *)(v109 + 32);
              int32x4_t v117 = *(int32x4_t *)(v109 + 48);
              *uint64_t v110 = vuzp1q_s32(*(int32x4_t *)v109, v27);
              *(int32x4_t *)((char *)v110 + v25) = vuzp2q_s32(v116, v27);
              int32x4_t v118 = (int32x4_t *)((char *)v110 + v68);
              *int32x4_t v118 = vuzp1q_s32(v28, v117);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v117);
              *(int16x8_t *)((char *)v118 + v25) = v29;
              uint64_t v112 = 64;
            }
            else if (v111 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v109);
              *uint64_t v110 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v110 + v25) = v29;
              *(int16x8_t *)((char *)v110 + v68) = v29;
              *(int16x8_t *)((char *)v110 + 3 * a11) = v29;
              uint64_t v112 = 2;
            }
            else if (v64[4])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v65 + v222), v25, v109, v111, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v112 = 0;
              v110->i64[0] = 0;
              v110->i64[1] = 0;
              uint64_t v113 = (uint64_t *)((char *)v110->i64 + v25);
              void *v113 = 0;
              v113[1] = 0;
              uint64_t v114 = (uint64_t *)((char *)v110->i64 + v68);
              *uint64_t v114 = 0;
              v114[1] = 0;
              int8x8_t v115 = (uint64_t *)((char *)v110->i64 + v220);
              *int8x8_t v115 = 0;
              v115[1] = 0;
            }
            uint64_t v119 = v109 + v112;
            uint64_t v120 = (int32x4_t *)((char *)v65 + 12 * a11);
            unsigned int v121 = v64[5];
            if (v121 == 63)
            {
              int32x4_t v126 = *(int32x4_t *)v119;
              int32x4_t v28 = *(int32x4_t *)(v119 + 16);
              int32x4_t v27 = *(int32x4_t *)(v119 + 32);
              int32x4_t v127 = *(int32x4_t *)(v119 + 48);
              *uint64_t v120 = vuzp1q_s32(*(int32x4_t *)v119, v27);
              *(int32x4_t *)((char *)v120 + v25) = vuzp2q_s32(v126, v27);
              int32x4_t v128 = (int32x4_t *)((char *)v120 + v68);
              *int32x4_t v128 = vuzp1q_s32(v28, v127);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v127);
              *(int16x8_t *)((char *)v128 + v25) = v29;
              uint64_t v122 = 64;
            }
            else if (v121 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v119);
              *uint64_t v120 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v120 + v25) = v29;
              *(int16x8_t *)((char *)v120 + v68) = v29;
              *(int16x8_t *)((char *)v120 + 3 * a11) = v29;
              uint64_t v122 = 2;
            }
            else if (v64[5])
            {
              uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v120, v25, v119, v121, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v122 = 0;
              v120->i64[0] = 0;
              v120->i64[1] = 0;
              uint64_t v123 = (uint64_t *)((char *)v120->i64 + v25);
              void *v123 = 0;
              v123[1] = 0;
              int v124 = (uint64_t *)((char *)v120->i64 + v68);
              void *v124 = 0;
              v124[1] = 0;
              unint64_t v125 = (uint64_t *)((char *)v120->i64 + v220);
              *unint64_t v125 = 0;
              v125[1] = 0;
            }
            uint64_t v129 = v119 + v122;
            uint64_t v130 = v110 + 1;
            unsigned int v131 = v64[6];
            if (v131 == 63)
            {
              int32x4_t v136 = *(int32x4_t *)v129;
              int32x4_t v28 = *(int32x4_t *)(v129 + 16);
              int32x4_t v27 = *(int32x4_t *)(v129 + 32);
              int32x4_t v137 = *(int32x4_t *)(v129 + 48);
              int32x4_t *v130 = vuzp1q_s32(*(int32x4_t *)v129, v27);
              *(int32x4_t *)((char *)v130 + v25) = vuzp2q_s32(v136, v27);
              int32x4_t v138 = (int32x4_t *)((char *)v130 + v68);
              *int32x4_t v138 = vuzp1q_s32(v28, v137);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v137);
              *(int16x8_t *)((char *)v138 + v25) = v29;
              uint64_t v132 = 64;
              unsigned int v73 = v32 + 1;
            }
            else
            {
              unsigned int v73 = v32 + 1;
              if (v131 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v129);
                int32x4_t *v130 = (int32x4_t)v29;
                *(int16x8_t *)((char *)v130 + v25) = v29;
                *(int16x8_t *)((char *)v130 + v68) = v29;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v29;
                uint64_t v132 = 2;
              }
              else if (v64[6])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                uint64_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                void *v133 = 0;
                v133[1] = 0;
                uint64_t v134 = (uint64_t *)((char *)v130->i64 + v68);
                void *v134 = 0;
                v134[1] = 0;
                int v135 = (uint64_t *)((char *)v130->i64 + v220);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v139 = v129 + v132;
            uint64_t v140 = v120 + 1;
            unsigned int v141 = v64[7];
            if (v141 == 63)
            {
              int32x4_t v145 = *(int32x4_t *)v139;
              int32x4_t v28 = *(int32x4_t *)(v139 + 16);
              int32x4_t v27 = *(int32x4_t *)(v139 + 32);
              int32x4_t v146 = *(int32x4_t *)(v139 + 48);
              *uint64_t v140 = vuzp1q_s32(*(int32x4_t *)v139, v27);
              *(int32x4_t *)((char *)v140 + v25) = vuzp2q_s32(v145, v27);
              int32x4_t v147 = (int32x4_t *)((char *)v140 + v68);
              *int32x4_t v147 = vuzp1q_s32(v28, v146);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v146);
              *(int16x8_t *)((char *)v147 + v25) = v29;
              a7 = v229;
              uint64_t v16 = v239;
            }
            else
            {
              a7 = v229;
              uint64_t v16 = v239;
              if (v141 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v139);
                *uint64_t v140 = (int32x4_t)v29;
                *(int16x8_t *)((char *)v140 + v25) = v29;
                *(int16x8_t *)((char *)v140 + v68) = v29;
                *(int16x8_t *)((char *)v140 + 3 * a11) = v29;
              }
              else if (v141)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v140, v25, v139, v141, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v140->i64[0] = 0;
                v140->i64[1] = 0;
                unsigned int v142 = (uint64_t *)((char *)v140->i64 + v25);
                *unsigned int v142 = 0;
                v142[1] = 0;
                uint64_t v143 = (uint64_t *)((char *)v140->i64 + v68);
                *uint64_t v143 = 0;
                v143[1] = 0;
                uint64_t v144 = (uint64_t *)((char *)v140->i64 + v220);
                void *v144 = 0;
                v144[1] = 0;
              }
            }
          }
          BOOL v21 = v32 == v230 >> 4;
          unsigned int v32 = v73;
        }
        while (!v21);
        BOOL v21 = v17++ == v219;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v285 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v238 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v217 = a8 + a10 - 1;
  unsigned int v219 = v217 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v232 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v219)
  {
    unsigned int v230 = a7 + a9 - 1;
    unsigned int v216 = a7 >> 4;
    if (a7 >> 4 <= v230 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v213 = a5 - 1;
      unsigned int v241 = (a5 - 1) >> 4;
      int v240 = ((a5 - 1) & 0xF) + 1;
      int v214 = ((a6 - 1) & 0xF) + 1;
      unsigned int v215 = (a6 - 1) >> 4;
      uint64_t v222 = 8 * a11;
      uint64_t v223 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL)));
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v27.i8))));
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v228 = v29.i32[0] | v29.i32[1];
      BOOL v226 = v29.i32[1] != 0;
      uint64_t v227 = v29.i64[0];
      BOOL v225 = v29.i32[0] != 0;
      unint64_t v212 = 8 * v19 * (unint64_t)v18;
      unsigned int v229 = a7;
      uint64_t v239 = v16;
      uint64_t v220 = 3 * a11;
      uint64_t v221 = 2 * a11;
      do
      {
        unsigned int v30 = (16 * v17) | 0xF;
        if (16 * v17 <= v238) {
          int v31 = v238;
        }
        else {
          int v31 = 16 * v17;
        }
        unsigned int v32 = v216;
        if (v217 < v30) {
          unsigned int v30 = v217;
        }
        unsigned int v237 = 16 * v17;
        int v224 = v31 - 16 * v17;
        int v236 = v30 - v31 + 1;
        int v33 = v214;
        if (v17 != v215) {
          int v33 = 16;
        }
        unsigned int v242 = v33;
        uint64_t v235 = a2 + (v31 - v238) * v25;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v230 < v35) {
            unsigned int v35 = v230;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v241) {
            unsigned int v38 = v240;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v237 >= v238 && v34 >= a7)
          {
            int v40 = v240;
            if (v32 != v241) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v236 != v242;
          }
          if (isLevelTiled)
          {
            unsigned int v198 = 0;
            uint64_t v199 = v212 >> (*(unsigned char *)(v16 + 57) != 0);
            char v200 = 1;
            if (v199 > 127)
            {
              if (v199 > 511)
              {
                if (v199 == 512)
                {
                  unsigned int v198 = 16;
                  char v201 = 1;
                  unsigned int v202 = 16;
                }
                else
                {
                  char v201 = 1;
                  unsigned int v202 = 0;
                  if (v199 == 1024)
                  {
                    unsigned int v202 = 8;
                    unsigned int v198 = 16;
                  }
                }
              }
              else if (v199 == 128)
              {
                char v200 = 0;
                char v201 = 0;
                unsigned int v198 = 32;
                unsigned int v202 = 32;
              }
              else
              {
                char v201 = 1;
                unsigned int v202 = 0;
                if (v199 == 256)
                {
                  char v200 = 0;
                  unsigned int v202 = 16;
                  unsigned int v198 = 32;
                }
              }
            }
            else
            {
              char v201 = 1;
              unsigned int v202 = 0;
              switch(v199)
              {
                case 4:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v202 = 128;
                  unsigned int v198 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v198 = 128;
                  unsigned int v202 = 128;
                  break;
                case 16:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v202 = 64;
                  unsigned int v198 = 128;
                  break;
                case 32:
                  char v200 = 0;
                  char v201 = 0;
                  unsigned int v198 = 64;
                  unsigned int v202 = 64;
                  break;
                default:
                  if (v199 == 64)
                  {
                    char v200 = 0;
                    char v201 = 0;
                    unsigned int v202 = 32;
                    unsigned int v198 = 64;
                  }
                  break;
              }
            }
            unsigned int v203 = (v198 >> 4) - 1;
            if (v200)
            {
              unsigned int v204 = 0;
              if (v201) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v205 = 32 - __clz(~(-1 << -(char)__clz(((v202 + 15) >> 4) - 1)));
              if (v205 | v204) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v207 = 0;
            }
            else
            {
              unsigned int v204 = 32 - __clz(~(-1 << -(char)__clz(v203)));
              if ((v201 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v205 = 0;
              if (!v204) {
                goto LABEL_242;
              }
LABEL_231:
              int v206 = 0;
              uint64_t v207 = 0;
              int v208 = v32 & v203;
              BOOL v209 = v204 != 0;
              BOOL v210 = v205 != 0;
              int v211 = 1;
              do
              {
                --v204;
                if (v209) {
                  v207 |= (unint64_t)(v211 & v208) << v206++;
                }
                else {
                  unsigned int v204 = 0;
                }
                --v205;
                if (v210) {
                  v207 |= (unint64_t)(v211 & v17 & ((v202 >> 4) - 1)) << v206++;
                }
                else {
                  unsigned int v205 = 0;
                }
                v211 *= 2;
                --v206;
                BOOL v210 = v205 != 0;
                BOOL v209 = v204 != 0;
              }
              while (v205 | v204);
            }
            unint64_t v49 = ((unint64_t)(v34 / v198 + v237 / v202 * ((v198 + v213) / v198)) << 14) + (v207 << 9);
            goto LABEL_59;
          }
          if (v228)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v226;
            BOOL v46 = v225;
            int v47 = HIDWORD(v227);
            int v48 = v227;
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v32) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(a3 + v49);
          if (v232)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int32x4_t *)__dst;
          }
          BOOL v64 = (unsigned __int8 *)(a4 + 8 * v57);
          BOOL v65 = (int32x4_t *)(v235 + 2 * (v36 - a7));
          char v66 = v38 < 0x10 || v39;
          if ((v66 & 1) != 0 || v242 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v239;
            block[5] = v63;
            char v250 = v38;
            char v251 = v242;
            int v246 = v224;
            unsigned int v247 = v36 - v34;
            block[6] = v64;
            unsigned int v244 = v65;
            uint64_t v25 = a11;
            uint64_t v245 = a11;
            unsigned int v248 = v236;
            unsigned int v249 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v239 + 8) + 7384), block);
              a7 = v229;
              uint64_t v16 = v239;
              unsigned int v73 = v32 + 1;
            }
            else
            {
              unsigned int v74 = *v64;
              a7 = v229;
              if (v74 == 63)
              {
                int32x4_t v148 = v63[1];
                int32x4_t v27 = v63[2];
                int32x4_t v149 = v63[3];
                int32x4_t v150 = vuzp2q_s32(*v63, v27);
                int32x4_t v253 = vuzp1q_s32(*v63, v27);
                int32x4_t v255 = v150;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v148, v149);
                int32x4_t v28 = vuzp2q_s32(v148, v149);
                int16x8_t v257 = v29;
                int32x4_t v259 = v28;
                uint64_t v75 = 64;
              }
              else if (v74 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16(v63->i16);
                int32x4_t v253 = (int32x4_t)v29;
                int32x4_t v255 = (int32x4_t)v29;
                int16x8_t v257 = v29;
                int32x4_t v259 = (int32x4_t)v29;
                uint64_t v75 = 2;
              }
              else if (*v64)
              {
                uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v253, 32, (uint64_t)v63, v74, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v75 = 0;
                int32x4_t v253 = 0uLL;
                int32x4_t v255 = 0uLL;
                int16x8_t v257 = 0uLL;
                int32x4_t v259 = 0uLL;
              }
              uint64_t v151 = (uint64_t)v63->i64 + v75;
              unsigned int v152 = v64[1];
              if (v152 == 63)
              {
                int32x4_t v154 = *(int32x4_t *)(v151 + 16);
                int32x4_t v27 = *(int32x4_t *)(v151 + 32);
                int32x4_t v155 = *(int32x4_t *)(v151 + 48);
                int32x4_t v156 = vuzp2q_s32(*(int32x4_t *)v151, v27);
                int32x4_t v261 = vuzp1q_s32(*(int32x4_t *)v151, v27);
                int32x4_t v263 = v156;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v154, v155);
                int32x4_t v28 = vuzp2q_s32(v154, v155);
                int16x8_t v265 = v29;
                int32x4_t v267 = v28;
                uint64_t v153 = 64;
              }
              else if (v152 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v151);
                int32x4_t v261 = (int32x4_t)v29;
                int32x4_t v263 = (int32x4_t)v29;
                int16x8_t v265 = v29;
                int32x4_t v267 = (int32x4_t)v29;
                uint64_t v153 = 2;
              }
              else if (v64[1])
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 32, v151, v152, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v153 = 0;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
                int16x8_t v265 = 0uLL;
                int32x4_t v267 = 0uLL;
              }
              uint64_t v157 = v151 + v153;
              unsigned int v158 = v64[2];
              if (v158 == 63)
              {
                int32x4_t v160 = *(int32x4_t *)(v157 + 16);
                int32x4_t v27 = *(int32x4_t *)(v157 + 32);
                int32x4_t v161 = *(int32x4_t *)(v157 + 48);
                int32x4_t v162 = vuzp2q_s32(*(int32x4_t *)v157, v27);
                int32x4_t v254 = vuzp1q_s32(*(int32x4_t *)v157, v27);
                int32x4_t v256 = v162;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v160, v161);
                int32x4_t v28 = vuzp2q_s32(v160, v161);
                int16x8_t v258 = v29;
                int32x4_t v260 = v28;
                uint64_t v159 = 64;
              }
              else if (v158 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v157);
                int32x4_t v254 = (int32x4_t)v29;
                int32x4_t v256 = (int32x4_t)v29;
                int16x8_t v258 = v29;
                int32x4_t v260 = (int32x4_t)v29;
                uint64_t v159 = 2;
              }
              else if (v64[2])
              {
                uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 32, v157, v158, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v159 = 0;
                int32x4_t v254 = 0uLL;
                int32x4_t v256 = 0uLL;
                int16x8_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
              }
              uint64_t v163 = v157 + v159;
              unsigned int v164 = v64[3];
              if (v164 == 63)
              {
                int32x4_t v166 = *(int32x4_t *)(v163 + 16);
                int32x4_t v27 = *(int32x4_t *)(v163 + 32);
                int32x4_t v167 = *(int32x4_t *)(v163 + 48);
                int32x4_t v168 = vuzp2q_s32(*(int32x4_t *)v163, v27);
                int32x4_t v262 = vuzp1q_s32(*(int32x4_t *)v163, v27);
                int32x4_t v264 = v168;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v166, v167);
                int32x4_t v28 = vuzp2q_s32(v166, v167);
                int16x8_t v266 = v29;
                int32x4_t v268 = v28;
                uint64_t v165 = 64;
              }
              else if (v164 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v163);
                int32x4_t v262 = (int32x4_t)v29;
                int32x4_t v264 = (int32x4_t)v29;
                int16x8_t v266 = v29;
                int32x4_t v268 = (int32x4_t)v29;
                uint64_t v165 = 2;
              }
              else if (v64[3])
              {
                uint64_t v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 32, v163, v164, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v165 = 0;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
                int16x8_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
              }
              uint64_t v169 = v163 + v165;
              unsigned int v170 = v64[4];
              if (v170 == 63)
              {
                int32x4_t v172 = *(int32x4_t *)(v169 + 16);
                int32x4_t v27 = *(int32x4_t *)(v169 + 32);
                int32x4_t v173 = *(int32x4_t *)(v169 + 48);
                int32x4_t v174 = vuzp2q_s32(*(int32x4_t *)v169, v27);
                int32x4_t v269 = vuzp1q_s32(*(int32x4_t *)v169, v27);
                int32x4_t v271 = v174;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v172, v173);
                int32x4_t v28 = vuzp2q_s32(v172, v173);
                int16x8_t v273 = v29;
                int32x4_t v275 = v28;
                uint64_t v171 = 64;
              }
              else if (v170 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v169);
                int32x4_t v269 = (int32x4_t)v29;
                int32x4_t v271 = (int32x4_t)v29;
                int16x8_t v273 = v29;
                int32x4_t v275 = (int32x4_t)v29;
                uint64_t v171 = 2;
              }
              else if (v64[4])
              {
                uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, v169, v170, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v171 = 0;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
                int16x8_t v273 = 0uLL;
                int32x4_t v275 = 0uLL;
              }
              uint64_t v175 = v169 + v171;
              unsigned int v176 = v64[5];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v27 = *(int32x4_t *)(v175 + 32);
                int32x4_t v179 = *(int32x4_t *)(v175 + 48);
                int32x4_t v180 = vuzp2q_s32(*(int32x4_t *)v175, v27);
                int32x4_t v277 = vuzp1q_s32(*(int32x4_t *)v175, v27);
                int32x4_t v279 = v180;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v178, v179);
                int32x4_t v28 = vuzp2q_s32(v178, v179);
                int16x8_t v281 = v29;
                int32x4_t v283 = v28;
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v277 = (int32x4_t)v29;
                int32x4_t v279 = (int32x4_t)v29;
                int16x8_t v281 = v29;
                int32x4_t v283 = (int32x4_t)v29;
                uint64_t v177 = 2;
              }
              else if (v64[5])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 32, v175, v176, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
                int16x8_t v281 = 0uLL;
                int32x4_t v283 = 0uLL;
              }
              uint64_t v181 = v175 + v177;
              unsigned int v182 = v64[6];
              if (v182 == 63)
              {
                int32x4_t v184 = *(int32x4_t *)(v181 + 16);
                int32x4_t v27 = *(int32x4_t *)(v181 + 32);
                int32x4_t v185 = *(int32x4_t *)(v181 + 48);
                int32x4_t v186 = vuzp2q_s32(*(int32x4_t *)v181, v27);
                int32x4_t v270 = vuzp1q_s32(*(int32x4_t *)v181, v27);
                int32x4_t v272 = v186;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v184, v185);
                int32x4_t v28 = vuzp2q_s32(v184, v185);
                int16x8_t v274 = v29;
                int32x4_t v276 = v28;
                uint64_t v183 = 64;
              }
              else if (v182 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v181);
                int32x4_t v270 = (int32x4_t)v29;
                int32x4_t v272 = (int32x4_t)v29;
                int16x8_t v274 = v29;
                int32x4_t v276 = (int32x4_t)v29;
                uint64_t v183 = 2;
              }
              else if (v64[6])
              {
                uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 32, v181, v182, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v183 = 0;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
                int16x8_t v274 = 0uLL;
                int32x4_t v276 = 0uLL;
              }
              uint64_t v187 = v181 + v183;
              unsigned int v188 = v64[7];
              if (v188 == 63)
              {
                int32x4_t v189 = *(int32x4_t *)(v187 + 16);
                int32x4_t v27 = *(int32x4_t *)(v187 + 32);
                int32x4_t v190 = *(int32x4_t *)(v187 + 48);
                int32x4_t v191 = vuzp2q_s32(*(int32x4_t *)v187, v27);
                int32x4_t v278 = vuzp1q_s32(*(int32x4_t *)v187, v27);
                int32x4_t v280 = v191;
                int16x8_t v29 = (int16x8_t)vuzp1q_s32(v189, v190);
                int32x4_t v28 = vuzp2q_s32(v189, v190);
                int16x8_t v282 = v29;
                int32x4_t v284 = v28;
                uint64_t v16 = v239;
                unsigned int v73 = v32 + 1;
              }
              else
              {
                uint64_t v16 = v239;
                unsigned int v73 = v32 + 1;
                if (v188 == 1)
                {
                  int16x8_t v29 = vld1q_dup_s16((const __int16 *)v187);
                  int32x4_t v278 = (int32x4_t)v29;
                  int32x4_t v280 = (int32x4_t)v29;
                  int16x8_t v282 = v29;
                  int32x4_t v284 = (int32x4_t)v29;
                }
                else if (v188)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 32, v187, v188, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
                }
                else
                {
                  int32x4_t v278 = 0uLL;
                  int32x4_t v280 = 0uLL;
                  int16x8_t v282 = 0uLL;
                  int32x4_t v284 = 0uLL;
                }
              }
              unint64_t v192 = v248;
              if (v248)
              {
                unint64_t v193 = 0;
                int32x4_t v194 = &v253.i8[32 * v246 + 2 * v247];
                unsigned int v195 = v249;
                do
                {
                  if (v195)
                  {
                    uint64_t v196 = 0;
                    unsigned int v197 = &v244->i8[v245 * v193];
                    do
                    {
                      v197[v196] = v194[v196];
                      ++v196;
                      unsigned int v195 = v249;
                    }
                    while (2 * (unint64_t)v249 > v196);
                    unint64_t v192 = v248;
                  }
                  ++v193;
                  v194 += 32;
                }
                while (v193 < v192);
              }
            }
          }
          else
          {
            unsigned int v67 = *v64;
            if (v67 == 63)
            {
              int32x4_t v76 = *v63;
              int32x4_t v28 = v63[1];
              int32x4_t v27 = v63[2];
              int32x4_t v77 = v63[3];
              *BOOL v65 = vuzp1q_s32(*v63, v27);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v65 + a11) = vuzp2q_s32(v76, v27);
              uint64_t v68 = 2 * a11;
              BOOL v78 = (int32x4_t *)((char *)v65 + v221);
              *BOOL v78 = vuzp1q_s32(v28, v77);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v77);
              *(int16x8_t *)((char *)v78 + a11) = v29;
              uint64_t v69 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v68 = 2 * a11;
              if (v67 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16(v63->i16);
                *BOOL v65 = (int32x4_t)v29;
                *(int16x8_t *)((char *)v65 + a11) = v29;
                *(int16x8_t *)((char *)v65 + 2 * a11) = v29;
                *(int16x8_t *)((char *)v65 + 3 * a11) = v29;
                uint64_t v69 = 2;
              }
              else if (*v64)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v65, a11, (uint64_t)v63, v67, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v69 = 0;
                v65->i64[0] = 0;
                v65->i64[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v65->i64 + a11);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v65->i64 + v221);
                void *v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v65->i64 + v220);
                void *v72 = 0;
                v72[1] = 0;
              }
            }
            uint64_t v79 = (uint64_t)v63->i64 + v69;
            BOOL v80 = (int32x4_t *)((char *)v65 + v223);
            unsigned int v81 = v64[1];
            if (v81 == 63)
            {
              int32x4_t v86 = *(int32x4_t *)v79;
              int32x4_t v28 = *(int32x4_t *)(v79 + 16);
              int32x4_t v27 = *(int32x4_t *)(v79 + 32);
              int32x4_t v87 = *(int32x4_t *)(v79 + 48);
              *BOOL v80 = vuzp1q_s32(*(int32x4_t *)v79, v27);
              *(int32x4_t *)((char *)v80 + v25) = vuzp2q_s32(v86, v27);
              char v88 = (int32x4_t *)((char *)v80 + v68);
              int32x4_t *v88 = vuzp1q_s32(v28, v87);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v87);
              *(int16x8_t *)((char *)v88 + v25) = v29;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v79);
              *BOOL v80 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v80 + v25) = v29;
              *(int16x8_t *)((char *)v80 + v68) = v29;
              *(int16x8_t *)((char *)v80 + 3 * a11) = v29;
              uint64_t v82 = 2;
            }
            else if (v64[1])
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v65 + v223), v25, v79, v81, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v82 = 0;
              v80->i64[0] = 0;
              v80->i64[1] = 0;
              uint64_t v83 = (uint64_t *)((char *)v80->i64 + v25);
              *uint64_t v83 = 0;
              v83[1] = 0;
              int v84 = (uint64_t *)((char *)v80->i64 + v68);
              void *v84 = 0;
              v84[1] = 0;
              BOOL v85 = (uint64_t *)((char *)v80->i64 + v220);
              void *v85 = 0;
              v85[1] = 0;
            }
            uint64_t v89 = v79 + v82;
            uint64_t v90 = v65 + 1;
            unsigned int v91 = v64[2];
            if (v91 == 63)
            {
              int32x4_t v96 = *(int32x4_t *)v89;
              int32x4_t v28 = *(int32x4_t *)(v89 + 16);
              int32x4_t v27 = *(int32x4_t *)(v89 + 32);
              int32x4_t v97 = *(int32x4_t *)(v89 + 48);
              int32x4_t *v90 = vuzp1q_s32(*(int32x4_t *)v89, v27);
              *(int32x4_t *)((char *)v90 + v25) = vuzp2q_s32(v96, v27);
              int32x4_t v98 = (int32x4_t *)((char *)v90 + v68);
              *int32x4_t v98 = vuzp1q_s32(v28, v97);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v97);
              *(int16x8_t *)((char *)v98 + v25) = v29;
              uint64_t v92 = 64;
            }
            else if (v91 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v89);
              int32x4_t *v90 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v90 + v25) = v29;
              *(int16x8_t *)((char *)v90 + v68) = v29;
              *(int16x8_t *)((char *)v90 + 3 * a11) = v29;
              uint64_t v92 = 2;
            }
            else if (v64[2])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v90, v25, v89, v91, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v92 = 0;
              v90->i64[0] = 0;
              v65[1].i64[1] = 0;
              int8x8_t v93 = (uint64_t *)((char *)v90->i64 + v25);
              *int8x8_t v93 = 0;
              v93[1] = 0;
              uint64_t v94 = (uint64_t *)((char *)v90->i64 + v68);
              *uint64_t v94 = 0;
              v94[1] = 0;
              unsigned int v95 = (uint64_t *)((char *)v90->i64 + v220);
              *unsigned int v95 = 0;
              v95[1] = 0;
            }
            uint64_t v99 = v89 + v92;
            uint64_t v100 = v80 + 1;
            unsigned int v101 = v64[3];
            if (v101 == 63)
            {
              int32x4_t v106 = *(int32x4_t *)v99;
              int32x4_t v28 = *(int32x4_t *)(v99 + 16);
              int32x4_t v27 = *(int32x4_t *)(v99 + 32);
              int32x4_t v107 = *(int32x4_t *)(v99 + 48);
              int32x4_t *v100 = vuzp1q_s32(*(int32x4_t *)v99, v27);
              *(int32x4_t *)((char *)v100 + v25) = vuzp2q_s32(v106, v27);
              int32x4_t v108 = (int32x4_t *)((char *)v100 + v68);
              int32x4_t *v108 = vuzp1q_s32(v28, v107);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v107);
              *(int16x8_t *)((char *)v108 + v25) = v29;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v99);
              int32x4_t *v100 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v100 + v25) = v29;
              *(int16x8_t *)((char *)v100 + v68) = v29;
              *(int16x8_t *)((char *)v100 + 3 * a11) = v29;
              uint64_t v102 = 2;
            }
            else if (v64[3])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v100, v25, v99, v101, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v102 = 0;
              v100->i64[0] = 0;
              v80[1].i64[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v100->i64 + v25);
              *uint64_t v103 = 0;
              v103[1] = 0;
              uint64_t v104 = (uint64_t *)((char *)v100->i64 + v68);
              *uint64_t v104 = 0;
              v104[1] = 0;
              int8x8_t v105 = (uint64_t *)((char *)v100->i64 + v220);
              *int8x8_t v105 = 0;
              v105[1] = 0;
            }
            uint64_t v109 = v99 + v102;
            uint64_t v110 = (int32x4_t *)((char *)v65 + v222);
            unsigned int v111 = v64[4];
            if (v111 == 63)
            {
              int32x4_t v116 = *(int32x4_t *)v109;
              int32x4_t v28 = *(int32x4_t *)(v109 + 16);
              int32x4_t v27 = *(int32x4_t *)(v109 + 32);
              int32x4_t v117 = *(int32x4_t *)(v109 + 48);
              *uint64_t v110 = vuzp1q_s32(*(int32x4_t *)v109, v27);
              *(int32x4_t *)((char *)v110 + v25) = vuzp2q_s32(v116, v27);
              int32x4_t v118 = (int32x4_t *)((char *)v110 + v68);
              *int32x4_t v118 = vuzp1q_s32(v28, v117);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v117);
              *(int16x8_t *)((char *)v118 + v25) = v29;
              uint64_t v112 = 64;
            }
            else if (v111 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v109);
              *uint64_t v110 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v110 + v25) = v29;
              *(int16x8_t *)((char *)v110 + v68) = v29;
              *(int16x8_t *)((char *)v110 + 3 * a11) = v29;
              uint64_t v112 = 2;
            }
            else if (v64[4])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v65 + v222), v25, v109, v111, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v112 = 0;
              v110->i64[0] = 0;
              v110->i64[1] = 0;
              uint64_t v113 = (uint64_t *)((char *)v110->i64 + v25);
              void *v113 = 0;
              v113[1] = 0;
              uint64_t v114 = (uint64_t *)((char *)v110->i64 + v68);
              *uint64_t v114 = 0;
              v114[1] = 0;
              int8x8_t v115 = (uint64_t *)((char *)v110->i64 + v220);
              *int8x8_t v115 = 0;
              v115[1] = 0;
            }
            uint64_t v119 = v109 + v112;
            uint64_t v120 = (int32x4_t *)((char *)v65 + 12 * a11);
            unsigned int v121 = v64[5];
            if (v121 == 63)
            {
              int32x4_t v126 = *(int32x4_t *)v119;
              int32x4_t v28 = *(int32x4_t *)(v119 + 16);
              int32x4_t v27 = *(int32x4_t *)(v119 + 32);
              int32x4_t v127 = *(int32x4_t *)(v119 + 48);
              *uint64_t v120 = vuzp1q_s32(*(int32x4_t *)v119, v27);
              *(int32x4_t *)((char *)v120 + v25) = vuzp2q_s32(v126, v27);
              int32x4_t v128 = (int32x4_t *)((char *)v120 + v68);
              *int32x4_t v128 = vuzp1q_s32(v28, v127);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v127);
              *(int16x8_t *)((char *)v128 + v25) = v29;
              uint64_t v122 = 64;
            }
            else if (v121 == 1)
            {
              int16x8_t v29 = vld1q_dup_s16((const __int16 *)v119);
              *uint64_t v120 = (int32x4_t)v29;
              *(int16x8_t *)((char *)v120 + v25) = v29;
              *(int16x8_t *)((char *)v120 + v68) = v29;
              *(int16x8_t *)((char *)v120 + 3 * a11) = v29;
              uint64_t v122 = 2;
            }
            else if (v64[5])
            {
              uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v120, v25, v119, v121, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v122 = 0;
              v120->i64[0] = 0;
              v120->i64[1] = 0;
              uint64_t v123 = (uint64_t *)((char *)v120->i64 + v25);
              void *v123 = 0;
              v123[1] = 0;
              int v124 = (uint64_t *)((char *)v120->i64 + v68);
              void *v124 = 0;
              v124[1] = 0;
              unint64_t v125 = (uint64_t *)((char *)v120->i64 + v220);
              *unint64_t v125 = 0;
              v125[1] = 0;
            }
            uint64_t v129 = v119 + v122;
            uint64_t v130 = v110 + 1;
            unsigned int v131 = v64[6];
            if (v131 == 63)
            {
              int32x4_t v136 = *(int32x4_t *)v129;
              int32x4_t v28 = *(int32x4_t *)(v129 + 16);
              int32x4_t v27 = *(int32x4_t *)(v129 + 32);
              int32x4_t v137 = *(int32x4_t *)(v129 + 48);
              int32x4_t *v130 = vuzp1q_s32(*(int32x4_t *)v129, v27);
              *(int32x4_t *)((char *)v130 + v25) = vuzp2q_s32(v136, v27);
              int32x4_t v138 = (int32x4_t *)((char *)v130 + v68);
              *int32x4_t v138 = vuzp1q_s32(v28, v137);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v137);
              *(int16x8_t *)((char *)v138 + v25) = v29;
              uint64_t v132 = 64;
              unsigned int v73 = v32 + 1;
            }
            else
            {
              unsigned int v73 = v32 + 1;
              if (v131 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v129);
                int32x4_t *v130 = (int32x4_t)v29;
                *(int16x8_t *)((char *)v130 + v25) = v29;
                *(int16x8_t *)((char *)v130 + v68) = v29;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v29;
                uint64_t v132 = 2;
              }
              else if (v64[6])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                uint64_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                void *v133 = 0;
                v133[1] = 0;
                uint64_t v134 = (uint64_t *)((char *)v130->i64 + v68);
                void *v134 = 0;
                v134[1] = 0;
                int v135 = (uint64_t *)((char *)v130->i64 + v220);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v139 = v129 + v132;
            uint64_t v140 = v120 + 1;
            unsigned int v141 = v64[7];
            if (v141 == 63)
            {
              int32x4_t v145 = *(int32x4_t *)v139;
              int32x4_t v28 = *(int32x4_t *)(v139 + 16);
              int32x4_t v27 = *(int32x4_t *)(v139 + 32);
              int32x4_t v146 = *(int32x4_t *)(v139 + 48);
              *uint64_t v140 = vuzp1q_s32(*(int32x4_t *)v139, v27);
              *(int32x4_t *)((char *)v140 + v25) = vuzp2q_s32(v145, v27);
              int32x4_t v147 = (int32x4_t *)((char *)v140 + v68);
              *int32x4_t v147 = vuzp1q_s32(v28, v146);
              int16x8_t v29 = (int16x8_t)vuzp2q_s32(v28, v146);
              *(int16x8_t *)((char *)v147 + v25) = v29;
              a7 = v229;
              uint64_t v16 = v239;
            }
            else
            {
              a7 = v229;
              uint64_t v16 = v239;
              if (v141 == 1)
              {
                int16x8_t v29 = vld1q_dup_s16((const __int16 *)v139);
                *uint64_t v140 = (int32x4_t)v29;
                *(int16x8_t *)((char *)v140 + v25) = v29;
                *(int16x8_t *)((char *)v140 + v68) = v29;
                *(int16x8_t *)((char *)v140 + 3 * a11) = v29;
              }
              else if (v141)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v140, v25, v139, v141, *(int8x8_t *)v29.i8, *(double *)v28.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v140->i64[0] = 0;
                v140->i64[1] = 0;
                unsigned int v142 = (uint64_t *)((char *)v140->i64 + v25);
                *unsigned int v142 = 0;
                v142[1] = 0;
                uint64_t v143 = (uint64_t *)((char *)v140->i64 + v68);
                *uint64_t v143 = 0;
                v143[1] = 0;
                uint64_t v144 = (uint64_t *)((char *)v140->i64 + v220);
                void *v144 = 0;
                v144[1] = 0;
              }
            }
          }
          BOOL v21 = v32 == v230 >> 4;
          unsigned int v32 = v73;
        }
        while (!v21);
        BOOL v21 = v17++ == v219;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v503 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v500 = v20;
  uint64_t v501 = v21;
  uint64_t v483 = v22;
  uint64_t v23 = v12;
  uint64_t v648 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v504 = v14;
  unsigned int v485 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v484 = v485 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v499 = v31;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v32 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v33 = *(unsigned __int8 *)(v23 + 254);
    char v34 = __clz(v25);
    if (1 << v32 >= v17 || v19 >> v33)
    {
      if (!(v17 >> v32) && 1 << v33 < v19)
      {
        if (v17 < 2) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v33 += v32 + v37;
        unsigned int v32 = -v37;
      }
    }
    else
    {
      unsigned int v35 = 32 - __clz(~(-1 << -v34));
      unsigned int v36 = v33 + v32;
      if (v19 < 2) {
        unsigned int v35 = 0;
      }
      unsigned int v32 = v36 - v35;
      unsigned int v33 = v35;
    }
    if (v19 < 2)
    {
      if (v33) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v34)) < v33)
    {
LABEL_27:
      BOOL v498 = 0;
LABEL_32:
      unsigned int v496 = v33 - 4;
      unsigned int v489 = v32 - 4;
      int v39 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v482 = (((~v39 + v19) & v39) + ~(-1 << v33)) >> v33;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v498 = v38 >= v32;
    goto LABEL_32;
  }
  BOOL v498 = 0;
  unsigned int v482 = 0;
  unsigned int v489 = 0;
  unsigned int v496 = 0;
LABEL_33:
  if (v27 <= v484)
  {
    unsigned int v497 = v503 + a9 - 1;
    if (v503 >> 4 <= v497 >> 4)
    {
      uint64_t v40 = a11;
      unsigned int v508 = v25 >> 4;
      unsigned int v481 = v26 >> 4;
      int v507 = (v25 & 0xF) + 1;
      int v480 = (v26 & 0xF) + 1;
      int v479 = ~(-1 << v489);
      uint64_t v493 = a11;
      uint64_t v494 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v492 = v42.i32[0] | v42.i32[1];
      BOOL v487 = v42.i32[1] != 0;
      int8x8_t v488 = v42;
      BOOL v486 = v42.i32[0] != 0;
      uint64_t v506 = v23;
      uint64_t v490 = 3 * a11;
      uint64_t v491 = 2 * a11;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v504) {
          int v44 = v504;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v485 < v43) {
          unsigned int v43 = v485;
        }
        int v495 = v44 - 16 * v27;
        int v505 = v43 - v44 + 1;
        unsigned int v45 = v503 >> 4;
        int v46 = v480;
        if (v27 != v481) {
          int v46 = 16;
        }
        unsigned int v509 = v46;
        int v47 = v27 & v479;
        uint64_t v502 = v483 + (v44 - v504) * v40;
        unsigned int v48 = v503;
        do
        {
          unsigned int v50 = 16 * v45;
          unsigned int v51 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v48) {
            int v52 = v48;
          }
          else {
            int v52 = 16 * v45;
          }
          if (v497 < v51) {
            unsigned int v51 = v503 + a9 - 1;
          }
          int v53 = v51 - v52 + 1;
          if (v45 == v508) {
            unsigned int v54 = v507;
          }
          else {
            unsigned int v54 = 16;
          }
          BOOL v55 = 1;
          if (16 * v27 >= v504 && v50 >= v48)
          {
            int v56 = v507;
            if (v45 != v508) {
              int v56 = 16;
            }
            BOOL v55 = v53 != v56 || v505 != v509;
          }
          if (v498)
          {
            if (v496 | v489)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v496 != 0;
              BOOL v62 = v489 != 0;
              unsigned int v63 = v496;
              unsigned int v64 = v489;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v45 & ~(-1 << v496) & v60) << v58++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v47 & v60) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(v23 + 320) * ((v45 >> v496) + (v27 >> v489) * v482) + (v59 << 11);
          }
          else
          {
            if (v492)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v487;
              BOOL v69 = v486;
              __int32 v70 = v488.i32[1];
              __int32 v71 = v488.i32[0];
              do
              {
                --v70;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v45) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v27) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v69 = v71 != 0;
                BOOL v68 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 15;
          if (v77 < 0x20)
          {
            unsigned int v78 = 0;
            if (!v75)
            {
LABEL_115:
              unint64_t v80 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 4) - 1)));
            if (!(v78 | v75)) {
              goto LABEL_115;
            }
          }
          int v79 = 0;
          unint64_t v80 = 0;
          BOOL v81 = v75 != 0;
          BOOL v82 = v78 != 0;
          int v83 = 1;
          do
          {
            --v75;
            BOOL v84 = !v81;
            if (v81)
            {
              unint64_t v85 = ((unint64_t)(v83 & v45) << v79) | v80;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v85 = v80;
            }
            if (!v84) {
              ++v79;
            }
            --v78;
            if (v82)
            {
              unint64_t v80 = ((unint64_t)(v83 & v27) << v79) | v85;
            }
            else
            {
              unsigned int v78 = 0;
              unint64_t v80 = v85;
            }
            if (v82) {
              ++v79;
            }
            v83 *= 2;
            --v79;
            BOOL v82 = v78 != 0;
            BOOL v81 = v75 != 0;
          }
          while (v78 | v75);
LABEL_116:
          int32x4_t v86 = (float64x2_t *)(v500 + v72);
          if (v499)
          {
            memcpy(__dst, v86, sizeof(__dst));
            int32x4_t v86 = (float64x2_t *)__dst;
          }
          int32x4_t v87 = (unsigned __int8 *)(v501 + 8 * v80);
          char v88 = (float64x2_t *)(v502 + 8 * (v52 - v48));
          char v89 = v54 < 0x10 || v55;
          if ((v89 & 1) == 0 && v509 > 0xF)
          {
            unsigned int v90 = *v87;
            if (v90 == 255)
            {
              float64x2_t v104 = v86[1];
              float64x2_t v105 = v86[3];
              float64x2_t v106 = v86[9];
              float64x2_t v107 = v86[11];
              float64x2_t v108 = v86[4];
              float64x2_t v109 = v86[2];
              float64x2_t v110 = v86[12];
              float64x2_t v111 = v86[14];
              float64x2_t v112 = v86[15];
              float64x2_t v113 = v86[8];
              float64x2_t v114 = v86[10];
              float64x2_t v115 = v86[5];
              float64x2_t v116 = v86[7];
              float64x2_t v117 = v86[13];
              float64x2_t v118 = v86[6];
              uint64_t v91 = 2 * a11;
              float64x2_t *v88 = *v86;
              v88[1] = v109;
              v88[2] = v113;
              v88[3] = v114;
              uint64_t v119 = (float64x2_t *)((char *)v88 + v491);
              uint64_t v40 = a11;
              uint64_t v120 = (float64x2_t *)((char *)v88 + a11);
              *uint64_t v120 = v104;
              v120[1] = v105;
              v120[2] = v106;
              v120[3] = v107;
              *uint64_t v119 = v108;
              v119[1] = v118;
              v119[2] = v110;
              v119[3] = v111;
              unsigned int v121 = (float64x2_t *)((char *)v88 + v491 + a11);
              uint64_t v92 = 256;
              *unsigned int v121 = v115;
              v121[1] = v116;
              v121[2] = v117;
              v121[3] = v112;
            }
            else
            {
              uint64_t v40 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 7)
              {
                float64x2_t v100 = vld1q_dup_f64(v86->f64);
                float64x2_t *v88 = v100;
                v88[1] = v100;
                v88[2] = v100;
                v88[3] = v100;
                unsigned int v101 = (float64x2_t *)((char *)v88 + a11);
                float64x2_t *v101 = v100;
                v101[1] = v100;
                v101[2] = v100;
                v101[3] = v100;
                uint64_t v102 = (float64x2_t *)((char *)v88 + v491);
                float64x2_t *v102 = v100;
                v102[1] = v100;
                v102[2] = v100;
                v102[3] = v100;
                uint64_t v103 = (float64x2_t *)((char *)v88 + v490);
                *uint64_t v103 = v100;
                v103[1] = v100;
                v103[2] = v100;
                v103[3] = v100;
                uint64_t v92 = 8;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, a11, (uint64_t)v86, v90);
              }
              else
              {
                uint64_t v92 = 0;
                v88[2] = 0u;
                v88[3] = 0u;
                float64x2_t *v88 = 0u;
                v88[1] = 0u;
                int8x8_t v93 = (_OWORD *)((char *)v88->f64 + a11);
                v93[2] = 0u;
                v93[3] = 0u;
                *int8x8_t v93 = 0u;
                v93[1] = 0u;
                uint64_t v94 = (_OWORD *)((char *)v88->f64 + v491);
                v94[2] = 0u;
                v94[3] = 0u;
                *uint64_t v94 = 0u;
                v94[1] = 0u;
                unsigned int v95 = (_OWORD *)((char *)v88->f64 + v490);
                v95[2] = 0u;
                v95[3] = 0u;
                *unsigned int v95 = 0u;
                v95[1] = 0u;
              }
            }
            uint64_t v122 = (uint64_t)v86 + v92;
            uint64_t v123 = (float64x2_t *)((char *)v88 + v494);
            unsigned int v124 = v87[1];
            if (v124 == 255)
            {
              long long v133 = *(_OWORD *)(v122 + 16);
              long long v134 = *(_OWORD *)(v122 + 48);
              long long v135 = *(_OWORD *)(v122 + 144);
              long long v136 = *(_OWORD *)(v122 + 176);
              long long v137 = *(_OWORD *)(v122 + 64);
              float64x2_t v138 = *(float64x2_t *)(v122 + 32);
              long long v139 = *(_OWORD *)(v122 + 192);
              long long v140 = *(_OWORD *)(v122 + 224);
              long long v141 = *(_OWORD *)(v122 + 240);
              float64x2_t v142 = *(float64x2_t *)(v122 + 128);
              float64x2_t v143 = *(float64x2_t *)(v122 + 160);
              long long v144 = *(_OWORD *)(v122 + 80);
              long long v145 = *(_OWORD *)(v122 + 112);
              long long v146 = *(_OWORD *)(v122 + 208);
              long long v147 = *(_OWORD *)(v122 + 96);
              float64x2_t *v123 = *(float64x2_t *)v122;
              v123[1] = v138;
              v123[2] = v142;
              v123[3] = v143;
              int32x4_t v148 = (_OWORD *)((char *)v123->f64 + v91);
              int32x4_t v149 = (_OWORD *)((char *)v123->f64 + v40);
              *int32x4_t v149 = v133;
              v149[1] = v134;
              v149[2] = v135;
              v149[3] = v136;
              _OWORD *v148 = v137;
              v148[1] = v147;
              v148[2] = v139;
              v148[3] = v140;
              int32x4_t v150 = (_OWORD *)((char *)v123->f64 + v91 + v40);
              uint64_t v125 = 256;
              *int32x4_t v150 = v144;
              v150[1] = v145;
              v150[2] = v146;
              v150[3] = v141;
            }
            else if (v124 == 7)
            {
              float64x2_t v129 = vld1q_dup_f64((const double *)v122);
              float64x2_t *v123 = v129;
              v123[1] = v129;
              v123[2] = v129;
              v123[3] = v129;
              uint64_t v130 = (float64x2_t *)((char *)v123 + v40);
              float64x2_t *v130 = v129;
              v130[1] = v129;
              v130[2] = v129;
              v130[3] = v129;
              unsigned int v131 = (float64x2_t *)((char *)v123 + v91);
              float64x2_t *v131 = v129;
              v131[1] = v129;
              v131[2] = v129;
              v131[3] = v129;
              uint64_t v132 = (float64x2_t *)((char *)v123 + v490);
              *uint64_t v132 = v129;
              v132[1] = v129;
              v132[2] = v129;
              v132[3] = v129;
              uint64_t v125 = 8;
            }
            else if (v87[1])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((float64_t *)((char *)v88->f64 + v494), v40, v122, v124);
            }
            else
            {
              uint64_t v125 = 0;
              v123[2] = 0u;
              v123[3] = 0u;
              float64x2_t *v123 = 0u;
              v123[1] = 0u;
              int32x4_t v126 = (_OWORD *)((char *)v123->f64 + v40);
              v126[2] = 0u;
              v126[3] = 0u;
              _OWORD *v126 = 0u;
              v126[1] = 0u;
              int32x4_t v127 = (_OWORD *)((char *)v123->f64 + v91);
              v127[2] = 0u;
              v127[3] = 0u;
              *int32x4_t v127 = 0u;
              v127[1] = 0u;
              int32x4_t v128 = (_OWORD *)((char *)v123->f64 + v490);
              v128[2] = 0u;
              v128[3] = 0u;
              *int32x4_t v128 = 0u;
              v128[1] = 0u;
            }
            uint64_t v151 = v122 + v125;
            f64 = (_OWORD *)v88[4].f64;
            unsigned int v153 = v87[2];
            if (v153 == 255)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 48);
              long long v164 = *(_OWORD *)(v151 + 144);
              long long v165 = *(_OWORD *)(v151 + 176);
              long long v166 = *(_OWORD *)(v151 + 64);
              float64x2_t v167 = *(float64x2_t *)(v151 + 32);
              long long v168 = *(_OWORD *)(v151 + 192);
              long long v169 = *(_OWORD *)(v151 + 224);
              long long v170 = *(_OWORD *)(v151 + 240);
              float64x2_t v171 = *(float64x2_t *)(v151 + 128);
              float64x2_t v172 = *(float64x2_t *)(v151 + 160);
              long long v173 = *(_OWORD *)(v151 + 80);
              long long v174 = *(_OWORD *)(v151 + 112);
              long long v175 = *(_OWORD *)(v151 + 208);
              long long v176 = *(_OWORD *)(v151 + 96);
              _OWORD *f64 = *(_OWORD *)v151;
              v88[5] = v167;
              v88[6] = v171;
              v88[7] = v172;
              uint64_t v177 = (_OWORD *)((char *)f64 + v91);
              int32x4_t v178 = (_OWORD *)((char *)f64 + v40);
              _OWORD *v178 = v162;
              v178[1] = v163;
              v178[2] = v164;
              v178[3] = v165;
              _OWORD *v177 = v166;
              v177[1] = v176;
              v177[2] = v168;
              v177[3] = v169;
              int32x4_t v179 = (_OWORD *)((char *)f64 + v91 + v40);
              uint64_t v154 = 256;
              _OWORD *v179 = v173;
              v179[1] = v174;
              v179[2] = v175;
              v179[3] = v170;
            }
            else if (v153 == 7)
            {
              float64x2_t v158 = vld1q_dup_f64((const double *)v151);
              v88[4] = v158;
              v88[5] = v158;
              v88[6] = v158;
              v88[7] = v158;
              uint64_t v159 = (float64x2_t *)((char *)f64 + v40);
              *uint64_t v159 = v158;
              v159[1] = v158;
              v159[2] = v158;
              v159[3] = v158;
              int32x4_t v160 = (float64x2_t *)((char *)f64 + v91);
              *int32x4_t v160 = v158;
              v160[1] = v158;
              v160[2] = v158;
              v160[3] = v158;
              int32x4_t v161 = (float64x2_t *)((char *)f64 + v490);
              *int32x4_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 8;
              v161[2] = v158;
              v161[3] = v158;
            }
            else if (v87[2])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(f64, v40, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              v88[6] = 0u;
              v88[7] = 0u;
              _OWORD *f64 = 0u;
              v88[5] = 0u;
              int32x4_t v155 = (_OWORD *)((char *)f64 + v40);
              v155[2] = 0u;
              v155[3] = 0u;
              _OWORD *v155 = 0u;
              v155[1] = 0u;
              int32x4_t v156 = (_OWORD *)((char *)f64 + v91);
              v156[2] = 0u;
              v156[3] = 0u;
              _OWORD *v156 = 0u;
              v156[1] = 0u;
              uint64_t v157 = (_OWORD *)((char *)f64 + v490);
              v157[2] = 0u;
              v157[3] = 0u;
              _OWORD *v157 = 0u;
              v157[1] = 0u;
            }
            uint64_t v180 = v151 + v154;
            uint64_t v181 = (_OWORD *)v123[4].f64;
            unsigned int v182 = v87[3];
            if (v182 == 255)
            {
              long long v191 = *(_OWORD *)(v180 + 16);
              long long v192 = *(_OWORD *)(v180 + 48);
              long long v193 = *(_OWORD *)(v180 + 144);
              long long v194 = *(_OWORD *)(v180 + 176);
              long long v195 = *(_OWORD *)(v180 + 64);
              float64x2_t v196 = *(float64x2_t *)(v180 + 32);
              long long v197 = *(_OWORD *)(v180 + 192);
              long long v198 = *(_OWORD *)(v180 + 224);
              long long v199 = *(_OWORD *)(v180 + 240);
              float64x2_t v200 = *(float64x2_t *)(v180 + 128);
              float64x2_t v201 = *(float64x2_t *)(v180 + 160);
              long long v202 = *(_OWORD *)(v180 + 80);
              long long v203 = *(_OWORD *)(v180 + 112);
              long long v204 = *(_OWORD *)(v180 + 208);
              long long v205 = *(_OWORD *)(v180 + 96);
              *uint64_t v181 = *(_OWORD *)v180;
              v123[5] = v196;
              v123[6] = v200;
              v123[7] = v201;
              int v206 = (_OWORD *)((char *)v181 + v91);
              uint64_t v207 = (_OWORD *)((char *)v181 + v40);
              *uint64_t v207 = v191;
              v207[1] = v192;
              v207[2] = v193;
              v207[3] = v194;
              *int v206 = v195;
              v206[1] = v205;
              v206[2] = v197;
              v206[3] = v198;
              int v208 = (_OWORD *)((char *)v181 + v91 + v40);
              uint64_t v183 = 256;
              *int v208 = v202;
              v208[1] = v203;
              v208[2] = v204;
              v208[3] = v199;
            }
            else if (v182 == 7)
            {
              float64x2_t v187 = vld1q_dup_f64((const double *)v180);
              v123[4] = v187;
              v123[5] = v187;
              v123[6] = v187;
              v123[7] = v187;
              unsigned int v188 = (float64x2_t *)((char *)v181 + v40);
              float64x2_t *v188 = v187;
              v188[1] = v187;
              v188[2] = v187;
              v188[3] = v187;
              int32x4_t v189 = (float64x2_t *)((char *)v181 + v91);
              float64x2_t *v189 = v187;
              v189[1] = v187;
              v189[2] = v187;
              v189[3] = v187;
              int32x4_t v190 = (float64x2_t *)((char *)v181 + v490);
              float64x2_t *v190 = v187;
              v190[1] = v187;
              uint64_t v183 = 8;
              v190[2] = v187;
              v190[3] = v187;
            }
            else if (v87[3])
            {
              uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v181, v40, v180, v182);
            }
            else
            {
              uint64_t v183 = 0;
              v123[6] = 0u;
              v123[7] = 0u;
              *uint64_t v181 = 0u;
              v123[5] = 0u;
              int32x4_t v184 = (_OWORD *)((char *)v181 + v40);
              v184[2] = 0u;
              v184[3] = 0u;
              *int32x4_t v184 = 0u;
              v184[1] = 0u;
              int32x4_t v185 = (_OWORD *)((char *)v181 + v91);
              v185[2] = 0u;
              v185[3] = 0u;
              *int32x4_t v185 = 0u;
              v185[1] = 0u;
              int32x4_t v186 = (_OWORD *)((char *)v181 + v490);
              v186[2] = 0u;
              v186[3] = 0u;
              *int32x4_t v186 = 0u;
              v186[1] = 0u;
            }
            uint64_t v209 = v180 + v183;
            BOOL v210 = (float64x2_t *)((char *)v88 + v493 * 8);
            unsigned int v211 = v87[4];
            if (v211 == 255)
            {
              long long v220 = *(_OWORD *)(v209 + 16);
              long long v221 = *(_OWORD *)(v209 + 48);
              long long v222 = *(_OWORD *)(v209 + 144);
              long long v223 = *(_OWORD *)(v209 + 176);
              long long v224 = *(_OWORD *)(v209 + 64);
              float64x2_t v225 = *(float64x2_t *)(v209 + 32);
              long long v226 = *(_OWORD *)(v209 + 192);
              long long v227 = *(_OWORD *)(v209 + 224);
              long long v228 = *(_OWORD *)(v209 + 240);
              float64x2_t v229 = *(float64x2_t *)(v209 + 128);
              float64x2_t v230 = *(float64x2_t *)(v209 + 160);
              long long v231 = *(_OWORD *)(v209 + 80);
              long long v232 = *(_OWORD *)(v209 + 112);
              long long v233 = *(_OWORD *)(v209 + 208);
              long long v234 = *(_OWORD *)(v209 + 96);
              float64x2_t *v210 = *(float64x2_t *)v209;
              v210[1] = v225;
              v210[2] = v229;
              v210[3] = v230;
              uint64_t v235 = (_OWORD *)((char *)v210->f64 + v91);
              int v236 = (_OWORD *)((char *)v210->f64 + v40);
              *int v236 = v220;
              v236[1] = v221;
              v236[2] = v222;
              v236[3] = v223;
              _OWORD *v235 = v224;
              v235[1] = v234;
              v235[2] = v226;
              v235[3] = v227;
              unsigned int v237 = (_OWORD *)((char *)v210->f64 + v91 + v40);
              uint64_t v212 = 256;
              *unsigned int v237 = v231;
              v237[1] = v232;
              v237[2] = v233;
              v237[3] = v228;
            }
            else if (v211 == 7)
            {
              float64x2_t v216 = vld1q_dup_f64((const double *)v209);
              float64x2_t *v210 = v216;
              v210[1] = v216;
              v210[2] = v216;
              v210[3] = v216;
              unsigned int v217 = (float64x2_t *)((char *)v210 + v40);
              float64x2_t *v217 = v216;
              v217[1] = v216;
              v217[2] = v216;
              v217[3] = v216;
              int64x2_t v218 = (float64x2_t *)((char *)v210 + v91);
              float64x2_t *v218 = v216;
              v218[1] = v216;
              v218[2] = v216;
              v218[3] = v216;
              unsigned int v219 = (float64x2_t *)((char *)v210 + v490);
              float64x2_t *v219 = v216;
              v219[1] = v216;
              v219[2] = v216;
              v219[3] = v216;
              uint64_t v212 = 8;
            }
            else if (v87[4])
            {
              uint64_t v212 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v88->f64[v493], v40, v209, v211);
            }
            else
            {
              uint64_t v212 = 0;
              v210[2] = 0u;
              v210[3] = 0u;
              float64x2_t *v210 = 0u;
              v210[1] = 0u;
              unsigned int v213 = (_OWORD *)((char *)v210->f64 + v40);
              v213[2] = 0u;
              v213[3] = 0u;
              *unsigned int v213 = 0u;
              v213[1] = 0u;
              int v214 = (_OWORD *)((char *)v210->f64 + v91);
              v214[2] = 0u;
              v214[3] = 0u;
              _OWORD *v214 = 0u;
              v214[1] = 0u;
              unsigned int v215 = (_OWORD *)((char *)v210->f64 + v490);
              v215[2] = 0u;
              v215[3] = 0u;
              *unsigned int v215 = 0u;
              v215[1] = 0u;
            }
            uint64_t v238 = v209 + v212;
            uint64_t v239 = (float64x2_t *)((char *)v88 + 12 * a11);
            unsigned int v240 = v87[5];
            if (v240 == 255)
            {
              long long v249 = *(_OWORD *)(v238 + 16);
              long long v250 = *(_OWORD *)(v238 + 48);
              long long v251 = *(_OWORD *)(v238 + 144);
              long long v252 = *(_OWORD *)(v238 + 176);
              long long v253 = *(_OWORD *)(v238 + 64);
              float64x2_t v254 = *(float64x2_t *)(v238 + 32);
              long long v255 = *(_OWORD *)(v238 + 192);
              long long v256 = *(_OWORD *)(v238 + 224);
              long long v257 = *(_OWORD *)(v238 + 240);
              float64x2_t v258 = *(float64x2_t *)(v238 + 128);
              float64x2_t v259 = *(float64x2_t *)(v238 + 160);
              long long v260 = *(_OWORD *)(v238 + 80);
              long long v261 = *(_OWORD *)(v238 + 112);
              long long v262 = *(_OWORD *)(v238 + 208);
              long long v263 = *(_OWORD *)(v238 + 96);
              float64x2_t *v239 = *(float64x2_t *)v238;
              v239[1] = v254;
              v239[2] = v258;
              v239[3] = v259;
              int32x4_t v264 = (_OWORD *)((char *)v239->f64 + v91);
              int16x8_t v265 = (_OWORD *)((char *)v239->f64 + v40);
              *int16x8_t v265 = v249;
              v265[1] = v250;
              v265[2] = v251;
              v265[3] = v252;
              *int32x4_t v264 = v253;
              v264[1] = v263;
              v264[2] = v255;
              v264[3] = v256;
              int16x8_t v266 = (_OWORD *)((char *)v239->f64 + v91 + v40);
              uint64_t v241 = 256;
              *int16x8_t v266 = v260;
              v266[1] = v261;
              v266[2] = v262;
              v266[3] = v257;
            }
            else if (v240 == 7)
            {
              float64x2_t v245 = vld1q_dup_f64((const double *)v238);
              float64x2_t *v239 = v245;
              v239[1] = v245;
              v239[2] = v245;
              v239[3] = v245;
              int v246 = (float64x2_t *)((char *)v239 + v40);
              *int v246 = v245;
              v246[1] = v245;
              v246[2] = v245;
              v246[3] = v245;
              unsigned int v247 = (float64x2_t *)((char *)v239 + v91);
              *unsigned int v247 = v245;
              v247[1] = v245;
              v247[2] = v245;
              v247[3] = v245;
              unsigned int v248 = (float64x2_t *)((char *)v239 + v490);
              *unsigned int v248 = v245;
              v248[1] = v245;
              v248[2] = v245;
              v248[3] = v245;
              uint64_t v241 = 8;
            }
            else if (v87[5])
            {
              uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v239, v40, v238, v240);
            }
            else
            {
              uint64_t v241 = 0;
              v239[2] = 0u;
              v239[3] = 0u;
              float64x2_t *v239 = 0u;
              v239[1] = 0u;
              unsigned int v242 = (_OWORD *)((char *)v239->f64 + v40);
              v242[2] = 0u;
              v242[3] = 0u;
              *unsigned int v242 = 0u;
              v242[1] = 0u;
              int64x2_t v243 = (_OWORD *)((char *)v239->f64 + v91);
              v243[2] = 0u;
              v243[3] = 0u;
              *int64x2_t v243 = 0u;
              v243[1] = 0u;
              unsigned int v244 = (_OWORD *)((char *)v239->f64 + v490);
              v244[2] = 0u;
              v244[3] = 0u;
              *unsigned int v244 = 0u;
              v244[1] = 0u;
            }
            uint64_t v267 = v238 + v241;
            int32x4_t v268 = (_OWORD *)v210[4].f64;
            unsigned int v269 = v87[6];
            if (v269 == 255)
            {
              long long v278 = *(_OWORD *)(v267 + 16);
              long long v279 = *(_OWORD *)(v267 + 48);
              long long v280 = *(_OWORD *)(v267 + 144);
              long long v281 = *(_OWORD *)(v267 + 176);
              long long v282 = *(_OWORD *)(v267 + 64);
              float64x2_t v283 = *(float64x2_t *)(v267 + 32);
              long long v284 = *(_OWORD *)(v267 + 192);
              long long v285 = *(_OWORD *)(v267 + 224);
              long long v286 = *(_OWORD *)(v267 + 240);
              float64x2_t v287 = *(float64x2_t *)(v267 + 128);
              float64x2_t v288 = *(float64x2_t *)(v267 + 160);
              long long v289 = *(_OWORD *)(v267 + 80);
              long long v290 = *(_OWORD *)(v267 + 112);
              long long v291 = *(_OWORD *)(v267 + 208);
              long long v292 = *(_OWORD *)(v267 + 96);
              *int32x4_t v268 = *(_OWORD *)v267;
              v210[5] = v283;
              v210[6] = v287;
              v210[7] = v288;
              int64x2_t v293 = (_OWORD *)((char *)v268 + v91);
              int64x2_t v294 = (_OWORD *)((char *)v268 + v40);
              *int64x2_t v294 = v278;
              v294[1] = v279;
              v294[2] = v280;
              v294[3] = v281;
              *int64x2_t v293 = v282;
              v293[1] = v292;
              v293[2] = v284;
              v293[3] = v285;
              int64x2_t v295 = (_OWORD *)((char *)v268 + v91 + v40);
              uint64_t v270 = 256;
              *int64x2_t v295 = v289;
              v295[1] = v290;
              v295[2] = v291;
              v295[3] = v286;
            }
            else if (v269 == 7)
            {
              float64x2_t v274 = vld1q_dup_f64((const double *)v267);
              v210[4] = v274;
              v210[5] = v274;
              v210[6] = v274;
              v210[7] = v274;
              int32x4_t v275 = (float64x2_t *)((char *)v268 + v40);
              *int32x4_t v275 = v274;
              v275[1] = v274;
              v275[2] = v274;
              v275[3] = v274;
              int32x4_t v276 = (float64x2_t *)((char *)v268 + v91);
              *int32x4_t v276 = v274;
              v276[1] = v274;
              v276[2] = v274;
              v276[3] = v274;
              int32x4_t v277 = (float64x2_t *)((char *)v268 + v490);
              *int32x4_t v277 = v274;
              v277[1] = v274;
              uint64_t v270 = 8;
              v277[2] = v274;
              v277[3] = v274;
            }
            else if (v87[6])
            {
              uint64_t v270 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v268, v40, v267, v269);
            }
            else
            {
              uint64_t v270 = 0;
              v210[6] = 0u;
              v210[7] = 0u;
              *int32x4_t v268 = 0u;
              v210[5] = 0u;
              int32x4_t v271 = (_OWORD *)((char *)v268 + v40);
              v271[2] = 0u;
              v271[3] = 0u;
              *int32x4_t v271 = 0u;
              v271[1] = 0u;
              int32x4_t v272 = (_OWORD *)((char *)v268 + v91);
              v272[2] = 0u;
              v272[3] = 0u;
              *int32x4_t v272 = 0u;
              v272[1] = 0u;
              int16x8_t v273 = (_OWORD *)((char *)v268 + v490);
              v273[2] = 0u;
              v273[3] = 0u;
              *int16x8_t v273 = 0u;
              v273[1] = 0u;
            }
            uint64_t v296 = v267 + v270;
            unsigned int v297 = (_OWORD *)v239[4].f64;
            unsigned int v298 = v87[7];
            if (v298 == 255)
            {
              long long v306 = *(_OWORD *)(v296 + 16);
              long long v307 = *(_OWORD *)(v296 + 48);
              long long v308 = *(_OWORD *)(v296 + 144);
              long long v309 = *(_OWORD *)(v296 + 64);
              long long v310 = *(_OWORD *)(v296 + 176);
              long long v311 = *(_OWORD *)(v296 + 192);
              long long v312 = *(_OWORD *)(v296 + 208);
              long long v313 = *(_OWORD *)(v296 + 224);
              long long v314 = *(_OWORD *)(v296 + 240);
              float64x2_t v315 = *(float64x2_t *)(v296 + 32);
              float64x2_t v316 = *(float64x2_t *)(v296 + 128);
              float64x2_t v317 = *(float64x2_t *)(v296 + 160);
              long long v318 = *(_OWORD *)(v296 + 80);
              long long v319 = *(_OWORD *)(v296 + 112);
              long long v320 = *(_OWORD *)(v296 + 96);
              *unsigned int v297 = *(_OWORD *)v296;
              v239[5] = v315;
              v239[6] = v316;
              v239[7] = v317;
              unsigned int v321 = (_OWORD *)((char *)v297 + v91);
              int64x2_t v322 = (_OWORD *)((char *)v297 + v40);
              *int64x2_t v322 = v306;
              v322[1] = v307;
              v322[2] = v308;
              v322[3] = v310;
              *unsigned int v321 = v309;
              v321[1] = v320;
              v321[2] = v311;
              v321[3] = v313;
              int64x2_t v323 = (_OWORD *)((char *)v297 + v91 + v40);
              *int64x2_t v323 = v318;
              v323[1] = v319;
              v323[2] = v312;
              v323[3] = v314;
              unsigned int v48 = v503;
              uint64_t v23 = v506;
            }
            else
            {
              uint64_t v23 = v506;
              if (v298 == 7)
              {
                float64x2_t v302 = vld1q_dup_f64((const double *)v296);
                v239[4] = v302;
                v239[5] = v302;
                v239[6] = v302;
                v239[7] = v302;
                int64x2_t v303 = (float64x2_t *)((char *)v297 + v40);
                *int64x2_t v303 = v302;
                v303[1] = v302;
                v303[2] = v302;
                v303[3] = v302;
                int64x2_t v304 = (float64x2_t *)((char *)v297 + v91);
                *int64x2_t v304 = v302;
                v304[1] = v302;
                v304[2] = v302;
                v304[3] = v302;
                int64x2_t v305 = (float64x2_t *)((char *)v297 + v490);
                *int64x2_t v305 = v302;
                v305[1] = v302;
                v305[2] = v302;
                v305[3] = v302;
              }
              else if (v298)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v297, v40, v296, v298);
              }
              else
              {
                v239[6] = 0u;
                v239[7] = 0u;
                *unsigned int v297 = 0u;
                v239[5] = 0u;
                int32x4_t v299 = (_OWORD *)((char *)v297 + v40);
                v299[2] = 0u;
                v299[3] = 0u;
                *int32x4_t v299 = 0u;
                v299[1] = 0u;
                int64x2_t v300 = (_OWORD *)((char *)v297 + v91);
                v300[2] = 0u;
                v300[3] = 0u;
                *int64x2_t v300 = 0u;
                v300[1] = 0u;
                int64x2_t v301 = (_OWORD *)((char *)v297 + v490);
                v301[2] = 0u;
                v301[3] = 0u;
                *int64x2_t v301 = 0u;
                v301[1] = 0u;
              }
              unsigned int v48 = v503;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v96 = v52 - v50;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v506;
          block[5] = v86;
          char v517 = v54;
          char v518 = v509;
          int v513 = v495;
          unsigned int v514 = v52 - v50;
          block[6] = v87;
          v511 = v88;
          uint64_t v40 = a11;
          uint64_t v512 = a11;
          int v515 = v505;
          unsigned int v516 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v506 + 8) + 7384), block);
            unsigned int v48 = v503;
            uint64_t v23 = v506;
LABEL_47:
            int v47 = v27 & v479;
            unsigned int v49 = v45 + 1;
            goto LABEL_48;
          }
          unsigned int v97 = v96;
          unsigned int v98 = *v87;
          if (v98 == 255)
          {
            float64x2_t v324 = v86[1];
            float64x2_t v325 = v86[3];
            float64x2_t v326 = v86[9];
            float64x2_t v327 = v86[11];
            float64x2_t v328 = v86[2];
            float64x2_t v329 = v86[8];
            float64x2_t v330 = v86[4];
            float64x2_t v331 = v86[6];
            float64x2_t v332 = v86[10];
            float64x2_t v333 = v86[12];
            float64x2_t v334 = v86[13];
            float64x2_t v335 = v86[14];
            float64x2_t v336 = v86[15];
            float64x2_t v337 = v86[5];
            float64x2_t v338 = v86[7];
            float64x2_t v520 = *v86;
            float64x2_t v521 = v328;
            float64x2_t v522 = v329;
            float64x2_t v523 = v332;
            float64x2_t v528 = v324;
            float64x2_t v529 = v325;
            float64x2_t v530 = v326;
            float64x2_t v531 = v327;
            float64x2_t v536 = v330;
            float64x2_t v537 = v331;
            float64x2_t v538 = v333;
            float64x2_t v539 = v335;
            uint64_t v99 = 256;
            float64x2_t v544 = v337;
            float64x2_t v545 = v338;
            float64x2_t v546 = v334;
            float64x2_t v547 = v336;
          }
          else if (v98 == 7)
          {
            float64x2_t v339 = vld1q_dup_f64(v86->f64);
            float64x2_t v520 = v339;
            float64x2_t v521 = v339;
            float64x2_t v522 = v339;
            float64x2_t v523 = v339;
            float64x2_t v528 = v339;
            float64x2_t v529 = v339;
            float64x2_t v530 = v339;
            float64x2_t v531 = v339;
            float64x2_t v536 = v339;
            float64x2_t v537 = v339;
            float64x2_t v538 = v339;
            float64x2_t v539 = v339;
            float64x2_t v544 = v339;
            float64x2_t v545 = v339;
            uint64_t v99 = 8;
            float64x2_t v546 = v339;
            float64x2_t v547 = v339;
          }
          else if (*v87)
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v520, 128, (uint64_t)v86, v98);
          }
          else
          {
            uint64_t v99 = 0;
            float64x2_t v523 = 0u;
            float64x2_t v522 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v528 = 0u;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v536 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v547 = 0u;
          }
          uint64_t v340 = (uint64_t)v86 + v99;
          unsigned int v341 = v87[1];
          if (v341 == 255)
          {
            float64x2_t v343 = *(float64x2_t *)(v340 + 16);
            float64x2_t v344 = *(float64x2_t *)(v340 + 48);
            float64x2_t v345 = *(float64x2_t *)(v340 + 144);
            float64x2_t v346 = *(float64x2_t *)(v340 + 176);
            float64x2_t v347 = *(float64x2_t *)(v340 + 32);
            float64x2_t v348 = *(float64x2_t *)(v340 + 128);
            float64x2_t v349 = *(float64x2_t *)(v340 + 64);
            float64x2_t v350 = *(float64x2_t *)(v340 + 96);
            float64x2_t v351 = *(float64x2_t *)(v340 + 160);
            float64x2_t v352 = *(float64x2_t *)(v340 + 192);
            float64x2_t v353 = *(float64x2_t *)(v340 + 208);
            float64x2_t v354 = *(float64x2_t *)(v340 + 224);
            float64x2_t v355 = *(float64x2_t *)(v340 + 240);
            float64x2_t v356 = *(float64x2_t *)(v340 + 80);
            float64x2_t v357 = *(float64x2_t *)(v340 + 112);
            float64x2_t v552 = *(float64x2_t *)v340;
            float64x2_t v553 = v347;
            float64x2_t v554 = v348;
            float64x2_t v555 = v351;
            float64x2_t v560 = v343;
            float64x2_t v561 = v344;
            float64x2_t v562 = v345;
            float64x2_t v563 = v346;
            float64x2_t v568 = v349;
            float64x2_t v569 = v350;
            float64x2_t v570 = v352;
            float64x2_t v571 = v354;
            uint64_t v342 = 256;
            float64x2_t v576 = v356;
            float64x2_t v577 = v357;
            float64x2_t v578 = v353;
            float64x2_t v579 = v355;
          }
          else if (v341 == 7)
          {
            float64x2_t v358 = vld1q_dup_f64((const double *)v340);
            float64x2_t v552 = v358;
            float64x2_t v553 = v358;
            float64x2_t v554 = v358;
            float64x2_t v555 = v358;
            float64x2_t v560 = v358;
            float64x2_t v561 = v358;
            float64x2_t v562 = v358;
            float64x2_t v563 = v358;
            float64x2_t v568 = v358;
            float64x2_t v569 = v358;
            float64x2_t v570 = v358;
            float64x2_t v571 = v358;
            float64x2_t v576 = v358;
            float64x2_t v577 = v358;
            uint64_t v342 = 8;
            float64x2_t v578 = v358;
            float64x2_t v579 = v358;
          }
          else if (v87[1])
          {
            uint64_t v342 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v552, 128, v340, v341);
          }
          else
          {
            uint64_t v342 = 0;
            float64x2_t v554 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v560 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v568 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v577 = 0u;
            float64x2_t v578 = 0u;
            float64x2_t v579 = 0u;
          }
          uint64_t v359 = v340 + v342;
          unsigned int v360 = v87[2];
          if (v360 == 255)
          {
            float64x2_t v362 = *(float64x2_t *)(v359 + 16);
            float64x2_t v363 = *(float64x2_t *)(v359 + 48);
            float64x2_t v364 = *(float64x2_t *)(v359 + 144);
            float64x2_t v365 = *(float64x2_t *)(v359 + 176);
            float64x2_t v366 = *(float64x2_t *)(v359 + 32);
            float64x2_t v367 = *(float64x2_t *)(v359 + 128);
            float64x2_t v368 = *(float64x2_t *)(v359 + 64);
            float64x2_t v369 = *(float64x2_t *)(v359 + 96);
            float64x2_t v370 = *(float64x2_t *)(v359 + 160);
            float64x2_t v371 = *(float64x2_t *)(v359 + 192);
            float64x2_t v372 = *(float64x2_t *)(v359 + 208);
            float64x2_t v373 = *(float64x2_t *)(v359 + 224);
            float64x2_t v374 = *(float64x2_t *)(v359 + 240);
            float64x2_t v375 = *(float64x2_t *)(v359 + 80);
            float64x2_t v376 = *(float64x2_t *)(v359 + 112);
            float64x2_t v524 = *(float64x2_t *)v359;
            float64x2_t v525 = v366;
            float64x2_t v526 = v367;
            float64x2_t v527 = v370;
            float64x2_t v532 = v362;
            float64x2_t v533 = v363;
            float64x2_t v534 = v364;
            float64x2_t v535 = v365;
            float64x2_t v540 = v368;
            float64x2_t v541 = v369;
            float64x2_t v542 = v371;
            float64x2_t v543 = v373;
            uint64_t v361 = 256;
            float64x2_t v548 = v375;
            float64x2_t v549 = v376;
            float64x2_t v550 = v372;
            float64x2_t v551 = v374;
          }
          else if (v360 == 7)
          {
            float64x2_t v377 = vld1q_dup_f64((const double *)v359);
            float64x2_t v524 = v377;
            float64x2_t v525 = v377;
            float64x2_t v526 = v377;
            float64x2_t v527 = v377;
            float64x2_t v532 = v377;
            float64x2_t v533 = v377;
            float64x2_t v534 = v377;
            float64x2_t v535 = v377;
            float64x2_t v540 = v377;
            float64x2_t v541 = v377;
            float64x2_t v542 = v377;
            float64x2_t v543 = v377;
            float64x2_t v548 = v377;
            float64x2_t v549 = v377;
            uint64_t v361 = 8;
            float64x2_t v550 = v377;
            float64x2_t v551 = v377;
          }
          else if (v87[2])
          {
            uint64_t v361 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v524, 128, v359, v360);
          }
          else
          {
            uint64_t v361 = 0;
            float64x2_t v526 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v525 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v543 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v551 = 0u;
          }
          uint64_t v378 = v359 + v361;
          unsigned int v379 = v87[3];
          if (v379 == 255)
          {
            float64x2_t v381 = *(float64x2_t *)(v378 + 16);
            float64x2_t v382 = *(float64x2_t *)(v378 + 48);
            float64x2_t v383 = *(float64x2_t *)(v378 + 144);
            float64x2_t v384 = *(float64x2_t *)(v378 + 176);
            float64x2_t v385 = *(float64x2_t *)(v378 + 32);
            float64x2_t v386 = *(float64x2_t *)(v378 + 128);
            float64x2_t v387 = *(float64x2_t *)(v378 + 64);
            float64x2_t v388 = *(float64x2_t *)(v378 + 96);
            float64x2_t v389 = *(float64x2_t *)(v378 + 160);
            float64x2_t v390 = *(float64x2_t *)(v378 + 192);
            float64x2_t v391 = *(float64x2_t *)(v378 + 208);
            float64x2_t v392 = *(float64x2_t *)(v378 + 224);
            float64x2_t v393 = *(float64x2_t *)(v378 + 240);
            float64x2_t v394 = *(float64x2_t *)(v378 + 80);
            float64x2_t v395 = *(float64x2_t *)(v378 + 112);
            float64x2_t v556 = *(float64x2_t *)v378;
            float64x2_t v557 = v385;
            float64x2_t v558 = v386;
            float64x2_t v559 = v389;
            float64x2_t v564 = v381;
            float64x2_t v565 = v382;
            float64x2_t v566 = v383;
            float64x2_t v567 = v384;
            float64x2_t v572 = v387;
            float64x2_t v573 = v388;
            float64x2_t v574 = v390;
            float64x2_t v575 = v392;
            uint64_t v380 = 256;
            float64x2_t v580 = v394;
            float64x2_t v581 = v395;
            float64x2_t v582 = v391;
            float64x2_t v583 = v393;
          }
          else if (v379 == 7)
          {
            float64x2_t v396 = vld1q_dup_f64((const double *)v378);
            float64x2_t v556 = v396;
            float64x2_t v557 = v396;
            float64x2_t v558 = v396;
            float64x2_t v559 = v396;
            float64x2_t v564 = v396;
            float64x2_t v565 = v396;
            float64x2_t v566 = v396;
            float64x2_t v567 = v396;
            float64x2_t v572 = v396;
            float64x2_t v573 = v396;
            float64x2_t v574 = v396;
            float64x2_t v575 = v396;
            float64x2_t v580 = v396;
            float64x2_t v581 = v396;
            uint64_t v380 = 8;
            float64x2_t v582 = v396;
            float64x2_t v583 = v396;
          }
          else if (v87[3])
          {
            uint64_t v380 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v556, 128, v378, v379);
          }
          else
          {
            uint64_t v380 = 0;
            float64x2_t v558 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
            float64x2_t v575 = 0u;
            float64x2_t v580 = 0u;
            float64x2_t v581 = 0u;
            float64x2_t v582 = 0u;
            float64x2_t v583 = 0u;
          }
          uint64_t v397 = v378 + v380;
          unsigned int v398 = v87[4];
          if (v398 == 255)
          {
            float64x2_t v400 = *(float64x2_t *)(v397 + 16);
            float64x2_t v401 = *(float64x2_t *)(v397 + 48);
            float64x2_t v402 = *(float64x2_t *)(v397 + 144);
            float64x2_t v403 = *(float64x2_t *)(v397 + 176);
            float64x2_t v404 = *(float64x2_t *)(v397 + 32);
            float64x2_t v405 = *(float64x2_t *)(v397 + 128);
            float64x2_t v406 = *(float64x2_t *)(v397 + 64);
            float64x2_t v407 = *(float64x2_t *)(v397 + 96);
            float64x2_t v408 = *(float64x2_t *)(v397 + 160);
            float64x2_t v409 = *(float64x2_t *)(v397 + 192);
            float64x2_t v410 = *(float64x2_t *)(v397 + 208);
            float64x2_t v411 = *(float64x2_t *)(v397 + 224);
            float64x2_t v412 = *(float64x2_t *)(v397 + 240);
            float64x2_t v413 = *(float64x2_t *)(v397 + 80);
            float64x2_t v414 = *(float64x2_t *)(v397 + 112);
            float64x2_t v584 = *(float64x2_t *)v397;
            float64x2_t v585 = v404;
            float64x2_t v586 = v405;
            float64x2_t v587 = v408;
            float64x2_t v592 = v400;
            float64x2_t v593 = v401;
            float64x2_t v594 = v402;
            float64x2_t v595 = v403;
            float64x2_t v600 = v406;
            float64x2_t v601 = v407;
            float64x2_t v602 = v409;
            float64x2_t v603 = v411;
            uint64_t v399 = 256;
            float64x2_t v608 = v413;
            float64x2_t v609 = v414;
            float64x2_t v610 = v410;
            float64x2_t v611 = v412;
          }
          else if (v398 == 7)
          {
            float64x2_t v415 = vld1q_dup_f64((const double *)v397);
            float64x2_t v584 = v415;
            float64x2_t v585 = v415;
            float64x2_t v586 = v415;
            float64x2_t v587 = v415;
            float64x2_t v592 = v415;
            float64x2_t v593 = v415;
            float64x2_t v594 = v415;
            float64x2_t v595 = v415;
            float64x2_t v600 = v415;
            float64x2_t v601 = v415;
            float64x2_t v602 = v415;
            float64x2_t v603 = v415;
            float64x2_t v608 = v415;
            float64x2_t v609 = v415;
            float64x2_t v610 = v415;
            uint64_t v399 = 8;
            float64x2_t v611 = v415;
          }
          else if (v87[4])
          {
            uint64_t v399 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v584, 128, v397, v398);
          }
          else
          {
            uint64_t v399 = 0;
            float64x2_t v586 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v584 = 0u;
            float64x2_t v585 = 0u;
            float64x2_t v592 = 0u;
            float64x2_t v593 = 0u;
            float64x2_t v594 = 0u;
            float64x2_t v595 = 0u;
            float64x2_t v600 = 0u;
            float64x2_t v601 = 0u;
            float64x2_t v602 = 0u;
            float64x2_t v603 = 0u;
            float64x2_t v608 = 0u;
            float64x2_t v609 = 0u;
            float64x2_t v610 = 0u;
            float64x2_t v611 = 0u;
          }
          uint64_t v416 = v397 + v399;
          unsigned int v417 = v87[5];
          if (v417 == 255)
          {
            float64x2_t v419 = *(float64x2_t *)(v416 + 16);
            float64x2_t v420 = *(float64x2_t *)(v416 + 48);
            float64x2_t v421 = *(float64x2_t *)(v416 + 144);
            float64x2_t v422 = *(float64x2_t *)(v416 + 176);
            float64x2_t v423 = *(float64x2_t *)(v416 + 32);
            float64x2_t v424 = *(float64x2_t *)(v416 + 128);
            float64x2_t v425 = *(float64x2_t *)(v416 + 64);
            float64x2_t v426 = *(float64x2_t *)(v416 + 96);
            float64x2_t v427 = *(float64x2_t *)(v416 + 160);
            float64x2_t v428 = *(float64x2_t *)(v416 + 192);
            float64x2_t v429 = *(float64x2_t *)(v416 + 208);
            float64x2_t v430 = *(float64x2_t *)(v416 + 224);
            float64x2_t v431 = *(float64x2_t *)(v416 + 240);
            float64x2_t v432 = *(float64x2_t *)(v416 + 80);
            float64x2_t v433 = *(float64x2_t *)(v416 + 112);
            float64x2_t v616 = *(float64x2_t *)v416;
            float64x2_t v617 = v423;
            float64x2_t v618 = v424;
            float64x2_t v619 = v427;
            float64x2_t v624 = v419;
            float64x2_t v625 = v420;
            float64x2_t v626 = v421;
            float64x2_t v627 = v422;
            float64x2_t v632 = v425;
            float64x2_t v633 = v426;
            float64x2_t v634 = v428;
            float64x2_t v635 = v430;
            uint64_t v418 = 256;
            float64x2_t v640 = v432;
            float64x2_t v641 = v433;
            float64x2_t v642 = v429;
            float64x2_t v643 = v431;
          }
          else if (v417 == 7)
          {
            float64x2_t v434 = vld1q_dup_f64((const double *)v416);
            float64x2_t v616 = v434;
            float64x2_t v617 = v434;
            float64x2_t v618 = v434;
            float64x2_t v619 = v434;
            float64x2_t v624 = v434;
            float64x2_t v625 = v434;
            float64x2_t v626 = v434;
            float64x2_t v627 = v434;
            float64x2_t v632 = v434;
            float64x2_t v633 = v434;
            float64x2_t v634 = v434;
            float64x2_t v635 = v434;
            float64x2_t v640 = v434;
            float64x2_t v641 = v434;
            float64x2_t v642 = v434;
            uint64_t v418 = 8;
            float64x2_t v643 = v434;
          }
          else if (v87[5])
          {
            uint64_t v418 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v616, 128, v416, v417);
          }
          else
          {
            uint64_t v418 = 0;
            float64x2_t v618 = 0u;
            float64x2_t v619 = 0u;
            float64x2_t v616 = 0u;
            float64x2_t v617 = 0u;
            float64x2_t v624 = 0u;
            float64x2_t v625 = 0u;
            float64x2_t v626 = 0u;
            float64x2_t v627 = 0u;
            float64x2_t v632 = 0u;
            float64x2_t v633 = 0u;
            float64x2_t v634 = 0u;
            float64x2_t v635 = 0u;
            float64x2_t v640 = 0u;
            float64x2_t v641 = 0u;
            float64x2_t v642 = 0u;
            float64x2_t v643 = 0u;
          }
          uint64_t v435 = v416 + v418;
          unsigned int v436 = v87[6];
          if (v436 == 255)
          {
            float64x2_t v438 = *(float64x2_t *)(v435 + 16);
            float64x2_t v439 = *(float64x2_t *)(v435 + 48);
            float64x2_t v440 = *(float64x2_t *)(v435 + 144);
            float64x2_t v441 = *(float64x2_t *)(v435 + 176);
            float64x2_t v442 = *(float64x2_t *)(v435 + 32);
            float64x2_t v443 = *(float64x2_t *)(v435 + 128);
            float64x2_t v444 = *(float64x2_t *)(v435 + 64);
            float64x2_t v445 = *(float64x2_t *)(v435 + 96);
            float64x2_t v446 = *(float64x2_t *)(v435 + 160);
            float64x2_t v447 = *(float64x2_t *)(v435 + 192);
            float64x2_t v448 = *(float64x2_t *)(v435 + 208);
            float64x2_t v449 = *(float64x2_t *)(v435 + 224);
            float64x2_t v450 = *(float64x2_t *)(v435 + 240);
            float64x2_t v451 = *(float64x2_t *)(v435 + 80);
            float64x2_t v452 = *(float64x2_t *)(v435 + 112);
            float64x2_t v588 = *(float64x2_t *)v435;
            float64x2_t v589 = v442;
            float64x2_t v590 = v443;
            float64x2_t v591 = v446;
            float64x2_t v596 = v438;
            float64x2_t v597 = v439;
            float64x2_t v598 = v440;
            float64x2_t v599 = v441;
            float64x2_t v604 = v444;
            float64x2_t v605 = v445;
            float64x2_t v606 = v447;
            float64x2_t v607 = v449;
            uint64_t v437 = 256;
            float64x2_t v612 = v451;
            float64x2_t v613 = v452;
            float64x2_t v614 = v448;
            float64x2_t v615 = v450;
          }
          else if (v436 == 7)
          {
            float64x2_t v453 = vld1q_dup_f64((const double *)v435);
            float64x2_t v588 = v453;
            float64x2_t v589 = v453;
            float64x2_t v590 = v453;
            float64x2_t v591 = v453;
            float64x2_t v596 = v453;
            float64x2_t v597 = v453;
            float64x2_t v598 = v453;
            float64x2_t v599 = v453;
            float64x2_t v604 = v453;
            float64x2_t v605 = v453;
            float64x2_t v606 = v453;
            float64x2_t v607 = v453;
            float64x2_t v612 = v453;
            float64x2_t v613 = v453;
            float64x2_t v614 = v453;
            uint64_t v437 = 8;
            float64x2_t v615 = v453;
          }
          else if (v87[6])
          {
            uint64_t v437 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v588, 128, v435, v436);
          }
          else
          {
            uint64_t v437 = 0;
            float64x2_t v590 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v589 = 0u;
            float64x2_t v596 = 0u;
            float64x2_t v597 = 0u;
            float64x2_t v598 = 0u;
            float64x2_t v599 = 0u;
            float64x2_t v604 = 0u;
            float64x2_t v605 = 0u;
            float64x2_t v606 = 0u;
            float64x2_t v607 = 0u;
            float64x2_t v612 = 0u;
            float64x2_t v613 = 0u;
            float64x2_t v614 = 0u;
            float64x2_t v615 = 0u;
          }
          uint64_t v454 = v435 + v437;
          unsigned int v455 = v87[7];
          if (v455 == 255)
          {
            float64x2_t v458 = *(float64x2_t *)(v454 + 16);
            float64x2_t v459 = *(float64x2_t *)(v454 + 48);
            float64x2_t v460 = *(float64x2_t *)(v454 + 144);
            float64x2_t v461 = *(float64x2_t *)(v454 + 176);
            float64x2_t v462 = *(float64x2_t *)(v454 + 32);
            float64x2_t v463 = *(float64x2_t *)(v454 + 128);
            float64x2_t v464 = *(float64x2_t *)(v454 + 160);
            float64x2_t v465 = *(float64x2_t *)(v454 + 64);
            float64x2_t v466 = *(float64x2_t *)(v454 + 96);
            float64x2_t v467 = *(float64x2_t *)(v454 + 192);
            float64x2_t v468 = *(float64x2_t *)(v454 + 224);
            float64x2_t v469 = *(float64x2_t *)(v454 + 240);
            float64x2_t v470 = *(float64x2_t *)(v454 + 80);
            float64x2_t v471 = *(float64x2_t *)(v454 + 112);
            float64x2_t v472 = *(float64x2_t *)(v454 + 208);
            float64x2_t v620 = *(float64x2_t *)v454;
            float64x2_t v621 = v462;
            float64x2_t v622 = v463;
            float64x2_t v623 = v464;
            float64x2_t v628 = v458;
            float64x2_t v629 = v459;
            float64x2_t v630 = v460;
            float64x2_t v631 = v461;
            float64x2_t v636 = v465;
            float64x2_t v637 = v466;
            float64x2_t v638 = v467;
            float64x2_t v639 = v468;
            unsigned int v456 = v505;
            unsigned int v457 = v495;
            float64x2_t v644 = v470;
            float64x2_t v645 = v471;
            float64x2_t v646 = v472;
            float64x2_t v647 = v469;
            unsigned int v48 = v503;
            uint64_t v23 = v506;
          }
          else
          {
            unsigned int v48 = v503;
            uint64_t v23 = v506;
            if (v455 == 7)
            {
              float64x2_t v473 = vld1q_dup_f64((const double *)v454);
              float64x2_t v620 = v473;
              float64x2_t v621 = v473;
              float64x2_t v622 = v473;
              float64x2_t v623 = v473;
              float64x2_t v628 = v473;
              float64x2_t v629 = v473;
              float64x2_t v630 = v473;
              float64x2_t v631 = v473;
              float64x2_t v636 = v473;
              float64x2_t v637 = v473;
              float64x2_t v638 = v473;
              float64x2_t v639 = v473;
              float64x2_t v644 = v473;
              float64x2_t v645 = v473;
              float64x2_t v646 = v473;
              unsigned int v456 = v505;
              unsigned int v457 = v495;
              float64x2_t v647 = v473;
            }
            else if (v455)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v620, 128, v454, v455);
              unsigned int v457 = v513;
              unsigned int v97 = v514;
              unsigned int v456 = v515;
            }
            else
            {
              float64x2_t v622 = 0u;
              float64x2_t v623 = 0u;
              float64x2_t v620 = 0u;
              float64x2_t v621 = 0u;
              float64x2_t v628 = 0u;
              float64x2_t v629 = 0u;
              float64x2_t v630 = 0u;
              float64x2_t v631 = 0u;
              float64x2_t v636 = 0u;
              float64x2_t v637 = 0u;
              float64x2_t v638 = 0u;
              float64x2_t v639 = 0u;
              float64x2_t v644 = 0u;
              float64x2_t v645 = 0u;
              unsigned int v456 = v505;
              unsigned int v457 = v495;
              float64x2_t v646 = 0u;
              float64x2_t v647 = 0u;
            }
          }
          int v47 = v27 & v479;
          unsigned int v49 = v45 + 1;
          if (v456)
          {
            unint64_t v474 = 0;
            v475 = (char *)&v520 + 128 * (unint64_t)v457 + 8 * v97;
            unsigned int v476 = v516;
            do
            {
              if (v476)
              {
                uint64_t v477 = 0;
                v478 = (char *)v511 + v512 * v474;
                do
                {
                  v478[v477] = v475[v477];
                  ++v477;
                  unsigned int v476 = v516;
                }
                while (8 * (unint64_t)v516 > v477);
                unsigned int v456 = v515;
              }
              ++v474;
              v475 += 128;
            }
            while (v474 < v456);
          }
LABEL_48:
          BOOL v28 = v45 == v497 >> 4;
          unsigned int v45 = v49;
        }
        while (!v28);
        BOOL v28 = v27++ == v484;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v503 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v500 = v20;
  uint64_t v501 = v21;
  uint64_t v483 = v22;
  uint64_t v23 = v12;
  uint64_t v648 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v504 = v14;
  unsigned int v485 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v484 = v485 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v499 = v31;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v32 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v33 = *(unsigned __int8 *)(v23 + 254);
    char v34 = __clz(v25);
    if (1 << v32 >= v17 || v19 >> v33)
    {
      if (!(v17 >> v32) && 1 << v33 < v19)
      {
        if (v17 < 2) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v33 += v32 + v37;
        unsigned int v32 = -v37;
      }
    }
    else
    {
      unsigned int v35 = 32 - __clz(~(-1 << -v34));
      unsigned int v36 = v33 + v32;
      if (v19 < 2) {
        unsigned int v35 = 0;
      }
      unsigned int v32 = v36 - v35;
      unsigned int v33 = v35;
    }
    if (v19 < 2)
    {
      if (v33) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v34)) < v33)
    {
LABEL_27:
      BOOL v498 = 0;
LABEL_32:
      unsigned int v496 = v33 - 4;
      unsigned int v489 = v32 - 4;
      int v39 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v482 = (((~v39 + v19) & v39) + ~(-1 << v33)) >> v33;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v498 = v38 >= v32;
    goto LABEL_32;
  }
  BOOL v498 = 0;
  unsigned int v482 = 0;
  unsigned int v489 = 0;
  unsigned int v496 = 0;
LABEL_33:
  if (v27 <= v484)
  {
    unsigned int v497 = v503 + a9 - 1;
    if (v503 >> 4 <= v497 >> 4)
    {
      uint64_t v40 = a11;
      unsigned int v508 = v25 >> 4;
      unsigned int v481 = v26 >> 4;
      int v507 = (v25 & 0xF) + 1;
      int v480 = (v26 & 0xF) + 1;
      int v479 = ~(-1 << v489);
      uint64_t v493 = a11;
      uint64_t v494 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v492 = v42.i32[0] | v42.i32[1];
      BOOL v487 = v42.i32[1] != 0;
      int8x8_t v488 = v42;
      BOOL v486 = v42.i32[0] != 0;
      uint64_t v506 = v23;
      uint64_t v490 = 3 * a11;
      uint64_t v491 = 2 * a11;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v504) {
          int v44 = v504;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v485 < v43) {
          unsigned int v43 = v485;
        }
        int v495 = v44 - 16 * v27;
        int v505 = v43 - v44 + 1;
        unsigned int v45 = v503 >> 4;
        int v46 = v480;
        if (v27 != v481) {
          int v46 = 16;
        }
        unsigned int v509 = v46;
        int v47 = v27 & v479;
        uint64_t v502 = v483 + (v44 - v504) * v40;
        unsigned int v48 = v503;
        do
        {
          unsigned int v50 = 16 * v45;
          unsigned int v51 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v48) {
            int v52 = v48;
          }
          else {
            int v52 = 16 * v45;
          }
          if (v497 < v51) {
            unsigned int v51 = v503 + a9 - 1;
          }
          int v53 = v51 - v52 + 1;
          if (v45 == v508) {
            unsigned int v54 = v507;
          }
          else {
            unsigned int v54 = 16;
          }
          BOOL v55 = 1;
          if (16 * v27 >= v504 && v50 >= v48)
          {
            int v56 = v507;
            if (v45 != v508) {
              int v56 = 16;
            }
            BOOL v55 = v53 != v56 || v505 != v509;
          }
          if (v498)
          {
            if (v496 | v489)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v496 != 0;
              BOOL v62 = v489 != 0;
              unsigned int v63 = v496;
              unsigned int v64 = v489;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v45 & ~(-1 << v496) & v60) << v58++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v47 & v60) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(v23 + 320) * ((v45 >> v496) + (v27 >> v489) * v482) + (v59 << 11);
          }
          else
          {
            if (v492)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v487;
              BOOL v69 = v486;
              __int32 v70 = v488.i32[1];
              __int32 v71 = v488.i32[0];
              do
              {
                --v70;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v45) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v27) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v69 = v71 != 0;
                BOOL v68 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 15;
          if (v77 < 0x20)
          {
            unsigned int v78 = 0;
            if (!v75)
            {
LABEL_115:
              unint64_t v80 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 4) - 1)));
            if (!(v78 | v75)) {
              goto LABEL_115;
            }
          }
          int v79 = 0;
          unint64_t v80 = 0;
          BOOL v81 = v75 != 0;
          BOOL v82 = v78 != 0;
          int v83 = 1;
          do
          {
            --v75;
            BOOL v84 = !v81;
            if (v81)
            {
              unint64_t v85 = ((unint64_t)(v83 & v45) << v79) | v80;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v85 = v80;
            }
            if (!v84) {
              ++v79;
            }
            --v78;
            if (v82)
            {
              unint64_t v80 = ((unint64_t)(v83 & v27) << v79) | v85;
            }
            else
            {
              unsigned int v78 = 0;
              unint64_t v80 = v85;
            }
            if (v82) {
              ++v79;
            }
            v83 *= 2;
            --v79;
            BOOL v82 = v78 != 0;
            BOOL v81 = v75 != 0;
          }
          while (v78 | v75);
LABEL_116:
          int32x4_t v86 = (float64x2_t *)(v500 + v72);
          if (v499)
          {
            memcpy(__dst, v86, sizeof(__dst));
            int32x4_t v86 = (float64x2_t *)__dst;
          }
          int32x4_t v87 = (unsigned __int8 *)(v501 + 8 * v80);
          char v88 = (float64x2_t *)(v502 + 8 * (v52 - v48));
          char v89 = v54 < 0x10 || v55;
          if ((v89 & 1) == 0 && v509 > 0xF)
          {
            unsigned int v90 = *v87;
            if (v90 == 255)
            {
              float64x2_t v104 = v86[1];
              float64x2_t v105 = v86[3];
              float64x2_t v106 = v86[9];
              float64x2_t v107 = v86[11];
              float64x2_t v108 = v86[4];
              float64x2_t v109 = v86[2];
              float64x2_t v110 = v86[12];
              float64x2_t v111 = v86[14];
              float64x2_t v112 = v86[15];
              float64x2_t v113 = v86[8];
              float64x2_t v114 = v86[10];
              float64x2_t v115 = v86[5];
              float64x2_t v116 = v86[7];
              float64x2_t v117 = v86[13];
              float64x2_t v118 = v86[6];
              uint64_t v91 = 2 * a11;
              float64x2_t *v88 = *v86;
              v88[1] = v109;
              v88[2] = v113;
              v88[3] = v114;
              uint64_t v119 = (float64x2_t *)((char *)v88 + v491);
              uint64_t v40 = a11;
              uint64_t v120 = (float64x2_t *)((char *)v88 + a11);
              *uint64_t v120 = v104;
              v120[1] = v105;
              v120[2] = v106;
              v120[3] = v107;
              *uint64_t v119 = v108;
              v119[1] = v118;
              v119[2] = v110;
              v119[3] = v111;
              unsigned int v121 = (float64x2_t *)((char *)v88 + v491 + a11);
              uint64_t v92 = 256;
              *unsigned int v121 = v115;
              v121[1] = v116;
              v121[2] = v117;
              v121[3] = v112;
            }
            else
            {
              uint64_t v40 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 7)
              {
                float64x2_t v100 = vld1q_dup_f64(v86->f64);
                float64x2_t *v88 = v100;
                v88[1] = v100;
                v88[2] = v100;
                v88[3] = v100;
                unsigned int v101 = (float64x2_t *)((char *)v88 + a11);
                float64x2_t *v101 = v100;
                v101[1] = v100;
                v101[2] = v100;
                v101[3] = v100;
                uint64_t v102 = (float64x2_t *)((char *)v88 + v491);
                float64x2_t *v102 = v100;
                v102[1] = v100;
                v102[2] = v100;
                v102[3] = v100;
                uint64_t v103 = (float64x2_t *)((char *)v88 + v490);
                *uint64_t v103 = v100;
                v103[1] = v100;
                v103[2] = v100;
                v103[3] = v100;
                uint64_t v92 = 8;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, a11, (uint64_t)v86, v90);
              }
              else
              {
                uint64_t v92 = 0;
                v88[2] = 0u;
                v88[3] = 0u;
                float64x2_t *v88 = 0u;
                v88[1] = 0u;
                int8x8_t v93 = (_OWORD *)((char *)v88->f64 + a11);
                v93[2] = 0u;
                v93[3] = 0u;
                *int8x8_t v93 = 0u;
                v93[1] = 0u;
                uint64_t v94 = (_OWORD *)((char *)v88->f64 + v491);
                v94[2] = 0u;
                v94[3] = 0u;
                *uint64_t v94 = 0u;
                v94[1] = 0u;
                unsigned int v95 = (_OWORD *)((char *)v88->f64 + v490);
                v95[2] = 0u;
                v95[3] = 0u;
                *unsigned int v95 = 0u;
                v95[1] = 0u;
              }
            }
            uint64_t v122 = (uint64_t)v86 + v92;
            uint64_t v123 = (float64x2_t *)((char *)v88 + v494);
            unsigned int v124 = v87[1];
            if (v124 == 255)
            {
              long long v133 = *(_OWORD *)(v122 + 16);
              long long v134 = *(_OWORD *)(v122 + 48);
              long long v135 = *(_OWORD *)(v122 + 144);
              long long v136 = *(_OWORD *)(v122 + 176);
              long long v137 = *(_OWORD *)(v122 + 64);
              float64x2_t v138 = *(float64x2_t *)(v122 + 32);
              long long v139 = *(_OWORD *)(v122 + 192);
              long long v140 = *(_OWORD *)(v122 + 224);
              long long v141 = *(_OWORD *)(v122 + 240);
              float64x2_t v142 = *(float64x2_t *)(v122 + 128);
              float64x2_t v143 = *(float64x2_t *)(v122 + 160);
              long long v144 = *(_OWORD *)(v122 + 80);
              long long v145 = *(_OWORD *)(v122 + 112);
              long long v146 = *(_OWORD *)(v122 + 208);
              long long v147 = *(_OWORD *)(v122 + 96);
              float64x2_t *v123 = *(float64x2_t *)v122;
              v123[1] = v138;
              v123[2] = v142;
              v123[3] = v143;
              int32x4_t v148 = (_OWORD *)((char *)v123->f64 + v91);
              int32x4_t v149 = (_OWORD *)((char *)v123->f64 + v40);
              *int32x4_t v149 = v133;
              v149[1] = v134;
              v149[2] = v135;
              v149[3] = v136;
              _OWORD *v148 = v137;
              v148[1] = v147;
              v148[2] = v139;
              v148[3] = v140;
              int32x4_t v150 = (_OWORD *)((char *)v123->f64 + v91 + v40);
              uint64_t v125 = 256;
              *int32x4_t v150 = v144;
              v150[1] = v145;
              v150[2] = v146;
              v150[3] = v141;
            }
            else if (v124 == 7)
            {
              float64x2_t v129 = vld1q_dup_f64((const double *)v122);
              float64x2_t *v123 = v129;
              v123[1] = v129;
              v123[2] = v129;
              v123[3] = v129;
              uint64_t v130 = (float64x2_t *)((char *)v123 + v40);
              float64x2_t *v130 = v129;
              v130[1] = v129;
              v130[2] = v129;
              v130[3] = v129;
              unsigned int v131 = (float64x2_t *)((char *)v123 + v91);
              float64x2_t *v131 = v129;
              v131[1] = v129;
              v131[2] = v129;
              v131[3] = v129;
              uint64_t v132 = (float64x2_t *)((char *)v123 + v490);
              *uint64_t v132 = v129;
              v132[1] = v129;
              v132[2] = v129;
              v132[3] = v129;
              uint64_t v125 = 8;
            }
            else if (v87[1])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((float64_t *)((char *)v88->f64 + v494), v40, v122, v124);
            }
            else
            {
              uint64_t v125 = 0;
              v123[2] = 0u;
              v123[3] = 0u;
              float64x2_t *v123 = 0u;
              v123[1] = 0u;
              int32x4_t v126 = (_OWORD *)((char *)v123->f64 + v40);
              v126[2] = 0u;
              v126[3] = 0u;
              _OWORD *v126 = 0u;
              v126[1] = 0u;
              int32x4_t v127 = (_OWORD *)((char *)v123->f64 + v91);
              v127[2] = 0u;
              v127[3] = 0u;
              *int32x4_t v127 = 0u;
              v127[1] = 0u;
              int32x4_t v128 = (_OWORD *)((char *)v123->f64 + v490);
              v128[2] = 0u;
              v128[3] = 0u;
              *int32x4_t v128 = 0u;
              v128[1] = 0u;
            }
            uint64_t v151 = v122 + v125;
            f64 = (_OWORD *)v88[4].f64;
            unsigned int v153 = v87[2];
            if (v153 == 255)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 48);
              long long v164 = *(_OWORD *)(v151 + 144);
              long long v165 = *(_OWORD *)(v151 + 176);
              long long v166 = *(_OWORD *)(v151 + 64);
              float64x2_t v167 = *(float64x2_t *)(v151 + 32);
              long long v168 = *(_OWORD *)(v151 + 192);
              long long v169 = *(_OWORD *)(v151 + 224);
              long long v170 = *(_OWORD *)(v151 + 240);
              float64x2_t v171 = *(float64x2_t *)(v151 + 128);
              float64x2_t v172 = *(float64x2_t *)(v151 + 160);
              long long v173 = *(_OWORD *)(v151 + 80);
              long long v174 = *(_OWORD *)(v151 + 112);
              long long v175 = *(_OWORD *)(v151 + 208);
              long long v176 = *(_OWORD *)(v151 + 96);
              _OWORD *f64 = *(_OWORD *)v151;
              v88[5] = v167;
              v88[6] = v171;
              v88[7] = v172;
              uint64_t v177 = (_OWORD *)((char *)f64 + v91);
              int32x4_t v178 = (_OWORD *)((char *)f64 + v40);
              _OWORD *v178 = v162;
              v178[1] = v163;
              v178[2] = v164;
              v178[3] = v165;
              _OWORD *v177 = v166;
              v177[1] = v176;
              v177[2] = v168;
              v177[3] = v169;
              int32x4_t v179 = (_OWORD *)((char *)f64 + v91 + v40);
              uint64_t v154 = 256;
              _OWORD *v179 = v173;
              v179[1] = v174;
              v179[2] = v175;
              v179[3] = v170;
            }
            else if (v153 == 7)
            {
              float64x2_t v158 = vld1q_dup_f64((const double *)v151);
              v88[4] = v158;
              v88[5] = v158;
              v88[6] = v158;
              v88[7] = v158;
              uint64_t v159 = (float64x2_t *)((char *)f64 + v40);
              *uint64_t v159 = v158;
              v159[1] = v158;
              v159[2] = v158;
              v159[3] = v158;
              int32x4_t v160 = (float64x2_t *)((char *)f64 + v91);
              *int32x4_t v160 = v158;
              v160[1] = v158;
              v160[2] = v158;
              v160[3] = v158;
              int32x4_t v161 = (float64x2_t *)((char *)f64 + v490);
              *int32x4_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 8;
              v161[2] = v158;
              v161[3] = v158;
            }
            else if (v87[2])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(f64, v40, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              v88[6] = 0u;
              v88[7] = 0u;
              _OWORD *f64 = 0u;
              v88[5] = 0u;
              int32x4_t v155 = (_OWORD *)((char *)f64 + v40);
              v155[2] = 0u;
              v155[3] = 0u;
              _OWORD *v155 = 0u;
              v155[1] = 0u;
              int32x4_t v156 = (_OWORD *)((char *)f64 + v91);
              v156[2] = 0u;
              v156[3] = 0u;
              _OWORD *v156 = 0u;
              v156[1] = 0u;
              uint64_t v157 = (_OWORD *)((char *)f64 + v490);
              v157[2] = 0u;
              v157[3] = 0u;
              _OWORD *v157 = 0u;
              v157[1] = 0u;
            }
            uint64_t v180 = v151 + v154;
            uint64_t v181 = (_OWORD *)v123[4].f64;
            unsigned int v182 = v87[3];
            if (v182 == 255)
            {
              long long v191 = *(_OWORD *)(v180 + 16);
              long long v192 = *(_OWORD *)(v180 + 48);
              long long v193 = *(_OWORD *)(v180 + 144);
              long long v194 = *(_OWORD *)(v180 + 176);
              long long v195 = *(_OWORD *)(v180 + 64);
              float64x2_t v196 = *(float64x2_t *)(v180 + 32);
              long long v197 = *(_OWORD *)(v180 + 192);
              long long v198 = *(_OWORD *)(v180 + 224);
              long long v199 = *(_OWORD *)(v180 + 240);
              float64x2_t v200 = *(float64x2_t *)(v180 + 128);
              float64x2_t v201 = *(float64x2_t *)(v180 + 160);
              long long v202 = *(_OWORD *)(v180 + 80);
              long long v203 = *(_OWORD *)(v180 + 112);
              long long v204 = *(_OWORD *)(v180 + 208);
              long long v205 = *(_OWORD *)(v180 + 96);
              *uint64_t v181 = *(_OWORD *)v180;
              v123[5] = v196;
              v123[6] = v200;
              v123[7] = v201;
              int v206 = (_OWORD *)((char *)v181 + v91);
              uint64_t v207 = (_OWORD *)((char *)v181 + v40);
              *uint64_t v207 = v191;
              v207[1] = v192;
              v207[2] = v193;
              v207[3] = v194;
              *int v206 = v195;
              v206[1] = v205;
              v206[2] = v197;
              v206[3] = v198;
              int v208 = (_OWORD *)((char *)v181 + v91 + v40);
              uint64_t v183 = 256;
              *int v208 = v202;
              v208[1] = v203;
              v208[2] = v204;
              v208[3] = v199;
            }
            else if (v182 == 7)
            {
              float64x2_t v187 = vld1q_dup_f64((const double *)v180);
              v123[4] = v187;
              v123[5] = v187;
              v123[6] = v187;
              v123[7] = v187;
              unsigned int v188 = (float64x2_t *)((char *)v181 + v40);
              float64x2_t *v188 = v187;
              v188[1] = v187;
              v188[2] = v187;
              v188[3] = v187;
              int32x4_t v189 = (float64x2_t *)((char *)v181 + v91);
              float64x2_t *v189 = v187;
              v189[1] = v187;
              v189[2] = v187;
              v189[3] = v187;
              int32x4_t v190 = (float64x2_t *)((char *)v181 + v490);
              float64x2_t *v190 = v187;
              v190[1] = v187;
              uint64_t v183 = 8;
              v190[2] = v187;
              v190[3] = v187;
            }
            else if (v87[3])
            {
              uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v181, v40, v180, v182);
            }
            else
            {
              uint64_t v183 = 0;
              v123[6] = 0u;
              v123[7] = 0u;
              *uint64_t v181 = 0u;
              v123[5] = 0u;
              int32x4_t v184 = (_OWORD *)((char *)v181 + v40);
              v184[2] = 0u;
              v184[3] = 0u;
              *int32x4_t v184 = 0u;
              v184[1] = 0u;
              int32x4_t v185 = (_OWORD *)((char *)v181 + v91);
              v185[2] = 0u;
              v185[3] = 0u;
              *int32x4_t v185 = 0u;
              v185[1] = 0u;
              int32x4_t v186 = (_OWORD *)((char *)v181 + v490);
              v186[2] = 0u;
              v186[3] = 0u;
              *int32x4_t v186 = 0u;
              v186[1] = 0u;
            }
            uint64_t v209 = v180 + v183;
            BOOL v210 = (float64x2_t *)((char *)v88 + v493 * 8);
            unsigned int v211 = v87[4];
            if (v211 == 255)
            {
              long long v220 = *(_OWORD *)(v209 + 16);
              long long v221 = *(_OWORD *)(v209 + 48);
              long long v222 = *(_OWORD *)(v209 + 144);
              long long v223 = *(_OWORD *)(v209 + 176);
              long long v224 = *(_OWORD *)(v209 + 64);
              float64x2_t v225 = *(float64x2_t *)(v209 + 32);
              long long v226 = *(_OWORD *)(v209 + 192);
              long long v227 = *(_OWORD *)(v209 + 224);
              long long v228 = *(_OWORD *)(v209 + 240);
              float64x2_t v229 = *(float64x2_t *)(v209 + 128);
              float64x2_t v230 = *(float64x2_t *)(v209 + 160);
              long long v231 = *(_OWORD *)(v209 + 80);
              long long v232 = *(_OWORD *)(v209 + 112);
              long long v233 = *(_OWORD *)(v209 + 208);
              long long v234 = *(_OWORD *)(v209 + 96);
              float64x2_t *v210 = *(float64x2_t *)v209;
              v210[1] = v225;
              v210[2] = v229;
              v210[3] = v230;
              uint64_t v235 = (_OWORD *)((char *)v210->f64 + v91);
              int v236 = (_OWORD *)((char *)v210->f64 + v40);
              *int v236 = v220;
              v236[1] = v221;
              v236[2] = v222;
              v236[3] = v223;
              _OWORD *v235 = v224;
              v235[1] = v234;
              v235[2] = v226;
              v235[3] = v227;
              unsigned int v237 = (_OWORD *)((char *)v210->f64 + v91 + v40);
              uint64_t v212 = 256;
              *unsigned int v237 = v231;
              v237[1] = v232;
              v237[2] = v233;
              v237[3] = v228;
            }
            else if (v211 == 7)
            {
              float64x2_t v216 = vld1q_dup_f64((const double *)v209);
              float64x2_t *v210 = v216;
              v210[1] = v216;
              v210[2] = v216;
              v210[3] = v216;
              unsigned int v217 = (float64x2_t *)((char *)v210 + v40);
              float64x2_t *v217 = v216;
              v217[1] = v216;
              v217[2] = v216;
              v217[3] = v216;
              int64x2_t v218 = (float64x2_t *)((char *)v210 + v91);
              float64x2_t *v218 = v216;
              v218[1] = v216;
              v218[2] = v216;
              v218[3] = v216;
              unsigned int v219 = (float64x2_t *)((char *)v210 + v490);
              float64x2_t *v219 = v216;
              v219[1] = v216;
              v219[2] = v216;
              v219[3] = v216;
              uint64_t v212 = 8;
            }
            else if (v87[4])
            {
              uint64_t v212 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v88->f64[v493], v40, v209, v211);
            }
            else
            {
              uint64_t v212 = 0;
              v210[2] = 0u;
              v210[3] = 0u;
              float64x2_t *v210 = 0u;
              v210[1] = 0u;
              unsigned int v213 = (_OWORD *)((char *)v210->f64 + v40);
              v213[2] = 0u;
              v213[3] = 0u;
              *unsigned int v213 = 0u;
              v213[1] = 0u;
              int v214 = (_OWORD *)((char *)v210->f64 + v91);
              v214[2] = 0u;
              v214[3] = 0u;
              _OWORD *v214 = 0u;
              v214[1] = 0u;
              unsigned int v215 = (_OWORD *)((char *)v210->f64 + v490);
              v215[2] = 0u;
              v215[3] = 0u;
              *unsigned int v215 = 0u;
              v215[1] = 0u;
            }
            uint64_t v238 = v209 + v212;
            uint64_t v239 = (float64x2_t *)((char *)v88 + 12 * a11);
            unsigned int v240 = v87[5];
            if (v240 == 255)
            {
              long long v249 = *(_OWORD *)(v238 + 16);
              long long v250 = *(_OWORD *)(v238 + 48);
              long long v251 = *(_OWORD *)(v238 + 144);
              long long v252 = *(_OWORD *)(v238 + 176);
              long long v253 = *(_OWORD *)(v238 + 64);
              float64x2_t v254 = *(float64x2_t *)(v238 + 32);
              long long v255 = *(_OWORD *)(v238 + 192);
              long long v256 = *(_OWORD *)(v238 + 224);
              long long v257 = *(_OWORD *)(v238 + 240);
              float64x2_t v258 = *(float64x2_t *)(v238 + 128);
              float64x2_t v259 = *(float64x2_t *)(v238 + 160);
              long long v260 = *(_OWORD *)(v238 + 80);
              long long v261 = *(_OWORD *)(v238 + 112);
              long long v262 = *(_OWORD *)(v238 + 208);
              long long v263 = *(_OWORD *)(v238 + 96);
              float64x2_t *v239 = *(float64x2_t *)v238;
              v239[1] = v254;
              v239[2] = v258;
              v239[3] = v259;
              int32x4_t v264 = (_OWORD *)((char *)v239->f64 + v91);
              int16x8_t v265 = (_OWORD *)((char *)v239->f64 + v40);
              *int16x8_t v265 = v249;
              v265[1] = v250;
              v265[2] = v251;
              v265[3] = v252;
              *int32x4_t v264 = v253;
              v264[1] = v263;
              v264[2] = v255;
              v264[3] = v256;
              int16x8_t v266 = (_OWORD *)((char *)v239->f64 + v91 + v40);
              uint64_t v241 = 256;
              *int16x8_t v266 = v260;
              v266[1] = v261;
              v266[2] = v262;
              v266[3] = v257;
            }
            else if (v240 == 7)
            {
              float64x2_t v245 = vld1q_dup_f64((const double *)v238);
              float64x2_t *v239 = v245;
              v239[1] = v245;
              v239[2] = v245;
              v239[3] = v245;
              int v246 = (float64x2_t *)((char *)v239 + v40);
              *int v246 = v245;
              v246[1] = v245;
              v246[2] = v245;
              v246[3] = v245;
              unsigned int v247 = (float64x2_t *)((char *)v239 + v91);
              *unsigned int v247 = v245;
              v247[1] = v245;
              v247[2] = v245;
              v247[3] = v245;
              unsigned int v248 = (float64x2_t *)((char *)v239 + v490);
              *unsigned int v248 = v245;
              v248[1] = v245;
              v248[2] = v245;
              v248[3] = v245;
              uint64_t v241 = 8;
            }
            else if (v87[5])
            {
              uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v239, v40, v238, v240);
            }
            else
            {
              uint64_t v241 = 0;
              v239[2] = 0u;
              v239[3] = 0u;
              float64x2_t *v239 = 0u;
              v239[1] = 0u;
              unsigned int v242 = (_OWORD *)((char *)v239->f64 + v40);
              v242[2] = 0u;
              v242[3] = 0u;
              *unsigned int v242 = 0u;
              v242[1] = 0u;
              int64x2_t v243 = (_OWORD *)((char *)v239->f64 + v91);
              v243[2] = 0u;
              v243[3] = 0u;
              *int64x2_t v243 = 0u;
              v243[1] = 0u;
              unsigned int v244 = (_OWORD *)((char *)v239->f64 + v490);
              v244[2] = 0u;
              v244[3] = 0u;
              *unsigned int v244 = 0u;
              v244[1] = 0u;
            }
            uint64_t v267 = v238 + v241;
            int32x4_t v268 = (_OWORD *)v210[4].f64;
            unsigned int v269 = v87[6];
            if (v269 == 255)
            {
              long long v278 = *(_OWORD *)(v267 + 16);
              long long v279 = *(_OWORD *)(v267 + 48);
              long long v280 = *(_OWORD *)(v267 + 144);
              long long v281 = *(_OWORD *)(v267 + 176);
              long long v282 = *(_OWORD *)(v267 + 64);
              float64x2_t v283 = *(float64x2_t *)(v267 + 32);
              long long v284 = *(_OWORD *)(v267 + 192);
              long long v285 = *(_OWORD *)(v267 + 224);
              long long v286 = *(_OWORD *)(v267 + 240);
              float64x2_t v287 = *(float64x2_t *)(v267 + 128);
              float64x2_t v288 = *(float64x2_t *)(v267 + 160);
              long long v289 = *(_OWORD *)(v267 + 80);
              long long v290 = *(_OWORD *)(v267 + 112);
              long long v291 = *(_OWORD *)(v267 + 208);
              long long v292 = *(_OWORD *)(v267 + 96);
              *int32x4_t v268 = *(_OWORD *)v267;
              v210[5] = v283;
              v210[6] = v287;
              v210[7] = v288;
              int64x2_t v293 = (_OWORD *)((char *)v268 + v91);
              int64x2_t v294 = (_OWORD *)((char *)v268 + v40);
              *int64x2_t v294 = v278;
              v294[1] = v279;
              v294[2] = v280;
              v294[3] = v281;
              *int64x2_t v293 = v282;
              v293[1] = v292;
              v293[2] = v284;
              v293[3] = v285;
              int64x2_t v295 = (_OWORD *)((char *)v268 + v91 + v40);
              uint64_t v270 = 256;
              *int64x2_t v295 = v289;
              v295[1] = v290;
              v295[2] = v291;
              v295[3] = v286;
            }
            else if (v269 == 7)
            {
              float64x2_t v274 = vld1q_dup_f64((const double *)v267);
              v210[4] = v274;
              v210[5] = v274;
              v210[6] = v274;
              v210[7] = v274;
              int32x4_t v275 = (float64x2_t *)((char *)v268 + v40);
              *int32x4_t v275 = v274;
              v275[1] = v274;
              v275[2] = v274;
              v275[3] = v274;
              int32x4_t v276 = (float64x2_t *)((char *)v268 + v91);
              *int32x4_t v276 = v274;
              v276[1] = v274;
              v276[2] = v274;
              v276[3] = v274;
              int32x4_t v277 = (float64x2_t *)((char *)v268 + v490);
              *int32x4_t v277 = v274;
              v277[1] = v274;
              uint64_t v270 = 8;
              v277[2] = v274;
              v277[3] = v274;
            }
            else if (v87[6])
            {
              uint64_t v270 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v268, v40, v267, v269);
            }
            else
            {
              uint64_t v270 = 0;
              v210[6] = 0u;
              v210[7] = 0u;
              *int32x4_t v268 = 0u;
              v210[5] = 0u;
              int32x4_t v271 = (_OWORD *)((char *)v268 + v40);
              v271[2] = 0u;
              v271[3] = 0u;
              *int32x4_t v271 = 0u;
              v271[1] = 0u;
              int32x4_t v272 = (_OWORD *)((char *)v268 + v91);
              v272[2] = 0u;
              v272[3] = 0u;
              *int32x4_t v272 = 0u;
              v272[1] = 0u;
              int16x8_t v273 = (_OWORD *)((char *)v268 + v490);
              v273[2] = 0u;
              v273[3] = 0u;
              *int16x8_t v273 = 0u;
              v273[1] = 0u;
            }
            uint64_t v296 = v267 + v270;
            unsigned int v297 = (_OWORD *)v239[4].f64;
            unsigned int v298 = v87[7];
            if (v298 == 255)
            {
              long long v306 = *(_OWORD *)(v296 + 16);
              long long v307 = *(_OWORD *)(v296 + 48);
              long long v308 = *(_OWORD *)(v296 + 144);
              long long v309 = *(_OWORD *)(v296 + 64);
              long long v310 = *(_OWORD *)(v296 + 176);
              long long v311 = *(_OWORD *)(v296 + 192);
              long long v312 = *(_OWORD *)(v296 + 208);
              long long v313 = *(_OWORD *)(v296 + 224);
              long long v314 = *(_OWORD *)(v296 + 240);
              float64x2_t v315 = *(float64x2_t *)(v296 + 32);
              float64x2_t v316 = *(float64x2_t *)(v296 + 128);
              float64x2_t v317 = *(float64x2_t *)(v296 + 160);
              long long v318 = *(_OWORD *)(v296 + 80);
              long long v319 = *(_OWORD *)(v296 + 112);
              long long v320 = *(_OWORD *)(v296 + 96);
              *unsigned int v297 = *(_OWORD *)v296;
              v239[5] = v315;
              v239[6] = v316;
              v239[7] = v317;
              unsigned int v321 = (_OWORD *)((char *)v297 + v91);
              int64x2_t v322 = (_OWORD *)((char *)v297 + v40);
              *int64x2_t v322 = v306;
              v322[1] = v307;
              v322[2] = v308;
              v322[3] = v310;
              *unsigned int v321 = v309;
              v321[1] = v320;
              v321[2] = v311;
              v321[3] = v313;
              int64x2_t v323 = (_OWORD *)((char *)v297 + v91 + v40);
              *int64x2_t v323 = v318;
              v323[1] = v319;
              v323[2] = v312;
              v323[3] = v314;
              unsigned int v48 = v503;
              uint64_t v23 = v506;
            }
            else
            {
              uint64_t v23 = v506;
              if (v298 == 7)
              {
                float64x2_t v302 = vld1q_dup_f64((const double *)v296);
                v239[4] = v302;
                v239[5] = v302;
                v239[6] = v302;
                v239[7] = v302;
                int64x2_t v303 = (float64x2_t *)((char *)v297 + v40);
                *int64x2_t v303 = v302;
                v303[1] = v302;
                v303[2] = v302;
                v303[3] = v302;
                int64x2_t v304 = (float64x2_t *)((char *)v297 + v91);
                *int64x2_t v304 = v302;
                v304[1] = v302;
                v304[2] = v302;
                v304[3] = v302;
                int64x2_t v305 = (float64x2_t *)((char *)v297 + v490);
                *int64x2_t v305 = v302;
                v305[1] = v302;
                v305[2] = v302;
                v305[3] = v302;
              }
              else if (v298)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v297, v40, v296, v298);
              }
              else
              {
                v239[6] = 0u;
                v239[7] = 0u;
                *unsigned int v297 = 0u;
                v239[5] = 0u;
                int32x4_t v299 = (_OWORD *)((char *)v297 + v40);
                v299[2] = 0u;
                v299[3] = 0u;
                *int32x4_t v299 = 0u;
                v299[1] = 0u;
                int64x2_t v300 = (_OWORD *)((char *)v297 + v91);
                v300[2] = 0u;
                v300[3] = 0u;
                *int64x2_t v300 = 0u;
                v300[1] = 0u;
                int64x2_t v301 = (_OWORD *)((char *)v297 + v490);
                v301[2] = 0u;
                v301[3] = 0u;
                *int64x2_t v301 = 0u;
                v301[1] = 0u;
              }
              unsigned int v48 = v503;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v96 = v52 - v50;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v506;
          block[5] = v86;
          char v517 = v54;
          char v518 = v509;
          int v513 = v495;
          unsigned int v514 = v52 - v50;
          block[6] = v87;
          v511 = v88;
          uint64_t v40 = a11;
          uint64_t v512 = a11;
          int v515 = v505;
          unsigned int v516 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v506 + 8) + 7384), block);
            unsigned int v48 = v503;
            uint64_t v23 = v506;
LABEL_47:
            int v47 = v27 & v479;
            unsigned int v49 = v45 + 1;
            goto LABEL_48;
          }
          unsigned int v97 = v96;
          unsigned int v98 = *v87;
          if (v98 == 255)
          {
            float64x2_t v324 = v86[1];
            float64x2_t v325 = v86[3];
            float64x2_t v326 = v86[9];
            float64x2_t v327 = v86[11];
            float64x2_t v328 = v86[2];
            float64x2_t v329 = v86[8];
            float64x2_t v330 = v86[4];
            float64x2_t v331 = v86[6];
            float64x2_t v332 = v86[10];
            float64x2_t v333 = v86[12];
            float64x2_t v334 = v86[13];
            float64x2_t v335 = v86[14];
            float64x2_t v336 = v86[15];
            float64x2_t v337 = v86[5];
            float64x2_t v338 = v86[7];
            float64x2_t v520 = *v86;
            float64x2_t v521 = v328;
            float64x2_t v522 = v329;
            float64x2_t v523 = v332;
            float64x2_t v528 = v324;
            float64x2_t v529 = v325;
            float64x2_t v530 = v326;
            float64x2_t v531 = v327;
            float64x2_t v536 = v330;
            float64x2_t v537 = v331;
            float64x2_t v538 = v333;
            float64x2_t v539 = v335;
            uint64_t v99 = 256;
            float64x2_t v544 = v337;
            float64x2_t v545 = v338;
            float64x2_t v546 = v334;
            float64x2_t v547 = v336;
          }
          else if (v98 == 7)
          {
            float64x2_t v339 = vld1q_dup_f64(v86->f64);
            float64x2_t v520 = v339;
            float64x2_t v521 = v339;
            float64x2_t v522 = v339;
            float64x2_t v523 = v339;
            float64x2_t v528 = v339;
            float64x2_t v529 = v339;
            float64x2_t v530 = v339;
            float64x2_t v531 = v339;
            float64x2_t v536 = v339;
            float64x2_t v537 = v339;
            float64x2_t v538 = v339;
            float64x2_t v539 = v339;
            float64x2_t v544 = v339;
            float64x2_t v545 = v339;
            uint64_t v99 = 8;
            float64x2_t v546 = v339;
            float64x2_t v547 = v339;
          }
          else if (*v87)
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v520, 128, (uint64_t)v86, v98);
          }
          else
          {
            uint64_t v99 = 0;
            float64x2_t v523 = 0u;
            float64x2_t v522 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v528 = 0u;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v536 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v547 = 0u;
          }
          uint64_t v340 = (uint64_t)v86 + v99;
          unsigned int v341 = v87[1];
          if (v341 == 255)
          {
            float64x2_t v343 = *(float64x2_t *)(v340 + 16);
            float64x2_t v344 = *(float64x2_t *)(v340 + 48);
            float64x2_t v345 = *(float64x2_t *)(v340 + 144);
            float64x2_t v346 = *(float64x2_t *)(v340 + 176);
            float64x2_t v347 = *(float64x2_t *)(v340 + 32);
            float64x2_t v348 = *(float64x2_t *)(v340 + 128);
            float64x2_t v349 = *(float64x2_t *)(v340 + 64);
            float64x2_t v350 = *(float64x2_t *)(v340 + 96);
            float64x2_t v351 = *(float64x2_t *)(v340 + 160);
            float64x2_t v352 = *(float64x2_t *)(v340 + 192);
            float64x2_t v353 = *(float64x2_t *)(v340 + 208);
            float64x2_t v354 = *(float64x2_t *)(v340 + 224);
            float64x2_t v355 = *(float64x2_t *)(v340 + 240);
            float64x2_t v356 = *(float64x2_t *)(v340 + 80);
            float64x2_t v357 = *(float64x2_t *)(v340 + 112);
            float64x2_t v552 = *(float64x2_t *)v340;
            float64x2_t v553 = v347;
            float64x2_t v554 = v348;
            float64x2_t v555 = v351;
            float64x2_t v560 = v343;
            float64x2_t v561 = v344;
            float64x2_t v562 = v345;
            float64x2_t v563 = v346;
            float64x2_t v568 = v349;
            float64x2_t v569 = v350;
            float64x2_t v570 = v352;
            float64x2_t v571 = v354;
            uint64_t v342 = 256;
            float64x2_t v576 = v356;
            float64x2_t v577 = v357;
            float64x2_t v578 = v353;
            float64x2_t v579 = v355;
          }
          else if (v341 == 7)
          {
            float64x2_t v358 = vld1q_dup_f64((const double *)v340);
            float64x2_t v552 = v358;
            float64x2_t v553 = v358;
            float64x2_t v554 = v358;
            float64x2_t v555 = v358;
            float64x2_t v560 = v358;
            float64x2_t v561 = v358;
            float64x2_t v562 = v358;
            float64x2_t v563 = v358;
            float64x2_t v568 = v358;
            float64x2_t v569 = v358;
            float64x2_t v570 = v358;
            float64x2_t v571 = v358;
            float64x2_t v576 = v358;
            float64x2_t v577 = v358;
            uint64_t v342 = 8;
            float64x2_t v578 = v358;
            float64x2_t v579 = v358;
          }
          else if (v87[1])
          {
            uint64_t v342 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v552, 128, v340, v341);
          }
          else
          {
            uint64_t v342 = 0;
            float64x2_t v554 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v560 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v568 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v577 = 0u;
            float64x2_t v578 = 0u;
            float64x2_t v579 = 0u;
          }
          uint64_t v359 = v340 + v342;
          unsigned int v360 = v87[2];
          if (v360 == 255)
          {
            float64x2_t v362 = *(float64x2_t *)(v359 + 16);
            float64x2_t v363 = *(float64x2_t *)(v359 + 48);
            float64x2_t v364 = *(float64x2_t *)(v359 + 144);
            float64x2_t v365 = *(float64x2_t *)(v359 + 176);
            float64x2_t v366 = *(float64x2_t *)(v359 + 32);
            float64x2_t v367 = *(float64x2_t *)(v359 + 128);
            float64x2_t v368 = *(float64x2_t *)(v359 + 64);
            float64x2_t v369 = *(float64x2_t *)(v359 + 96);
            float64x2_t v370 = *(float64x2_t *)(v359 + 160);
            float64x2_t v371 = *(float64x2_t *)(v359 + 192);
            float64x2_t v372 = *(float64x2_t *)(v359 + 208);
            float64x2_t v373 = *(float64x2_t *)(v359 + 224);
            float64x2_t v374 = *(float64x2_t *)(v359 + 240);
            float64x2_t v375 = *(float64x2_t *)(v359 + 80);
            float64x2_t v376 = *(float64x2_t *)(v359 + 112);
            float64x2_t v524 = *(float64x2_t *)v359;
            float64x2_t v525 = v366;
            float64x2_t v526 = v367;
            float64x2_t v527 = v370;
            float64x2_t v532 = v362;
            float64x2_t v533 = v363;
            float64x2_t v534 = v364;
            float64x2_t v535 = v365;
            float64x2_t v540 = v368;
            float64x2_t v541 = v369;
            float64x2_t v542 = v371;
            float64x2_t v543 = v373;
            uint64_t v361 = 256;
            float64x2_t v548 = v375;
            float64x2_t v549 = v376;
            float64x2_t v550 = v372;
            float64x2_t v551 = v374;
          }
          else if (v360 == 7)
          {
            float64x2_t v377 = vld1q_dup_f64((const double *)v359);
            float64x2_t v524 = v377;
            float64x2_t v525 = v377;
            float64x2_t v526 = v377;
            float64x2_t v527 = v377;
            float64x2_t v532 = v377;
            float64x2_t v533 = v377;
            float64x2_t v534 = v377;
            float64x2_t v535 = v377;
            float64x2_t v540 = v377;
            float64x2_t v541 = v377;
            float64x2_t v542 = v377;
            float64x2_t v543 = v377;
            float64x2_t v548 = v377;
            float64x2_t v549 = v377;
            uint64_t v361 = 8;
            float64x2_t v550 = v377;
            float64x2_t v551 = v377;
          }
          else if (v87[2])
          {
            uint64_t v361 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v524, 128, v359, v360);
          }
          else
          {
            uint64_t v361 = 0;
            float64x2_t v526 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v525 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v543 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v551 = 0u;
          }
          uint64_t v378 = v359 + v361;
          unsigned int v379 = v87[3];
          if (v379 == 255)
          {
            float64x2_t v381 = *(float64x2_t *)(v378 + 16);
            float64x2_t v382 = *(float64x2_t *)(v378 + 48);
            float64x2_t v383 = *(float64x2_t *)(v378 + 144);
            float64x2_t v384 = *(float64x2_t *)(v378 + 176);
            float64x2_t v385 = *(float64x2_t *)(v378 + 32);
            float64x2_t v386 = *(float64x2_t *)(v378 + 128);
            float64x2_t v387 = *(float64x2_t *)(v378 + 64);
            float64x2_t v388 = *(float64x2_t *)(v378 + 96);
            float64x2_t v389 = *(float64x2_t *)(v378 + 160);
            float64x2_t v390 = *(float64x2_t *)(v378 + 192);
            float64x2_t v391 = *(float64x2_t *)(v378 + 208);
            float64x2_t v392 = *(float64x2_t *)(v378 + 224);
            float64x2_t v393 = *(float64x2_t *)(v378 + 240);
            float64x2_t v394 = *(float64x2_t *)(v378 + 80);
            float64x2_t v395 = *(float64x2_t *)(v378 + 112);
            float64x2_t v556 = *(float64x2_t *)v378;
            float64x2_t v557 = v385;
            float64x2_t v558 = v386;
            float64x2_t v559 = v389;
            float64x2_t v564 = v381;
            float64x2_t v565 = v382;
            float64x2_t v566 = v383;
            float64x2_t v567 = v384;
            float64x2_t v572 = v387;
            float64x2_t v573 = v388;
            float64x2_t v574 = v390;
            float64x2_t v575 = v392;
            uint64_t v380 = 256;
            float64x2_t v580 = v394;
            float64x2_t v581 = v395;
            float64x2_t v582 = v391;
            float64x2_t v583 = v393;
          }
          else if (v379 == 7)
          {
            float64x2_t v396 = vld1q_dup_f64((const double *)v378);
            float64x2_t v556 = v396;
            float64x2_t v557 = v396;
            float64x2_t v558 = v396;
            float64x2_t v559 = v396;
            float64x2_t v564 = v396;
            float64x2_t v565 = v396;
            float64x2_t v566 = v396;
            float64x2_t v567 = v396;
            float64x2_t v572 = v396;
            float64x2_t v573 = v396;
            float64x2_t v574 = v396;
            float64x2_t v575 = v396;
            float64x2_t v580 = v396;
            float64x2_t v581 = v396;
            uint64_t v380 = 8;
            float64x2_t v582 = v396;
            float64x2_t v583 = v396;
          }
          else if (v87[3])
          {
            uint64_t v380 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v556, 128, v378, v379);
          }
          else
          {
            uint64_t v380 = 0;
            float64x2_t v558 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
            float64x2_t v575 = 0u;
            float64x2_t v580 = 0u;
            float64x2_t v581 = 0u;
            float64x2_t v582 = 0u;
            float64x2_t v583 = 0u;
          }
          uint64_t v397 = v378 + v380;
          unsigned int v398 = v87[4];
          if (v398 == 255)
          {
            float64x2_t v400 = *(float64x2_t *)(v397 + 16);
            float64x2_t v401 = *(float64x2_t *)(v397 + 48);
            float64x2_t v402 = *(float64x2_t *)(v397 + 144);
            float64x2_t v403 = *(float64x2_t *)(v397 + 176);
            float64x2_t v404 = *(float64x2_t *)(v397 + 32);
            float64x2_t v405 = *(float64x2_t *)(v397 + 128);
            float64x2_t v406 = *(float64x2_t *)(v397 + 64);
            float64x2_t v407 = *(float64x2_t *)(v397 + 96);
            float64x2_t v408 = *(float64x2_t *)(v397 + 160);
            float64x2_t v409 = *(float64x2_t *)(v397 + 192);
            float64x2_t v410 = *(float64x2_t *)(v397 + 208);
            float64x2_t v411 = *(float64x2_t *)(v397 + 224);
            float64x2_t v412 = *(float64x2_t *)(v397 + 240);
            float64x2_t v413 = *(float64x2_t *)(v397 + 80);
            float64x2_t v414 = *(float64x2_t *)(v397 + 112);
            float64x2_t v584 = *(float64x2_t *)v397;
            float64x2_t v585 = v404;
            float64x2_t v586 = v405;
            float64x2_t v587 = v408;
            float64x2_t v592 = v400;
            float64x2_t v593 = v401;
            float64x2_t v594 = v402;
            float64x2_t v595 = v403;
            float64x2_t v600 = v406;
            float64x2_t v601 = v407;
            float64x2_t v602 = v409;
            float64x2_t v603 = v411;
            uint64_t v399 = 256;
            float64x2_t v608 = v413;
            float64x2_t v609 = v414;
            float64x2_t v610 = v410;
            float64x2_t v611 = v412;
          }
          else if (v398 == 7)
          {
            float64x2_t v415 = vld1q_dup_f64((const double *)v397);
            float64x2_t v584 = v415;
            float64x2_t v585 = v415;
            float64x2_t v586 = v415;
            float64x2_t v587 = v415;
            float64x2_t v592 = v415;
            float64x2_t v593 = v415;
            float64x2_t v594 = v415;
            float64x2_t v595 = v415;
            float64x2_t v600 = v415;
            float64x2_t v601 = v415;
            float64x2_t v602 = v415;
            float64x2_t v603 = v415;
            float64x2_t v608 = v415;
            float64x2_t v609 = v415;
            float64x2_t v610 = v415;
            uint64_t v399 = 8;
            float64x2_t v611 = v415;
          }
          else if (v87[4])
          {
            uint64_t v399 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v584, 128, v397, v398);
          }
          else
          {
            uint64_t v399 = 0;
            float64x2_t v586 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v584 = 0u;
            float64x2_t v585 = 0u;
            float64x2_t v592 = 0u;
            float64x2_t v593 = 0u;
            float64x2_t v594 = 0u;
            float64x2_t v595 = 0u;
            float64x2_t v600 = 0u;
            float64x2_t v601 = 0u;
            float64x2_t v602 = 0u;
            float64x2_t v603 = 0u;
            float64x2_t v608 = 0u;
            float64x2_t v609 = 0u;
            float64x2_t v610 = 0u;
            float64x2_t v611 = 0u;
          }
          uint64_t v416 = v397 + v399;
          unsigned int v417 = v87[5];
          if (v417 == 255)
          {
            float64x2_t v419 = *(float64x2_t *)(v416 + 16);
            float64x2_t v420 = *(float64x2_t *)(v416 + 48);
            float64x2_t v421 = *(float64x2_t *)(v416 + 144);
            float64x2_t v422 = *(float64x2_t *)(v416 + 176);
            float64x2_t v423 = *(float64x2_t *)(v416 + 32);
            float64x2_t v424 = *(float64x2_t *)(v416 + 128);
            float64x2_t v425 = *(float64x2_t *)(v416 + 64);
            float64x2_t v426 = *(float64x2_t *)(v416 + 96);
            float64x2_t v427 = *(float64x2_t *)(v416 + 160);
            float64x2_t v428 = *(float64x2_t *)(v416 + 192);
            float64x2_t v429 = *(float64x2_t *)(v416 + 208);
            float64x2_t v430 = *(float64x2_t *)(v416 + 224);
            float64x2_t v431 = *(float64x2_t *)(v416 + 240);
            float64x2_t v432 = *(float64x2_t *)(v416 + 80);
            float64x2_t v433 = *(float64x2_t *)(v416 + 112);
            float64x2_t v616 = *(float64x2_t *)v416;
            float64x2_t v617 = v423;
            float64x2_t v618 = v424;
            float64x2_t v619 = v427;
            float64x2_t v624 = v419;
            float64x2_t v625 = v420;
            float64x2_t v626 = v421;
            float64x2_t v627 = v422;
            float64x2_t v632 = v425;
            float64x2_t v633 = v426;
            float64x2_t v634 = v428;
            float64x2_t v635 = v430;
            uint64_t v418 = 256;
            float64x2_t v640 = v432;
            float64x2_t v641 = v433;
            float64x2_t v642 = v429;
            float64x2_t v643 = v431;
          }
          else if (v417 == 7)
          {
            float64x2_t v434 = vld1q_dup_f64((const double *)v416);
            float64x2_t v616 = v434;
            float64x2_t v617 = v434;
            float64x2_t v618 = v434;
            float64x2_t v619 = v434;
            float64x2_t v624 = v434;
            float64x2_t v625 = v434;
            float64x2_t v626 = v434;
            float64x2_t v627 = v434;
            float64x2_t v632 = v434;
            float64x2_t v633 = v434;
            float64x2_t v634 = v434;
            float64x2_t v635 = v434;
            float64x2_t v640 = v434;
            float64x2_t v641 = v434;
            float64x2_t v642 = v434;
            uint64_t v418 = 8;
            float64x2_t v643 = v434;
          }
          else if (v87[5])
          {
            uint64_t v418 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v616, 128, v416, v417);
          }
          else
          {
            uint64_t v418 = 0;
            float64x2_t v618 = 0u;
            float64x2_t v619 = 0u;
            float64x2_t v616 = 0u;
            float64x2_t v617 = 0u;
            float64x2_t v624 = 0u;
            float64x2_t v625 = 0u;
            float64x2_t v626 = 0u;
            float64x2_t v627 = 0u;
            float64x2_t v632 = 0u;
            float64x2_t v633 = 0u;
            float64x2_t v634 = 0u;
            float64x2_t v635 = 0u;
            float64x2_t v640 = 0u;
            float64x2_t v641 = 0u;
            float64x2_t v642 = 0u;
            float64x2_t v643 = 0u;
          }
          uint64_t v435 = v416 + v418;
          unsigned int v436 = v87[6];
          if (v436 == 255)
          {
            float64x2_t v438 = *(float64x2_t *)(v435 + 16);
            float64x2_t v439 = *(float64x2_t *)(v435 + 48);
            float64x2_t v440 = *(float64x2_t *)(v435 + 144);
            float64x2_t v441 = *(float64x2_t *)(v435 + 176);
            float64x2_t v442 = *(float64x2_t *)(v435 + 32);
            float64x2_t v443 = *(float64x2_t *)(v435 + 128);
            float64x2_t v444 = *(float64x2_t *)(v435 + 64);
            float64x2_t v445 = *(float64x2_t *)(v435 + 96);
            float64x2_t v446 = *(float64x2_t *)(v435 + 160);
            float64x2_t v447 = *(float64x2_t *)(v435 + 192);
            float64x2_t v448 = *(float64x2_t *)(v435 + 208);
            float64x2_t v449 = *(float64x2_t *)(v435 + 224);
            float64x2_t v450 = *(float64x2_t *)(v435 + 240);
            float64x2_t v451 = *(float64x2_t *)(v435 + 80);
            float64x2_t v452 = *(float64x2_t *)(v435 + 112);
            float64x2_t v588 = *(float64x2_t *)v435;
            float64x2_t v589 = v442;
            float64x2_t v590 = v443;
            float64x2_t v591 = v446;
            float64x2_t v596 = v438;
            float64x2_t v597 = v439;
            float64x2_t v598 = v440;
            float64x2_t v599 = v441;
            float64x2_t v604 = v444;
            float64x2_t v605 = v445;
            float64x2_t v606 = v447;
            float64x2_t v607 = v449;
            uint64_t v437 = 256;
            float64x2_t v612 = v451;
            float64x2_t v613 = v452;
            float64x2_t v614 = v448;
            float64x2_t v615 = v450;
          }
          else if (v436 == 7)
          {
            float64x2_t v453 = vld1q_dup_f64((const double *)v435);
            float64x2_t v588 = v453;
            float64x2_t v589 = v453;
            float64x2_t v590 = v453;
            float64x2_t v591 = v453;
            float64x2_t v596 = v453;
            float64x2_t v597 = v453;
            float64x2_t v598 = v453;
            float64x2_t v599 = v453;
            float64x2_t v604 = v453;
            float64x2_t v605 = v453;
            float64x2_t v606 = v453;
            float64x2_t v607 = v453;
            float64x2_t v612 = v453;
            float64x2_t v613 = v453;
            float64x2_t v614 = v453;
            uint64_t v437 = 8;
            float64x2_t v615 = v453;
          }
          else if (v87[6])
          {
            uint64_t v437 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v588, 128, v435, v436);
          }
          else
          {
            uint64_t v437 = 0;
            float64x2_t v590 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v589 = 0u;
            float64x2_t v596 = 0u;
            float64x2_t v597 = 0u;
            float64x2_t v598 = 0u;
            float64x2_t v599 = 0u;
            float64x2_t v604 = 0u;
            float64x2_t v605 = 0u;
            float64x2_t v606 = 0u;
            float64x2_t v607 = 0u;
            float64x2_t v612 = 0u;
            float64x2_t v613 = 0u;
            float64x2_t v614 = 0u;
            float64x2_t v615 = 0u;
          }
          uint64_t v454 = v435 + v437;
          unsigned int v455 = v87[7];
          if (v455 == 255)
          {
            float64x2_t v458 = *(float64x2_t *)(v454 + 16);
            float64x2_t v459 = *(float64x2_t *)(v454 + 48);
            float64x2_t v460 = *(float64x2_t *)(v454 + 144);
            float64x2_t v461 = *(float64x2_t *)(v454 + 176);
            float64x2_t v462 = *(float64x2_t *)(v454 + 32);
            float64x2_t v463 = *(float64x2_t *)(v454 + 128);
            float64x2_t v464 = *(float64x2_t *)(v454 + 160);
            float64x2_t v465 = *(float64x2_t *)(v454 + 64);
            float64x2_t v466 = *(float64x2_t *)(v454 + 96);
            float64x2_t v467 = *(float64x2_t *)(v454 + 192);
            float64x2_t v468 = *(float64x2_t *)(v454 + 224);
            float64x2_t v469 = *(float64x2_t *)(v454 + 240);
            float64x2_t v470 = *(float64x2_t *)(v454 + 80);
            float64x2_t v471 = *(float64x2_t *)(v454 + 112);
            float64x2_t v472 = *(float64x2_t *)(v454 + 208);
            float64x2_t v620 = *(float64x2_t *)v454;
            float64x2_t v621 = v462;
            float64x2_t v622 = v463;
            float64x2_t v623 = v464;
            float64x2_t v628 = v458;
            float64x2_t v629 = v459;
            float64x2_t v630 = v460;
            float64x2_t v631 = v461;
            float64x2_t v636 = v465;
            float64x2_t v637 = v466;
            float64x2_t v638 = v467;
            float64x2_t v639 = v468;
            unsigned int v456 = v505;
            unsigned int v457 = v495;
            float64x2_t v644 = v470;
            float64x2_t v645 = v471;
            float64x2_t v646 = v472;
            float64x2_t v647 = v469;
            unsigned int v48 = v503;
            uint64_t v23 = v506;
          }
          else
          {
            unsigned int v48 = v503;
            uint64_t v23 = v506;
            if (v455 == 7)
            {
              float64x2_t v473 = vld1q_dup_f64((const double *)v454);
              float64x2_t v620 = v473;
              float64x2_t v621 = v473;
              float64x2_t v622 = v473;
              float64x2_t v623 = v473;
              float64x2_t v628 = v473;
              float64x2_t v629 = v473;
              float64x2_t v630 = v473;
              float64x2_t v631 = v473;
              float64x2_t v636 = v473;
              float64x2_t v637 = v473;
              float64x2_t v638 = v473;
              float64x2_t v639 = v473;
              float64x2_t v644 = v473;
              float64x2_t v645 = v473;
              float64x2_t v646 = v473;
              unsigned int v456 = v505;
              unsigned int v457 = v495;
              float64x2_t v647 = v473;
            }
            else if (v455)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v620, 128, v454, v455);
              unsigned int v457 = v513;
              unsigned int v97 = v514;
              unsigned int v456 = v515;
            }
            else
            {
              float64x2_t v622 = 0u;
              float64x2_t v623 = 0u;
              float64x2_t v620 = 0u;
              float64x2_t v621 = 0u;
              float64x2_t v628 = 0u;
              float64x2_t v629 = 0u;
              float64x2_t v630 = 0u;
              float64x2_t v631 = 0u;
              float64x2_t v636 = 0u;
              float64x2_t v637 = 0u;
              float64x2_t v638 = 0u;
              float64x2_t v639 = 0u;
              float64x2_t v644 = 0u;
              float64x2_t v645 = 0u;
              unsigned int v456 = v505;
              unsigned int v457 = v495;
              float64x2_t v646 = 0u;
              float64x2_t v647 = 0u;
            }
          }
          int v47 = v27 & v479;
          unsigned int v49 = v45 + 1;
          if (v456)
          {
            unint64_t v474 = 0;
            v475 = (char *)&v520 + 128 * (unint64_t)v457 + 8 * v97;
            unsigned int v476 = v516;
            do
            {
              if (v476)
              {
                uint64_t v477 = 0;
                v478 = (char *)v511 + v512 * v474;
                do
                {
                  v478[v477] = v475[v477];
                  ++v477;
                  unsigned int v476 = v516;
                }
                while (8 * (unint64_t)v516 > v477);
                unsigned int v456 = v515;
              }
              ++v474;
              v475 += 128;
            }
            while (v474 < v456);
          }
LABEL_48:
          BOOL v28 = v45 == v497 >> 4;
          unsigned int v45 = v49;
        }
        while (!v28);
        BOOL v28 = v27++ == v484;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v498 = v21;
  uint64_t v499 = v22;
  uint64_t v483 = v23;
  uint64_t v24 = v12;
  uint64_t v646 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v502 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v482 = v14 + a10 - 1;
  unsigned int v484 = v482 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v497 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v484)
  {
    unsigned int v495 = v16 + a9 - 1;
    unsigned int v481 = v16 >> 4;
    if (v16 >> 4 <= v495 >> 4)
    {
      uint64_t v33 = a11;
      unsigned int v478 = v20 - 1;
      unsigned int v506 = (v20 - 1) >> 4;
      int v505 = ((v20 - 1) & 0xF) + 1;
      int v479 = ((v18 - 1) & 0xF) + 1;
      unsigned int v480 = (v18 - 1) >> 4;
      uint64_t v487 = a11;
      uint64_t v488 = 4 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v493 = v35.i32[0] | v35.i32[1];
      BOOL v490 = v35.i32[1] != 0;
      int8x8_t v491 = v35;
      BOOL v489 = v35.i32[0] != 0;
      unint64_t v477 = 8 * v27 * (unint64_t)v26;
      unsigned int v494 = v16;
      uint64_t v504 = v24;
      uint64_t v485 = 3 * a11;
      uint64_t v486 = 2 * a11;
      do
      {
        unsigned int v36 = (16 * v25) | 0xF;
        if (16 * v25 <= v502) {
          int v37 = v502;
        }
        else {
          int v37 = 16 * v25;
        }
        unsigned int v38 = v481;
        if (v482 < v36) {
          unsigned int v36 = v482;
        }
        unsigned int v501 = 16 * v25;
        int v492 = v37 - 16 * v25;
        int v503 = v36 - v37 + 1;
        int v39 = v479;
        if (v25 != v480) {
          int v39 = 16;
        }
        unsigned int v507 = v39;
        uint64_t v500 = v483 + (v37 - v502) * v33;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v495 < v42) {
            unsigned int v42 = v495;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v506) {
            unsigned int v45 = v505;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v501 >= v502 && v41 >= v16)
          {
            int v47 = v505;
            if (v38 != v506) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v503 != v507;
          }
          if (isLevelTiled)
          {
            unsigned int v463 = 0;
            uint64_t v464 = v477 >> (*(unsigned char *)(v24 + 57) != 0);
            char v465 = 1;
            if (v464 > 127)
            {
              if (v464 > 511)
              {
                if (v464 == 512)
                {
                  unsigned int v463 = 16;
                  char v466 = 1;
                  unsigned int v467 = 16;
                }
                else
                {
                  char v466 = 1;
                  unsigned int v467 = 0;
                  if (v464 == 1024)
                  {
                    unsigned int v467 = 8;
                    unsigned int v463 = 16;
                  }
                }
              }
              else if (v464 == 128)
              {
                char v465 = 0;
                char v466 = 0;
                unsigned int v463 = 32;
                unsigned int v467 = 32;
              }
              else
              {
                char v466 = 1;
                unsigned int v467 = 0;
                if (v464 == 256)
                {
                  char v465 = 0;
                  unsigned int v467 = 16;
                  unsigned int v463 = 32;
                }
              }
            }
            else
            {
              char v466 = 1;
              unsigned int v467 = 0;
              switch(v464)
              {
                case 4:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 128;
                  unsigned int v463 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 128;
                  unsigned int v467 = 128;
                  break;
                case 16:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 64;
                  unsigned int v463 = 128;
                  break;
                case 32:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 64;
                  unsigned int v467 = 64;
                  break;
                default:
                  if (v464 == 64)
                  {
                    char v465 = 0;
                    char v466 = 0;
                    unsigned int v467 = 32;
                    unsigned int v463 = 64;
                  }
                  break;
              }
            }
            unsigned int v468 = (v463 >> 4) - 1;
            if (v465)
            {
              unsigned int v469 = 0;
              if (v466) {
                goto LABEL_242;
              }
LABEL_231:
              unsigned int v470 = 32 - __clz(~(-1 << -(char)__clz(((v467 + 15) >> 4) - 1)));
              if (v470 | v469) {
                goto LABEL_232;
              }
LABEL_243:
              uint64_t v472 = 0;
            }
            else
            {
              unsigned int v469 = 32 - __clz(~(-1 << -(char)__clz(v468)));
              if ((v466 & 1) == 0) {
                goto LABEL_231;
              }
LABEL_242:
              unsigned int v470 = 0;
              if (!v469) {
                goto LABEL_243;
              }
LABEL_232:
              int v471 = 0;
              uint64_t v472 = 0;
              int v473 = v38 & v468;
              BOOL v474 = v469 != 0;
              BOOL v475 = v470 != 0;
              int v476 = 1;
              do
              {
                --v469;
                if (v474) {
                  v472 |= (unint64_t)(v476 & v473) << v471++;
                }
                else {
                  unsigned int v469 = 0;
                }
                --v470;
                if (v475) {
                  v472 |= (unint64_t)(v476 & v25 & ((v467 >> 4) - 1)) << v471++;
                }
                else {
                  unsigned int v470 = 0;
                }
                v476 *= 2;
                --v471;
                BOOL v475 = v470 != 0;
                BOOL v474 = v469 != 0;
              }
              while (v470 | v469);
            }
            unint64_t v56 = ((unint64_t)(v41 / v463 + v501 / v467 * ((v463 + v478) / v463)) << 14) + (v472 << 11);
            goto LABEL_59;
          }
          if (v493)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v490;
            BOOL v53 = v489;
            __int32 v54 = v491.i32[1];
            __int32 v55 = v491.i32[0];
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v38) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_59:
          unsigned int v57 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
          }
          if (v62 | v59)
          {
            int v63 = 0;
            unint64_t v64 = 0;
            BOOL v65 = v59 != 0;
            BOOL v66 = v62 != 0;
            int v67 = 1;
            do
            {
              --v59;
              BOOL v68 = !v65;
              if (v65)
              {
                unint64_t v69 = ((unint64_t)(v67 & v38) << v63) | v64;
              }
              else
              {
                unsigned int v59 = 0;
                unint64_t v69 = v64;
              }
              if (!v68) {
                ++v63;
              }
              --v62;
              if (v66)
              {
                unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
              }
              else
              {
                unsigned int v62 = 0;
                unint64_t v64 = v69;
              }
              if (v66) {
                ++v63;
              }
              v67 *= 2;
              --v63;
              BOOL v66 = v62 != 0;
              BOOL v65 = v59 != 0;
            }
            while (v62 | v59);
          }
          else
          {
            unint64_t v64 = 0;
          }
          __int32 v70 = (float64x2_t *)(v498 + v56);
          if (v497)
          {
            memcpy(__dst, v70, sizeof(__dst));
            __int32 v70 = (float64x2_t *)__dst;
          }
          __int32 v71 = (unsigned __int8 *)(v499 + 8 * v64);
          uint64_t v72 = (float64x2_t *)(v500 + 8 * (v43 - v16));
          char v73 = v45 < 0x10 || v46;
          if ((v73 & 1) != 0 || v507 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            unsigned int v81 = v43 - v41;
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v504;
            block[5] = v70;
            char v515 = v45;
            char v516 = v507;
            int v511 = v492;
            unsigned int v512 = v81;
            block[6] = v71;
            unsigned int v509 = v72;
            uint64_t v33 = a11;
            uint64_t v510 = a11;
            int v513 = v503;
            unsigned int v514 = v44;
            if (v46)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v504 + 8) + 7384), block);
              unsigned int v16 = v494;
              uint64_t v24 = v504;
              unsigned int v40 = v38 + 1;
            }
            else
            {
              unsigned int v82 = *v71;
              unsigned int v16 = v494;
              if (v82 == 255)
              {
                float64x2_t v308 = v70[1];
                float64x2_t v309 = v70[3];
                float64x2_t v310 = v70[9];
                float64x2_t v311 = v70[11];
                float64x2_t v312 = v70[2];
                float64x2_t v313 = v70[8];
                float64x2_t v314 = v70[4];
                float64x2_t v315 = v70[6];
                float64x2_t v316 = v70[10];
                float64x2_t v317 = v70[12];
                float64x2_t v318 = v70[13];
                float64x2_t v319 = v70[14];
                float64x2_t v320 = v70[15];
                float64x2_t v321 = v70[5];
                float64x2_t v322 = v70[7];
                float64x2_t v518 = *v70;
                float64x2_t v519 = v312;
                float64x2_t v520 = v313;
                float64x2_t v521 = v316;
                float64x2_t v526 = v308;
                float64x2_t v527 = v309;
                float64x2_t v528 = v310;
                float64x2_t v529 = v311;
                float64x2_t v534 = v314;
                float64x2_t v535 = v315;
                float64x2_t v536 = v317;
                float64x2_t v537 = v319;
                uint64_t v83 = 256;
                float64x2_t v542 = v321;
                float64x2_t v543 = v322;
                float64x2_t v544 = v318;
                float64x2_t v545 = v320;
              }
              else if (v82 == 7)
              {
                float64x2_t v323 = vld1q_dup_f64(v70->f64);
                float64x2_t v518 = v323;
                float64x2_t v519 = v323;
                float64x2_t v520 = v323;
                float64x2_t v521 = v323;
                float64x2_t v526 = v323;
                float64x2_t v527 = v323;
                float64x2_t v528 = v323;
                float64x2_t v529 = v323;
                float64x2_t v534 = v323;
                float64x2_t v535 = v323;
                float64x2_t v536 = v323;
                float64x2_t v537 = v323;
                float64x2_t v542 = v323;
                float64x2_t v543 = v323;
                uint64_t v83 = 8;
                float64x2_t v544 = v323;
                float64x2_t v545 = v323;
              }
              else if (*v71)
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v518, 128, (uint64_t)v70, v82);
              }
              else
              {
                uint64_t v83 = 0;
                float64x2_t v521 = 0u;
                float64x2_t v520 = 0u;
                float64x2_t v519 = 0u;
                float64x2_t v518 = 0u;
                float64x2_t v526 = 0u;
                float64x2_t v527 = 0u;
                float64x2_t v528 = 0u;
                float64x2_t v529 = 0u;
                float64x2_t v534 = 0u;
                float64x2_t v535 = 0u;
                float64x2_t v536 = 0u;
                float64x2_t v537 = 0u;
                float64x2_t v542 = 0u;
                float64x2_t v543 = 0u;
                float64x2_t v544 = 0u;
                float64x2_t v545 = 0u;
              }
              uint64_t v324 = (uint64_t)v70 + v83;
              unsigned int v325 = v71[1];
              if (v325 == 255)
              {
                float64x2_t v327 = *(float64x2_t *)(v324 + 16);
                float64x2_t v328 = *(float64x2_t *)(v324 + 48);
                float64x2_t v329 = *(float64x2_t *)(v324 + 144);
                float64x2_t v330 = *(float64x2_t *)(v324 + 176);
                float64x2_t v331 = *(float64x2_t *)(v324 + 32);
                float64x2_t v332 = *(float64x2_t *)(v324 + 128);
                float64x2_t v333 = *(float64x2_t *)(v324 + 64);
                float64x2_t v334 = *(float64x2_t *)(v324 + 96);
                float64x2_t v335 = *(float64x2_t *)(v324 + 160);
                float64x2_t v336 = *(float64x2_t *)(v324 + 192);
                float64x2_t v337 = *(float64x2_t *)(v324 + 208);
                float64x2_t v338 = *(float64x2_t *)(v324 + 224);
                float64x2_t v339 = *(float64x2_t *)(v324 + 240);
                float64x2_t v340 = *(float64x2_t *)(v324 + 80);
                float64x2_t v341 = *(float64x2_t *)(v324 + 112);
                float64x2_t v550 = *(float64x2_t *)v324;
                float64x2_t v551 = v331;
                float64x2_t v552 = v332;
                float64x2_t v553 = v335;
                float64x2_t v558 = v327;
                float64x2_t v559 = v328;
                float64x2_t v560 = v329;
                float64x2_t v561 = v330;
                float64x2_t v566 = v333;
                float64x2_t v567 = v334;
                float64x2_t v568 = v336;
                float64x2_t v569 = v338;
                uint64_t v326 = 256;
                float64x2_t v574 = v340;
                float64x2_t v575 = v341;
                float64x2_t v576 = v337;
                float64x2_t v577 = v339;
              }
              else if (v325 == 7)
              {
                float64x2_t v342 = vld1q_dup_f64((const double *)v324);
                float64x2_t v550 = v342;
                float64x2_t v551 = v342;
                float64x2_t v552 = v342;
                float64x2_t v553 = v342;
                float64x2_t v558 = v342;
                float64x2_t v559 = v342;
                float64x2_t v560 = v342;
                float64x2_t v561 = v342;
                float64x2_t v566 = v342;
                float64x2_t v567 = v342;
                float64x2_t v568 = v342;
                float64x2_t v569 = v342;
                float64x2_t v574 = v342;
                float64x2_t v575 = v342;
                uint64_t v326 = 8;
                float64x2_t v576 = v342;
                float64x2_t v577 = v342;
              }
              else if (v71[1])
              {
                uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v550, 128, v324, v325);
              }
              else
              {
                uint64_t v326 = 0;
                float64x2_t v552 = 0u;
                float64x2_t v553 = 0u;
                float64x2_t v550 = 0u;
                float64x2_t v551 = 0u;
                float64x2_t v558 = 0u;
                float64x2_t v559 = 0u;
                float64x2_t v560 = 0u;
                float64x2_t v561 = 0u;
                float64x2_t v566 = 0u;
                float64x2_t v567 = 0u;
                float64x2_t v568 = 0u;
                float64x2_t v569 = 0u;
                float64x2_t v574 = 0u;
                float64x2_t v575 = 0u;
                float64x2_t v576 = 0u;
                float64x2_t v577 = 0u;
              }
              uint64_t v343 = v324 + v326;
              unsigned int v344 = v71[2];
              if (v344 == 255)
              {
                float64x2_t v346 = *(float64x2_t *)(v343 + 16);
                float64x2_t v347 = *(float64x2_t *)(v343 + 48);
                float64x2_t v348 = *(float64x2_t *)(v343 + 144);
                float64x2_t v349 = *(float64x2_t *)(v343 + 176);
                float64x2_t v350 = *(float64x2_t *)(v343 + 32);
                float64x2_t v351 = *(float64x2_t *)(v343 + 128);
                float64x2_t v352 = *(float64x2_t *)(v343 + 64);
                float64x2_t v353 = *(float64x2_t *)(v343 + 96);
                float64x2_t v354 = *(float64x2_t *)(v343 + 160);
                float64x2_t v355 = *(float64x2_t *)(v343 + 192);
                float64x2_t v356 = *(float64x2_t *)(v343 + 208);
                float64x2_t v357 = *(float64x2_t *)(v343 + 224);
                float64x2_t v358 = *(float64x2_t *)(v343 + 240);
                float64x2_t v359 = *(float64x2_t *)(v343 + 80);
                float64x2_t v360 = *(float64x2_t *)(v343 + 112);
                float64x2_t v522 = *(float64x2_t *)v343;
                float64x2_t v523 = v350;
                float64x2_t v524 = v351;
                float64x2_t v525 = v354;
                float64x2_t v530 = v346;
                float64x2_t v531 = v347;
                float64x2_t v532 = v348;
                float64x2_t v533 = v349;
                float64x2_t v538 = v352;
                float64x2_t v539 = v353;
                float64x2_t v540 = v355;
                float64x2_t v541 = v357;
                uint64_t v345 = 256;
                float64x2_t v546 = v359;
                float64x2_t v547 = v360;
                float64x2_t v548 = v356;
                float64x2_t v549 = v358;
              }
              else if (v344 == 7)
              {
                float64x2_t v361 = vld1q_dup_f64((const double *)v343);
                float64x2_t v522 = v361;
                float64x2_t v523 = v361;
                float64x2_t v524 = v361;
                float64x2_t v525 = v361;
                float64x2_t v530 = v361;
                float64x2_t v531 = v361;
                float64x2_t v532 = v361;
                float64x2_t v533 = v361;
                float64x2_t v538 = v361;
                float64x2_t v539 = v361;
                float64x2_t v540 = v361;
                float64x2_t v541 = v361;
                float64x2_t v546 = v361;
                float64x2_t v547 = v361;
                uint64_t v345 = 8;
                float64x2_t v548 = v361;
                float64x2_t v549 = v361;
              }
              else if (v71[2])
              {
                uint64_t v345 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v522, 128, v343, v344);
              }
              else
              {
                uint64_t v345 = 0;
                float64x2_t v524 = 0u;
                float64x2_t v525 = 0u;
                float64x2_t v522 = 0u;
                float64x2_t v523 = 0u;
                float64x2_t v530 = 0u;
                float64x2_t v531 = 0u;
                float64x2_t v532 = 0u;
                float64x2_t v533 = 0u;
                float64x2_t v538 = 0u;
                float64x2_t v539 = 0u;
                float64x2_t v540 = 0u;
                float64x2_t v541 = 0u;
                float64x2_t v546 = 0u;
                float64x2_t v547 = 0u;
                float64x2_t v548 = 0u;
                float64x2_t v549 = 0u;
              }
              uint64_t v362 = v343 + v345;
              unsigned int v363 = v71[3];
              if (v363 == 255)
              {
                float64x2_t v365 = *(float64x2_t *)(v362 + 16);
                float64x2_t v366 = *(float64x2_t *)(v362 + 48);
                float64x2_t v367 = *(float64x2_t *)(v362 + 144);
                float64x2_t v368 = *(float64x2_t *)(v362 + 176);
                float64x2_t v369 = *(float64x2_t *)(v362 + 32);
                float64x2_t v370 = *(float64x2_t *)(v362 + 128);
                float64x2_t v371 = *(float64x2_t *)(v362 + 64);
                float64x2_t v372 = *(float64x2_t *)(v362 + 96);
                float64x2_t v373 = *(float64x2_t *)(v362 + 160);
                float64x2_t v374 = *(float64x2_t *)(v362 + 192);
                float64x2_t v375 = *(float64x2_t *)(v362 + 208);
                float64x2_t v376 = *(float64x2_t *)(v362 + 224);
                float64x2_t v377 = *(float64x2_t *)(v362 + 240);
                float64x2_t v378 = *(float64x2_t *)(v362 + 80);
                float64x2_t v379 = *(float64x2_t *)(v362 + 112);
                float64x2_t v554 = *(float64x2_t *)v362;
                float64x2_t v555 = v369;
                float64x2_t v556 = v370;
                float64x2_t v557 = v373;
                float64x2_t v562 = v365;
                float64x2_t v563 = v366;
                float64x2_t v564 = v367;
                float64x2_t v565 = v368;
                float64x2_t v570 = v371;
                float64x2_t v571 = v372;
                float64x2_t v572 = v374;
                float64x2_t v573 = v376;
                uint64_t v364 = 256;
                float64x2_t v578 = v378;
                float64x2_t v579 = v379;
                float64x2_t v580 = v375;
                float64x2_t v581 = v377;
              }
              else if (v363 == 7)
              {
                float64x2_t v380 = vld1q_dup_f64((const double *)v362);
                float64x2_t v554 = v380;
                float64x2_t v555 = v380;
                float64x2_t v556 = v380;
                float64x2_t v557 = v380;
                float64x2_t v562 = v380;
                float64x2_t v563 = v380;
                float64x2_t v564 = v380;
                float64x2_t v565 = v380;
                float64x2_t v570 = v380;
                float64x2_t v571 = v380;
                float64x2_t v572 = v380;
                float64x2_t v573 = v380;
                float64x2_t v578 = v380;
                float64x2_t v579 = v380;
                uint64_t v364 = 8;
                float64x2_t v580 = v380;
                float64x2_t v581 = v380;
              }
              else if (v71[3])
              {
                uint64_t v364 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v554, 128, v362, v363);
              }
              else
              {
                uint64_t v364 = 0;
                float64x2_t v556 = 0u;
                float64x2_t v557 = 0u;
                float64x2_t v554 = 0u;
                float64x2_t v555 = 0u;
                float64x2_t v562 = 0u;
                float64x2_t v563 = 0u;
                float64x2_t v564 = 0u;
                float64x2_t v565 = 0u;
                float64x2_t v570 = 0u;
                float64x2_t v571 = 0u;
                float64x2_t v572 = 0u;
                float64x2_t v573 = 0u;
                float64x2_t v578 = 0u;
                float64x2_t v579 = 0u;
                float64x2_t v580 = 0u;
                float64x2_t v581 = 0u;
              }
              uint64_t v381 = v362 + v364;
              unsigned int v382 = v71[4];
              if (v382 == 255)
              {
                float64x2_t v384 = *(float64x2_t *)(v381 + 16);
                float64x2_t v385 = *(float64x2_t *)(v381 + 48);
                float64x2_t v386 = *(float64x2_t *)(v381 + 144);
                float64x2_t v387 = *(float64x2_t *)(v381 + 176);
                float64x2_t v388 = *(float64x2_t *)(v381 + 32);
                float64x2_t v389 = *(float64x2_t *)(v381 + 128);
                float64x2_t v390 = *(float64x2_t *)(v381 + 64);
                float64x2_t v391 = *(float64x2_t *)(v381 + 96);
                float64x2_t v392 = *(float64x2_t *)(v381 + 160);
                float64x2_t v393 = *(float64x2_t *)(v381 + 192);
                float64x2_t v394 = *(float64x2_t *)(v381 + 208);
                float64x2_t v395 = *(float64x2_t *)(v381 + 224);
                float64x2_t v396 = *(float64x2_t *)(v381 + 240);
                float64x2_t v397 = *(float64x2_t *)(v381 + 80);
                float64x2_t v398 = *(float64x2_t *)(v381 + 112);
                float64x2_t v582 = *(float64x2_t *)v381;
                float64x2_t v583 = v388;
                float64x2_t v584 = v389;
                float64x2_t v585 = v392;
                float64x2_t v590 = v384;
                float64x2_t v591 = v385;
                float64x2_t v592 = v386;
                float64x2_t v593 = v387;
                float64x2_t v598 = v390;
                float64x2_t v599 = v391;
                float64x2_t v600 = v393;
                float64x2_t v601 = v395;
                uint64_t v383 = 256;
                float64x2_t v606 = v397;
                float64x2_t v607 = v398;
                float64x2_t v608 = v394;
                float64x2_t v609 = v396;
              }
              else if (v382 == 7)
              {
                float64x2_t v399 = vld1q_dup_f64((const double *)v381);
                float64x2_t v582 = v399;
                float64x2_t v583 = v399;
                float64x2_t v584 = v399;
                float64x2_t v585 = v399;
                float64x2_t v590 = v399;
                float64x2_t v591 = v399;
                float64x2_t v592 = v399;
                float64x2_t v593 = v399;
                float64x2_t v598 = v399;
                float64x2_t v599 = v399;
                float64x2_t v600 = v399;
                float64x2_t v601 = v399;
                float64x2_t v606 = v399;
                float64x2_t v607 = v399;
                float64x2_t v608 = v399;
                uint64_t v383 = 8;
                float64x2_t v609 = v399;
              }
              else if (v71[4])
              {
                uint64_t v383 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v582, 128, v381, v382);
              }
              else
              {
                uint64_t v383 = 0;
                float64x2_t v584 = 0u;
                float64x2_t v585 = 0u;
                float64x2_t v582 = 0u;
                float64x2_t v583 = 0u;
                float64x2_t v590 = 0u;
                float64x2_t v591 = 0u;
                float64x2_t v592 = 0u;
                float64x2_t v593 = 0u;
                float64x2_t v598 = 0u;
                float64x2_t v599 = 0u;
                float64x2_t v600 = 0u;
                float64x2_t v601 = 0u;
                float64x2_t v606 = 0u;
                float64x2_t v607 = 0u;
                float64x2_t v608 = 0u;
                float64x2_t v609 = 0u;
              }
              uint64_t v400 = v381 + v383;
              unsigned int v401 = v71[5];
              if (v401 == 255)
              {
                float64x2_t v403 = *(float64x2_t *)(v400 + 16);
                float64x2_t v404 = *(float64x2_t *)(v400 + 48);
                float64x2_t v405 = *(float64x2_t *)(v400 + 144);
                float64x2_t v406 = *(float64x2_t *)(v400 + 176);
                float64x2_t v407 = *(float64x2_t *)(v400 + 32);
                float64x2_t v408 = *(float64x2_t *)(v400 + 128);
                float64x2_t v409 = *(float64x2_t *)(v400 + 64);
                float64x2_t v410 = *(float64x2_t *)(v400 + 96);
                float64x2_t v411 = *(float64x2_t *)(v400 + 160);
                float64x2_t v412 = *(float64x2_t *)(v400 + 192);
                float64x2_t v413 = *(float64x2_t *)(v400 + 208);
                float64x2_t v414 = *(float64x2_t *)(v400 + 224);
                float64x2_t v415 = *(float64x2_t *)(v400 + 240);
                float64x2_t v416 = *(float64x2_t *)(v400 + 80);
                float64x2_t v417 = *(float64x2_t *)(v400 + 112);
                float64x2_t v614 = *(float64x2_t *)v400;
                float64x2_t v615 = v407;
                float64x2_t v616 = v408;
                float64x2_t v617 = v411;
                float64x2_t v622 = v403;
                float64x2_t v623 = v404;
                float64x2_t v624 = v405;
                float64x2_t v625 = v406;
                float64x2_t v630 = v409;
                float64x2_t v631 = v410;
                float64x2_t v632 = v412;
                float64x2_t v633 = v414;
                uint64_t v402 = 256;
                float64x2_t v638 = v416;
                float64x2_t v639 = v417;
                float64x2_t v640 = v413;
                float64x2_t v641 = v415;
              }
              else if (v401 == 7)
              {
                float64x2_t v418 = vld1q_dup_f64((const double *)v400);
                float64x2_t v614 = v418;
                float64x2_t v615 = v418;
                float64x2_t v616 = v418;
                float64x2_t v617 = v418;
                float64x2_t v622 = v418;
                float64x2_t v623 = v418;
                float64x2_t v624 = v418;
                float64x2_t v625 = v418;
                float64x2_t v630 = v418;
                float64x2_t v631 = v418;
                float64x2_t v632 = v418;
                float64x2_t v633 = v418;
                float64x2_t v638 = v418;
                float64x2_t v639 = v418;
                float64x2_t v640 = v418;
                uint64_t v402 = 8;
                float64x2_t v641 = v418;
              }
              else if (v71[5])
              {
                uint64_t v402 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v614, 128, v400, v401);
              }
              else
              {
                uint64_t v402 = 0;
                float64x2_t v616 = 0u;
                float64x2_t v617 = 0u;
                float64x2_t v614 = 0u;
                float64x2_t v615 = 0u;
                float64x2_t v622 = 0u;
                float64x2_t v623 = 0u;
                float64x2_t v624 = 0u;
                float64x2_t v625 = 0u;
                float64x2_t v630 = 0u;
                float64x2_t v631 = 0u;
                float64x2_t v632 = 0u;
                float64x2_t v633 = 0u;
                float64x2_t v638 = 0u;
                float64x2_t v639 = 0u;
                float64x2_t v640 = 0u;
                float64x2_t v641 = 0u;
              }
              uint64_t v419 = v400 + v402;
              unsigned int v420 = v71[6];
              if (v420 == 255)
              {
                float64x2_t v422 = *(float64x2_t *)(v419 + 16);
                float64x2_t v423 = *(float64x2_t *)(v419 + 48);
                float64x2_t v424 = *(float64x2_t *)(v419 + 144);
                float64x2_t v425 = *(float64x2_t *)(v419 + 176);
                float64x2_t v426 = *(float64x2_t *)(v419 + 32);
                float64x2_t v427 = *(float64x2_t *)(v419 + 128);
                float64x2_t v428 = *(float64x2_t *)(v419 + 64);
                float64x2_t v429 = *(float64x2_t *)(v419 + 96);
                float64x2_t v430 = *(float64x2_t *)(v419 + 160);
                float64x2_t v431 = *(float64x2_t *)(v419 + 192);
                float64x2_t v432 = *(float64x2_t *)(v419 + 208);
                float64x2_t v433 = *(float64x2_t *)(v419 + 224);
                float64x2_t v434 = *(float64x2_t *)(v419 + 240);
                float64x2_t v435 = *(float64x2_t *)(v419 + 80);
                float64x2_t v436 = *(float64x2_t *)(v419 + 112);
                float64x2_t v586 = *(float64x2_t *)v419;
                float64x2_t v587 = v426;
                float64x2_t v588 = v427;
                float64x2_t v589 = v430;
                float64x2_t v594 = v422;
                float64x2_t v595 = v423;
                float64x2_t v596 = v424;
                float64x2_t v597 = v425;
                float64x2_t v602 = v428;
                float64x2_t v603 = v429;
                float64x2_t v604 = v431;
                float64x2_t v605 = v433;
                uint64_t v421 = 256;
                float64x2_t v610 = v435;
                float64x2_t v611 = v436;
                float64x2_t v612 = v432;
                float64x2_t v613 = v434;
              }
              else if (v420 == 7)
              {
                float64x2_t v437 = vld1q_dup_f64((const double *)v419);
                float64x2_t v586 = v437;
                float64x2_t v587 = v437;
                float64x2_t v588 = v437;
                float64x2_t v589 = v437;
                float64x2_t v594 = v437;
                float64x2_t v595 = v437;
                float64x2_t v596 = v437;
                float64x2_t v597 = v437;
                float64x2_t v602 = v437;
                float64x2_t v603 = v437;
                float64x2_t v604 = v437;
                float64x2_t v605 = v437;
                float64x2_t v610 = v437;
                float64x2_t v611 = v437;
                float64x2_t v612 = v437;
                uint64_t v421 = 8;
                float64x2_t v613 = v437;
              }
              else if (v71[6])
              {
                uint64_t v421 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v586, 128, v419, v420);
              }
              else
              {
                uint64_t v421 = 0;
                float64x2_t v588 = 0u;
                float64x2_t v589 = 0u;
                float64x2_t v586 = 0u;
                float64x2_t v587 = 0u;
                float64x2_t v594 = 0u;
                float64x2_t v595 = 0u;
                float64x2_t v596 = 0u;
                float64x2_t v597 = 0u;
                float64x2_t v602 = 0u;
                float64x2_t v603 = 0u;
                float64x2_t v604 = 0u;
                float64x2_t v605 = 0u;
                float64x2_t v610 = 0u;
                float64x2_t v611 = 0u;
                float64x2_t v612 = 0u;
                float64x2_t v613 = 0u;
              }
              uint64_t v438 = v419 + v421;
              unsigned int v439 = v71[7];
              if (v439 == 255)
              {
                float64x2_t v442 = *(float64x2_t *)(v438 + 16);
                float64x2_t v443 = *(float64x2_t *)(v438 + 48);
                float64x2_t v444 = *(float64x2_t *)(v438 + 144);
                float64x2_t v445 = *(float64x2_t *)(v438 + 176);
                float64x2_t v446 = *(float64x2_t *)(v438 + 32);
                float64x2_t v447 = *(float64x2_t *)(v438 + 128);
                float64x2_t v448 = *(float64x2_t *)(v438 + 160);
                float64x2_t v449 = *(float64x2_t *)(v438 + 64);
                float64x2_t v450 = *(float64x2_t *)(v438 + 96);
                float64x2_t v451 = *(float64x2_t *)(v438 + 192);
                float64x2_t v452 = *(float64x2_t *)(v438 + 224);
                float64x2_t v453 = *(float64x2_t *)(v438 + 240);
                float64x2_t v454 = *(float64x2_t *)(v438 + 80);
                float64x2_t v455 = *(float64x2_t *)(v438 + 112);
                float64x2_t v456 = *(float64x2_t *)(v438 + 208);
                float64x2_t v618 = *(float64x2_t *)v438;
                float64x2_t v619 = v446;
                float64x2_t v620 = v447;
                float64x2_t v621 = v448;
                float64x2_t v626 = v442;
                float64x2_t v627 = v443;
                float64x2_t v628 = v444;
                float64x2_t v629 = v445;
                float64x2_t v634 = v449;
                float64x2_t v635 = v450;
                float64x2_t v636 = v451;
                float64x2_t v637 = v452;
                unsigned int v440 = v503;
                unsigned int v441 = v492;
                float64x2_t v642 = v454;
                float64x2_t v643 = v455;
                float64x2_t v644 = v456;
                float64x2_t v645 = v453;
                uint64_t v24 = v504;
                unsigned int v40 = v38 + 1;
              }
              else
              {
                uint64_t v24 = v504;
                unsigned int v40 = v38 + 1;
                if (v439 == 7)
                {
                  float64x2_t v457 = vld1q_dup_f64((const double *)v438);
                  float64x2_t v618 = v457;
                  float64x2_t v619 = v457;
                  float64x2_t v620 = v457;
                  float64x2_t v621 = v457;
                  float64x2_t v626 = v457;
                  float64x2_t v627 = v457;
                  float64x2_t v628 = v457;
                  float64x2_t v629 = v457;
                  float64x2_t v634 = v457;
                  float64x2_t v635 = v457;
                  float64x2_t v636 = v457;
                  float64x2_t v637 = v457;
                  float64x2_t v642 = v457;
                  float64x2_t v643 = v457;
                  float64x2_t v644 = v457;
                  unsigned int v440 = v503;
                  unsigned int v441 = v492;
                  float64x2_t v645 = v457;
                }
                else if (v439)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v618, 128, v438, v439);
                  unsigned int v441 = v511;
                  unsigned int v81 = v512;
                  unsigned int v440 = v513;
                }
                else
                {
                  float64x2_t v620 = 0u;
                  float64x2_t v621 = 0u;
                  float64x2_t v618 = 0u;
                  float64x2_t v619 = 0u;
                  float64x2_t v626 = 0u;
                  float64x2_t v627 = 0u;
                  float64x2_t v628 = 0u;
                  float64x2_t v629 = 0u;
                  float64x2_t v634 = 0u;
                  float64x2_t v635 = 0u;
                  float64x2_t v636 = 0u;
                  float64x2_t v637 = 0u;
                  float64x2_t v642 = 0u;
                  float64x2_t v643 = 0u;
                  unsigned int v440 = v503;
                  unsigned int v441 = v492;
                  float64x2_t v644 = 0u;
                  float64x2_t v645 = 0u;
                }
              }
              if (v440)
              {
                unint64_t v458 = 0;
                float64x2_t v459 = (char *)&v518 + 128 * (unint64_t)v441 + 8 * v81;
                unsigned int v460 = v514;
                do
                {
                  if (v460)
                  {
                    uint64_t v461 = 0;
                    float64x2_t v462 = (char *)v509 + v510 * v458;
                    do
                    {
                      v462[v461] = v459[v461];
                      ++v461;
                      unsigned int v460 = v514;
                    }
                    while (8 * (unint64_t)v514 > v461);
                    unsigned int v440 = v513;
                  }
                  ++v458;
                  v459 += 128;
                }
                while (v458 < v440);
              }
            }
          }
          else
          {
            unsigned int v74 = *v71;
            if (v74 == 255)
            {
              float64x2_t v88 = v70[1];
              float64x2_t v89 = v70[3];
              float64x2_t v90 = v70[9];
              float64x2_t v91 = v70[11];
              float64x2_t v92 = v70[4];
              float64x2_t v93 = v70[2];
              float64x2_t v94 = v70[12];
              float64x2_t v95 = v70[14];
              float64x2_t v96 = v70[15];
              float64x2_t v97 = v70[8];
              float64x2_t v98 = v70[10];
              float64x2_t v99 = v70[5];
              float64x2_t v100 = v70[7];
              float64x2_t v101 = v70[13];
              float64x2_t v102 = v70[6];
              uint64_t v75 = 2 * a11;
              float64x2_t *v72 = *v70;
              v72[1] = v93;
              v72[2] = v97;
              v72[3] = v98;
              uint64_t v103 = (float64x2_t *)((char *)v72 + v486);
              uint64_t v33 = a11;
              float64x2_t v104 = (float64x2_t *)((char *)v72 + a11);
              *float64x2_t v104 = v88;
              v104[1] = v89;
              v104[2] = v90;
              v104[3] = v91;
              *uint64_t v103 = v92;
              v103[1] = v102;
              v103[2] = v94;
              v103[3] = v95;
              float64x2_t v105 = (float64x2_t *)((char *)v72 + v486 + a11);
              uint64_t v77 = 256;
              *float64x2_t v105 = v99;
              v105[1] = v100;
              v105[2] = v101;
              v105[3] = v96;
              uint64_t v76 = 3 * a11;
            }
            else
            {
              uint64_t v33 = a11;
              uint64_t v76 = 3 * a11;
              uint64_t v75 = 2 * a11;
              if (v74 == 7)
              {
                float64x2_t v84 = vld1q_dup_f64(v70->f64);
                float64x2_t *v72 = v84;
                v72[1] = v84;
                v72[2] = v84;
                v72[3] = v84;
                unint64_t v85 = (float64x2_t *)((char *)v72 + a11);
                float64x2_t *v85 = v84;
                v85[1] = v84;
                v85[2] = v84;
                v85[3] = v84;
                int32x4_t v86 = (float64x2_t *)((char *)v72 + v486);
                float64x2_t *v86 = v84;
                v86[1] = v84;
                v86[2] = v84;
                v86[3] = v84;
                int32x4_t v87 = (float64x2_t *)((char *)v72 + v485);
                *int32x4_t v87 = v84;
                v87[1] = v84;
                v87[2] = v84;
                v87[3] = v84;
                uint64_t v77 = 8;
              }
              else if (*v71)
              {
                uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v72, a11, (uint64_t)v70, v74);
              }
              else
              {
                uint64_t v77 = 0;
                v72[2] = 0u;
                v72[3] = 0u;
                float64x2_t *v72 = 0u;
                v72[1] = 0u;
                unsigned int v78 = (_OWORD *)((char *)v72->f64 + a11);
                v78[2] = 0u;
                v78[3] = 0u;
                *unsigned int v78 = 0u;
                v78[1] = 0u;
                int v79 = (_OWORD *)((char *)v72->f64 + v486);
                v79[2] = 0u;
                v79[3] = 0u;
                *int v79 = 0u;
                v79[1] = 0u;
                unint64_t v80 = (_OWORD *)((char *)v72->f64 + v485);
                v80[2] = 0u;
                v80[3] = 0u;
                *unint64_t v80 = 0u;
                v80[1] = 0u;
              }
            }
            uint64_t v106 = (uint64_t)v70 + v77;
            float64x2_t v107 = (float64x2_t *)((char *)v72 + v488);
            unsigned int v108 = v71[1];
            if (v108 == 255)
            {
              long long v117 = *(_OWORD *)(v106 + 16);
              long long v118 = *(_OWORD *)(v106 + 48);
              long long v119 = *(_OWORD *)(v106 + 144);
              long long v120 = *(_OWORD *)(v106 + 176);
              long long v121 = *(_OWORD *)(v106 + 64);
              float64x2_t v122 = *(float64x2_t *)(v106 + 32);
              long long v123 = *(_OWORD *)(v106 + 192);
              long long v124 = *(_OWORD *)(v106 + 224);
              long long v125 = *(_OWORD *)(v106 + 240);
              float64x2_t v126 = *(float64x2_t *)(v106 + 128);
              float64x2_t v127 = *(float64x2_t *)(v106 + 160);
              long long v128 = *(_OWORD *)(v106 + 80);
              long long v129 = *(_OWORD *)(v106 + 112);
              long long v130 = *(_OWORD *)(v106 + 208);
              long long v131 = *(_OWORD *)(v106 + 96);
              float64x2_t *v107 = *(float64x2_t *)v106;
              v107[1] = v122;
              v107[2] = v126;
              v107[3] = v127;
              uint64_t v132 = (_OWORD *)((char *)v107->f64 + v75);
              long long v133 = (_OWORD *)((char *)v107->f64 + v33);
              _OWORD *v133 = v117;
              v133[1] = v118;
              v133[2] = v119;
              v133[3] = v120;
              *uint64_t v132 = v121;
              v132[1] = v131;
              v132[2] = v123;
              v132[3] = v124;
              long long v134 = (_OWORD *)((char *)v107->f64 + v75 + v33);
              uint64_t v109 = 256;
              _OWORD *v134 = v128;
              v134[1] = v129;
              v134[2] = v130;
              v134[3] = v125;
            }
            else if (v108 == 7)
            {
              float64x2_t v113 = vld1q_dup_f64((const double *)v106);
              float64x2_t *v107 = v113;
              v107[1] = v113;
              v107[2] = v113;
              v107[3] = v113;
              float64x2_t v114 = (float64x2_t *)((char *)v107 + v33);
              *float64x2_t v114 = v113;
              v114[1] = v113;
              v114[2] = v113;
              v114[3] = v113;
              float64x2_t v115 = (float64x2_t *)((char *)v107 + v75);
              *float64x2_t v115 = v113;
              v115[1] = v113;
              v115[2] = v113;
              v115[3] = v113;
              float64x2_t v116 = (float64x2_t *)((char *)v107 + v76);
              *float64x2_t v116 = v113;
              v116[1] = v113;
              v116[2] = v113;
              v116[3] = v113;
              uint64_t v109 = 8;
            }
            else if (v71[1])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((float64_t *)((char *)v72->f64 + v488), v33, v106, v108);
            }
            else
            {
              uint64_t v109 = 0;
              v107[2] = 0u;
              v107[3] = 0u;
              float64x2_t *v107 = 0u;
              v107[1] = 0u;
              float64x2_t v110 = (_OWORD *)((char *)v107->f64 + v33);
              v110[2] = 0u;
              v110[3] = 0u;
              *float64x2_t v110 = 0u;
              v110[1] = 0u;
              float64x2_t v111 = (_OWORD *)((char *)v107->f64 + v75);
              v111[2] = 0u;
              v111[3] = 0u;
              _OWORD *v111 = 0u;
              v111[1] = 0u;
              float64x2_t v112 = (_OWORD *)((char *)v107->f64 + v76);
              v112[2] = 0u;
              v112[3] = 0u;
              _OWORD *v112 = 0u;
              v112[1] = 0u;
            }
            uint64_t v135 = v106 + v109;
            f64 = (_OWORD *)v72[4].f64;
            unsigned int v137 = v71[2];
            if (v137 == 255)
            {
              long long v146 = *(_OWORD *)(v135 + 16);
              long long v147 = *(_OWORD *)(v135 + 48);
              long long v148 = *(_OWORD *)(v135 + 144);
              long long v149 = *(_OWORD *)(v135 + 176);
              long long v150 = *(_OWORD *)(v135 + 64);
              float64x2_t v151 = *(float64x2_t *)(v135 + 32);
              long long v152 = *(_OWORD *)(v135 + 192);
              long long v153 = *(_OWORD *)(v135 + 224);
              long long v154 = *(_OWORD *)(v135 + 240);
              float64x2_t v155 = *(float64x2_t *)(v135 + 128);
              float64x2_t v156 = *(float64x2_t *)(v135 + 160);
              long long v157 = *(_OWORD *)(v135 + 80);
              long long v158 = *(_OWORD *)(v135 + 112);
              long long v159 = *(_OWORD *)(v135 + 208);
              long long v160 = *(_OWORD *)(v135 + 96);
              _OWORD *f64 = *(_OWORD *)v135;
              v72[5] = v151;
              v72[6] = v155;
              v72[7] = v156;
              int32x4_t v161 = (_OWORD *)((char *)f64 + v75);
              long long v162 = (_OWORD *)((char *)f64 + v33);
              *long long v162 = v146;
              v162[1] = v147;
              v162[2] = v148;
              v162[3] = v149;
              *int32x4_t v161 = v150;
              v161[1] = v160;
              v161[2] = v152;
              v161[3] = v153;
              long long v163 = (_OWORD *)((char *)f64 + v75 + v33);
              uint64_t v138 = 256;
              *long long v163 = v157;
              v163[1] = v158;
              v163[2] = v159;
              v163[3] = v154;
            }
            else if (v137 == 7)
            {
              float64x2_t v142 = vld1q_dup_f64((const double *)v135);
              v72[4] = v142;
              v72[5] = v142;
              v72[6] = v142;
              v72[7] = v142;
              float64x2_t v143 = (float64x2_t *)((char *)f64 + v33);
              *float64x2_t v143 = v142;
              v143[1] = v142;
              v143[2] = v142;
              v143[3] = v142;
              long long v144 = (float64x2_t *)((char *)f64 + v75);
              float64x2_t *v144 = v142;
              v144[1] = v142;
              int64x2_t v144[2] = v142;
              v144[3] = v142;
              long long v145 = (float64x2_t *)((char *)f64 + v76);
              float64x2_t *v145 = v142;
              v145[1] = v142;
              uint64_t v138 = 8;
              v145[2] = v142;
              v145[3] = v142;
            }
            else if (v71[2])
            {
              uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(f64, v33, v135, v137);
            }
            else
            {
              uint64_t v138 = 0;
              v72[6] = 0u;
              v72[7] = 0u;
              _OWORD *f64 = 0u;
              v72[5] = 0u;
              long long v139 = (_OWORD *)((char *)f64 + v33);
              v139[2] = 0u;
              v139[3] = 0u;
              *long long v139 = 0u;
              v139[1] = 0u;
              long long v140 = (_OWORD *)((char *)f64 + v75);
              int64x2_t v140[2] = 0u;
              v140[3] = 0u;
              *long long v140 = 0u;
              v140[1] = 0u;
              long long v141 = (_OWORD *)((char *)f64 + v76);
              v141[2] = 0u;
              v141[3] = 0u;
              *long long v141 = 0u;
              v141[1] = 0u;
            }
            uint64_t v164 = v135 + v138;
            long long v165 = (_OWORD *)v107[4].f64;
            unsigned int v166 = v71[3];
            if (v166 == 255)
            {
              long long v175 = *(_OWORD *)(v164 + 16);
              long long v176 = *(_OWORD *)(v164 + 48);
              long long v177 = *(_OWORD *)(v164 + 144);
              long long v178 = *(_OWORD *)(v164 + 176);
              long long v179 = *(_OWORD *)(v164 + 64);
              float64x2_t v180 = *(float64x2_t *)(v164 + 32);
              long long v181 = *(_OWORD *)(v164 + 192);
              long long v182 = *(_OWORD *)(v164 + 224);
              long long v183 = *(_OWORD *)(v164 + 240);
              float64x2_t v184 = *(float64x2_t *)(v164 + 128);
              float64x2_t v185 = *(float64x2_t *)(v164 + 160);
              long long v186 = *(_OWORD *)(v164 + 80);
              long long v187 = *(_OWORD *)(v164 + 112);
              long long v188 = *(_OWORD *)(v164 + 208);
              long long v189 = *(_OWORD *)(v164 + 96);
              *long long v165 = *(_OWORD *)v164;
              v107[5] = v180;
              v107[6] = v184;
              v107[7] = v185;
              int32x4_t v190 = (_OWORD *)((char *)v165 + v75);
              long long v191 = (_OWORD *)((char *)v165 + v33);
              *long long v191 = v175;
              v191[1] = v176;
              v191[2] = v177;
              v191[3] = v178;
              _OWORD *v190 = v179;
              v190[1] = v189;
              v190[2] = v181;
              v190[3] = v182;
              long long v192 = (_OWORD *)((char *)v165 + v75 + v33);
              uint64_t v167 = 256;
              *long long v192 = v186;
              v192[1] = v187;
              v192[2] = v188;
              v192[3] = v183;
            }
            else if (v166 == 7)
            {
              float64x2_t v171 = vld1q_dup_f64((const double *)v164);
              v107[4] = v171;
              v107[5] = v171;
              v107[6] = v171;
              v107[7] = v171;
              float64x2_t v172 = (float64x2_t *)((char *)v165 + v33);
              *float64x2_t v172 = v171;
              v172[1] = v171;
              v172[2] = v171;
              v172[3] = v171;
              long long v173 = (float64x2_t *)((char *)v165 + v75);
              float64x2_t *v173 = v171;
              v173[1] = v171;
              v173[2] = v171;
              v173[3] = v171;
              long long v174 = (float64x2_t *)((char *)v165 + v76);
              float64x2_t *v174 = v171;
              v174[1] = v171;
              uint64_t v167 = 8;
              v174[2] = v171;
              v174[3] = v171;
            }
            else if (v71[3])
            {
              uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v165, v33, v164, v166);
            }
            else
            {
              uint64_t v167 = 0;
              v107[6] = 0u;
              v107[7] = 0u;
              *long long v165 = 0u;
              v107[5] = 0u;
              long long v168 = (_OWORD *)((char *)v165 + v33);
              v168[2] = 0u;
              v168[3] = 0u;
              _OWORD *v168 = 0u;
              v168[1] = 0u;
              long long v169 = (_OWORD *)((char *)v165 + v75);
              v169[2] = 0u;
              v169[3] = 0u;
              *long long v169 = 0u;
              v169[1] = 0u;
              long long v170 = (_OWORD *)((char *)v165 + v76);
              v170[2] = 0u;
              v170[3] = 0u;
              *long long v170 = 0u;
              v170[1] = 0u;
            }
            uint64_t v193 = v164 + v167;
            long long v194 = (float64x2_t *)((char *)v72 + v487 * 8);
            unsigned int v195 = v71[4];
            if (v195 == 255)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              long long v205 = *(_OWORD *)(v193 + 48);
              long long v206 = *(_OWORD *)(v193 + 144);
              long long v207 = *(_OWORD *)(v193 + 176);
              long long v208 = *(_OWORD *)(v193 + 64);
              float64x2_t v209 = *(float64x2_t *)(v193 + 32);
              long long v210 = *(_OWORD *)(v193 + 192);
              long long v211 = *(_OWORD *)(v193 + 224);
              long long v212 = *(_OWORD *)(v193 + 240);
              float64x2_t v213 = *(float64x2_t *)(v193 + 128);
              float64x2_t v214 = *(float64x2_t *)(v193 + 160);
              long long v215 = *(_OWORD *)(v193 + 80);
              long long v216 = *(_OWORD *)(v193 + 112);
              long long v217 = *(_OWORD *)(v193 + 208);
              long long v218 = *(_OWORD *)(v193 + 96);
              *long long v194 = *(float64x2_t *)v193;
              v194[1] = v209;
              v194[2] = v213;
              v194[3] = v214;
              unsigned int v219 = (_OWORD *)((char *)v194->f64 + v75);
              long long v220 = (_OWORD *)((char *)v194->f64 + v33);
              *long long v220 = v204;
              v220[1] = v205;
              v220[2] = v206;
              v220[3] = v207;
              _OWORD *v219 = v208;
              v219[1] = v218;
              v219[2] = v210;
              v219[3] = v211;
              long long v221 = (_OWORD *)((char *)v194->f64 + v75 + v33);
              uint64_t v196 = 256;
              _OWORD *v221 = v215;
              v221[1] = v216;
              v221[2] = v217;
              v221[3] = v212;
            }
            else if (v195 == 7)
            {
              float64x2_t v200 = vld1q_dup_f64((const double *)v193);
              *long long v194 = v200;
              v194[1] = v200;
              v194[2] = v200;
              v194[3] = v200;
              float64x2_t v201 = (float64x2_t *)((char *)v194 + v33);
              float64x2_t *v201 = v200;
              v201[1] = v200;
              v201[2] = v200;
              v201[3] = v200;
              long long v202 = (float64x2_t *)((char *)v194 + v75);
              *long long v202 = v200;
              v202[1] = v200;
              v202[2] = v200;
              v202[3] = v200;
              long long v203 = (float64x2_t *)((char *)v194 + v76);
              *long long v203 = v200;
              v203[1] = v200;
              v203[2] = v200;
              v203[3] = v200;
              uint64_t v196 = 8;
            }
            else if (v71[4])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v72->f64[v487], v33, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              v194[2] = 0u;
              v194[3] = 0u;
              *long long v194 = 0u;
              v194[1] = 0u;
              long long v197 = (_OWORD *)((char *)v194->f64 + v33);
              v197[2] = 0u;
              v197[3] = 0u;
              _OWORD *v197 = 0u;
              v197[1] = 0u;
              long long v198 = (_OWORD *)((char *)v194->f64 + v75);
              v198[2] = 0u;
              v198[3] = 0u;
              *long long v198 = 0u;
              v198[1] = 0u;
              long long v199 = (_OWORD *)((char *)v194->f64 + v76);
              v199[2] = 0u;
              v199[3] = 0u;
              _OWORD *v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v222 = v193 + v196;
            long long v223 = (float64x2_t *)((char *)v72 + 12 * a11);
            unsigned int v224 = v71[5];
            if (v224 == 255)
            {
              long long v233 = *(_OWORD *)(v222 + 16);
              long long v234 = *(_OWORD *)(v222 + 48);
              long long v235 = *(_OWORD *)(v222 + 144);
              long long v236 = *(_OWORD *)(v222 + 176);
              long long v237 = *(_OWORD *)(v222 + 64);
              float64x2_t v238 = *(float64x2_t *)(v222 + 32);
              long long v239 = *(_OWORD *)(v222 + 192);
              long long v240 = *(_OWORD *)(v222 + 224);
              long long v241 = *(_OWORD *)(v222 + 240);
              float64x2_t v242 = *(float64x2_t *)(v222 + 128);
              float64x2_t v243 = *(float64x2_t *)(v222 + 160);
              long long v244 = *(_OWORD *)(v222 + 80);
              long long v245 = *(_OWORD *)(v222 + 112);
              long long v246 = *(_OWORD *)(v222 + 208);
              long long v247 = *(_OWORD *)(v222 + 96);
              float64x2_t *v223 = *(float64x2_t *)v222;
              v223[1] = v238;
              v223[2] = v242;
              v223[3] = v243;
              unsigned int v248 = (_OWORD *)((char *)v223->f64 + v75);
              long long v249 = (_OWORD *)((char *)v223->f64 + v33);
              *long long v249 = v233;
              v249[1] = v234;
              v249[2] = v235;
              v249[3] = v236;
              *unsigned int v248 = v237;
              v248[1] = v247;
              v248[2] = v239;
              v248[3] = v240;
              long long v250 = (_OWORD *)((char *)v223->f64 + v75 + v33);
              uint64_t v225 = 256;
              _OWORD *v250 = v244;
              v250[1] = v245;
              v250[2] = v246;
              v250[3] = v241;
            }
            else if (v224 == 7)
            {
              float64x2_t v229 = vld1q_dup_f64((const double *)v222);
              float64x2_t *v223 = v229;
              v223[1] = v229;
              v223[2] = v229;
              v223[3] = v229;
              float64x2_t v230 = (float64x2_t *)((char *)v223 + v33);
              *float64x2_t v230 = v229;
              v230[1] = v229;
              v230[2] = v229;
              v230[3] = v229;
              long long v231 = (float64x2_t *)((char *)v223 + v75);
              *long long v231 = v229;
              v231[1] = v229;
              v231[2] = v229;
              v231[3] = v229;
              long long v232 = (float64x2_t *)((char *)v223 + v76);
              float64x2_t *v232 = v229;
              v232[1] = v229;
              v232[2] = v229;
              v232[3] = v229;
              uint64_t v225 = 8;
            }
            else if (v71[5])
            {
              uint64_t v225 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v223, v33, v222, v224);
            }
            else
            {
              uint64_t v225 = 0;
              v223[2] = 0u;
              v223[3] = 0u;
              float64x2_t *v223 = 0u;
              v223[1] = 0u;
              long long v226 = (_OWORD *)((char *)v223->f64 + v33);
              v226[2] = 0u;
              v226[3] = 0u;
              *long long v226 = 0u;
              v226[1] = 0u;
              long long v227 = (_OWORD *)((char *)v223->f64 + v75);
              v227[2] = 0u;
              v227[3] = 0u;
              *long long v227 = 0u;
              v227[1] = 0u;
              long long v228 = (_OWORD *)((char *)v223->f64 + v76);
              v228[2] = 0u;
              v228[3] = 0u;
              *long long v228 = 0u;
              v228[1] = 0u;
            }
            uint64_t v251 = v222 + v225;
            long long v252 = (_OWORD *)v194[4].f64;
            unsigned int v253 = v71[6];
            if (v253 == 255)
            {
              long long v262 = *(_OWORD *)(v251 + 16);
              long long v263 = *(_OWORD *)(v251 + 48);
              long long v264 = *(_OWORD *)(v251 + 144);
              long long v265 = *(_OWORD *)(v251 + 176);
              long long v266 = *(_OWORD *)(v251 + 64);
              float64x2_t v267 = *(float64x2_t *)(v251 + 32);
              long long v268 = *(_OWORD *)(v251 + 192);
              long long v269 = *(_OWORD *)(v251 + 224);
              long long v270 = *(_OWORD *)(v251 + 240);
              float64x2_t v271 = *(float64x2_t *)(v251 + 128);
              float64x2_t v272 = *(float64x2_t *)(v251 + 160);
              long long v273 = *(_OWORD *)(v251 + 80);
              long long v274 = *(_OWORD *)(v251 + 112);
              long long v275 = *(_OWORD *)(v251 + 208);
              long long v276 = *(_OWORD *)(v251 + 96);
              _OWORD *v252 = *(_OWORD *)v251;
              v194[5] = v267;
              v194[6] = v271;
              v194[7] = v272;
              int32x4_t v277 = (_OWORD *)((char *)v252 + v75);
              long long v278 = (_OWORD *)((char *)v252 + v33);
              *long long v278 = v262;
              v278[1] = v263;
              v278[2] = v264;
              v278[3] = v265;
              *int32x4_t v277 = v266;
              v277[1] = v276;
              v277[2] = v268;
              v277[3] = v269;
              long long v279 = (_OWORD *)((char *)v252 + v75 + v33);
              uint64_t v254 = 256;
              *long long v279 = v273;
              v279[1] = v274;
              v279[2] = v275;
              v279[3] = v270;
            }
            else if (v253 == 7)
            {
              float64x2_t v258 = vld1q_dup_f64((const double *)v251);
              v194[4] = v258;
              v194[5] = v258;
              v194[6] = v258;
              v194[7] = v258;
              float64x2_t v259 = (float64x2_t *)((char *)v252 + v33);
              *float64x2_t v259 = v258;
              v259[1] = v258;
              v259[2] = v258;
              v259[3] = v258;
              long long v260 = (float64x2_t *)((char *)v252 + v75);
              *long long v260 = v258;
              v260[1] = v258;
              v260[2] = v258;
              v260[3] = v258;
              long long v261 = (float64x2_t *)((char *)v252 + v76);
              *long long v261 = v258;
              v261[1] = v258;
              uint64_t v254 = 8;
              v261[2] = v258;
              v261[3] = v258;
            }
            else if (v71[6])
            {
              uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v252, v33, v251, v253);
            }
            else
            {
              uint64_t v254 = 0;
              v194[6] = 0u;
              v194[7] = 0u;
              _OWORD *v252 = 0u;
              v194[5] = 0u;
              long long v255 = (_OWORD *)((char *)v252 + v33);
              v255[2] = 0u;
              v255[3] = 0u;
              *long long v255 = 0u;
              v255[1] = 0u;
              long long v256 = (_OWORD *)((char *)v252 + v75);
              v256[2] = 0u;
              v256[3] = 0u;
              *long long v256 = 0u;
              v256[1] = 0u;
              long long v257 = (_OWORD *)((char *)v252 + v76);
              v257[2] = 0u;
              v257[3] = 0u;
              *long long v257 = 0u;
              v257[1] = 0u;
            }
            unsigned int v40 = v38 + 1;
            uint64_t v280 = v251 + v254;
            long long v281 = (_OWORD *)v223[4].f64;
            unsigned int v282 = v71[7];
            if (v282 == 255)
            {
              long long v290 = *(_OWORD *)(v280 + 16);
              long long v291 = *(_OWORD *)(v280 + 48);
              long long v292 = *(_OWORD *)(v280 + 144);
              long long v293 = *(_OWORD *)(v280 + 64);
              long long v294 = *(_OWORD *)(v280 + 176);
              long long v295 = *(_OWORD *)(v280 + 192);
              long long v296 = *(_OWORD *)(v280 + 208);
              long long v297 = *(_OWORD *)(v280 + 224);
              long long v298 = *(_OWORD *)(v280 + 240);
              float64x2_t v299 = *(float64x2_t *)(v280 + 32);
              float64x2_t v300 = *(float64x2_t *)(v280 + 128);
              float64x2_t v301 = *(float64x2_t *)(v280 + 160);
              long long v302 = *(_OWORD *)(v280 + 80);
              long long v303 = *(_OWORD *)(v280 + 112);
              long long v304 = *(_OWORD *)(v280 + 96);
              *long long v281 = *(_OWORD *)v280;
              v223[5] = v299;
              v223[6] = v300;
              v223[7] = v301;
              int64x2_t v305 = (_OWORD *)((char *)v281 + v75);
              long long v306 = (_OWORD *)((char *)v281 + v33);
              *long long v306 = v290;
              v306[1] = v291;
              v306[2] = v292;
              v306[3] = v294;
              *int64x2_t v305 = v293;
              v305[1] = v304;
              v305[2] = v295;
              v305[3] = v297;
              long long v307 = (_OWORD *)((char *)v281 + v75 + v33);
              *long long v307 = v302;
              v307[1] = v303;
              v307[2] = v296;
              v307[3] = v298;
              unsigned int v16 = v494;
              uint64_t v24 = v504;
            }
            else
            {
              uint64_t v24 = v504;
              if (v282 == 7)
              {
                float64x2_t v286 = vld1q_dup_f64((const double *)v280);
                v223[4] = v286;
                v223[5] = v286;
                v223[6] = v286;
                v223[7] = v286;
                float64x2_t v287 = (float64x2_t *)((char *)v281 + v33);
                *float64x2_t v287 = v286;
                v287[1] = v286;
                v287[2] = v286;
                v287[3] = v286;
                float64x2_t v288 = (float64x2_t *)((char *)v281 + v75);
                *float64x2_t v288 = v286;
                v288[1] = v286;
                v288[2] = v286;
                v288[3] = v286;
                long long v289 = (float64x2_t *)((char *)v281 + v76);
                *long long v289 = v286;
                v289[1] = v286;
                v289[2] = v286;
                v289[3] = v286;
              }
              else if (v282)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v281, v33, v280, v282);
              }
              else
              {
                v223[6] = 0u;
                v223[7] = 0u;
                *long long v281 = 0u;
                v223[5] = 0u;
                float64x2_t v283 = (_OWORD *)((char *)v281 + v33);
                v283[2] = 0u;
                v283[3] = 0u;
                *float64x2_t v283 = 0u;
                v283[1] = 0u;
                long long v284 = (_OWORD *)((char *)v281 + v75);
                v284[2] = 0u;
                v284[3] = 0u;
                *long long v284 = 0u;
                v284[1] = 0u;
                long long v285 = (_OWORD *)((char *)v281 + v76);
                v285[2] = 0u;
                v285[3] = 0u;
                *long long v285 = 0u;
                v285[1] = 0u;
              }
              unsigned int v16 = v494;
            }
          }
          BOOL v29 = v38 == v495 >> 4;
          unsigned int v38 = v40;
        }
        while (!v29);
        BOOL v29 = v25++ == v484;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v498 = v21;
  uint64_t v499 = v22;
  uint64_t v483 = v23;
  uint64_t v24 = v12;
  uint64_t v646 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v502 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v482 = v14 + a10 - 1;
  unsigned int v484 = v482 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v497 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v484)
  {
    unsigned int v495 = v16 + a9 - 1;
    unsigned int v481 = v16 >> 4;
    if (v16 >> 4 <= v495 >> 4)
    {
      uint64_t v33 = a11;
      unsigned int v478 = v20 - 1;
      unsigned int v506 = (v20 - 1) >> 4;
      int v505 = ((v20 - 1) & 0xF) + 1;
      int v479 = ((v18 - 1) & 0xF) + 1;
      unsigned int v480 = (v18 - 1) >> 4;
      uint64_t v487 = a11;
      uint64_t v488 = 4 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v493 = v35.i32[0] | v35.i32[1];
      BOOL v490 = v35.i32[1] != 0;
      int8x8_t v491 = v35;
      BOOL v489 = v35.i32[0] != 0;
      unint64_t v477 = 8 * v27 * (unint64_t)v26;
      unsigned int v494 = v16;
      uint64_t v504 = v24;
      uint64_t v485 = 3 * a11;
      uint64_t v486 = 2 * a11;
      do
      {
        unsigned int v36 = (16 * v25) | 0xF;
        if (16 * v25 <= v502) {
          int v37 = v502;
        }
        else {
          int v37 = 16 * v25;
        }
        unsigned int v38 = v481;
        if (v482 < v36) {
          unsigned int v36 = v482;
        }
        unsigned int v501 = 16 * v25;
        int v492 = v37 - 16 * v25;
        int v503 = v36 - v37 + 1;
        int v39 = v479;
        if (v25 != v480) {
          int v39 = 16;
        }
        unsigned int v507 = v39;
        uint64_t v500 = v483 + (v37 - v502) * v33;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v495 < v42) {
            unsigned int v42 = v495;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v506) {
            unsigned int v45 = v505;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v501 >= v502 && v41 >= v16)
          {
            int v47 = v505;
            if (v38 != v506) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v503 != v507;
          }
          if (isLevelTiled)
          {
            unsigned int v463 = 0;
            uint64_t v464 = v477 >> (*(unsigned char *)(v24 + 57) != 0);
            char v465 = 1;
            if (v464 > 127)
            {
              if (v464 > 511)
              {
                if (v464 == 512)
                {
                  unsigned int v463 = 16;
                  char v466 = 1;
                  unsigned int v467 = 16;
                }
                else
                {
                  char v466 = 1;
                  unsigned int v467 = 0;
                  if (v464 == 1024)
                  {
                    unsigned int v467 = 8;
                    unsigned int v463 = 16;
                  }
                }
              }
              else if (v464 == 128)
              {
                char v465 = 0;
                char v466 = 0;
                unsigned int v463 = 32;
                unsigned int v467 = 32;
              }
              else
              {
                char v466 = 1;
                unsigned int v467 = 0;
                if (v464 == 256)
                {
                  char v465 = 0;
                  unsigned int v467 = 16;
                  unsigned int v463 = 32;
                }
              }
            }
            else
            {
              char v466 = 1;
              unsigned int v467 = 0;
              switch(v464)
              {
                case 4:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 128;
                  unsigned int v463 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 128;
                  unsigned int v467 = 128;
                  break;
                case 16:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 64;
                  unsigned int v463 = 128;
                  break;
                case 32:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 64;
                  unsigned int v467 = 64;
                  break;
                default:
                  if (v464 == 64)
                  {
                    char v465 = 0;
                    char v466 = 0;
                    unsigned int v467 = 32;
                    unsigned int v463 = 64;
                  }
                  break;
              }
            }
            unsigned int v468 = (v463 >> 4) - 1;
            if (v465)
            {
              unsigned int v469 = 0;
              if (v466) {
                goto LABEL_242;
              }
LABEL_231:
              unsigned int v470 = 32 - __clz(~(-1 << -(char)__clz(((v467 + 15) >> 4) - 1)));
              if (v470 | v469) {
                goto LABEL_232;
              }
LABEL_243:
              uint64_t v472 = 0;
            }
            else
            {
              unsigned int v469 = 32 - __clz(~(-1 << -(char)__clz(v468)));
              if ((v466 & 1) == 0) {
                goto LABEL_231;
              }
LABEL_242:
              unsigned int v470 = 0;
              if (!v469) {
                goto LABEL_243;
              }
LABEL_232:
              int v471 = 0;
              uint64_t v472 = 0;
              int v473 = v38 & v468;
              BOOL v474 = v469 != 0;
              BOOL v475 = v470 != 0;
              int v476 = 1;
              do
              {
                --v469;
                if (v474) {
                  v472 |= (unint64_t)(v476 & v473) << v471++;
                }
                else {
                  unsigned int v469 = 0;
                }
                --v470;
                if (v475) {
                  v472 |= (unint64_t)(v476 & v25 & ((v467 >> 4) - 1)) << v471++;
                }
                else {
                  unsigned int v470 = 0;
                }
                v476 *= 2;
                --v471;
                BOOL v475 = v470 != 0;
                BOOL v474 = v469 != 0;
              }
              while (v470 | v469);
            }
            unint64_t v56 = ((unint64_t)(v41 / v463 + v501 / v467 * ((v463 + v478) / v463)) << 14) + (v472 << 11);
            goto LABEL_59;
          }
          if (v493)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v490;
            BOOL v53 = v489;
            __int32 v54 = v491.i32[1];
            __int32 v55 = v491.i32[0];
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v38) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_59:
          unsigned int v57 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
          }
          if (v62 | v59)
          {
            int v63 = 0;
            unint64_t v64 = 0;
            BOOL v65 = v59 != 0;
            BOOL v66 = v62 != 0;
            int v67 = 1;
            do
            {
              --v59;
              BOOL v68 = !v65;
              if (v65)
              {
                unint64_t v69 = ((unint64_t)(v67 & v38) << v63) | v64;
              }
              else
              {
                unsigned int v59 = 0;
                unint64_t v69 = v64;
              }
              if (!v68) {
                ++v63;
              }
              --v62;
              if (v66)
              {
                unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
              }
              else
              {
                unsigned int v62 = 0;
                unint64_t v64 = v69;
              }
              if (v66) {
                ++v63;
              }
              v67 *= 2;
              --v63;
              BOOL v66 = v62 != 0;
              BOOL v65 = v59 != 0;
            }
            while (v62 | v59);
          }
          else
          {
            unint64_t v64 = 0;
          }
          __int32 v70 = (float64x2_t *)(v498 + v56);
          if (v497)
          {
            memcpy(__dst, v70, sizeof(__dst));
            __int32 v70 = (float64x2_t *)__dst;
          }
          __int32 v71 = (unsigned __int8 *)(v499 + 8 * v64);
          uint64_t v72 = (float64x2_t *)(v500 + 8 * (v43 - v16));
          char v73 = v45 < 0x10 || v46;
          if ((v73 & 1) != 0 || v507 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            unsigned int v81 = v43 - v41;
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v504;
            block[5] = v70;
            char v515 = v45;
            char v516 = v507;
            int v511 = v492;
            unsigned int v512 = v81;
            block[6] = v71;
            unsigned int v509 = v72;
            uint64_t v33 = a11;
            uint64_t v510 = a11;
            int v513 = v503;
            unsigned int v514 = v44;
            if (v46)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v504 + 8) + 7384), block);
              unsigned int v16 = v494;
              uint64_t v24 = v504;
              unsigned int v40 = v38 + 1;
            }
            else
            {
              unsigned int v82 = *v71;
              unsigned int v16 = v494;
              if (v82 == 255)
              {
                float64x2_t v308 = v70[1];
                float64x2_t v309 = v70[3];
                float64x2_t v310 = v70[9];
                float64x2_t v311 = v70[11];
                float64x2_t v312 = v70[2];
                float64x2_t v313 = v70[8];
                float64x2_t v314 = v70[4];
                float64x2_t v315 = v70[6];
                float64x2_t v316 = v70[10];
                float64x2_t v317 = v70[12];
                float64x2_t v318 = v70[13];
                float64x2_t v319 = v70[14];
                float64x2_t v320 = v70[15];
                float64x2_t v321 = v70[5];
                float64x2_t v322 = v70[7];
                float64x2_t v518 = *v70;
                float64x2_t v519 = v312;
                float64x2_t v520 = v313;
                float64x2_t v521 = v316;
                float64x2_t v526 = v308;
                float64x2_t v527 = v309;
                float64x2_t v528 = v310;
                float64x2_t v529 = v311;
                float64x2_t v534 = v314;
                float64x2_t v535 = v315;
                float64x2_t v536 = v317;
                float64x2_t v537 = v319;
                uint64_t v83 = 256;
                float64x2_t v542 = v321;
                float64x2_t v543 = v322;
                float64x2_t v544 = v318;
                float64x2_t v545 = v320;
              }
              else if (v82 == 7)
              {
                float64x2_t v323 = vld1q_dup_f64(v70->f64);
                float64x2_t v518 = v323;
                float64x2_t v519 = v323;
                float64x2_t v520 = v323;
                float64x2_t v521 = v323;
                float64x2_t v526 = v323;
                float64x2_t v527 = v323;
                float64x2_t v528 = v323;
                float64x2_t v529 = v323;
                float64x2_t v534 = v323;
                float64x2_t v535 = v323;
                float64x2_t v536 = v323;
                float64x2_t v537 = v323;
                float64x2_t v542 = v323;
                float64x2_t v543 = v323;
                uint64_t v83 = 8;
                float64x2_t v544 = v323;
                float64x2_t v545 = v323;
              }
              else if (*v71)
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v518, 128, (uint64_t)v70, v82);
              }
              else
              {
                uint64_t v83 = 0;
                float64x2_t v521 = 0u;
                float64x2_t v520 = 0u;
                float64x2_t v519 = 0u;
                float64x2_t v518 = 0u;
                float64x2_t v526 = 0u;
                float64x2_t v527 = 0u;
                float64x2_t v528 = 0u;
                float64x2_t v529 = 0u;
                float64x2_t v534 = 0u;
                float64x2_t v535 = 0u;
                float64x2_t v536 = 0u;
                float64x2_t v537 = 0u;
                float64x2_t v542 = 0u;
                float64x2_t v543 = 0u;
                float64x2_t v544 = 0u;
                float64x2_t v545 = 0u;
              }
              uint64_t v324 = (uint64_t)v70 + v83;
              unsigned int v325 = v71[1];
              if (v325 == 255)
              {
                float64x2_t v327 = *(float64x2_t *)(v324 + 16);
                float64x2_t v328 = *(float64x2_t *)(v324 + 48);
                float64x2_t v329 = *(float64x2_t *)(v324 + 144);
                float64x2_t v330 = *(float64x2_t *)(v324 + 176);
                float64x2_t v331 = *(float64x2_t *)(v324 + 32);
                float64x2_t v332 = *(float64x2_t *)(v324 + 128);
                float64x2_t v333 = *(float64x2_t *)(v324 + 64);
                float64x2_t v334 = *(float64x2_t *)(v324 + 96);
                float64x2_t v335 = *(float64x2_t *)(v324 + 160);
                float64x2_t v336 = *(float64x2_t *)(v324 + 192);
                float64x2_t v337 = *(float64x2_t *)(v324 + 208);
                float64x2_t v338 = *(float64x2_t *)(v324 + 224);
                float64x2_t v339 = *(float64x2_t *)(v324 + 240);
                float64x2_t v340 = *(float64x2_t *)(v324 + 80);
                float64x2_t v341 = *(float64x2_t *)(v324 + 112);
                float64x2_t v550 = *(float64x2_t *)v324;
                float64x2_t v551 = v331;
                float64x2_t v552 = v332;
                float64x2_t v553 = v335;
                float64x2_t v558 = v327;
                float64x2_t v559 = v328;
                float64x2_t v560 = v329;
                float64x2_t v561 = v330;
                float64x2_t v566 = v333;
                float64x2_t v567 = v334;
                float64x2_t v568 = v336;
                float64x2_t v569 = v338;
                uint64_t v326 = 256;
                float64x2_t v574 = v340;
                float64x2_t v575 = v341;
                float64x2_t v576 = v337;
                float64x2_t v577 = v339;
              }
              else if (v325 == 7)
              {
                float64x2_t v342 = vld1q_dup_f64((const double *)v324);
                float64x2_t v550 = v342;
                float64x2_t v551 = v342;
                float64x2_t v552 = v342;
                float64x2_t v553 = v342;
                float64x2_t v558 = v342;
                float64x2_t v559 = v342;
                float64x2_t v560 = v342;
                float64x2_t v561 = v342;
                float64x2_t v566 = v342;
                float64x2_t v567 = v342;
                float64x2_t v568 = v342;
                float64x2_t v569 = v342;
                float64x2_t v574 = v342;
                float64x2_t v575 = v342;
                uint64_t v326 = 8;
                float64x2_t v576 = v342;
                float64x2_t v577 = v342;
              }
              else if (v71[1])
              {
                uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v550, 128, v324, v325);
              }
              else
              {
                uint64_t v326 = 0;
                float64x2_t v552 = 0u;
                float64x2_t v553 = 0u;
                float64x2_t v550 = 0u;
                float64x2_t v551 = 0u;
                float64x2_t v558 = 0u;
                float64x2_t v559 = 0u;
                float64x2_t v560 = 0u;
                float64x2_t v561 = 0u;
                float64x2_t v566 = 0u;
                float64x2_t v567 = 0u;
                float64x2_t v568 = 0u;
                float64x2_t v569 = 0u;
                float64x2_t v574 = 0u;
                float64x2_t v575 = 0u;
                float64x2_t v576 = 0u;
                float64x2_t v577 = 0u;
              }
              uint64_t v343 = v324 + v326;
              unsigned int v344 = v71[2];
              if (v344 == 255)
              {
                float64x2_t v346 = *(float64x2_t *)(v343 + 16);
                float64x2_t v347 = *(float64x2_t *)(v343 + 48);
                float64x2_t v348 = *(float64x2_t *)(v343 + 144);
                float64x2_t v349 = *(float64x2_t *)(v343 + 176);
                float64x2_t v350 = *(float64x2_t *)(v343 + 32);
                float64x2_t v351 = *(float64x2_t *)(v343 + 128);
                float64x2_t v352 = *(float64x2_t *)(v343 + 64);
                float64x2_t v353 = *(float64x2_t *)(v343 + 96);
                float64x2_t v354 = *(float64x2_t *)(v343 + 160);
                float64x2_t v355 = *(float64x2_t *)(v343 + 192);
                float64x2_t v356 = *(float64x2_t *)(v343 + 208);
                float64x2_t v357 = *(float64x2_t *)(v343 + 224);
                float64x2_t v358 = *(float64x2_t *)(v343 + 240);
                float64x2_t v359 = *(float64x2_t *)(v343 + 80);
                float64x2_t v360 = *(float64x2_t *)(v343 + 112);
                float64x2_t v522 = *(float64x2_t *)v343;
                float64x2_t v523 = v350;
                float64x2_t v524 = v351;
                float64x2_t v525 = v354;
                float64x2_t v530 = v346;
                float64x2_t v531 = v347;
                float64x2_t v532 = v348;
                float64x2_t v533 = v349;
                float64x2_t v538 = v352;
                float64x2_t v539 = v353;
                float64x2_t v540 = v355;
                float64x2_t v541 = v357;
                uint64_t v345 = 256;
                float64x2_t v546 = v359;
                float64x2_t v547 = v360;
                float64x2_t v548 = v356;
                float64x2_t v549 = v358;
              }
              else if (v344 == 7)
              {
                float64x2_t v361 = vld1q_dup_f64((const double *)v343);
                float64x2_t v522 = v361;
                float64x2_t v523 = v361;
                float64x2_t v524 = v361;
                float64x2_t v525 = v361;
                float64x2_t v530 = v361;
                float64x2_t v531 = v361;
                float64x2_t v532 = v361;
                float64x2_t v533 = v361;
                float64x2_t v538 = v361;
                float64x2_t v539 = v361;
                float64x2_t v540 = v361;
                float64x2_t v541 = v361;
                float64x2_t v546 = v361;
                float64x2_t v547 = v361;
                uint64_t v345 = 8;
                float64x2_t v548 = v361;
                float64x2_t v549 = v361;
              }
              else if (v71[2])
              {
                uint64_t v345 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v522, 128, v343, v344);
              }
              else
              {
                uint64_t v345 = 0;
                float64x2_t v524 = 0u;
                float64x2_t v525 = 0u;
                float64x2_t v522 = 0u;
                float64x2_t v523 = 0u;
                float64x2_t v530 = 0u;
                float64x2_t v531 = 0u;
                float64x2_t v532 = 0u;
                float64x2_t v533 = 0u;
                float64x2_t v538 = 0u;
                float64x2_t v539 = 0u;
                float64x2_t v540 = 0u;
                float64x2_t v541 = 0u;
                float64x2_t v546 = 0u;
                float64x2_t v547 = 0u;
                float64x2_t v548 = 0u;
                float64x2_t v549 = 0u;
              }
              uint64_t v362 = v343 + v345;
              unsigned int v363 = v71[3];
              if (v363 == 255)
              {
                float64x2_t v365 = *(float64x2_t *)(v362 + 16);
                float64x2_t v366 = *(float64x2_t *)(v362 + 48);
                float64x2_t v367 = *(float64x2_t *)(v362 + 144);
                float64x2_t v368 = *(float64x2_t *)(v362 + 176);
                float64x2_t v369 = *(float64x2_t *)(v362 + 32);
                float64x2_t v370 = *(float64x2_t *)(v362 + 128);
                float64x2_t v371 = *(float64x2_t *)(v362 + 64);
                float64x2_t v372 = *(float64x2_t *)(v362 + 96);
                float64x2_t v373 = *(float64x2_t *)(v362 + 160);
                float64x2_t v374 = *(float64x2_t *)(v362 + 192);
                float64x2_t v375 = *(float64x2_t *)(v362 + 208);
                float64x2_t v376 = *(float64x2_t *)(v362 + 224);
                float64x2_t v377 = *(float64x2_t *)(v362 + 240);
                float64x2_t v378 = *(float64x2_t *)(v362 + 80);
                float64x2_t v379 = *(float64x2_t *)(v362 + 112);
                float64x2_t v554 = *(float64x2_t *)v362;
                float64x2_t v555 = v369;
                float64x2_t v556 = v370;
                float64x2_t v557 = v373;
                float64x2_t v562 = v365;
                float64x2_t v563 = v366;
                float64x2_t v564 = v367;
                float64x2_t v565 = v368;
                float64x2_t v570 = v371;
                float64x2_t v571 = v372;
                float64x2_t v572 = v374;
                float64x2_t v573 = v376;
                uint64_t v364 = 256;
                float64x2_t v578 = v378;
                float64x2_t v579 = v379;
                float64x2_t v580 = v375;
                float64x2_t v581 = v377;
              }
              else if (v363 == 7)
              {
                float64x2_t v380 = vld1q_dup_f64((const double *)v362);
                float64x2_t v554 = v380;
                float64x2_t v555 = v380;
                float64x2_t v556 = v380;
                float64x2_t v557 = v380;
                float64x2_t v562 = v380;
                float64x2_t v563 = v380;
                float64x2_t v564 = v380;
                float64x2_t v565 = v380;
                float64x2_t v570 = v380;
                float64x2_t v571 = v380;
                float64x2_t v572 = v380;
                float64x2_t v573 = v380;
                float64x2_t v578 = v380;
                float64x2_t v579 = v380;
                uint64_t v364 = 8;
                float64x2_t v580 = v380;
                float64x2_t v581 = v380;
              }
              else if (v71[3])
              {
                uint64_t v364 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v554, 128, v362, v363);
              }
              else
              {
                uint64_t v364 = 0;
                float64x2_t v556 = 0u;
                float64x2_t v557 = 0u;
                float64x2_t v554 = 0u;
                float64x2_t v555 = 0u;
                float64x2_t v562 = 0u;
                float64x2_t v563 = 0u;
                float64x2_t v564 = 0u;
                float64x2_t v565 = 0u;
                float64x2_t v570 = 0u;
                float64x2_t v571 = 0u;
                float64x2_t v572 = 0u;
                float64x2_t v573 = 0u;
                float64x2_t v578 = 0u;
                float64x2_t v579 = 0u;
                float64x2_t v580 = 0u;
                float64x2_t v581 = 0u;
              }
              uint64_t v381 = v362 + v364;
              unsigned int v382 = v71[4];
              if (v382 == 255)
              {
                float64x2_t v384 = *(float64x2_t *)(v381 + 16);
                float64x2_t v385 = *(float64x2_t *)(v381 + 48);
                float64x2_t v386 = *(float64x2_t *)(v381 + 144);
                float64x2_t v387 = *(float64x2_t *)(v381 + 176);
                float64x2_t v388 = *(float64x2_t *)(v381 + 32);
                float64x2_t v389 = *(float64x2_t *)(v381 + 128);
                float64x2_t v390 = *(float64x2_t *)(v381 + 64);
                float64x2_t v391 = *(float64x2_t *)(v381 + 96);
                float64x2_t v392 = *(float64x2_t *)(v381 + 160);
                float64x2_t v393 = *(float64x2_t *)(v381 + 192);
                float64x2_t v394 = *(float64x2_t *)(v381 + 208);
                float64x2_t v395 = *(float64x2_t *)(v381 + 224);
                float64x2_t v396 = *(float64x2_t *)(v381 + 240);
                float64x2_t v397 = *(float64x2_t *)(v381 + 80);
                float64x2_t v398 = *(float64x2_t *)(v381 + 112);
                float64x2_t v582 = *(float64x2_t *)v381;
                float64x2_t v583 = v388;
                float64x2_t v584 = v389;
                float64x2_t v585 = v392;
                float64x2_t v590 = v384;
                float64x2_t v591 = v385;
                float64x2_t v592 = v386;
                float64x2_t v593 = v387;
                float64x2_t v598 = v390;
                float64x2_t v599 = v391;
                float64x2_t v600 = v393;
                float64x2_t v601 = v395;
                uint64_t v383 = 256;
                float64x2_t v606 = v397;
                float64x2_t v607 = v398;
                float64x2_t v608 = v394;
                float64x2_t v609 = v396;
              }
              else if (v382 == 7)
              {
                float64x2_t v399 = vld1q_dup_f64((const double *)v381);
                float64x2_t v582 = v399;
                float64x2_t v583 = v399;
                float64x2_t v584 = v399;
                float64x2_t v585 = v399;
                float64x2_t v590 = v399;
                float64x2_t v591 = v399;
                float64x2_t v592 = v399;
                float64x2_t v593 = v399;
                float64x2_t v598 = v399;
                float64x2_t v599 = v399;
                float64x2_t v600 = v399;
                float64x2_t v601 = v399;
                float64x2_t v606 = v399;
                float64x2_t v607 = v399;
                float64x2_t v608 = v399;
                uint64_t v383 = 8;
                float64x2_t v609 = v399;
              }
              else if (v71[4])
              {
                uint64_t v383 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v582, 128, v381, v382);
              }
              else
              {
                uint64_t v383 = 0;
                float64x2_t v584 = 0u;
                float64x2_t v585 = 0u;
                float64x2_t v582 = 0u;
                float64x2_t v583 = 0u;
                float64x2_t v590 = 0u;
                float64x2_t v591 = 0u;
                float64x2_t v592 = 0u;
                float64x2_t v593 = 0u;
                float64x2_t v598 = 0u;
                float64x2_t v599 = 0u;
                float64x2_t v600 = 0u;
                float64x2_t v601 = 0u;
                float64x2_t v606 = 0u;
                float64x2_t v607 = 0u;
                float64x2_t v608 = 0u;
                float64x2_t v609 = 0u;
              }
              uint64_t v400 = v381 + v383;
              unsigned int v401 = v71[5];
              if (v401 == 255)
              {
                float64x2_t v403 = *(float64x2_t *)(v400 + 16);
                float64x2_t v404 = *(float64x2_t *)(v400 + 48);
                float64x2_t v405 = *(float64x2_t *)(v400 + 144);
                float64x2_t v406 = *(float64x2_t *)(v400 + 176);
                float64x2_t v407 = *(float64x2_t *)(v400 + 32);
                float64x2_t v408 = *(float64x2_t *)(v400 + 128);
                float64x2_t v409 = *(float64x2_t *)(v400 + 64);
                float64x2_t v410 = *(float64x2_t *)(v400 + 96);
                float64x2_t v411 = *(float64x2_t *)(v400 + 160);
                float64x2_t v412 = *(float64x2_t *)(v400 + 192);
                float64x2_t v413 = *(float64x2_t *)(v400 + 208);
                float64x2_t v414 = *(float64x2_t *)(v400 + 224);
                float64x2_t v415 = *(float64x2_t *)(v400 + 240);
                float64x2_t v416 = *(float64x2_t *)(v400 + 80);
                float64x2_t v417 = *(float64x2_t *)(v400 + 112);
                float64x2_t v614 = *(float64x2_t *)v400;
                float64x2_t v615 = v407;
                float64x2_t v616 = v408;
                float64x2_t v617 = v411;
                float64x2_t v622 = v403;
                float64x2_t v623 = v404;
                float64x2_t v624 = v405;
                float64x2_t v625 = v406;
                float64x2_t v630 = v409;
                float64x2_t v631 = v410;
                float64x2_t v632 = v412;
                float64x2_t v633 = v414;
                uint64_t v402 = 256;
                float64x2_t v638 = v416;
                float64x2_t v639 = v417;
                float64x2_t v640 = v413;
                float64x2_t v641 = v415;
              }
              else if (v401 == 7)
              {
                float64x2_t v418 = vld1q_dup_f64((const double *)v400);
                float64x2_t v614 = v418;
                float64x2_t v615 = v418;
                float64x2_t v616 = v418;
                float64x2_t v617 = v418;
                float64x2_t v622 = v418;
                float64x2_t v623 = v418;
                float64x2_t v624 = v418;
                float64x2_t v625 = v418;
                float64x2_t v630 = v418;
                float64x2_t v631 = v418;
                float64x2_t v632 = v418;
                float64x2_t v633 = v418;
                float64x2_t v638 = v418;
                float64x2_t v639 = v418;
                float64x2_t v640 = v418;
                uint64_t v402 = 8;
                float64x2_t v641 = v418;
              }
              else if (v71[5])
              {
                uint64_t v402 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v614, 128, v400, v401);
              }
              else
              {
                uint64_t v402 = 0;
                float64x2_t v616 = 0u;
                float64x2_t v617 = 0u;
                float64x2_t v614 = 0u;
                float64x2_t v615 = 0u;
                float64x2_t v622 = 0u;
                float64x2_t v623 = 0u;
                float64x2_t v624 = 0u;
                float64x2_t v625 = 0u;
                float64x2_t v630 = 0u;
                float64x2_t v631 = 0u;
                float64x2_t v632 = 0u;
                float64x2_t v633 = 0u;
                float64x2_t v638 = 0u;
                float64x2_t v639 = 0u;
                float64x2_t v640 = 0u;
                float64x2_t v641 = 0u;
              }
              uint64_t v419 = v400 + v402;
              unsigned int v420 = v71[6];
              if (v420 == 255)
              {
                float64x2_t v422 = *(float64x2_t *)(v419 + 16);
                float64x2_t v423 = *(float64x2_t *)(v419 + 48);
                float64x2_t v424 = *(float64x2_t *)(v419 + 144);
                float64x2_t v425 = *(float64x2_t *)(v419 + 176);
                float64x2_t v426 = *(float64x2_t *)(v419 + 32);
                float64x2_t v427 = *(float64x2_t *)(v419 + 128);
                float64x2_t v428 = *(float64x2_t *)(v419 + 64);
                float64x2_t v429 = *(float64x2_t *)(v419 + 96);
                float64x2_t v430 = *(float64x2_t *)(v419 + 160);
                float64x2_t v431 = *(float64x2_t *)(v419 + 192);
                float64x2_t v432 = *(float64x2_t *)(v419 + 208);
                float64x2_t v433 = *(float64x2_t *)(v419 + 224);
                float64x2_t v434 = *(float64x2_t *)(v419 + 240);
                float64x2_t v435 = *(float64x2_t *)(v419 + 80);
                float64x2_t v436 = *(float64x2_t *)(v419 + 112);
                float64x2_t v586 = *(float64x2_t *)v419;
                float64x2_t v587 = v426;
                float64x2_t v588 = v427;
                float64x2_t v589 = v430;
                float64x2_t v594 = v422;
                float64x2_t v595 = v423;
                float64x2_t v596 = v424;
                float64x2_t v597 = v425;
                float64x2_t v602 = v428;
                float64x2_t v603 = v429;
                float64x2_t v604 = v431;
                float64x2_t v605 = v433;
                uint64_t v421 = 256;
                float64x2_t v610 = v435;
                float64x2_t v611 = v436;
                float64x2_t v612 = v432;
                float64x2_t v613 = v434;
              }
              else if (v420 == 7)
              {
                float64x2_t v437 = vld1q_dup_f64((const double *)v419);
                float64x2_t v586 = v437;
                float64x2_t v587 = v437;
                float64x2_t v588 = v437;
                float64x2_t v589 = v437;
                float64x2_t v594 = v437;
                float64x2_t v595 = v437;
                float64x2_t v596 = v437;
                float64x2_t v597 = v437;
                float64x2_t v602 = v437;
                float64x2_t v603 = v437;
                float64x2_t v604 = v437;
                float64x2_t v605 = v437;
                float64x2_t v610 = v437;
                float64x2_t v611 = v437;
                float64x2_t v612 = v437;
                uint64_t v421 = 8;
                float64x2_t v613 = v437;
              }
              else if (v71[6])
              {
                uint64_t v421 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v586, 128, v419, v420);
              }
              else
              {
                uint64_t v421 = 0;
                float64x2_t v588 = 0u;
                float64x2_t v589 = 0u;
                float64x2_t v586 = 0u;
                float64x2_t v587 = 0u;
                float64x2_t v594 = 0u;
                float64x2_t v595 = 0u;
                float64x2_t v596 = 0u;
                float64x2_t v597 = 0u;
                float64x2_t v602 = 0u;
                float64x2_t v603 = 0u;
                float64x2_t v604 = 0u;
                float64x2_t v605 = 0u;
                float64x2_t v610 = 0u;
                float64x2_t v611 = 0u;
                float64x2_t v612 = 0u;
                float64x2_t v613 = 0u;
              }
              uint64_t v438 = v419 + v421;
              unsigned int v439 = v71[7];
              if (v439 == 255)
              {
                float64x2_t v442 = *(float64x2_t *)(v438 + 16);
                float64x2_t v443 = *(float64x2_t *)(v438 + 48);
                float64x2_t v444 = *(float64x2_t *)(v438 + 144);
                float64x2_t v445 = *(float64x2_t *)(v438 + 176);
                float64x2_t v446 = *(float64x2_t *)(v438 + 32);
                float64x2_t v447 = *(float64x2_t *)(v438 + 128);
                float64x2_t v448 = *(float64x2_t *)(v438 + 160);
                float64x2_t v449 = *(float64x2_t *)(v438 + 64);
                float64x2_t v450 = *(float64x2_t *)(v438 + 96);
                float64x2_t v451 = *(float64x2_t *)(v438 + 192);
                float64x2_t v452 = *(float64x2_t *)(v438 + 224);
                float64x2_t v453 = *(float64x2_t *)(v438 + 240);
                float64x2_t v454 = *(float64x2_t *)(v438 + 80);
                float64x2_t v455 = *(float64x2_t *)(v438 + 112);
                float64x2_t v456 = *(float64x2_t *)(v438 + 208);
                float64x2_t v618 = *(float64x2_t *)v438;
                float64x2_t v619 = v446;
                float64x2_t v620 = v447;
                float64x2_t v621 = v448;
                float64x2_t v626 = v442;
                float64x2_t v627 = v443;
                float64x2_t v628 = v444;
                float64x2_t v629 = v445;
                float64x2_t v634 = v449;
                float64x2_t v635 = v450;
                float64x2_t v636 = v451;
                float64x2_t v637 = v452;
                unsigned int v440 = v503;
                unsigned int v441 = v492;
                float64x2_t v642 = v454;
                float64x2_t v643 = v455;
                float64x2_t v644 = v456;
                float64x2_t v645 = v453;
                uint64_t v24 = v504;
                unsigned int v40 = v38 + 1;
              }
              else
              {
                uint64_t v24 = v504;
                unsigned int v40 = v38 + 1;
                if (v439 == 7)
                {
                  float64x2_t v457 = vld1q_dup_f64((const double *)v438);
                  float64x2_t v618 = v457;
                  float64x2_t v619 = v457;
                  float64x2_t v620 = v457;
                  float64x2_t v621 = v457;
                  float64x2_t v626 = v457;
                  float64x2_t v627 = v457;
                  float64x2_t v628 = v457;
                  float64x2_t v629 = v457;
                  float64x2_t v634 = v457;
                  float64x2_t v635 = v457;
                  float64x2_t v636 = v457;
                  float64x2_t v637 = v457;
                  float64x2_t v642 = v457;
                  float64x2_t v643 = v457;
                  float64x2_t v644 = v457;
                  unsigned int v440 = v503;
                  unsigned int v441 = v492;
                  float64x2_t v645 = v457;
                }
                else if (v439)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v618, 128, v438, v439);
                  unsigned int v441 = v511;
                  unsigned int v81 = v512;
                  unsigned int v440 = v513;
                }
                else
                {
                  float64x2_t v620 = 0u;
                  float64x2_t v621 = 0u;
                  float64x2_t v618 = 0u;
                  float64x2_t v619 = 0u;
                  float64x2_t v626 = 0u;
                  float64x2_t v627 = 0u;
                  float64x2_t v628 = 0u;
                  float64x2_t v629 = 0u;
                  float64x2_t v634 = 0u;
                  float64x2_t v635 = 0u;
                  float64x2_t v636 = 0u;
                  float64x2_t v637 = 0u;
                  float64x2_t v642 = 0u;
                  float64x2_t v643 = 0u;
                  unsigned int v440 = v503;
                  unsigned int v441 = v492;
                  float64x2_t v644 = 0u;
                  float64x2_t v645 = 0u;
                }
              }
              if (v440)
              {
                unint64_t v458 = 0;
                float64x2_t v459 = (char *)&v518 + 128 * (unint64_t)v441 + 8 * v81;
                unsigned int v460 = v514;
                do
                {
                  if (v460)
                  {
                    uint64_t v461 = 0;
                    float64x2_t v462 = (char *)v509 + v510 * v458;
                    do
                    {
                      v462[v461] = v459[v461];
                      ++v461;
                      unsigned int v460 = v514;
                    }
                    while (8 * (unint64_t)v514 > v461);
                    unsigned int v440 = v513;
                  }
                  ++v458;
                  v459 += 128;
                }
                while (v458 < v440);
              }
            }
          }
          else
          {
            unsigned int v74 = *v71;
            if (v74 == 255)
            {
              float64x2_t v88 = v70[1];
              float64x2_t v89 = v70[3];
              float64x2_t v90 = v70[9];
              float64x2_t v91 = v70[11];
              float64x2_t v92 = v70[4];
              float64x2_t v93 = v70[2];
              float64x2_t v94 = v70[12];
              float64x2_t v95 = v70[14];
              float64x2_t v96 = v70[15];
              float64x2_t v97 = v70[8];
              float64x2_t v98 = v70[10];
              float64x2_t v99 = v70[5];
              float64x2_t v100 = v70[7];
              float64x2_t v101 = v70[13];
              float64x2_t v102 = v70[6];
              uint64_t v75 = 2 * a11;
              float64x2_t *v72 = *v70;
              v72[1] = v93;
              v72[2] = v97;
              v72[3] = v98;
              uint64_t v103 = (float64x2_t *)((char *)v72 + v486);
              uint64_t v33 = a11;
              float64x2_t v104 = (float64x2_t *)((char *)v72 + a11);
              *float64x2_t v104 = v88;
              v104[1] = v89;
              v104[2] = v90;
              v104[3] = v91;
              *uint64_t v103 = v92;
              v103[1] = v102;
              v103[2] = v94;
              v103[3] = v95;
              float64x2_t v105 = (float64x2_t *)((char *)v72 + v486 + a11);
              uint64_t v77 = 256;
              *float64x2_t v105 = v99;
              v105[1] = v100;
              v105[2] = v101;
              v105[3] = v96;
              uint64_t v76 = 3 * a11;
            }
            else
            {
              uint64_t v33 = a11;
              uint64_t v76 = 3 * a11;
              uint64_t v75 = 2 * a11;
              if (v74 == 7)
              {
                float64x2_t v84 = vld1q_dup_f64(v70->f64);
                float64x2_t *v72 = v84;
                v72[1] = v84;
                v72[2] = v84;
                v72[3] = v84;
                unint64_t v85 = (float64x2_t *)((char *)v72 + a11);
                float64x2_t *v85 = v84;
                v85[1] = v84;
                v85[2] = v84;
                v85[3] = v84;
                int32x4_t v86 = (float64x2_t *)((char *)v72 + v486);
                float64x2_t *v86 = v84;
                v86[1] = v84;
                v86[2] = v84;
                v86[3] = v84;
                int32x4_t v87 = (float64x2_t *)((char *)v72 + v485);
                *int32x4_t v87 = v84;
                v87[1] = v84;
                v87[2] = v84;
                v87[3] = v84;
                uint64_t v77 = 8;
              }
              else if (*v71)
              {
                uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v72, a11, (uint64_t)v70, v74);
              }
              else
              {
                uint64_t v77 = 0;
                v72[2] = 0u;
                v72[3] = 0u;
                float64x2_t *v72 = 0u;
                v72[1] = 0u;
                unsigned int v78 = (_OWORD *)((char *)v72->f64 + a11);
                v78[2] = 0u;
                v78[3] = 0u;
                *unsigned int v78 = 0u;
                v78[1] = 0u;
                int v79 = (_OWORD *)((char *)v72->f64 + v486);
                v79[2] = 0u;
                v79[3] = 0u;
                *int v79 = 0u;
                v79[1] = 0u;
                unint64_t v80 = (_OWORD *)((char *)v72->f64 + v485);
                v80[2] = 0u;
                v80[3] = 0u;
                *unint64_t v80 = 0u;
                v80[1] = 0u;
              }
            }
            uint64_t v106 = (uint64_t)v70 + v77;
            float64x2_t v107 = (float64x2_t *)((char *)v72 + v488);
            unsigned int v108 = v71[1];
            if (v108 == 255)
            {
              long long v117 = *(_OWORD *)(v106 + 16);
              long long v118 = *(_OWORD *)(v106 + 48);
              long long v119 = *(_OWORD *)(v106 + 144);
              long long v120 = *(_OWORD *)(v106 + 176);
              long long v121 = *(_OWORD *)(v106 + 64);
              float64x2_t v122 = *(float64x2_t *)(v106 + 32);
              long long v123 = *(_OWORD *)(v106 + 192);
              long long v124 = *(_OWORD *)(v106 + 224);
              long long v125 = *(_OWORD *)(v106 + 240);
              float64x2_t v126 = *(float64x2_t *)(v106 + 128);
              float64x2_t v127 = *(float64x2_t *)(v106 + 160);
              long long v128 = *(_OWORD *)(v106 + 80);
              long long v129 = *(_OWORD *)(v106 + 112);
              long long v130 = *(_OWORD *)(v106 + 208);
              long long v131 = *(_OWORD *)(v106 + 96);
              float64x2_t *v107 = *(float64x2_t *)v106;
              v107[1] = v122;
              v107[2] = v126;
              v107[3] = v127;
              uint64_t v132 = (_OWORD *)((char *)v107->f64 + v75);
              long long v133 = (_OWORD *)((char *)v107->f64 + v33);
              _OWORD *v133 = v117;
              v133[1] = v118;
              v133[2] = v119;
              v133[3] = v120;
              *uint64_t v132 = v121;
              v132[1] = v131;
              v132[2] = v123;
              v132[3] = v124;
              long long v134 = (_OWORD *)((char *)v107->f64 + v75 + v33);
              uint64_t v109 = 256;
              _OWORD *v134 = v128;
              v134[1] = v129;
              v134[2] = v130;
              v134[3] = v125;
            }
            else if (v108 == 7)
            {
              float64x2_t v113 = vld1q_dup_f64((const double *)v106);
              float64x2_t *v107 = v113;
              v107[1] = v113;
              v107[2] = v113;
              v107[3] = v113;
              float64x2_t v114 = (float64x2_t *)((char *)v107 + v33);
              *float64x2_t v114 = v113;
              v114[1] = v113;
              v114[2] = v113;
              v114[3] = v113;
              float64x2_t v115 = (float64x2_t *)((char *)v107 + v75);
              *float64x2_t v115 = v113;
              v115[1] = v113;
              v115[2] = v113;
              v115[3] = v113;
              float64x2_t v116 = (float64x2_t *)((char *)v107 + v76);
              *float64x2_t v116 = v113;
              v116[1] = v113;
              v116[2] = v113;
              v116[3] = v113;
              uint64_t v109 = 8;
            }
            else if (v71[1])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((float64_t *)((char *)v72->f64 + v488), v33, v106, v108);
            }
            else
            {
              uint64_t v109 = 0;
              v107[2] = 0u;
              v107[3] = 0u;
              float64x2_t *v107 = 0u;
              v107[1] = 0u;
              float64x2_t v110 = (_OWORD *)((char *)v107->f64 + v33);
              v110[2] = 0u;
              v110[3] = 0u;
              *float64x2_t v110 = 0u;
              v110[1] = 0u;
              float64x2_t v111 = (_OWORD *)((char *)v107->f64 + v75);
              v111[2] = 0u;
              v111[3] = 0u;
              _OWORD *v111 = 0u;
              v111[1] = 0u;
              float64x2_t v112 = (_OWORD *)((char *)v107->f64 + v76);
              v112[2] = 0u;
              v112[3] = 0u;
              _OWORD *v112 = 0u;
              v112[1] = 0u;
            }
            uint64_t v135 = v106 + v109;
            f64 = (_OWORD *)v72[4].f64;
            unsigned int v137 = v71[2];
            if (v137 == 255)
            {
              long long v146 = *(_OWORD *)(v135 + 16);
              long long v147 = *(_OWORD *)(v135 + 48);
              long long v148 = *(_OWORD *)(v135 + 144);
              long long v149 = *(_OWORD *)(v135 + 176);
              long long v150 = *(_OWORD *)(v135 + 64);
              float64x2_t v151 = *(float64x2_t *)(v135 + 32);
              long long v152 = *(_OWORD *)(v135 + 192);
              long long v153 = *(_OWORD *)(v135 + 224);
              long long v154 = *(_OWORD *)(v135 + 240);
              float64x2_t v155 = *(float64x2_t *)(v135 + 128);
              float64x2_t v156 = *(float64x2_t *)(v135 + 160);
              long long v157 = *(_OWORD *)(v135 + 80);
              long long v158 = *(_OWORD *)(v135 + 112);
              long long v159 = *(_OWORD *)(v135 + 208);
              long long v160 = *(_OWORD *)(v135 + 96);
              _OWORD *f64 = *(_OWORD *)v135;
              v72[5] = v151;
              v72[6] = v155;
              v72[7] = v156;
              int32x4_t v161 = (_OWORD *)((char *)f64 + v75);
              long long v162 = (_OWORD *)((char *)f64 + v33);
              *long long v162 = v146;
              v162[1] = v147;
              v162[2] = v148;
              v162[3] = v149;
              *int32x4_t v161 = v150;
              v161[1] = v160;
              v161[2] = v152;
              v161[3] = v153;
              long long v163 = (_OWORD *)((char *)f64 + v75 + v33);
              uint64_t v138 = 256;
              *long long v163 = v157;
              v163[1] = v158;
              v163[2] = v159;
              v163[3] = v154;
            }
            else if (v137 == 7)
            {
              float64x2_t v142 = vld1q_dup_f64((const double *)v135);
              v72[4] = v142;
              v72[5] = v142;
              v72[6] = v142;
              v72[7] = v142;
              float64x2_t v143 = (float64x2_t *)((char *)f64 + v33);
              *float64x2_t v143 = v142;
              v143[1] = v142;
              v143[2] = v142;
              v143[3] = v142;
              long long v144 = (float64x2_t *)((char *)f64 + v75);
              float64x2_t *v144 = v142;
              v144[1] = v142;
              int64x2_t v144[2] = v142;
              v144[3] = v142;
              long long v145 = (float64x2_t *)((char *)f64 + v76);
              float64x2_t *v145 = v142;
              v145[1] = v142;
              uint64_t v138 = 8;
              v145[2] = v142;
              v145[3] = v142;
            }
            else if (v71[2])
            {
              uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(f64, v33, v135, v137);
            }
            else
            {
              uint64_t v138 = 0;
              v72[6] = 0u;
              v72[7] = 0u;
              _OWORD *f64 = 0u;
              v72[5] = 0u;
              long long v139 = (_OWORD *)((char *)f64 + v33);
              v139[2] = 0u;
              v139[3] = 0u;
              *long long v139 = 0u;
              v139[1] = 0u;
              long long v140 = (_OWORD *)((char *)f64 + v75);
              int64x2_t v140[2] = 0u;
              v140[3] = 0u;
              *long long v140 = 0u;
              v140[1] = 0u;
              long long v141 = (_OWORD *)((char *)f64 + v76);
              v141[2] = 0u;
              v141[3] = 0u;
              *long long v141 = 0u;
              v141[1] = 0u;
            }
            uint64_t v164 = v135 + v138;
            long long v165 = (_OWORD *)v107[4].f64;
            unsigned int v166 = v71[3];
            if (v166 == 255)
            {
              long long v175 = *(_OWORD *)(v164 + 16);
              long long v176 = *(_OWORD *)(v164 + 48);
              long long v177 = *(_OWORD *)(v164 + 144);
              long long v178 = *(_OWORD *)(v164 + 176);
              long long v179 = *(_OWORD *)(v164 + 64);
              float64x2_t v180 = *(float64x2_t *)(v164 + 32);
              long long v181 = *(_OWORD *)(v164 + 192);
              long long v182 = *(_OWORD *)(v164 + 224);
              long long v183 = *(_OWORD *)(v164 + 240);
              float64x2_t v184 = *(float64x2_t *)(v164 + 128);
              float64x2_t v185 = *(float64x2_t *)(v164 + 160);
              long long v186 = *(_OWORD *)(v164 + 80);
              long long v187 = *(_OWORD *)(v164 + 112);
              long long v188 = *(_OWORD *)(v164 + 208);
              long long v189 = *(_OWORD *)(v164 + 96);
              *long long v165 = *(_OWORD *)v164;
              v107[5] = v180;
              v107[6] = v184;
              v107[7] = v185;
              int32x4_t v190 = (_OWORD *)((char *)v165 + v75);
              long long v191 = (_OWORD *)((char *)v165 + v33);
              *long long v191 = v175;
              v191[1] = v176;
              v191[2] = v177;
              v191[3] = v178;
              _OWORD *v190 = v179;
              v190[1] = v189;
              v190[2] = v181;
              v190[3] = v182;
              long long v192 = (_OWORD *)((char *)v165 + v75 + v33);
              uint64_t v167 = 256;
              *long long v192 = v186;
              v192[1] = v187;
              v192[2] = v188;
              v192[3] = v183;
            }
            else if (v166 == 7)
            {
              float64x2_t v171 = vld1q_dup_f64((const double *)v164);
              v107[4] = v171;
              v107[5] = v171;
              v107[6] = v171;
              v107[7] = v171;
              float64x2_t v172 = (float64x2_t *)((char *)v165 + v33);
              *float64x2_t v172 = v171;
              v172[1] = v171;
              v172[2] = v171;
              v172[3] = v171;
              long long v173 = (float64x2_t *)((char *)v165 + v75);
              float64x2_t *v173 = v171;
              v173[1] = v171;
              v173[2] = v171;
              v173[3] = v171;
              long long v174 = (float64x2_t *)((char *)v165 + v76);
              float64x2_t *v174 = v171;
              v174[1] = v171;
              uint64_t v167 = 8;
              v174[2] = v171;
              v174[3] = v171;
            }
            else if (v71[3])
            {
              uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v165, v33, v164, v166);
            }
            else
            {
              uint64_t v167 = 0;
              v107[6] = 0u;
              v107[7] = 0u;
              *long long v165 = 0u;
              v107[5] = 0u;
              long long v168 = (_OWORD *)((char *)v165 + v33);
              v168[2] = 0u;
              v168[3] = 0u;
              _OWORD *v168 = 0u;
              v168[1] = 0u;
              long long v169 = (_OWORD *)((char *)v165 + v75);
              v169[2] = 0u;
              v169[3] = 0u;
              *long long v169 = 0u;
              v169[1] = 0u;
              long long v170 = (_OWORD *)((char *)v165 + v76);
              v170[2] = 0u;
              v170[3] = 0u;
              *long long v170 = 0u;
              v170[1] = 0u;
            }
            uint64_t v193 = v164 + v167;
            long long v194 = (float64x2_t *)((char *)v72 + v487 * 8);
            unsigned int v195 = v71[4];
            if (v195 == 255)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              long long v205 = *(_OWORD *)(v193 + 48);
              long long v206 = *(_OWORD *)(v193 + 144);
              long long v207 = *(_OWORD *)(v193 + 176);
              long long v208 = *(_OWORD *)(v193 + 64);
              float64x2_t v209 = *(float64x2_t *)(v193 + 32);
              long long v210 = *(_OWORD *)(v193 + 192);
              long long v211 = *(_OWORD *)(v193 + 224);
              long long v212 = *(_OWORD *)(v193 + 240);
              float64x2_t v213 = *(float64x2_t *)(v193 + 128);
              float64x2_t v214 = *(float64x2_t *)(v193 + 160);
              long long v215 = *(_OWORD *)(v193 + 80);
              long long v216 = *(_OWORD *)(v193 + 112);
              long long v217 = *(_OWORD *)(v193 + 208);
              long long v218 = *(_OWORD *)(v193 + 96);
              *long long v194 = *(float64x2_t *)v193;
              v194[1] = v209;
              v194[2] = v213;
              v194[3] = v214;
              unsigned int v219 = (_OWORD *)((char *)v194->f64 + v75);
              long long v220 = (_OWORD *)((char *)v194->f64 + v33);
              *long long v220 = v204;
              v220[1] = v205;
              v220[2] = v206;
              v220[3] = v207;
              _OWORD *v219 = v208;
              v219[1] = v218;
              v219[2] = v210;
              v219[3] = v211;
              long long v221 = (_OWORD *)((char *)v194->f64 + v75 + v33);
              uint64_t v196 = 256;
              _OWORD *v221 = v215;
              v221[1] = v216;
              v221[2] = v217;
              v221[3] = v212;
            }
            else if (v195 == 7)
            {
              float64x2_t v200 = vld1q_dup_f64((const double *)v193);
              *long long v194 = v200;
              v194[1] = v200;
              v194[2] = v200;
              v194[3] = v200;
              float64x2_t v201 = (float64x2_t *)((char *)v194 + v33);
              float64x2_t *v201 = v200;
              v201[1] = v200;
              v201[2] = v200;
              v201[3] = v200;
              long long v202 = (float64x2_t *)((char *)v194 + v75);
              *long long v202 = v200;
              v202[1] = v200;
              v202[2] = v200;
              v202[3] = v200;
              long long v203 = (float64x2_t *)((char *)v194 + v76);
              *long long v203 = v200;
              v203[1] = v200;
              v203[2] = v200;
              v203[3] = v200;
              uint64_t v196 = 8;
            }
            else if (v71[4])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v72->f64[v487], v33, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              v194[2] = 0u;
              v194[3] = 0u;
              *long long v194 = 0u;
              v194[1] = 0u;
              long long v197 = (_OWORD *)((char *)v194->f64 + v33);
              v197[2] = 0u;
              v197[3] = 0u;
              _OWORD *v197 = 0u;
              v197[1] = 0u;
              long long v198 = (_OWORD *)((char *)v194->f64 + v75);
              v198[2] = 0u;
              v198[3] = 0u;
              *long long v198 = 0u;
              v198[1] = 0u;
              long long v199 = (_OWORD *)((char *)v194->f64 + v76);
              v199[2] = 0u;
              v199[3] = 0u;
              _OWORD *v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v222 = v193 + v196;
            long long v223 = (float64x2_t *)((char *)v72 + 12 * a11);
            unsigned int v224 = v71[5];
            if (v224 == 255)
            {
              long long v233 = *(_OWORD *)(v222 + 16);
              long long v234 = *(_OWORD *)(v222 + 48);
              long long v235 = *(_OWORD *)(v222 + 144);
              long long v236 = *(_OWORD *)(v222 + 176);
              long long v237 = *(_OWORD *)(v222 + 64);
              float64x2_t v238 = *(float64x2_t *)(v222 + 32);
              long long v239 = *(_OWORD *)(v222 + 192);
              long long v240 = *(_OWORD *)(v222 + 224);
              long long v241 = *(_OWORD *)(v222 + 240);
              float64x2_t v242 = *(float64x2_t *)(v222 + 128);
              float64x2_t v243 = *(float64x2_t *)(v222 + 160);
              long long v244 = *(_OWORD *)(v222 + 80);
              long long v245 = *(_OWORD *)(v222 + 112);
              long long v246 = *(_OWORD *)(v222 + 208);
              long long v247 = *(_OWORD *)(v222 + 96);
              float64x2_t *v223 = *(float64x2_t *)v222;
              v223[1] = v238;
              v223[2] = v242;
              v223[3] = v243;
              unsigned int v248 = (_OWORD *)((char *)v223->f64 + v75);
              long long v249 = (_OWORD *)((char *)v223->f64 + v33);
              *long long v249 = v233;
              v249[1] = v234;
              v249[2] = v235;
              v249[3] = v236;
              *unsigned int v248 = v237;
              v248[1] = v247;
              v248[2] = v239;
              v248[3] = v240;
              long long v250 = (_OWORD *)((char *)v223->f64 + v75 + v33);
              uint64_t v225 = 256;
              _OWORD *v250 = v244;
              v250[1] = v245;
              v250[2] = v246;
              v250[3] = v241;
            }
            else if (v224 == 7)
            {
              float64x2_t v229 = vld1q_dup_f64((const double *)v222);
              float64x2_t *v223 = v229;
              v223[1] = v229;
              v223[2] = v229;
              v223[3] = v229;
              float64x2_t v230 = (float64x2_t *)((char *)v223 + v33);
              *float64x2_t v230 = v229;
              v230[1] = v229;
              v230[2] = v229;
              v230[3] = v229;
              long long v231 = (float64x2_t *)((char *)v223 + v75);
              *long long v231 = v229;
              v231[1] = v229;
              v231[2] = v229;
              v231[3] = v229;
              long long v232 = (float64x2_t *)((char *)v223 + v76);
              float64x2_t *v232 = v229;
              v232[1] = v229;
              v232[2] = v229;
              v232[3] = v229;
              uint64_t v225 = 8;
            }
            else if (v71[5])
            {
              uint64_t v225 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v223, v33, v222, v224);
            }
            else
            {
              uint64_t v225 = 0;
              v223[2] = 0u;
              v223[3] = 0u;
              float64x2_t *v223 = 0u;
              v223[1] = 0u;
              long long v226 = (_OWORD *)((char *)v223->f64 + v33);
              v226[2] = 0u;
              v226[3] = 0u;
              *long long v226 = 0u;
              v226[1] = 0u;
              long long v227 = (_OWORD *)((char *)v223->f64 + v75);
              v227[2] = 0u;
              v227[3] = 0u;
              *long long v227 = 0u;
              v227[1] = 0u;
              long long v228 = (_OWORD *)((char *)v223->f64 + v76);
              v228[2] = 0u;
              v228[3] = 0u;
              *long long v228 = 0u;
              v228[1] = 0u;
            }
            uint64_t v251 = v222 + v225;
            long long v252 = (_OWORD *)v194[4].f64;
            unsigned int v253 = v71[6];
            if (v253 == 255)
            {
              long long v262 = *(_OWORD *)(v251 + 16);
              long long v263 = *(_OWORD *)(v251 + 48);
              long long v264 = *(_OWORD *)(v251 + 144);
              long long v265 = *(_OWORD *)(v251 + 176);
              long long v266 = *(_OWORD *)(v251 + 64);
              float64x2_t v267 = *(float64x2_t *)(v251 + 32);
              long long v268 = *(_OWORD *)(v251 + 192);
              long long v269 = *(_OWORD *)(v251 + 224);
              long long v270 = *(_OWORD *)(v251 + 240);
              float64x2_t v271 = *(float64x2_t *)(v251 + 128);
              float64x2_t v272 = *(float64x2_t *)(v251 + 160);
              long long v273 = *(_OWORD *)(v251 + 80);
              long long v274 = *(_OWORD *)(v251 + 112);
              long long v275 = *(_OWORD *)(v251 + 208);
              long long v276 = *(_OWORD *)(v251 + 96);
              _OWORD *v252 = *(_OWORD *)v251;
              v194[5] = v267;
              v194[6] = v271;
              v194[7] = v272;
              int32x4_t v277 = (_OWORD *)((char *)v252 + v75);
              long long v278 = (_OWORD *)((char *)v252 + v33);
              *long long v278 = v262;
              v278[1] = v263;
              v278[2] = v264;
              v278[3] = v265;
              *int32x4_t v277 = v266;
              v277[1] = v276;
              v277[2] = v268;
              v277[3] = v269;
              long long v279 = (_OWORD *)((char *)v252 + v75 + v33);
              uint64_t v254 = 256;
              *long long v279 = v273;
              v279[1] = v274;
              v279[2] = v275;
              v279[3] = v270;
            }
            else if (v253 == 7)
            {
              float64x2_t v258 = vld1q_dup_f64((const double *)v251);
              v194[4] = v258;
              v194[5] = v258;
              v194[6] = v258;
              v194[7] = v258;
              float64x2_t v259 = (float64x2_t *)((char *)v252 + v33);
              *float64x2_t v259 = v258;
              v259[1] = v258;
              v259[2] = v258;
              v259[3] = v258;
              long long v260 = (float64x2_t *)((char *)v252 + v75);
              *long long v260 = v258;
              v260[1] = v258;
              v260[2] = v258;
              v260[3] = v258;
              long long v261 = (float64x2_t *)((char *)v252 + v76);
              *long long v261 = v258;
              v261[1] = v258;
              uint64_t v254 = 8;
              v261[2] = v258;
              v261[3] = v258;
            }
            else if (v71[6])
            {
              uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v252, v33, v251, v253);
            }
            else
            {
              uint64_t v254 = 0;
              v194[6] = 0u;
              v194[7] = 0u;
              _OWORD *v252 = 0u;
              v194[5] = 0u;
              long long v255 = (_OWORD *)((char *)v252 + v33);
              v255[2] = 0u;
              v255[3] = 0u;
              *long long v255 = 0u;
              v255[1] = 0u;
              long long v256 = (_OWORD *)((char *)v252 + v75);
              v256[2] = 0u;
              v256[3] = 0u;
              *long long v256 = 0u;
              v256[1] = 0u;
              long long v257 = (_OWORD *)((char *)v252 + v76);
              v257[2] = 0u;
              v257[3] = 0u;
              *long long v257 = 0u;
              v257[1] = 0u;
            }
            unsigned int v40 = v38 + 1;
            uint64_t v280 = v251 + v254;
            long long v281 = (_OWORD *)v223[4].f64;
            unsigned int v282 = v71[7];
            if (v282 == 255)
            {
              long long v290 = *(_OWORD *)(v280 + 16);
              long long v291 = *(_OWORD *)(v280 + 48);
              long long v292 = *(_OWORD *)(v280 + 144);
              long long v293 = *(_OWORD *)(v280 + 64);
              long long v294 = *(_OWORD *)(v280 + 176);
              long long v295 = *(_OWORD *)(v280 + 192);
              long long v296 = *(_OWORD *)(v280 + 208);
              long long v297 = *(_OWORD *)(v280 + 224);
              long long v298 = *(_OWORD *)(v280 + 240);
              float64x2_t v299 = *(float64x2_t *)(v280 + 32);
              float64x2_t v300 = *(float64x2_t *)(v280 + 128);
              float64x2_t v301 = *(float64x2_t *)(v280 + 160);
              long long v302 = *(_OWORD *)(v280 + 80);
              long long v303 = *(_OWORD *)(v280 + 112);
              long long v304 = *(_OWORD *)(v280 + 96);
              *long long v281 = *(_OWORD *)v280;
              v223[5] = v299;
              v223[6] = v300;
              v223[7] = v301;
              int64x2_t v305 = (_OWORD *)((char *)v281 + v75);
              long long v306 = (_OWORD *)((char *)v281 + v33);
              *long long v306 = v290;
              v306[1] = v291;
              v306[2] = v292;
              v306[3] = v294;
              *int64x2_t v305 = v293;
              v305[1] = v304;
              v305[2] = v295;
              v305[3] = v297;
              long long v307 = (_OWORD *)((char *)v281 + v75 + v33);
              *long long v307 = v302;
              v307[1] = v303;
              v307[2] = v296;
              v307[3] = v298;
              unsigned int v16 = v494;
              uint64_t v24 = v504;
            }
            else
            {
              uint64_t v24 = v504;
              if (v282 == 7)
              {
                float64x2_t v286 = vld1q_dup_f64((const double *)v280);
                v223[4] = v286;
                v223[5] = v286;
                v223[6] = v286;
                v223[7] = v286;
                float64x2_t v287 = (float64x2_t *)((char *)v281 + v33);
                *float64x2_t v287 = v286;
                v287[1] = v286;
                v287[2] = v286;
                v287[3] = v286;
                float64x2_t v288 = (float64x2_t *)((char *)v281 + v75);
                *float64x2_t v288 = v286;
                v288[1] = v286;
                v288[2] = v286;
                v288[3] = v286;
                long long v289 = (float64x2_t *)((char *)v281 + v76);
                *long long v289 = v286;
                v289[1] = v286;
                v289[2] = v286;
                v289[3] = v286;
              }
              else if (v282)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v281, v33, v280, v282);
              }
              else
              {
                v223[6] = 0u;
                v223[7] = 0u;
                *long long v281 = 0u;
                v223[5] = 0u;
                float64x2_t v283 = (_OWORD *)((char *)v281 + v33);
                v283[2] = 0u;
                v283[3] = 0u;
                *float64x2_t v283 = 0u;
                v283[1] = 0u;
                long long v284 = (_OWORD *)((char *)v281 + v75);
                v284[2] = 0u;
                v284[3] = 0u;
                *long long v284 = 0u;
                v284[1] = 0u;
                long long v285 = (_OWORD *)((char *)v281 + v76);
                v285[2] = 0u;
                v285[3] = 0u;
                *long long v285 = 0u;
                v285[1] = 0u;
              }
              unsigned int v16 = v494;
            }
          }
          BOOL v29 = v38 == v495 >> 4;
          unsigned int v38 = v40;
        }
        while (!v29);
        BOOL v29 = v25++ == v484;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  uint64_t v156 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v114 = v115 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 4;
      unsigned int v119 = v33 - 4;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 4 <= v126 >> 4)
    {
      unsigned int v135 = v25 >> 4;
      unsigned int v111 = v26 >> 4;
      int v134 = (v25 & 0xF) + 1;
      int v110 = (v26 & 0xF) + 1;
      uint64_t v121 = 8 * a11;
      uint64_t v122 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 16 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 4;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 16;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 11);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            uint64_t v83 = __dst;
          }
          unint64_t v85 = (unsigned __int8 *)(v130 + 8 * v77);
          int32x4_t v86 = (_OWORD *)(v131 + 8 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v137 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + 8 * (v49 - v32);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              uint64_t v97 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 128, (uint64_t)v83, *v85)];
              uint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 128, v97, v85[1]);
              uint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 128, v98, v85[2]);
              uint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 128, v99, v85[3]);
              uint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 128, v100, v85[4]);
              uint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 128, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 128, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 128, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                uint64_t v106 = (char *)&v148[8 * (unint64_t)v141] + 8 * v142;
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while (8 * (unint64_t)v144 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 128;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85)];
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v122), a11, v88, v85[1]);
            uint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v89, v85[2]);
            uint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v122 + 64), a11, v90, v85[3]);
            float64x2_t v92 = (char *)v86 + v121;
            uint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v121), a11, v91, v85[4]);
            float64x2_t v94 = (_OWORD *)((char *)v86 + 12 * a11);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v92 + 4, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 4, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  uint64_t v156 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v114 = v115 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 4;
      unsigned int v119 = v33 - 4;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 4 <= v126 >> 4)
    {
      unsigned int v135 = v25 >> 4;
      unsigned int v111 = v26 >> 4;
      int v134 = (v25 & 0xF) + 1;
      int v110 = (v26 & 0xF) + 1;
      uint64_t v121 = 8 * a11;
      uint64_t v122 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 16 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 4;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 16;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 11);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            uint64_t v83 = __dst;
          }
          unint64_t v85 = (unsigned __int8 *)(v130 + 8 * v77);
          int32x4_t v86 = (_OWORD *)(v131 + 8 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v137 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + 8 * (v49 - v32);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              uint64_t v97 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 128, (uint64_t)v83, *v85)];
              uint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 128, v97, v85[1]);
              uint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 128, v98, v85[2]);
              uint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 128, v99, v85[3]);
              uint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 128, v100, v85[4]);
              uint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 128, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 128, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 128, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                uint64_t v106 = (char *)&v148[8 * (unint64_t)v141] + 8 * v142;
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while (8 * (unint64_t)v144 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 128;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85)];
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v122), a11, v88, v85[1]);
            uint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v89, v85[2]);
            uint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v122 + 64), a11, v90, v85[3]);
            float64x2_t v92 = (char *)v86 + v121;
            uint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v121), a11, v91, v85[4]);
            float64x2_t v94 = (_OWORD *)((char *)v86 + 12 * a11);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v92 + 4, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 4, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v129 = v21;
  uint64_t v130 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  uint64_t v156 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v134 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v128 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v126 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v126 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 4;
      int v135 = ((v20 - 1) & 0xF) + 1;
      unsigned int v136 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 0xF) + 1;
      uint64_t v119 = 8 * a11;
      uint64_t v120 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v125 = v34.i32[0] | v34.i32[1];
      BOOL v123 = v34.i32[1] != 0;
      int8x8_t v124 = v34;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (16 * v25) | 0xF;
        if (16 * v25 <= v134) {
          int v36 = v134;
        }
        else {
          int v36 = 16 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v121 = v36 - 16 * v25;
        int v132 = v35 - v36 + 1;
        unsigned int v133 = 16 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 16;
        }
        unsigned int v137 = v38;
        uint64_t v131 = v117 + (v36 - v134) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v126 < v40) {
            unsigned int v40 = v126;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v136) {
            unsigned int v43 = v135;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v133 >= v134 && v39 >= v16)
          {
            int v45 = v135;
            if (v37 != v136) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v132 != v137;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  unsigned int v68 = 16;
                  char v71 = 1;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 4) - 1;
            if (v70)
            {
              unsigned int v103 = 0;
              if (v71) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v104 = 32 - __clz(~(-1 << -(char)__clz(((v72 + 15) >> 4) - 1)));
              if (v104 | v103) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v106 = 0;
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if ((v71 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v104 = 0;
              if (!v103) {
                goto LABEL_131;
              }
LABEL_120:
              int v105 = 0;
              uint64_t v106 = 0;
              int v107 = v37 & v102;
              BOOL v108 = v103 != 0;
              BOOL v109 = v104 != 0;
              int v110 = 1;
              do
              {
                --v103;
                if (v108) {
                  v106 |= (unint64_t)(v110 & v107) << v105++;
                }
                else {
                  unsigned int v103 = 0;
                }
                --v104;
                if (v109) {
                  v106 |= (unint64_t)(v110 & v25 & ((v72 >> 4) - 1)) << v105++;
                }
                else {
                  unsigned int v104 = 0;
                }
                v110 *= 2;
                --v105;
                BOOL v109 = v104 != 0;
                BOOL v108 = v103 != 0;
              }
              while (v104 | v103);
            }
            unint64_t v54 = ((unint64_t)(v39 / v68 + v133 / v72 * ((v68 + v112) / v68)) << 14) + (v106 << 11);
            goto LABEL_60;
          }
          if (v125)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v122;
            BOOL v51 = v123;
            __int32 v53 = v124.i32[0];
            __int32 v52 = v124.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v129 + v54);
          if (v128)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v129 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v130 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (_OWORD *)(v131 + 8 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v137 > 0xF)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v120), a11, v80, v76[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v81, v76[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v120 + 64), a11, v82, v76[3]);
            int v84 = (char *)v78 + v119;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119), a11, v83, v76[4]);
            int32x4_t v86 = (_OWORD *)((char *)v78 + 12 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v84 + 4, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v145 = v43;
          char v146 = v137;
          unsigned int v141 = v121;
          unsigned int v142 = v41 - v39;
          block[6] = v76;
          uint64_t v139 = v78;
          uint64_t v140 = a11;
          unsigned int v143 = v132;
          unsigned int v144 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v89 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 128, (uint64_t)v73, *v76)];
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 128, v89, v76[1]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 128, v90, v76[2]);
          uint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 128, v91, v76[3]);
          uint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 128, v92, v76[4]);
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 128, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 128, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 128, v94 + v95, v76[7]);
          unint64_t v96 = v143;
          uint64_t v16 = v77;
          if (v143)
          {
            unint64_t v97 = 0;
            uint64_t v98 = (char *)&v148[8 * (unint64_t)v141] + 8 * v142;
            unsigned int v99 = v144;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = (char *)v139 + v140 * v97;
                do
                {
                  v101[v100] = v98[v100];
                  ++v100;
                  unsigned int v99 = v144;
                }
                while (8 * (unint64_t)v144 > v100);
                unint64_t v96 = v143;
              }
              ++v97;
              v98 += 128;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v126 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v129 = v21;
  uint64_t v130 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  uint64_t v156 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v134 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v128 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v126 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v126 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 4;
      int v135 = ((v20 - 1) & 0xF) + 1;
      unsigned int v136 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 0xF) + 1;
      uint64_t v119 = 8 * a11;
      uint64_t v120 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v125 = v34.i32[0] | v34.i32[1];
      BOOL v123 = v34.i32[1] != 0;
      int8x8_t v124 = v34;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (16 * v25) | 0xF;
        if (16 * v25 <= v134) {
          int v36 = v134;
        }
        else {
          int v36 = 16 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v121 = v36 - 16 * v25;
        int v132 = v35 - v36 + 1;
        unsigned int v133 = 16 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 16;
        }
        unsigned int v137 = v38;
        uint64_t v131 = v117 + (v36 - v134) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v126 < v40) {
            unsigned int v40 = v126;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v136) {
            unsigned int v43 = v135;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v133 >= v134 && v39 >= v16)
          {
            int v45 = v135;
            if (v37 != v136) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v132 != v137;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  unsigned int v68 = 16;
                  char v71 = 1;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 4) - 1;
            if (v70)
            {
              unsigned int v103 = 0;
              if (v71) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v104 = 32 - __clz(~(-1 << -(char)__clz(((v72 + 15) >> 4) - 1)));
              if (v104 | v103) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v106 = 0;
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if ((v71 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v104 = 0;
              if (!v103) {
                goto LABEL_131;
              }
LABEL_120:
              int v105 = 0;
              uint64_t v106 = 0;
              int v107 = v37 & v102;
              BOOL v108 = v103 != 0;
              BOOL v109 = v104 != 0;
              int v110 = 1;
              do
              {
                --v103;
                if (v108) {
                  v106 |= (unint64_t)(v110 & v107) << v105++;
                }
                else {
                  unsigned int v103 = 0;
                }
                --v104;
                if (v109) {
                  v106 |= (unint64_t)(v110 & v25 & ((v72 >> 4) - 1)) << v105++;
                }
                else {
                  unsigned int v104 = 0;
                }
                v110 *= 2;
                --v105;
                BOOL v109 = v104 != 0;
                BOOL v108 = v103 != 0;
              }
              while (v104 | v103);
            }
            unint64_t v54 = ((unint64_t)(v39 / v68 + v133 / v72 * ((v68 + v112) / v68)) << 14) + (v106 << 11);
            goto LABEL_60;
          }
          if (v125)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v122;
            BOOL v51 = v123;
            __int32 v53 = v124.i32[0];
            __int32 v52 = v124.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v129 + v54);
          if (v128)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v129 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v130 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (_OWORD *)(v131 + 8 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v137 > 0xF)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v120), a11, v80, v76[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v81, v76[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v120 + 64), a11, v82, v76[3]);
            int v84 = (char *)v78 + v119;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119), a11, v83, v76[4]);
            int32x4_t v86 = (_OWORD *)((char *)v78 + 12 * a11);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v84 + 4, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v145 = v43;
          char v146 = v137;
          unsigned int v141 = v121;
          unsigned int v142 = v41 - v39;
          block[6] = v76;
          uint64_t v139 = v78;
          uint64_t v140 = a11;
          unsigned int v143 = v132;
          unsigned int v144 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v89 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 128, (uint64_t)v73, *v76)];
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 128, v89, v76[1]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 128, v90, v76[2]);
          uint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 128, v91, v76[3]);
          uint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 128, v92, v76[4]);
          uint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 128, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 128, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v155, 128, v94 + v95, v76[7]);
          unint64_t v96 = v143;
          uint64_t v16 = v77;
          if (v143)
          {
            unint64_t v97 = 0;
            uint64_t v98 = (char *)&v148[8 * (unint64_t)v141] + 8 * v142;
            unsigned int v99 = v144;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = (char *)v139 + v140 * v97;
                do
                {
                  v101[v100] = v98[v100];
                  ++v100;
                  unsigned int v99 = v144;
                }
                while (8 * (unint64_t)v144 > v100);
                unint64_t v96 = v143;
              }
              ++v97;
              v98 += 128;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v126 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          int v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                uint64_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                uint64_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *uint64_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *uint64_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            unsigned int v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              int v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            unsigned int v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *unsigned int v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *unsigned int v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v115->i64 + v34);
              *unsigned int v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              uint64_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              unsigned int v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            unsigned int v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *unsigned int v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *unsigned int v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              unsigned int v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              char v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            long long v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *long long v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              long long v165 = (int32x4_t *)((char *)v154 + v88);
              *long long v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *long long v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              long long v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v267);
              *long long v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            uint64_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              long long v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              long long v170 = (uint64_t *)((char *)v167->i64 + v34);
              *long long v170 = 0;
              v170[1] = 0;
              float64x2_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *float64x2_t v171 = 0;
              v171[1] = 0;
              float64x2_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *float64x2_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            float64x2_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *float64x2_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int32x4_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *float64x2_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                long long v182 = (uint64_t *)((char *)v180->i64 + v34);
                *long long v182 = 0;
                v182[1] = 0;
                long long v183 = (uint64_t *)((char *)v180->i64 + v88);
                *long long v183 = 0;
                v183[1] = 0;
                float64x2_t v184 = (uint64_t *)((char *)v180->i64 + v267);
                *float64x2_t v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          float64x2_t v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          int v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                uint64_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                uint64_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *uint64_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *uint64_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            unsigned int v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              int v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            unsigned int v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *unsigned int v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *unsigned int v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v115->i64 + v34);
              *unsigned int v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              uint64_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              unsigned int v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            unsigned int v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *unsigned int v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *unsigned int v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              unsigned int v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              char v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            long long v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *long long v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              long long v165 = (int32x4_t *)((char *)v154 + v88);
              *long long v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *long long v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              long long v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v267);
              *long long v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            uint64_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              long long v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              long long v170 = (uint64_t *)((char *)v167->i64 + v34);
              *long long v170 = 0;
              v170[1] = 0;
              float64x2_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *float64x2_t v171 = 0;
              v171[1] = 0;
              float64x2_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *float64x2_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            float64x2_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *float64x2_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int32x4_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *float64x2_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                long long v182 = (uint64_t *)((char *)v180->i64 + v34);
                *long long v182 = 0;
                v182[1] = 0;
                long long v183 = (uint64_t *)((char *)v180->i64 + v88);
                *long long v183 = 0;
                v183[1] = 0;
                float64x2_t v184 = (uint64_t *)((char *)v180->i64 + v267);
                *float64x2_t v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          float64x2_t v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int32x4_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int32x4_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *int32x4_t v91 = 0;
                v91[1] = 0;
                int32x4_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *int32x4_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            int32x4_t v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int32x4_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int32x4_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            int32x4_t v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *int32x4_t v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *int32x4_t v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              int32x4_t v118 = (uint64_t *)((char *)v115->i64 + v34);
              *int32x4_t v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int32x4_t v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int32x4_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int32x4_t v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              int32x4_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            int32x4_t v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *int32x4_t v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *int32x4_t v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              int32x4_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              uint64_t v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            int32x4_t v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *int32x4_t v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              int32x4_t v165 = (int32x4_t *)((char *)v154 + v88);
              *int32x4_t v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *int32x4_t v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int32x4_t v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              uint64_t v159 = (uint64_t *)((char *)v154->i64 + v267);
              *uint64_t v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            int32x4_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              int32x4_t v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              int32x4_t v170 = (uint64_t *)((char *)v167->i64 + v34);
              *int32x4_t v170 = 0;
              v170[1] = 0;
              int32x4_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *int32x4_t v171 = 0;
              v171[1] = 0;
              int32x4_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *int32x4_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            int32x4_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *int32x4_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int16x8_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *int32x4_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                int16x8_t v182 = (uint64_t *)((char *)v180->i64 + v34);
                *int16x8_t v182 = 0;
                v182[1] = 0;
                uint64_t v183 = (uint64_t *)((char *)v180->i64 + v88);
                *uint64_t v183 = 0;
                v183[1] = 0;
                unsigned int v184 = (uint64_t *)((char *)v180->i64 + v267);
                *unsigned int v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          char v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int32x4_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int32x4_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *int32x4_t v91 = 0;
                v91[1] = 0;
                int32x4_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *int32x4_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            int32x4_t v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int32x4_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int32x4_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            int32x4_t v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *int32x4_t v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *int32x4_t v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              int32x4_t v118 = (uint64_t *)((char *)v115->i64 + v34);
              *int32x4_t v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int32x4_t v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int32x4_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int32x4_t v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              int32x4_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            int32x4_t v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *int32x4_t v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *int32x4_t v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              int32x4_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              uint64_t v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            int32x4_t v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *int32x4_t v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              int32x4_t v165 = (int32x4_t *)((char *)v154 + v88);
              *int32x4_t v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *int32x4_t v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int32x4_t v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              uint64_t v159 = (uint64_t *)((char *)v154->i64 + v267);
              *uint64_t v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            int32x4_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              int32x4_t v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              int32x4_t v170 = (uint64_t *)((char *)v167->i64 + v34);
              *int32x4_t v170 = 0;
              v170[1] = 0;
              int32x4_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *int32x4_t v171 = 0;
              v171[1] = 0;
              int32x4_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *int32x4_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            int32x4_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *int32x4_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int16x8_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *int32x4_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                int16x8_t v182 = (uint64_t *)((char *)v180->i64 + v34);
                *int16x8_t v182 = 0;
                v182[1] = 0;
                uint64_t v183 = (uint64_t *)((char *)v180->i64 + v88);
                *uint64_t v183 = 0;
                v183[1] = 0;
                unsigned int v184 = (uint64_t *)((char *)v180->i64 + v267);
                *unsigned int v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          char v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int32x4_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int32x4_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *int32x4_t v91 = 0;
                v91[1] = 0;
                int32x4_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *int32x4_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            int32x4_t v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int32x4_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int32x4_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            int32x4_t v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *int32x4_t v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *int32x4_t v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              int32x4_t v118 = (uint64_t *)((char *)v115->i64 + v34);
              *int32x4_t v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int32x4_t v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int32x4_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int32x4_t v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              int32x4_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            int32x4_t v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *int32x4_t v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *int32x4_t v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              int32x4_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              uint64_t v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            int32x4_t v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *int32x4_t v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              int32x4_t v165 = (int32x4_t *)((char *)v154 + v88);
              *int32x4_t v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *int32x4_t v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int32x4_t v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              uint64_t v159 = (uint64_t *)((char *)v154->i64 + v267);
              *uint64_t v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            int32x4_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              int32x4_t v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              int32x4_t v170 = (uint64_t *)((char *)v167->i64 + v34);
              *int32x4_t v170 = 0;
              v170[1] = 0;
              int32x4_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *int32x4_t v171 = 0;
              v171[1] = 0;
              int32x4_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *int32x4_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            int32x4_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *int32x4_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int16x8_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *int32x4_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                int16x8_t v182 = (uint64_t *)((char *)v180->i64 + v34);
                *int16x8_t v182 = 0;
                v182[1] = 0;
                uint64_t v183 = (uint64_t *)((char *)v180->i64 + v88);
                *uint64_t v183 = 0;
                v183[1] = 0;
                unsigned int v184 = (uint64_t *)((char *)v180->i64 + v267);
                *unsigned int v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          char v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int32x4_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int32x4_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *int32x4_t v91 = 0;
                v91[1] = 0;
                int32x4_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *int32x4_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            int32x4_t v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int32x4_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int32x4_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            int32x4_t v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *int32x4_t v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *int32x4_t v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              int32x4_t v118 = (uint64_t *)((char *)v115->i64 + v34);
              *int32x4_t v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int32x4_t v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int32x4_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int32x4_t v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              int32x4_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            int32x4_t v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *int32x4_t v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *int32x4_t v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              int32x4_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              uint64_t v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            int32x4_t v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *int32x4_t v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              int32x4_t v165 = (int32x4_t *)((char *)v154 + v88);
              *int32x4_t v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *int32x4_t v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int32x4_t v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              uint64_t v159 = (uint64_t *)((char *)v154->i64 + v267);
              *uint64_t v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            int32x4_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              int32x4_t v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              int32x4_t v170 = (uint64_t *)((char *)v167->i64 + v34);
              *int32x4_t v170 = 0;
              v170[1] = 0;
              int32x4_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *int32x4_t v171 = 0;
              v171[1] = 0;
              int32x4_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *int32x4_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            int32x4_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *int32x4_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int16x8_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *int32x4_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                int16x8_t v182 = (uint64_t *)((char *)v180->i64 + v34);
                *int16x8_t v182 = 0;
                v182[1] = 0;
                uint64_t v183 = (uint64_t *)((char *)v180->i64 + v88);
                *uint64_t v183 = 0;
                v183[1] = 0;
                unsigned int v184 = (uint64_t *)((char *)v180->i64 + v267);
                *unsigned int v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          char v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int32x4_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int32x4_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *int32x4_t v91 = 0;
                v91[1] = 0;
                int32x4_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *int32x4_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            int32x4_t v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int32x4_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int32x4_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            int32x4_t v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *int32x4_t v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *int32x4_t v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              int32x4_t v118 = (uint64_t *)((char *)v115->i64 + v34);
              *int32x4_t v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int32x4_t v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int32x4_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int32x4_t v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              int32x4_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            int32x4_t v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *int32x4_t v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *int32x4_t v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              int32x4_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              uint64_t v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            int32x4_t v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *int32x4_t v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              int32x4_t v165 = (int32x4_t *)((char *)v154 + v88);
              *int32x4_t v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *int32x4_t v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int32x4_t v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              uint64_t v159 = (uint64_t *)((char *)v154->i64 + v267);
              *uint64_t v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            int32x4_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              int32x4_t v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              int32x4_t v170 = (uint64_t *)((char *)v167->i64 + v34);
              *int32x4_t v170 = 0;
              v170[1] = 0;
              int32x4_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *int32x4_t v171 = 0;
              v171[1] = 0;
              int32x4_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *int32x4_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            int32x4_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *int32x4_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int16x8_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *int32x4_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                int16x8_t v182 = (uint64_t *)((char *)v180->i64 + v34);
                *int16x8_t v182 = 0;
                v182[1] = 0;
                uint64_t v183 = (uint64_t *)((char *)v180->i64 + v88);
                *uint64_t v183 = 0;
                v183[1] = 0;
                unsigned int v184 = (uint64_t *)((char *)v180->i64 + v267);
                *unsigned int v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          char v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v282 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v262 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v282 >> 4;
  unsigned int v261 = v262 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v276 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v275 = 0;
LABEL_32:
      unsigned int v273 = v27 - 4;
      unsigned int v266 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v259 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v275 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v275 = 0;
  unsigned int v259 = 0;
  unsigned int v266 = 0;
  unsigned int v273 = 0;
LABEL_33:
  if (v21 <= v261)
  {
    unsigned int v274 = a7 + a9 - 1;
    if (a7 >> 4 <= v274 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v285 = v19 >> 4;
      unsigned int v258 = v20 >> 4;
      int v284 = (v19 & 0xF) + 1;
      int v257 = (v20 & 0xF) + 1;
      uint64_t v270 = 8 * a11;
      uint64_t v271 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v269 = v36.i32[0] | v36.i32[1];
      BOOL v264 = v36.i32[1] != 0;
      int8x8_t v265 = v36;
      BOOL v263 = v36.i32[0] != 0;
      uint64_t v283 = a1;
      uint64_t v267 = 3 * a11;
      uint64_t v268 = 2 * a11;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v282) {
          int v38 = v282;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v262 < v37) {
          unsigned int v37 = v262;
        }
        int v272 = v38 - 16 * v21;
        int v280 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v257;
        if (v21 != v258) {
          int v40 = 16;
        }
        unsigned int v286 = v40;
        uint64_t v41 = v21 & ~(-1 << v266);
        uint64_t v279 = a2 + (v38 - v282) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v274 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v285) {
            unsigned int v48 = v284;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v21 >= v282 && v44 >= v42)
          {
            int v50 = v284;
            if (v39 != v285) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v280 != v286;
          }
          if (v275)
          {
            if (v273 | v266)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v273 != 0;
              BOOL v56 = v266 != 0;
              unsigned int v57 = v273;
              unsigned int v58 = v266;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v273) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v273) + (v21 >> v266) * v259) + (v53 << 9);
          }
          else
          {
            if (v269)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v264;
              BOOL v63 = v263;
              __int32 v64 = v265.i32[1];
              __int32 v65 = v265.i32[0];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (int32x4_t *)(a3 + v66);
          if (v276)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = (int32x4_t *)__dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int32x4_t *)(v279 + 2 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v286 > 0xF)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              int32x4_t v96 = *v80;
              int32x4_t v97 = v80[1];
              int32x4_t v98 = v80[2];
              int32x4_t v99 = v80[3];
              int32x4_t *v85 = vuzp1q_s32(*v80, v98);
              uint64_t v34 = a11;
              *(int32x4_t *)((char *)v85 + a11) = vuzp2q_s32(v96, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v100 = (int32x4_t *)((char *)v85 + v268);
              int32x4_t *v100 = vuzp1q_s32(v97, v99);
              *(int32x4_t *)((char *)v100 + a11) = vuzp2q_s32(v97, v99);
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16(v80->i16);
                int32x4_t *v85 = (int32x4_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int32x4_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int32x4_t v91 = (uint64_t *)((char *)v85->i64 + v268);
                *int32x4_t v91 = 0;
                v91[1] = 0;
                int32x4_t v92 = (uint64_t *)((char *)v85->i64 + v267);
                *int32x4_t v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)v80->i64 + v89;
            int32x4_t v102 = (int32x4_t *)((char *)v85 + v271);
            unsigned int v103 = v84[1];
            if (v103 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)v101;
              int32x4_t v110 = *(int32x4_t *)(v101 + 16);
              int32x4_t v111 = *(int32x4_t *)(v101 + 32);
              int32x4_t v112 = *(int32x4_t *)(v101 + 48);
              int32x4_t *v102 = vuzp1q_s32(*(int32x4_t *)v101, v111);
              *(int32x4_t *)((char *)v102 + v34) = vuzp2q_s32(v109, v111);
              int v113 = (int32x4_t *)((char *)v102 + v88);
              int32x4_t *v113 = vuzp1q_s32(v110, v112);
              *(int32x4_t *)((char *)v113 + v34) = vuzp2q_s32(v110, v112);
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t *v102 = (int32x4_t)v108;
              *(int16x8_t *)((char *)v102 + v34) = v108;
              *(int16x8_t *)((char *)v102 + v88) = v108;
              *(int16x8_t *)((char *)v102 + 3 * a11) = v108;
              uint64_t v104 = 2;
            }
            else if (v84[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v271), v34, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              int32x4_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              *int32x4_t v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v88);
              *uint64_t v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v267);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v114 = v101 + v104;
            int32x4_t v115 = v85 + 1;
            unsigned int v116 = v84[2];
            if (v116 == 63)
            {
              int32x4_t v122 = *(int32x4_t *)v114;
              int32x4_t v123 = *(int32x4_t *)(v114 + 16);
              int32x4_t v124 = *(int32x4_t *)(v114 + 32);
              int32x4_t v125 = *(int32x4_t *)(v114 + 48);
              *int32x4_t v115 = vuzp1q_s32(*(int32x4_t *)v114, v124);
              *(int32x4_t *)((char *)v115 + v34) = vuzp2q_s32(v122, v124);
              unsigned int v126 = (int32x4_t *)((char *)v115 + v88);
              int32x4_t *v126 = vuzp1q_s32(v123, v125);
              *(int32x4_t *)((char *)v126 + v34) = vuzp2q_s32(v123, v125);
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int16x8_t v121 = vld1q_dup_s16((const __int16 *)v114);
              *int32x4_t v115 = (int32x4_t)v121;
              *(int16x8_t *)((char *)v115 + v34) = v121;
              *(int16x8_t *)((char *)v115 + v88) = v121;
              *(int16x8_t *)((char *)v115 + 3 * a11) = v121;
              uint64_t v117 = 2;
            }
            else if (v84[2])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v34, v114, v116);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v85[1].i64[1] = 0;
              int32x4_t v118 = (uint64_t *)((char *)v115->i64 + v34);
              *int32x4_t v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v88);
              *uint64_t v119 = 0;
              v119[1] = 0;
              uint64_t v120 = (uint64_t *)((char *)v115->i64 + v267);
              *uint64_t v120 = 0;
              v120[1] = 0;
            }
            uint64_t v127 = v114 + v117;
            int32x4_t v128 = v102 + 1;
            unsigned int v129 = v84[3];
            if (v129 == 63)
            {
              int32x4_t v135 = *(int32x4_t *)v127;
              int32x4_t v136 = *(int32x4_t *)(v127 + 16);
              int32x4_t v137 = *(int32x4_t *)(v127 + 32);
              int32x4_t v138 = *(int32x4_t *)(v127 + 48);
              *int32x4_t v128 = vuzp1q_s32(*(int32x4_t *)v127, v137);
              *(int32x4_t *)((char *)v128 + v34) = vuzp2q_s32(v135, v137);
              uint64_t v139 = (int32x4_t *)((char *)v128 + v88);
              *uint64_t v139 = vuzp1q_s32(v136, v138);
              *(int32x4_t *)((char *)v139 + v34) = vuzp2q_s32(v136, v138);
              uint64_t v130 = 64;
            }
            else if (v129 == 1)
            {
              int16x8_t v134 = vld1q_dup_s16((const __int16 *)v127);
              *int32x4_t v128 = (int32x4_t)v134;
              *(int16x8_t *)((char *)v128 + v34) = v134;
              *(int16x8_t *)((char *)v128 + v88) = v134;
              *(int16x8_t *)((char *)v128 + 3 * a11) = v134;
              uint64_t v130 = 2;
            }
            else if (v84[3])
            {
              uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, v34, v127, v129);
            }
            else
            {
              uint64_t v130 = 0;
              v128->i64[0] = 0;
              v102[1].i64[1] = 0;
              int32x4_t v131 = (uint64_t *)((char *)v128->i64 + v34);
              void *v131 = 0;
              v131[1] = 0;
              int v132 = (uint64_t *)((char *)v128->i64 + v88);
              *int v132 = 0;
              v132[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v128->i64 + v267);
              void *v133 = 0;
              v133[1] = 0;
            }
            uint64_t v140 = v127 + v130;
            int32x4_t v141 = (int32x4_t *)((char *)v85 + v270);
            unsigned int v142 = v84[4];
            if (v142 == 63)
            {
              int32x4_t v148 = *(int32x4_t *)v140;
              int32x4_t v149 = *(int32x4_t *)(v140 + 16);
              int32x4_t v150 = *(int32x4_t *)(v140 + 32);
              int32x4_t v151 = *(int32x4_t *)(v140 + 48);
              *int32x4_t v141 = vuzp1q_s32(*(int32x4_t *)v140, v150);
              *(int32x4_t *)((char *)v141 + v34) = vuzp2q_s32(v148, v150);
              long long v152 = (int32x4_t *)((char *)v141 + v88);
              int32x4_t *v152 = vuzp1q_s32(v149, v151);
              *(int32x4_t *)((char *)v152 + v34) = vuzp2q_s32(v149, v151);
              uint64_t v143 = 64;
            }
            else if (v142 == 1)
            {
              int16x8_t v147 = vld1q_dup_s16((const __int16 *)v140);
              *int32x4_t v141 = (int32x4_t)v147;
              *(int16x8_t *)((char *)v141 + v34) = v147;
              *(int16x8_t *)((char *)v141 + v88) = v147;
              *(int16x8_t *)((char *)v141 + 3 * a11) = v147;
              uint64_t v143 = 2;
            }
            else if (v84[4])
            {
              uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v85 + v270), v34, v140, v142);
            }
            else
            {
              uint64_t v143 = 0;
              v141->i64[0] = 0;
              v141->i64[1] = 0;
              int32x4_t v144 = (uint64_t *)((char *)v141->i64 + v34);
              void *v144 = 0;
              v144[1] = 0;
              char v145 = (uint64_t *)((char *)v141->i64 + v88);
              void *v145 = 0;
              v145[1] = 0;
              uint64_t v146 = (uint64_t *)((char *)v141->i64 + v267);
              void *v146 = 0;
              v146[1] = 0;
            }
            uint64_t v153 = v140 + v143;
            int32x4_t v154 = (int32x4_t *)((char *)v85 + 12 * a11);
            unsigned int v155 = v84[5];
            if (v155 == 63)
            {
              int32x4_t v161 = *(int32x4_t *)v153;
              int32x4_t v162 = *(int32x4_t *)(v153 + 16);
              int32x4_t v163 = *(int32x4_t *)(v153 + 32);
              int32x4_t v164 = *(int32x4_t *)(v153 + 48);
              *int32x4_t v154 = vuzp1q_s32(*(int32x4_t *)v153, v163);
              *(int32x4_t *)((char *)v154 + v34) = vuzp2q_s32(v161, v163);
              int32x4_t v165 = (int32x4_t *)((char *)v154 + v88);
              *int32x4_t v165 = vuzp1q_s32(v162, v164);
              *(int32x4_t *)((char *)v165 + v34) = vuzp2q_s32(v162, v164);
              uint64_t v156 = 64;
            }
            else if (v155 == 1)
            {
              int16x8_t v160 = vld1q_dup_s16((const __int16 *)v153);
              *int32x4_t v154 = (int32x4_t)v160;
              *(int16x8_t *)((char *)v154 + v34) = v160;
              *(int16x8_t *)((char *)v154 + v88) = v160;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v160;
              uint64_t v156 = 2;
            }
            else if (v84[5])
            {
              uint64_t v156 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v34, v153, v155);
            }
            else
            {
              uint64_t v156 = 0;
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int32x4_t v157 = (uint64_t *)((char *)v154->i64 + v34);
              void *v157 = 0;
              v157[1] = 0;
              long long v158 = (uint64_t *)((char *)v154->i64 + v88);
              *long long v158 = 0;
              v158[1] = 0;
              uint64_t v159 = (uint64_t *)((char *)v154->i64 + v267);
              *uint64_t v159 = 0;
              v159[1] = 0;
            }
            uint64_t v166 = v153 + v156;
            int32x4_t v167 = v141 + 1;
            unsigned int v168 = v84[6];
            if (v168 == 63)
            {
              int32x4_t v174 = *(int32x4_t *)v166;
              int32x4_t v175 = *(int32x4_t *)(v166 + 16);
              int32x4_t v176 = *(int32x4_t *)(v166 + 32);
              int32x4_t v177 = *(int32x4_t *)(v166 + 48);
              int32x4_t *v167 = vuzp1q_s32(*(int32x4_t *)v166, v176);
              *(int32x4_t *)((char *)v167 + v34) = vuzp2q_s32(v174, v176);
              int32x4_t v178 = (int32x4_t *)((char *)v167 + v88);
              int32x4_t *v178 = vuzp1q_s32(v175, v177);
              *(int32x4_t *)((char *)v178 + v34) = vuzp2q_s32(v175, v177);
              uint64_t v169 = 64;
            }
            else if (v168 == 1)
            {
              int16x8_t v173 = vld1q_dup_s16((const __int16 *)v166);
              int32x4_t *v167 = (int32x4_t)v173;
              *(int16x8_t *)((char *)v167 + v34) = v173;
              *(int16x8_t *)((char *)v167 + v88) = v173;
              *(int16x8_t *)((char *)v167 + 3 * a11) = v173;
              uint64_t v169 = 2;
            }
            else if (v84[6])
            {
              uint64_t v169 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v167, v34, v166, v168);
            }
            else
            {
              uint64_t v169 = 0;
              v167->i64[0] = 0;
              v141[1].i64[1] = 0;
              int32x4_t v170 = (uint64_t *)((char *)v167->i64 + v34);
              *int32x4_t v170 = 0;
              v170[1] = 0;
              int32x4_t v171 = (uint64_t *)((char *)v167->i64 + v88);
              *int32x4_t v171 = 0;
              v171[1] = 0;
              int32x4_t v172 = (uint64_t *)((char *)v167->i64 + v267);
              *int32x4_t v172 = 0;
              v172[1] = 0;
            }
            uint64_t v179 = v166 + v169;
            int32x4_t v180 = v154 + 1;
            unsigned int v181 = v84[7];
            if (v181 == 63)
            {
              int32x4_t v186 = *(int32x4_t *)v179;
              int32x4_t v187 = *(int32x4_t *)(v179 + 16);
              int32x4_t v188 = *(int32x4_t *)(v179 + 32);
              int32x4_t v189 = *(int32x4_t *)(v179 + 48);
              *int32x4_t v180 = vuzp1q_s32(*(int32x4_t *)v179, v188);
              *(int32x4_t *)((char *)v180 + v34) = vuzp2q_s32(v186, v188);
              int16x8_t v190 = (int32x4_t *)((char *)v180 + v88);
              int32x4_t *v190 = vuzp1q_s32(v187, v189);
              *(int32x4_t *)((char *)v190 + v34) = vuzp2q_s32(v187, v189);
              unsigned int v42 = a7;
              uint64_t v17 = v283;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v283;
              if (v181 == 1)
              {
                int16x8_t v185 = vld1q_dup_s16((const __int16 *)v179);
                *int32x4_t v180 = (int32x4_t)v185;
                *(int16x8_t *)((char *)v180 + v34) = v185;
                *(int16x8_t *)((char *)v180 + v88) = v185;
                *(int16x8_t *)((char *)v180 + 3 * a11) = v185;
              }
              else if (v181)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v34, v179, v181);
              }
              else
              {
                v180->i64[0] = 0;
                v180->i64[1] = 0;
                int16x8_t v182 = (uint64_t *)((char *)v180->i64 + v34);
                *int16x8_t v182 = 0;
                v182[1] = 0;
                uint64_t v183 = (uint64_t *)((char *)v180->i64 + v88);
                *uint64_t v183 = 0;
                v183[1] = 0;
                unsigned int v184 = (uint64_t *)((char *)v180->i64 + v267);
                *unsigned int v184 = 0;
                v184[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v283;
          block[5] = v80;
          char v294 = v48;
          char v295 = v286;
          int v290 = v272;
          unsigned int v291 = v46 - v44;
          block[6] = v84;
          char v288 = v85;
          uint64_t v34 = a11;
          uint64_t v289 = a11;
          unsigned int v292 = v280;
          unsigned int v293 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v283 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v191 = v80[1];
            int32x4_t v192 = v80[2];
            int32x4_t v193 = v80[3];
            int32x4_t v194 = vuzp2q_s32(*v80, v192);
            int32x4_t v297 = vuzp1q_s32(*v80, v192);
            int32x4_t v299 = v194;
            int32x4_t v301 = vuzp1q_s32(v191, v193);
            int32x4_t v303 = vuzp2q_s32(v191, v193);
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v195 = vld1q_dup_s16(v80->i16);
            int32x4_t v297 = (int32x4_t)v195;
            int32x4_t v299 = (int32x4_t)v195;
            int32x4_t v301 = (int32x4_t)v195;
            int32x4_t v303 = (int32x4_t)v195;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 32, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v297 = 0uLL;
            int32x4_t v299 = 0uLL;
            int32x4_t v301 = 0uLL;
            int32x4_t v303 = 0uLL;
          }
          uint64_t v196 = (uint64_t)v80->i64 + v94;
          unsigned int v197 = v84[1];
          if (v197 == 63)
          {
            int32x4_t v199 = *(int32x4_t *)(v196 + 16);
            int32x4_t v200 = *(int32x4_t *)(v196 + 32);
            int32x4_t v201 = *(int32x4_t *)(v196 + 48);
            int32x4_t v202 = vuzp2q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v305 = vuzp1q_s32(*(int32x4_t *)v196, v200);
            int32x4_t v307 = v202;
            int32x4_t v309 = vuzp1q_s32(v199, v201);
            int32x4_t v311 = vuzp2q_s32(v199, v201);
            uint64_t v198 = 64;
          }
          else if (v197 == 1)
          {
            int16x8_t v203 = vld1q_dup_s16((const __int16 *)v196);
            int32x4_t v305 = (int32x4_t)v203;
            int32x4_t v307 = (int32x4_t)v203;
            int32x4_t v309 = (int32x4_t)v203;
            int32x4_t v311 = (int32x4_t)v203;
            uint64_t v198 = 2;
          }
          else if (v84[1])
          {
            uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 32, v196, v197);
          }
          else
          {
            uint64_t v198 = 0;
            int32x4_t v305 = 0uLL;
            int32x4_t v307 = 0uLL;
            int32x4_t v309 = 0uLL;
            int32x4_t v311 = 0uLL;
          }
          uint64_t v204 = v196 + v198;
          unsigned int v205 = v84[2];
          if (v205 == 63)
          {
            int32x4_t v207 = *(int32x4_t *)(v204 + 16);
            int32x4_t v208 = *(int32x4_t *)(v204 + 32);
            int32x4_t v209 = *(int32x4_t *)(v204 + 48);
            int32x4_t v210 = vuzp2q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v298 = vuzp1q_s32(*(int32x4_t *)v204, v208);
            int32x4_t v300 = v210;
            int32x4_t v302 = vuzp1q_s32(v207, v209);
            int32x4_t v304 = vuzp2q_s32(v207, v209);
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int16x8_t v211 = vld1q_dup_s16((const __int16 *)v204);
            int32x4_t v298 = (int32x4_t)v211;
            int32x4_t v300 = (int32x4_t)v211;
            int32x4_t v302 = (int32x4_t)v211;
            int32x4_t v304 = (int32x4_t)v211;
            uint64_t v206 = 2;
          }
          else if (v84[2])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x4_t v298 = 0uLL;
            int32x4_t v300 = 0uLL;
            int32x4_t v302 = 0uLL;
            int32x4_t v304 = 0uLL;
          }
          uint64_t v212 = v204 + v206;
          unsigned int v213 = v84[3];
          if (v213 == 63)
          {
            int32x4_t v215 = *(int32x4_t *)(v212 + 16);
            int32x4_t v216 = *(int32x4_t *)(v212 + 32);
            int32x4_t v217 = *(int32x4_t *)(v212 + 48);
            int32x4_t v218 = vuzp2q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v306 = vuzp1q_s32(*(int32x4_t *)v212, v216);
            int32x4_t v308 = v218;
            int32x4_t v310 = vuzp1q_s32(v215, v217);
            int32x4_t v312 = vuzp2q_s32(v215, v217);
            uint64_t v214 = 64;
          }
          else if (v213 == 1)
          {
            int16x8_t v219 = vld1q_dup_s16((const __int16 *)v212);
            int32x4_t v306 = (int32x4_t)v219;
            int32x4_t v308 = (int32x4_t)v219;
            int32x4_t v310 = (int32x4_t)v219;
            int32x4_t v312 = (int32x4_t)v219;
            uint64_t v214 = 2;
          }
          else if (v84[3])
          {
            uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 32, v212, v213);
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v306 = 0uLL;
            int32x4_t v308 = 0uLL;
            int32x4_t v310 = 0uLL;
            int32x4_t v312 = 0uLL;
          }
          uint64_t v220 = v212 + v214;
          unsigned int v221 = v84[4];
          if (v221 == 63)
          {
            int32x4_t v223 = *(int32x4_t *)(v220 + 16);
            int32x4_t v224 = *(int32x4_t *)(v220 + 32);
            int32x4_t v225 = *(int32x4_t *)(v220 + 48);
            int32x4_t v226 = vuzp2q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v313 = vuzp1q_s32(*(int32x4_t *)v220, v224);
            int32x4_t v315 = v226;
            int32x4_t v317 = vuzp1q_s32(v223, v225);
            int32x4_t v319 = vuzp2q_s32(v223, v225);
            uint64_t v222 = 64;
          }
          else if (v221 == 1)
          {
            int16x8_t v227 = vld1q_dup_s16((const __int16 *)v220);
            int32x4_t v313 = (int32x4_t)v227;
            int32x4_t v315 = (int32x4_t)v227;
            int32x4_t v317 = (int32x4_t)v227;
            int32x4_t v319 = (int32x4_t)v227;
            uint64_t v222 = 2;
          }
          else if (v84[4])
          {
            uint64_t v222 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v313, 32, v220, v221);
          }
          else
          {
            uint64_t v222 = 0;
            int32x4_t v313 = 0uLL;
            int32x4_t v315 = 0uLL;
            int32x4_t v317 = 0uLL;
            int32x4_t v319 = 0uLL;
          }
          uint64_t v228 = v220 + v222;
          unsigned int v229 = v84[5];
          if (v229 == 63)
          {
            int32x4_t v231 = *(int32x4_t *)(v228 + 16);
            int32x4_t v232 = *(int32x4_t *)(v228 + 32);
            int32x4_t v233 = *(int32x4_t *)(v228 + 48);
            int32x4_t v234 = vuzp2q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v321 = vuzp1q_s32(*(int32x4_t *)v228, v232);
            int32x4_t v323 = v234;
            int32x4_t v325 = vuzp1q_s32(v231, v233);
            int32x4_t v327 = vuzp2q_s32(v231, v233);
            uint64_t v230 = 64;
          }
          else if (v229 == 1)
          {
            int16x8_t v235 = vld1q_dup_s16((const __int16 *)v228);
            int32x4_t v321 = (int32x4_t)v235;
            int32x4_t v323 = (int32x4_t)v235;
            int32x4_t v325 = (int32x4_t)v235;
            int32x4_t v327 = (int32x4_t)v235;
            uint64_t v230 = 2;
          }
          else if (v84[5])
          {
            uint64_t v230 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 32, v228, v229);
          }
          else
          {
            uint64_t v230 = 0;
            int32x4_t v321 = 0uLL;
            int32x4_t v323 = 0uLL;
            int32x4_t v325 = 0uLL;
            int32x4_t v327 = 0uLL;
          }
          uint64_t v236 = v228 + v230;
          unsigned int v237 = v84[6];
          if (v237 == 63)
          {
            int32x4_t v239 = *(int32x4_t *)(v236 + 16);
            int32x4_t v240 = *(int32x4_t *)(v236 + 32);
            int32x4_t v241 = *(int32x4_t *)(v236 + 48);
            int32x4_t v242 = vuzp2q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v314 = vuzp1q_s32(*(int32x4_t *)v236, v240);
            int32x4_t v316 = v242;
            int32x4_t v318 = vuzp1q_s32(v239, v241);
            int32x4_t v320 = vuzp2q_s32(v239, v241);
            uint64_t v238 = 64;
          }
          else if (v237 == 1)
          {
            int16x8_t v243 = vld1q_dup_s16((const __int16 *)v236);
            int32x4_t v314 = (int32x4_t)v243;
            int32x4_t v316 = (int32x4_t)v243;
            int32x4_t v318 = (int32x4_t)v243;
            int32x4_t v320 = (int32x4_t)v243;
            uint64_t v238 = 2;
          }
          else if (v84[6])
          {
            uint64_t v238 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v314, 32, v236, v237);
          }
          else
          {
            uint64_t v238 = 0;
            int32x4_t v314 = 0uLL;
            int32x4_t v316 = 0uLL;
            int32x4_t v318 = 0uLL;
            int32x4_t v320 = 0uLL;
          }
          uint64_t v244 = v236 + v238;
          unsigned int v245 = v84[7];
          if (v245 == 63)
          {
            int32x4_t v246 = *(int32x4_t *)(v244 + 16);
            int32x4_t v247 = *(int32x4_t *)(v244 + 32);
            int32x4_t v248 = *(int32x4_t *)(v244 + 48);
            int32x4_t v249 = vuzp2q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v322 = vuzp1q_s32(*(int32x4_t *)v244, v247);
            int32x4_t v324 = v249;
            int32x4_t v326 = vuzp1q_s32(v246, v248);
            int32x4_t v328 = vuzp2q_s32(v246, v248);
            unsigned int v42 = a7;
            uint64_t v17 = v283;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v283;
            if (v245 == 1)
            {
              int16x8_t v250 = vld1q_dup_s16((const __int16 *)v244);
              int32x4_t v322 = (int32x4_t)v250;
              int32x4_t v324 = (int32x4_t)v250;
              int32x4_t v326 = (int32x4_t)v250;
              int32x4_t v328 = (int32x4_t)v250;
            }
            else if (v245)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 32, v244, v245);
            }
            else
            {
              int32x4_t v322 = 0uLL;
              int32x4_t v324 = 0uLL;
              int32x4_t v326 = 0uLL;
              int32x4_t v328 = 0uLL;
            }
          }
          unint64_t v251 = v292;
          unsigned int v43 = v39 + 1;
          if (v292)
          {
            unint64_t v252 = 0;
            unsigned int v253 = &v297.i8[32 * v290 + 2 * v291];
            unsigned int v254 = v293;
            do
            {
              if (v254)
              {
                uint64_t v255 = 0;
                long long v256 = &v288->i8[v289 * v252];
                do
                {
                  v256[v255] = v253[v255];
                  ++v255;
                  unsigned int v254 = v293;
                }
                while (2 * (unint64_t)v293 > v255);
                unint64_t v251 = v292;
              }
              ++v252;
              v253 += 32;
            }
            while (v252 < v251);
          }
LABEL_48:
          BOOL v22 = v39 == v274 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v261;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v276 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v255 = a8 + a10 - 1;
  unsigned int v257 = v255 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v270 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v257)
  {
    unsigned int v268 = a7 + a9 - 1;
    unsigned int v254 = a7 >> 4;
    if (a7 >> 4 <= v268 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v251 = a5 - 1;
      unsigned int v279 = (a5 - 1) >> 4;
      int v278 = ((a5 - 1) & 0xF) + 1;
      int v252 = ((a6 - 1) & 0xF) + 1;
      unsigned int v253 = (a6 - 1) >> 4;
      uint64_t v260 = 8 * a11;
      uint64_t v261 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v266 = v27.i32[0] | v27.i32[1];
      BOOL v264 = v27.i32[1] != 0;
      int8x8_t v265 = v27;
      BOOL v263 = v27.i32[0] != 0;
      unint64_t v250 = 8 * v19 * (unint64_t)v18;
      unsigned int v267 = a7;
      uint64_t v277 = v16;
      uint64_t v258 = 3 * a11;
      uint64_t v259 = 2 * a11;
      do
      {
        unsigned int v28 = (16 * v17) | 0xF;
        if (16 * v17 <= v276) {
          int v29 = v276;
        }
        else {
          int v29 = 16 * v17;
        }
        unsigned int v30 = v254;
        if (v255 < v28) {
          unsigned int v28 = v255;
        }
        unsigned int v275 = 16 * v17;
        int v262 = v29 - 16 * v17;
        int v274 = v28 - v29 + 1;
        int v31 = v252;
        if (v17 != v253) {
          int v31 = 16;
        }
        unsigned int v280 = v31;
        uint64_t v273 = a2 + (v29 - v276) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v268 < v34) {
            unsigned int v34 = v268;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v279) {
            unsigned int v37 = v278;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v275 >= v276 && v33 >= a7)
          {
            int v39 = v278;
            if (v30 != v279) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v274 != v280;
          }
          if (isLevelTiled)
          {
            unsigned int v236 = 0;
            uint64_t v237 = v250 >> (*(unsigned char *)(v16 + 57) != 0);
            char v238 = 1;
            if (v237 > 127)
            {
              if (v237 > 511)
              {
                if (v237 == 512)
                {
                  unsigned int v236 = 16;
                  char v239 = 1;
                  unsigned int v240 = 16;
                }
                else
                {
                  char v239 = 1;
                  unsigned int v240 = 0;
                  if (v237 == 1024)
                  {
                    unsigned int v240 = 8;
                    unsigned int v236 = 16;
                  }
                }
              }
              else if (v237 == 128)
              {
                char v238 = 0;
                char v239 = 0;
                unsigned int v236 = 32;
                unsigned int v240 = 32;
              }
              else
              {
                char v239 = 1;
                unsigned int v240 = 0;
                if (v237 == 256)
                {
                  char v238 = 0;
                  unsigned int v240 = 16;
                  unsigned int v236 = 32;
                }
              }
            }
            else
            {
              char v239 = 1;
              unsigned int v240 = 0;
              switch(v237)
              {
                case 4:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 128;
                  unsigned int v236 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 128;
                  unsigned int v240 = 128;
                  break;
                case 16:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v240 = 64;
                  unsigned int v236 = 128;
                  break;
                case 32:
                  char v238 = 0;
                  char v239 = 0;
                  unsigned int v236 = 64;
                  unsigned int v240 = 64;
                  break;
                default:
                  if (v237 == 64)
                  {
                    char v238 = 0;
                    char v239 = 0;
                    unsigned int v240 = 32;
                    unsigned int v236 = 64;
                  }
                  break;
              }
            }
            unsigned int v241 = (v236 >> 4) - 1;
            if (v238)
            {
              unsigned int v242 = 0;
              if (v239) {
                goto LABEL_241;
              }
LABEL_230:
              unsigned int v243 = 32 - __clz(~(-1 << -(char)__clz(((v240 + 15) >> 4) - 1)));
              if (v243 | v242) {
                goto LABEL_231;
              }
LABEL_242:
              uint64_t v245 = 0;
            }
            else
            {
              unsigned int v242 = 32 - __clz(~(-1 << -(char)__clz(v241)));
              if ((v239 & 1) == 0) {
                goto LABEL_230;
              }
LABEL_241:
              unsigned int v243 = 0;
              if (!v242) {
                goto LABEL_242;
              }
LABEL_231:
              int v244 = 0;
              uint64_t v245 = 0;
              int v246 = v30 & v241;
              BOOL v247 = v242 != 0;
              BOOL v248 = v243 != 0;
              int v249 = 1;
              do
              {
                --v242;
                if (v247) {
                  v245 |= (unint64_t)(v249 & v246) << v244++;
                }
                else {
                  unsigned int v242 = 0;
                }
                --v243;
                if (v248) {
                  v245 |= (unint64_t)(v249 & v17 & ((v240 >> 4) - 1)) << v244++;
                }
                else {
                  unsigned int v243 = 0;
                }
                v249 *= 2;
                --v244;
                BOOL v248 = v243 != 0;
                BOOL v247 = v242 != 0;
              }
              while (v243 | v242);
            }
            unint64_t v48 = ((unint64_t)(v33 / v236 + v275 / v240 * ((v236 + v251) / v236)) << 14) + (v245 << 9);
            goto LABEL_59;
          }
          if (v266)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v264;
            BOOL v45 = v263;
            __int32 v46 = v265.i32[1];
            __int32 v47 = v265.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (int32x4_t *)(a3 + v48);
          if (v270)
          {
            memcpy(__dst, v62, sizeof(__dst));
            BOOL v62 = (int32x4_t *)__dst;
          }
          BOOL v63 = (unsigned __int8 *)(a4 + 8 * v56);
          __int32 v64 = (int32x4_t *)(v273 + 2 * (v35 - a7));
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) != 0 || v280 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v277;
            block[5] = v62;
            char v288 = v37;
            char v289 = v280;
            int v284 = v262;
            unsigned int v285 = v35 - v33;
            block[6] = v63;
            unsigned int v282 = v64;
            uint64_t v25 = a11;
            uint64_t v283 = a11;
            unsigned int v286 = v274;
            unsigned int v287 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v277 + 8) + 7384), block);
              a7 = v267;
              uint64_t v16 = v277;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v73 = *v63;
              a7 = v267;
              if (v73 == 63)
              {
                int32x4_t v170 = v62[1];
                int32x4_t v171 = v62[2];
                int32x4_t v172 = v62[3];
                int32x4_t v173 = vuzp2q_s32(*v62, v171);
                int32x4_t v291 = vuzp1q_s32(*v62, v171);
                int32x4_t v293 = v173;
                int32x4_t v295 = vuzp1q_s32(v170, v172);
                int32x4_t v297 = vuzp2q_s32(v170, v172);
                uint64_t v74 = 64;
              }
              else if (v73 == 1)
              {
                int16x8_t v174 = vld1q_dup_s16(v62->i16);
                int32x4_t v291 = (int32x4_t)v174;
                int32x4_t v293 = (int32x4_t)v174;
                int32x4_t v295 = (int32x4_t)v174;
                int32x4_t v297 = (int32x4_t)v174;
                uint64_t v74 = 2;
              }
              else if (*v63)
              {
                uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 32, (uint64_t)v62, v73);
              }
              else
              {
                uint64_t v74 = 0;
                int32x4_t v291 = 0uLL;
                int32x4_t v293 = 0uLL;
                int32x4_t v295 = 0uLL;
                int32x4_t v297 = 0uLL;
              }
              uint64_t v175 = (uint64_t)v62->i64 + v74;
              unsigned int v176 = v63[1];
              if (v176 == 63)
              {
                int32x4_t v178 = *(int32x4_t *)(v175 + 16);
                int32x4_t v179 = *(int32x4_t *)(v175 + 32);
                int32x4_t v180 = *(int32x4_t *)(v175 + 48);
                int32x4_t v181 = vuzp2q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v299 = vuzp1q_s32(*(int32x4_t *)v175, v179);
                int32x4_t v301 = v181;
                int32x4_t v303 = vuzp1q_s32(v178, v180);
                int32x4_t v305 = vuzp2q_s32(v178, v180);
                uint64_t v177 = 64;
              }
              else if (v176 == 1)
              {
                int16x8_t v182 = vld1q_dup_s16((const __int16 *)v175);
                int32x4_t v299 = (int32x4_t)v182;
                int32x4_t v301 = (int32x4_t)v182;
                int32x4_t v303 = (int32x4_t)v182;
                int32x4_t v305 = (int32x4_t)v182;
                uint64_t v177 = 2;
              }
              else if (v63[1])
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 32, v175, v176);
              }
              else
              {
                uint64_t v177 = 0;
                int32x4_t v299 = 0uLL;
                int32x4_t v301 = 0uLL;
                int32x4_t v303 = 0uLL;
                int32x4_t v305 = 0uLL;
              }
              uint64_t v183 = v175 + v177;
              unsigned int v184 = v63[2];
              if (v184 == 63)
              {
                int32x4_t v186 = *(int32x4_t *)(v183 + 16);
                int32x4_t v187 = *(int32x4_t *)(v183 + 32);
                int32x4_t v188 = *(int32x4_t *)(v183 + 48);
                int32x4_t v189 = vuzp2q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v292 = vuzp1q_s32(*(int32x4_t *)v183, v187);
                int32x4_t v294 = v189;
                int32x4_t v296 = vuzp1q_s32(v186, v188);
                int32x4_t v298 = vuzp2q_s32(v186, v188);
                uint64_t v185 = 64;
              }
              else if (v184 == 1)
              {
                int16x8_t v190 = vld1q_dup_s16((const __int16 *)v183);
                int32x4_t v292 = (int32x4_t)v190;
                int32x4_t v294 = (int32x4_t)v190;
                int32x4_t v296 = (int32x4_t)v190;
                int32x4_t v298 = (int32x4_t)v190;
                uint64_t v185 = 2;
              }
              else if (v63[2])
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 32, v183, v184);
              }
              else
              {
                uint64_t v185 = 0;
                int32x4_t v292 = 0uLL;
                int32x4_t v294 = 0uLL;
                int32x4_t v296 = 0uLL;
                int32x4_t v298 = 0uLL;
              }
              uint64_t v191 = v183 + v185;
              unsigned int v192 = v63[3];
              if (v192 == 63)
              {
                int32x4_t v194 = *(int32x4_t *)(v191 + 16);
                int32x4_t v195 = *(int32x4_t *)(v191 + 32);
                int32x4_t v196 = *(int32x4_t *)(v191 + 48);
                int32x4_t v197 = vuzp2q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v300 = vuzp1q_s32(*(int32x4_t *)v191, v195);
                int32x4_t v302 = v197;
                int32x4_t v304 = vuzp1q_s32(v194, v196);
                int32x4_t v306 = vuzp2q_s32(v194, v196);
                uint64_t v193 = 64;
              }
              else if (v192 == 1)
              {
                int16x8_t v198 = vld1q_dup_s16((const __int16 *)v191);
                int32x4_t v300 = (int32x4_t)v198;
                int32x4_t v302 = (int32x4_t)v198;
                int32x4_t v304 = (int32x4_t)v198;
                int32x4_t v306 = (int32x4_t)v198;
                uint64_t v193 = 2;
              }
              else if (v63[3])
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 32, v191, v192);
              }
              else
              {
                uint64_t v193 = 0;
                int32x4_t v300 = 0uLL;
                int32x4_t v302 = 0uLL;
                int32x4_t v304 = 0uLL;
                int32x4_t v306 = 0uLL;
              }
              uint64_t v199 = v191 + v193;
              unsigned int v200 = v63[4];
              if (v200 == 63)
              {
                int32x4_t v202 = *(int32x4_t *)(v199 + 16);
                int32x4_t v203 = *(int32x4_t *)(v199 + 32);
                int32x4_t v204 = *(int32x4_t *)(v199 + 48);
                int32x4_t v205 = vuzp2q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v307 = vuzp1q_s32(*(int32x4_t *)v199, v203);
                int32x4_t v309 = v205;
                int32x4_t v311 = vuzp1q_s32(v202, v204);
                int32x4_t v313 = vuzp2q_s32(v202, v204);
                uint64_t v201 = 64;
              }
              else if (v200 == 1)
              {
                int16x8_t v206 = vld1q_dup_s16((const __int16 *)v199);
                int32x4_t v307 = (int32x4_t)v206;
                int32x4_t v309 = (int32x4_t)v206;
                int32x4_t v311 = (int32x4_t)v206;
                int32x4_t v313 = (int32x4_t)v206;
                uint64_t v201 = 2;
              }
              else if (v63[4])
              {
                uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 32, v199, v200);
              }
              else
              {
                uint64_t v201 = 0;
                int32x4_t v307 = 0uLL;
                int32x4_t v309 = 0uLL;
                int32x4_t v311 = 0uLL;
                int32x4_t v313 = 0uLL;
              }
              uint64_t v207 = v199 + v201;
              unsigned int v208 = v63[5];
              if (v208 == 63)
              {
                int32x4_t v210 = *(int32x4_t *)(v207 + 16);
                int32x4_t v211 = *(int32x4_t *)(v207 + 32);
                int32x4_t v212 = *(int32x4_t *)(v207 + 48);
                int32x4_t v213 = vuzp2q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v315 = vuzp1q_s32(*(int32x4_t *)v207, v211);
                int32x4_t v317 = v213;
                int32x4_t v319 = vuzp1q_s32(v210, v212);
                int32x4_t v321 = vuzp2q_s32(v210, v212);
                uint64_t v209 = 64;
              }
              else if (v208 == 1)
              {
                int16x8_t v214 = vld1q_dup_s16((const __int16 *)v207);
                int32x4_t v315 = (int32x4_t)v214;
                int32x4_t v317 = (int32x4_t)v214;
                int32x4_t v319 = (int32x4_t)v214;
                int32x4_t v321 = (int32x4_t)v214;
                uint64_t v209 = 2;
              }
              else if (v63[5])
              {
                uint64_t v209 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v315, 32, v207, v208);
              }
              else
              {
                uint64_t v209 = 0;
                int32x4_t v315 = 0uLL;
                int32x4_t v317 = 0uLL;
                int32x4_t v319 = 0uLL;
                int32x4_t v321 = 0uLL;
              }
              uint64_t v215 = v207 + v209;
              unsigned int v216 = v63[6];
              if (v216 == 63)
              {
                int32x4_t v218 = *(int32x4_t *)(v215 + 16);
                int32x4_t v219 = *(int32x4_t *)(v215 + 32);
                int32x4_t v220 = *(int32x4_t *)(v215 + 48);
                int32x4_t v221 = vuzp2q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v308 = vuzp1q_s32(*(int32x4_t *)v215, v219);
                int32x4_t v310 = v221;
                int32x4_t v312 = vuzp1q_s32(v218, v220);
                int32x4_t v314 = vuzp2q_s32(v218, v220);
                uint64_t v217 = 64;
              }
              else if (v216 == 1)
              {
                int16x8_t v222 = vld1q_dup_s16((const __int16 *)v215);
                int32x4_t v308 = (int32x4_t)v222;
                int32x4_t v310 = (int32x4_t)v222;
                int32x4_t v312 = (int32x4_t)v222;
                int32x4_t v314 = (int32x4_t)v222;
                uint64_t v217 = 2;
              }
              else if (v63[6])
              {
                uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 32, v215, v216);
              }
              else
              {
                uint64_t v217 = 0;
                int32x4_t v308 = 0uLL;
                int32x4_t v310 = 0uLL;
                int32x4_t v312 = 0uLL;
                int32x4_t v314 = 0uLL;
              }
              uint64_t v223 = v215 + v217;
              unsigned int v224 = v63[7];
              if (v224 == 63)
              {
                int32x4_t v225 = *(int32x4_t *)(v223 + 16);
                int32x4_t v226 = *(int32x4_t *)(v223 + 32);
                int32x4_t v227 = *(int32x4_t *)(v223 + 48);
                int32x4_t v228 = vuzp2q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v316 = vuzp1q_s32(*(int32x4_t *)v223, v226);
                int32x4_t v318 = v228;
                int32x4_t v320 = vuzp1q_s32(v225, v227);
                int32x4_t v322 = vuzp2q_s32(v225, v227);
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v277;
                unsigned int v72 = v30 + 1;
                if (v224 == 1)
                {
                  int16x8_t v229 = vld1q_dup_s16((const __int16 *)v223);
                  int32x4_t v316 = (int32x4_t)v229;
                  int32x4_t v318 = (int32x4_t)v229;
                  int32x4_t v320 = (int32x4_t)v229;
                  int32x4_t v322 = (int32x4_t)v229;
                }
                else if (v224)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 32, v223, v224);
                }
                else
                {
                  int32x4_t v316 = 0uLL;
                  int32x4_t v318 = 0uLL;
                  int32x4_t v320 = 0uLL;
                  int32x4_t v322 = 0uLL;
                }
              }
              unint64_t v230 = v286;
              if (v286)
              {
                unint64_t v231 = 0;
                int32x4_t v232 = &v291.i8[32 * v284 + 2 * v285];
                unsigned int v233 = v287;
                do
                {
                  if (v233)
                  {
                    uint64_t v234 = 0;
                    int16x8_t v235 = &v282->i8[v283 * v231];
                    do
                    {
                      v235[v234] = v232[v234];
                      ++v234;
                      unsigned int v233 = v287;
                    }
                    while (2 * (unint64_t)v287 > v234);
                    unint64_t v230 = v286;
                  }
                  ++v231;
                  v232 += 32;
                }
                while (v231 < v230);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 63)
            {
              int32x4_t v76 = *v62;
              int32x4_t v77 = v62[1];
              int32x4_t v78 = v62[2];
              int32x4_t v79 = v62[3];
              *__int32 v64 = vuzp1q_s32(*v62, v78);
              uint64_t v25 = a11;
              *(int32x4_t *)((char *)v64 + a11) = vuzp2q_s32(v76, v78);
              uint64_t v67 = 2 * a11;
              uint64_t v80 = (int32x4_t *)((char *)v64 + v259);
              *uint64_t v80 = vuzp1q_s32(v77, v79);
              *(int32x4_t *)((char *)v80 + a11) = vuzp2q_s32(v77, v79);
              uint64_t v68 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 1)
              {
                int16x8_t v75 = vld1q_dup_s16(v62->i16);
                *__int32 v64 = (int32x4_t)v75;
                *(int16x8_t *)((char *)v64 + a11) = v75;
                *(int16x8_t *)((char *)v64 + 2 * a11) = v75;
                *(int16x8_t *)((char *)v64 + 3 * a11) = v75;
                uint64_t v68 = 2;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                v64->i64[0] = 0;
                v64->i64[1] = 0;
                unsigned int v69 = (uint64_t *)((char *)v64->i64 + a11);
                *unsigned int v69 = 0;
                v69[1] = 0;
                unsigned int v70 = (uint64_t *)((char *)v64->i64 + v259);
                *unsigned int v70 = 0;
                v70[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v64->i64 + v258);
                void *v71 = 0;
                v71[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)v62->i64 + v68;
            int v82 = (int32x4_t *)((char *)v64 + v261);
            unsigned int v83 = v63[1];
            if (v83 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)v81;
              int32x4_t v90 = *(int32x4_t *)(v81 + 16);
              int32x4_t v91 = *(int32x4_t *)(v81 + 32);
              int32x4_t v92 = *(int32x4_t *)(v81 + 48);
              *int v82 = vuzp1q_s32(*(int32x4_t *)v81, v91);
              *(int32x4_t *)((char *)v82 + v25) = vuzp2q_s32(v89, v91);
              unsigned int v93 = (int32x4_t *)((char *)v82 + v67);
              *unsigned int v93 = vuzp1q_s32(v90, v92);
              *(int32x4_t *)((char *)v93 + v25) = vuzp2q_s32(v90, v92);
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              *int v82 = (int32x4_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v67) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v63[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v261), v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v82->i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v67);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v258);
              *unsigned int v87 = 0;
              v87[1] = 0;
            }
            uint64_t v94 = v81 + v84;
            int16x8_t v95 = v64 + 1;
            unsigned int v96 = v63[2];
            if (v96 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v94;
              int32x4_t v103 = *(int32x4_t *)(v94 + 16);
              int32x4_t v104 = *(int32x4_t *)(v94 + 32);
              int32x4_t v105 = *(int32x4_t *)(v94 + 48);
              *int16x8_t v95 = vuzp1q_s32(*(int32x4_t *)v94, v104);
              *(int32x4_t *)((char *)v95 + v25) = vuzp2q_s32(v102, v104);
              uint64_t v106 = (int32x4_t *)((char *)v95 + v67);
              *uint64_t v106 = vuzp1q_s32(v103, v105);
              *(int32x4_t *)((char *)v106 + v25) = vuzp2q_s32(v103, v105);
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v101 = vld1q_dup_s16((const __int16 *)v94);
              *int16x8_t v95 = (int32x4_t)v101;
              *(int16x8_t *)((char *)v95 + v25) = v101;
              *(int16x8_t *)((char *)v95 + v67) = v101;
              *(int16x8_t *)((char *)v95 + 3 * a11) = v101;
              uint64_t v97 = 2;
            }
            else if (v63[2])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v95, v25, v94, v96);
            }
            else
            {
              uint64_t v97 = 0;
              v95->i64[0] = 0;
              v64[1].i64[1] = 0;
              int32x4_t v98 = (uint64_t *)((char *)v95->i64 + v25);
              *int32x4_t v98 = 0;
              v98[1] = 0;
              int32x4_t v99 = (uint64_t *)((char *)v95->i64 + v67);
              *int32x4_t v99 = 0;
              v99[1] = 0;
              uint64_t v100 = (uint64_t *)((char *)v95->i64 + v258);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v107 = v94 + v97;
            int16x8_t v108 = v82 + 1;
            unsigned int v109 = v63[3];
            if (v109 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v107;
              int32x4_t v116 = *(int32x4_t *)(v107 + 16);
              int32x4_t v117 = *(int32x4_t *)(v107 + 32);
              int32x4_t v118 = *(int32x4_t *)(v107 + 48);
              int32x4_t *v108 = vuzp1q_s32(*(int32x4_t *)v107, v117);
              *(int32x4_t *)((char *)v108 + v25) = vuzp2q_s32(v115, v117);
              uint64_t v119 = (int32x4_t *)((char *)v108 + v67);
              *uint64_t v119 = vuzp1q_s32(v116, v118);
              *(int32x4_t *)((char *)v119 + v25) = vuzp2q_s32(v116, v118);
              uint64_t v110 = 64;
            }
            else if (v109 == 1)
            {
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v107);
              int32x4_t *v108 = (int32x4_t)v114;
              *(int16x8_t *)((char *)v108 + v25) = v114;
              *(int16x8_t *)((char *)v108 + v67) = v114;
              *(int16x8_t *)((char *)v108 + 3 * a11) = v114;
              uint64_t v110 = 2;
            }
            else if (v63[3])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v25, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              v108->i64[0] = 0;
              v82[1].i64[1] = 0;
              int32x4_t v111 = (uint64_t *)((char *)v108->i64 + v25);
              void *v111 = 0;
              v111[1] = 0;
              int32x4_t v112 = (uint64_t *)((char *)v108->i64 + v67);
              void *v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v108->i64 + v258);
              void *v113 = 0;
              v113[1] = 0;
            }
            uint64_t v120 = v107 + v110;
            int16x8_t v121 = (int32x4_t *)((char *)v64 + v260);
            unsigned int v122 = v63[4];
            if (v122 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v120;
              int32x4_t v129 = *(int32x4_t *)(v120 + 16);
              int32x4_t v130 = *(int32x4_t *)(v120 + 32);
              int32x4_t v131 = *(int32x4_t *)(v120 + 48);
              *int16x8_t v121 = vuzp1q_s32(*(int32x4_t *)v120, v130);
              *(int32x4_t *)((char *)v121 + v25) = vuzp2q_s32(v128, v130);
              int v132 = (int32x4_t *)((char *)v121 + v67);
              *int v132 = vuzp1q_s32(v129, v131);
              *(int32x4_t *)((char *)v132 + v25) = vuzp2q_s32(v129, v131);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v127 = vld1q_dup_s16((const __int16 *)v120);
              *int16x8_t v121 = (int32x4_t)v127;
              *(int16x8_t *)((char *)v121 + v25) = v127;
              *(int16x8_t *)((char *)v121 + v67) = v127;
              *(int16x8_t *)((char *)v121 + 3 * a11) = v127;
              uint64_t v123 = 2;
            }
            else if (v63[4])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v64 + v260), v25, v120, v122);
            }
            else
            {
              uint64_t v123 = 0;
              v121->i64[0] = 0;
              v121->i64[1] = 0;
              int32x4_t v124 = (uint64_t *)((char *)v121->i64 + v25);
              void *v124 = 0;
              v124[1] = 0;
              int32x4_t v125 = (uint64_t *)((char *)v121->i64 + v67);
              *int32x4_t v125 = 0;
              v125[1] = 0;
              unsigned int v126 = (uint64_t *)((char *)v121->i64 + v258);
              void *v126 = 0;
              v126[1] = 0;
            }
            uint64_t v133 = v120 + v123;
            int16x8_t v134 = (int32x4_t *)((char *)v64 + 12 * a11);
            unsigned int v135 = v63[5];
            if (v135 == 63)
            {
              int32x4_t v141 = *(int32x4_t *)v133;
              int32x4_t v142 = *(int32x4_t *)(v133 + 16);
              int32x4_t v143 = *(int32x4_t *)(v133 + 32);
              int32x4_t v144 = *(int32x4_t *)(v133 + 48);
              int32x4_t *v134 = vuzp1q_s32(*(int32x4_t *)v133, v143);
              *(int32x4_t *)((char *)v134 + v25) = vuzp2q_s32(v141, v143);
              char v145 = (int32x4_t *)((char *)v134 + v67);
              int32x4_t *v145 = vuzp1q_s32(v142, v144);
              *(int32x4_t *)((char *)v145 + v25) = vuzp2q_s32(v142, v144);
              uint64_t v136 = 64;
            }
            else if (v135 == 1)
            {
              int16x8_t v140 = vld1q_dup_s16((const __int16 *)v133);
              int32x4_t *v134 = (int32x4_t)v140;
              *(int16x8_t *)((char *)v134 + v25) = v140;
              *(int16x8_t *)((char *)v134 + v67) = v140;
              *(int16x8_t *)((char *)v134 + 3 * a11) = v140;
              uint64_t v136 = 2;
            }
            else if (v63[5])
            {
              uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v134, v25, v133, v135);
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              int32x4_t v137 = (uint64_t *)((char *)v134->i64 + v25);
              *int32x4_t v137 = 0;
              v137[1] = 0;
              int32x4_t v138 = (uint64_t *)((char *)v134->i64 + v67);
              *int32x4_t v138 = 0;
              v138[1] = 0;
              uint64_t v139 = (uint64_t *)((char *)v134->i64 + v258);
              *uint64_t v139 = 0;
              v139[1] = 0;
            }
            uint64_t v146 = v133 + v136;
            int16x8_t v147 = v121 + 1;
            unsigned int v148 = v63[6];
            if (v148 == 63)
            {
              int32x4_t v154 = *(int32x4_t *)v146;
              int32x4_t v155 = *(int32x4_t *)(v146 + 16);
              int32x4_t v156 = *(int32x4_t *)(v146 + 32);
              int32x4_t v157 = *(int32x4_t *)(v146 + 48);
              *int16x8_t v147 = vuzp1q_s32(*(int32x4_t *)v146, v156);
              *(int32x4_t *)((char *)v147 + v25) = vuzp2q_s32(v154, v156);
              long long v158 = (int32x4_t *)((char *)v147 + v67);
              *long long v158 = vuzp1q_s32(v155, v157);
              *(int32x4_t *)((char *)v158 + v25) = vuzp2q_s32(v155, v157);
              uint64_t v149 = 64;
              unsigned int v72 = v30 + 1;
            }
            else
            {
              unsigned int v72 = v30 + 1;
              if (v148 == 1)
              {
                int16x8_t v153 = vld1q_dup_s16((const __int16 *)v146);
                *int16x8_t v147 = (int32x4_t)v153;
                *(int16x8_t *)((char *)v147 + v25) = v153;
                *(int16x8_t *)((char *)v147 + v67) = v153;
                *(int16x8_t *)((char *)v147 + 3 * a11) = v153;
                uint64_t v149 = 2;
              }
              else if (v63[6])
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, v25, v146, v148);
              }
              else
              {
                uint64_t v149 = 0;
                v147->i64[0] = 0;
                v147->i64[1] = 0;
                int32x4_t v150 = (uint64_t *)((char *)v147->i64 + v25);
                *int32x4_t v150 = 0;
                v150[1] = 0;
                int32x4_t v151 = (uint64_t *)((char *)v147->i64 + v67);
                void *v151 = 0;
                v151[1] = 0;
                long long v152 = (uint64_t *)((char *)v147->i64 + v258);
                void *v152 = 0;
                v152[1] = 0;
              }
            }
            uint64_t v159 = v146 + v149;
            int16x8_t v160 = v134 + 1;
            unsigned int v161 = v63[7];
            if (v161 == 63)
            {
              int32x4_t v165 = *(int32x4_t *)v159;
              int32x4_t v166 = *(int32x4_t *)(v159 + 16);
              int32x4_t v167 = *(int32x4_t *)(v159 + 32);
              int32x4_t v168 = *(int32x4_t *)(v159 + 48);
              *int16x8_t v160 = vuzp1q_s32(*(int32x4_t *)v159, v167);
              *(int32x4_t *)((char *)v160 + v25) = vuzp2q_s32(v165, v167);
              uint64_t v169 = (int32x4_t *)((char *)v160 + v67);
              *uint64_t v169 = vuzp1q_s32(v166, v168);
              *(int32x4_t *)((char *)v169 + v25) = vuzp2q_s32(v166, v168);
              a7 = v267;
              uint64_t v16 = v277;
            }
            else
            {
              a7 = v267;
              uint64_t v16 = v277;
              if (v161 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v159);
                *int16x8_t v160 = (int32x4_t)v32;
                *(int16x8_t *)((char *)v160 + v25) = v32;
                *(int16x8_t *)((char *)v160 + v67) = v32;
                *(int16x8_t *)((char *)v160 + 3 * a11) = v32;
              }
              else if (v161)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v160, v25, v159, v161);
              }
              else
              {
                v160->i64[0] = 0;
                v160->i64[1] = 0;
                int32x4_t v162 = (uint64_t *)((char *)v160->i64 + v25);
                *int32x4_t v162 = 0;
                v162[1] = 0;
                int32x4_t v163 = (uint64_t *)((char *)v160->i64 + v67);
                *int32x4_t v163 = 0;
                v163[1] = 0;
                int32x4_t v164 = (uint64_t *)((char *)v160->i64 + v258);
                *int32x4_t v164 = 0;
                v164[1] = 0;
              }
            }
          }
          BOOL v21 = v30 == v268 >> 4;
          unsigned int v30 = v72;
        }
        while (!v21);
        BOOL v21 = v17++ == v257;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          int16x8_t v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            int16x8_t v75 = (int64x2_t *)__dst;
          }
          int32x4_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          int32x4_t v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              int32x4_t v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              int32x4_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              int32x4_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              int32x4_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              unsigned int v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              uint64_t v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int32x4_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            uint64_t v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            int v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            unsigned int v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            uint64_t v84 = (int64x2_t *)((char *)v78 + v113);
            uint64_t v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            char v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            unsigned int v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          int16x8_t v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            int16x8_t v75 = (int64x2_t *)__dst;
          }
          int32x4_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          int32x4_t v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              int32x4_t v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              int32x4_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              int32x4_t v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              int32x4_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              unsigned int v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              uint64_t v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int32x4_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            uint64_t v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            int v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            unsigned int v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            uint64_t v84 = (int64x2_t *)((char *)v78 + v113);
            uint64_t v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            char v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            unsigned int v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            int16x8_t v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            int32x4_t v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            int32x4_t v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          int v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          unsigned int v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          uint64_t v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          uint64_t v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          char v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            int32x4_t v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                unsigned int v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            int16x8_t v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            int32x4_t v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            int32x4_t v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          int v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          unsigned int v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          uint64_t v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          uint64_t v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          char v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            int32x4_t v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                unsigned int v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          int16x8_t v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            int16x8_t v75 = (int64x2_t *)__dst;
          }
          int32x4_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          int32x4_t v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              unint64_t v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              int32x4_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              unsigned int v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              uint64_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              unsigned int v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              unsigned int v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                uint64_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            uint64_t v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            int v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            unsigned int v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            uint64_t v84 = (int64x2_t *)((char *)v78 + v113);
            uint64_t v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            char v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            uint64_t v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v106 = v107 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 4;
      unsigned int v111 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v127 = v17 >> 4;
      unsigned int v103 = v18 >> 4;
      int v126 = (v17 & 0xF) + 1;
      int v102 = (v18 & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (16 * v19) | 0xF;
        if (16 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 16 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 16 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 16;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (16 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          int16x8_t v75 = (int64x2_t *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            int16x8_t v75 = (int64x2_t *)__dst;
          }
          int32x4_t v77 = (unsigned __int8 *)(a4 + 8 * v69);
          int32x4_t v78 = (int64x2_t *)(v123 + 4 * (v41 - v24));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) != 0 || v129 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 4 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              unint64_t v89 = (int64x2_t *)((char *)v75
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v75, *v77));
              int32x4_t v90 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v89, v77[1]));
              unsigned int v91 = (int64x2_t *)((char *)v90
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v90, v77[2]));
              uint64_t v92 = (int64x2_t *)((char *)v91
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v91, v77[3]));
              unsigned int v93 = (int64x2_t *)((char *)v92
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v92, v77[4]));
              unsigned int v94 = (int64x2_t *)((char *)v93
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v93, v77[5]));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v94 + v95), v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                uint64_t v98 = &v140[4 * (unint64_t)v133].i8[4 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (4 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 64;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v75, *v77));
            uint64_t v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114), a11, v80, v77[1]));
            int v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, v81, v77[2]));
            unsigned int v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v114 + 32), a11, v82, v77[3]));
            uint64_t v84 = (int64x2_t *)((char *)v78 + v113);
            uint64_t v85 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v78 + v113), a11, v83, v77[4]));
            char v86 = (int64x2_t *)((char *)v78 + 12 * a11);
            uint64_t v87 = (int64x2_t *)((char *)v85
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]));
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 2, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 2, a11, (int64x2_t *)((char *)v87 + v88), v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 4;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            int16x8_t v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            int32x4_t v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            int32x4_t v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          int v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          unsigned int v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          uint64_t v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          uint64_t v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          char v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            int32x4_t v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                unsigned int v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v126 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v108 = a8 + a10 - 1;
  unsigned int v110 = v108 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v120 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v110)
  {
    unsigned int v118 = a7 + a9 - 1;
    unsigned int v107 = a7 >> 4;
    if (a7 >> 4 <= v118 >> 4)
    {
      unsigned int v104 = a5 - 1;
      unsigned int v106 = (a6 - 1) >> 4;
      int v127 = ((a5 - 1) & 0xF) + 1;
      unsigned int v128 = (a5 - 1) >> 4;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v111 = 8 * a11;
      uint64_t v112 = 4 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v25));
      __int32 v117 = v26.i32[0] | v26.i32[1];
      BOOL v115 = v26.i32[1] != 0;
      int8x8_t v116 = v26;
      BOOL v114 = v26.i32[0] != 0;
      unint64_t v103 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (16 * v17) | 0xF;
        if (16 * v17 <= v126) {
          int v28 = v126;
        }
        else {
          int v28 = 16 * v17;
        }
        unsigned int v29 = v107;
        if (v108 < v27) {
          unsigned int v27 = v108;
        }
        int v113 = v28 - 16 * v17;
        int v124 = v27 - v28 + 1;
        unsigned int v125 = 16 * v17;
        int v30 = v105;
        if (v17 != v106) {
          int v30 = 16;
        }
        unsigned int v129 = v30;
        uint64_t v123 = a2 + (v28 - v126) * a11;
        do
        {
          unsigned int v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v118 < v32) {
            unsigned int v32 = v118;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v128) {
            unsigned int v35 = v127;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (v125 >= v126 && v31 >= a7)
          {
            int v37 = v127;
            if (v29 != v128) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v124 != v129;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v103 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  unsigned int v60 = 16;
                  char v63 = 1;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 4) - 1;
            if (v62)
            {
              unsigned int v95 = 0;
              if (v63) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v96 = 32 - __clz(~(-1 << -(char)__clz(((v64 + 15) >> 4) - 1)));
              if (v96 | v95) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v98 = 0;
            }
            else
            {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
              if ((v63 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v96 = 0;
              if (!v95) {
                goto LABEL_131;
              }
LABEL_120:
              int v97 = 0;
              uint64_t v98 = 0;
              int v99 = v29 & v94;
              BOOL v100 = v95 != 0;
              BOOL v101 = v96 != 0;
              int v102 = 1;
              do
              {
                --v95;
                if (v100) {
                  v98 |= (unint64_t)(v102 & v99) << v97++;
                }
                else {
                  unsigned int v95 = 0;
                }
                --v96;
                if (v101) {
                  v98 |= (unint64_t)(v102 & v17 & ((v64 >> 4) - 1)) << v97++;
                }
                else {
                  unsigned int v96 = 0;
                }
                v102 *= 2;
                --v97;
                BOOL v101 = v96 != 0;
                BOOL v100 = v95 != 0;
              }
              while (v96 | v95);
            }
            unint64_t v46 = ((unint64_t)(v31 / v60 + v125 / v64 * ((v60 + v104) / v60)) << 14) + (v98 << 10);
            goto LABEL_60;
          }
          if (v117)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v114;
            BOOL v43 = v115;
            __int32 v45 = v116.i32[0];
            __int32 v44 = v116.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (int64x2_t *)(a3 + v46);
          if (v120)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = (int64x2_t *)__dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          BOOL v70 = (int64x2_t *)(v123 + 4 * (v33 - a7));
          char v71 = v35 < 0x10 || v36;
          if ((v71 & 1) == 0 && v129 > 0xF)
          {
            int v72 = (int64x2_t *)((char *)v65
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, v65, *v68));
            BOOL v73 = (int64x2_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112), a11, v72, v68[1]));
            unint64_t v74 = (int64x2_t *)((char *)v73
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 2, a11, v73, v68[2]));
            int16x8_t v75 = (int64x2_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v112 + 32), a11, v74, v68[3]));
            int v76 = (int64x2_t *)((char *)v70 + v111);
            int32x4_t v77 = (int64x2_t *)((char *)v75
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v70 + v111), a11, v75, v68[4]));
            int32x4_t v78 = (int64x2_t *)((char *)v70 + 12 * a11);
            char v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]));
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 2, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 2, a11, (int64x2_t *)((char *)v79 + v80), v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v137 = v35;
          char v138 = v129;
          unsigned int v133 = v113;
          unsigned int v134 = v33 - v31;
          block[6] = v68;
          uint64_t v131 = v70;
          uint64_t v132 = a11;
          unsigned int v135 = v124;
          unsigned int v136 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (int64x2_t *)((char *)v65
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v65, *v68));
          int v82 = (int64x2_t *)((char *)v81
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, v81, v68[1]));
          unsigned int v83 = (int64x2_t *)((char *)v82
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v82, v68[2]));
          uint64_t v84 = (int64x2_t *)((char *)v83
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v143, 64, v83, v68[3]));
          uint64_t v85 = (int64x2_t *)((char *)v84
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v144, 64, v84, v68[4]));
          char v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 64, v85, v68[5]));
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v145, 64, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 64, (int64x2_t *)((char *)v86 + v87), v68[7]);
          unint64_t v88 = v135;
          a7 = v69;
          if (v135)
          {
            unint64_t v89 = 0;
            int32x4_t v90 = &v140[4 * (unint64_t)v133].i8[4 * v134];
            unsigned int v91 = v136;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                unsigned int v93 = &v131->i8[v132 * v89];
                do
                {
                  v93[v92] = v90[v92];
                  ++v92;
                  unsigned int v91 = v136;
                }
                while (4 * (unint64_t)v136 > v92);
                unint64_t v88 = v135;
              }
              ++v89;
              v90 += 64;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v118 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v110;
      }
      while (!v21);
    }
  }
}