uint64_t sub_1000B9F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = sub_100010218((uint64_t *)&unk_10080CFA0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - v6;
  v8 = sub_100010218(&qword_1007FCC70);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - v12;
  v14 = type metadata accessor for Tips.Status();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  *v10 = 0;
  sub_10001B220((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_10080CFA0);
  State.init(wrappedValue:)();
  sub_10001457C((uint64_t)v7, (uint64_t *)&unk_10080CFA0);
  sub_10002C4EC((uint64_t)v10, (uint64_t)v13, &qword_1007FCC70);
  sub_10001B220((uint64_t)v13, (uint64_t)v10, &qword_1007FCC70);
  *(_OWORD *)a1 = xmmword_1006D8CC0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  v15 = sub_100010218(&qword_1007FCC78);
  sub_10001B220((uint64_t)v10, a1 + *(int *)(v15 + 48), &qword_1007FCC70);
  sub_1000C04A4(0x7374686769736E49, 0xE800000000000000, 0);
  swift_bridgeObjectRetain();
  sub_10001457C((uint64_t)v13, &qword_1007FCC70);
  sub_10001457C((uint64_t)v10, &qword_1007FCC70);
  sub_10002B8D0(0x7374686769736E49, 0xE800000000000000, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BA18C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100010218((uint64_t *)&unk_10080CFA0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - v6;
  uint64_t v8 = sub_100010218(&qword_1007FCC60);
  __chkstk_darwin(v8 - 8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - v12;
  uint64_t v14 = type metadata accessor for Tips.Status();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  sub_10001B220((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_10080CFA0);
  State.init(wrappedValue:)();
  sub_10001457C((uint64_t)v7, (uint64_t *)&unk_10080CFA0);
  sub_10002C4EC((uint64_t)v10, (uint64_t)v13, &qword_1007FCC60);
  sub_10001B220((uint64_t)v13, (uint64_t)v10, &qword_1007FCC60);
  *(_OWORD *)a1 = xmmword_1006D8CF0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100010218(&qword_1007FCC68);
  sub_10001B220((uint64_t)v10, a1 + *(int *)(v15 + 48), &qword_1007FCC60);
  sub_1000C04A4(0x206C7566646E694DLL, 0xEF736574756E694DLL, 0);
  swift_bridgeObjectRetain();
  sub_10001457C((uint64_t)v13, &qword_1007FCC60);
  sub_10001457C((uint64_t)v10, &qword_1007FCC60);
  sub_10002B8D0(0x206C7566646E694DLL, 0xEF736574756E694DLL, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BA3E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100010218((uint64_t *)&unk_10080CFA0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - v6;
  uint64_t v8 = sub_100010218(&qword_1007FCC50);
  __chkstk_darwin(v8 - 8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - v12;
  uint64_t v14 = type metadata accessor for Tips.Status();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  sub_10001B220((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_10080CFA0);
  State.init(wrappedValue:)();
  sub_10001457C((uint64_t)v7, (uint64_t *)&unk_10080CFA0);
  sub_10002C4EC((uint64_t)v10, (uint64_t)v13, &qword_1007FCC50);
  sub_10001B220((uint64_t)v13, (uint64_t)v10, &qword_1007FCC50);
  *(void *)a1 = 0xD00000000000001ELL;
  *(void *)(a1 + 8) = 0x800000010068ABA0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100010218(&qword_1007FCC58);
  sub_10001B220((uint64_t)v10, a1 + *(int *)(v15 + 48), &qword_1007FCC50);
  sub_1000C04A4(0xD00000000000001ELL, 0x800000010068ABA0, 0);
  swift_bridgeObjectRetain();
  sub_10001457C((uint64_t)v13, &qword_1007FCC50);
  sub_10001457C((uint64_t)v10, &qword_1007FCC50);
  sub_10002B8D0(0xD00000000000001ELL, 0x800000010068ABA0, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BA62C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100010218((uint64_t *)&unk_10080CFA0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - v6;
  uint64_t v8 = sub_100010218(&qword_1007FCC40);
  __chkstk_darwin(v8 - 8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - v12;
  uint64_t v14 = type metadata accessor for Tips.Status();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  sub_10001B220((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_10080CFA0);
  State.init(wrappedValue:)();
  sub_10001457C((uint64_t)v7, (uint64_t *)&unk_10080CFA0);
  sub_10002C4EC((uint64_t)v10, (uint64_t)v13, &qword_1007FCC40);
  sub_10001B220((uint64_t)v13, (uint64_t)v10, &qword_1007FCC40);
  *(_OWORD *)a1 = xmmword_1006D8D00;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100010218(&qword_1007FCC48);
  sub_10001B220((uint64_t)v10, a1 + *(int *)(v15 + 48), &qword_1007FCC40);
  sub_1000C04A4(0x6974736567677553, 0xEB00000000736E6FLL, 0);
  swift_bridgeObjectRetain();
  sub_10001457C((uint64_t)v13, &qword_1007FCC40);
  sub_10001457C((uint64_t)v10, &qword_1007FCC40);
  sub_10002B8D0(0x6974736567677553, 0xEB00000000736E6FLL, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BA880()
{
  return Toggle.init(isOn:label:)();
}

void sub_1000BA8F4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000017;
  *(void *)(a1 + 8) = 0x800000010068AB80;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

void sub_1000BA924(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000010;
  *(void *)(a1 + 8) = 0x800000010068AB60;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

double sub_1000BA954@<D0>(uint64_t a1@<X8>)
{
  double result = 3.53705588e160;
  *(_OWORD *)a1 = xmmword_1006D8D10;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1000BA974@<X0>(char *a1@<X8>)
{
  v39 = a1;
  uint64_t v36 = sub_100010218(&qword_1007FCAB8);
  uint64_t v31 = *(void *)(v36 - 8);
  uint64_t v1 = v31;
  __chkstk_darwin(v36);
  v38 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v37 = (char *)&v29 - v4;
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - v9;
  uint64_t v11 = sub_100010218(&qword_1007FCB70);
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v12 = v35;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v29 - v16;
  AppStorage.projectedValue.getter();
  v34 = v17;
  Toggle.init(isOn:label:)();
  v32 = v10;
  Button.init(action:label:)();
  v30 = v7;
  Button.init(action:label:)();
  v18 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v33 = v14;
  v18(v14, v17, v11);
  v19 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v20 = v37;
  v21 = v10;
  uint64_t v22 = v36;
  v19(v37, v21, v36);
  v23 = v38;
  v19(v38, v7, v22);
  v24 = v39;
  v18(v39, v14, v11);
  uint64_t v25 = sub_100010218(&qword_1007FCB78);
  v19(&v24[*(int *)(v25 + 48)], v20, v22);
  v19(&v24[*(int *)(v25 + 64)], v23, v22);
  v26 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26(v30, v22);
  v26(v32, v22);
  v27 = *(void (**)(char *, uint64_t))(v35 + 8);
  v27(v34, v11);
  v26(v23, v22);
  v26(v20, v22);
  return ((uint64_t (*)(char *, uint64_t))v27)(v33, v11);
}

void sub_1000BAD8C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000023;
  *(void *)(a1 + 8) = 0x800000010068AB30;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &_swiftEmptyArrayStorage;
}

void sub_1000BADBC()
{
  uint64_t v0 = type metadata accessor for Calendar.Component();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self standardUserDefaults];
  static Date.now.getter();
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Calendar.Component.weekOfYear(_:), v0);
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    v15(v13, v7);
  }
  NSString v17 = String._bridgeToObjectiveC()();
  [v14 setObject:isa forKey:v17];

  swift_unknownObjectRelease();
}

uint64_t sub_1000BB100@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC414(a1);
}

void sub_1000BB11C()
{
}

void sub_1000BB144(uint64_t a1, uint64_t a2, SEL *a3, uint64_t a4)
{
  id v6 = [self standardUserDefaults];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 *a3:a4:v7];
}

uint64_t sub_1000BB1E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC414(a1);
}

uint64_t sub_1000BB204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = sub_100010218(&qword_1007FCAB8);
  uint64_t v38 = *(void *)(v43 - 8);
  uint64_t v2 = v38;
  __chkstk_darwin(v43);
  v42 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v31 - v5;
  uint64_t v34 = static VerticalAlignment.center.getter();
  sub_1000BB748((uint64_t)&v63);
  uint64_t v8 = v63;
  uint64_t v7 = v64;
  uint64_t v44 = v64;
  int v9 = v65;
  uint64_t v10 = v66;
  uint64_t v55 = v67;
  uint64_t v57 = v68;
  int v45 = v69;
  uint64_t v54 = v70;
  uint64_t v33 = static VerticalAlignment.center.getter();
  sub_1000BB90C((uint64_t)&v63);
  uint64_t v40 = v63;
  uint64_t v56 = v64;
  unsigned __int8 v11 = v65;
  int v49 = v65;
  uint64_t v41 = v66;
  uint64_t v59 = v68;
  uint64_t v60 = v67;
  int v58 = v69;
  uint64_t v61 = v70;
  uint64_t v32 = static VerticalAlignment.center.getter();
  sub_1000BBAD0((uint64_t)&v63);
  uint64_t v47 = v63;
  uint64_t v46 = v64;
  int v62 = v65;
  uint64_t v48 = v66;
  uint64_t v51 = v68;
  uint64_t v52 = v67;
  int v50 = v69;
  uint64_t v53 = v70;
  v39 = v6;
  Button.init(action:label:)();
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v12 = v42;
  uint64_t v13 = v6;
  uint64_t v14 = v43;
  v31(v42, v13, v43);
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v36 = v8;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  int v35 = v9;
  *(unsigned char *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v9;
  uint64_t v37 = v10;
  uint64_t v15 = v55;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v57;
  LOBYTE(v7) = v45;
  *(unsigned char *)(a1 + 72) = v45;
  uint64_t v16 = v33;
  *(void *)(a1 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v54;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v17 = v40;
  uint64_t v18 = v56;
  *(void *)(a1 + 112) = v40;
  *(void *)(a1 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v18;
  *(unsigned char *)(a1 + 128) = v11;
  uint64_t v19 = v60;
  *(void *)(a1 + 136) = v41;
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v59;
  *(unsigned char *)(a1 + 16sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v58;
  uint64_t v20 = v32;
  *(void *)(a1 + 168) = v61;
  *(void *)(a1 + 176) = v20;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 1;
  uint64_t v21 = v46;
  *(void *)(a1 + 20sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v47;
  *(void *)(a1 + 208) = v21;
  *(unsigned char *)(a1 + 216) = v62;
  uint64_t v22 = v52;
  *(void *)(a1 + 224) = v48;
  *(void *)(a1 + 232) = v22;
  *(void *)(a1 + 24sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v51;
  *(unsigned char *)(a1 + 248) = v50;
  *(void *)(a1 + 256) = v53;
  uint64_t v23 = sub_100010218(&qword_1007FCB68);
  v31((char *)(a1 + *(int *)(v23 + 80)), v12, v14);
  sub_1000C04A4(v8, v44, v9);
  swift_bridgeObjectRetain();
  sub_1000C04A4(v55, v57, v7);
  swift_bridgeObjectRetain();
  sub_1000C04A4(v17, v56, v49);
  swift_bridgeObjectRetain();
  sub_1000C04A4(v60, v59, v58);
  swift_bridgeObjectRetain();
  uint64_t v24 = v47;
  uint64_t v25 = v46;
  sub_1000C04A4(v47, v46, v62);
  swift_bridgeObjectRetain();
  uint64_t v26 = v51;
  uint64_t v27 = v52;
  LOBYTE(v7) = v50;
  sub_1000C04A4(v52, v51, v50);
  v28 = *(void (**)(char *, uint64_t))(v38 + 8);
  swift_bridgeObjectRetain();
  uint64_t v29 = v43;
  v28(v39, v43);
  v28(v42, v29);
  sub_10002B8D0(v24, v25, v62);
  swift_bridgeObjectRelease();
  sub_10002B8D0(v27, v26, v7);
  swift_bridgeObjectRelease();
  sub_10002B8D0(v40, v56, v49);
  swift_bridgeObjectRelease();
  sub_10002B8D0(v60, v59, v58);
  swift_bridgeObjectRelease();
  sub_10002B8D0(v36, v44, v35);
  swift_bridgeObjectRelease();
  sub_10002B8D0(v55, v57, v45);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BB748@<X0>(uint64_t a1@<X8>)
{
  if (qword_1007F6930 != -1) {
    swift_once();
  }
  sub_10004D528(1);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = Text.bold()();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  sub_10002B8D0(v2, v4, v6);
  swift_bridgeObjectRelease();
  *(void *)a1 = 0x100000000000001ELL;
  *(void *)(a1 + 8) = 0x800000010068AA60;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v9;
  *(unsigned char *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v11;
  sub_1000C04A4(0x100000000000001ELL, 0x800000010068AA60, 0);
  swift_bridgeObjectRetain();
  sub_1000C04A4(v7, v9, v13);
  swift_bridgeObjectRetain();
  sub_10002B8D0(v7, v9, v13);
  swift_bridgeObjectRelease();
  sub_10002B8D0(0x100000000000001ELL, 0x800000010068AA60, 0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BB90C@<X0>(uint64_t a1@<X8>)
{
  if (qword_1007F6930 != -1) {
    swift_once();
  }
  sub_10004D528(0);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = Text.bold()();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  sub_10002B8D0(v2, v4, v6);
  swift_bridgeObjectRelease();
  *(void *)a1 = 0x100000000000001CLL;
  *(void *)(a1 + 8) = 0x800000010068AA40;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v9;
  *(unsigned char *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v11;
  sub_1000C04A4(0x100000000000001CLL, 0x800000010068AA40, 0);
  swift_bridgeObjectRetain();
  sub_1000C04A4(v7, v9, v13);
  swift_bridgeObjectRetain();
  sub_10002B8D0(v7, v9, v13);
  swift_bridgeObjectRelease();
  sub_10002B8D0(0x100000000000001CLL, 0x800000010068AA40, 0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BBAD0@<X0>(uint64_t a1@<X8>)
{
  if (qword_1007F6E48 != -1) {
    swift_once();
  }
  [(id)qword_10083D3C0 hasSeenBothHealthTCCs];
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  uint64_t v7 = Text.bold()();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  sub_10002B8D0(v2, v4, v6);
  swift_bridgeObjectRelease();
  *(void *)a1 = 0x1000000000000040;
  *(void *)(a1 + 8) = 0x800000010068A9F0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v9;
  *(unsigned char *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v11;
  sub_1000C04A4(0x1000000000000040, 0x800000010068A9F0, 0);
  swift_bridgeObjectRetain();
  sub_1000C04A4(v7, v9, v13);
  swift_bridgeObjectRetain();
  sub_10002B8D0(v7, v9, v13);
  swift_bridgeObjectRelease();
  sub_10002B8D0(0x1000000000000040, 0x800000010068A9F0, 0);

  return swift_bridgeObjectRelease();
}

void sub_1000BBC94()
{
  if (qword_1007F6E48 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10083D3C0;
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setURL:0 forKey:v1];

  uint64_t v2 = (void *)qword_10083D3C0;
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setURL:0 forKey:v3];
}

uint64_t sub_1000BBD84@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC414(a1);
}

uint64_t sub_1000BBDA0()
{
  return Button.init(action:label:)();
}

id sub_1000BBDE4()
{
  id v0 = [self standardUserDefaults];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  NSString v2 = String._bridgeToObjectiveC()();
  [v0 setObject:isa forKey:v2];

  if (qword_1007F6E48 != -1) {
    swift_once();
  }
  NSString v3 = (void *)qword_10083D3C0;

  return [v3 setBool:0 forKey:@"ALWAYS_USE_MOMENT_DATE"];
}

uint64_t sub_1000BBEEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC414(a1);
}

uint64_t sub_1000BBF08@<X0>(uint64_t a1@<X8>)
{
  v14[1] = a1;
  uint64_t v2 = type metadata accessor for AdminMenu();
  v14[0] = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v14[0] + 64);
  __chkstk_darwin(v2);
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v4);
  char v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010218(&qword_1007FCAD0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = xmmword_1006D8D20;
  char v17 = 0;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v15 = v1;
  sub_100010218(&qword_1007FCAD8);
  sub_1000BFE28();
  Section<>.init(header:content:)();
  sub_100010218(&qword_1007FC8F0);
  State.wrappedValue.getter();
  sub_1000C20D8(v1, (uint64_t)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AdminMenu);
  unint64_t v11 = (*(unsigned __int8 *)(v14[0] + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14[0] + 80);
  uint64_t v12 = swift_allocObject();
  sub_1000BFEF0((uint64_t)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  sub_1000BFF6C();
  sub_1000BFFF4();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  sub_10001457C((uint64_t)v6, (uint64_t *)&unk_1007FC470);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000BC1EC()
{
  return Button.init(action:label:)();
}

void sub_1000BC230()
{
  if (qword_1007F6BA0 != -1) {
    swift_once();
  }
  sub_1002B9164();
}

uint64_t sub_1000BC288@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC414(a1);
}

uint64_t sub_1000BC2A4()
{
  return Button.init(action:label:)();
}

void sub_1000BC2E8()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  id v0 = *(void **)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_container);
  uint64_t v1 = (objc_class *)type metadata accessor for AssetContentTypeOperation();
  uint64_t v2 = objc_allocWithZone(v1);
  *(void *)&v2[qword_1008062A0] = v0;
  v2[qword_100806298] = 1;
  v5.receiver = v2;
  v5.super_class = v1;
  id v3 = v0;
  [super init];
  if (qword_1007F6EE0 != -1) {
    swift_once();
  }
  [qword_10083D450 addOperation:v4];
}

uint64_t sub_1000BC3F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BC414(a1);
}

uint64_t sub_1000BC414@<X0>(uint64_t a1@<X8>)
{
  if (qword_1007F6D40 != -1) {
    swift_once();
  }
  uint64_t result = Text.foregroundColor(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000BC4AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1002BB1B0();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1000BC4E4(uint64_t a1)
{
  uint64_t v2 = sub_100010218((uint64_t *)&unk_10080CFA0);
  __chkstk_darwin(v2 - 8);
  sub_10001B220(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_10080CFA0);
  sub_100010218(&qword_1007FCDC8);
  State.wrappedValue.setter();
  return sub_10001457C(a1, (uint64_t *)&unk_10080CFA0);
}

uint64_t sub_1000BC5A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for _TaskModifier();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  v42 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  uint64_t v46 = v9;
  __chkstk_darwin(v8);
  uint64_t v43 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void *)(a1 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v13);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  sub_1000BC974((uint64_t)v47);
  uint64_t v35 = v47[0];
  uint64_t v34 = v47[1];
  int v44 = v48;
  uint64_t v39 = v51;
  uint64_t v40 = v50;
  uint64_t v38 = v52;
  uint64_t v36 = v49;
  uint64_t v37 = v53;
  int v41 = v55;
  unsigned int v33 = v54;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(&v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a1);
  unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v14;
  *(void *)(v17 + 24) = v15;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v11 + 32))(v17 + v16, &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  uint64_t v18 = v43;
  static TaskPriority.userInitiated.getter();
  uint64_t v19 = v42;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v46 + 16))(&v42[*(int *)(v6 + 28)], v18, v45);
  *uint64_t v19 = &unk_1007FCDD0;
  v19[1] = v17;
  uint64_t v20 = sub_100010218(&qword_1007FCDD8);
  sub_1000C20D8((uint64_t)v19, a2 + *(int *)(v20 + 36), (uint64_t (*)(void))&type metadata accessor for _TaskModifier);
  uint64_t v21 = v35;
  uint64_t v22 = v36;
  uint64_t v23 = v34;
  *(void *)a2 = v35;
  *(void *)(a2 + 8) = v23;
  char v24 = v44;
  *(unsigned char *)(a2 + 16) = v44;
  uint64_t v26 = v39;
  uint64_t v25 = v40;
  *(void *)(a2 + 24) = v22;
  *(void *)(a2 + 32) = v25;
  uint64_t v28 = v37;
  uint64_t v27 = v38;
  *(void *)(a2 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v26;
  *(void *)(a2 + 48) = v27;
  *(void *)(a2 + 56) = v28;
  uint64_t v29 = v33;
  *(_WORD *)(a2 + 64) = v33;
  LOBYTE(v17) = v41;
  *(unsigned char *)(a2 + 66) = v41;
  uint64_t v30 = v21;
  sub_1000C04A4(v21, v23, v24);
  swift_bridgeObjectRetain();
  sub_1000C21E0(v25, v26, v27, v28, v29, v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000C2140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C2148);
  sub_1000C2184((uint64_t)v19);
  (*(void (**)(unsigned char *, uint64_t))(v46 + 8))(v43, v45);
  sub_10002B8D0(v30, v23, v44);
  swift_bridgeObjectRelease();
  return sub_1000C21E0(v25, v26, v27, v28, v29, v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000C21FC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C2204);
}

uint64_t sub_1000BC974@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100010218((uint64_t *)&unk_10080CFA0);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - v6;
  *(void *)&long long v34 = dispatch thunk of Tip.id.getter();
  *((void *)&v34 + 1) = v8;
  sub_100014344();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  type metadata accessor for AdminMenu.TipStatus();
  sub_100010218(&qword_1007FCDC8);
  State.wrappedValue.getter();
  uint64_t v16 = type metadata accessor for Tips.Status();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16) == 1) {
    goto LABEL_2;
  }
  sub_10001B220((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_10080CFA0);
  int v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v4, v16);
  if (v18 != enum case for Tips.Status.invalidated(_:))
  {
    if (v18 == enum case for Tips.Status.pending(_:))
    {
      long long v30 = xmmword_1006D8D40;
      *(void *)&long long v31 = 0;
      *((void *)&v31 + 1) = _swiftEmptyArrayStorage;
      LOBYTE(v32) = 0;
    }
    else
    {
      if (v18 != enum case for Tips.Status.available(_:)) {
        goto LABEL_21;
      }
      long long v30 = xmmword_1006D8D30;
      *(void *)&long long v31 = 0;
      *((void *)&v31 + 1) = _swiftEmptyArrayStorage;
      LOBYTE(v32) = 1;
    }
    _ConditionalContent<>.init(storage:)();
    long long v30 = v34;
    long long v31 = v35;
    __int16 v32 = v36;
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v17 + 96))(v4, v16);
  uint64_t v16 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v17 = *(void *)(v16 - 8);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v4, v16);
  if (v19 != enum case for Tips.InvalidationReason.actionPerformed(_:))
  {
    if (v19 == enum case for Tips.InvalidationReason.displayCountExceeded(_:))
    {
      *(void *)&long long v30 = 0xD000000000000012;
      *((void *)&v30 + 1) = 0x800000010068AE90;
      *(void *)&long long v31 = 0;
      *((void *)&v31 + 1) = _swiftEmptyArrayStorage;
      LOBYTE(v32) = 1;
      _ConditionalContent<>.init(storage:)();
      long long v30 = v34;
      long long v31 = v35;
      LOBYTE(v32) = v36;
      HIBYTE(v32) = 1;
      goto LABEL_14;
    }
    if (v19 == enum case for Tips.InvalidationReason.tipClosed(_:))
    {
      long long v30 = xmmword_1006D8D50;
      *(void *)&long long v31 = 0;
      *((void *)&v31 + 1) = _swiftEmptyArrayStorage;
      LOBYTE(v32) = 0;
      _ConditionalContent<>.init(storage:)();
      long long v30 = v34;
      long long v31 = v35;
      __int16 v32 = v36;
      char v33 = 1;
      goto LABEL_3;
    }
LABEL_21:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v16);
LABEL_2:
    long long v30 = xmmword_1006D8D60;
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = _swiftEmptyArrayStorage;
    LOBYTE(v32) = 1;
    _ConditionalContent<>.init(storage:)();
    long long v30 = v34;
    long long v31 = v35;
    __int16 v32 = v36;
    char v33 = 1;
LABEL_3:
    sub_100010218(&qword_1007FCDE8);
    sub_100010218(&qword_1007FCDF0);
    sub_1000C2240();
    sub_1000C22B4();
    goto LABEL_18;
  }
  *(void *)&long long v30 = 0xD000000000000010;
  *((void *)&v30 + 1) = 0x800000010068AEB0;
  *(void *)&long long v31 = 0;
  *((void *)&v31 + 1) = _swiftEmptyArrayStorage;
  LOBYTE(v32) = 0;
  _ConditionalContent<>.init(storage:)();
  long long v30 = v34;
  long long v31 = v35;
  LOBYTE(v32) = v36;
  HIBYTE(v32) = 1;
LABEL_14:
  sub_100010218(&qword_1007FCDF0);
  sub_1000C22B4();
  _ConditionalContent<>.init(storage:)();
  if (HIBYTE(v36)) {
    __int16 v20 = 256;
  }
  else {
    __int16 v20 = 0;
  }
  long long v30 = v34;
  long long v31 = v35;
  __int16 v32 = v20 | v36;
  char v33 = 0;
  sub_100010218(&qword_1007FCDE8);
  sub_1000C2240();
LABEL_18:
  _ConditionalContent<>.init(storage:)();
  long long v28 = v35;
  long long v29 = v34;
  uint64_t v21 = v36;
  char v22 = v37;
  char v23 = v13 & 1;
  sub_10001457C((uint64_t)v7, (uint64_t *)&unk_10080CFA0);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v15;
  long long v24 = v28;
  *(_OWORD *)(a1 + 32) = v29;
  *(_OWORD *)(a1 + 48) = v24;
  *(_WORD *)(a1 + 64) = v21;
  *(unsigned char *)(a1 + 66) = v22;
  sub_1000C04A4(v9, v11, v23);
  swift_bridgeObjectRetain();
  long long v25 = v29;
  long long v26 = v28;
  sub_1000C21E0(v29, *((uint64_t *)&v29 + 1), v28, *((uint64_t *)&v28 + 1), v21, v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000C2140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C2148);
  sub_1000C21E0(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v21, v22, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1000C21FC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C2204);
  sub_10002B8D0(v9, v11, v23);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BD018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  sub_100010218((uint64_t *)&unk_10080CFA0);
  v3[5] = swift_task_alloc();
  v3[6] = swift_task_alloc();
  uint64_t v4 = sub_100010218(&qword_1007FCDE0);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = sub_100010218((uint64_t *)&unk_10080CFB0);
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = type metadata accessor for MainActor();
  v3[14] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[15] = v7;
  v3[16] = v6;
  return _swift_task_switch(sub_1000BD1B8, v7, v6);
}

uint64_t sub_1000BD1B8()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  Tip.statusUpdates.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = static MainActor.shared.getter();
  v0[17] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[18] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000BD2C8;
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[6];
  return AsyncStream.Iterator.next(isolation:)(v7, v4, &protocol witness table for MainActor, v6);
}

uint64_t sub_1000BD2C8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 120);
  return _swift_task_switch(sub_1000BD40C, v3, v2);
}

uint64_t sub_1000BD40C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = type metadata accessor for Tips.Status();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[5];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
    type metadata accessor for AdminMenu.TipStatus();
    sub_1000BC4E4(v6);
    uint64_t v7 = static MainActor.shared.getter();
    v0[17] = v7;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[18] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000BD2C8;
    uint64_t v9 = v0[10];
    uint64_t v10 = v0[6];
    return AsyncStream.Iterator.next(isolation:)(v10, v7, &protocol witness table for MainActor, v9);
  }
}

uint64_t sub_1000BD648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v47 = type metadata accessor for DatePickerComponents();
  uint64_t v43 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AdminMenu();
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v41 = v5;
  uint64_t v42 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218(&qword_1007FCB18);
  __chkstk_darwin(v6 - 8);
  int v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010218(&qword_1007FCAF0);
  uint64_t v48 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100010218(&qword_1007FCB20);
  __chkstk_darwin(v51);
  uint64_t v53 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100010218(&qword_1007FCB00);
  __chkstk_darwin(v52);
  char v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  int v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  char v22 = (char *)&v37 - v21;
  uint64_t v49 = a1;
  sub_100010218(&qword_1007FC8F0);
  State.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10001457C((uint64_t)v15, (uint64_t *)&unk_1007FC470);
    *(void *)char v12 = static VerticalAlignment.center.getter();
    *((void *)v12 + 1) = 0;
    v12[16] = 1;
    uint64_t v23 = sub_100010218(&qword_1007FCB28);
    sub_1000BDFD4(v49, &v12[*(int *)(v23 + 44)]);
    sub_10001B220((uint64_t)v12, v53, &qword_1007FCB00);
    swift_storeEnumTagMultiPayload();
    sub_100014488(&qword_1007FCAE8, &qword_1007FCAF0);
    sub_100014488(&qword_1007FCAF8, &qword_1007FCB00);
    _ConditionalContent<>.init(storage:)();
    return sub_10001457C((uint64_t)v12, &qword_1007FCB00);
  }
  else
  {
    uint64_t v38 = v22;
    uint64_t v39 = v8;
    long long v25 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v25(v22, v15, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
    type metadata accessor for MainActor();
    uint64_t v26 = static MainActor.shared.getter();
    unint64_t v27 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v26;
    *(void *)(v28 + 24) = &protocol witness table for MainActor;
    v25((char *)(v28 + v27), v19, v16);
    uint64_t v29 = v42;
    sub_1000C20D8(v49, v42, (uint64_t (*)(void))type metadata accessor for AdminMenu);
    uint64_t v30 = static MainActor.shared.getter();
    unint64_t v31 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v30;
    *(void *)(v32 + 24) = &protocol witness table for MainActor;
    sub_1000BFEF0(v29, v32 + v31);
    Binding.init(get:set:)();
    sub_100010218(&qword_1007FCB30);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1006D6270;
    static DatePickerComponents.hourAndMinute.getter();
    static DatePickerComponents.date.getter();
    uint64_t v54 = v33;
    sub_1000C2484(&qword_1007FCB38, (void (*)(uint64_t))&type metadata accessor for DatePickerComponents);
    sub_100010218(&qword_1007FCB40);
    sub_100014488(&qword_1007FCB48, &qword_1007FCB40);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    long long v34 = v45;
    DatePicker.init(selection:displayedComponents:label:)();
    uint64_t v35 = v48;
    uint64_t v36 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v53, v34, v39);
    swift_storeEnumTagMultiPayload();
    sub_100014488(&qword_1007FCAE8, &qword_1007FCAF0);
    sub_100014488(&qword_1007FCAF8, &qword_1007FCB00);
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v38, v16);
  }
}

uint64_t sub_1000BDE4C(uint64_t a1)
{
  uint64_t v2 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  type metadata accessor for AdminMenu();
  sub_10001B220((uint64_t)v7, (uint64_t)v4, (uint64_t *)&unk_1007FC470);
  sub_100010218(&qword_1007FC8F0);
  State.wrappedValue.setter();
  return sub_10001457C((uint64_t)v7, (uint64_t *)&unk_1007FC470);
}

double sub_1000BDFB4@<D0>(uint64_t a1@<X8>)
{
  double result = 6.19340576e175;
  *(_OWORD *)a1 = xmmword_1006D8D70;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1000BDFD4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v42 = type metadata accessor for Date.FormatStyle();
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100010218(&qword_1007FCB50);
  __chkstk_darwin(v44);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AdminMenu();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v37 + 64);
  __chkstk_darwin(v6);
  uint64_t v38 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100010218(&qword_1007FCAB8);
  uint64_t v40 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v39 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = sub_100010218(&qword_1007FCB58);
  __chkstk_darwin(v19 - 8);
  uint64_t v43 = (uint64_t)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v37 - v22;
  sub_100010218(&qword_1007FC8F0);
  State.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10001457C((uint64_t)v11, (uint64_t *)&unk_1007FC470);
    uint64_t v24 = v38;
    sub_1000C20D8(a1, v38, (uint64_t (*)(void))type metadata accessor for AdminMenu);
    unint64_t v25 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v26 = swift_allocObject();
    sub_1000BFEF0(v24, v26 + v25);
    unint64_t v27 = v39;
    Button.init(action:label:)();
    uint64_t v28 = v40;
    uint64_t v29 = v45;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v5, v27, v45);
    swift_storeEnumTagMultiPayload();
    sub_100014488(&qword_1007FCAC0, &qword_1007FCAB8);
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
    static FormatStyle<>.dateTime.getter();
    sub_1000C2484((unint64_t *)&qword_1007F9588, (void (*)(uint64_t))&type metadata accessor for Date.FormatStyle);
    sub_1000C2484((unint64_t *)&qword_1007FABD0, (void (*)(uint64_t))&type metadata accessor for Date);
    *(void *)uint64_t v5 = Text.init<A>(_:format:)();
    *((void *)v5 + 1) = v30;
    v5[16] = v31 & 1;
    *((void *)v5 + 3) = v32;
    swift_storeEnumTagMultiPayload();
    sub_100014488(&qword_1007FCAC0, &qword_1007FCAB8);
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  uint64_t v33 = v43;
  sub_10001B220((uint64_t)v23, v43, &qword_1007FCB58);
  long long v34 = v46;
  *uint64_t v46 = xmmword_1006D8D70;
  *((unsigned char *)v34 + 16) = 0;
  *((void *)v34 + 3) = _swiftEmptyArrayStorage;
  *((void *)v34 + 4) = 0;
  *((unsigned char *)v34 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 1;
  uint64_t v35 = sub_100010218(&qword_1007FCB60);
  sub_10001B220(v33, (uint64_t)v34 + *(int *)(v35 + 64), &qword_1007FCB58);
  sub_1000C04A4(0x646F4D206F6D6544, 0xEB00000000402065, 0);
  swift_bridgeObjectRetain();
  sub_10001457C((uint64_t)v23, &qword_1007FCB58);
  sub_10001457C(v33, &qword_1007FCB58);
  sub_10002B8D0(0x646F4D206F6D6544, 0xEB00000000402065, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BE6C4()
{
  uint64_t v0 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - v4;
  static Date.now.getter();
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  type metadata accessor for AdminMenu();
  sub_10001B220((uint64_t)v5, (uint64_t)v2, (uint64_t *)&unk_1007FC470);
  sub_100010218(&qword_1007FC8F0);
  State.wrappedValue.setter();
  return sub_10001457C((uint64_t)v5, (uint64_t *)&unk_1007FC470);
}

uint64_t sub_1000BE7E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Text.bold()();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000BE848()
{
  uint64_t v0 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AdminMenu();
  sub_100010218(&qword_1007FC8F0);
  State.wrappedValue.getter();
  return sub_1002FCEC4((uint64_t)v2);
}

uint64_t sub_1000BE8E8()
{
  uint64_t v1 = sub_100010218(&qword_1007FC9C0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v0;
  sub_100010218(&qword_1007FC9C8);
  uint64_t v5 = sub_100014440(&qword_1007FC9D0);
  uint64_t v6 = type metadata accessor for InsetGroupedListStyle();
  uint64_t v7 = sub_100014488(&qword_1007FC9D8, &qword_1007FC9D0);
  uint64_t v11 = v5;
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  uint64_t v14 = &protocol witness table for InsetGroupedListStyle;
  swift_getOpaqueTypeConformance2();
  NavigationView.init(content:)();
  LocalizedStringKey.init(stringLiteral:)();
  sub_100014488(&qword_1007FC9E0, &qword_1007FC9C0);
  View.navigationTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_1000BEB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BED44(a1, a2, a3, (void (*)(void))type metadata accessor for RecentPlacesVC);
}

uint64_t sub_1000BEB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C1D74();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BEB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C1D74();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000BEBFC()
{
}

id sub_1000BEC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BED44(a1, a2, a3, (void (*)(void))type metadata accessor for AssetTypesVC);
}

uint64_t sub_1000BEC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C1DC8();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BECA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C1DC8();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000BED04()
{
}

id sub_1000BED2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BED44(a1, a2, a3, (void (*)(void))type metadata accessor for InsightsAdminVC);
}

id sub_1000BED44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(0);
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  id v5 = [objc_allocWithZone((Class)UINavigationController) initWithRootViewController:v4];

  return v5;
}

uint64_t sub_1000BEDAC()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_1000BEDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C1E1C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BEE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C1E1C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000BEEA8()
{
}

unint64_t sub_1000BEED0()
{
  unint64_t result = qword_1007FC8E8;
  if (!qword_1007FC8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FC8E8);
  }
  return result;
}

uint64_t type metadata accessor for AdminMenu()
{
  uint64_t result = qword_1007FC950;
  if (!qword_1007FC950) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000BEF70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    id v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = a2[6];
    a1[5] = a2[5];
    a1[6] = v8;
    uint64_t v9 = a2[8];
    a1[7] = a2[7];
    a1[8] = v9;
    uint64_t v10 = a2[10];
    uint64_t v11 = a2[11];
    a1[9] = a2[9];
    a1[10] = v10;
    uint64_t v12 = a2[12];
    uint64_t v13 = *(int *)(a3 + 68);
    __dst = (char *)a1 + v13;
    uint64_t v14 = (char *)a2 + v13;
    a1[11] = v11;
    a1[12] = v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v15 - 8);
    uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v21(v14, 1, v15))
    {
      uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FC470);
      uint64_t v17 = __dst;
      memcpy(__dst, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = __dst;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v18 = sub_100010218(&qword_1007FC8F0);
    *(void *)&v17[*(int *)(v18 + 28)] = *(void *)&v14[*(int *)(v18 + 28)];
  }
  swift_retain();
  return v5;
}

uint64_t sub_1000BF1C8(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_100010218(&qword_1007FC8F0);

  return swift_release();
}

void *sub_1000BF2FC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v16 = a2[7];
  a1[6] = a2[6];
  a1[7] = v16;
  uint64_t v18 = a2[9];
  a1[8] = a2[8];
  a1[9] = v18;
  uint64_t v7 = a2[11];
  a1[10] = a2[10];
  a1[11] = v7;
  uint64_t v8 = *(int *)(a3 + 68);
  __dst = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  a1[12] = a2[12];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v10 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v17(v9, 1, v10))
  {
    uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v12 = __dst;
    memcpy(__dst, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = __dst;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v13 = sub_100010218(&qword_1007FC8F0);
  *(void *)&v12[*(int *)(v13 + 28)] = *(void *)&v9[*(int *)(v13 + 28)];
  swift_retain();
  return a1;
}

void *sub_1000BF504(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = sub_100010218(&qword_1007FC8F0);
  *(void *)&v7[*(int *)(v15 + 28)] = *(void *)&v8[*(int *)(v15 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000BF7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v6;
  uint64_t v7 = *(int *)(a3 + 68);
  uint64_t v8 = (char *)(a2 + v7);
  uint64_t v9 = (char *)(a1 + v7);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
  {
    uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v9, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v8, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  uint64_t v13 = sub_100010218(&qword_1007FC8F0);
  *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v8[*(int *)(v13 + 28)];
  return a1;
}

void *sub_1000BF920(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  a1[6] = a2[6];
  swift_release();
  a1[7] = a2[7];
  swift_release();
  a1[8] = a2[8];
  swift_release();
  a1[9] = a2[9];
  swift_release();
  a1[10] = a2[10];
  swift_release();
  a1[11] = a2[11];
  swift_release();
  a1[12] = a2[12];
  swift_release();
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = sub_100010218(&qword_1007FC8F0);
  *(void *)&v7[*(int *)(v15 + 28)] = *(void *)&v8[*(int *)(v15 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_1000BFB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BFB9C);
}

uint64_t sub_1000BFB9C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100010218(&qword_1007FC8F0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 68);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000BFC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BFC64);
}

void *sub_1000BFC64(void *result, uint64_t a2, int a3, uint64_t a4)
{
  long long v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100010218(&qword_1007FC8F0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 68);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000BFD10()
{
  sub_1000C1C18(319, (unint64_t *)&qword_1007FC960, (uint64_t *)&unk_1007FC470);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000BFDD4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BFDF0()
{
  return sub_1000B5904(*(void *)(v0 + 16));
}

uint64_t sub_1000BFDF8@<X0>(void (*a1)(char *, uint64_t)@<X8>)
{
  return sub_1000B5B2C(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000BFE00@<X0>(void *a1@<X8>)
{
  return sub_1000B7B10(a1);
}

uint64_t sub_1000BFE08@<X0>(void *a1@<X8>)
{
  return sub_1000B8C3C(a1);
}

uint64_t sub_1000BFE10@<X0>(char *a1@<X8>)
{
  return sub_1000B91D8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000BFE18@<X0>(char *a1@<X8>)
{
  return sub_1000BA974(a1);
}

uint64_t sub_1000BFE20@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BD648(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000BFE28()
{
  unint64_t result = qword_1007FCAE0;
  if (!qword_1007FCAE0)
  {
    sub_100014440(&qword_1007FCAD8);
    sub_100014488(&qword_1007FCAE8, &qword_1007FCAF0);
    sub_100014488(&qword_1007FCAF8, &qword_1007FCB00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCAE0);
  }
  return result;
}

uint64_t sub_1000BFEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdminMenu();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BFF54()
{
  return sub_1000C0430((uint64_t (*)(uint64_t))sub_1000BE848);
}

unint64_t sub_1000BFF6C()
{
  unint64_t result = qword_1007FCB08;
  if (!qword_1007FCB08)
  {
    sub_100014440(&qword_1007FCAD0);
    sub_1000BFE28();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCB08);
  }
  return result;
}

unint64_t sub_1000BFFF4()
{
  unint64_t result = qword_1007FCB10;
  if (!qword_1007FCB10)
  {
    sub_100014440((uint64_t *)&unk_1007FC470);
    sub_1000C2484((unint64_t *)&qword_1007FABD0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCB10);
  }
  return result;
}

uint64_t sub_1000C0098()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1000C0164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, v3);
}

uint64_t sub_1000C01D8()
{
  uint64_t v1 = (int *)(type metadata accessor for AdminMenu() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v3 = v0 + v2 + v1[19];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_100010218(&qword_1007FC8F0);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C0390(uint64_t a1)
{
  type metadata accessor for AdminMenu();

  return sub_1000BDE4C(a1);
}

uint64_t sub_1000C0418()
{
  return sub_1000C0430((uint64_t (*)(uint64_t))sub_1000BE6C4);
}

uint64_t sub_1000C0430(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for AdminMenu() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1000C04A4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000C04B8()
{
  uint64_t v1 = (int *)(type metadata accessor for AdminMenu() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v2 + v1[19];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  sub_100010218(&qword_1007FC8F0);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C0668@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AdminMenu();

  return sub_1000B9708(a1);
}

uint64_t sub_1000C06D8()
{
  return sub_1000BA880();
}

unint64_t sub_1000C06E0()
{
  unint64_t result = qword_1007FCB98;
  if (!qword_1007FCB98)
  {
    sub_100014440(&qword_1007FCB88);
    sub_1000C23F0(&qword_1007FCBA0, &qword_1007FCBA8, &qword_1007FCBB0, &qword_1007FCBB8);
    sub_100014488((unint64_t *)&qword_1007FCBC0, &qword_1007FCBC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCB98);
  }
  return result;
}

uint64_t sub_1000C07A8()
{
  return swift_deallocObject();
}

unint64_t sub_1000C07B8()
{
  unint64_t result = qword_100805B60;
  if (!qword_100805B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100805B60);
  }
  return result;
}

unint64_t sub_1000C080C()
{
  unint64_t result = qword_1007FCCE0;
  if (!qword_1007FCCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCCE0);
  }
  return result;
}

unint64_t sub_1000C0860()
{
  unint64_t result = qword_100805B70;
  if (!qword_100805B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100805B70);
  }
  return result;
}

unint64_t sub_1000C08B4()
{
  unint64_t result = qword_1007FCCE8;
  if (!qword_1007FCCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCCE8);
  }
  return result;
}

unint64_t sub_1000C0908()
{
  unint64_t result = qword_1007FCCF0;
  if (!qword_1007FCCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCCF0);
  }
  return result;
}

unint64_t sub_1000C095C()
{
  unint64_t result = qword_1007FCCF8;
  if (!qword_1007FCCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCCF8);
  }
  return result;
}

unint64_t sub_1000C09B0()
{
  unint64_t result = qword_1007FCD00;
  if (!qword_1007FCD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCD00);
  }
  return result;
}

unint64_t sub_1000C0A04()
{
  unint64_t result = qword_1007FCD08;
  if (!qword_1007FCD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCD08);
  }
  return result;
}

unint64_t sub_1000C0A58()
{
  unint64_t result = qword_1007FCD10;
  if (!qword_1007FCD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCD10);
  }
  return result;
}

uint64_t sub_1000C0AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void sub_1000C0AB4()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_1000C1C18(319, &qword_1007FCDA0, (uint64_t *)&unk_10080CFA0);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1000C0B90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Tips.Status();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 & 0xF8 | 7;
  uint64_t v12 = v7 + v11;
  uint64_t v13 = (v7 + v11) & ~v11;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v14 = *(void *)(v9 + 64);
  }
  else {
    size_t v14 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v15 = *(_DWORD *)(v6 + 80) & 0xF8 | v11;
  int v16 = (*(_DWORD *)(v6 + 80) | v10) & 0x100000;
  if (v15 != 7 || v16 != 0 || v13 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v15 + 16) & ~v15));
  }
  else
  {
    uint64_t v20 = v8;
    uint64_t v21 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v22 = (const void *)(((unint64_t)a2 + v12) & v21);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v20))
    {
      memcpy((void *)(((unint64_t)a1 + v12) & v21), v22, v14);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v21, v22, v20);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v9 + 56))(((unint64_t)a1 + v12) & v21, 0, 1, v20);
    }
    *(void *)((v14 + 7 + (((unint64_t)a1 + v12) & v21)) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000C0D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for Tips.Status();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v8 = (v4 + a1 + v7) & ~v7;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }

  return swift_release();
}

uint64_t sub_1000C0EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for Tips.Status();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy((void *)v11, (const void *)v12, v15);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
    uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v11, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  *(void *)(((v11 | 7) + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v12 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_1000C102C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for Tips.Status();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy((void *)v11, (const void *)v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  *(void *)(((v11 | 7) + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v12 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000C122C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Tips.Status();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    size_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy((void *)v11, (const void *)v12, v15);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
    size_t v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v11, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  *(void *)(((v11 | 7) + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v12 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000C13A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Tips.Status();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy((void *)v11, (const void *)v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  *(void *)(((v11 | 7) + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v12 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1000C1598(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Tips.Status();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  if (!v11) {
    ++v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v17 = *(void *)(v6 + 64) + v16;
  uint64_t v18 = v15 + 7;
  if (v14 < a2)
  {
    unint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFF8) + (v17 & ~v16) + 8;
    if ((v19 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v14 + 1;
    }
    if (v20 >= 0x10000) {
      unsigned int v21 = 4;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v20 < 0x100) {
      unsigned int v21 = 1;
    }
    if (v20 >= 2) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = *((unsigned __int8 *)a1 + v19);
        if (!*((unsigned char *)a1 + v19)) {
          break;
        }
        goto LABEL_30;
      case 2:
        int v23 = *(unsigned __int16 *)((char *)a1 + v19);
        if (*(_WORD *)((char *)a1 + v19)) {
          goto LABEL_30;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000C1810);
      case 4:
        int v23 = *(_DWORD *)((char *)a1 + v19);
        if (!v23) {
          break;
        }
LABEL_30:
        int v25 = v23 - 1;
        if ((v19 & 0xFFFFFFF8) != 0)
        {
          int v25 = 0;
          int v26 = *a1;
        }
        else
        {
          int v26 = 0;
        }
        return v14 + (v26 | v25) + 1;
      default:
        break;
    }
  }
  if (v7 >= v13)
  {
    uint64_t v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
    return v29(a1, v7, v5);
  }
  else
  {
    unint64_t v27 = ((unint64_t)a1 + v17) & ~v16;
    if (v12 < 0x7FFFFFFE)
    {
      unint64_t v30 = *(void *)((v18 + v27) & 0xFFFFFFFFFFFFFFF8);
      if (v30 >= 0xFFFFFFFF) {
        LODWORD(v3sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = -1;
      }
      if ((v30 + 1) >= 2) {
        return v30;
      }
      else {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v27);
      if (v28 >= 2) {
        return v28 - 1;
      }
      else {
        return 0;
      }
    }
  }
}

void sub_1000C1824(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v35 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = type metadata accessor for Tips.Status();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 84);
  if (v12) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 <= 0x7FFFFFFE) {
    unsigned int v14 = 2147483646;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  uint64_t v17 = *(void *)(v8 + 64) + v16;
  if (v12) {
    size_t v18 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  else {
    size_t v18 = *(void *)(*(void *)(v10 - 8) + 64) + 1;
  }
  unint64_t v19 = ((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + (v17 & ~v16) + 8;
  if (((v18 + 7) & 0xFFFFFFF8) + (v17 & ~v16) == -8) {
    unsigned int v20 = a3 - v15 + 1;
  }
  else {
    unsigned int v20 = 2;
  }
  if (v20 >= 0x10000) {
    int v21 = 4;
  }
  else {
    int v21 = 2;
  }
  if (v20 < 0x100) {
    int v21 = 1;
  }
  if (v20 >= 2) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = 0;
  }
  if (v15 < a3) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  if (a2 > v15)
  {
    if (((v18 + 7) & 0xFFFFFFF8) + (v17 & ~v16) == -8) {
      int v24 = a2 - v15;
    }
    else {
      int v24 = 1;
    }
    if (((v18 + 7) & 0xFFFFFFF8) + (v17 & ~v16) != -8)
    {
      int v25 = ~v15 + a2;
      bzero(a1, ((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + (v17 & ~v16) + 8);
      *a1 = v25;
    }
    switch(v23)
    {
      case 1:
        *((unsigned char *)a1 + v19) = v24;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v19) = v24;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)((char *)a1 + v19) = v24;
        return;
      default:
        return;
    }
  }
  switch(v23)
  {
    case 1:
      *((unsigned char *)a1 + v19) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)((char *)a1 + v19) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x1000C1BC8);
    case 4:
      *(_DWORD *)((char *)a1 + v19) = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (a2)
      {
LABEL_42:
        if (v9 >= v14)
        {
          uint64_t v29 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v35 + 56);
          v29(a1, a2, v9, v7);
        }
        else
        {
          int v26 = (unsigned char *)(((unint64_t)a1 + v17) & ~v16);
          if (v14 >= a2)
          {
            if (v13 < 0x7FFFFFFE)
            {
              uint64_t v33 = (void *)((unint64_t)&v26[v18 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                void *v33 = 0;
                *(_DWORD *)uint64_t v33 = a2 - 0x7FFFFFFF;
              }
              else
              {
                void *v33 = a2;
              }
            }
            else if (v13 >= a2)
            {
              long long v34 = *(void (**)(unsigned char *, void))(v11 + 56);
              v34(v26, (a2 + 1));
            }
            else
            {
              if (v18 <= 3) {
                int v30 = ~(-1 << (8 * v18));
              }
              else {
                int v30 = -1;
              }
              if (v18)
              {
                int v31 = v30 & (~v13 + a2);
                if (v18 <= 3) {
                  int v32 = v18;
                }
                else {
                  int v32 = 4;
                }
                bzero(v26, v18);
                switch(v32)
                {
                  case 2:
                    *(_WORD *)int v26 = v31;
                    break;
                  case 3:
                    *(_WORD *)int v26 = v31;
                    v26[2] = BYTE2(v31);
                    break;
                  case 4:
                    *(_DWORD *)int v26 = v31;
                    break;
                  default:
                    *int v26 = v31;
                    break;
                }
              }
            }
          }
          else
          {
            int v27 = (v18 + 7) & 0xFFFFFFF8;
            if (v27 != -8)
            {
              int v28 = ~v14 + a2;
              bzero(v26, (v27 + 8));
              *(_DWORD *)int v26 = v28;
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AdminMenu.TipStatus()
{
  return sub_100073C20();
}

void sub_1000C1C18(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_100014440(a3);
    unint64_t v4 = type metadata accessor for State();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for InsightsAdminVC_SwiftUI()
{
  return &type metadata for InsightsAdminVC_SwiftUI;
}

ValueMetadata *type metadata accessor for AssetTypesVC_SwiftUI()
{
  return &type metadata for AssetTypesVC_SwiftUI;
}

ValueMetadata *type metadata accessor for RecentPlacesVC_SwiftUI()
{
  return &type metadata for RecentPlacesVC_SwiftUI;
}

uint64_t sub_1000C1C98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000C1D24()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_1000C1D68()
{
  return &protocol witness table for Never;
}

unint64_t sub_1000C1D74()
{
  unint64_t result = qword_1007FCDA8;
  if (!qword_1007FCDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCDA8);
  }
  return result;
}

unint64_t sub_1000C1DC8()
{
  unint64_t result = qword_1007FCDB0;
  if (!qword_1007FCDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCDB0);
  }
  return result;
}

unint64_t sub_1000C1E1C()
{
  unint64_t result = qword_1007FCDB8;
  if (!qword_1007FCDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1007FCDB8);
  }
  return result;
}

uint64_t sub_1000C1E70()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for AdminMenu.TipStatus() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3, v1);
  unint64_t v4 = v0 + v3 + v2[11];
  uint64_t v5 = type metadata accessor for Tips.Status();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_100010218(&qword_1007FCDC8);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000C1FF0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for AdminMenu.TipStatus() - 8);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10002C194;
  return sub_1000BD018(v5, v2, v3);
}

uint64_t sub_1000C20D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C2140(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000C2148(a1, a2, a3);
}

uint64_t sub_1000C2148(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000C04A4(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000C2184(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _TaskModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C21E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a6) {
    return a8(a1, a2, a3, a4, a5 & 1);
  }
  else {
    return a7(a1, a2, a3, a4, a5, (a5 >> 8) & 1);
  }
}

uint64_t sub_1000C21FC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000C2204(a1, a2, a3);
}

uint64_t sub_1000C2204(uint64_t a1, uint64_t a2, char a3)
{
  sub_10002B8D0(a1, a2, a3 & 1);

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000C2240()
{
  unint64_t result = qword_1007FCDF8;
  if (!qword_1007FCDF8)
  {
    sub_100014440(&qword_1007FCDE8);
    sub_1000C22B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCDF8);
  }
  return result;
}

unint64_t sub_1000C22B4()
{
  unint64_t result = qword_1007FCE00;
  if (!qword_1007FCE00)
  {
    sub_100014440(&qword_1007FCDF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCE00);
  }
  return result;
}

unint64_t sub_1000C2324()
{
  unint64_t result = qword_1007FCE08;
  if (!qword_1007FCE08)
  {
    sub_100014440(&qword_1007FCDD8);
    sub_1000C23F0(&qword_1007FCE10, &qword_1007FCE18, &qword_1007FCE20, &qword_1007FCE28);
    sub_1000C2484(&qword_1007FCE30, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCE08);
  }
  return result;
}

uint64_t sub_1000C23F0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014440(a2);
    sub_100014488(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C2484(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000C24D0(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_availableFilters] = _swiftEmptyArrayStorage;
  v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_selectedFilter] = 0;
  *(void *)&v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_filtersDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_assetObserver] = 0;
  *(void *)&v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_imageMargin] = 0x401C000000000000;
  *(void *)&v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_imageTopMargin] = 0x4023666666666666;
  *(void *)&v4[OBJC_IVAR____TtC7Journal20TimelineFilterButton_entryModel] = 0;
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for TimelineFilterButton();
  [super initWithFrame:a1, a2, a3, a4];
  sub_1000C26F0();

  return v9;
}

id sub_1000C25E8(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_availableFilters] = _swiftEmptyArrayStorage;
  v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_selectedFilter] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_filtersDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_assetObserver] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_imageMargin] = 0x401C000000000000;
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_imageTopMargin] = 0x4023666666666666;
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_entryModel] = 0;
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for TimelineFilterButton();
  [super initWithCoder:a1];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    sub_1000C26F0();
  }
  return v4;
}

uint64_t sub_1000C26F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_10080B3B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v39 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010218(&qword_1007FCE98);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100010218(&qword_1007FCEA0);
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  __chkstk_darwin(v10);
  int v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007FCEA8);
  uint64_t v37 = *(void *)(v13 - 8);
  uint64_t v38 = v13;
  __chkstk_darwin(v13);
  uint64_t v36 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100010218(&qword_1007F9770);
  *(void *)&double v16 = __chkstk_darwin(v15 - 8).n128_u64[0];
  size_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v1 setShowsMenuAsPrimaryAction:1 v16];
  [v1 setShowsLargeContentViewer:1];
  if (qword_1007F7A68 != -1) {
    swift_once();
  }
  NSString v19 = String._bridgeToObjectiveC()();
  [v1 setLargeContentTitle:v19];

  if (qword_1007F7BE0 != -1) {
    swift_once();
  }
  [v1 setLargeContentImage:qword_10083E8C8];
  NSString v20 = String._bridgeToObjectiveC()();
  [v1 setAccessibilityLabel:v20];

  sub_1000C2E00(0);
  uint64_t v21 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v18, 0, 1, v21);
  UIButton.configuration.setter();
  if (qword_1007F6958 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_100010218(&qword_1007FB8B8);
  Published.projectedValue.getter();
  swift_endAccess();
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)();
  unsigned int v22 = self;
  id v23 = [v22 mainRunLoop];
  id v40 = v23;
  sub_10001B284(0, &qword_1007FCEB0);
  sub_100014488(&qword_1007FCEB8, &qword_1007FCE98);
  sub_1000C5184();
  Publisher.throttle<A>(for:scheduler:latest:)();

  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v33);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
  id v40 = [v22 mainRunLoop];
  uint64_t v24 = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v25 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v39, 1, 1, v24);
  sub_100014488(&qword_1007FCEC8, &qword_1007FCEA0);
  uint64_t v27 = v35;
  int v26 = v36;
  Publisher.receive<A>(on:options:)();
  sub_10001457C(v25, &qword_10080B3B0);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v27);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100014488(&qword_1007FCED0, &qword_1007FCEA8);
  uint64_t v28 = v38;
  uint64_t v29 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v28);
  *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_assetObserver] = v29;
  return swift_release();
}

uint64_t sub_1000C2E00(char a1)
{
  uint64_t v2 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1) {
    static UIButton.Configuration.tinted()();
  }
  else {
    static UIButton.Configuration.gray()();
  }
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v5, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v2);
  UIButton.Configuration.cornerStyle.setter();
  if ((a1 & 1) == 0) {
    id v6 = [self labelColor];
  }
  UIButton.Configuration.baseForegroundColor.setter();
  uint64_t v7 = self;
  id v8 = [v7 configurationWithTextStyle:UIFontTextStyleTitle3 scale:2];
  id v9 = [v7 configurationWithWeight:7];
  id v10 = [v8 configurationByApplyingConfiguration:v9];

  UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
  uint64_t v11 = (void (*)(unsigned char *, void))UIButton.Configuration.contentInsets.modify();
  *int v12 = 0x4018000000000000;
  v11(v16, 0);
  uint64_t v13 = (uint64_t (*)(unsigned char *, void))UIButton.Configuration.contentInsets.modify();
  *(void *)(v14 + 16) = 0x4018000000000000;
  return v13(v16, 0);
}

void sub_1000C3000()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    sub_1000C39B8();
    p_UIMenuElementSize preferredElementSize = &preferredElementSize;
    uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_availableFilters];
    uint64_t v29 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v27 = OBJC_IVAR____TtC7Journal20TimelineFilterButton_selectedFilter;
    uint64_t v25 = v2;
    swift_bridgeObjectRetain();
    if (v3)
    {
      uint64_t v26 = v25 + 32;
      sub_10001B284(0, (unint64_t *)&qword_1007FA1B0);
      uint64_t v4 = 0;
      UIAccessibilityTraits v5 = UIAccessibilityTraitSelected;
      do
      {
        int v6 = *(unsigned __int8 *)(v26 + v4);
        FilterOption.description.getter(*(unsigned char *)(v26 + v4));
        uint64_t v28 = v4;
        dispatch thunk of CustomStringConvertible.description.getter();
        String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v1;
        id v8 = v1;
        UIMenuElementSize preferredElementSize = UIMenuElementSizeSmall;
        v20._rawValue = 0;
        unsigned int v22 = sub_1000C522C;
        uint64_t v23 = v7;
        uint64_t v21 = 0;
        id v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        if (v6 == v1[v27])
        {
          NSString v10 = String._bridgeToObjectiveC()();
          id v11 = [self systemImageNamed:v10];

          [v9 setImage:v11];
          id v12 = v9;
          unint64_t v13 = (unint64_t)[v12 accessibilityTraits];
          if ((v5 & ~v13) != 0) {
            UIAccessibilityTraits v14 = v5;
          }
          else {
            UIAccessibilityTraits v14 = 0;
          }
          [v12 setAccessibilityTraits:v14 | v13];
        }
        ++v4;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v3 != v4);
    }
    swift_bridgeObjectRelease();
    UIMenuElementSize v15 = (UIMenuElementSize)v29;
    swift_bridgeObjectRelease();
    if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
    {
      sub_10001B284(0, (unint64_t *)&unk_100807680);
      swift_bridgeObjectRetain();
      UIMenuElementSize v16 = _bridgeCocoaArray<A>(_:)();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_10001B284(0, (unint64_t *)&unk_100807680);
      UIMenuElementSize v16 = v15;
    }
    swift_release();
    sub_10001B284(0, (unint64_t *)&unk_100809EE0);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v30.value.super.Class isa = 0;
    v30.is_nil = 0;
    Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v17, (Swift::String_optional)0, v30, 0, 0xFFFFFFFFFFFFFFFFLL, v16, v20).super.super.isa;
    [v1 setMenu:isa];
  }
}

void sub_1000C355C(char a1, char a2)
{
  uint64_t v3 = (unsigned __int8 *)v2;
  uint64_t v31 = OBJC_IVAR____TtC7Journal20TimelineFilterButton_selectedFilter;
  v2[OBJC_IVAR____TtC7Journal20TimelineFilterButton_selectedFilter] = a1;
  [v2 setSelected:a1 != 0];
  sub_1000C39B8();
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC7Journal20TimelineFilterButton_availableFilters];
  v32[0] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v30 = v4 + 32;
    sub_10001B284(0, (unint64_t *)&qword_1007FA1B0);
    uint64_t v6 = 0;
    UIAccessibilityTraits v7 = UIAccessibilityTraitSelected;
    do
    {
      int v8 = *(unsigned __int8 *)(v30 + v6);
      FilterOption.description.getter(*(unsigned char *)(v30 + v6));
      unsigned char v32[4] = v6;
      dispatch thunk of CustomStringConvertible.description.getter();
      String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v3;
      NSString v10 = v3;
      v27._rawValue = 0;
      uint64_t v28 = v9;
      id v11 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      if (v8 == v3[v31])
      {
        NSString v12 = String._bridgeToObjectiveC()();
        id v13 = [self systemImageNamed:v12];

        [v11 setImage:v13];
        id v14 = v11;
        unint64_t v15 = (unint64_t)[v14 accessibilityTraits];
        if ((v7 & ~v15) != 0) {
          UIAccessibilityTraits v16 = v7;
        }
        else {
          UIAccessibilityTraits v16 = 0;
        }
        [v14 setAccessibilityTraits:v16 | v15];
      }
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v5 != v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32[0] & 0x8000000000000000) != 0 || (v32[0] & 0x4000000000000000) != 0)
  {
    sub_10001B284(0, (unint64_t *)&unk_100807680);
    swift_bridgeObjectRetain();
    UIMenuElementSize preferredElementSize = _bridgeCocoaArray<A>(_:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10001B284(0, (unint64_t *)&unk_100807680);
    UIMenuElementSize preferredElementSize = v32[0];
  }
  swift_release();
  sub_10001B284(0, (unint64_t *)&unk_100809EE0);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v33.value.super.Class isa = 0;
  v33.is_nil = 0;
  Class isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v18, (Swift::String_optional)0, v33, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v27).super.super.isa;
  [v3 setMenu:isa];

  FilterOption.description.getter(v3[v31]);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 setAccessibilityValue:v20];

  if (a2)
  {
    uint64_t v21 = &v3[OBJC_IVAR____TtC7Journal20TimelineFilterButton_filtersDelegate];
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v22 = *((void *)v21 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v24 = v3[v31];
      v32[3] = type metadata accessor for TimelineFilterButton();
      v32[0] = v3;
      uint64_t v25 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(v22 + 8);
      uint64_t v26 = v3;
      v25(v24, v32, ObjectType, v22);
      swift_unknownObjectRelease();
      sub_10001457C((uint64_t)v32, &qword_1007FAD50);
    }
  }
}

void sub_1000C3994(void *a1)
{
}

uint64_t sub_1000C39B8()
{
  uint64_t v1 = v0;
  if (qword_1007F6958 != -1) {
LABEL_91:
  }
    swift_once();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t)v43;
  uint64_t v3 = v43 + 8;
  uint64_t v4 = 1 << *((unsigned char *)v43 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & v43[8];
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_91;
    }
    if (v8 >= v7) {
      break;
    }
    unint64_t v14 = v3[v8];
    if (!v14)
    {
      int64_t v15 = v8 + 1;
      if (v8 + 1 >= v7) {
        break;
      }
      unint64_t v14 = v3[v15];
      if (!v14)
      {
        int64_t v15 = v8 + 2;
        if (v8 + 2 >= v7) {
          break;
        }
        unint64_t v14 = v3[v15];
        if (!v14)
        {
          int64_t v15 = v8 + 3;
          if (v8 + 3 >= v7) {
            break;
          }
          unint64_t v14 = v3[v15];
          if (!v14)
          {
            int64_t v15 = v8 + 4;
            if (v8 + 4 >= v7) {
              break;
            }
            unint64_t v14 = v3[v15];
            if (!v14)
            {
              int64_t v15 = v8 + 5;
              if (v8 + 5 >= v7) {
                break;
              }
              unint64_t v14 = v3[v15];
              if (!v14)
              {
                while (1)
                {
                  int64_t v8 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v8 >= v7) {
                    goto LABEL_73;
                  }
                  unint64_t v14 = v3[v8];
                  ++v15;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
                __break(1u);
LABEL_93:
                uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
                goto LABEL_76;
              }
            }
          }
        }
      }
      int64_t v8 = v15;
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_24:
    switch(*(unsigned char *)(*(void *)(v2 + 48) + v12))
    {
      case 2:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v24 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v24 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v24 > 1), v17 + 1, 1, v9);
        }
        char v10 = 3;
        goto LABEL_6;
      case 3:
      case 4:
      case 5:
      case 0x11:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v16 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v16 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v16 > 1), v17 + 1, 1, v9);
        }
        char v10 = 5;
        goto LABEL_6;
      case 6:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v26 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v26 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v26 > 1), v17 + 1, 1, v9);
        }
        char v10 = 4;
        goto LABEL_6;
      case 7:
      case 8:
      case 9:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v19 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v19 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v19 > 1), v17 + 1, 1, v9);
        }
        char v10 = 9;
        goto LABEL_6;
      case 0xA:
      case 0x10:
      case 0x12:
      case 0x13:
      case 0x14:
        continue;
      case 0xB:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v23 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v23 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v23 > 1), v17 + 1, 1, v9);
        }
        char v10 = 8;
        goto LABEL_6;
      case 0xC:
      case 0xD:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v21 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v21 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v21 > 1), v17 + 1, 1, v9);
        }
        char v10 = 6;
        goto LABEL_6;
      case 0xE:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v22 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v22 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v22 > 1), v17 + 1, 1, v9);
        }
        char v10 = 7;
        goto LABEL_6;
      case 0xF:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v25 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v25 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v25 > 1), v17 + 1, 1, v9);
        }
        char v10 = 10;
        goto LABEL_6;
      default:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1002A5EEC(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v20 = v9[3];
        unint64_t v18 = v17 + 1;
        if (v17 >= v20 >> 1) {
          uint64_t v9 = sub_1002A5EEC((void *)(v20 > 1), v17 + 1, 1, v9);
        }
        char v10 = 2;
LABEL_6:
        v9[2] = v18;
        *((unsigned char *)v9 + v17 + 32) = v10;
        break;
    }
  }
LABEL_73:
  swift_release();
  unint64_t v6 = OBJC_IVAR____TtC7Journal20TimelineFilterButton_entryModel;
  if (!*(void *)(v1 + OBJC_IVAR____TtC7Journal20TimelineFilterButton_entryModel)) {
    goto LABEL_79;
  }
  id v27 = objc_allocWithZone((Class)NSFetchRequest);
  swift_retain();
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 initWithEntityName:v28];

  uint64_t v30 = (void *)_sSo11NSPredicateC7JournalE23entryContainsMediaLinksABvgZ_0();
  [v29 setPredicate:v30];

  __chkstk_darwin(v31);
  NSManagedObjectContext.performAndWait<A>(_:)();
  swift_release();

  if (v43 != 1) {
    goto LABEL_79;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_93;
  }
LABEL_76:
  unint64_t v33 = v9[2];
  unint64_t v32 = v9[3];
  if (v33 >= v32 >> 1) {
    uint64_t v9 = sub_1002A5EEC((void *)(v32 > 1), v33 + 1, 1, v9);
  }
  v9[2] = v33 + 1;
  *((unsigned char *)v9 + v33 + 32) = 5;
LABEL_79:
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = sub_100388820(v34);
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_1000CCFAC(v35);
  swift_bridgeObjectRelease();
  uint64_t v43 = v36;
  swift_bridgeObjectRetain();
  sub_1000C483C((uint64_t *)&v43);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + v6))
  {
    swift_retain();
    char v37 = sub_100036FEC();
    swift_release();
    if (v37) {
      sub_1000F3460(0, 0, 1);
    }
    if (*(void *)(v1 + v6))
    {
      swift_retain();
      char v38 = sub_1000371C8();
      swift_release();
      if (v38)
      {
        uint64_t v39 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v39 = sub_1002A5EEC(0, v39[2] + 1, 1, v39);
        }
        unint64_t v41 = v39[2];
        unint64_t v40 = v39[3];
        if (v41 >= v40 >> 1) {
          uint64_t v39 = sub_1002A5EEC((void *)(v40 > 1), v41 + 1, 1, v39);
        }
        v39[2] = v41 + 1;
        *((unsigned char *)v39 + v41 + 32) = 11;
        uint64_t v43 = v39;
      }
    }
  }
  sub_1000F3460(0, 0, 0);
  *(void *)(v1 + OBJC_IVAR____TtC7Journal20TimelineFilterButton_availableFilters) = v43;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1000C42B0(void *a1)
{
  id v2 = [a1 identifier];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  uint64_t v6 = HIBYTE(v5) & 0xF;
  uint64_t v7 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v10 = (uint64_t)sub_1004B52B0(v3, v5, 10);
    LOBYTE(v3) = v25;
    goto LABEL_44;
  }
  if ((v5 & 0x2000000000000000) != 0)
  {
    v26[0] = v3;
    v26[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    if (v3 == 43)
    {
      if (!v6)
      {
LABEL_62:
        __break(1u);
        return;
      }
      if (v6 == 1 || (BYTE1(v3) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v10 = (BYTE1(v3) - 48);
      if (v6 != 2)
      {
        if ((BYTE2(v3) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v10 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
        uint64_t v12 = v6 - 3;
        if (v12)
        {
          id v13 = (unsigned __int8 *)v26 + 3;
          while (1)
          {
            unsigned int v14 = *v13 - 48;
            if (v14 > 9) {
              goto LABEL_31;
            }
            uint64_t v15 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
              goto LABEL_31;
            }
            uint64_t v10 = v15 + v14;
            if (__OFADD__(v15, v14)) {
              goto LABEL_31;
            }
            LOBYTE(v3) = 0;
            ++v13;
            if (!--v12) {
              goto LABEL_44;
            }
          }
        }
      }
    }
    else
    {
      if (v3 == 45)
      {
        if (!v6)
        {
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        if (v6 != 1 && (BYTE1(v3) - 48) <= 9u)
        {
          if (v6 == 2)
          {
            LOBYTE(v3) = 0;
            uint64_t v10 = -(uint64_t)(BYTE1(v3) - 48);
            goto LABEL_44;
          }
          if ((BYTE2(v3) - 48) <= 9u)
          {
            uint64_t v10 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
            uint64_t v20 = v6 - 3;
            if (!v20) {
              goto LABEL_43;
            }
            unint64_t v22 = (unsigned __int8 *)v26 + 3;
            while (1)
            {
              unsigned int v23 = *v22 - 48;
              if (v23 > 9) {
                break;
              }
              uint64_t v24 = 10 * v10;
              if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
                break;
              }
              uint64_t v10 = v24 - v23;
              if (__OFSUB__(v24, v23)) {
                break;
              }
              LOBYTE(v3) = 0;
              ++v22;
              if (!--v20) {
                goto LABEL_44;
              }
            }
          }
        }
LABEL_31:
        uint64_t v10 = 0;
        LOBYTE(v3) = 1;
        goto LABEL_44;
      }
      if (!v6 || (v3 - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v10 = (v3 - 48);
      if (v6 != 1)
      {
        if ((BYTE1(v3) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v10 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
        uint64_t v16 = v6 - 2;
        if (v16)
        {
          unint64_t v17 = (unsigned __int8 *)v26 + 2;
          while (1)
          {
            unsigned int v18 = *v17 - 48;
            if (v18 > 9) {
              goto LABEL_31;
            }
            uint64_t v19 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
              goto LABEL_31;
            }
            uint64_t v10 = v19 + v18;
            if (__OFADD__(v19, v18)) {
              goto LABEL_31;
            }
            LOBYTE(v3) = 0;
            ++v17;
            if (!--v16) {
              goto LABEL_44;
            }
          }
        }
      }
    }
LABEL_43:
    LOBYTE(v3) = 0;
    goto LABEL_44;
  }
  if ((v3 & 0x1000000000000000) != 0) {
    uint64_t v9 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t v10 = (uint64_t)sub_1004B51B8(v9, v7, 10);
  LOBYTE(v3) = v11 & 1;
LABEL_44:
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
  {
    uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_availableFilters];
    if (v10 < *(void *)(v21 + 16))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        sub_1000C355C(*(unsigned char *)(v21 + v10 + 32), 1);
        [v1 setSelected:v1[OBJC_IVAR____TtC7Journal20TimelineFilterButton_selectedFilter] != 0];
        return;
      }
      __break(1u);
      goto LABEL_61;
    }
  }
}

id sub_1000C471C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimelineFilterButton();
  return [super dealloc];
}

uint64_t type metadata accessor for TimelineFilterButton()
{
  return self;
}

uint64_t sub_1000C47E0()
{
  return swift_deallocObject();
}

void sub_1000C4818(void *a1)
{
}

Swift::Int sub_1000C483C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000F3F6C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000C48A8(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000C48A8(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(unsigned __int8 *)(v79 + i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(unsigned char *)(v79 + v82 + 1) = v83;
          *(unsigned char *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v94 = result;
  Swift::Int v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      char v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          v86 = v11;
          v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_1000C4F24((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v86 = sub_1000F1E40((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          v90 = &v86[16 * v85 + 32];
          *(void *)v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          char v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v93[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v93 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v95;
    v93 = (void *)v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  v92 = v2;
  uint64_t v10 = *v2;
  char v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v96 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v9);
      unsigned int v15 = *(unsigned __int8 *)(v10 + v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              char v20 = *(unsigned char *)(v10 + v19);
              *(unsigned char *)(v10 + v19) = *(unsigned char *)(v10 + v18);
              *(unsigned char *)(v10 + v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      unint64_t v22 = (unsigned char *)(v10 + v9);
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(v10 + v9);
        Swift::Int v24 = v13;
        char v25 = v22;
        do
        {
          unsigned int v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *char v25 = v26;
          *--char v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v11 = sub_1000F1750(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1000F1750((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v96;
      char v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    id v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        unsigned __int8 v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        int v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_1000C4F24((unsigned __int8 *)(v10 + *(void *)v71), (unsigned __int8 *)(v10 + *(void *)v74), v10 + v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        id v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v95;
    if (v9 >= v95)
    {
      uint64_t v2 = v92;
      uint64_t v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C4F24(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  unint64_t v22 = __src;
  unint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  Swift::Int v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst) {
        memmove(__dst, a2, a3 - (void)a2);
      }
      unsigned int v14 = &v4[v9];
      char v20 = &v4[v9];
      unint64_t v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        unsigned int v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          unsigned int v16 = v15 + 1;
          unsigned int v17 = v6 - 1;
          unsigned int v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            char v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14) {
              *unsigned int v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v16 != v6 || v15 >= v6) {
              *unsigned int v15 = v18;
            }
            unint64_t v22 = --v6;
            if (v17 <= v7) {
              goto LABEL_38;
            }
          }
          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    char v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        unsigned int v11 = *v6;
        unsigned int v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4) {
            unsigned __int8 *v7 = v12;
          }
          Swift::Int v21 = ++v4;
          Swift::Int v13 = v6;
        }
        else
        {
          Swift::Int v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            unsigned __int8 *v7 = v11;
          }
        }
        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      unint64_t v22 = v7;
    }
LABEL_38:
    sub_1000F19D8((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000C5168(BOOL *a1@<X8>)
{
}

unint64_t sub_1000C5184()
{
  unint64_t result = qword_1007FCEC0;
  if (!qword_1007FCEC0)
  {
    sub_10001B284(255, &qword_1007FCEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCEC0);
  }
  return result;
}

uint64_t sub_1000C51EC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_1000C5224()
{
}

uint64_t sub_1000C5238()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FCED8);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FCED8);
  if (qword_1007F7D40 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EBC0);
  Swift::Int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000C5300()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_100035380(v0, qword_1007FCEF0);
  sub_100026A54(v0, (uint64_t)qword_1007FCEF0);
  return UUID.init()();
}

void sub_1000C534C(uint64_t (*a1)(__n128)@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1007F6EF8 != -1) {
    swift_once();
  }
  sub_1004FCBB8(qword_10083D460, (void *)qword_10083D468, a1);
  URL.appendingPathComponent(_:)();
  (*(void (**)(uint64_t (*)(__n128), uint64_t))(v3 + 8))(a1, v2);
  (*(void (**)(uint64_t (*)(__n128), char *, uint64_t))(v3 + 32))(a1, v5, v2);
  uint64_t v6 = self;
  id v7 = [v6 defaultManager];
  URL.path.getter();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v9 = [v7 fileExistsAtPath:v8];

  if ((v9 & 1) == 0)
  {
    id v10 = [v6 defaultManager];
    URL.path.getter();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_100010218(&qword_10080F9C0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1006D6280;
    *(void *)(inited + 32) = NSFileProtectionKey;
    Swift::Int v13 = (void *)qword_10083D470;
    type metadata accessor for URLFileProtection(0);
    *(void *)(inited + 64) = v14;
    *(void *)(inited + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v13;
    unsigned int v15 = NSFileProtectionKey;
    id v16 = v13;
    sub_10039687C(inited);
    type metadata accessor for FileAttributeKey(0);
    sub_1000C846C(&qword_1007F8C50, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v31 = 0;
    LODWORD(inited) = [v10 createDirectoryAtPath:v11 withIntermediateDirectories:1 attributes:isa error:&v31];

    if (inited)
    {
      id v18 = v31;
      sub_10036AF38();
      sub_1004FE774((uint64_t)a1);
    }
    else
    {
      id v19 = v31;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1007F6998 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100026A54(v20, (uint64_t)qword_1007FCED8);
      swift_errorRetain();
      swift_errorRetain();
      Swift::Int v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        Swift::Int v24 = (void *)swift_slowAlloc();
        id v31 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        if (qword_1007F69A0 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for UUID();
        sub_100026A54(v25, (uint64_t)qword_1007FCEF0);
        sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v30 = sub_10011EA98(v26, v27, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2112;
        swift_errorRetain();
        uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v30 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v24 = v28;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s Unable to create assets directory: %@", (uint8_t *)v23, 0x16u);
        sub_100010218((uint64_t *)&unk_1007FC430);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
}

uint64_t sub_1000C595C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t (*)(__n128))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AssetsFileManager();
  sub_1000C534C(v7);
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1;
  unint64_t v11 = a2;
  v8._countAndFlagsBits = 0x654D74657373612DLL;
  v8._object = (void *)0xEE00617461646174;
  String.append(_:)(v8);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t (*)(__n128), uint64_t))(v5 + 8))(v7, v4);
}

uint64_t type metadata accessor for AssetsFileManager()
{
  return self;
}

uint64_t sub_1000C5ADC(char a1)
{
  int v1 = a1 & 1;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t (*)(__n128))&v71[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  Swift::String v8 = &v71[-v7];
  __chkstk_darwin(v9);
  unint64_t v11 = (uint64_t (*)(__n128))&v71[-v10];
  if (qword_1007F6998 != -1) {
    swift_once();
  }
  uint64_t v78 = v2;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v75 = sub_100026A54(v12, (uint64_t)qword_1007FCED8);
  Swift::Int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  v73 = v5;
  unint64_t v76 = v11;
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    id v80 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    if (qword_1007F69A0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for UUID();
    sub_100026A54(v17, (uint64_t)qword_1007FCEF0);
    sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v79 = sub_10011EA98(v18, v19, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    LOBYTE(v79) = v1;
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v79 = sub_10011EA98(v20, v21, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s cleanAllAssetFiles direction: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v11 = v76;
  }
  else
  {
  }
  type metadata accessor for AssetsFileManager();
  int v72 = v1;
  sub_1000C534C(v11);
  os_log_type_t v22 = self;
  id v23 = [v22 defaultManager];
  URL.path.getter();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v80 = 0;
  id v25 = [v23 contentsOfDirectoryAtPath:v24 error:&v80];

  id v26 = v80;
  uint64_t v77 = v3;
  if (v25)
  {
    uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v28 = v26;

    uint64_t v74 = v27;
    uint64_t v29 = *(void *)(v27 + 16);
    if (!v29)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      uint64_t v41 = v77;
      uint64_t v40 = v78;
      BOOL v42 = v73;
      (*(void (**)(uint64_t (*)(__n128), uint64_t (*)(__n128), uint64_t))(v77 + 16))(v73, v11, v78);
      unint64_t v43 = v11;
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        id v80 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136446722;
        if (qword_1007F69A0 != -1) {
          swift_once();
        }
        uint64_t v47 = type metadata accessor for UUID();
        sub_100026A54(v47, (uint64_t)qword_1007FCEF0);
        sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v79 = sub_10011EA98(v48, v49, (uint64_t *)&v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2080;
        LOBYTE(v79) = v72;
        uint64_t v50 = String.init<A>(describing:)();
        uint64_t v79 = sub_10011EA98(v50, v51, (uint64_t *)&v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 22) = 2080;
        sub_1000C846C((unint64_t *)&qword_100800940, (void (*)(uint64_t))&type metadata accessor for URL);
        BOOL v52 = v73;
        uint64_t v53 = v78;
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v79 = sub_10011EA98(v54, v55, (uint64_t *)&v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v56 = *(uint64_t (**)(uint64_t (*)(__n128), uint64_t))(v77 + 8);
        v56(v52, v53);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s Successfully cleaned staging directory %s %s", (uint8_t *)v46, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return v56(v76, v53);
      }
      else
      {

        BOOL v59 = *(uint64_t (**)(uint64_t (*)(__n128), uint64_t))(v41 + 8);
        v59(v42, v40);
        return v59(v43, v40);
      }
    }
    uint64_t v30 = (void (**)(unsigned char *, uint64_t))(v77 + 8);
    uint64_t v31 = v74 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = v11;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      id v33 = [v22 defaultManager];
      URL._bridgeToObjectiveC()(v34);
      uint64_t v36 = v35;
      id v80 = 0;
      unsigned int v37 = [v33 removeItemAtURL:v35 error:&v80];

      if (!v37) {
        break;
      }
      v31 += 16;
      uint64_t v38 = *v30;
      id v39 = v80;
      v38(v8, v78);
      --v29;
      unint64_t v11 = v32;
      if (!v29) {
        goto LABEL_13;
      }
    }
    id v60 = v80;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*v30)(v8, v78);
    uint64_t v3 = v77;
    unint64_t v11 = v32;
  }
  else
  {
    id v58 = v80;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = swift_slowAlloc();
    id v80 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 136446722;
    if (qword_1007F69A0 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for UUID();
    sub_100026A54(v64, (uint64_t)qword_1007FCEF0);
    sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v79 = sub_10011EA98(v65, v66, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 12) = 2080;
    LOBYTE(v79) = v72;
    uint64_t v67 = String.init<A>(describing:)();
    uint64_t v79 = sub_10011EA98(v67, v68, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v69 = Error.localizedDescription.getter();
    uint64_t v79 = sub_10011EA98(v69, v70, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "%{public}s clean staging directory %s Error:%s", (uint8_t *)v63, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t (*)(__n128), uint64_t))(v77 + 8))(v76, v78);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t (*)(__n128), uint64_t))(v3 + 8))(v11, v78);
  }
}

uint64_t sub_1000C65A0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  BOOL v42 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - v4;
  __chkstk_darwin(v6);
  Swift::String v8 = (uint64_t (*)(__n128))((char *)&v35 - v7);
  __chkstk_darwin(v9);
  unint64_t v11 = (uint64_t (*)(__n128))((char *)&v35 - v10);
  type metadata accessor for AssetsFileManager();
  sub_1000C534C(v11);
  sub_1000C534C(v8);
  if (qword_1007F6998 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100026A54(v12, (uint64_t)qword_1007FCED8);
  uint64_t v38 = *(void (**)(char *, uint64_t (*)(__n128), uint64_t))(v1 + 16);
  v38(v5, v11, v0);
  uint64_t v39 = v13;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v40 = v1;
  uint64_t v41 = v11;
  if (v16)
  {
    unsigned int v37 = v8;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v44 = v36;
    *(_DWORD *)uint64_t v17 = 136446466;
    if (qword_1007F69A0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for UUID();
    sub_100026A54(v18, (uint64_t)qword_1007FCEF0);
    sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = sub_10011EA98(v19, v20, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = URL.debugDescription.getter();
    uint64_t v43 = sub_10011EA98(v21, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v23 = *(void (**)(char *, uint64_t))(v40 + 8);
    v23(v5, v0);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s initStagingDirectories down:%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v8 = v37;
    unint64_t v11 = v41;
  }
  else
  {
    id v23 = *(void (**)(char *, uint64_t))(v1 + 8);
    v23(v5, v0);
  }
  NSString v24 = v42;
  v38(v42, v8, v0);
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v44 = v39;
    *(_DWORD *)uint64_t v27 = 136446466;
    if (qword_1007F69A0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for UUID();
    sub_100026A54(v28, (uint64_t)qword_1007FCEF0);
    sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = sub_10011EA98(v29, v30, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v31 = v42;
    uint64_t v32 = URL.debugDescription.getter();
    uint64_t v43 = sub_10011EA98(v32, v33, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v23(v31, v0);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s initStagingDirectories up:%s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v11 = v41;
  }
  else
  {
    v23(v24, v0);
  }
  sub_1000C5ADC(1);
  sub_1000C5ADC(0);
  v23((char *)v8, v0);
  return ((uint64_t (*)(uint64_t (*)(__n128), uint64_t))v23)(v11, v0);
}

uint64_t sub_1000C6BB4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 40;
    uint64_t v4 = -(uint64_t)v1;
    uint64_t v13 = result + 40;
    unint64_t v14 = *(void *)(result + 16);
    do
    {
      if (v2 <= v1) {
        unint64_t v5 = v1;
      }
      else {
        unint64_t v5 = v2;
      }
      uint64_t v6 = -(uint64_t)v5;
      for (uint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
      {
        if (v6 + v2 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = *(i - 1);
        uint64_t v8 = *i;
        sub_100014344();
        swift_bridgeObjectRetain();
        if (StringProtocol.contains<A>(_:)()) {
          break;
        }
        unint64_t result = swift_bridgeObjectRelease();
        ++v2;
        if (v4 + v2 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = sub_100095B64(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        unint64_t result = sub_100095B64(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v9;
      v12[5] = v8;
      uint64_t v3 = v13;
      unint64_t v1 = v14;
    }
    while (v4 + v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

void sub_1000C6D48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v67 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v69 = (char *)&v65 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v65 - v8;
  if (qword_1007F6998 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_100026A54(v10, (uint64_t)qword_1007FCED8);
  unint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v68(v9, a1, v2);
  unint64_t v70 = (void *)v11;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v71 = v3;
  uint64_t v72 = v2;
  if (v14)
  {
    uint64_t v66 = a1;
    uint64_t v15 = swift_slowAlloc();
    id v74 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446466;
    if (qword_1007F69A0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for UUID();
    sub_100026A54(v16, (uint64_t)qword_1007FCEF0);
    sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v73 = sub_10011EA98(v17, v18, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    sub_1000C846C((unint64_t *)&qword_100800940, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v19 = v72;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v73 = sub_10011EA98(v20, v21, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v22 = *(void (**)(char *, uint64_t))(v71 + 8);
    v22(v9, v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s cleanAssetFile fileURL:%s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v66;
  }
  else
  {
    unint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
    v22(v9, v2);
  }
  id v23 = self;
  id v24 = [v23 defaultManager];
  uint64_t v25 = a1;
  URL.path.getter();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v27 = [v24 fileExistsAtPath:v26];

  if (!v27)
  {
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      id v74 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      if (qword_1007F69A0 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for UUID();
      sub_100026A54(v37, (uint64_t)qword_1007FCEF0);
      sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = sub_10011EA98(v38, v39, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s File doesn't exists, nothing to clean", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_16;
  }
  id v28 = [v23 defaultManager];
  URL._bridgeToObjectiveC()(v29);
  uint64_t v31 = v30;
  id v74 = 0;
  unsigned int v32 = [v28 removeItemAtURL:v30 error:&v74];

  if (v32)
  {
    id v33 = v74;
LABEL_16:
    uint64_t v40 = v69;
    uint64_t v41 = v72;
    v68(v69, v25, v72);
    BOOL v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      id v74 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446466;
      if (qword_1007F69A0 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for UUID();
      sub_100026A54(v45, (uint64_t)qword_1007FCEF0);
      sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = sub_10011EA98(v46, v47, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      uint64_t v48 = v69;
      uint64_t v49 = URL.debugDescription.getter();
      uint64_t v73 = sub_10011EA98(v49, v50, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v22(v48, v72);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s successfully cleaned asset file:%s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v22(v40, v41);
    }

    return;
  }
  id v51 = v74;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  BOOL v52 = v67;
  uint64_t v53 = v72;
  v68(v67, v25, v72);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    unint64_t v70 = (void *)swift_slowAlloc();
    id v74 = v70;
    *(_DWORD *)uint64_t v56 = 136446722;
    if (qword_1007F69A0 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for UUID();
    sub_100026A54(v57, (uint64_t)qword_1007FCEF0);
    sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v73 = sub_10011EA98(v58, v59, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    id v60 = v67;
    uint64_t v61 = URL.debugDescription.getter();
    uint64_t v73 = sub_10011EA98(v61, v62, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v60, v72);
    *(_WORD *)(v56 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v63 = Error.localizedDescription.getter();
    uint64_t v73 = sub_10011EA98(v63, v64, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{public}s Failed to delete file in path: %s\nError:%s", (uint8_t *)v56, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    v22(v52, v53);
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1000C7848()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t (*)(__n128))((char *)&v28 - v5);
  type metadata accessor for AssetsFileManager();
  sub_1000C534C(v6);
  id v7 = [self defaultManager];
  URL.path.getter();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v31 = 0;
  id v9 = [v7 contentsOfDirectoryAtPath:v8 error:&v31];

  id v10 = v31;
  if (v9)
  {
    uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = v10;

    swift_bridgeObjectRetain();
    uint64_t v13 = sub_1000C6BB4(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = (void (**)(char *, uint64_t))(v1 + 8);
    if (v14)
    {
      uint64_t v16 = v13 + 40;
      do
      {
        swift_bridgeObjectRetain();
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        sub_1000C6D48((uint64_t)v3);
        uint64_t v17 = *v15;
        (*v15)(v3, v0);
        v16 += 16;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = *v15;
    }
    return ((uint64_t (*)(uint64_t (*)(__n128), uint64_t))v17)(v6, v0);
  }
  else
  {
    id v18 = v31;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1007F6998 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100026A54(v19, (uint64_t)qword_1007FCED8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      id v28 = (void *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      id v31 = v29;
      *(_DWORD *)uint64_t v22 = 136446466;
      if (qword_1007F69A0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for UUID();
      sub_100026A54(v23, (uint64_t)qword_1007FCEF0);
      sub_1000C846C((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_10011EA98(v24, v25, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v28 = v26;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s Error getting contents of the directory: %@", (uint8_t *)v22, 0x16u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t (*)(__n128), uint64_t))(v1 + 8))(v6, v0);
  }
}

uint64_t sub_1000C846C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AssetsFileManager.StageDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C8580);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetsFileManager.StageDirection()
{
  return &type metadata for AssetsFileManager.StageDirection;
}

unint64_t sub_1000C85BC()
{
  unint64_t result = qword_1007FCFA0;
  if (!qword_1007FCFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FCFA0);
  }
  return result;
}

void sub_1000C873C()
{
  uint64_t v1 = v0;
  type metadata accessor for SymbolAndTextFallbackView();
  uint64_t v2 = sub_100110A48(0x696C637265706170, 0xE900000000000070, 0xD000000000000016, 0x800000010068B050, 0xD000000000000016, 0x800000010068B070, 0, 0);
  uint64_t v3 = OBJC_IVAR____TtC7Journal16UnknownAssetView_symbolAndTextFallbackView;
  unsigned int v4 = *(void **)&v1[OBJC_IVAR____TtC7Journal16UnknownAssetView_symbolAndTextFallbackView];
  *(void *)&v1[OBJC_IVAR____TtC7Journal16UnknownAssetView_symbolAndTextFallbackView] = v2;

  uint64_t v5 = *(void **)&v1[v3];
  if (v5)
  {
    id v6 = v5;
    [v1 addSubview:v6];
    sub_1001DCF60(0.0);

    swift_bridgeObjectRelease();
  }
}

void sub_1000C8824()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16UnknownAssetView_symbolAndTextFallbackView);
  if (v1)
  {
    uint64_t v2 = (void *)*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType);
    id v3 = v1;
    sub_1001111C8(v2);
  }
}

void sub_1000C88A4()
{
}

id sub_1000C88B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UnknownAssetView();
  [super dealloc];
}

uint64_t type metadata accessor for UnknownAssetView()
{
  return self;
}

uint64_t sub_1000C891C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FCFD8);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FCFD8);
  if (qword_1007F7DA0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083ECE0);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000C89E4(unint64_t a1)
{
  return sub_1000C90F0(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000CDAA0);
}

uint64_t sub_1000C89FC(unint64_t a1)
{
  return sub_1000C90F0(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000CDCC0);
}

uint64_t sub_1000C8A14(uint64_t a1)
{
  return sub_1000C8A40(a1, (uint64_t (*)(void))sub_1002A59A8, type metadata accessor for TranscriptViewModelSegment);
}

uint64_t sub_1000C8A40(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = *(void *)(a3(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = v5 + v15 + v14 * v11;
  unint64_t v17 = a1 + v15;
  uint64_t v18 = v14 * v10;
  unint64_t v19 = v16 + v18;
  unint64_t v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(v5 + 16);
  BOOL v23 = __OFADD__(v22, v10);
  uint64_t v24 = v22 + v10;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *id v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C8C00(uint64_t a1)
{
  return sub_1000C8DAC(a1, (uint64_t (*)(void))sub_1002A5F60, _s10VisitAssetC9VisitDataVMa);
}

uint64_t sub_1000C8C2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  id v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  id v3 = sub_1002A54A0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C8D80(uint64_t a1)
{
  return sub_1000C8DAC(a1, (uint64_t (*)(void))sub_1002A5C50, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1000C8DAC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *id v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C8F68(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  id v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  id v3 = sub_1002A6E9C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[16 * v9 + 32];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  sub_100010218((uint64_t *)&unk_1007FC130);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C90D8(unint64_t a1)
{
  return sub_1000C90F0(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000CE324);
}

uint64_t sub_1000C90F0(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *unint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1000C92C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  id v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (double *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  id v3 = sub_1002A5898(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C940C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  int64_t v4 = v3;
  uint64_t v45 = type metadata accessor for InsightsMosaicLayout.Row();
  uint64_t v8 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  BOOL v42 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100010218(&qword_1007FD200);
  __chkstk_darwin(v10 - 8);
  uint64_t v44 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  os_log_type_t v43 = (void (*)(char *))((char *)&v39 - v13);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v39 - v15;
  unint64_t v17 = *v4;
  unint64_t v18 = *(void *)(*v4 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v4 = v17;
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v20 = *(void *)(v17 + 24) >> 1, v20 < v18))
  {
    unint64_t v17 = sub_1002A74DC(isUniquelyReferenced_nonNull_native, v18, 1, v17);
    unint64_t *v4 = v17;
    unint64_t v20 = *(void *)(v17 + 24) >> 1;
  }
  uint64_t v21 = *(void *)(v17 + 16);
  unint64_t v22 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v23 = *(void *)(v8 + 72);
  uint64_t v24 = v20 - v21;
  sub_1000CC29C(&v46, v17 + v22 + v23 * v21, v20 - v21, a1, a2, a3);
  if (v25 < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v25)
  {
    uint64_t v26 = *(void *)(v17 + 16);
    BOOL v27 = __OFADD__(v26, v25);
    uint64_t v28 = v26 + v25;
    if (v27)
    {
      __break(1u);
      goto LABEL_19;
    }
    *(void *)(v17 + 16) = v28;
  }
  if (v25 == v24)
  {
LABEL_13:
    int64_t v39 = *(void *)(v17 + 16);
    sub_10055A3C0((uint64_t)v16);
    a2 = v43;
    sub_10001B220((uint64_t)v16, (uint64_t)v43, &qword_1007FD200);
    uint64_t v41 = *(unsigned int (**)(void (*)(char *), uint64_t, uint64_t))(v8 + 48);
    if (v41(a2, 1, v45) == 1)
    {
LABEL_14:
      sub_10001457C((uint64_t)v16, &qword_1007FD200);
      swift_release();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return sub_10001457C((uint64_t)a2, &qword_1007FD200);
    }
    do
    {
LABEL_19:
      sub_10001457C((uint64_t)a2, &qword_1007FD200);
      uint64_t v30 = *v4;
      unint64_t v31 = *(void *)(*v4 + 24);
      int64_t v32 = v31 >> 1;
      if ((uint64_t)(v31 >> 1) < v39 + 1)
      {
        uint64_t v30 = sub_1002A74DC(v31 > 1, v39 + 1, 1, *v4);
        unint64_t *v4 = v30;
        int64_t v32 = *(void *)(v30 + 24) >> 1;
      }
      uint64_t v33 = v44;
      sub_10001B220((uint64_t)v16, v44, &qword_1007FD200);
      if (v41((void (*)(char *))v33, 1, v45) == 1)
      {
        uint64_t v34 = v44;
        int64_t v35 = v39;
LABEL_29:
        sub_10001457C(v34, &qword_1007FD200);
        int64_t v39 = v35;
        int64_t v36 = v35;
      }
      else
      {
        int64_t v35 = v39;
        if (v39 <= v32) {
          int64_t v36 = v32;
        }
        else {
          int64_t v36 = v39;
        }
        uint64_t v37 = v30 + v22 + v23 * v39;
        uint64_t v38 = (uint64_t)v42;
        uint64_t v34 = v44;
        int64_t v40 = v36;
        while (1)
        {
          sub_1000CFAD0(v34, v38, (uint64_t (*)(void))type metadata accessor for InsightsMosaicLayout.Row);
          if (v36 == v35) {
            break;
          }
          sub_10001457C((uint64_t)v16, &qword_1007FD200);
          sub_1000CFAD0(v38, v37, (uint64_t (*)(void))type metadata accessor for InsightsMosaicLayout.Row);
          ++v35;
          sub_10055A3C0((uint64_t)v16);
          uint64_t v34 = v44;
          int64_t v36 = v40;
          sub_10001B220((uint64_t)v16, v44, &qword_1007FD200);
          v37 += v23;
          if (v41((void (*)(char *))v34, 1, v45) == 1) {
            goto LABEL_29;
          }
        }
        sub_1000CFB38(v38, (uint64_t (*)(void))type metadata accessor for InsightsMosaicLayout.Row);
        int64_t v39 = v36;
      }
      *(void *)(*v4 + 16) = v36;
      a2 = v43;
      sub_10001B220((uint64_t)v16, (uint64_t)v43, &qword_1007FD200);
    }
    while (v41(a2, 1, v45) != 1);
    goto LABEL_14;
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for UserEngagement()
{
  return self;
}

void *sub_1000C9910(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    id v11 = v10;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000C99FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C9A7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  id v10 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000C9B18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000C9BC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000C9C58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000C9CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C9D10);
}

uint64_t sub_1000C9D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000C9DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C9DE4);
}

uint64_t sub_1000C9DE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for UserEngagement.StateSnapshot()
{
  uint64_t result = qword_1007FD0E0;
  if (!qword_1007FD0E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C9EEC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000C9F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v114 = sub_100010218(&qword_1007FD188);
  __chkstk_darwin(v114);
  v112 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v113 = (char *)&v87 - v8;
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  Swift::Int v94 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v87 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  v99 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v98 = (char *)&v87 - v18;
  __chkstk_darwin(v19);
  v93 = (char *)&v87 - v20;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v87 - v22;
  uint64_t v24 = sub_100010218(&qword_1007FD190);
  __chkstk_darwin(v24 - 8);
  uint64_t v118 = (uint64_t)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100010218(&qword_1007FD198);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v107 = (char *)&v87 - v30;
  uint64_t v120 = sub_100010218(&qword_1007FC8E0);
  uint64_t v108 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  v111 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v106 = (uint64_t)&v87 - v33;
  __chkstk_darwin(v34);
  uint64_t v105 = (uint64_t)&v87 - v35;
  uint64_t v36 = sub_100010218(&qword_1007FD1A0);
  uint64_t v37 = v36 - 8;
  __chkstk_darwin(v36);
  int64_t v39 = (char *)&v87 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1000CFAD0(v121, (uint64_t)v39, type metadata accessor for UniformDateBins);
  uint64_t v41 = *(int *)(v37 + 44);
  v115 = v39;
  *(void *)&v39[v41] = 0;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_28;
  }
  if (!a3)
  {
LABEL_28:
    sub_10002C4EC((uint64_t)v115, a1, &qword_1007FD1A0);
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_34;
  }
  uint64_t v100 = v41;
  uint64_t v89 = a1;
  uint64_t v92 = type metadata accessor for UniformDateBins(0);
  uint64_t v42 = *(int *)(v92 + 24);
  v119 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
  uint64_t v97 = v42;
  if (!*(void *)&v115[v42])
  {
    uint64_t v117 = 0;
LABEL_25:
    uint64_t v81 = (uint64_t)v107;
    (*v119)(v107, 1, 1, v120);
LABEL_26:
    a1 = v89;
    a3 = v117;
    sub_10001457C(v81, &qword_1007FD198);
    goto LABEL_28;
  }
  unint64_t v91 = v13;
  uint64_t v117 = 0;
  uint64_t v43 = 0;
  v90 = (uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v44 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  v102 = (void (**)(char *, uint64_t))(v15 + 8);
  v103 = (void (**)(char *, char *, uint64_t))(v15 + 16);
  v110 = (unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
  uint64_t v88 = a3;
  uint64_t v96 = a3 - 1;
  Swift::Int v95 = v23;
  uint64_t v45 = v118;
  v104 = v28;
  uint64_t v46 = (uint64_t)v115;
  v101 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v121 = v14;
  while (1)
  {
    uint64_t v116 = a2;
    sub_10001B220(v46, v45, &qword_1007FD190);
    uint64_t v47 = type metadata accessor for CalendarBinningUnit(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v45, 1, v47);
    if (result == 1)
    {
      sub_10001457C(v45, &qword_1007FD190);
      uint64_t v48 = *v119;
      (*v119)(v28, 1, 1, v120);
    }
    else
    {
      uint64_t v49 = *(void *)(v46 + *(int *)(v92 + 20));
      uint64_t v50 = v49 + v43;
      if (__OFADD__(v49, v43)) {
        goto LABEL_31;
      }
      id v51 = v91;
      Calendar.date(byAdding:value:to:wrappingComponents:)();
      BOOL v52 = *v90;
      uint64_t result = (*v90)(v51, 1, v14);
      if (result == 1) {
        goto LABEL_35;
      }
      uint64_t v53 = *v44;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))*v44)(v23, v51, v14);
      if (__OFADD__(v50, 1)) {
        goto LABEL_32;
      }
      uint64_t v54 = v94;
      Calendar.date(byAdding:value:to:wrappingComponents:)();
      uint64_t result = v52(v54, 1, v14);
      if (result == 1) {
        goto LABEL_36;
      }
      os_log_type_t v55 = v93;
      v53(v93, v54, v14);
      sub_1000CF968((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_33;
      }
      uint64_t v56 = v113;
      uint64_t v57 = v114;
      uint64_t v58 = &v113[*(int *)(v114 + 48)];
      v53(v113, v23, v14);
      v53(v58, v55, v14);
      unint64_t v59 = v112;
      id v60 = &v112[*(int *)(v57 + 48)];
      uint64_t v61 = *v103;
      (*v103)(v112, v56, v14);
      v61(v60, v58, v14);
      uint64_t v62 = (uint64_t)v111;
      v53(v111, v59, v14);
      v109 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v102;
      ((void (*)(char *, uint64_t))v109)(v60, v14);
      uint64_t v63 = &v59[*(int *)(v57 + 48)];
      v53(v59, v56, v14);
      v53(v63, v58, v14);
      uint64_t v64 = v120;
      v53((char *)(v62 + *(int *)(v120 + 36)), v63, v14);
      ((void (*)(char *, uint64_t))v109)(v59, v14);
      uint64_t v28 = v104;
      sub_10002C4EC(v62, (uint64_t)v104, &qword_1007FC8E0);
      uint64_t v45 = v118;
      sub_1000CFB38(v118, type metadata accessor for CalendarBinningUnit);
      uint64_t v48 = *v119;
      (*v119)(v28, 0, 1, v64);
      if ((*v110)(v28, 1, v64) != 1)
      {
        uint64_t v79 = v106;
        sub_10002C4EC((uint64_t)v28, v106, &qword_1007FC8E0);
        uint64_t v80 = v116;
        uint64_t v81 = (uint64_t)v107;
        uint64_t v14 = v121;
        goto LABEL_18;
      }
      uint64_t v44 = v101;
      uint64_t v14 = v121;
    }
    uint64_t v65 = v98;
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v66 = v99;
    Date.init(timeIntervalSinceReferenceDate:)();
    sub_1000CF968((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_30;
    }
    unint64_t v68 = v113;
    uint64_t v67 = v114;
    uint64_t v69 = &v113[*(int *)(v114 + 48)];
    unint64_t v70 = *v44;
    (*v44)(v113, v65, v14);
    v70(v69, v66, v14);
    uint64_t v71 = v112;
    uint64_t v72 = &v112[*(int *)(v67 + 48)];
    v109 = v48;
    uint64_t v73 = *v103;
    (*v103)(v112, v68, v14);
    v73(v72, v69, v14);
    id v74 = v111;
    v70(v111, v71, v14);
    uint64_t v75 = *v102;
    (*v102)(v72, v121);
    uint64_t v76 = *(int *)(v67 + 48);
    uint64_t v28 = v104;
    uint64_t v77 = &v71[v76];
    v70(v71, v68, v121);
    v70(v77, v69, v121);
    v70(&v74[*(int *)(v120 + 36)], v77, v121);
    uint64_t v14 = v121;
    v75(v71, v121);
    uint64_t v78 = (uint64_t)v74;
    uint64_t v48 = v109;
    uint64_t v79 = v106;
    sub_10002C4EC(v78, v106, &qword_1007FC8E0);
    sub_10001457C((uint64_t)v28, &qword_1007FD198);
    uint64_t v80 = v116;
    uint64_t v45 = v118;
    uint64_t v81 = (uint64_t)v107;
LABEL_18:
    uint64_t result = sub_10002C4EC(v79, v81, &qword_1007FC8E0);
    uint64_t v46 = (uint64_t)v115;
    uint64_t v82 = *(void *)&v115[v100];
    uint64_t v43 = v82 + 1;
    if (__OFADD__(v82, 1)) {
      break;
    }
    *(void *)&v115[v100] = v43;
    uint64_t v83 = v120;
    v48((char *)v81, 0, 1, v120);
    if ((*v110)((char *)v81, 1, v83) == 1) {
      goto LABEL_26;
    }
    uint64_t v84 = v81;
    uint64_t v85 = v105;
    sub_10002C4EC(v84, v105, &qword_1007FC8E0);
    sub_10002C4EC(v85, v80, &qword_1007FC8E0);
    if (v96 == v117)
    {
      a1 = v89;
      a3 = v88;
      goto LABEL_28;
    }
    a2 = v80 + *(void *)(v108 + 72);
    uint64_t v86 = *(void *)(v46 + v97);
    ++v117;
    uint64_t v23 = v95;
    uint64_t v44 = v101;
    if (v43 == v86) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000CAB98(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int v5 = (void *)result;
  if (!a2)
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_12:
    *int v5 = a4;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = *(void *)(a4 + 16);
    if (v7)
    {
      uint64_t v8 = a2;
      for (uint64_t i = 1; ; ++i)
      {
        swift_bridgeObjectRetain();
        uint64_t result = swift_stdlib_random();
        uint64_t v10 = (0 * (unsigned __int128)v7) >> 64;
        if (-(uint64_t)v7 % v7)
        {
          while (1)
            swift_stdlib_random();
        }
        if (v10 >= *(void *)(a4 + 16)) {
          break;
        }
        uint64_t v11 = (uint64_t *)(a4 + 32 + 16 * v10);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *uint64_t v8 = v13;
        v8[1] = v12;
        if (i == v6) {
          goto LABEL_12;
        }
        v8 += 2;
      }
      __break(1u);
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
  return result;
}

void sub_1000CACBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100010218(&qword_1007FD140);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = _s14SuggestionInfoVMa(0);
  uint64_t v11 = *(void *)(v41 - 8);
  __n128 v12 = __chkstk_darwin(v41);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v17 = *(void *)(a4 + 56);
  uint64_t v16 = a4 + 56;
  uint64_t v15 = v17;
  uint64_t v18 = -1 << *(unsigned char *)(v16 - 24);
  uint64_t v35 = a1;
  uint64_t v36 = v18;
  uint64_t v19 = -v18;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v15;
  if (!a2)
  {
    int64_t v22 = 0;
LABEL_39:
    uint64_t v31 = v35;
    uint64_t v32 = ~v36;
    *uint64_t v35 = v42;
    v31[1] = v16;
    v31[2] = v32;
    v31[3] = v22;
    v31[4] = v21;
    return;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v39 = v11 + 48;
  int64_t v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
  uint64_t v37 = v16;
  int64_t v38 = (unint64_t)(63 - v36) >> 6;
  int64_t v34 = v38 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    uint64_t v29 = *(void *)(v11 + 72);
    sub_1000CFA00(*(void *)(v42 + 48) + v29 * v25, (uint64_t)v10, _s14SuggestionInfoVMa);
    uint64_t v30 = v41;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v41);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v30) == 1)
    {
      uint64_t v16 = v37;
      goto LABEL_38;
    }
    ++v23;
    sub_1000CFAD0((uint64_t)v10, (uint64_t)v14, _s14SuggestionInfoVMa);
    sub_1000CFAD0((uint64_t)v14, a2, _s14SuggestionInfoVMa);
    if (v23 == a3)
    {
      uint64_t v16 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    uint64_t v16 = v37;
    if (v26 >= v38) {
      goto LABEL_37;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27)
    {
      int64_t v28 = v22 + 2;
      ++v22;
      if (v26 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * v28);
      if (v27) {
        goto LABEL_14;
      }
      int64_t v22 = v26 + 1;
      if (v26 + 2 >= v38) {
        goto LABEL_37;
      }
      unint64_t v27 = *(void *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        int64_t v22 = v26 + 2;
        if (v26 + 3 >= v38) {
          goto LABEL_37;
        }
        unint64_t v27 = *(void *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          int64_t v28 = v26 + 4;
          int64_t v22 = v26 + 3;
          if (v26 + 4 < v38)
          {
            unint64_t v27 = *(void *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                int64_t v26 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  goto LABEL_42;
                }
                if (v26 >= v38)
                {
                  int64_t v22 = v34;
                  goto LABEL_37;
                }
                unint64_t v27 = *(void *)(v37 + 8 * v26);
                ++v28;
                if (v27) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*v40)(v10, 1, 1, v41, v12);
          unint64_t v21 = 0;
LABEL_38:
          sub_10001457C((uint64_t)v10, &qword_1007FD140);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

void *sub_1000CB088(void *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_OWORD *)(*(void *)(a4 + 48) + 16 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_1000CB21C(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000CB3B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100010218(&qword_1007FC108);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v34 = a4 + 64;
  uint64_t v15 = -1 << *(unsigned char *)(a4 + 32);
  if (-v15 < 64) {
    uint64_t v16 = ~(-1 << -(char)v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
LABEL_38:
    uint64_t v28 = v34;
    *a1 = a4;
    a1[1] = v28;
    a1[2] = ~v15;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v31 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v32 = a1;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  int64_t v33 = (unint64_t)(63 - v15) >> 6;
  int64_t v30 = v33 - 1;
  uint64_t v20 = a3;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v22 = v21 | (v18 << 6);
  while (1)
  {
    ++v19;
    uint64_t v26 = *(void *)(a4 + 48);
    uint64_t v27 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v10, v26 + *(void *)(*(void *)(v27 - 8) + 72) * v22, v27);
    *(void *)&v10[*(int *)(v36 + 48)] = *(void *)(*(void *)(a4 + 56) + 8 * v22);
    sub_10002C4EC((uint64_t)v10, (uint64_t)v13, &qword_1007FC108);
    sub_10002C4EC((uint64_t)v13, a2, &qword_1007FC108);
    if (v19 == v20) {
      goto LABEL_37;
    }
    a2 += *(void *)(v35 + 72);
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v23 >= v33) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v23);
    if (!v24) {
      break;
    }
LABEL_18:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v18 = v23;
  }
  v18 += 2;
  if (v23 + 1 >= v33)
  {
    unint64_t v17 = 0;
    int64_t v18 = v23;
    goto LABEL_37;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v18);
  if (v24) {
    goto LABEL_14;
  }
  int64_t v25 = v23 + 2;
  if (v23 + 2 >= v33) {
    goto LABEL_33;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v18 = v23 + 3;
  if (v23 + 3 >= v33)
  {
    unint64_t v17 = 0;
    int64_t v18 = v23 + 2;
    goto LABEL_37;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v18);
  if (v24)
  {
LABEL_14:
    int64_t v23 = v18;
    goto LABEL_18;
  }
  int64_t v25 = v23 + 4;
  if (v23 + 4 >= v33)
  {
LABEL_33:
    unint64_t v17 = 0;
LABEL_37:
    uint64_t v15 = v31;
    a1 = v32;
    goto LABEL_38;
  }
  unint64_t v24 = *(void *)(v34 + 8 * v25);
  if (v24)
  {
LABEL_17:
    int64_t v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v33)
    {
      unint64_t v17 = 0;
      int64_t v18 = v30;
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
}

void sub_1000CB704(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = _s30MOSuggestionAssetMapsClustererC7ClusterVMa();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v33 = a4;
  uint64_t v16 = a4 + 56;
  uint64_t v15 = *(void *)(a4 + 56);
  uint64_t v30 = -1 << *(unsigned char *)(a4 + 32);
  if (-v30 < 64) {
    uint64_t v17 = ~(-1 << -(char)v30);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
LABEL_34:
    uint64_t v27 = ~v30;
    *a1 = v33;
    a1[1] = v16;
    a1[2] = v27;
    a1[3] = v19;
    a1[4] = v18;
    return;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v29 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v31 = v16;
  int64_t v32 = (unint64_t)(63 - v30) >> 6;
  int64_t v28 = v32 - 1;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v26 = *(void *)(v9 + 72);
    sub_1000CFA00(*(void *)(v33 + 48) + v26 * v22, (uint64_t)v11, (uint64_t (*)(void))_s30MOSuggestionAssetMapsClustererC7ClusterVMa);
    sub_1000CFAD0((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))_s30MOSuggestionAssetMapsClustererC7ClusterVMa);
    sub_1000CFAD0((uint64_t)v14, a2, (uint64_t (*)(void))_s30MOSuggestionAssetMapsClustererC7ClusterVMa);
    if (v20 == a3) {
      goto LABEL_33;
    }
    a2 += v26;
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v23 >= v32)
    {
      unint64_t v18 = 0;
LABEL_33:
      a1 = v29;
      uint64_t v16 = v31;
      goto LABEL_34;
    }
    uint64_t v16 = v31;
    unint64_t v24 = *(void *)(v31 + 8 * v23);
    if (!v24) {
      break;
    }
LABEL_18:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v19 = v23;
  }
  v19 += 2;
  if (v23 + 1 >= v32)
  {
    unint64_t v18 = 0;
    int64_t v19 = v23;
LABEL_39:
    a1 = v29;
    goto LABEL_34;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v19);
  if (v24) {
    goto LABEL_14;
  }
  int64_t v25 = v23 + 2;
  if (v23 + 2 >= v32) {
    goto LABEL_36;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v19 = v23 + 3;
  if (v23 + 3 >= v32)
  {
    unint64_t v18 = 0;
    int64_t v19 = v23 + 2;
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v19);
  if (v24)
  {
LABEL_14:
    int64_t v23 = v19;
    goto LABEL_18;
  }
  int64_t v25 = v23 + 4;
  if (v23 + 4 >= v32)
  {
LABEL_36:
    unint64_t v18 = 0;
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v31 + 8 * v25);
  if (v24)
  {
LABEL_17:
    int64_t v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v32)
    {
      unint64_t v18 = 0;
      int64_t v19 = v28;
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v31 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_1000CBA28(uint64_t result, void *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a2;
  uint64_t v8 = (void *)result;
  if (a4 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!a2)
  {
LABEL_32:
    unint64_t v10 = v9;
    uint64_t v9 = 0;
LABEL_33:
    *uint64_t v8 = a4;
    v8[1] = v10;
    return v9;
  }
  while (1)
  {
    if (!a3)
    {
      unint64_t v10 = v9;
      uint64_t v9 = 0;
      goto LABEL_33;
    }
    if (a3 < 0)
    {
      __break(1u);
LABEL_35:
      unint64_t v10 = 0;
      goto LABEL_33;
    }
    if (!v9) {
      goto LABEL_35;
    }
    unint64_t v10 = v9 - 1;
    if (__OFSUB__(v9, 1))
    {
      __break(1u);
LABEL_37:
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_11;
    }
    unint64_t v4 = a4 & 0xC000000000000001;
    if ((a4 & 0xC000000000000001) != 0) {
      goto LABEL_37;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      break;
    }
    if (v10 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_39;
    }
    id v11 = *(id *)(a4 + 8 * v10 + 32);
LABEL_11:
    void *v7 = v11;
    uint64_t v12 = a3 - 1;
    if (a3 == 1)
    {
      uint64_t v9 = 1;
      goto LABEL_33;
    }
    uint64_t v16 = v8;
    uint64_t v13 = 0;
    uint64_t v8 = (void *)(a4 + 8 * v9 + 16);
    ++v7;
    while (1)
    {
      if (!(v12 + v13))
      {
        __break(1u);
LABEL_27:
        unint64_t v10 = 0;
LABEL_25:
        uint64_t v8 = v16;
        goto LABEL_33;
      }
      if (v9 + v13 == 1) {
        goto LABEL_27;
      }
      if (0x8000000000000001 - v9 == v13) {
        break;
      }
      unint64_t v15 = v9 + v13 - 2;
      if (v4)
      {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_29;
        }
        if (v15 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_30;
        }
        id v14 = (id)v8[v13];
      }
      *v7++ = v14;
      --v13;
      if (!(v12 + v13))
      {
        unint64_t v10 = v9 + v13 - 1;
        uint64_t v9 = a3;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000CBBFC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  id v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *id v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1000CBDFC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    int64_t v10 = 0;
    uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
    uint64_t v8 = a4 + 56;
    uint64_t v9 = ~v20;
    uint64_t v21 = -v20;
    if (v21 < 64) {
      uint64_t v22 = ~(-1 << v21);
    }
    else {
      uint64_t v22 = -1;
    }
    unint64_t v11 = v22 & *(void *)(a4 + 56);
    unint64_t v24 = result;
    if (a2) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  __CocoaSet.makeIterator()();
  sub_10001B284(0, (unint64_t *)&unk_10080F9A0);
  sub_1000CFA68();
  uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
  uint64_t v4 = v27;
  uint64_t v8 = v28;
  uint64_t v9 = v29;
  int64_t v10 = v30;
  unint64_t v11 = v31;
  unint64_t v24 = v7;
  if (!v6) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      sub_10001B284(0, (unint64_t *)&unk_10080F9A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17) {
        break;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    unint64_t v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  int64_t v16 = v10 + 5;
  if (v10 + 5 >= v25)
  {
LABEL_42:
    unint64_t v11 = 0;
    int64_t v10 = v18;
    goto LABEL_45;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v16);
  if (v17) {
    goto LABEL_23;
  }
  int64_t v19 = v10 + 6;
  while (v25 != v19)
  {
    unint64_t v17 = *(void *)(v8 + 8 * v19++);
    if (v17)
    {
      int64_t v16 = v19 - 1;
      goto LABEL_23;
    }
  }
  unint64_t v11 = 0;
  int64_t v10 = v25 - 1;
  uint64_t v9 = v23;
LABEL_46:
  void *v24 = v4;
  v24[1] = v8;
  v24[2] = v9;
  v24[3] = v10;
  v24[4] = v11;
  return (void *)v12;
}

void *sub_1000CC108(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000CC29C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v58 = a5;
  uint64_t v11 = type metadata accessor for LayoutSubview();
  uint64_t v73 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v57 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007FD208);
  __chkstk_darwin(v13 - 8);
  uint64_t v69 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v77 = (char *)&v54 - v16;
  __chkstk_darwin(v17);
  int64_t v19 = (char *)&v54 - v18;
  uint64_t v20 = sub_100010218(&qword_1007FD200);
  __chkstk_darwin(v20 - 8);
  unint64_t v68 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for InsightsMosaicLayout.Row();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v66 = v22;
  uint64_t v67 = v23;
  __n128 v24 = __chkstk_darwin(v22);
  uint64_t v65 = (uint64_t)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    *a1 = a4;
    *(_OWORD *)(a1 + 1) = 0u;
    *(_OWORD *)(a1 + 3) = 0u;
    *(_OWORD *)(a1 + 5) = 0u;
LABEL_28:
    a1[7] = v58;
    a1[8] = a6;
    return;
  }
  uint64_t v54 = a1;
  uint64_t v78 = a4;
  if (!a3)
  {
    unint64_t v33 = 0;
    uint64_t v32 = 0;
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    unint64_t v29 = 0;
    uint64_t v27 = 0;
LABEL_25:
    uint64_t v53 = v54;
    *uint64_t v54 = v78;
    v53[1] = v29;
    v53[2] = v30;
    v53[3] = v31;
    a1 = v53;
    v53[4] = v32;
    v53[5] = v33;
LABEL_27:
    v53[6] = v27;
    goto LABEL_28;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v63 = v19;
    uint64_t v76 = v11;
    uint64_t v59 = a3;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = a4;
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v71 = a2;
    uint64_t v72 = v73 + 16;
    uint64_t v75 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v73 + 56);
    id v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    uint64_t v56 = (void (**)(char *, uint64_t, uint64_t))(v73 + 32);
    os_log_type_t v55 = (void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v61 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
    uint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    uint64_t v64 = v28 + 56;
    while (1)
    {
      uint64_t v60 = v26;
      uint64_t v70 = v26 + 1;
      uint64_t v34 = (unint64_t *)(v64 + 32 * v29);
      uint64_t v35 = (uint64_t)v77;
      if (v30) {
        goto LABEL_9;
      }
      while (1)
      {
        do
        {
          unint64_t v40 = *(void *)(v78 + 16);
          if (v29 == v40)
          {
            uint64_t v41 = v76;
            uint64_t v42 = (uint64_t)v63;
            (*v75)((uint64_t)v63, 1, 1, v76, v24);
            goto LABEL_18;
          }
          if (v29 >= v40)
          {
            __break(1u);
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
          ++v29;
          uint64_t v32 = *(v34 - 1);
          unint64_t v33 = *v34;
          uint64_t v36 = *(v34 - 3);
          uint64_t v31 = *(v34 - 2);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          v34 += 4;
          uint64_t v30 = v36;
          uint64_t v27 = v32;
        }
        while (!v36);
LABEL_9:
        if (v27 == v33 >> 1)
        {
          (*v75)(v35, 1, 1, v76, v24);
          goto LABEL_14;
        }
        if (v27 < v32 || v27 >= (uint64_t)(v33 >> 1)) {
          goto LABEL_30;
        }
        uint64_t v37 = v73;
        uint64_t v38 = v76;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v73 + 16))(v77, v31 + *(void *)(v73 + 72) * v27++, v76, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v77, 0, 1, v38);
        uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        uint64_t v35 = (uint64_t)v77;
        if (v39(v77, 1, v38) != 1) {
          break;
        }
LABEL_14:
        sub_10001457C(v35, &qword_1007FD208);
      }
      uint64_t v43 = v35;
      uint64_t v42 = (uint64_t)v63;
      sub_10002C4EC(v43, (uint64_t)v63, &qword_1007FD208);
      uint64_t v41 = v76;
LABEL_18:
      uint64_t v44 = v42;
      uint64_t v45 = v69;
      sub_10002C4EC(v44, v69, &qword_1007FD208);
      uint64_t v46 = 1;
      if ((*v74)(v45, 1, v41) != 1)
      {
        uint64_t v47 = v57;
        (*v56)(v57, v69, v41);
        v58(v47);
        (*v55)(v47, v41);
        uint64_t v46 = 0;
      }
      uint64_t v48 = (uint64_t)v68;
      uint64_t v49 = v66;
      (*v62)(v68, v46, 1, v66);
      if ((*v61)(v48, 1, v49) == 1)
      {
        sub_10001457C(v48, &qword_1007FD200);
        uint64_t v53 = v54;
        *uint64_t v54 = v78;
        v53[1] = v29;
        v53[2] = v30;
        v53[3] = v31;
        a1 = v53;
        v53[4] = v32;
        v53[5] = v33;
        goto LABEL_27;
      }
      uint64_t v50 = v48;
      uint64_t v51 = v65;
      sub_1000CFAD0(v50, v65, (uint64_t (*)(void))type metadata accessor for InsightsMosaicLayout.Row);
      uint64_t v52 = v71;
      sub_1000CFAD0(v51, v71, (uint64_t (*)(void))type metadata accessor for InsightsMosaicLayout.Row);
      uint64_t v26 = v70;
      if (v70 == v59) {
        goto LABEL_25;
      }
      uint64_t v71 = v52 + *(void *)(v67 + 72);
    }
  }
LABEL_31:
  __break(1u);
}

void sub_1000CC8C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UniformDateBins(0);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218(&qword_1007FD1A0);
  __chkstk_darwin(v6 - 8);
  int64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + *(int *)(v3 + 32));
  if (v9 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  if (!v9) {
    return;
  }
  sub_100010218(&qword_1007FD1A8);
  uint64_t v10 = *(void *)(sub_100010218(&qword_1007FC8E0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11) {
    goto LABEL_12;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_13;
  }
  v13[2] = v9;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
  uint64_t v16 = *(void *)(sub_100010218(&qword_1007FC8E0) - 8);
  uint64_t v17 = (uint64_t)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  sub_1000CFA00(a1, (uint64_t)v5, type metadata accessor for UniformDateBins);
  uint64_t v18 = sub_1000C9F9C((uint64_t)v8, v17, v9);
  sub_10001457C((uint64_t)v8, &qword_1007FD1A0);
  if (v18 != v9) {
    __break(1u);
  }
}

void *sub_1000CCAF0(unint64_t a1)
{
  return sub_1000CCCF8(a1, (void (*)(void))type metadata accessor for EntrySwipeMenuButton, &qword_1007FD1E0, &qword_1007FD1D8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1001DE104);
}

void *sub_1000CCB2C(unint64_t a1)
{
  return sub_1000CCCF8(a1, (void (*)(void))type metadata accessor for JournalEntryAssetMO, &qword_1007FD170, &qword_1007FD168, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1001DE170);
}

void *sub_1000CCB68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010218(&qword_1007FD138);
  uint64_t v3 = *(void *)(_s14SuggestionInfoVMa(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      sub_1000CACBC(&v11, (uint64_t)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      sub_100082D3C();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double *sub_1000CCC9C(uint64_t a1)
{
  return sub_1000CD5B4(a1, &qword_1007FC1A8, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1000CB088);
}

void *sub_1000CCCBC(unint64_t a1)
{
  return sub_1000CCCF8(a1, (void (*)(void))type metadata accessor for MosaicCell, &qword_1007FD180, &qword_1007FD178, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1001DE104);
}

void *sub_1000CCCF8(unint64_t a1, void (*a2)(void), unint64_t *a3, uint64_t *a4, uint64_t (*a5)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v10 <= 0)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100010218((uint64_t *)&unk_1007FA1C0);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v10;
      v11[3] = (2 * (v13 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000CDEE0((unint64_t)(v11 + 4), v10, a1, a2, a3, a4, a5);
    a5 = v14;
    swift_bridgeObjectRelease();
    if (a5 == (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))v10) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v11;
}

void *sub_1000CCE20(unint64_t a1)
{
  return sub_1000CD48C(a1, (void (*)(void *, uint64_t, unint64_t))sub_1000CE104);
}

double *sub_1000CCE38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_100010218(&qword_1007FC170);
      uint64_t v9 = (double *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (double *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000CCFAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010218(&qword_1007FC1C0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_1000CB21C(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_100082D3C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

double *sub_1000CD084(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010218(&qword_1007FC100);
  uint64_t v3 = *(void *)(sub_100010218(&qword_1007FC108) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (double *)j__malloc_size(v6);
  if (v4)
  {
    if ((double *)((char *)result - v5) != (double *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_100010218(&qword_1007FC108) - 8);
      sub_1000CB3B0(&v12, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      uint64_t v11 = v10;
      swift_bridgeObjectRetain();
      sub_100082D3C();
      if (v11 == v1) {
        return (double *)v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000CD218(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010218(&qword_1007FC1B8);
  uint64_t v3 = *(void *)(_s30MOSuggestionAssetMapsClustererC7ClusterVMa() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_1000CB704(&v11, (uint64_t)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_100082D3C();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double *sub_1000CD36C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100010218((uint64_t *)&unk_1007FA1C0);
      uint64_t v3 = (double *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      *((void *)v3 + 2) = v2;
      *((void *)v3 + 3) = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    unint64_t v1 = sub_1000CBA28((uint64_t)&v7, (void *)v3 + 4, v2, v1);
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_1000CD474(unint64_t a1)
{
  return sub_1000CD48C(a1, (void (*)(void *, uint64_t, unint64_t))&specialized _ArrayBuffer._copyContents(initializing:));
}

void *sub_1000CD48C(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100010218((uint64_t *)&unk_1007FA1C0);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      void v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

double *sub_1000CD594(uint64_t a1)
{
  return sub_1000CD5B4(a1, &qword_1007FC170, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1000CBBFC);
}

double *sub_1000CD5B4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010218(a2);
  int64_t v6 = (void *)swift_allocObject();
  int64_t v7 = j__malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 17;
  }
  v6[2] = v3;
  v6[3] = 2 * (v8 >> 4);
  uint64_t v9 = a3(&v11, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  sub_100082D3C();
  if (v9 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (double *)v6;
}

double *sub_1000CD6A0(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100010218((uint64_t *)&unk_1007FA1C0);
    uint64_t v3 = (double *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    *((void *)v3 + 2) = v2;
    *((void *)v3 + 3) = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  int64_t v6 = sub_1000CBDFC(&v8, (void *)v3 + 4, v2, a1);
  uint64_t result = (double *)sub_100082D3C();
  if (v6 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

double *sub_1000CD79C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        unint64_t v10 = a2 + 24 * a3;
        if (v10 < (unint64_t)&v8[3 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 24 * v5) {
          goto LABEL_17;
        }
        sub_100010218(&qword_1007FD148);
        swift_arrayInitWithCopy();
        return v8;
      }
    }
    else
    {
      sub_100010218(&qword_1007FD150);
      uint64_t v8 = (double *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      *((void *)v8 + 2) = v5;
      *((void *)v8 + 3) = 2 * ((uint64_t)(v9 - 32) / 24);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  uint64_t result = (double *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double *sub_1000CD93C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010218(&qword_1007FD1B0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_1000CC108(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_100082D3C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (double *)v3;
}

unint64_t sub_1000CDA14(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CDAA0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000CF9B0(&qword_1007FD160, &qword_1007FD158);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100010218(&qword_1007FD158);
          uint64_t v12 = sub_1001DE104(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001B284(0, (unint64_t *)&qword_100802730);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CDCC0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000CF9B0(&qword_1007FD1D0, &qword_1007FD1C8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100010218(&qword_1007FD1C8);
          uint64_t v12 = sub_1001DE104(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001B284(0, (unint64_t *)&qword_1008059B0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CDEE0(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_1000CF9B0(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_100010218(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CE104(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000CF9B0(&qword_1007FD1F0, &qword_1007FD1E8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100010218(&qword_1007FD1E8);
          uint64_t v12 = sub_1001DE104(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001B284(0, (unint64_t *)&qword_10080A0D0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CE324(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000CF9B0(&qword_1007FD1C0, &qword_1007FD1B8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100010218(&qword_1007FD1B8);
          uint64_t v12 = sub_1001DE104(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001B284(0, (unint64_t *)&unk_10080C360);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000CE544(uint64_t a1)
{
  uint64_t v74 = _s14SuggestionInfoVMa(0);
  uint64_t v66 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v73 = (uint64_t)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v72 = (uint64_t)&v65 - v4;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v65 - v6;
  uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v8 - 8);
  uint64_t v76 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v71 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v65 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void **)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v79 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v80 = (char *)&v65 - v21;
  __chkstk_darwin(v22);
  id v24 = (char *)&v65 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v65 - v26;
  uint64_t v28 = a1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_uuid;
  swift_beginAccess();
  sub_10001B220(v28, (uint64_t)v16, &qword_100800950);
  uint64_t v86 = (unsigned int (*)(char *, uint64_t, uint64_t))v18[6];
  uint64_t v87 = v18 + 6;
  if (v86(v16, 1, v17) == 1)
  {
    sub_10001457C((uint64_t)v16, &qword_100800950);
    return _swiftEmptyArrayStorage;
  }
  v90 = (void (*)(char *, char *, uint64_t))v18[4];
  unint64_t v91 = v18 + 4;
  v90(v27, v16, v17);
  uint64_t v67 = v18;
  uint64_t v88 = (void (*)(char *, char *, uint64_t))v18[2];
  uint64_t v89 = v18 + 2;
  v88(v24, v27, v17);
  unint64_t v30 = sub_1002A55E4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v32 = *(void *)(v30 + 16);
  unint64_t v31 = *(void *)(v30 + 24);
  unint64_t v33 = v27;
  if (v32 >= v31 >> 1) {
    unint64_t v30 = sub_1002A55E4(v31 > 1, v32 + 1, 1, v30);
  }
  *(void *)(v30 + 16) = v32 + 1;
  unint64_t v84 = (*((unsigned __int8 *)v67 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v67 + 80);
  uint64_t v83 = v67[9];
  v90((char *)(v30 + v84 + v83 * v32), v24, v17);
  uint64_t v92 = (char *)&_swiftEmptySetSingleton;
  unint64_t v93 = v30;
  uint64_t v34 = (uint64_t *)(a1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsAll);
  swift_beginAccess();
  uint64_t v35 = *v34;
  if ((unint64_t)*v34 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v36 = (uint64_t)result;
  }
  else
  {
    uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v37 = v80;
  uint64_t v38 = v67;
  uint64_t v85 = v33;
  if (v36)
  {
    if (v36 >= 1)
    {
      uint64_t v39 = 0;
      unint64_t v81 = v35 & 0xC000000000000001;
      uint64_t v78 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
      uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v82 + 32);
      uint64_t v69 = (void (**)(char *, char *, uint64_t))(v82 + 16);
      unint64_t v68 = (void (**)(char *, uint64_t))(v82 + 8);
      uint64_t v77 = (void (**)(char *, uint64_t))(v67 + 1);
      uint64_t v40 = (uint64_t)v76;
      uint64_t v41 = v75;
      uint64_t v82 = v35;
      while (1)
      {
        if (v81) {
          uint64_t v43 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v43 = (char *)*(id *)(v35 + 8 * v39 + 32);
        }
        uint64_t v44 = v43;
        uint64_t v45 = &v43[OBJC_IVAR____TtCC7Journal10Journaling5Asset_suggestionId];
        swift_beginAccess();
        uint64_t v46 = (uint64_t)v45;
        uint64_t v47 = &qword_100800950;
        sub_10001B220(v46, (uint64_t)v13, &qword_100800950);
        if (v86(v13, 1, v17) == 1)
        {

          uint64_t v42 = (uint64_t)v13;
        }
        else
        {
          v90(v37, v13, v17);
          uint64_t v48 = &v44[OBJC_IVAR____TtCC7Journal10Journaling5Asset_suggestionDate];
          swift_beginAccess();
          uint64_t v49 = (uint64_t)v48;
          uint64_t v47 = (uint64_t *)&unk_1007FC470;
          sub_10001B220(v49, v40, (uint64_t *)&unk_1007FC470);
          if ((*v78)(v40, 1, v41) != 1)
          {
            uint64_t v50 = v71;
            (*v70)(v71, v40, v41);
            v88(v7, v80, v17);
            (*v69)(&v7[*(int *)(v74 + 20)], v50, v41);
            uint64_t v51 = v73;
            sub_1000CFA00((uint64_t)v7, v73, _s14SuggestionInfoVMa);
            uint64_t v52 = v72;
            uint64_t v53 = v51;
            uint64_t v41 = v75;
            sub_10054B5A8(v72, v53);

            uint64_t v54 = v52;
            uint64_t v40 = (uint64_t)v76;
            sub_1000CFB38(v54, _s14SuggestionInfoVMa);
            sub_1000CFB38((uint64_t)v7, _s14SuggestionInfoVMa);
            os_log_type_t v55 = v50;
            uint64_t v37 = v80;
            (*v68)(v55, v41);
            (*v77)(v37, v17);
            goto LABEL_12;
          }
          (*v77)(v37, v17);

          uint64_t v42 = v40;
        }
        sub_10001457C(v42, v47);
LABEL_12:
        uint64_t v35 = v82;
        if (v36 == ++v39)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = v92;
          uint64_t v38 = v67;
          unint64_t v33 = v85;
          goto LABEL_22;
        }
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = (char *)&_swiftEmptySetSingleton;
LABEL_22:
    uint64_t v57 = sub_1000CCB68((uint64_t)v56);
    swift_bridgeObjectRelease();
    int64_t v58 = v57[2];
    if (v58)
    {
      uint64_t v92 = (char *)_swiftEmptyArrayStorage;
      sub_100095BA4(0, v58, 0);
      uint64_t v59 = (uint64_t)v57 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v60 = *(void *)(v66 + 72);
      uint64_t v61 = v79;
      do
      {
        sub_1000CFA00(v59, (uint64_t)v7, _s14SuggestionInfoVMa);
        v88(v61, v7, v17);
        sub_1000CFB38((uint64_t)v7, _s14SuggestionInfoVMa);
        uint64_t v62 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100095BA4(0, *((void *)v62 + 2) + 1, 1);
          uint64_t v61 = v79;
          uint64_t v62 = v92;
        }
        unint64_t v64 = *((void *)v62 + 2);
        unint64_t v63 = *((void *)v62 + 3);
        if (v64 >= v63 >> 1)
        {
          sub_100095BA4(v63 > 1, v64 + 1, 1);
          uint64_t v61 = v79;
          uint64_t v62 = v92;
        }
        *((void *)v62 + 2) = v64 + 1;
        v90(&v62[v84 + v64 * v83], v61, v17);
        uint64_t v92 = v62;
        v59 += v60;
        --v58;
        unint64_t v33 = v85;
      }
      while (v58);
      swift_release();
      uint64_t v38 = v67;
    }
    else
    {
      swift_release();
      uint64_t v62 = (char *)_swiftEmptyArrayStorage;
    }
    sub_1000C8A40((uint64_t)v62, (uint64_t (*)(void))sub_1002A55E4, (uint64_t (*)(void))&type metadata accessor for UUID);
    ((void (*)(char *, uint64_t))v38[1])(v33, v17);
    return (void *)v93;
  }
  return result;
}

void sub_1000CEFAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UserEngagement.StateSnapshot();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v84 = (uint64_t)v77 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v77 - v16;
  uint64_t v18 = type metadata accessor for DateInterval();
  Class isa = v18[-1].isa;
  os_log_t v88 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  uint64_t v86 = (char *)v77 - v23;
  if (*(void *)(*(void *)(a2 + *(int *)(v6 + 24)) + 16))
  {
    uint64_t v80 = *(int *)(v6 + 24);
    uint64_t v83 = a3;
    uint64_t v82 = v6;
    id v24 = [*(id *)(a2 + *(int *)(v6 + 20)) length];
    sub_1000CF968((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
    char v25 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v85 = a1;
    if (v25)
    {
      uint64_t v27 = v17;
      uint64_t v28 = a2;
    }
    else
    {
      uint64_t v27 = v17;
      uint64_t v28 = a1;
    }
    v26(v27, v28, v11);
    v26(v14, a2, v11);
    unint64_t v33 = v86;
    DateInterval.init(start:end:)();
    unint64_t v81 = v24;
    if (qword_1007F69A8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100026A54(v34, (uint64_t)qword_1007FCFD8);
    uint64_t v35 = v84;
    sub_1000CFA00(a2, v84, (uint64_t (*)(void))type metadata accessor for UserEngagement.StateSnapshot);
    Class v36 = isa;
    uint64_t v37 = v33;
    os_log_t v38 = v88;
    (*((void (**)(char *, char *, os_log_t))isa + 2))(v20, v37, v88);
    uint64_t v39 = (uint64_t)v8;
    sub_1000CFA00(v85, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UserEngagement.StateSnapshot);
    uint64_t v40 = Logger.logObject.getter();
    int v41 = static os_log_type_t.default.getter();
    BOOL v42 = os_log_type_enabled(v40, (os_log_type_t)v41);
    uint64_t v43 = v83;
    if (v42)
    {
      int v78 = v41;
      os_log_t v79 = v40;
      uint64_t v44 = (_DWORD *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v77[1] = v45;
      v77[0] = v44;
      *uint64_t v44 = 136315138;
      uint64_t v90 = 0;
      unint64_t v91 = 0xE000000000000000;
      uint64_t v92 = v45;
      _StringGuts.grow(_:)(34);
      v46._object = (void *)0x800000010068B0D0;
      v46._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v46);
      uint64_t v47 = v82;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      v48._countAndFlagsBits = Array.description.getter();
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49._countAndFlagsBits = 8236;
      v49._object = (void *)0xE200000000000000;
      String.append(_:)(v49);
      id v89 = v43;
      type metadata accessor for MOAppEntryUpdateEvent(0);
      _print_unlocked<A, B>(_:_:)();
      v50._countAndFlagsBits = 8236;
      v50._object = (void *)0xE200000000000000;
      String.append(_:)(v50);
      sub_1000CF968(&qword_1007FD130, (void (*)(uint64_t))&type metadata accessor for DateInterval);
      v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._countAndFlagsBits = 8236;
      v52._object = (void *)0xE200000000000000;
      String.append(_:)(v52);
      uint64_t v53 = v20;
      uint64_t v54 = v81;
      id v89 = v81;
      v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._countAndFlagsBits = 8236;
      v56._object = (void *)0xE200000000000000;
      String.append(_:)(v56);
      uint64_t v57 = *(int *)(v47 + 20);
      int64_t v58 = v54;
      uint64_t v59 = [*(id *)(v39 + v57) length];
      uint64_t v60 = (void *)(v54 - v59);
      if (__OFSUB__(v54, v59))
      {
        __break(1u);
        return;
      }
      uint64_t v61 = (uint8_t *)v77[0];
      id v89 = v60;
      v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      uint64_t v90 = sub_10011EA98(v90, v91, &v92);
      uint64_t v43 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CFB38(v35, (uint64_t (*)(void))type metadata accessor for UserEngagement.StateSnapshot);
      unint64_t v63 = (void (*)(char *, os_log_t))*((void *)isa + 1);
      v63(v53, v88);
      sub_1000CFB38(v39, (uint64_t (*)(void))type metadata accessor for UserEngagement.StateSnapshot);
      os_log_t v64 = v79;
      _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v78, "%s", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000CFB38(v35, (uint64_t (*)(void))type metadata accessor for UserEngagement.StateSnapshot);
      unint64_t v63 = (void (*)(char *, os_log_t))*((void *)v36 + 1);
      v63(v20, v38);
      sub_1000CFB38((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UserEngagement.StateSnapshot);

      int64_t v58 = v81;
    }
    id v65 = [self sharedInstance];
    type metadata accessor for UUID();
    v66.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    uint64_t v67 = v86;
    v68.super.Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
    sub_100010218(&qword_1007FD128);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1006D6270;
    uint64_t v70 = (void *)MOAppEngagementEntryInfoAddedCharacters;
    *(void *)(inited + 32) = MOAppEngagementEntryInfoAddedCharacters;
    uint64_t v71 = *(void **)(v85 + *(int *)(v82 + 20));
    id v72 = v70;
    uint64_t v73 = [v71 length];
    if (!__OFSUB__(v58, v73))
    {
      *(void *)(inited + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v58 - v73;
      uint64_t v74 = (void *)MOAppEngagementEntryInfoTotalCharacters;
      *(void *)(inited + 64) = &type metadata for Int;
      *(void *)(inited + 72) = v74;
      *(void *)(inited + 104) = &type metadata for Int;
      *(void *)(inited + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v58;
      id v75 = v74;
      sub_100396D6C(inited);
      type metadata accessor for MOAppEngagementEntryInfo(0);
      sub_1000CF968(&qword_1007F8C60, type metadata accessor for MOAppEngagementEntryInfo);
      Class v76 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v65 didAppEntryUpdateUsingSuggestions:v66.super.isa onEvent:v43 duringInterval:v68.super.isa withInfo:v76];

      v63(v67, v88);
      return;
    }
    __break(1u);
    goto LABEL_20;
  }
  if (qword_1007F69A8 != -1) {
LABEL_20:
  }
    swift_once();
  uint64_t v29 = type metadata accessor for Logger();
  sub_100026A54(v29, (uint64_t)qword_1007FCFD8);
  os_log_t v88 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v88, v30))
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v30, "Ignoring user engagement with an entry still in draft", v31, 2u);
    swift_slowDealloc();
  }
  os_log_t v32 = v88;
}

uint64_t sub_1000CF968(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CF9B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014440(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CFA00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000CFA68()
{
  unint64_t result = qword_1007FD1F8;
  if (!qword_1007FD1F8)
  {
    sub_10001B284(255, (unint64_t *)&unk_10080F9A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD1F8);
  }
  return result;
}

uint64_t sub_1000CFAD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CFB38(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_1000CFB98()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s16PlaceholderAssetCMa();
  return [super dealloc];
}

uint64_t sub_1000CFBD0()
{
  return _s16PlaceholderAssetCMa();
}

uint64_t _s16PlaceholderAssetCMa()
{
  uint64_t result = qword_1007FD238;
  if (!qword_1007FD238) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CFC24()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1000CFC5C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FD248);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FD248);
  if (qword_1007F7D48 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EBD8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000CFD24()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_100035380(v0, qword_1007FD260);
  sub_100026A54(v0, (uint64_t)qword_1007FD260);
  return UUID.init()();
}

id sub_1000CFD70()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = v1;
  if (v1 == (void *)1)
  {
    uint64_t v3 = *v0;
    unint64_t v4 = v0[1];
    sub_100040D64(*v0, v4);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v2 = [self metadataWithDataRepresentation:isa];
    sub_100040DD0(v3, v4);

    v0[2] = (uint64_t)v2;
    id v6 = v2;
  }
  sub_1000D5E74(v1);
  return v2;
}

uint64_t sub_1000CFE18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010218(&qword_1007FD3A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002E0BC(a1, a1[3]);
  sub_1000D396C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_100090E8C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    _s9LinkAssetC8LinkDataVMa(0);
    LOBYTE(v11) = 1;
    type metadata accessor for Date();
    sub_1000D3924(&qword_1007F99F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for URL();
    sub_1000D3924(&qword_1007FC738, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000D0064(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100010218(&qword_1007FD390);
  uint64_t v22 = *(void *)(v10 - 8);
  uint64_t v23 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = _s9LinkAssetC8LinkDataVMa(0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v15 + 2) = 1;
  uint64_t v16 = a1[3];
  id v24 = a1;
  sub_10002E0BC(a1, v16);
  sub_1000D396C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v24);
    sub_1000D39C0((id)1);
  }
  else
  {
    uint64_t v17 = v22;
    uint64_t v20 = v6;
    char v26 = 0;
    sub_100090D2C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)uint64_t v15 = v25;
    type metadata accessor for Date();
    LOBYTE(v25) = 1;
    sub_1000D3924(&qword_10080E9D0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_10002C4EC((uint64_t)v9, (uint64_t)&v15[*(int *)(v13 + 24)], (uint64_t *)&unk_1007FC470);
    type metadata accessor for URL();
    LOBYTE(v25) = 2;
    sub_1000D3924(&qword_1007FC720, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v18 = (uint64_t)v20;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v23);
    sub_10002C4EC(v18, (uint64_t)&v15[*(int *)(v13 + 28)], (uint64_t *)&unk_100800A60);
    sub_1000D39D0((uint64_t)v15, v21);
    _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v24);
    sub_1000D3A34((uint64_t)v15);
  }
}

uint64_t sub_1000D0498()
{
  uint64_t v1 = 1702125924;
  if (*v0 != 1) {
    uint64_t v1 = 7107189;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1635017060;
  }
}

uint64_t sub_1000D04DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000D5178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D0504(uint64_t a1)
{
  unint64_t v2 = sub_1000D396C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D0540(uint64_t a1)
{
  unint64_t v2 = sub_1000D396C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000D057C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000D0594(void *a1)
{
  return sub_1000CFE18(a1);
}

id sub_1000D05AC()
{
  uint64_t v1 = sub_100010218(&qword_1007F9F60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100010218(&qword_1007F9F68);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata);
  if (v11)
  {
    swift_retain();
    sub_10003BD50((uint64_t)v10);
    uint64_t v12 = _s9LinkAssetC8LinkDataVMa(0);
    uint64_t v13 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12))
    {
      id v15 = sub_1000CFD70();
      sub_10002C4EC((uint64_t)v10, (uint64_t)v3, &qword_1007F9F68);
      (*v13)(v3, 0, 1, v4);
      uint64_t v16 = v11 + *(void *)(*(void *)v11 + 104);
      swift_beginAccess();
      sub_1000D5E0C((uint64_t)v3, v16);
      swift_endAccess();
      swift_release();
      return v15;
    }
    sub_10001B220((uint64_t)v10, (uint64_t)v7, &qword_1007F9F68);
    sub_10002C4EC((uint64_t)v7, (uint64_t)v3, &qword_1007F9F68);
    (*v13)(v3, 0, 1, v4);
    uint64_t v14 = v11 + *(void *)(*(void *)v11 + 104);
    swift_beginAccess();
    sub_1000D5E0C((uint64_t)v3, v14);
    swift_endAccess();
    swift_release();
    sub_10001457C((uint64_t)v10, &qword_1007F9F68);
  }
  return 0;
}

uint64_t sub_1000D0864(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v85 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v81 = v7;
  __chkstk_darwin(v7);
  int v78 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for AssetAttachment.AssetType(0);
  __chkstk_darwin(v77);
  os_log_t v79 = (_OWORD *)((char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007F9F58);
  __chkstk_darwin(v13);
  id v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = _s9LinkAssetC8LinkDataVMa(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1) {
    id v19 = a1;
  }
  else {
    id v19 = [objc_allocWithZone((Class)LPLinkMetadata) init];
  }
  sub_10001B220(a2, (uint64_t)v18 + *(int *)(v16 + 24), (uint64_t *)&unk_1007FC470);
  uint64_t v20 = (char *)v18 + *(int *)(v16 + 28);
  id v75 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v76 = v11 + 16;
  v75(v20, a3, v10);
  uint64_t v82 = v11;
  uint64_t v83 = v10;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  v18[2] = 1;
  id v21 = a1;
  id v22 = [v19 dataRepresentation];
  uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  *uint64_t v18 = v23;
  v18[1] = v25;
  sub_1000D39D0((uint64_t)v18, (uint64_t)v15);
  swift_storeEnumTagMultiPayload();
  sub_100010218(&qword_1007FD3B8);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v26 + *(void *)(*(void *)v26 + 104);
  uint64_t v28 = sub_100010218(&qword_1007F9F68);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *(_OWORD *)(v26 + *(void *)(*(void *)v26 + 112)) = xmmword_1006D6A80;
  sub_10002C4EC((uint64_t)v15, v26 + *(void *)(*(void *)v26 + 120), &qword_1007F9F58);
  *(void *)&v85[OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata] = v26;
  swift_release();
  if (URL.isFileURL.getter())
  {
    uint64_t v74 = v18;
    if (qword_1007F6EF8 != -1) {
      swift_once();
    }
    uint64_t v29 = qword_10083D460;
    os_log_type_t v30 = (void *)qword_10083D468;
    uint64_t v31 = v83;
    if (a1)
    {
      id v32 = [v21 title];
      if (v32)
      {
        unint64_t v33 = v32;
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        a1 = v35;
      }
      else
      {
        uint64_t v34 = 0;
        a1 = 0;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v37 = URL.pathExtension.getter();
    os_log_t v38 = v84;
    sub_1004FCE8C(v34, (uint64_t)a1, v37, v39, v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v40 = [self defaultManager];
    URL._bridgeToObjectiveC()(v41);
    uint64_t v43 = v42;
    URL._bridgeToObjectiveC()(v44);
    Swift::String v46 = v45;
    v87[0] = 0;
    unsigned int v47 = [v40 copyItemAtURL:v43 toURL:v45 error:v87];

    if (v47)
    {
      id v48 = v87[0];
      sub_10036AF38();
      uint64_t v49 = sub_100010218(&qword_10080B3F0);
      uint64_t v50 = (uint64_t)v79;
      Swift::String v51 = (char *)v79 + *(int *)(v49 + 48);
      *os_log_t v79 = xmmword_1006D92C0;
      v75(v51, (uint64_t)v38, v31);
      type metadata accessor for AssetAttachment.AssetType.FilePathType(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      Swift::String v52 = v78;
      UUID.init()();
      uint64_t v53 = UUID.uuidString.getter();
      uint64_t v55 = v54;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v81);
      type metadata accessor for AssetAttachment(0);
      uint64_t v56 = swift_allocObject();
      *(void *)(v56 + 16) = 0;
      sub_1000D5DA8(v50, v56 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType);
      uint64_t v57 = (uint64_t *)(v56 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
      *uint64_t v57 = v53;
      v57[1] = v55;
      int64_t v58 = &v85[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
      swift_beginAccess();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v58 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v58 & 0xFFFFFFFFFFFFFF8)
                                                                                   + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v38, v31);
    }
    else
    {
      id v59 = v87[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1007F69B0 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_100026A54(v60, (uint64_t)qword_1007FD248);
      uint64_t v61 = v85;
      swift_errorRetain();
      Swift::String v62 = v61;
      swift_errorRetain();
      unint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc();
        NSArray v66 = (void *)swift_slowAlloc();
        uint64_t v85 = (char *)swift_slowAlloc();
        v87[0] = v85;
        *(_DWORD *)uint64_t v65 = 138412802;
        uint64_t v86 = (uint64_t)v62;
        uint64_t v67 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *NSArray v66 = v62;

        *(_WORD *)(v65 + 12) = 2080;
        if (qword_1007F69B8 != -1) {
          swift_once();
        }
        sub_100026A54(v81, (uint64_t)qword_1007FD260);
        sub_1000D3924((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v86 = sub_10011EA98(v68, v69, (uint64_t *)v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v65 + 22) = 2080;
        swift_getErrorValue();
        uint64_t v70 = Error.localizedDescription.getter();
        uint64_t v86 = sub_10011EA98(v70, v71, (uint64_t *)v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "%@ %s Error copying file: %s", (uint8_t *)v65, 0x20u);
        sub_100010218((uint64_t *)&unk_1007FC430);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v83);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v31);
      }
    }
    uint64_t v36 = (uint64_t)v74;
  }
  else
  {
    uint64_t v36 = (uint64_t)v18;
  }
  return sub_1000D3A34(v36);
}

uint64_t sub_1000D129C()
{
  uint64_t v1 = sub_100010218(&qword_1007F9F60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100010218(&qword_1007F9F68);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata);
  if (!v11) {
    return 0;
  }
  swift_retain();
  sub_10003BD50((uint64_t)v10);
  uint64_t v12 = _s9LinkAssetC8LinkDataVMa(0);
  uint64_t v13 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12))
  {
    sub_10001B220((uint64_t)v10, (uint64_t)v7, &qword_1007F9F68);
    sub_10002C4EC((uint64_t)v7, (uint64_t)v3, &qword_1007F9F68);
    (*v13)(v3, 0, 1, v4);
    uint64_t v14 = v11 + *(void *)(*(void *)v11 + 104);
    swift_beginAccess();
    sub_1000D5E0C((uint64_t)v3, v14);
    swift_endAccess();
    swift_release();
    sub_10001457C((uint64_t)v10, &qword_1007F9F68);
  }
  else
  {
    id v16 = sub_1000CFD70();
    sub_10002C4EC((uint64_t)v10, (uint64_t)v3, &qword_1007F9F68);
    (*v13)(v3, 0, 1, v4);
    uint64_t v17 = v11 + *(void *)(*(void *)v11 + 104);
    swift_beginAccess();
    sub_1000D5E0C((uint64_t)v3, v17);
    swift_endAccess();
    swift_release();
    if (v16)
    {
      id v18 = [v16 title];
      if (v18)
      {
        id v19 = v18;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v15;
      }
    }
  }
  return 0;
}

void sub_1000D15A4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v28 = a1;
    a4(a1);
    uint64_t v12 = v28;
  }
  else
  {
    if (qword_1007F69B0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100026A54(v13, (uint64_t)qword_1007FD248);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    int v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, (os_log_type_t)v15))
    {
      int v26 = v15;
      os_log_t v27 = v14;
      uint64_t v28 = a4;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v30 = v25;
      *(_DWORD *)uint64_t v16 = 136315394;
      if (!a2)
      {
        sub_100052590();
        swift_allocError();
        *uint64_t v17 = 0;
      }
      v24[1] = v16 + 4;
      swift_getErrorValue();
      swift_errorRetain();
      uint64_t v18 = Error.localizedDescription.getter();
      unint64_t v20 = v19;
      swift_errorRelease();
      uint64_t v29 = sub_10011EA98(v18, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v21 = URL.absoluteString.getter();
      uint64_t v29 = sub_10011EA98(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      os_log_t v23 = v27;
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v26, "Failed to fetch LPLinkMetadata %s for URL %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v28(0);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

      a4(0);
    }
  }
}

void sub_1000D1958(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_1000D19E4()
{
  uint64_t v1 = OBJC_IVAR____TtCC7Journal10Journaling5Asset_assetMO;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_assetMO);
  if (v2)
  {
    uint64_t v3 = v0;
    id v4 = v2;
    id v5 = sub_1000D05AC();
    if (v5)
    {
      id v6 = v5;
      char v7 = sub_1000D1B70();

      NSString v8 = 0;
      switch(v7)
      {
        case 6:
          break;
        default:
          NSString v8 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          break;
      }
    }
    else
    {
      NSString v8 = 0;
    }
    [v4 setContentType:v8];

    uint64_t v9 = *(void **)(v3 + v1);
    if (v9)
    {
      [v9 setIsUploadedToCloud:0];
    }
  }
}

uint64_t sub_1000D1B70()
{
  uint64_t v1 = v0;
  uint64_t v79 = type metadata accessor for RegexWordBoundaryKind();
  uint64_t v2 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  int v78 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100010218((uint64_t *)&unk_100804220);
  uint64_t v4 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v60 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v59 = (char *)v54 - v7;
  __chkstk_darwin(v8);
  int64_t v58 = (char *)v54 - v9;
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)v54 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v54 - v13;
  __chkstk_darwin(v15);
  os_log_type_t v64 = (char *)v54 - v16;
  __chkstk_darwin(v17);
  unint64_t v63 = (char *)v54 - v18;
  uint64_t v19 = sub_100010218(&qword_1007FD3A8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v23 = __chkstk_darwin(v22).n128_u64[0];
  Swift::String v62 = (char *)v54 - v24;
  id v25 = [v1 itemType];
  if (v25)
  {
    int v26 = v25;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v66 = v27;
  }
  else
  {
    uint64_t v61 = 0;
    unint64_t v66 = 0xE000000000000000;
  }
  id v28 = [v1 siteName];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v65 = v30;
  }
  else
  {
    uint64_t v56 = 0;
    unint64_t v65 = 0xE000000000000000;
  }
  unint64_t v31 = 0;
  uint64_t v74 = (void (**)(char *, uint64_t))(v2 + 8);
  id v75 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v73 = (void (**)(char *, uint64_t))(v4 + 8);
  v54[5] = "/\\bbook|books\\b/";
  v54[2] = 0x800000010068B1E0;
  v54[4] = "/\\bspotify|pandora\\b/";
  v54[1] = 0x800000010068B1C0;
  v54[3] = "set";
  v54[0] = 0x800000010068B1A0;
  uint64_t v55 = v14;
  uint64_t v57 = v21;
  while (1)
  {
    if (v31 >= 6)
    {
      __break(1u);
      JUMPOUT(0x1000D2438);
    }
    uint64_t v32 = *((unsigned __int8 *)&off_100791C10 + v31 + 32);
    uint64_t v80 = v61;
    unint64_t v81 = v66;
    uint64_t v72 = v32;
    unint64_t v69 = v31 + 1;
    Regex.init(_regexString:version:)();
    unint64_t v33 = *v75;
    uint64_t v34 = v64;
    uint64_t v35 = v77;
    (*v75)(v64, v14, v77);
    uint64_t v36 = v76;
    Regex.ignoresCase(_:)();
    uint64_t v37 = v78;
    static RegexWordBoundaryKind.simple.getter();
    os_log_t v38 = v63;
    Regex.wordBoundaryKind(_:)();
    unint64_t v71 = *v74;
    v71(v37, v79);
    uint64_t v39 = *v73;
    (*v73)(v36, v35);
    v39(v34, v35);
    unint64_t v40 = sub_1000143EC();
    unint64_t v41 = sub_1000D3A90();
    uint64_t v42 = (uint64_t)v62;
    unint64_t v70 = v41;
    BidirectionalCollection<>.firstMatch<A, B>(of:)();
    v39(v38, v35);
    uint64_t v43 = sub_100010218((uint64_t *)&unk_100804250);
    uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48);
    if (v44(v42, 1, v43) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v53 = v42;
      goto LABEL_15;
    }
    sub_10001457C(v42, &qword_1007FD3A8);
    uint64_t v80 = v56;
    unint64_t v81 = v65;
    uint64_t v45 = v60;
    uint64_t v67 = v44;
    unint64_t v68 = v40;
    Regex.init(_regexString:version:)();
    Swift::String v46 = v59;
    uint64_t v47 = v77;
    v33(v59, v45, v77);
    id v48 = v76;
    Regex.ignoresCase(_:)();
    uint64_t v49 = v78;
    static RegexWordBoundaryKind.simple.getter();
    uint64_t v50 = v58;
    Regex.wordBoundaryKind(_:)();
    v71(v49, v79);
    v39(v48, v47);
    v39(v46, v47);
    uint64_t v51 = (uint64_t)v57;
    BidirectionalCollection<>.firstMatch<A, B>(of:)();
    v39(v50, v47);
    if (v67(v51, 1, v43) != 1) {
      break;
    }
    sub_10001457C(v51, &qword_1007FD3A8);
    unint64_t v31 = v69;
    uint64_t v14 = v55;
    if (v69 == 6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 6;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v53 = v51;
LABEL_15:
  sub_10001457C(v53, &qword_1007FD3A8);
  return v72;
}

uint64_t sub_1000D2468()
{
  return swift_release();
}

id sub_1000D2478()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s9LinkAssetCMa(0);
  return [super dealloc];
}

uint64_t sub_1000D24C0()
{
  return _s9LinkAssetCMa(0);
}

uint64_t _s9LinkAssetCMa(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FD2A0);
}

uint64_t sub_1000D24E8()
{
  return swift_updateClassMetadata2();
}

uint64_t *sub_1000D2534(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100040D64(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = (void *)a2[2];
    if (v9 != (void *)1) {
      id v10 = v9;
    }
    a1[2] = (uint64_t)v9;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v18 = *(int *)(a3 + 28);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_100010218((uint64_t *)&unk_100800A60);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t sub_1000D27B4(uint64_t *a1, uint64_t a2)
{
  sub_100040DD0(*a1, a1[1]);
  uint64_t v4 = (void *)a1[2];
  if (v4 != (void *)1) {

  }
  int v5 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  unint64_t v8 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
    return v11(v8, v9);
  }
  return result;
}

uint64_t *sub_1000D2954(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100040D64(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  unint64_t v8 = (void *)a2[2];
  if (v8 != (void *)1) {
    id v9 = v8;
  }
  a1[2] = (uint64_t)v8;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_100010218((uint64_t *)&unk_100800A60);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t *sub_1000D2B84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100040D64(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100040DD0(v8, v9);
  uint64_t v10 = a1 + 2;
  uint64_t v11 = (void *)a1[2];
  uint64_t v12 = (void *)a2[2];
  if (v11 == (void *)1)
  {
    if (v12 != (void *)1)
    {
      void *v10 = v12;
      id v13 = v12;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v12 == (void *)1)
  {
    sub_10001457C((uint64_t)(a1 + 2), &qword_1007FD2B0);
    uint64_t v12 = (void *)a2[2];
LABEL_6:
    void *v10 = v12;
    goto LABEL_8;
  }
  void *v10 = v12;
  id v14 = v12;

LABEL_8:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_13:
    uint64_t v23 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_14:
  uint64_t v24 = *(int *)(a3 + 28);
  id v25 = (char *)a1 + v24;
  int v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_19;
  }
  if (v31)
  {
LABEL_19:
    uint64_t v32 = sub_100010218((uint64_t *)&unk_100800A60);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t sub_1000D2ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  id v13 = (void *)(a1 + v12);
  id v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100010218((uint64_t *)&unk_100800A60);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t *sub_1000D30EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100040DD0(v6, v7);
  uint64_t v9 = a1 + 2;
  uint64_t v8 = (void *)a1[2];
  uint64_t v10 = *(void *)(a2 + 16);
  if (v8 == (void *)1) {
    goto LABEL_4;
  }
  if (v10 == 1)
  {
    sub_10001457C((uint64_t)(a1 + 2), &qword_1007FD2B0);
    uint64_t v10 = 1;
LABEL_4:
    *uint64_t v9 = v10;
    goto LABEL_6;
  }
  *uint64_t v9 = v10;

LABEL_6:
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  id v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_11:
    uint64_t v19 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_12:
  uint64_t v20 = *(int *)(a3 + 28);
  int v21 = (char *)a1 + v20;
  int v22 = (char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v23 - 8);
  id v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_17;
  }
  if (v27)
  {
LABEL_17:
    uint64_t v28 = sub_100010218((uint64_t *)&unk_100800A60);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_1000D3424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3438);
}

uint64_t sub_1000D3438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483645)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100010218((uint64_t *)&unk_100800A60);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000D3574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D3588);
}

uint64_t sub_1000D3588(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483645)
  {
    *(void *)(result + 16) = (a2 + 1);
  }
  else
  {
    uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100010218((uint64_t *)&unk_100800A60);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t _s9LinkAssetC8LinkDataVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FD310);
}

void sub_1000D36E0()
{
  sub_1000D37F4(319, (unint64_t *)&qword_1007FAAE0, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    sub_1000D37F4(319, (unint64_t *)&qword_1007F9270, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000D37F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000D3848()
{
  return swift_retain();
}

uint64_t sub_1000D3858(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata) = a1;
  return swift_release();
}

uint64_t sub_1000D3870()
{
  return sub_1000D129C();
}

uint64_t sub_1000D3894()
{
  return sub_1000D3924(&qword_1007F9F70, (void (*)(uint64_t))_s9LinkAssetC8LinkDataVMa);
}

uint64_t sub_1000D38DC()
{
  return sub_1000D3924(&qword_1007FD350, (void (*)(uint64_t))_s9LinkAssetC8LinkDataVMa);
}

uint64_t sub_1000D3924(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000D396C()
{
  unint64_t result = qword_1007FD398;
  if (!qword_1007FD398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD398);
  }
  return result;
}

void sub_1000D39C0(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1000D39D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s9LinkAssetC8LinkDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D3A34(uint64_t a1)
{
  uint64_t v2 = _s9LinkAssetC8LinkDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000D3A90()
{
  unint64_t result = qword_100811230;
  if (!qword_100811230)
  {
    sub_100014440((uint64_t *)&unk_100804220);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100811230);
  }
  return result;
}

uint64_t sub_1000D3AEC()
{
  v1[2] = v0;
  uint64_t v2 = _s9LinkAssetC8LinkDataVMa(0);
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  sub_100010218(&qword_1007F9F68);
  v1[6] = swift_task_alloc();
  sub_100010218((uint64_t *)&unk_100800A60);
  v1[7] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[9] = v4;
  v1[10] = *(void *)(v4 + 64);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000D3C80, 0, 0);
}

uint64_t sub_1000D3C80()
{
  if (!*(void *)(v0[2] + OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata)) {
    goto LABEL_4;
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  swift_retain();
  sub_10003BD50(v1);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2))
  {
    sub_10001457C(v0[6], &qword_1007F9F68);
LABEL_4:
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[9] + 56))(v0[7], 1, 1, v0[8]);
LABEL_5:
    sub_10001457C(v0[7], (uint64_t *)&unk_100800A60);
    goto LABEL_6;
  }
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v9 = v0[6];
  uint64_t v8 = v0[7];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[3];
  sub_1000D39D0(v9, v10);
  sub_10001457C(v9, &qword_1007F9F68);
  sub_10001B220(v10 + *(int *)(v11 + 28), v8, (uint64_t *)&unk_100800A60);
  sub_1000D3A34(v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1) {
    goto LABEL_5;
  }
  uint64_t v13 = v0[11];
  uint64_t v12 = v0[12];
  uint64_t v15 = v0[9];
  uint64_t v14 = v0[10];
  uint64_t v16 = v0[8];
  int v22 = (void *)v0[2];
  int v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v17(v12, v0[7], v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v16);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  v17(v20 + v18, v13, v16);
  *(void *)(v20 + v19) = v22;
  id v21 = v22;
  sub_1000D52A0(v12, (uint64_t)sub_1000D43A4, v20);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v16);
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1000D3F14(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218(&qword_1007F9F58);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s9LinkAssetC8LinkDataVMa(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v15 = (char *)v14 + *(int *)(v12 + 24);
    id v16 = a1;
    Date.init()();
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
    unint64_t v18 = (char *)v14 + *(int *)(v12 + 28);
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a2, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
    void v14[2] = 1;
    id v21 = [v16 dataRepresentation];
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    *uint64_t v14 = v22;
    v14[1] = v24;
    sub_1000D39D0((uint64_t)v14, (uint64_t)v11);
    swift_storeEnumTagMultiPayload();
    sub_100010218(&qword_1007FD3B8);
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v25 + *(void *)(*(void *)v25 + 104);
    uint64_t v27 = sub_100010218(&qword_1007F9F68);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
    *(_OWORD *)(v25 + *(void *)(*(void *)v25 + 112)) = xmmword_1006D6A80;
    sub_10002C4EC((uint64_t)v11, v25 + *(void *)(*(void *)v25 + 120), &qword_1007F9F58);
    *(void *)(a3 + OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata) = v25;
    swift_release();
    uint64_t v28 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 1, 1, v28);
    uint64_t v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    int v30 = (void *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v29;
    sub_100328A60((uint64_t)v8, (uint64_t)&unk_1007FD3C8, (uint64_t)v30);

    swift_release();
    sub_1000D3A34((uint64_t)v14);
  }
}

uint64_t sub_1000D4300()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1000D43A4(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000D3F14(a1, v1 + v4, v5);
}

uint64_t sub_1000D4440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000D4500, 0, 0);
}

uint64_t sub_1000D4500()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[13] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    swift_getObjectType();
    uint64_t v3 = swift_conformsToProtocol2();
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 0;
    }
    if (v5)
    {
      uint64_t ObjectType = swift_getObjectType();
      id v7 = v2;
      uint64_t v8 = (void *)swift_task_alloc();
      v0[14] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_1000D4804;
      return sub_10058DF1C(ObjectType, v4);
    }
    else
    {
      uint64_t v19 = (uint64_t (__cdecl *)())((char *)&dword_10080CA58 + dword_10080CA58);
      uint64_t v17 = (void *)swift_task_alloc();
      v0[15] = v17;
      *uint64_t v17 = v0;
      v17[1] = sub_1000D49AC;
      return v19();
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v10 = swift_unknownObjectWeakLoadStrong();
    if (v10
      && (uint64_t v11 = (void *)v10,
          uint64_t v12 = *(void **)(v10 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_context),
          v0[16] = v12,
          v12,
          v11,
          v12))
    {
      (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v0[10]);
      swift_retain();
      uint64_t v13 = (void *)swift_task_alloc();
      v0[17] = v13;
      uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC460);
      void *v13 = v0;
      v13[1] = sub_1000D4C4C;
      uint64_t v15 = v0[12];
      uint64_t v16 = v0[9];
      return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 19, v15, sub_1000D5740, v16, v14);
    }
    else
    {
      swift_task_dealloc();
      unint64_t v18 = (uint64_t (*)(void))v0[1];
      return v18();
    }
  }
}

uint64_t sub_1000D4804()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D4900, 0, 0);
}

uint64_t sub_1000D4900()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10080CA58 + dword_10080CA58);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D49AC;
  return v3();
}

uint64_t sub_1000D49AC()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 104);
  swift_task_dealloc();

  return _swift_task_switch(sub_1000D4AC0, 0, 0);
}

uint64_t sub_1000D4AC0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong
    && (uint64_t v2 = (void *)Strong,
        uint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtCC7Journal10Journaling5Asset_context),
        v0[16] = v3,
        v3,
        v2,
        v3))
  {
    (*(void (**)(void, void, void))(v0[11] + 104))(v0[12], enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v0[10]);
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[17] = v4;
    uint64_t v5 = sub_100010218((uint64_t *)&unk_1007FC460);
    void *v4 = v0;
    v4[1] = sub_1000D4C4C;
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[9];
    return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 19, v6, sub_1000D5740, v7, v5);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1000D4C4C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 128);
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();

  if (v0) {
    uint64_t v6 = sub_1000D4E58;
  }
  else {
    uint64_t v6 = sub_1000D4DF8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D4DF8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D4E58()
{
  if (qword_1007F69B0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FD248);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 64) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed saving metadata (LPLinkMetadata) to asset: %@", v4, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_1000D5064(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong
    && (os_log_type_t v3 = (void *)Strong,
        uint64_t v4 = *(void **)(Strong + OBJC_IVAR____TtCC7Journal10Journaling5Asset_context),
        id v5 = v4,
        v3,
        v4))
  {
    id v10 = 0;
    unsigned int v6 = [v5 save:&v10];

    id v7 = v10;
    if (v6)
    {
      *a1 = 0;
      id v8 = v7;
    }
    else
    {
      id v9 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    *a1 = 1;
  }
}

uint64_t sub_1000D5178(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void sub_1000D52A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = [objc_allocWithZone((Class)LPMetadataProvider) init];
  URL._bridgeToObjectiveC()(v10);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v15 = (void *)(v14 + ((v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v15 = a2;
  v15[1] = a3;
  aBlock[4] = sub_1000D554C;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D1958;
  aBlock[3] = &unk_100799900;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v9 startFetchingMetadataForURL:v12 completionHandler:v16];
  _Block_release(v16);
}

uint64_t sub_1000D54A4()
{
  uint64_t v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);
  swift_release();

  return swift_deallocObject();
}

void sub_1000D554C(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void (**)(void *))(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000D15A4(a1, a2, v2 + v6, v7);
}

uint64_t sub_1000D55FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_1000D560C()
{
  return swift_release();
}

uint64_t sub_1000D5614()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000D564C()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D568C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002C194;
  return sub_1000D4440(a1, v4, v5, v6);
}

void sub_1000D5740(unsigned char *a1@<X8>)
{
}

id sub_1000D575C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v31 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v31 - 8);
  uint64_t v30 = *(void *)(v4 + 64);
  __chkstk_darwin(v31);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v6;
  uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v29 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v28 - v14;
  UUID.init()();
  uint64_t v16 = objc_allocWithZone((Class)_s9LinkAssetCMa(0));
  *(void *)&v16[OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata] = 0;
  v16[OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_contentType] = 6;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
  id v17 = sub_1001817C4((uint64_t)v12, 10, a1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  unint64_t v18 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B220(v33, (uint64_t)v18, (uint64_t *)&unk_1007FC470);
  uint64_t v19 = v6;
  uint64_t v21 = v31;
  uint64_t v20 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v19, v32, v31);
  unint64_t v22 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v23 = (v8 + *(unsigned __int8 *)(v4 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v24 = (v30 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  sub_10002C4EC((uint64_t)v18, v25 + v22, (uint64_t *)&unk_1007FC470);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v25 + v23, v28, v21);
  *(void *)(v25 + v24) = v17;
  id v26 = v17;
  sub_1000D52A0(v20, (uint64_t)sub_1000D5CA4, v25);
  swift_release();

  sub_10001457C(v33, (uint64_t *)&unk_1007FC470);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v20, v21);
  return v26;
}

uint64_t sub_1000D5AD4()
{
  uint64_t v1 = *(void *)(sub_100010218((uint64_t *)&unk_1007FC470) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v2, 1, v7)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v2, v7);
  }
  unint64_t v9 = (v2 + v12 + v5) & ~v5;
  unint64_t v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v9, v3);

  return swift_deallocObject();
}

uint64_t sub_1000D5CA4(void *a1)
{
  uint64_t v3 = *(void *)(sub_100010218((uint64_t *)&unk_1007FC470) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(char **)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000D0864(a1, v1 + v4, v1 + v7, v8);
}

uint64_t sub_1000D5DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetAttachment.AssetType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007F9F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_1000D5E74(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

unsigned char *_s9LinkAssetC8LinkDataV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D5F50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s9LinkAssetC8LinkDataV10CodingKeysOMa()
{
  return &_s9LinkAssetC8LinkDataV10CodingKeysON;
}

unint64_t sub_1000D5F8C()
{
  unint64_t result = qword_1007FD3D0;
  if (!qword_1007FD3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD3D0);
  }
  return result;
}

unint64_t sub_1000D5FE4()
{
  unint64_t result = qword_1007FD3D8;
  if (!qword_1007FD3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD3D8);
  }
  return result;
}

unint64_t sub_1000D603C()
{
  unint64_t result = qword_1007FD3E0;
  if (!qword_1007FD3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD3E0);
  }
  return result;
}

uint64_t sub_1000D6090()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SendableContext()
{
  return self;
}

id sub_1000D60EC@<X0>(uint64_t *a1@<X8>)
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  unsigned int v4 = *(void **)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_contextMain);
  type metadata accessor for SendableContext();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v4;
  *a1 = v2;

  return v4;
}

uint64_t type metadata accessor for JournalAppIntentsManager()
{
  return self;
}

void sub_1000D61F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC7Journal14VideoAssetView_isLoaded) & 1) == 0)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC7Journal14VideoAssetView_isLoaded) = 1;
    unint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC7Journal14VideoAssetView_videoAsset);
    if (v10)
    {
      uint64_t v18 = v3;
      uint64_t v11 = qword_1007F6A58;
      id v12 = v10;
      if (v11 != -1) {
        swift_once();
      }
      v17[1] = qword_10083CF60;
      uint64_t v13 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = v12;
      aBlock[4] = sub_1000D73A4;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10017D530;
      aBlock[3] = &unk_100799AF8;
      uint64_t v15 = _Block_copy(aBlock);
      id v16 = v12;
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v19 = _swiftEmptyArrayStorage;
      sub_10004F6A0();
      sub_100010218(&qword_100804DB0);
      sub_10001B1BC();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      swift_release();
    }
  }
}

uint64_t type metadata accessor for VideoUtilities()
{
  return self;
}

void sub_1000D6534(unint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    id v17 = 0;
    if (*(void *)(a2 + 16))
    {
LABEL_22:
      id v34 = [self defaultCenter];
      NSString v35 = String._bridgeToObjectiveC()();
      sub_100010218(&qword_1007FB618);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1006D6280;
      aBlock = (void **)0xD000000000000019;
      unint64_t v53 = 0x800000010068B320;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = sub_100010218(&qword_100800A70);
      *(void *)(inited + 72) = a2;
      swift_bridgeObjectRetain();
      sub_100396738(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v34 postNotificationName:v35 object:0 userInfo:isa];
    }
LABEL_23:

    return;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_25;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v39 = a2;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = a1 & 0xC000000000000001;
    uint64_t v42 = v54;
    unint64_t v41 = (void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v40 = (void (**)(char *, uint64_t))(v6 + 8);
    p_vtable = &OBJC_METACLASS____TtC7Journal15BufferConverter.vtable;
    unint64_t v44 = a1;
    unint64_t v43 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v11)
      {
        id v17 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        if (!v9) {
          goto LABEL_11;
        }
      }
      else
      {
        id v17 = (char *)*(id *)(a1 + 8 * v10 + 32);
        if (!v9)
        {
LABEL_11:
          uint64_t v18 = *(void **)((char *)p_vtable[32] + (void)v17);
          if (!v18) {
            goto LABEL_30;
          }
          id v19 = v18;
          id v20 = [v19 layer];
          self;
          uint64_t v21 = (void *)swift_dynamicCastObjCClass();
          if (!v21) {

          }
          id v22 = [v21 player];
          if (!v22 || ([v22 rate], float v24 = v23, v22, v24 <= 0.0))
          {
LABEL_30:
            if ((v17[OBJC_IVAR____TtC7Journal14VideoAssetView_isLoaded] & 1) == 0)
            {
              v17[OBJC_IVAR____TtC7Journal14VideoAssetView_isLoaded] = 1;
              uint64_t v25 = *(void **)&v17[OBJC_IVAR____TtC7Journal14VideoAssetView_videoAsset];
              if (v25)
              {
                uint64_t v26 = qword_1007F6A58;
                id v27 = v25;
                if (v26 != -1) {
                  swift_once();
                }
                uint64_t v50 = qword_10083CF60;
                uint64_t v28 = swift_allocObject();
                swift_unknownObjectWeakInit();
                uint64_t v29 = swift_allocObject();
                *(void *)(v29 + 16) = v28;
                *(void *)(v29 + 24) = v27;
                v54[2] = sub_1000D6F40;
                v54[3] = v29;
                aBlock = _NSConcreteStackBlock;
                unint64_t v53 = 1107296256;
                v54[0] = sub_10017D530;
                v54[1] = &unk_100799A80;
                uint64_t v30 = _Block_copy(&aBlock);
                id v49 = v27;
                swift_retain();
                uint64_t v31 = v45;
                static DispatchQoS.unspecified.getter();
                uint64_t v51 = _swiftEmptyArrayStorage;
                sub_10004F6A0();
                sub_100010218(&qword_100804DB0);
                sub_10001B1BC();
                uint64_t v32 = v47;
                uint64_t v33 = v48;
                dispatch thunk of SetAlgebra.init<A>(_:)();
                OS_dispatch_queue.async(group:qos:flags:execute:)();
                _Block_release(v30);

                (*v41)(v32, v33);
                (*v40)(v31, v46);
                swift_release();
                swift_release();
                a1 = v44;
                unint64_t v11 = v43;
                p_vtable = (void **)(&OBJC_METACLASS____TtC7Journal15BufferConverter + 24);
              }
            }
          }
          goto LABEL_6;
        }
      }
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v17;
      uint64_t v14 = (void (**)())&v9[OBJC_IVAR____TtC7Journal14VideoAssetView_finishPlayingAction];
      uint64_t v15 = *(void *)&v9[OBJC_IVAR____TtC7Journal14VideoAssetView_finishPlayingAction];
      *uint64_t v14 = sub_1000D6F98;
      v14[1] = (void (*)())v13;
      id v16 = v17;
      sub_10001ABB8(v15);

LABEL_6:
      ++v10;
      unint64_t v9 = v17;
      if (v8 == v10)
      {
        swift_bridgeObjectRelease();
        a2 = v39;
        if (*(void *)(v39 + 16)) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1000D6BE4(uint64_t a1)
{
  *(void *)(v1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a1;
  return _swift_task_switch(sub_1000D6C04, 0, 0);
}

uint64_t sub_1000D6C04()
{
  id v1 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[6] = [v1 initWithURL:v3 options:0];

  sub_100010218(&qword_1007FD560);
  uint64_t v5 = static AVPartialAsyncProperty<A>.duration.getter();
  v0[7] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000D6D10;
  return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 2, v5);
}

uint64_t sub_1000D6D10()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000D6E98;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1000D6E2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D6E2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v4(v1, v2, v3);
}

uint64_t sub_1000D6E98()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D6F04()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000D6F40()
{
  return sub_1005E23CC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000D6F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_1000D6F58()
{
  return swift_release();
}

uint64_t sub_1000D6F60()
{
  return swift_deallocObject();
}

void sub_1000D6F98()
{
  sub_1000D61F4(*(void *)(v0 + 16));
}

uint64_t sub_1000D6FA4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D6FE4(uint64_t a1, double a2)
{
  *(double *)(v2 + 24) = a2;
  *(void *)(v2 + 16) = a1;
  return _swift_task_switch(sub_1000D7008, 0, 0);
}

uint64_t sub_1000D7008()
{
  double v1 = v0[3];
  id v2 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  id v6 = [v2 initWithURL:v4 options:0];
  *((void *)v0 + 4) = v6;

  id v7 = [objc_allocWithZone((Class)AVAssetImageGenerator) initWithAsset:v6];
  *((void *)v0 + 5) = v7;
  [v7 setAppliesPreferredTrackTransform:1];
  [v7 setMaximumSize:v1, v1];
  [v7 setDynamicRangePolicy:AVAssetImageGeneratorDynamicRangePolicyForceSDR];
  __C::CMTime v14 = CMTime.init(seconds:preferredTimescale:)(0.0, 60);
  Swift::Int64 value = v14.value;
  uint64_t v9 = *(void *)&v14.timescale;
  Swift::Int64 epoch = v14.epoch;
  unint64_t v11 = (void *)swift_task_alloc();
  *((void *)v0 + 6) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1000D7178;
  return AVAssetImageGenerator.image(at:)(value, v9, epoch);
}

uint64_t sub_1000D7178(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000D733C;
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_1000D72A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000D72A0()
{
  uint64_t v1 = (void *)v0[8];
  uint64_t v3 = (void *)v0[4];
  id v2 = (void *)v0[5];
  id v4 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v1];

  uint64_t v5 = (uint64_t (*)(id))v0[1];
  return v5(v4);
}

uint64_t sub_1000D733C()
{
  uint64_t v1 = *(void **)(v0 + 32);

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void *sub_1000D73B0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100095D7C(0, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        sub_100095D7C(v6 > 1, v7 + 1, 1);
      }
      v3 += 2;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000D7488(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    unint64_t result = (void *)sub_100095C98(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      id v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_100095C98(v7 > 1, v8 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[3 * v8];
      v9[4] = v6;
      v9[5] = 0;
      *((unsigned char *)v9 + 48) = 2;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D75E4@<X0>(uint64_t a1@<X8>)
{
  sub_1000D8818();
  sub_1000D886C();
  NSDiffableDataSourceSnapshot.init()();
  sub_10062F560(a1);
  sub_1005E4EA4();
  sub_100010218(&qword_1007FD5E8);
  uint64_t v2 = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
  uint64_t v3 = sub_1000D73B0(v2);
  swift_bridgeObjectRelease();
  sub_100010218((uint64_t *)&unk_1007FD5F0);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)v3);
  swift_bridgeObjectRelease();
  uint64_t result = NSDiffableDataSourceSnapshot.sectionIdentifiers.getter();
  uint64_t v5 = result;
  uint64_t v19 = *(void *)(result + 16);
  if (!v19)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    unint64_t v16 = NSDiffableDataSourceSnapshot.reloadedItemIdentifiers.getter();
    id v17 = sub_1000D7488(v16);
    swift_bridgeObjectRelease();
    NSDiffableDataSourceSnapshot.reconfigureItems(_:)((Swift::OpaquePointer)v17);
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = result;
  unint64_t v6 = 0;
  while (v6 < *(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = NSDiffableDataSourceSnapshot.itemIdentifiers(inSection:)();
    unint64_t v8 = v7;
    if (v7 >> 62)
    {
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9)
      {
LABEL_17:
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v9) {
        goto LABEL_17;
      }
    }
    uint64_t result = sub_100095C98(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      goto LABEL_20;
    }
    uint64_t v10 = 0;
    do
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v8 + 8 * v10 + 32);
      }
      id v12 = v11;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100095C98(v13 > 1, v14 + 1, 1);
      }
      ++v10;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[3 * v14];
      v15[4] = v12;
      v15[5] = 0;
      *((unsigned char *)v15 + 48) = 2;
    }
    while (v9 != v10);
    swift_bridgeObjectRelease();
    uint64_t v5 = v18;
LABEL_3:
    ++v6;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 == v19) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000D78CC()
{
  uint64_t v0 = sub_100010218(&qword_1007FD5E0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = sub_100010218((uint64_t *)&unk_1007FD5F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
    (*(void (**)(char *))((swift_isaMask & *v4) + 0x2C0))(v2);

    return sub_10001457C((uint64_t)v2, &qword_1007FD5E0);
  }
  return result;
}

uint64_t sub_1000D7A80()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewController_entryCollectionView);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  if (![v2 dataSource]) {
    goto LABEL_13;
  }
  sub_100010218(&qword_1007FAA68);
  if (!swift_dynamicCastClass())
  {
LABEL_12:
    swift_unknownObjectRelease();
LABEL_13:

    return 0;
  }
  dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
  if (v10 != 2)
  {
    if (v10 == 255)
    {

      swift_unknownObjectRelease();
      return 0;
    }
    sub_1000D7EA0(v8, v9, v10);
    goto LABEL_12;
  }
  id v3 = [*(id *)(v0 + OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewController_coreDataContext) objectWithID:v8];
  swift_unknownObjectRelease();

  sub_1000D7EA0(v8, v9, 2);
  type metadata accessor for JournalEntryMO();
  uint64_t v4 = (void *)swift_dynamicCastClass();
  if (!v4)
  {

    return 0;
  }
  uint64_t v5 = v4;
  id v6 = [v4 managedObjectContext];
  if (!v6) {
    id v6 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
  }
  type metadata accessor for Journaling.EntryViewModel();
  swift_allocObject();
  return sub_10057F170(v5, 0, 0, v6);
}

uint64_t sub_1000D7C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100010218((uint64_t *)&unk_1007FD5D0);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewController_entryCollectionView);
  if (v8)
  {
    id v9 = v8;
    if ([v9 dataSource])
    {
      sub_100010218(&qword_1007FAA68);
      if (swift_dynamicCastClass())
      {
        id v17 = *(id *)(a1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_id);
        uint64_t v18 = 0;
        char v19 = 2;
        id v10 = v17;
        dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)();

        swift_unknownObjectRelease();
        uint64_t v11 = type metadata accessor for IndexPath();
        uint64_t v12 = *(void *)(v11 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
        {
          sub_10001457C((uint64_t)v7, (uint64_t *)&unk_1007FD5D0);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, v11);
        }
        else
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v7, v11);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
        }
      }
      swift_unknownObjectRelease();
    }
  }
  uint64_t v14 = type metadata accessor for IndexPath();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);

  return v15(a2, 1, 1, v14);
}

void sub_1000D7EA0(void *a1, id a2, char a3)
{
  if (a3 != -1) {
    sub_100062C10(a1, a2, a3);
  }
}

void sub_1000D7EB4(void (*a1)(char *, uint64_t, uint64_t))
{
  uint64_t v76 = a1;
  uint64_t v2 = sub_100010218(&qword_1007FD5E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010218(&qword_1007FD5E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FD5F0);
  uint64_t v77 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v65 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v65 - v17;
  __chkstk_darwin(v19);
  int v78 = (char *)&v65 - v20;
  __chkstk_darwin(v21);
  float v24 = (char *)&v65 - v23;
  os_log_t v79 = v1;
  uint64_t v25 = *(Class *)((char *)&v1->isa + OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewController_entryCollectionView);
  if (!v25) {
    goto LABEL_9;
  }
  uint64_t v74 = v22;
  id v26 = v25;
  id v27 = [v26 dataSource];
  if (!v27)
  {
LABEL_8:

LABEL_9:
    if (qword_1007F6AE8 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100026A54(v41, (uint64_t)qword_10083D088);
    os_log_t v79 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v42, "DataSource is not UICollectionViewDiffableDataSource", v43, 2u);
      swift_slowDealloc();
    }
    os_log_t v44 = v79;

    return;
  }
  uint64_t v73 = v11;
  id v75 = v24;
  id v28 = v27;
  sub_100010218(&qword_1007FAA68);
  uint64_t v29 = swift_dynamicCastClass();
  if (!v29)
  {
    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  uint64_t v30 = v29;
  id v70 = v28;
  id v71 = v26;
  uint64_t v72 = v4;
  sub_1000D8740();
  sub_1000D8780();
  static NSDiffableDataSourceSnapshot._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = (uint64_t)v75;
  sub_1000D75E4((uint64_t)v75);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v32 = v78;
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();
  uint64_t v33 = NSDiffableDataSourceSnapshot.numberOfItems.getter();
  uint64_t v34 = NSDiffableDataSourceSnapshot.numberOfItems.getter();
  uint64_t v35 = v77;
  uint64_t v36 = v77 + 16;
  uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  v76(v18, v31, v9);
  uint64_t v69 = v30;
  if (v33 != v34)
  {
    uint64_t v45 = v18;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v35 + 8);
    v39(v45, v9);
    goto LABEL_17;
  }
  uint64_t v37 = *(void *)(NSDiffableDataSourceSnapshot.reloadedItemIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v38 = v18;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v35 + 8);
  v39(v38, v9);
  if (v37)
  {
LABEL_17:
    uint64_t v40 = (uint64_t)v75;
    int v68 = *((unsigned __int8 *)&v79->isa
          + OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewController_disableReloadAnimations) ^ 1;
    goto LABEL_18;
  }
  int v68 = 0;
  uint64_t v40 = (uint64_t)v75;
LABEL_18:
  if (qword_1007F6AE8 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  sub_100026A54(v46, (uint64_t)qword_10083D088);
  uint64_t v47 = v32;
  uint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t))v76;
  v76(v15, (uint64_t)v47, v9);
  id v49 = v74;
  v48((uint64_t)v74, v40, v9);
  uint64_t v50 = v73;
  v48((uint64_t)v73, v40, v9);
  uint64_t v51 = Logger.logObject.getter();
  int v52 = static os_log_type_t.info.getter();
  os_log_t v67 = v51;
  if (!os_log_type_enabled(v51, (os_log_type_t)v52))
  {
    uint64_t v61 = v35;
    v39(v50, v9);
    v39(v49, v9);
    v39(v15, v9);
    Swift::String v62 = v78;
    os_log_t v60 = v67;
    goto LABEL_24;
  }
  uint64_t v65 = v36;
  int v66 = v52;
  uint64_t v53 = swift_slowAlloc();
  *(_DWORD *)uint64_t v53 = 134218496;
  uint64_t v54 = NSDiffableDataSourceSnapshot.numberOfItems.getter();
  v39(v15, v9);
  uint64_t v80 = v54;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v53 + 12) = 2048;
  uint64_t v55 = NSDiffableDataSourceSnapshot.numberOfItems.getter();
  v39(v49, v9);
  uint64_t v80 = v55;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v53 + 22) = 2048;
  uint64_t v56 = *(void *)(NSDiffableDataSourceSnapshot.reconfiguredItemIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v57 = *(void *)(NSDiffableDataSourceSnapshot.reloadedItemIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  BOOL v58 = __OFADD__(v56, v57);
  uint64_t v59 = v56 + v57;
  if (!v58)
  {
    v39(v50, v9);
    uint64_t v80 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v60 = v67;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v66, "-- Applying new snapshot --\nOld item count: %ld\nNew item count: %ld\nChanged items count: %ld", (uint8_t *)v53, 0x20u);
    swift_slowDealloc();
    uint64_t v61 = v77;
    Swift::String v62 = v78;
LABEL_24:

    uint64_t v63 = (uint64_t)v72;
    uint64_t v64 = (uint64_t)v75;
    v76(v72, (uint64_t)v75, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v63, 0, 1, v9);
    (*(void (**)(uint64_t))((swift_isaMask & (uint64_t)v79->isa) + 0x2C0))(v63);
    sub_10001457C(v63, &qword_1007FD5E0);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)();
    swift_unknownObjectRelease();
    swift_release();

    v39(v62, v9);
    v39((char *)v64, v9);
    swift_release();
    return;
  }
  __break(1u);
}

unint64_t sub_1000D8740()
{
  unint64_t result = qword_100800A40;
  if (!qword_100800A40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100800A40);
  }
  return result;
}

unint64_t sub_1000D8780()
{
  unint64_t result = qword_1007FD600;
  if (!qword_1007FD600)
  {
    sub_1000D8740();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD600);
  }
  return result;
}

uint64_t sub_1000D87D8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000D8810()
{
  return sub_1000D78CC();
}

unint64_t sub_1000D8818()
{
  unint64_t result = qword_1007FD608;
  if (!qword_1007FD608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD608);
  }
  return result;
}

unint64_t sub_1000D886C()
{
  unint64_t result = qword_1007FD610;
  if (!qword_1007FD610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD610);
  }
  return result;
}

id sub_1000D88C0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FA1D0);
  *(void *)&double v5 = __chkstk_darwin(v4 - 8).n128_u64[0];
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, "dataSource", v5))
  {
    sub_100010218(&qword_1007FAA68);
    uint64_t v8 = swift_dynamicCastClass();
    if (v8)
    {
      uint64_t v9 = v8;
      swift_unknownObjectRetain();
      uint64_t v10 = v47;
      unint64_t v11 = sub_1000D9568(a2, v9, (uint64_t)v10);
      swift_unknownObjectRelease_n();

      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_6:
  id result = [a1 traitCollection];
  id v46 = result;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    id result = (id)swift_bridgeObjectRelease();
    if (v13)
    {
LABEL_8:
      if (v13 < 1)
      {
        __break(1u);
      }
      else
      {
        unint64_t v43 = v7;
        uint64_t v14 = &v47[OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewPrefetcher_prefetchEntryTasks];
        unint64_t v48 = v11 & 0xC000000000000001;
        swift_beginAccess();
        uint64_t v15 = 0;
        os_log_type_t v42 = (char *)&type metadata for () + 8;
        uint64_t v44 = v13;
        unint64_t v45 = v11;
        do
        {
          if (v48) {
            id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v16 = *(id *)(v11 + 8 * v15 + 32);
          }
          id v17 = v16;
          id v18 = [v17 managedObjectContext];
          if (!v18) {
            id v18 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
          }
          type metadata accessor for Journaling.EntryViewModel();
          swift_allocObject();
          uint64_t v19 = sub_10057F170(v17, 0, 0, v18);
          uint64_t v20 = v19;
          uint64_t v21 = OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_id;
          if (*(void *)(*(void *)v14 + 16)
            && (id v22 = *(void **)(v19 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_id),
                swift_bridgeObjectRetain(),
                id v23 = v22,
                sub_10001B9E8((uint64_t)v23),
                char v25 = v24,
                swift_bridgeObjectRelease(),
                v23,
                (v25 & 1) != 0))
          {

            swift_release();
          }
          else
          {
            uint64_t v49 = v21;
            id v50 = v17;
            uint64_t v26 = (uint64_t)v43;
            TaskPriority.init(rawValue:)();
            uint64_t v27 = type metadata accessor for TaskPriority();
            uint64_t v28 = *(void *)(v27 - 8);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v26, 0, 1, v27);
            type metadata accessor for MainActor();
            uint64_t v29 = v47;
            swift_retain();
            id v30 = v46;
            uint64_t v31 = static MainActor.shared.getter();
            uint64_t v32 = (void *)swift_allocObject();
            v32[2] = v31;
            v32[3] = &protocol witness table for MainActor;
            unsigned char v32[4] = v20;
            void v32[5] = v30;
            v32[6] = v29;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
            {
              sub_1000D9A48(v26);
            }
            else
            {
              TaskPriority.rawValue.getter();
              (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
            }
            uint64_t v33 = v49;
            if (v32[2])
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v34 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v36 = v35;
              swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v34 = 0;
              uint64_t v36 = 0;
            }
            uint64_t v13 = v44;
            uint64_t v37 = swift_allocObject();
            *(void *)(v37 + 16) = &unk_1007FD6C8;
            *(void *)(v37 + 24) = v32;
            if (v36 | v34)
            {
              uint64_t v52 = 0;
              uint64_t v53 = 0;
              uint64_t v54 = v34;
              uint64_t v55 = v36;
            }
            unint64_t v11 = v45;
            uint64_t v38 = swift_task_create();
            uint64_t v39 = *(void **)(v20 + v33);
            swift_beginAccess();
            id v40 = v39;
            swift_retain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v51 = *(void *)v14;
            *(void *)uint64_t v14 = 0x8000000000000000;
            sub_1005994B4(v38, v40, isUniquelyReferenced_nonNull_native);
            *(void *)uint64_t v14 = v51;

            swift_bridgeObjectRelease();
            swift_endAccess();
            swift_release();
            swift_release();
          }
          ++v15;
        }
        while (v13 != v15);

        return (id)swift_bridgeObjectRelease();
      }
      return result;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_8;
    }
  }

  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_1000D8E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a4;
  v6[6] = a6;
  v6[7] = type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[9] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_1000D8F30;
  return sub_10050F1F0(a5);
}

uint64_t sub_1000D8F30()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000D906C, v1, v0);
}

uint64_t sub_1000D906C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_id);
  swift_beginAccess();
  id v3 = v2;
  sub_1000F1FF0((uint64_t)v3);
  swift_endAccess();

  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1000D9148(void *a1, uint64_t a2)
{
  if ([a1 dataSource])
  {
    sub_100010218(&qword_1007FAA68);
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = v4;
      swift_unknownObjectRetain();
      id v6 = v2;
      unint64_t v7 = sub_1000D9568(a2, v5, (uint64_t)v6);
      swift_unknownObjectRelease_n();

      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  unint64_t v7 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_6:
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_8;
    }
LABEL_20:
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_20;
  }
LABEL_8:
  if (v8 >= 1)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(v7 + 8 * i + 32);
      }
      id v11 = v10;
      id v12 = [v11 managedObjectContext];
      if (!v12) {
        id v12 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
      }
      type metadata accessor for Journaling.EntryViewModel();
      swift_allocObject();
      uint64_t v13 = sub_10057F170(v11, 0, 0, v12);
      sub_10050F454();
      uint64_t v14 = *(void **)(v13 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_id);
      swift_beginAccess();
      id v15 = v14;
      uint64_t v16 = sub_1000F1FF0((uint64_t)v15);
      swift_endAccess();

      if (v16)
      {
        Task.cancel()();
        swift_release();
      }
      swift_release();
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t sub_1000D9404(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  type metadata accessor for IndexPath();
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  a5(v9, v8);

  return swift_bridgeObjectRelease();
}

id sub_1000D94C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JournalEntryCollectionViewPrefetcher();
  return [super dealloc];
}

uint64_t type metadata accessor for JournalEntryCollectionViewPrefetcher()
{
  return self;
}

unint64_t sub_1000D9568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v29 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FD5D0);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v24 = a1;
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v12 = v6 + 16;
    uint64_t v36 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v25 = OBJC_IVAR____TtC7Journal36JournalEntryCollectionViewPrefetcher_viewModel;
    uint64_t v33 = *(void *)(v12 + 56);
    uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v31 = (void (**)(char *, uint64_t))(v12 - 8);
    uint64_t v32 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 40);
    unint64_t v23 = (v12 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    id v15 = v29;
    uint64_t v26 = a2;
    uint64_t v27 = v12;
    id v30 = v10;
    while (1)
    {
      v36(v10, v14, v5);
      uint64_t v16 = *v35;
      (*v35)(v10, 0, 1, v5);
      if ((*v34)(v10, 1, v5) == 1) {
        goto LABEL_16;
      }
      (*v32)(v15, v10, v5);
      dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)();
      if (v39 != 255)
      {
        id v17 = v37;
        id v18 = v38;
        if (v39 == 2)
        {
          id v19 = objc_retain(*(id *)(*(void *)(v28 + v25)
                                  + OBJC_IVAR____TtCC7Journal10Journaling18EntryListViewModel_context));
          id v20 = [v19 objectWithID:v17, v23, v24];
          sub_1000D7EA0(v17, v18, 2);

          type metadata accessor for JournalEntryMO();
          if (swift_dynamicCastClass())
          {
            id v15 = v29;
            (*v31)(v29, v5);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            id v10 = v30;
            if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {

            id v15 = v29;
            (*v31)(v29, v5);
            id v10 = v30;
          }
          goto LABEL_5;
        }
        sub_1000D7EA0(v37, v38, v39);
        id v10 = v30;
      }
      (*v31)(v15, v5);
LABEL_5:
      v14 += v33;
      if (!--v11)
      {
        v16(v10, 1, 1, v5);
        goto LABEL_16;
      }
    }
  }
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  swift_bridgeObjectRetain();
  v21(v10, 1, 1, v5);
LABEL_16:
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t sub_1000D9930()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D9980(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002C194;
  return sub_1000D8E70(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000D9A48(uint64_t a1)
{
  uint64_t v2 = sub_100010218(&qword_1007FA1D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D9AA8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D9AE0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10002C194;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10080A8F0 + dword_10080A8F0);
  return v6(a1, v4);
}

uint64_t *sub_1000D9B98(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100010218(&qword_1007FD6E0);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    uint64_t v9 = a3[8];
    id v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    sub_100010218(&qword_1007FD6E8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ControlSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000D9D54(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FD6E0);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v5(a1 + a2[7], v4);
  uint64_t v6 = a1 + a2[8];
  sub_100010218(&qword_1007FD6E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ControlSize();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_1000D9EA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100010218(&qword_1007FD6E0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v8 = a3[8];
  uint64_t v9 = (void *)(a1 + v8);
  id v10 = (void *)(a2 + v8);
  sub_100010218(&qword_1007FD6E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ControlSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000DA010(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100010218(&qword_1007FD6E0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  if (a1 != a2)
  {
    uint64_t v8 = a3[8];
    uint64_t v9 = (void *)(a1 + v8);
    id v10 = (void *)(a2 + v8);
    sub_10001457C(a1 + v8, &qword_1007FD6E8);
    sub_100010218(&qword_1007FD6E8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for ControlSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000DA194(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100010218(&qword_1007FD6E0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v8 = a3[8];
  uint64_t v9 = (void *)(a1 + v8);
  id v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_100010218(&qword_1007FD6E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ControlSize();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000DA308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100010218(&qword_1007FD6E0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  if (a1 != a2)
  {
    uint64_t v8 = a3[8];
    uint64_t v9 = (void *)(a1 + v8);
    id v10 = (const void *)(a2 + v8);
    sub_10001457C(a1 + v8, &qword_1007FD6E8);
    uint64_t v11 = sub_100010218(&qword_1007FD6E8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for ControlSize();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000DA494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DA4A8);
}

uint64_t sub_1000DA4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010218(&qword_1007FD6E0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_100010218(&qword_1007FD6F0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000DA5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DA5BC);
}

uint64_t sub_1000DA5BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100010218(&qword_1007FD6E0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_100010218(&qword_1007FD6F0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 32);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for CircularDownloadProgressViewStyle()
{
  uint64_t result = qword_1007FD750;
  if (!qword_1007FD750) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000DA714()
{
  sub_1000DA7E0();
  if (v0 <= 0x3F)
  {
    sub_1000DA890();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000DA7E0()
{
  if (!qword_1007FD760)
  {
    sub_1000DA83C();
    unint64_t v0 = type metadata accessor for ScaledMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007FD760);
    }
  }
}

unint64_t sub_1000DA83C()
{
  unint64_t result = qword_1007FD768;
  if (!qword_1007FD768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD768);
  }
  return result;
}

void sub_1000DA890()
{
  if (!qword_1007FD770)
  {
    type metadata accessor for ControlSize();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007FD770);
    }
  }
}

uint64_t sub_1000DA8E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DA904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100010218(&qword_1007FD7B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100010218(&qword_1007FD7B8);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100010218(&qword_1007FD7C0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v7 = static Alignment.center.getter();
  v7[1] = v16;
  uint64_t v17 = sub_100010218(&qword_1007FD7C8);
  sub_1000DAB88(a1, v2, (uint64_t)v7 + *(int *)(v17 + 44));
  sub_1000DB6E4();
  sub_1000DB6E4();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10001B220((uint64_t)v7, (uint64_t)v11, &qword_1007FD7B0);
  id v18 = &v11[*(int *)(v9 + 44)];
  long long v19 = v31[1];
  *(_OWORD *)id v18 = v31[0];
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v31[2];
  sub_10001457C((uint64_t)v7, &qword_1007FD7B0);
  sub_1000DB6E4();
  char v20 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_10001B220((uint64_t)v11, (uint64_t)v15, &qword_1007FD7B8);
  uint64_t v29 = &v15[*(int *)(v13 + 44)];
  *uint64_t v29 = v20;
  *((void *)v29 + 1) = v22;
  *((void *)v29 + 2) = v24;
  *((void *)v29 + 3) = v26;
  *((void *)v29 + 4) = v28;
  v29[40] = 0;
  sub_10001457C((uint64_t)v11, &qword_1007FD7B8);
  sub_10001B220((uint64_t)v15, a2, &qword_1007FD7C0);
  *(unsigned char *)(a2 + *(int *)(sub_100010218(&qword_1007FD7D0) + 36)) = 1;
  return sub_10001457C((uint64_t)v15, &qword_1007FD7C0);
}

uint64_t sub_1000DAB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v88 = a3;
  uint64_t v87 = sub_100010218(&qword_1007FD7D8);
  __chkstk_darwin(v87);
  uint64_t v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for TintShapeStyle();
  uint64_t v6 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218(&qword_1007FD7E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100010218(&qword_1007FD7E8);
  __chkstk_darwin(v78);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100010218(&qword_1007FD7F0);
  __chkstk_darwin(v79);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v82 = (uint64_t)&v75 - v17;
  uint64_t v84 = sub_100010218(&qword_1007FD7F8);
  __chkstk_darwin(v84);
  uint64_t v85 = (uint64_t)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100010218(&qword_1007FD800);
  uint64_t v19 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = a1;
  uint64_t v22 = ProgressViewStyleConfiguration.fractionCompleted.getter();
  if (v23)
  {
    sub_1000DB6E4();
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v61 = v103;
    uint64_t v62 = v105;
    uint64_t v63 = v106;
    uint64_t v64 = v107;
    uint64_t v65 = static Alignment.center.getter();
    long long v89 = xmmword_1006D9570;
    uint64_t v90 = v61;
    uint64_t v91 = v104;
    uint64_t v92 = v62;
    unint64_t v93 = v63;
    uint64_t v94 = v64;
    LOWORD(v95) = 256;
    uint64_t v96 = v65;
    uint64_t v97 = v66;
    v98 = &off_1007932F8;
    uint64_t v67 = sub_100010218(&qword_1007FD808);
    uint64_t v68 = sub_100010218(&qword_1007FD810);
    uint64_t v83 = sub_100010218(&qword_1007FD818);
    uint64_t v69 = sub_100014488(&qword_1007FD820, &qword_1007FD808);
    uint64_t v70 = sub_100014488(&qword_1007FD828, &qword_1007FD810);
    unint64_t v74 = sub_1000DB8C0();
    uint64_t v71 = v19;
    uint64_t v72 = v68;
    View.phaseAnimator<A, B, C>(_:content:animation:)();
    sub_1000DB960((uint64_t)&v103);
    uint64_t v73 = v86;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v85, v21, v86);
    swift_storeEnumTagMultiPayload();
    sub_100014488(&qword_1007FD848, &qword_1007FD7D8);
    *(void *)&long long v89 = v67;
    *((void *)&v89 + 1) = &type metadata for Double;
    uint64_t v90 = v72;
    uint64_t v91 = v83;
    uint64_t v92 = v69;
    unint64_t v93 = &protocol witness table for Double;
    uint64_t v94 = v70;
    unint64_t v95 = v74;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v21, v73);
  }
  else
  {
    uint64_t v24 = v22;
    sub_1000DB6E4();
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v25 = v98;
    uint64_t v26 = v100;
    uint64_t v77 = v101;
    uint64_t v27 = v102;
    uint64_t v76 = static Alignment.center.getter();
    uint64_t v75 = v28;
    TintShapeStyle.init()();
    sub_1000DB6E4();
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v29 = v103;
    uint64_t v30 = v105;
    uint64_t v31 = v106;
    uint64_t v32 = v107;
    uint64_t v33 = sub_100010218(&qword_1007FD850);
    uint64_t v34 = v104;
    uint64_t v35 = v99;
    uint64_t v36 = v80;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(&v11[*(int *)(v33 + 52)], v8, v80);
    *(void *)uint64_t v11 = 0;
    *((void *)v11 + 1) = v24;
    *((void *)v11 + 2) = v29;
    *((void *)v11 + 3) = v34;
    *((void *)v11 + 4) = v30;
    *((void *)v11 + 5) = v31;
    *((void *)v11 + 6) = v32;
    *(_WORD *)&v11[*(int *)(v33 + 56)] = 256;
    uint64_t v37 = static Alignment.center.getter();
    uint64_t v39 = v38;
    unint64_t v40 = (uint64_t *)&v11[*(int *)(sub_100010218(&qword_1007FD858) + 36)];
    *unint64_t v40 = v37;
    v40[1] = v39;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v36);
    static UnitPoint.center.getter();
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    sub_10001B220((uint64_t)v11, (uint64_t)v13, &qword_1007FD7E0);
    unint64_t v45 = &v13[*(int *)(v78 + 36)];
    *(void *)unint64_t v45 = 0xBFF921FB54442D18;
    *((void *)v45 + 1) = v42;
    *((void *)v45 + 2) = v44;
    sub_10001457C((uint64_t)v11, &qword_1007FD7E0);
    uint64_t v46 = static Animation.linear.getter();
    uint64_t v47 = ProgressViewStyleConfiguration.fractionCompleted.getter();
    char v49 = v48;
    sub_10001B220((uint64_t)v13, (uint64_t)v15, &qword_1007FD7E8);
    id v50 = &v15[*(int *)(v79 + 36)];
    *(void *)id v50 = v46;
    *((void *)v50 + 1) = v47;
    v50[16] = v49 & 1;
    sub_10001457C((uint64_t)v13, &qword_1007FD7E8);
    uint64_t v51 = v82;
    sub_1000DB98C((uint64_t)v15, v82);
    sub_10001B220(v51, (uint64_t)v15, &qword_1007FD7F0);
    *(void *)uint64_t v5 = v25;
    *((void *)v5 + 1) = v35;
    *((void *)v5 + 2) = v26;
    *((void *)v5 + 3) = v77;
    *((void *)v5 + 4) = v27;
    *((_WORD *)v5 + 2sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 256;
    uint64_t v52 = v75;
    *((void *)v5 + 6) = v76;
    *((void *)v5 + 7) = v52;
    uint64_t v53 = sub_100010218(&qword_1007FD860);
    sub_10001B220((uint64_t)v15, (uint64_t)&v5[*(int *)(v53 + 48)], &qword_1007FD7F0);
    swift_bridgeObjectRetain();
    sub_10001457C((uint64_t)v15, &qword_1007FD7F0);
    swift_bridgeObjectRelease();
    sub_10001B220((uint64_t)v5, v85, &qword_1007FD7D8);
    swift_storeEnumTagMultiPayload();
    sub_100014488(&qword_1007FD848, &qword_1007FD7D8);
    uint64_t v54 = sub_100014440(&qword_1007FD808);
    uint64_t v55 = sub_100014440(&qword_1007FD810);
    uint64_t v56 = sub_100014440(&qword_1007FD818);
    uint64_t v57 = sub_100014488(&qword_1007FD820, &qword_1007FD808);
    uint64_t v58 = sub_100014488(&qword_1007FD828, &qword_1007FD810);
    unint64_t v59 = sub_1000DB8C0();
    *(void *)&long long v89 = v54;
    *((void *)&v89 + 1) = &type metadata for Double;
    uint64_t v90 = v55;
    uint64_t v91 = v56;
    uint64_t v92 = v57;
    unint64_t v93 = &protocol witness table for Double;
    uint64_t v94 = v58;
    unint64_t v95 = v59;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    sub_10001457C((uint64_t)v5, &qword_1007FD7D8);
    return sub_10001457C(v51, &qword_1007FD7F0);
  }
}

uint64_t sub_1000DB5F4@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = *a2 * 0.0174532925;
  static UnitPoint.center.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_100010218(&qword_1007FD840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a3, a1, v10);
  uint64_t result = sub_100010218(&qword_1007FD818);
  uint64_t v12 = a3 + *(int *)(result + 36);
  *(double *)uint64_t v12 = v5;
  *(void *)(v12 + 8) = v7;
  *(void *)(v12 + 16) = v9;
  return result;
}

uint64_t sub_1000DB6A0()
{
  static Animation.linear(duration:)();
  uint64_t v0 = Animation.repeatForever(autoreverses:)();
  swift_release();
  return v0;
}

double sub_1000DB6E4()
{
  uint64_t v0 = type metadata accessor for ControlSize();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CircularDownloadProgressViewStyle();
  sub_100666918((uint64_t)v3);
  int v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  BOOL v5 = v4 == enum case for ControlSize.mini(_:) || v4 == enum case for ControlSize.small(_:);
  if (v5
    || v4 == enum case for ControlSize.regular(_:)
    || v4 == enum case for ControlSize.large(_:)
    || v4 == enum case for ControlSize.extraLarge(_:))
  {
    sub_100010218(&qword_1007FD6E0);
    ScaledMetric.wrappedValue.getter();
    return v9;
  }
  else
  {
    sub_100010218(&qword_1007FD6E0);
    ScaledMetric.wrappedValue.getter();
    double v6 = v9;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

unint64_t sub_1000DB8C0()
{
  unint64_t result = qword_1007FD830;
  if (!qword_1007FD830)
  {
    sub_100014440(&qword_1007FD818);
    sub_100014488(&qword_1007FD838, &qword_1007FD840);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD830);
  }
  return result;
}

uint64_t sub_1000DB960(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DB98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FD7F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000DB9F8()
{
  unint64_t result = qword_1007FD868;
  if (!qword_1007FD868)
  {
    sub_100014440(&qword_1007FD7D0);
    sub_1000DBA74();
    sub_1000DBB90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD868);
  }
  return result;
}

unint64_t sub_1000DBA74()
{
  unint64_t result = qword_1007FD870;
  if (!qword_1007FD870)
  {
    sub_100014440(&qword_1007FD7C0);
    sub_1000DBAF0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD870);
  }
  return result;
}

unint64_t sub_1000DBAF0()
{
  unint64_t result = qword_1007FD878;
  if (!qword_1007FD878)
  {
    sub_100014440(&qword_1007FD7B8);
    sub_100014488(&qword_1007FD880, &qword_1007FD7B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD878);
  }
  return result;
}

unint64_t sub_1000DBB90()
{
  unint64_t result = qword_1007FD888;
  if (!qword_1007FD888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD888);
  }
  return result;
}

Swift::Int sub_1000DBBE4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DBC38()
{
  return String.hash(into:)();
}

Swift::Int sub_1000DBC50()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DBCA0@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100793328, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1000DBCF4(void *a1@<X8>)
{
  *a1 = 0x73656572676564;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1000DBD10()
{
  return 0x73656572676564;
}

uint64_t sub_1000DBD28@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100793360, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_1000DBD80(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000DBD8C(uint64_t a1)
{
  unint64_t v2 = sub_1000DBF40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DBDC8(uint64_t a1)
{
  unint64_t v2 = sub_1000DBF40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Angle.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010218(&qword_1007FD890);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_1000DBF40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1000DBF40()
{
  unint64_t result = qword_1007FD898;
  if (!qword_1007FD898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD898);
  }
  return result;
}

double Angle.init(from:)(void *a1)
{
  return sub_1000DCA98(a1);
}

void sub_1000DBFAC(void *a1@<X0>, double *a2@<X8>)
{
  double v4 = sub_1000DCA98(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1000DBFD8(void *a1)
{
  uint64_t v2 = sub_100010218(&qword_1007FD890);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_1000DBF40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000DC114(unsigned __int8 *a1, char *a2)
{
  return sub_10017BF5C(*a1, *a2);
}

Swift::Int sub_1000DC120()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DC1E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000DC290()
{
  return Hasher._finalize()();
}

unint64_t sub_1000DC350@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000DD0A0(*a1);
  *a2 = result;
  return result;
}

void sub_1000DC380(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 6579570;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6E65657267;
      goto LABEL_3;
    case 2:
      *a1 = 1702194274;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6168706C61;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1000DC404()
{
  uint64_t result = 6579570;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E65657267;
      break;
    case 2:
      uint64_t result = 1702194274;
      break;
    case 3:
      uint64_t result = 0x6168706C61;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000DC47C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000DD0A0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000DC4A4(uint64_t a1)
{
  unint64_t v2 = sub_1000DCC10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DC4E0(uint64_t a1)
{
  unint64_t v2 = sub_1000DCC10();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000DC51C()
{
  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_100088B50();
  swift_retain();
  uint64_t v0 = (void *)UIColor.init(_:)();
  [v0 getRed:&v5 green:&v4 blue:&v3 alpha:&v2];

  return v5;
}

uint64_t Color.init(from:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v15 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  double v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100010218(&qword_1007FD8A0);
  uint64_t v6 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)sub_10002E0BC(a1, a1[3]);
  sub_1000DCC10();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v14 = v5;
    uint64_t v11 = v15;
    uint64_t v10 = v16;
    char v20 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v19 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v18 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v17 = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for Color.RGBColorSpace.sRGB(_:), v3);
    uint64_t v9 = Color.init(_:red:green:blue:opacity:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v10);
  }
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t Color.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010218(&qword_1007FD8B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_1000DCC10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000DC51C();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v11 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000DCA50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Color.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000DCA7C(void *a1)
{
  return Color.encode(to:)(a1);
}

double sub_1000DCA98(void *a1)
{
  uint64_t v4 = sub_100010218(qword_1007FD8E8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_1000DBF40();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v9 * 0.0174532925;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1000DCC10()
{
  unint64_t result = qword_1007FD8A8;
  if (!qword_1007FD8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8A8);
  }
  return result;
}

unsigned char *_s10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DCD30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

uint64_t getEnumTagSinglePayload for CanvasGridView.Section(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000DCE58);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

unint64_t sub_1000DCE94()
{
  unint64_t result = qword_1007FD8B8;
  if (!qword_1007FD8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8B8);
  }
  return result;
}

unint64_t sub_1000DCEEC()
{
  unint64_t result = qword_1007FD8C0;
  if (!qword_1007FD8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8C0);
  }
  return result;
}

unint64_t sub_1000DCF44()
{
  unint64_t result = qword_1007FD8C8;
  if (!qword_1007FD8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8C8);
  }
  return result;
}

unint64_t sub_1000DCF9C()
{
  unint64_t result = qword_1007FD8D0;
  if (!qword_1007FD8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8D0);
  }
  return result;
}

unint64_t sub_1000DCFF4()
{
  unint64_t result = qword_1007FD8D8;
  if (!qword_1007FD8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8D8);
  }
  return result;
}

unint64_t sub_1000DD04C()
{
  unint64_t result = qword_1007FD8E0;
  if (!qword_1007FD8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD8E0);
  }
  return result;
}

unint64_t sub_1000DD0A0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100793398, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t Node.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t Node.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*Node.value.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t Node.next.getter()
{
  return swift_retain();
}

uint64_t Node.next.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 96));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*Node.next.modify())()
{
  return j__swift_endAccess;
}

uint64_t Node.previous.getter()
{
  return swift_weakLoadStrong();
}

uint64_t Node.previous.setter()
{
  return swift_release();
}

void (*Node.previous.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = *(void *)(*(void *)v1 + 104);
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return sub_1000DD51C;
}

void sub_1000DD51C(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t Node.isLinked.getter()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 96));
  swift_beginAccess();
  if (!*v1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    swift_release();
  }
  return 1;
}

uint64_t Node.__allocating_init(value:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Node.init(value:)(a1);
  return v2;
}

uint64_t *Node.init(value:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 96)) = 0;
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 88), a1);
  return v1;
}

uint64_t Node.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  swift_weakDestroy();
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(v0 + v1);
  *(void *)(v0 + v1) = 0;
  if (v2)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v3 = *(void *)(v2 + *(void *)(*(void *)v2 + 96));
      swift_retain();
      swift_release();
      uint64_t v2 = v3;
    }
    while (v3);
  }
  swift_release();
  return v0;
}

uint64_t Node.__deallocating_deinit()
{
  Node.deinit();

  return swift_deallocClassInstance();
}

uint64_t DoublyLinkedList.head.getter()
{
  return swift_retain();
}

uint64_t DoublyLinkedList.tail.getter()
{
  return swift_retain();
}

uint64_t DoublyLinkedList.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t DoublyLinkedList.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  return result;
}

uint64_t DoublyLinkedList.prepend(node:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  if (*(void *)(v1 + 16))
  {
    swift_beginAccess();
    swift_weakAssign();
    uint64_t v4 = *v3;
    uint64_t v5 = (void *)(a1 + *(void *)(*(void *)a1 + 96));
    swift_beginAccess();
    *uint64_t v5 = v4;
    swift_retain();
    swift_release();
    swift_beginAccess();
    swift_weakAssign();
    *uint64_t v3 = a1;
  }
  else
  {
    *(void *)(v1 + 16) = a1;
    swift_beginAccess();
    *(void *)(v1 + 24) = a1;
    swift_retain();
  }
  swift_release();
  return swift_retain();
}

uint64_t DoublyLinkedList.append(node:)(uint64_t a1)
{
  swift_beginAccess();
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = (void *)(v1 + 24);
    swift_beginAccess();
    swift_beginAccess();
    swift_weakAssign();
    uint64_t v4 = *(void *)(v1 + 24);
    if (v4)
    {
      uint64_t v5 = (void *)(v4 + *(void *)(*(void *)v4 + 96));
      swift_beginAccess();
      *uint64_t v5 = a1;
      swift_retain();
      swift_release();
      swift_retain();
      swift_release();
    }
    *uint64_t v3 = a1;
  }
  else
  {
    *(void *)(v1 + 16) = a1;
    swift_beginAccess();
    *(void *)(v1 + 24) = a1;
    swift_retain();
  }
  swift_release();
  return swift_retain();
}

uint64_t DoublyLinkedList.remove(node:)(uint64_t *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(uint64_t **)(v1 + 16);
  uint64_t v4 = *a1;
  if (v3) {
    BOOL v5 = v3 == a1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v10 = (uint64_t *)((char *)a1 + *(void *)(v4 + 96));
    swift_beginAccess();
    uint64_t v11 = *v10;
    if (v11)
    {
      *(void *)(v1 + 16) = v11;
      swift_retain_n();
      swift_release();
      swift_beginAccess();
      swift_weakAssign();
    }
    else
    {
      *(void *)(v1 + 16) = 0;
      swift_release();
      swift_beginAccess();
      *(void *)(v1 + 24) = 0;
    }
    goto LABEL_15;
  }
  unsigned int v6 = (uint64_t *)((char *)a1 + *(void *)(v4 + 96));
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*v6)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      double v9 = (void *)(Strong + *(void *)(*(void *)Strong + 96));
      swift_beginAccess();
      *double v9 = v7;
      swift_retain_n();
      swift_release();
      swift_release();
      if (!*v6)
      {
LABEL_15:
        swift_release();
        goto LABEL_16;
      }
    }
    else
    {
      swift_retain();
      if (!*v6) {
        goto LABEL_15;
      }
    }
    swift_weakLoadStrong();
    swift_retain();
    swift_release();
    swift_beginAccess();
    swift_weakAssign();
    swift_release();
    goto LABEL_15;
  }
  swift_beginAccess();
  uint64_t v12 = swift_weakLoadStrong();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = (void *)(v12 + *(void *)(*(void *)v12 + 96));
    swift_beginAccess();
    *uint64_t v14 = 0;
    swift_release();
    swift_beginAccess();
    *(void *)(v1 + 24) = v13;
    goto LABEL_15;
  }
LABEL_16:
  swift_beginAccess();
  swift_weakAssign();
  uint64_t v15 = (uint64_t *)((char *)a1 + *(void *)(*a1 + 96));
  swift_beginAccess();
  *uint64_t v15 = 0;
  return swift_release();
}

Swift::Void __swiftcall DoublyLinkedList.removeAll()()
{
  swift_beginAccess();
  while (*(void *)(v0 + 16))
  {
    uint64_t v1 = (uint64_t *)swift_retain();
    DoublyLinkedList.remove(node:)(v1);
    swift_release();
  }
}

uint64_t DoublyLinkedList.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t DoublyLinkedList.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000DE000()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Node()
{
  return sub_100073C20();
}

uint64_t sub_1000DE0C0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DoublyLinkedList()
{
  return sub_100073C20();
}

unsigned char *storeEnumTagSinglePayload for CanvasContentInputType.KeyboardFocus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DE1ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasContentInputType.KeyboardFocus()
{
  return &type metadata for CanvasContentInputType.KeyboardFocus;
}

uint64_t getEnumTagSinglePayload for CanvasContentInputType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7B) {
    goto LABEL_17;
  }
  if (a2 + 133 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 133) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 133;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 133;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 133;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 5) & 0xFFFFFF87 | (8 * ((*a1 >> 1) & 0xF))) ^ 0x7F;
  if (v6 >= 0x7A) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for CanvasContentInputType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 133 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 133) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7B) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7A)
  {
    unsigned int v6 = ((a2 - 123) >> 8) + 1;
    *uint64_t result = a2 - 123;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DE39CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_1000DE3C4(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0x3F) {
    return v1 >> 5;
  }
  else {
    return (v1 | 0xFFFFFFFE) + 2 * (v1 >> 5);
  }
}

unsigned char *sub_1000DE3E0(unsigned char *result)
{
  *result &= 0x1Fu;
  return result;
}

unsigned char *sub_1000DE3F0(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    *uint64_t result = *result & 1 | (32 * a2);
  }
  else {
    *uint64_t result = (a2 & 1 | (32 * (a2 >> 1))) + 32;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasContentInputType()
{
  return &type metadata for CanvasContentInputType;
}

void sub_1000DE434(uint64_t a1, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 1:
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(a2 & 1);
      return;
    case 2:
      if (a2 == 64) {
        Swift::UInt v3 = 1;
      }
      else {
        Swift::UInt v3 = 2;
      }
      goto LABEL_14;
    case 3:
      if (a2 == 96) {
        Swift::UInt v3 = 3;
      }
      else {
        Swift::UInt v3 = 4;
      }
      goto LABEL_14;
    case 4:
      if (a2 == 128) {
        Swift::UInt v3 = 6;
      }
      else {
        Swift::UInt v3 = 7;
      }
      goto LABEL_14;
    case 5:
      Swift::UInt v3 = 8;
      goto LABEL_14;
    default:
      Hasher._combine(_:)(0);
      Swift::UInt v3 = a2 & 1;
LABEL_14:
      Hasher._combine(_:)(v3);
      return;
  }
}

Swift::Int sub_1000DE518()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000DE434((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000DE560(uint64_t a1)
{
  sub_1000DE434(a1, *v1);
}

Swift::Int sub_1000DE568()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000DE434((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000DE5AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000DE668(*a1, *a2);
}

unint64_t sub_1000DE5BC()
{
  unint64_t result = qword_1007FD9F0;
  if (!qword_1007FD9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD9F0);
  }
  return result;
}

unint64_t sub_1000DE614()
{
  unint64_t result = qword_1007FD9F8;
  if (!qword_1007FD9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD9F8);
  }
  return result;
}

uint64_t sub_1000DE668(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1 >> 5)
  {
    case 1:
      if ((a2 & 0xE0) != 0x20) {
        return 0;
      }
      return (((a1 & 1) == 0) ^ a2) & 1;
    case 2:
      if (a1 == 64) {
        return a2 == 64;
      }
      return a2 == 65;
    case 3:
      if (a1 == 96)
      {
        if (a2 == 96) {
          return 1;
        }
      }
      else if (a2 == 97)
      {
        return 1;
      }
      return 0;
    case 4:
      if (a1 == 128) {
        return a2 == 128;
      }
      return a2 == 129;
    case 5:
      return a2 == 160;
    default:
      if (a2 >= 0x20u) {
        return 0;
      }
      return ((a2 ^ a1) & 1) == 0;
  }
}

uint64_t sub_1000DE760(void *a1)
{
  uint64_t v3 = sub_100010218(&qword_1007FDB30);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_1000E0A3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    _s12ContactAssetC11ContactDataVMa(0);
    char v12 = 1;
    type metadata accessor for Date();
    sub_1000E025C(&qword_1007F99F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v10 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000DE9C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v3 - 8);
  uint64_t v29 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = sub_100010218(&qword_1007FDB20);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  char v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (int *)_s12ContactAssetC11ContactDataVMa(0);
  __chkstk_darwin(v11);
  char v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002E0BC(a1, a1[3]);
  sub_1000E0A3C();
  uint64_t v14 = v10;
  uint64_t v15 = (uint64_t)v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)a1);
  }
  uint64_t v32 = a1;
  uint64_t v16 = v30;
  char v37 = 0;
  uint64_t *v13 = KeyedDecodingContainer.decode(_:forKey:)();
  v13[1] = v17;
  type metadata accessor for Date();
  char v36 = 1;
  sub_1000E025C(&qword_10080E9D0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10002C4EC((uint64_t)v7, (uint64_t)v13 + v11[5], (uint64_t *)&unk_1007FC470);
  char v35 = 2;
  uint64_t v18 = (uint64_t)v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10002C4EC(v18, (uint64_t)v13 + v11[6], (uint64_t *)&unk_1007FC470);
  char v34 = 3;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v20 = (char *)v13 + v11[7];
  *(void *)char v20 = v19;
  v20[8] = v21 & 1;
  char v33 = 4;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v24 = v23;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v31);
  uint64_t v25 = (char *)v13 + v11[8];
  *(void *)uint64_t v25 = v22;
  v25[8] = v24 & 1;
  sub_1000E0A90((uint64_t)v13, v28);
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v32);
  return sub_1000E0AF4((uint64_t)v13);
}

unint64_t sub_1000DEE24()
{
  unint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D69547472617473;
      break;
    case 2:
      unint64_t result = 0x656D6954646E65;
      break;
    case 3:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000DEED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E02A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000DEEF8(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000DEF04(uint64_t a1)
{
  unint64_t v2 = sub_1000E0A3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEF40(uint64_t a1)
{
  unint64_t v2 = sub_1000E0A3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEF7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DE9C0(a1, a2);
}

uint64_t sub_1000DEF94(void *a1)
{
  return sub_1000DE760(a1);
}

uint64_t sub_1000DEFAC()
{
  uint64_t v1 = sub_100010218(&qword_1007F9EE0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = _s12ContactAssetC11ContactDataVMa(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling12ContactAsset_metadata))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v3, 1, 1, v4, v6);
    goto LABEL_5;
  }
  swift_retain();
  sub_10003C084((uint64_t)v3);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
LABEL_5:
    sub_10001457C((uint64_t)v3, &qword_1007F9EE0);
    return 0;
  }
  sub_1000E09D4((uint64_t)v3, (uint64_t)v8, _s12ContactAssetC11ContactDataVMa);
  uint64_t v9 = *v8;
  swift_bridgeObjectRetain();
  sub_1000E0AF4((uint64_t)v8);
  return v9;
}

uint64_t sub_1000DF160()
{
  return swift_release();
}

id sub_1000DF170()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s12ContactAssetCMa(0);
  return [super dealloc];
}

uint64_t sub_1000DF1B8()
{
  return _s12ContactAssetCMa(0);
}

uint64_t _s12ContactAssetCMa(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FDA28);
}

uint64_t sub_1000DF1E0()
{
  return swift_updateClassMetadata2();
}

uint64_t *sub_1000DF224(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    char v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      uint64_t v19 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    uint64_t v20 = a3[7];
    uint64_t v21 = a3[8];
    uint64_t v22 = (char *)v4 + v20;
    char v23 = (char *)a2 + v20;
    *(void *)uint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    char v24 = (char *)v4 + v21;
    uint64_t v25 = (char *)a2 + v21;
    *(void *)char v24 = *(void *)v25;
    v24[8] = v25[8];
  }
  return v4;
}

uint64_t sub_1000DF478(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v5 - 8);
  __n128 v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v5);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

void *sub_1000DF5A0(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  if (v12(&a2[v14], 1, v10))
  {
    uint64_t v17 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)a1 + v18;
  uint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = (char *)a1 + v19;
  char v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  return a1;
}

char *sub_1000DF7A4(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[7];
  uint64_t v22 = &a1[v21];
  char v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)uint64_t v22 = v24;
  uint64_t v25 = a3[8];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  return a1;
}

_OWORD *sub_1000DFA78(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  int v19 = (char *)a1 + v17;
  uint64_t v20 = &a2[v17];
  *(void *)int v19 = *(void *)v20;
  v19[8] = v20[8];
  uint64_t v21 = (char *)a1 + v18;
  uint64_t v22 = &a2[v18];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  return a1;
}

char *sub_1000DFC74(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = (char *)a2 + v16;
  int v19 = v12(&a1[v16], 1, v10);
  int v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  uint64_t v22 = a3[7];
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = (char *)a2 + v22;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  uint64_t v26 = &a1[v23];
  uint64_t v27 = (char *)a2 + v23;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

uint64_t sub_1000DFF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DFF48);
}

uint64_t sub_1000DFF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000DFFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E0010);
}

uint64_t sub_1000E0010(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _s12ContactAssetC11ContactDataVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FDA90);
}

void sub_1000E00DC()
{
  sub_100033618();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000E0180()
{
  return swift_retain();
}

uint64_t sub_1000E0190(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling12ContactAsset_metadata) = a1;
  return swift_release();
}

uint64_t sub_1000E01A8()
{
  return sub_1000DEFAC();
}

uint64_t sub_1000E01CC()
{
  return sub_1000E025C(&qword_1007F9EE8, (void (*)(uint64_t))_s12ContactAssetC11ContactDataVMa);
}

uint64_t sub_1000E0214()
{
  return sub_1000E025C(&qword_1007FDAD8, (void (*)(uint64_t))_s12ContactAssetC11ContactDataVMa);
}

uint64_t sub_1000E025C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E02A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010068B440)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

char *sub_1000E04BC(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned __int8 a10)
{
  int v55 = a8;
  uint64_t v54 = a7;
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  LODWORD(v47) = a1;
  int v53 = a10;
  uint64_t v52 = a9;
  uint64_t v56 = sub_100010218(&qword_1007F9ED0);
  __chkstk_darwin(v56);
  uint64_t v57 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)_s12ContactAssetC11ContactDataVMa(0);
  __chkstk_darwin(v12);
  int v14 = (uint64_t *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for AssetAttachment.AssetType(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v45 - v23;
  UUID.init()();
  uint64_t v25 = (char *)objc_allocWithZone((Class)_s12ContactAssetCMa(0));
  *(void *)&v25[OBJC_IVAR____TtCC7Journal10Journaling12ContactAsset_metadata] = 0;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v24, v18);
  uint64_t v26 = a4;
  uint64_t v27 = (char *)sub_1001817C4((uint64_t)v21, 11, (char)v47);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v24, v18);
  if (v26)
  {
    *uint64_t v17 = v26;
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = v27;
    id v47 = v26;
    UUID.init()();
    uint64_t v29 = UUID.uuidString.getter();
    uint64_t v31 = v30;
    v28(v24, v18);
    type metadata accessor for AssetAttachment(0);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = 0;
    sub_1000E09D4((uint64_t)v17, v32 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType, type metadata accessor for AssetAttachment.AssetType);
    char v33 = (uint64_t *)(v32 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
    uint64_t *v33 = v29;
    v33[1] = v31;
    char v34 = &v46[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v34 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    char v35 = v27;
  }
  uint64_t v37 = v49;
  uint64_t v36 = v50;
  *int v14 = v48;
  v14[1] = v37;
  sub_10002C4EC(v36, (uint64_t)v14 + v12[5], (uint64_t *)&unk_1007FC470);
  sub_10002C4EC(v51, (uint64_t)v14 + v12[6], (uint64_t *)&unk_1007FC470);
  uint64_t v38 = (char *)v14 + v12[7];
  *(void *)uint64_t v38 = v54;
  v38[8] = v55 & 1;
  uint64_t v39 = (char *)v14 + v12[8];
  *(void *)uint64_t v39 = v52;
  v39[8] = v53 & 1;
  uint64_t v40 = v57;
  sub_1000E09D4((uint64_t)v14, v57, _s12ContactAssetC11ContactDataVMa);
  swift_storeEnumTagMultiPayload();
  sub_100010218(&qword_1007FDB18);
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = v41 + *(void *)(*(void *)v41 + 104);
  uint64_t v43 = sub_100010218(&qword_1007F9EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
  *(_OWORD *)(v41 + *(void *)(*(void *)v41 + 112)) = xmmword_1006D6A80;
  sub_10002C4EC(v40, v41 + *(void *)(*(void *)v41 + 120), &qword_1007F9ED0);
  *(void *)&v27[OBJC_IVAR____TtCC7Journal10Journaling12ContactAsset_metadata] = v41;

  swift_release();
  return v27;
}

uint64_t sub_1000E09D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000E0A3C()
{
  unint64_t result = qword_1007FDB28;
  if (!qword_1007FDB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FDB28);
  }
  return result;
}

uint64_t sub_1000E0A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s12ContactAssetC11ContactDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E0AF4(uint64_t a1)
{
  uint64_t v2 = _s12ContactAssetC11ContactDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *_s12ContactAssetC11ContactDataV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E0C1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *_s12ContactAssetC11ContactDataV10CodingKeysOMa()
{
  return &_s12ContactAssetC11ContactDataV10CodingKeysON;
}

unint64_t sub_1000E0C58()
{
  unint64_t result = qword_1007FDB38;
  if (!qword_1007FDB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FDB38);
  }
  return result;
}

unint64_t sub_1000E0CB0()
{
  unint64_t result = qword_1007FDB40;
  if (!qword_1007FDB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FDB40);
  }
  return result;
}

unint64_t sub_1000E0D08()
{
  unint64_t result = qword_1007FDB48;
  if (!qword_1007FDB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FDB48);
  }
  return result;
}

id sub_1000E0D5C(char a1)
{
  uint64_t v3 = sub_100010218(&qword_1007F9770);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v24 - v7;
  id v9 = [objc_allocWithZone(v1) initWithFrame:0.0, 0.0, 0.0, 0.0];
  if (a1)
  {
    uint64_t v15 = self;
    id v16 = v9;
    v13.super.Class isa = (Class)[v15 whiteColor];
    int v14 = &selRef_configurationWithHierarchicalColor_;
  }
  else
  {
    sub_100010218((uint64_t *)&unk_1007FA1C0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1006D6D10;
    uint64_t v11 = self;
    id v12 = v9;
    *(void *)(v10 + 32) = [v11 whiteColor];
    *(void *)(v10 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = [v11 systemIndigoColor];
    v24[1] = v10;
    specialized Array._endMutation()();
    sub_10001B284(0, (unint64_t *)&qword_1007FC140);
    v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    int v14 = &selRef_configurationWithPaletteColors_;
  }
  id v17 = [self *v14 v13.super.isa];

  UIButton.configuration.getter();
  uint64_t v18 = type metadata accessor for UIButton.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v8, 1, v18))
  {
    sub_1000E1C10((uint64_t)v8, (uint64_t)v5);
    UIButton.configuration.setter();

    sub_1000E1C78((uint64_t)v8);
  }
  else
  {
    uint64_t v19 = self;
    id v20 = v17;
    id v21 = [v19 configurationWithTextStyle:UIFontTextStyleTitle2 scale:3];
    id v22 = [v20 configurationByApplyingConfiguration:v21];

    UIButton.Configuration.preferredSymbolConfigurationForImage.setter();
    UIButton.configuration.setter();
  }
  return v9;
}

id sub_1000E1050(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100010218(&qword_1007F9770);
  __chkstk_darwin(v15 - 8);
  uint64_t v54 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  int v53 = (char *)&v48 - v18;
  __chkstk_darwin(v19);
  id v21 = (char *)&v48 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v48 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v48 - v26;
  v4[OBJC_IVAR____TtC7Journal14PlaybackButton_isPlaying] = 0;
  uint64_t v28 = (objc_class *)type metadata accessor for PlaybackButton();
  v57.receiver = v4;
  v57.super_class = v28;
  id v29 = [super initWithFrame:a1, a2, a3, a4];
  static UIButton.Configuration.plain()();
  uint64_t v30 = type metadata accessor for UIButton.Configuration();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
  UIButton.configuration.setter();
  id v32 = v29;
  UIButton.configuration.getter();
  int v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v55(v24, 1, v30))
  {
    sub_1000E1C10((uint64_t)v24, (uint64_t)v27);
    UIButton.configuration.setter();

    sub_1000E1C78((uint64_t)v24);
  }
  else
  {
    UIButton.Configuration.contentInsets.setter();
    UIButton.configuration.setter();
  }
  id v33 = v32;
  UIButton.configuration.getter();
  if (v55(v21, 1, v30))
  {
    sub_1000E1C10((uint64_t)v21, (uint64_t)v27);
    UIButton.configuration.setter();

    sub_1000E1C78((uint64_t)v21);
  }
  else
  {
    id v34 = [self clearColor];
    uint64_t v35 = UIButton.Configuration.background.modify();
    uint64_t v49 = v14;
    uint64_t v36 = v12;
    uint64_t v37 = v11;
    uint64_t v38 = (void (*)(char *, void))v35;
    UIBackgroundConfiguration.backgroundColor.setter();
    v38(v56, 0);
    uint64_t v11 = v37;
    uint64_t v12 = v36;
    int v14 = v49;
    UIButton.configuration.setter();
  }
  id v39 = v33;
  uint64_t v40 = (uint64_t)v53;
  UIButton.configuration.getter();
  unsigned int v41 = v55((char *)v40, 1, v30);
  uint64_t v42 = (uint64_t)v54;
  if (v41)
  {
    sub_1000E1C10(v40, (uint64_t)v27);
    UIButton.configuration.setter();

    sub_1000E1C78(v40);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v11);
    UIButton.Configuration.cornerStyle.setter();
    UIButton.configuration.setter();
  }
  id v43 = v39;
  UIButton.configuration.getter();
  if (v55((char *)v42, 1, v30))
  {
    sub_1000E1C10(v42, (uint64_t)v27);
    UIButton.configuration.setter();

    sub_1000E1C78(v42);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v51 + 104))(v50, enum case for UIButton.Configuration.Size.large(_:), v52);
    UIButton.Configuration.buttonSize.setter();
    UIButton.configuration.setter();
  }
  [v43 setMaximumContentSizeCategory:UIContentSizeCategoryLarge];
  [v43 setContentHorizontalAlignment:3];
  [v43 setContentVerticalAlignment:3];
  id v44 = [v43 heightAnchor];
  id v45 = [v43 widthAnchor];
  id v46 = [v44 constraintEqualToAnchor:v45];

  [v46 setActive:1];
  return v43;
}

uint64_t sub_1000E1724()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007F9770);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)aBlock - v6;
  UIButton.configuration.getter();
  uint64_t v8 = OBJC_IVAR____TtC7Journal14PlaybackButton_isPlaying;
  uint64_t v9 = type metadata accessor for UIButton.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [self systemImageNamed:v10];

    UIButton.Configuration.image.setter();
  }
  sub_1000E1C10((uint64_t)v7, (uint64_t)v4);
  UIButton.configuration.setter();
  if (*((unsigned char *)v0 + v8) == 1)
  {
    if (qword_1007F7AA8 == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (qword_1007F7AC0 != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  [v1 setAccessibilityLabel:v12];

  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v14 = objc_allocWithZone((Class)UIAccessibilityCustomAction);
  swift_retain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_1000E1D10;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005D2A64;
  aBlock[3] = &unk_10079A060;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = [v14 initWithName:v15 actionHandler:v16];

  _Block_release(v16);
  swift_release();
  swift_release();
  sub_100010218((uint64_t *)&unk_1007FA1C0);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1006D6D00;
  *(void *)(v18 + 32) = v17;
  aBlock[0] = v18;
  specialized Array._endMutation()();
  sub_10001B284(0, (unint64_t *)&unk_10080C360);
  id v19 = v17;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 setAccessibilityCustomActions:isa];

  return sub_1000E1C78((uint64_t)v7);
}

BOOL sub_1000E1B04()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v1 = Strong;
  if (Strong)
  {
    [Strong sendActionsForControlEvents:64];
  }
  return v1 != 0;
}

id sub_1000E1BB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlaybackButton();
  [super dealloc];
}

uint64_t type metadata accessor for PlaybackButton()
{
  return self;
}

uint64_t sub_1000E1C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007F9770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E1C78(uint64_t a1)
{
  uint64_t v2 = sub_100010218(&qword_1007F9770);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E1CD8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

BOOL sub_1000E1D10()
{
  return sub_1000E1B04();
}

uint64_t sub_1000E1D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_1000E1D28()
{
  return swift_release();
}

uint64_t sub_1000E1D30()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FDB80);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FDB80);
  if (qword_1007F7DA8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083ECF8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000E1DF8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000E2818();
  }
  swift_beginAccess();
  uint64_t v2 = swift_unknownObjectWeakLoadStrong();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    sub_1000E412C();
  }
}

id sub_1000E1E78(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel;
  id v10 = objc_allocWithZone((Class)UILabel);
  id v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  uint64_t v12 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel;
  *(void *)&v11[v12] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v13 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView;
  *(void *)&v11[v13] = [objc_allocWithZone((Class)UIImageView) init];
  v11[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_previousSizeType] = 6;
  *(void *)&v11[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset] = 0;
  id v14 = &v11[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_latestImageRequestID];
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = &v11[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame];
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  unsigned char v16[32] = 1;

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for MotionActivityAssetView();
  [super initWithFrame:a1, a2, a3, a4];
  sub_1000E21C8();

  return v17;
}

id sub_1000E2028(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel;
  id v4 = objc_allocWithZone((Class)UILabel);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  uint64_t v6 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v7 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView;
  *(void *)&v5[v7] = [objc_allocWithZone((Class)UIImageView) init];
  v5[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_previousSizeType] = 6;
  *(void *)&v5[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset] = 0;
  uint64_t v8 = &v5[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_latestImageRequestID];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  id v10 = &v5[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame];
  *(_OWORD *)id v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;

  v15.receiver = v5;
  v15.super_class = (Class)type metadata accessor for MotionActivityAssetView();
  [super initWithCoder:a1];
  id v12 = v11;
  if (v11)
  {
    id v13 = v11;
    sub_1000E21C8();
  }
  return v12;
}

uint64_t sub_1000E21C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset);
  if (!v2) {
    goto LABEL_7;
  }
  id v3 = v2;
  id v4 = [v1 accessibilityLabel];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  sub_1000FDE64(v6, v8);
  uint64_t v10 = v9;

  swift_bridgeObjectRelease();
  if (v10)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_7:
    NSString v11 = 0;
  }
  [v1 setAccessibilityValue:v11];

  id v12 = sub_1000E2498();
  uint64_t v13 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel;
  id v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel);
  *(void *)((char *)v1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel) = v12;

  id v15 = sub_1000E25E0();
  uint64_t v16 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel;
  id v17 = *(void **)((char *)v1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel);
  *(void *)((char *)v1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel) = v15;

  uint64_t v18 = OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView;
  [v1 addSubview:*(void *)((char *)v1 + OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView)];
  [v1 addSubview:*(void *)((char *)v1 + v13)];
  [v1 addSubview:*(void *)((char *)v1 + v16)];
  uint64_t v19 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView;
  [v1 addSubview:*(void *)((char *)v1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView)];
  id v20 = *(id *)((char *)v1 + v13);

  id v21 = *(id *)((char *)v1 + v19);
  id v22 = *(id *)((char *)v1 + v16);

  id v23 = *(id *)((char *)v1 + v18);
  sub_1001DCF60(0.0);

  swift_bridgeObjectRelease();
  sub_1000E3E9C(1);
  id v24 = [*(id *)((char *)v1 + v19) setContentMode:1];
  (*(void (**)(id))((swift_isaMask & *v1) + 0x110))(v24);
  sub_100010218(&qword_1007FBD30);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1006D6280;
  *(void *)(v25 + 32) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v25 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = &protocol witness table for UITraitUserInterfaceStyle;
  UIView.registerForTraitChanges(_:action:)();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_1000E2498()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  if (qword_1007F72A0 != -1) {
    swift_once();
  }
  [v0 setFont:qword_10083D868];
  id v1 = [self labelColor];
  id v2 = [v1 colorWithAlphaComponent:0.6];

  [v0 setTextColor:v2];
  [v0 setTextAlignment:0];
  [v0 setLineBreakMode:4];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  return v0;
}

id sub_1000E25E0()
{
  id v0 = [objc_allocWithZone((Class)UILabel) init];
  if (qword_1007F7290 != -1) {
    swift_once();
  }
  [v0 setFont:qword_10083D858];
  id v1 = [self secondaryLabelColor];
  id v2 = [v1 colorWithAlphaComponent:0.4];

  [v0 setTextColor:v2];
  [v0 setLineBreakMode:4];
  [v0 setTextAlignment:0];
  [v0 setAdjustsFontForContentSizeCategory:1];
  [v0 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
  return v0;
}

void sub_1000E2724()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView);
  id v2 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v1) + 0x58);
  uint64_t v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType);
  id v4 = v1;
  v2(8, v3);

  sub_1000E2818();
}

void sub_1000E2818()
{
  id v1 = v0;
  uint64_t v2 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v59 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v59);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  id v17 = (char *)&v47 - v16;
  uint64_t v18 = *(void **)&v1[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset];
  if (v18)
  {
    uint64_t v52 = v15;
    uint64_t v53 = v6;
    uint64_t v54 = v12;
    uint64_t v56 = v14;
    objc_super v57 = v18;
    uint64_t v58 = v17;
    Date.init()();
    uint64_t v51 = OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType;
    uint64_t v19 = v1;
    switch(v1[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType])
    {
      case 5u:
        swift_bridgeObjectRelease();
        goto LABEL_8;
      default:
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20)
        {
LABEL_8:
          id v21 = v7;
          if (qword_1007F6A60 != -1) {
            swift_once();
          }
          id v22 = &qword_10083CF68;
        }
        else
        {
          id v21 = v7;
          if (qword_1007F6A58 != -1) {
            swift_once();
          }
          id v22 = &qword_10083CF60;
        }
        id v50 = (id)*v22;
        UUID.init()();
        id v23 = v10;
        id v24 = *(void (**)(char *))(v5 + 16);
        uint64_t v25 = v23;
        uint64_t v26 = v59;
        v24(v4);
        uint64_t v55 = v5;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v4, 0, 1, v26);
        uint64_t v27 = (uint64_t)&v19[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_latestImageRequestID];
        swift_beginAccess();
        sub_10001ACF4((uint64_t)v4, v27);
        swift_endAccess();
        id v28 = [v19 traitCollection];
        id v29 = [v28 userInterfaceStyle];

        BOOL v30 = 0;
        if (v29 != (id)1)
        {
          unint64_t v31 = *(void *)&v57[OBJC_IVAR____TtCC7Journal10Journaling5Asset_attachments];
          if (v31 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          BOOL v30 = v32 != 1;
        }
        BOOL v48 = v30;
        uint64_t v49 = v25;
        id v33 = v19;
        LODWORD(v51) = v19[v51];
        uint64_t v34 = v59;
        ((void (*)(char *, char *, uint64_t))v24)(v21, v25, v59);
        uint64_t v35 = v54;
        uint64_t v36 = v52;
        uint64_t v37 = v56;
        (*(void (**)(uint64_t, char *, uint64_t))(v54 + 16))(v52, v58, v56);
        uint64_t v38 = v55;
        unint64_t v39 = (*(unsigned __int8 *)(v55 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
        unint64_t v40 = (v53 + *(unsigned __int8 *)(v35 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        uint64_t v41 = swift_allocObject();
        *(void *)(v41 + 16) = v33;
        (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v41 + v39, v21, v34);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 32))(v41 + v40, v36, v37);
        uint64_t v42 = self;
        id v43 = v33;
        id v44 = [v42 currentTraitCollection];
        id v45 = v50;
        id v46 = v57;
        sub_10017D574(v51, v48, 0, v50, v44, (uint64_t)sub_1000E4C88, v41);

        swift_release();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v49, v34);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v58, v37);
        break;
    }
  }
}

uint64_t sub_1000E2E2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v32 = a1;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  __chkstk_darwin(v5);
  id v33 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v27 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B284(0, (unint64_t *)&qword_100805AB0);
  uint64_t v31 = static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v30, v10);
  uint64_t v15 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v7);
  unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v17 = (v12 + *(unsigned __int8 *)(v8 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v32;
  *(void *)(v18 + 16) = v14;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, v13, v10);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v27, v15);
  aBlock[4] = sub_1000E4EF8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017D530;
  aBlock[3] = &unk_10079A178;
  char v20 = _Block_copy(aBlock);
  id v21 = v19;
  swift_retain();
  id v22 = v33;
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = _swiftEmptyArrayStorage;
  sub_1000E4FD0((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010218(&qword_100804DB0);
  sub_10001B1BC();
  id v24 = v34;
  uint64_t v23 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v25 = (void *)v31;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
  swift_release();
  return swift_release();
}

void sub_1000E32D0(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v74 = a4;
  uint64_t v78 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  __chkstk_darwin(v5);
  uint64_t v71 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v69 - v8;
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  uint64_t v72 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v77 = (char *)&v69 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v73 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FEB40);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  id v24 = (char *)&v69 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v69 - v26;
  swift_beginAccess();
  uint64_t Strong = (unsigned char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v69 = a2;
    if (a2)
    {
      uint64_t v29 = Strong;
      (*(void (**)(char *, unsigned char *, uint64_t))(v14 + 16))(v27, v78, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
      uint64_t v78 = v29;
      uint64_t v30 = (uint64_t)&v29[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_latestImageRequestID];
      swift_beginAccess();
      sub_10001B220(v30, (uint64_t)v24, &qword_100800950);
      uint64_t v31 = (uint64_t)&v18[*(int *)(v16 + 48)];
      sub_10001B220((uint64_t)v27, (uint64_t)v18, &qword_100800950);
      sub_10001B220((uint64_t)v24, v31, &qword_100800950);
      uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      if (v32((uint64_t)v18, 1, v13) == 1)
      {
        id v33 = v69;
        id v34 = v69;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        if (v32(v31, 1, v13) == 1)
        {
          sub_10001457C((uint64_t)v18, &qword_100800950);
          goto LABEL_27;
        }
      }
      else
      {
        sub_10001B220((uint64_t)v18, (uint64_t)v21, &qword_100800950);
        if (v32(v31, 1, v13) != 1)
        {
          uint64_t v49 = v73;
          (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v73, v31, v13);
          sub_1000E4FD0((unint64_t *)&qword_1007FEB50, (void (*)(uint64_t))&type metadata accessor for UUID);
          id v50 = v69;
          id v51 = v69;
          char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v53 = *(void (**)(char *, uint64_t))(v14 + 8);
          v53(v49, v13);
          sub_10001457C((uint64_t)v24, &qword_100800950);
          sub_10001457C((uint64_t)v27, &qword_100800950);
          v53(v21, v13);
          id v33 = v50;
          sub_10001457C((uint64_t)v18, &qword_100800950);
          if (v52)
          {
LABEL_27:
            uint64_t v54 = v78;
            [*(id *)&v78[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView] setImage:v33, v69];
            swift_allocObject();
            swift_unknownObjectWeakInit();
            char v55 = 1;
            uint64_t v57 = v76;
            uint64_t v56 = (uint64_t)v77;
            uint64_t v58 = v75;
            switch(v54[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType])
            {
              case 5:
                break;
              default:
                char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
                break;
            }
            swift_retain_n();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v74, v57);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v56, 0, 1, v57);
            if (v55) {
              goto LABEL_30;
            }
            uint64_t v61 = v72;
            sub_10001B220(v56, v72, (uint64_t *)&unk_1007FC470);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v61, 1, v57) == 1)
            {
              sub_10001457C(v61, (uint64_t *)&unk_1007FC470);
            }
            else
            {
              uint64_t v62 = v70;
              (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v70, v61, v57);
              uint64_t v63 = v71;
              static Date.now.getter();
              Date.timeIntervalSince(_:)();
              double v65 = v64;
              uint64_t v66 = *(void (**)(char *, uint64_t))(v58 + 8);
              v66(v63, v57);
              v66(v62, v57);
              if (v65 < 0.1)
              {
LABEL_30:
                swift_beginAccess();
                uint64_t v59 = swift_unknownObjectWeakLoadStrong();
                if (v59)
                {
                  os_log_t v60 = (void *)v59;
                  sub_1000E3E9C(0);
                  swift_release_n();
                }
                else
                {
                  swift_release_n();
                }
                goto LABEL_37;
              }
            }
            static Animation.easeIn(duration:)();
            sub_10001B284(0, (unint64_t *)&qword_100802730);
            static UIView.animate(_:changes:completion:)();
            swift_release_n();
            swift_release();
LABEL_37:
            sub_10001457C(v56, (uint64_t *)&unk_1007FC470);
            swift_release();
            id v67 = v78;
            char v68 = v78[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading];
            v78[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading] = 1;
            if ((v68 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
            {
              id v47 = v67;
              sub_100491AF4();

LABEL_40:
              swift_unknownObjectRelease();
              return;
            }

            goto LABEL_42;
          }
LABEL_16:

LABEL_42:
          return;
        }
        id v42 = v69;
        id v43 = v69;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
        id v33 = v42;
      }
      sub_10001457C((uint64_t)v18, (uint64_t *)&unk_1007FEB40);
      goto LABEL_16;
    }
  }
  if (qword_1007F69C0 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100026A54(v35, (uint64_t)qword_1007FDB80);
  swift_retain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    unint64_t v39 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 138412290;
    swift_beginAccess();
    uint64_t v40 = swift_unknownObjectWeakLoadStrong();
    uint64_t v41 = v40;
    if (v40) {
      uint64_t v79 = v40;
    }
    else {
      uint64_t v79 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v39 = v41;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%@.getImage returned nil", v38, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  uint64_t v44 = swift_unknownObjectWeakLoadStrong();
  if (v44)
  {
    id v45 = (void *)v44;
    sub_1000E3E9C(1);
  }
  swift_beginAccess();
  uint64_t v46 = swift_unknownObjectWeakLoadStrong();
  if (v46)
  {
    id v47 = (id)v46;
    int v48 = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
    *(unsigned char *)(v46 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
    if (v48 == 1 || !swift_unknownObjectWeakLoadStrong())
    {

      return;
    }
    sub_100491AF4();
    goto LABEL_40;
  }
}

void sub_1000E3E44()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    sub_1000E3E9C(0);
  }
}

id sub_1000E3E9C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ColorResource();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v8 = [self clearColor];
  }
  else
  {
    sub_10001B284(0, (unint64_t *)&qword_1007FC140);
    if (qword_1007F7F20 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_100026A54(v4, (uint64_t)qword_10083EE80);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    id v8 = (id)UIColor.init(resource:)();
  }
  uint64_t v10 = v8;
  [v2 setBackgroundColor:v8];

  uint64_t v11 = *(char **)&v2[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset];
  if (v11)
  {
    unint64_t v12 = *(void *)&v11[OBJC_IVAR____TtCC7Journal10Journaling5Asset_attachments];
    if (v12 >> 62)
    {
      uint64_t v14 = v11;
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
      if (v15 == 1) {
        goto LABEL_9;
      }
    }
    else if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
LABEL_9:
      uint64_t v13 = 1;
      goto LABEL_12;
    }
  }
  uint64_t v13 = 0;
LABEL_12:
  [v2 setOverrideUserInterfaceStyle:v13];
  [*(id *)&v2[OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView] setHidden:(a1 & 1) == 0];
  if (a1) {
    double v16 = 0.0;
  }
  else {
    double v16 = 1.0;
  }
  [*(id *)&v2[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel] setAlpha:v16];
  [*(id *)&v2[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel] setAlpha:v16];
  return [*(id *)&v2[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView] setAlpha:v16];
}

uint64_t sub_1000E412C()
{
  id v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007F9D98);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset;
  uint64_t v11 = *(void *)&v0[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset];
  if (!v11 || !*(void *)(v11 + OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v4, 1, 1, v5, v7);
    return sub_10001457C((uint64_t)v4, &qword_1007F9D98);
  }
  swift_retain();
  sub_10003BA1C((uint64_t)v4);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10001457C((uint64_t)v4, &qword_1007F9D98);
  }
  sub_1000E4A70((uint64_t)v4, (uint64_t)v9);
  swift_bridgeObjectRetain();
  unint64_t v12 = *(void **)&v0[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel];
  NSString v13 = *(NSString *)&v0[v10];
  if (v13)
  {
    id v14 = v12;
    id v15 = v13;
    sub_1000FE14C();
    uint64_t v17 = v16;

    if (v17)
    {
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v13 = 0;
    }
  }
  else
  {
    id v19 = v12;
  }
  [v12 setText:v13];

  id v20 = *(id *)&v1[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel];
  NSString v21 = String._bridgeToObjectiveC()();
  [v20 setText:v21];

  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setAccessibilityLabel:v22];

  return sub_1000E4AD4((uint64_t)v9);
}

id sub_1000E43E4(uint64_t a1, double a2)
{
  [*(id *)(a1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_exerciseNameLabel) setAlpha:];
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_workoutDataLabel);

  return [v4 setAlpha:a2];
}

uint64_t sub_1000E444C(void *a1)
{
  if (!a1)
  {
    NSString v13 = *(void **)&v1[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView];
    id v14 = (double *)&v1[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame];
    if (v1[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame + 32])
    {
      [v13 frame];
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;
      double v22 = v21;
    }
    else
    {
      double v20 = v14[2];
      double v22 = v14[3];
      double v16 = *v14;
      double v18 = v14[1];
      id v23 = v13;
    }
    [v13 setFrame:v16, v18, v20, v22];

    unint64_t v12 = 0;
    goto LABEL_8;
  }
  uint64_t v3 = self;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000E4A40;
  *(void *)(v5 + 24) = v4;
  v25[4] = sub_10001AC84;
  v25[5] = v5;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  v25[2] = sub_1003F44E4;
  v25[3] = &unk_10079A0D8;
  uint64_t v6 = _Block_copy(v25);
  __n128 v7 = a1;
  uint64_t v8 = v1;
  swift_retain();
  swift_release();
  [(id)v3 performWithoutAnimation:v6];
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v3 & 1) == 0)
  {
    uint64_t v10 = *(void **)&v7[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView];
    id v11 = *(id *)&v8[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView];
    [v10 frame];
    [v11 setFrame:];

    unint64_t v12 = sub_1000E4A40;
LABEL_8:
    id v24 = &v1[OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame];
    *(_OWORD *)id v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[32] = 1;
    return sub_10001ABB8((uint64_t)v12);
  }
  __break(1u);
  return result;
}

void sub_1000E46CC(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView;
  id v3 = *(id *)(a1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionImageView);
  UIView.removeAllConstraints()();

  uint64_t v4 = *(void **)(a1 + v2);
  uint64_t v5 = (double *)(a1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame);
  id v15 = v4;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_naturalIconFrame + 32))
  {
    [v4 frame];
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
  }
  else
  {
    double v11 = v5[2];
    double v13 = v5[3];
    double v7 = *v5;
    double v9 = v5[1];
    id v14 = v4;
  }
  [v15 setFrame:v7, v9, v11, v13];
}

void *sub_1000E47A8()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_motionActivityAsset);
  id v2 = v1;
  return v1;
}

uint64_t sub_1000E47D8()
{
  return sub_10001457C(v0 + OBJC_IVAR____TtC7Journal23MotionActivityAssetView_latestImageRequestID, &qword_100800950);
}

id sub_1000E4844()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MotionActivityAssetView();
  [super dealloc];
}

uint64_t sub_1000E48F4()
{
  return type metadata accessor for MotionActivityAssetView();
}

uint64_t type metadata accessor for MotionActivityAssetView()
{
  uint64_t result = qword_1007FDBF8;
  if (!qword_1007FDBF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E4948()
{
  sub_10001A7A4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000E4A08()
{
  return swift_deallocObject();
}

void sub_1000E4A40()
{
  sub_1000E46CC(*(void *)(v0 + 16));
}

uint64_t sub_1000E4A48()
{
  return swift_deallocObject();
}

uint64_t sub_1000E4A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_1000E4A68()
{
  return swift_release();
}

uint64_t sub_1000E4A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E4AD4(uint64_t a1)
{
  uint64_t v2 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E4B30()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_1000E4C88(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_1000E2E2C(a1, v7, v1 + v4, v8);
}

uint64_t sub_1000E4D60()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000E4D98()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

void sub_1000E4EF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  uint64_t v7 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_1000E32D0(v5, v6, (unsigned char *)(v0 + v2), v7);
}

void sub_1000E4FC8()
{
}

uint64_t sub_1000E4FD0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E5020()
{
  unint64_t v1 = (unint64_t)sub_1000E7370();
  id v2 = [v0 assetOrdering];
  if (!v2
    || (uint64_t v3 = v2,
        uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
        unint64_t v6 = v5,
        v3,
        uint64_t v7 = (void *)sub_1000400E0(),
        sub_100040DD0(v4, v6),
        !v7))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
  }
  if ((v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)sub_1000CCB2C(v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = v8;
  sub_1000F578C(&v11, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v11;
}

void *sub_1000E5138(unint64_t a1)
{
  return sub_1000E53EC(a1, (void (*)(void))type metadata accessor for MosaicCell);
}

void *sub_1000E5150(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  double v12 = _swiftEmptyArrayStorage;
  sub_100095B64(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_10001B648(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100095B64(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_100095B64(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = &v3[2 * v6];
      v7[4] = v9;
      v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *sub_1000E5298(uint64_t a1)
{
  return sub_1000E52C8(a1, type metadata accessor for CGColor);
}

void *sub_1000E52B0(uint64_t a1)
{
  return sub_1000E52C8(a1, (void (*)(void))type metadata accessor for JournalEntryAssetFileAttachmentMO);
}

void *sub_1000E52C8(uint64_t a1, void (*a2)(void))
{
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v4) {
    return v8;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_10001B648(i, (uint64_t)v7);
    a2(0);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v4) {
      return v8;
    }
  }
  swift_release();

  return 0;
}

void *sub_1000E53D4(unint64_t a1)
{
  return sub_1000E53EC(a1, (void (*)(void))type metadata accessor for FullScreenCollectionViewCell);
}

void *sub_1000E53EC(unint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v6 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        a2(0);
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = v3 + 32;
      while (1)
      {
        uint64_t v9 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        uint64_t v10 = *(void **)(v8 + 8 * v7);
        a2(0);
        uint64_t v11 = swift_dynamicCastClass();
        if (!v11)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v3 = v11;
        id v12 = v10;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v7;
        if (v9 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000E55D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FDC08);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FDC08);
  if (qword_1007F7D18 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EB48);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000E56A0()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_100035380(v0, qword_1007FDC20);
  sub_100026A54(v0, (uint64_t)qword_1007FDC20);
  return UUID.init()();
}

uint64_t sub_1000E56EC()
{
  uint64_t v1 = v0;
  unint64_t v2 = (unint64_t)sub_1000E5A0C();
  unint64_t v3 = v2;
  if (!(v2 >> 62))
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_22;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v5 = 0;
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v3 + 8 * i + 32);
    }
    uint64_t v8 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    _s15ReflectionAssetCMa();
    if (!swift_dynamicCastClass())
    {
      if ((*(uint64_t (**)(void))((swift_isaMask & *v8) + 0x200))())
      {
        uint64_t v7 = v8;
        uint64_t v8 = v5;
        unint64_t v5 = v7;
      }
      else if ((*((unsigned char *)v8 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_isHidden) & 1) == 0)
      {
        uint64_t v8 = v8;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v3 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v5)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = v5;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_26:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

LABEL_24:
  uint64_t v10 = (unint64_t *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assets);
  swift_beginAccess();
  unint64_t *v10 = v3;
  swift_bridgeObjectRelease();
  *(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsWithSlimAsset) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsAll);
  swift_beginAccess();
  *uint64_t v11 = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

void *sub_1000E5A0C()
{
  unint64_t v0 = sub_1000E5020();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      sub_10017E76C();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v4);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E5B40(uint64_t a1)
{
  uint64_t v2 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = sub_1000F678C((uint64_t)&off_100793418);
  PassthroughSubject.send(_:)();
  swift_bridgeObjectRelease();
  sub_10001B220(a1, (uint64_t)v4, &qword_100800950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_10001457C((uint64_t)v4, &qword_100800950);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v10 = [self defaultCenter];
  if (qword_1007F6E78 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_10083D400;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v10 postNotificationName:v11 object:isa];

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E5D84(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 168) = a2;
  *(void *)(v4 + 176) = v3;
  *(unsigned char *)(v4 + 30sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a3;
  *(void *)(v4 + 16sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a1;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v4 + 184) = v5;
  *(void *)(v4 + 192) = *(void *)(v5 - 8);
  *(void *)(v4 + 20sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = swift_task_alloc();
  return _swift_task_switch(sub_1000E5E4C, 0, 0);
}

uint64_t sub_1000E5E4C()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  char v3 = *(unsigned char *)(v0 + 300);
  uint64_t v4 = *(void **)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  *(void *)(v0 + 208) = *(void *)(*(void *)(v0 + 176) + 24);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 216) = v7;
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v5;
  *(unsigned char *)(v7 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v3 & 1;
  *(_DWORD *)(v0 + 296) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v8 = *(void (**)(uint64_t))(v2 + 104);
  *(void *)(v0 + 224) = v8;
  *(void *)(v0 + 232) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v8(v1);
  id v9 = v4;
  id v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 24sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v10;
  void *v10 = v0;
  v10[1] = sub_1000E5FC8;
  uint64_t v11 = *(void *)(v0 + 200);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_1000F7BB8, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1000E5FC8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 200);
  uint64_t v3 = *(void *)(*v0 + 192);
  uint64_t v4 = *(void *)(*v0 + 184);
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 248) = v5;
  *(void *)(v1 + 256) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  return _swift_task_switch(sub_1000E6150, 0, 0);
}

uint64_t sub_1000E6150()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10080CA58 + dword_10080CA58);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000E61F4;
  return v3();
}

uint64_t sub_1000E61F4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E62F0, 0, 0);
}

uint64_t sub_1000E62F0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  uint64_t v2 = *(unsigned int *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void **)(v0 + 160);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 272) = v6;
  *(void *)(v6 + 16) = v5;
  v1(v3, v2, v4);
  id v7 = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 28sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000E640C;
  uint64_t v9 = *(void *)(v0 + 200);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v8, v9, sub_1000F7C14, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1000E640C()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 248);
  uint64_t v3 = *(void *)(*(void *)v1 + 200);
  uint64_t v4 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  swift_release();
  v2(v3, v4);
  return _swift_task_switch(sub_1000E6594, 0, 0);
}

uint64_t sub_1000E6594()
{
  int v48 = v0;
  uint64_t v1 = (void **)(v0 + 20);
  uint64_t v2 = v0[20] + OBJC_IVAR____TtCC7Journal10Journaling5Asset_id;
  uint64_t v3 = (unint64_t *)(v0[22] + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsAll);
  swift_beginAccess();
  unint64_t v4 = *v3;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000E93D8((uint64_t (*)(id *))sub_1000F93DC, v5, v4);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  id v7 = &off_1007F6000;
  if (v6)
  {
    if (qword_1007F69C8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100026A54(v8, (uint64_t)qword_1007FDC08);
    id v9 = v6;
    swift_retain_n();
    id v10 = v9;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v45 = v2;
      uint64_t v13 = swift_slowAlloc();
      id v43 = (void *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      if (qword_1007F69D0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for UUID();
      sub_100026A54(v14, (uint64_t)qword_1007FDC20);
      sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[17] = sub_10011EA98(v15, v16, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2112;
      v0[18] = v10;
      id v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v43 = v6;

      *(_WORD *)(v13 + 22) = 2080;
      _s5AssetCMa();
      swift_bridgeObjectRetain();
      uint64_t v18 = Array.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      v0[19] = sub_10011EA98(v18, v20, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s (addAssetAsync) Asset already exists in self.assetsAll existingAsset:%@ self.assetsAll:%s", (uint8_t *)v13, 0x20u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v2 = v45;
      id v7 = &off_1007F6000;
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    double v21 = *v1;
    swift_beginAccess();
    id v22 = v21;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  id v23 = (unint64_t *)(v0[22] + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assets);
  swift_beginAccess();
  unint64_t v24 = *v23;
  uint64_t v25 = swift_task_alloc();
  *(void *)(v25 + 16) = v2;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1000E93D8((uint64_t (*)(id *))sub_1000F7C30, v25, v24);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v26)
  {
    if (v7[313] != (_UNKNOWN *)-1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100026A54(v27, (uint64_t)qword_1007FDC08);
    swift_retain_n();
    id v28 = v26;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      os_log_type_t v44 = v30;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315650;
      if (qword_1007F69D0 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for UUID();
      sub_100026A54(v32, (uint64_t)qword_1007FDC20);
      sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[14] = sub_10011EA98(v33, v34, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2112;
      v0[15] = v28;
      id v35 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v46 = v26;

      *(_WORD *)(v31 + 22) = 2080;
      _s5AssetCMa();
      swift_bridgeObjectRetain();
      uint64_t v36 = Array.description.getter();
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      v0[16] = sub_10011EA98(v36, v38, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v44, "%s (addAssetAsync) Asset already exists in self.assetsAll existingAsset:%@ self.assets:%s", (uint8_t *)v31, 0x20u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    unint64_t v39 = *v1;
    swift_beginAccess();
    id v40 = v39;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  swift_task_dealloc();
  uint64_t v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

void sub_1000E6E6C(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  int v61 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v15 = Strong;
    uint64_t v60 = v4;
    unint64_t v16 = a2;
    id v17 = *(id *)(Strong + 24);
    id v18 = sub_10017E214(v17);

    [*(id *)(v15 + 32) addAssetsObject:v18];
    id v19 = sub_1005E63B4();
    uint64_t v63 = v16;
    unint64_t v20 = &v16[OBJC_IVAR____TtCC7Journal10Journaling5Asset_attachmentsDirectoryPath];
    *(void *)unint64_t v20 = v19;
    *((void *)v20 + 1) = v21;
    swift_bridgeObjectRelease();
    id v59 = v18;
    sub_1005E63B4();
    if (v22)
    {
      type metadata accessor for Journaling();
      sub_1005E6B0C((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v13, 1, 1, v23);
    }
    id v24 = v63;
    uint64_t v25 = &v63[OBJC_IVAR____TtCC7Journal10Journaling5Asset_attachmentsDirectoryURL];
    swift_beginAccess();
    sub_100041190((uint64_t)v13, (uint64_t)v25, (uint64_t *)&unk_100800A60);
    swift_endAccess();
    swift_getObjectType();
    uint64_t v26 = swift_conformsToProtocol2();
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v26) {
      id v28 = v24;
    }
    else {
      id v28 = 0;
    }
    if (v28)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v30 = v15;
      uint64_t v31 = v10;
      uint64_t v32 = v8;
      uint64_t v33 = v7;
      uint64_t v34 = a3;
      id v35 = v63;
      uint64_t v36 = ObjectType;
      id v24 = v63;
      sub_10058D81C(v36, v27);

      a3 = v34;
      uint64_t v7 = v33;
      uint64_t v8 = v32;
      id v10 = v31;
      uint64_t v15 = v30;
    }
    swift_getObjectType();
    if (swift_conformsToProtocol2()) {
      id v37 = v24;
    }
    else {
      id v37 = 0;
    }
    if (v37)
    {
      id v38 = v24;
      sub_1000D19E4();
    }
    id v39 = [*(id *)(v15 + 32) assetOrdering];
    if (!v39) {
      goto LABEL_20;
    }
    id v40 = v39;
    uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    id v42 = v10;
    uint64_t v43 = v8;
    uint64_t v44 = v7;
    uint64_t v45 = a3;
    unint64_t v47 = v46;

    int v48 = (void *)sub_1000400E0();
    unint64_t v49 = v47;
    a3 = v45;
    uint64_t v7 = v44;
    uint64_t v8 = v43;
    id v10 = v42;
    id v24 = v63;
    sub_100040DD0(v41, v49);
    if (!v48)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      int v48 = &_swiftEmptyDictionarySingleton;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v24 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_id, v7);
    if (v61)
    {
      unint64_t v50 = (unint64_t)sub_1000E7370();
      if (v50 >> 62) {
        a3 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        a3 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v62 = v48;
    sub_100599628(a3, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    id v52 = *(id *)(v15 + 32);
    uint64_t v53 = sub_1000EF370();
    unint64_t v55 = v54;
    swift_bridgeObjectRelease();
    if (v55 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100040DBC(v53, v55);
    }
    [v52 setAssetOrdering:isa];

    id v57 = *(id *)(v15 + 32);
    [v57 setIsUploadedToCloud:0];
    swift_release();
  }
}

void *sub_1000E7370()
{
  id v1 = [v0 assets];
  if (!v1
    || (uint64_t v2 = v1,
        id v3 = [v1 allObjects],
        v2,
        uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v3,
        unint64_t v5 = (unint64_t)sub_1000E52C8(v4, (void (*)(void))type metadata accessor for JournalEntryAssetMO), result = (void *)swift_bridgeObjectRelease(), !v5))
  {
    if (qword_1007F69C8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100026A54(v11, (uint64_t)qword_1007FDC08);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      id v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      if (qword_1007F69D0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for UUID();
      sub_100026A54(v15, (uint64_t)qword_1007FDC20);
      sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_10011EA98(v16, v17, (uint64_t *)&v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s WARNING: JournalEntryMO assets is nil", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  id v18 = _swiftEmptyArrayStorage;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v7 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v5 + 8 * i + 32);
      }
      id v10 = v9;
      if (([v9 isRemovedFromCloud] & 1) != 0
        || ([v10 isUndoablyDeleted] & 1) != 0)
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return v18;
  }
  return result;
}

void sub_1000E7704()
{
  sub_10017F6A0();
  if (qword_1007F69C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100026A54(v0, (uint64_t)qword_1007FDC08);
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)id v3 = 136315138;
    if (qword_1007F69D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for UUID();
    sub_100026A54(v4, (uint64_t)qword_1007FDC20);
    sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_10011EA98(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s (addAssetAsync) Done adding asset to viewModel", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_1000E7908(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_100010218(&qword_100800950);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  if (qword_1007F7CE0 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10083EA18;
  v2[8] = qword_10083EA18;
  return _swift_task_switch(sub_1000E7A30, v4, 0);
}

uint64_t sub_1000E7A30()
{
  *(CFAbsoluteTime *)(v0 + 72) = CFAbsoluteTimeGetCurrent();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000E7AD4;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_1000E5D84(v2, 0, 1);
}

uint64_t sub_1000E7AD4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E7BD0, 0, 0);
}

uint64_t sub_1000E7BD0()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = swift_allocObject();
  v0[11] = v4;
  swift_weakInit();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000E7CF4;
  uint64_t v6 = v0[7];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v5, v6, sub_1000EFE40, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1000E7CF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  uint64_t v3 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1000E7E68, 0, 0);
}

uint64_t sub_1000E7E68()
{
  return _swift_task_switch(sub_1000E7E84, *(void *)(v0 + 64), 0);
}

uint64_t sub_1000E7E84()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (char *)v0[2];
  uint64_t v3 = &v2[OBJC_IVAR____TtCC7Journal10Journaling5Asset_id];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  sub_1000E5B40(v1);
  sub_10001457C(v1, &qword_100800950);
  sub_1000E7FC0(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void sub_1000E7FC0(void *a1)
{
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v2._object = (void *)0x800000010068B580;
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v2);
  id v3 = [a1 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x74657373615B2029;
  v8._object = (void *)0xEC000000203A6449;
  String.append(_:)(v8);
  type metadata accessor for UUID();
  sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  CFAbsoluteTimeGetCurrent();
  Double.write<A>(to:)();
  v11._countAndFlagsBits = 0x73646E6F63657320;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  if (qword_1007F69C8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100026A54(v12, (uint64_t)qword_1007FDC08);
  swift_bridgeObjectRetain();
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v16[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    sub_10011EA98(0, 0xE000000000000000, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1000E82D0(uint64_t a1@<X1>, char *a2@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    char v25 = 0;
LABEL_21:
    *a2 = v25;
    return;
  }
  uint64_t v5 = Strong;
  uint64_t v6 = a1 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_id;
  Swift::String v7 = (unint64_t *)(Strong + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsAll);
  uint64_t v8 = swift_beginAccess();
  unint64_t v9 = *v7;
  __chkstk_darwin(v8);
  v31[2] = v6;
  swift_bridgeObjectRetain();
  Swift::String v10 = (char *)sub_1000E93D8((uint64_t (*)(id *))sub_1000F93DC, (uint64_t)v31, v9);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    char v25 = 0;
LABEL_20:
    swift_release();
    goto LABEL_21;
  }
  Swift::String v11 = *(void **)&v10[OBJC_IVAR____TtCC7Journal10Journaling5Asset_assetMO];
  if (v11)
  {
    id v12 = v11;
    id v13 = [v12 entry];
    if (v13)
    {
      os_log_type_t v14 = v13;
      uint64_t v32 = a2;
      [v12 setIsUndoablyDeleted:1];
      id v15 = [v14 assetOrdering];
      if (!v15
        || (uint64_t v16 = v15,
            uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
            unint64_t v19 = v18,
            v16,
            unint64_t v20 = (void *)sub_1000400E0(),
            sub_100040DD0(v17, v19),
            !v20))
      {
        swift_bridgeObjectRelease();
        unint64_t v20 = &_swiftEmptyDictionarySingleton;
      }
      v31[5] = v20;
      sub_1000F20B8((uint64_t)&v10[OBJC_IVAR____TtCC7Journal10Journaling5Asset_id]);
      uint64_t v21 = sub_1000EF370();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      if (v23 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100040DBC(v21, v23);
      }
      a2 = v32;
      [v14 setAssetOrdering:isa];

      [v14 setIsUploadedToCloud:0];
    }
  }
  uint64_t v26 = (unint64_t *)(v5 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assets);
  swift_beginAccess();
  uint64_t v27 = v10;
  int64_t v28 = sub_1000F71D8(v26, (uint64_t)v27);

  if (!(*v26 >> 62))
  {
    uint64_t v29 = *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29 >= v28) {
      goto LABEL_17;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v30 >= (uint64_t)v26) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v29 < v28) {
    goto LABEL_23;
  }
LABEL_17:
  sub_1000F6DE0(v28, v29);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v27 = v27;
  uint64_t v26 = (unint64_t *)sub_1000F71D8(v7, (uint64_t)v27);

  if (*v7 >> 62) {
    goto LABEL_24;
  }
  uint64_t v30 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v30 >= (uint64_t)v26)
  {
LABEL_19:
    sub_1000F6DE0((uint64_t)v26, v30);
    swift_endAccess();

    char v25 = 1;
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

void sub_1000E86B0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v1 = *(id *)(Strong + 32);
    id v2 = [v1 assetOrdering];
    if (!v2
      || (id v3 = v2,
          uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
          unint64_t v6 = v5,
          v3,
          uint64_t v7 = sub_1000400E0(),
          sub_100040DD0(v4, v6),
          !v7))
    {
      swift_bridgeObjectRelease();
    }
    sub_1000F7514();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1000EF370();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    if (v10 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100040DBC(v8, v10);
    }
    [v1 setAssetOrdering:isa];
    swift_release();
  }
}

uint64_t sub_1000E8804()
{
  v1[17] = v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  sub_100010218((uint64_t *)&unk_1007FC470);
  v1[21] = swift_task_alloc();
  sub_100010218(&qword_100800950);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[24] = v3;
  v1[25] = *(void *)(v3 - 8);
  v1[26] = swift_task_alloc();
  return _swift_task_switch(sub_1000E8990, 0, 0);
}

uint64_t sub_1000E8990()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[17] + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_bundleId;
  swift_beginAccess();
  sub_10001B220(v4, v3, &qword_100800950);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001457C(v0[23], &qword_100800950);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[17];
  (*(void (**)(uint64_t, void, void))(v0[25] + 32))(v5, v0[23], v0[24]);
  uint64_t v7 = (unint64_t *)(v6 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsAll);
  swift_beginAccess();
  unint64_t v8 = *v7;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v5;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000E93D8((uint64_t (*)(id *))sub_1000F68D0, v9, v8);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  if (v10)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    goto LABEL_5;
  }
  uint64_t v13 = v0[21];
  uint64_t v14 = v0[22];
  uint64_t v15 = v0[19];
  uint64_t v23 = v0[20];
  uint64_t v16 = v0[17];
  uint64_t v22 = v0[18];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[25] + 56))(v14, 1, 1, v0[24]);
  swift_beginAccess();
  sub_100041190(v14, v4, &qword_100800950);
  swift_endAccess();
  uint64_t v17 = type metadata accessor for Date();
  unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v13, 1, 1, v17);
  uint64_t v19 = v16 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_bundleDate;
  swift_beginAccess();
  sub_100041190(v13, v19, (uint64_t *)&unk_1007FC470);
  swift_endAccess();
  v18(v13, 1, 1, v17);
  uint64_t v20 = v16 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_bundleEndDate;
  swift_beginAccess();
  sub_100041190(v13, v20, (uint64_t *)&unk_1007FC470);
  swift_endAccess();
  v0[27] = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v23, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v22);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[28] = v21;
  void *v21 = v0;
  v21[1] = sub_1000E8DB0;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1000E8DB0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  uint64_t v2 = *(void *)(*(void *)v0 + 152);
  uint64_t v3 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1000E8F24, 0, 0);
}

uint64_t sub_1000E8F24()
{
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000E8FCC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FEB40);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v11 - 8);
  uint64_t v31 = (uint64_t)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - v14;
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = *a1 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_suggestionId;
  swift_beginAccess();
  sub_10001B220(v19, (uint64_t)v18, &qword_100800950);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v15, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_10001B220((uint64_t)v18, (uint64_t)v10, &qword_100800950);
  sub_10001B220((uint64_t)v15, v20, &qword_100800950);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001457C((uint64_t)v15, &qword_100800950);
    sub_10001457C((uint64_t)v18, &qword_100800950);
    int v22 = v21(v20, 1, v4);
    if (v22 == 1) {
      uint64_t v23 = &qword_100800950;
    }
    else {
      uint64_t v23 = (uint64_t *)&unk_1007FEB40;
    }
    if (v22 == 1) {
      char v24 = -1;
    }
    else {
      char v24 = 0;
    }
  }
  else
  {
    uint64_t v25 = v31;
    sub_10001B220((uint64_t)v10, v31, &qword_100800950);
    if (v21(v20, 1, v4) == 1)
    {
      sub_10001457C((uint64_t)v15, &qword_100800950);
      sub_10001457C((uint64_t)v18, &qword_100800950);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v25, v4);
      char v24 = 0;
      uint64_t v23 = (uint64_t *)&unk_1007FEB40;
    }
    else
    {
      uint64_t v26 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v20, v4);
      sub_1000F9378((unint64_t *)&qword_1007FEB50, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v26, v4);
      uint64_t v23 = &qword_100800950;
      sub_10001457C((uint64_t)v15, &qword_100800950);
      sub_10001457C((uint64_t)v18, &qword_100800950);
      v27((char *)v25, v4);
    }
  }
  sub_10001457C((uint64_t)v10, v23);
  return v24 & 1;
}

void *sub_1000E93D8(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000E9500@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v25 = a1;
  uint64_t v22 = a3;
  uint64_t v28 = sub_100010218(&qword_1007FDD90);
  uint64_t v24 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218(&qword_1007FDD98);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218(&qword_1007FDDA0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007FDDA8);
  uint64_t v23 = *(void *)(v13 - 8);
  __n128 v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, v27, v9, v14);
  sub_100014488(&qword_1007FDDB0, &qword_1007FDDA0);
  dispatch thunk of Sequence.makeIterator()();
  sub_100014488(&qword_1007FDDB8, &qword_1007FDDA8);
  uint64_t v27 = v13;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v17(v8, 1, v28) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v27);
    uint64_t v19 = 1;
    uint64_t v20 = v22;
  }
  else
  {
    while (1)
    {
      sub_10002C4EC((uint64_t)v8, (uint64_t)v5, &qword_1007FDD90);
      char v18 = v25(v5);
      if (v3)
      {
        sub_10001457C((uint64_t)v5, &qword_1007FDD90);
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v27);
      }
      if (v18) {
        break;
      }
      sub_10001457C((uint64_t)v5, &qword_1007FDD90);
      dispatch thunk of IteratorProtocol.next()();
      if (v17(v8, 1, v28) == 1) {
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v27);
    uint64_t v20 = v22;
    sub_10002C4EC((uint64_t)v5, v22, &qword_1007FDD90);
    uint64_t v19 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v20, v19, 1, v28);
}

uint64_t sub_1000E9900()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void **)(result + 32);
    [v1 setBundleId:0];
    [v1 setBundleDate:0];
    [v1 setBundleEndDate:0];
    return swift_release();
  }
  return result;
}

uint64_t sub_1000E99A4(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  if (qword_1007F7CE0 != -1) {
    swift_once();
  }
  v2[10] = qword_10083EA18;
  return _swift_task_switch(sub_1000E9AA0, 0, 0);
}

uint64_t sub_1000E9AA0()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void **)(v0 + 40);
  *(void *)(v0 + 88) = *(void *)(*(void *)(v0 + 48) + 24);
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 96) = v5;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(_DWORD *)(v0 + 168) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v6 = *(void (**)(uint64_t))(v2 + 104);
  *(void *)(v0 + 104) = v6;
  *(void *)(v0 + 112) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v6(v1);
  id v7 = v3;
  id v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v8;
  *id v8 = v0;
  v8[1] = sub_1000E9C10;
  uint64_t v9 = *(void *)(v0 + 72);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 172, v9, sub_1000EFE24, v5, &type metadata for Bool);
}

uint64_t sub_1000E9C10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 72);
  uint64_t v3 = *(void *)(*v0 + 64);
  uint64_t v4 = *(void *)(*v0 + 56);
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 128) = v5;
  *(void *)(v1 + 136) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  return _swift_task_switch(sub_1000E9D98, 0, 0);
}

uint64_t sub_1000E9D98()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104);
  uint64_t v2 = *(unsigned int *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 144) = v5;
  swift_weakInit();
  v1(v3, v2, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000E9EB4;
  uint64_t v7 = *(void *)(v0 + 72);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v6, v7, sub_1000EFE40, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_1000E9EB4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 128);
  uint64_t v2 = *(void *)(*(void *)v0 + 72);
  uint64_t v3 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  swift_release();
  v1(v2, v3);
  return _swift_task_switch(sub_1000EA038, 0, 0);
}

uint64_t sub_1000EA038()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EA0C8;
  return sub_1000E8804();
}

uint64_t sub_1000EA0C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EA1D8, v1, 0);
}

uint64_t sub_1000EA1D8()
{
  uint64_t v17 = v0;
  v0[2] = sub_1000F678C((uint64_t)&off_100793440);
  PassthroughSubject.send(_:)();
  swift_bridgeObjectRelease();
  if (qword_1007F69C8 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100026A54(v2, (uint64_t)qword_1007FDC08);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[5];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t type = v5;
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    v0[3] = v7;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    *(_WORD *)(v8 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_10011EA98(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, type, "EntryViewModel.removeAsset(%@) [assetId: %s]", (uint8_t *)v8, 0x16u);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000EA4DC(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_100010218(&qword_100800950);
  v3[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  if (qword_1007F7CE0 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_10083EA18;
  v3[18] = qword_10083EA18;
  return _swift_task_switch(sub_1000EA608, v5, 0);
}

uint64_t sub_1000EA608()
{
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void **)(v0 + 88);
  *(void *)(v0 + 152) = *(void *)(v3 + 24);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 16sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  *(_DWORD *)(v0 + 28) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  BOOL v6 = *(void (**)(uint64_t))(v2 + 104);
  *(void *)(v0 + 168) = v6;
  *(void *)(v0 + 176) = (v2 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v6(v1);
  swift_retain();
  id v7 = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v8;
  uint64_t v9 = sub_100010218(&qword_1007FDC80);
  *uint64_t v8 = v0;
  v8[1] = sub_1000EA768;
  uint64_t v10 = *(void *)(v0 + 136);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, v10, sub_1000F7B40, v5, v9);
}

uint64_t sub_1000EA768()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 144);
  uint64_t v3 = *(void *)(*v0 + 136);
  uint64_t v4 = *(void *)(*v0 + 128);
  uint64_t v5 = *(void *)(*v0 + 120);
  swift_task_dealloc();
  swift_release();
  BOOL v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v1 + 192) = v6;
  *(void *)(v1 + 20sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  return _swift_task_switch(sub_1000EA904, v2, 0);
}

uint64_t sub_1000EA904()
{
  *(void *)(v0 + 208) = *(void *)(v0 + 16);
  *(unsigned char *)(v0 + 26) = *(unsigned char *)(v0 + 24);
  return _swift_task_switch(sub_1000EA930, 0, 0);
}

uint64_t sub_1000EA930()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  uint64_t v2 = *(unsigned int *)(v0 + 28);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void **)(v0 + 88);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 216) = v7;
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  v1(v3, v2, v4);
  id v8 = v5;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000EAA88;
  uint64_t v10 = *(void *)(v0 + 136);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 25, v10, sub_1000F93C4, v7, &type metadata for Bool);
}

uint64_t sub_1000EAA88()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 192);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  uint64_t v3 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  v1(v2, v3);
  return _swift_task_switch(sub_1000EAC0C, 0, 0);
}

uint64_t sub_1000EAC0C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  *(unsigned char *)(v0 + 27) = *(unsigned char *)(v0 + 25);
  return _swift_task_switch(sub_1000EAC30, v1, 0);
}

uint64_t sub_1000EAC30()
{
  if (*(unsigned char *)(v0 + 27) == 1)
  {
    char v1 = *(unsigned char *)(v0 + 26);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000EAF04;
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 96);
    return sub_1000E5D84(v4, v3, v1);
  }
  else
  {
    if (qword_1007F69C8 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void **)(v0 + 88);
    uint64_t v7 = *(void **)(v0 + 96);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100026A54(v8, (uint64_t)qword_1007FDC08);
    id v9 = v6;
    id v10 = v7;
    id v11 = v9;
    id v12 = v10;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v17 = *(void **)(v0 + 88);
    uint64_t v16 = *(void **)(v0 + 96);
    if (v15)
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v17;
      id v20 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v17;

      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v0 + 48) = v16;
      id v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v19[1] = v16;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "EntryViewModel.replaceAsset exiting early because remove failed. oldAsset=%@ newAsset=%@", (uint8_t *)v18, 0x16u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v23 = *(unsigned __int8 *)(v0 + 27);
    return v22(v23);
  }
}

uint64_t sub_1000EAF04()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EB000, 0, 0);
}

uint64_t sub_1000EB000()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  uint64_t v2 = *(unsigned int *)(v0 + 28);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 24sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v5;
  swift_weakInit();
  v1(v3, v2, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000EB120;
  uint64_t v7 = *(void *)(v0 + 136);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v6, v7, sub_1000EFE40, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_1000EB120()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 192);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  uint64_t v3 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  v1(v2, v3);
  return _swift_task_switch(sub_1000EB2A4, 0, 0);
}

uint64_t sub_1000EB2A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EB334;
  return sub_1000E8804();
}

uint64_t sub_1000EB334()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EB444, v1, 0);
}

uint64_t sub_1000EB444()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  *(void *)(v0 + 32) = sub_1000F678C((uint64_t)&off_100793468);
  PassthroughSubject.send(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  sub_1000E5B40(v1);
  sub_10001457C(v1, &qword_100800950);
  if (qword_1007F69C8 != -1) {
    swift_once();
  }
  uint64_t v6 = *(void **)(v0 + 88);
  uint64_t v7 = *(void **)(v0 + 96);
  uint64_t v8 = type metadata accessor for Logger();
  sub_100026A54(v8, (uint64_t)qword_1007FDC08);
  id v9 = v6;
  id v10 = v7;
  id v11 = v9;
  id v12 = v10;
  id v13 = v11;
  id v14 = v12;
  id v15 = v13;
  id v16 = v14;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  id v21 = *(void **)(v0 + 88);
  id v20 = *(void **)(v0 + 96);
  if (v19)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138413058;
    os_log_type_t type = v18;
    *(void *)(v0 + 64) = v21;
    id v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v33 = v21;

    *(_WORD *)(v22 + 12) = 2112;
    *(void *)(v0 + 72) = v20;
    id v24 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v33[1] = v20;

    *(_WORD *)(v22 + 22) = 2080;
    sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = sub_10011EA98(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v22 + 32) = 2080;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_10011EA98(v27, v28, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v17, type, "EntryViewModel.replaceAsset(old: %@, new: %@ [oldAssetId: %s, newAssetId: %s]", (uint8_t *)v22, 0x2Au);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v30 = *(unsigned __int8 *)(v0 + 27);
  return v29(v30);
}

uint64_t sub_1000EB8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = [*(id *)(a1 + 32) assetOrdering];
  if (v5
    && (uint64_t v6 = v5,
        uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
        unint64_t v9 = v8,
        v6,
        id v10 = (void *)sub_1000400E0(),
        sub_100040DD0(v7, v9),
        v10))
  {
    if (!v10[2]) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    id v10 = _swiftEmptyDictionarySingleton;
    if (!_swiftEmptyDictionarySingleton[2])
    {
LABEL_8:
      uint64_t v14 = 0;
      char v13 = 1;
      goto LABEL_9;
    }
  }
  unint64_t v11 = sub_10001BA38(a2 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_id);
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
  char v13 = 0;
  uint64_t v14 = *(void *)(v10[7] + 8 * v11);
LABEL_9:
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v14;
  *(unsigned char *)(a3 + 8) = v13;
  return result;
}

uint64_t sub_1000EB9E4(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for IndexSet();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = *(void *)(v6 + 64);
  v3[11] = swift_task_alloc();
  if (qword_1007F7CE0 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_10083EA18;
  v3[12] = qword_10083EA18;
  return _swift_task_switch(sub_1000EBB44, v7, 0);
}

uint64_t sub_1000EBB44()
{
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[7];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v9 = swift_allocObject();
  v0[13] = v9;
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v9 + v8, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v14, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v13);
  id v10 = (void *)swift_task_alloc();
  v0[14] = v10;
  void *v10 = v0;
  v10[1] = sub_1000EBCEC;
  uint64_t v11 = v0[7];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_1000F7D40, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_1000EBCEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  uint64_t v4 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1000EBE7C, v1, 0);
}

uint64_t sub_1000EBE7C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EBEE8(uint64_t a1, uint64_t a2)
{
  uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
  __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  uint64_t v48 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = (id *)result;
    uint64_t v8 = IndexSet.first.getter();
    uint64_t v39 = v2;
    if ((v9 & 1) == 0 && v8 < a2 && __OFADD__(a2, 1))
    {
      __break(1u);
LABEL_34:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      id v10 = (unint64_t *)((char *)v7 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assets);
      swift_beginAccess();
      sub_100010218(&qword_1007FDCB8);
      sub_100014488(&qword_1007FDCC0, &qword_1007FDCB8);
      MutableCollection.move(fromOffsets:toOffset:)();
      swift_endAccess();
      unint64_t v11 = *v10;
      if (v11 >> 62) {
        goto LABEL_27;
      }
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (uint64_t i = v7; v12; uint64_t i = v7)
      {
        unint64_t v44 = v11 & 0xC000000000000001;
        uint64_t v45 = (void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
        uint64_t v43 = (void (**)(uint64_t, uint64_t))(v40 + 8);
        uint64_t v13 = _swiftEmptyDictionarySingleton;
        uint64_t v14 = 4;
        uint64_t v41 = v12;
        unint64_t v42 = v11;
        while (1)
        {
          uint64_t v15 = v14 - 4;
          if (!v44) {
            break;
          }
          id v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v17 = v14 - 3;
          if (__OFADD__(v15, 1)) {
            goto LABEL_24;
          }
LABEL_15:
          uint64_t v46 = v17;
          os_log_type_t v18 = v16;
          uint64_t v7 = (id *)*v45;
          uint64_t v19 = v48;
          uint64_t v20 = isUniquelyReferenced_nonNull_native;
          (*v45)(v48, (uint64_t)&v16[OBJC_IVAR____TtCC7Journal10Journaling5Asset_id], isUniquelyReferenced_nonNull_native);
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          Swift::Int v47 = (Swift::Int)v13;
          unint64_t v11 = sub_10001BA38(v19);
          uint64_t v22 = v13[2];
          BOOL v23 = (v21 & 1) == 0;
          uint64_t v24 = v22 + v23;
          if (__OFADD__(v22, v23)) {
            goto LABEL_25;
          }
          char v25 = v21;
          if (v13[3] >= v24)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100549440();
            }
          }
          else
          {
            sub_100545420(v24, isUniquelyReferenced_nonNull_native);
            unint64_t v26 = sub_10001BA38(v48);
            if ((v25 & 1) != (v27 & 1)) {
              goto LABEL_34;
            }
            unint64_t v11 = v26;
          }
          uint64_t isUniquelyReferenced_nonNull_native = v20;
          uint64_t v13 = (void *)v47;
          if (v25)
          {
            *(void *)(*(void *)(v47 + 56) + 8 * v11) = v15;
          }
          else
          {
            *(void *)(v47 + 8 * (v11 >> 6) + 64) |= 1 << v11;
            ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v13[6] + *(void *)(v40 + 72) * v11, v48, v20);
            *(void *)(v13[7] + 8 * v11) = v15;
            uint64_t v28 = v13[2];
            BOOL v29 = __OFADD__(v28, 1);
            uint64_t v30 = v28 + 1;
            if (v29) {
              goto LABEL_26;
            }
            void v13[2] = v30;
          }
          swift_bridgeObjectRelease();
          (*v43)(v48, v20);

          ++v14;
          unint64_t v11 = v42;
          if (v46 == v41) {
            goto LABEL_28;
          }
        }
        id v16 = (char *)*(id *)(v11 + 8 * v14);
        uint64_t v17 = v14 - 3;
        if (!__OFADD__(v15, 1)) {
          goto LABEL_15;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain_n();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t v31 = i;
      id v32 = i[4];
      sub_1000F7514();
      swift_bridgeObjectRelease();
      uint64_t v33 = sub_1000EF370();
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      if (v35 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100040DBC(v33, v35);
      }
      [v32 setAssetOrdering:isa];

      [v31[4] setIsUploadedToCloud:0];
      Swift::Int v47 = sub_1000F678C((uint64_t)&off_100793490);
      PassthroughSubject.send(_:)();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1000EC3A8()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1000EC3E8(char *a1)
{
  uint64_t v81 = _s10VideoAssetC9VideoDataVMa(0);
  uint64_t v3 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v5 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218(&qword_1007F9E10);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v65 - v10;
  uint64_t v82 = _s14LivePhotoAssetC13LivePhotoDataVMa(0);
  uint64_t v12 = *(char **)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v72 = (uint64_t *)((char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100010218((uint64_t *)&unk_100804090);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v79 = (uint64_t)&v65 - v18;
  uint64_t v83 = _s10PhotoAssetC9PhotoDataVMa(0);
  uint64_t v19 = *(char **)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v73 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100010218((uint64_t *)&unk_100804080);
  __chkstk_darwin(v21 - 8);
  uint64_t v71 = (uint64_t)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v80 = (uint64_t)&v65 - v24;
  char v25 = (id **)(v1 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assetsAll);
  swift_beginAccess();
  unint64_t v26 = *v25;
  if ((unint64_t)*v25 >> 62)
  {
LABEL_80:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v27 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_81:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v27 = *(void *)(((unint64_t)v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v27) {
    goto LABEL_81;
  }
LABEL_3:
  unint64_t v88 = (unint64_t)v26 & 0xC000000000000001;
  char v68 = v16;
  if (((unint64_t)v26 & 0xC000000000000001) != 0)
  {
    BOOL v29 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)(((unint64_t)v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    BOOL v29 = (char *)v26[4];
  }
  id v16 = v29;
  uint64_t v87 = &a1[OBJC_IVAR____TtCC7Journal10Journaling5Asset_id];
  if (static UUID.== infix(_:_:)())
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return (uint64_t)v16;
  }
  id v69 = (uint64_t *)v5;
  uint64_t v30 = _s10PhotoAssetCMa(0);
  uint64_t v5 = 0;
  uint64_t v76 = (id *)(v12 + 48);
  uint64_t v77 = (id *)(v19 + 48);
  uint64_t v75 = v3 + 6;
  uint64_t v3 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v30;
  uint64_t v78 = (unint64_t)v26 & 0xFFFFFFFFFFFFFF8;
  uint64_t v86 = v27 - 1;
  uint64_t v67 = v8;
  uint64_t v74 = v11;
  uint64_t v84 = v26;
  uint64_t v85 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v30;
  while (1)
  {
    uint64_t v31 = swift_dynamicCastClass();
    if (v31)
    {
      uint64_t v12 = (char *)v31;
      uint64_t v32 = swift_dynamicCastClass();
      if (v32)
      {
        if (*(void *)&v12[OBJC_IVAR____TtCC7Journal10Journaling10PhotoAsset_metadata])
        {
          uint64_t v8 = v32;
          unint64_t v26 = v16;
          uint64_t v3 = a1;
          swift_retain();
          uint64_t v33 = v80;
          sub_1000395AC(v80);
          uint64_t v34 = v33;
          swift_release();
          uint64_t v19 = (char *)*v77;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v77)(v34, 1, v83))
          {

            sub_10001457C(v34, (uint64_t *)&unk_100804080);
            goto LABEL_26;
          }
          uint64_t v35 = v34;
          uint64_t v36 = v34;
          uint64_t v37 = (uint64_t)v73;
          sub_1000F92B0(v35, (uint64_t)v73, _s10PhotoAssetC9PhotoDataVMa);
          sub_10001457C(v36, (uint64_t *)&unk_100804080);
          uint64_t v38 = *(void *)(v37 + 8);
          uint64_t v70 = *(char **)v37;
          swift_bridgeObjectRetain();
          sub_1000F9318(v37, _s10PhotoAssetC9PhotoDataVMa);
          if (!v38) {
            goto LABEL_24;
          }
          if (!*(void *)(v8 + OBJC_IVAR____TtCC7Journal10Journaling10PhotoAsset_metadata))
          {
LABEL_23:
            swift_bridgeObjectRelease();
LABEL_24:

LABEL_25:
            unint64_t v11 = v74;
LABEL_26:
            unint64_t v26 = v84;
            uint64_t v3 = v85;
            goto LABEL_27;
          }
          swift_retain();
          uint64_t v8 = v71;
          sub_1000395AC(v71);
          swift_release();
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v19)(v8, 1, v83))
          {
            swift_bridgeObjectRelease();

            sub_10001457C(v8, (uint64_t *)&unk_100804080);
            goto LABEL_25;
          }
          uint64_t v19 = v73;
          sub_1000F92B0(v8, (uint64_t)v73, _s10PhotoAssetC9PhotoDataVMa);
          sub_10001457C(v8, (uint64_t *)&unk_100804080);
          uint64_t v8 = *(void *)v19;
          uint64_t v39 = *((void *)v19 + 1);
          swift_bridgeObjectRetain();
          sub_1000F9318((uint64_t)v19, _s10PhotoAssetC9PhotoDataVMa);
          if (!v39) {
            goto LABEL_23;
          }
          if (v70 == (char *)v8 && v38 == v39) {
            goto LABEL_73;
          }
          uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          unint64_t v11 = v74;
          unint64_t v26 = v84;
          uint64_t v3 = v85;
          if (v8) {
            goto LABEL_76;
          }
        }
      }
    }
LABEL_27:
    _s14LivePhotoAssetCMa(0);
    uint64_t v40 = swift_dynamicCastClass();
    if (v40)
    {
      uint64_t v12 = (char *)v40;
      uint64_t v41 = swift_dynamicCastClass();
      if (v41)
      {
        if (*(void *)&v12[OBJC_IVAR____TtCC7Journal10Journaling14LivePhotoAsset_metadata])
        {
          uint64_t v8 = v41;
          unint64_t v42 = a1;
          uint64_t v43 = v11;
          unint64_t v44 = v16;
          uint64_t v45 = v42;
          uint64_t v3 = v42;
          swift_retain();
          uint64_t v46 = v79;
          sub_1000398E0(v79);
          uint64_t v47 = v46;
          swift_release();
          uint64_t v19 = (char *)*v76;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v76)(v47, 1, v82))
          {

            sub_10001457C(v47, (uint64_t *)&unk_100804090);
            uint64_t v3 = v85;
            unint64_t v11 = v43;
LABEL_32:
            a1 = v45;
            unint64_t v26 = v84;
            goto LABEL_33;
          }
          uint64_t v70 = v44;
          uint64_t v54 = v47;
          uint64_t v55 = v47;
          uint64_t v56 = v72;
          sub_1000F92B0(v54, (uint64_t)v72, _s14LivePhotoAssetC13LivePhotoDataVMa);
          sub_10001457C(v55, (uint64_t *)&unk_100804090);
          uint64_t v57 = *v56;
          uint64_t v58 = v56[1];
          swift_bridgeObjectRetain();
          sub_1000F9318((uint64_t)v56, _s14LivePhotoAssetC13LivePhotoDataVMa);
          if (!v58)
          {

            unint64_t v11 = v74;
            uint64_t v3 = v85;
            goto LABEL_32;
          }
          uint64_t v66 = v57;
          a1 = v45;
          if (!*(void *)(v8 + OBJC_IVAR____TtCC7Journal10Journaling14LivePhotoAsset_metadata))
          {
            swift_bridgeObjectRelease();

            unint64_t v11 = v74;
            unint64_t v26 = v84;
            uint64_t v3 = v85;
            goto LABEL_33;
          }
          swift_retain();
          uint64_t v8 = (uint64_t)v68;
          sub_1000398E0((uint64_t)v68);
          swift_release();
          int v59 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v8, 1, v82);
          unint64_t v26 = v84;
          if (v59)
          {
            swift_bridgeObjectRelease();

            sub_10001457C(v8, (uint64_t *)&unk_100804090);
LABEL_51:
            unint64_t v11 = v74;
            uint64_t v3 = v85;
            goto LABEL_33;
          }
          uint64_t v19 = (char *)v72;
          sub_1000F92B0(v8, (uint64_t)v72, _s14LivePhotoAssetC13LivePhotoDataVMa);
          sub_10001457C(v8, (uint64_t *)&unk_100804090);
          uint64_t v8 = *(void *)v19;
          uint64_t v62 = *((void *)v19 + 1);
          swift_bridgeObjectRetain();
          sub_1000F9318((uint64_t)v19, _s14LivePhotoAssetC13LivePhotoDataVMa);
          if (!v62)
          {
            swift_bridgeObjectRelease();

            goto LABEL_51;
          }
          uint64_t v19 = v70;
          if (v66 == v8 && v58 == v62)
          {

            goto LABEL_75;
          }
          uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          unint64_t v11 = v74;
          uint64_t v3 = v85;
          if (v8) {
            goto LABEL_76;
          }
        }
      }
    }
LABEL_33:
    _s10VideoAssetCMa(0);
    uint64_t v48 = swift_dynamicCastClass();
    if (!v48
      || (uint64_t v19 = (char *)v48, (v49 = swift_dynamicCastClass()) == 0)
      || !*(void *)&v19[OBJC_IVAR____TtCC7Journal10Journaling10VideoAsset_metadata])
    {

      goto LABEL_39;
    }
    uint64_t v8 = v49;
    uint64_t v12 = v16;
    id v16 = a1;
    swift_retain();
    sub_100039C14((uint64_t)v11);
    swift_release();
    uint64_t v50 = (uint64_t)v11;
    id v51 = *v75;
    if ((*v75)(v50, 1, v81))
    {

      sub_10001457C(v50, &qword_1007F9E10);
      unint64_t v11 = (char *)v50;
      uint64_t v3 = v85;
      goto LABEL_39;
    }
    uint64_t v60 = (uint64_t)v69;
    sub_1000F92B0(v50, (uint64_t)v69, _s10VideoAssetC9VideoDataVMa);
    sub_10001457C(v50, &qword_1007F9E10);
    uint64_t v61 = *(void *)(v60 + 8);
    uint64_t v70 = *(char **)v60;
    swift_bridgeObjectRetain();
    sub_1000F9318(v60, _s10VideoAssetC9VideoDataVMa);
    if (!v61) {
      goto LABEL_69;
    }
    if (!*(void *)(v8 + OBJC_IVAR____TtCC7Journal10Journaling10VideoAsset_metadata)) {
      goto LABEL_68;
    }
    swift_retain();
    uint64_t v8 = v67;
    sub_100039C14(v67);
    swift_release();
    if (v51(v8, 1, v81))
    {
      swift_bridgeObjectRelease();

      sub_10001457C(v8, &qword_1007F9E10);
      goto LABEL_70;
    }
    uint64_t v63 = v69;
    sub_1000F92B0(v8, (uint64_t)v69, _s10VideoAssetC9VideoDataVMa);
    sub_10001457C(v8, &qword_1007F9E10);
    uint64_t v8 = *v63;
    uint64_t v64 = v63[1];
    swift_bridgeObjectRetain();
    sub_1000F9318((uint64_t)v63, _s10VideoAssetC9VideoDataVMa);
    if (!v64)
    {
LABEL_68:
      swift_bridgeObjectRelease();
LABEL_69:

LABEL_70:
      unint64_t v11 = v74;
      uint64_t v3 = v85;
      goto LABEL_39;
    }
    unint64_t v11 = v74;
    if (v70 == (char *)v8 && v61 == v64) {
      break;
    }
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_78;
    }

    uint64_t v3 = v85;
LABEL_39:
    if (v86 == v5) {
      goto LABEL_81;
    }
    unint64_t v52 = v5 + 1;
    if (v88)
    {
      uint64_t v53 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v52 >= *(void *)(v78 + 16))
      {
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v53 = (char *)v26[v5 + 5];
    }
    id v16 = v53;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
LABEL_73:

LABEL_75:
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_76:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
    ++v5;
    if (static UUID.== infix(_:_:)()) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_78:
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

uint64_t sub_1000ED0DC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  if (qword_1007F7CE0 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_10083EA18;
  v1[6] = qword_10083EA18;
  return _swift_task_switch(sub_1000ED1D4, v3, 0);
}

uint64_t sub_1000ED1D4()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  v0[7] = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  void *v4 = v0;
  v4[1] = sub_1000ED2F4;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1000ED2F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 32);
  uint64_t v4 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1000ED484, v1, 0);
}

uint64_t sub_1000ED484()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000ED514;
  return sub_1000E8804();
}

uint64_t sub_1000ED514()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000ED624()
{
  uint64_t v103 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(char **)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v102 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for DispatchQoS();
  uint64_t v3 = *(char **)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v100 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v117 = (char *)&v94 - v9;
  uint64_t v123 = type metadata accessor for UUID();
  uint64_t v112 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  v109 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v107 = (char *)&v94 - v12;
  uint64_t v99 = v13;
  __chkstk_darwin(v14);
  v115 = (char *)&v94 - v15;
  uint64_t v16 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v120 = v3;
  v122 = v1;
  uint64_t v104 = v7;
  uint64_t v111 = result;
  id v21 = [*(id *)(result + 32) assets];
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v94 = v0;
  if (v21)
  {
    uint64_t v23 = v21;
    v129 = _swiftEmptyArrayStorage;
    NSSet.makeIterator()();

    sub_1000F9378((unint64_t *)&unk_100805AF0, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    while (v128)
    {
      sub_10002102C(&v127, &aBlock);
      sub_10001B648((uint64_t)&aBlock, (uint64_t)&v127);
      type metadata accessor for JournalEntryAssetMO();
      if (swift_dynamicCast()
        && (v24 = v124, unsigned __int8 v25 = [v124 isUndoablyDeleted],
                        v24,
                        (v25 & 1) != 0))
      {
        sub_10002102C(&aBlock, &v127);
        unint64_t v26 = v129;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100095B44(0, v26[2] + 1, 1);
          unint64_t v26 = v129;
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1)
        {
          sub_100095B44(v27 > 1, v28 + 1, 1);
          unint64_t v26 = v129;
        }
        v26[2] = v28 + 1;
        sub_10002102C(&v127, &v26[4 * v28 + 4]);
      }
      else
      {
        _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)&aBlock);
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    sub_10001457C((uint64_t)&v127, &qword_1007FAD50);
    uint64_t v22 = v129;
  }
  uint64_t v29 = v111;
  uint64_t v30 = v123;
  uint64_t v31 = v107;
  if (qword_1007F69C8 != -1) {
LABEL_73:
  }
    swift_once();
  uint64_t v110 = type metadata accessor for Logger();
  sub_100026A54(v110, (uint64_t)qword_1007FDC08);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v116 = v22;
  if (v34)
  {
    uint64_t v35 = v29;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = (char **)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 138543874;
    uint64_t v38 = *(void **)(v35 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_id);
    *(void *)&long long aBlock = v38;
    id v39 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v121 = v37;
    void *v37 = (char *)v38;
    swift_release_n();
    *(_WORD *)(v36 + 12) = 2048;
    uint64_t v40 = (unint64_t *)(v35 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_assets);
    swift_beginAccess();
    unint64_t v41 = *v40;
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_release();
    }
    *(void *)&long long aBlock = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v36 + 22) = 2048;
    uint64_t v22 = v116;
    uint64_t v43 = v116[2];
    swift_bridgeObjectRelease();
    *(void *)&long long aBlock = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}@ (removeUndoablyDeletedAssets) assets.count: %ld  assetsToRemove.count:%ld", (uint8_t *)v36, 0x20u);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v29 = v35;
    uint64_t v30 = v123;
    uint64_t v31 = v107;
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v44 = v22[2];
  uint64_t v45 = (uint64_t)v104;
  if (!v44)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  id v46 = [*(id *)(v29 + 32) assetOrdering];
  if (!v46) {
    goto LABEL_24;
  }
  uint64_t v47 = v46;
  uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v50 = v49;

  uint64_t v51 = sub_1000400E0();
  uint64_t v52 = v48;
  uint64_t v30 = v123;
  sub_100040DD0(v52, v50);
  uint64_t v105 = (void *)v51;
  if (!v51)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v105 = &_swiftEmptyDictionarySingleton;
  }
  unint64_t v53 = 0;
  uint64_t v54 = v22 + 4;
  uint64_t v121 = (char **)(v112 + 56);
  uint64_t v118 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  v119 = (void (**)(char *, char *, uint64_t))(v112 + 32);
  uint64_t v98 = v112 + 16;
  uint64_t v97 = v126;
  uint64_t v96 = (void (**)(char *, uint64_t))(v122 + 8);
  unint64_t v95 = (void (**)(char *, uint64_t))(v120 + 8);
  uint64_t v108 = (void (**)(unint64_t, uint64_t))(v112 + 8);
  v122 = (char *)&type metadata for Any + 8;
  uint64_t v114 = v44;
  v113 = v22 + 4;
  do
  {
    if (v53 >= v22[2])
    {
      __break(1u);
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    sub_10001B648((uint64_t)&v54[4 * v53], (uint64_t)&aBlock);
    type metadata accessor for JournalEntryAssetMO();
    if (swift_dynamicCast())
    {
      uint64_t v22 = v129;
      [v129 setIsRemovedFromCloud:1];
      [v22 setIsUploadedToCloud:1];
      id v55 = [v22 id];
      if (v55)
      {
        uint64_t v56 = v55;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v57 = *v119;
        uint64_t v58 = (uint64_t)v117;
        (*v119)(v117, v31, v30);
        uint64_t v120 = *v121;
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v120)(v58, 0, 1, v30);
        if ((*v118)(v58, 1, v30) != 1)
        {
          v57(v115, (char *)v58, v30);
          if (qword_1007F6BA0 != -1) {
            swift_once();
          }
          if (qword_1007F6BA8 != -1) {
            swift_once();
          }
          uint64_t v106 = qword_10083D198;
          uint64_t v59 = v112;
          uint64_t v31 = v107;
          (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v107, v115, v30);
          unint64_t v60 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
          uint64_t v61 = swift_allocObject();
          v57((char *)(v61 + v60), v31, v30);
          v126[2] = sub_1000F7E5C;
          v126[3] = v61;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          v126[0] = sub_10017D530;
          v126[1] = &unk_10079A2E0;
          uint64_t v62 = _Block_copy(&aBlock);
          uint64_t v63 = v100;
          static DispatchQoS.unspecified.getter();
          v129 = _swiftEmptyArrayStorage;
          sub_1000F9378((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_100010218(&qword_100804DB0);
          sub_100014488((unint64_t *)&qword_1007FBD20, &qword_100804DB0);
          uint64_t v64 = v102;
          uint64_t v65 = v103;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v62);
          uint64_t v66 = v64;
          uint64_t v30 = v123;
          (*v96)(v66, v65);
          (*v95)(v63, v101);
          swift_release();
          (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v30);
          uint64_t v45 = (uint64_t)v104;
          uint64_t v29 = v111;
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v58 = (uint64_t)v117;
        uint64_t v120 = *v121;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v120)(v117, 1, 1, v30);
      }
      sub_10001457C(v58, &qword_100800950);
      if (qword_1007F7E78 != -1) {
        swift_once();
      }
      sub_100026A54(v110, (uint64_t)qword_100812860);
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        id v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v69 = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "(purgeCache) unable to get assetId from an asset", v69, 2u);
        swift_slowDealloc();
      }

      uint64_t v30 = v123;
LABEL_45:
      sub_1005E6760();
      id v70 = [v22 fileAttachments];
      if (!v70) {
        goto LABEL_57;
      }
      uint64_t v71 = v70;
      id v72 = [v70 allObjects];

      uint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v123;
      unint64_t v74 = (unint64_t)sub_1000E52C8(v73, (void (*)(void))type metadata accessor for JournalEntryAssetFileAttachmentMO);
      swift_bridgeObjectRelease();
      if (!v74)
      {
LABEL_57:
        [*(id *)(v29 + 32) removeAssetsObject:v22 v94];
        id v78 = [v22 id];
        if (v78)
        {
          uint64_t v79 = v78;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v80 = *v119;
          (*v119)((char *)v45, v31, v30);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v120)(v45, 0, 1, v30);
          if ((*v118)(v45, 1, v30) != 1)
          {
            uint64_t v81 = (uint64_t)v109;
            v80(v109, (char *)v45, v30);
            uint64_t v82 = v105;
            swift_bridgeObjectRetain();
            unint64_t v83 = sub_10001BA38(v81);
            LOBYTE(v81) = v84;
            swift_bridgeObjectRelease();
            if (v81)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&long long aBlock = v82;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_100549440();
                uint64_t v82 = (void *)aBlock;
              }
              unint64_t v86 = v82[6] + *(void *)(v112 + 72) * v83;
              uint64_t v87 = *(void (**)(unint64_t, uint64_t))(v112 + 8);
              uint64_t v88 = v123;
              v87(v86, v123);
              uint64_t v105 = (void *)aBlock;
              sub_1000F26E8(v83, aBlock);

              swift_bridgeObjectRelease();
            }
            else
            {

              uint64_t v87 = *v108;
              uint64_t v88 = v123;
            }
            v87((unint64_t)v109, v88);
            uint64_t v30 = v88;
            goto LABEL_28;
          }
        }
        else
        {
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v120)(v45, 1, 1, v30);
        }

        sub_10001457C(v45, &qword_100800950);
LABEL_28:
        uint64_t v22 = v116;
        uint64_t v44 = v114;
        uint64_t v54 = v113;
        goto LABEL_29;
      }
      if (v74 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v30 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v30)
        {
LABEL_49:
          if (v30 < 1) {
            goto LABEL_72;
          }
          for (uint64_t i = 0; i != v30; ++i)
          {
            if ((v74 & 0xC000000000000001) != 0) {
              id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v76 = *(id *)(v74 + 8 * i + 32);
            }
            uint64_t v77 = v76;
            [v76 setIsRemovedFromCloud:1 v94];
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v29 = v111;
      uint64_t v30 = v123;
      goto LABEL_57;
    }
LABEL_29:
    ++v53;
  }
  while (v53 != v44);
  swift_bridgeObjectRelease();
  id v89 = *(id *)(v29 + 32);
  uint64_t v90 = sub_1000EF370();
  unint64_t v92 = v91;
  swift_bridgeObjectRelease();
  if (v92 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100040DBC(v90, v92);
  }
  [v89 setAssetOrdering:isa, v94];

  [*(id *)(v29 + 32) setIsUploadedToCloud:0];
  return swift_release();
}

BOOL sub_1000EE7FC(void **a1, id *a2, uint64_t a3)
{
  uint64_t v6 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v6 - 8);
  uint64_t v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v41 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v38 - v15;
  *(void *)&double v18 = __chkstk_darwin(v17).n128_u64[0];
  uint64_t v20 = (char *)&v38 - v19;
  id v21 = *a1;
  id v38 = *a2;
  id v22 = [v21 id:v18];
  if (!v22)
  {
    unsigned __int8 v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v25(v10, 1, 1, v11);
LABEL_6:
    UUID.init()();
    sub_10001457C((uint64_t)v10, &qword_100800950);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v23 = v22;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v24(v10, v16, v11);
  unsigned __int8 v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v25(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    goto LABEL_6;
  }
  v24(v20, v10, v11);
  if (!*(void *)(a3 + 16)) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v26 = sub_10001BA38((uint64_t)v20);
  if (v27)
  {
    uint64_t v39 = *(void *)(*(void *)(a3 + 56) + 8 * v26);
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v39 = 0;
LABEL_10:
  unint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v20, v11);
  id v29 = [v38 id];
  if (v29)
  {
    uint64_t v30 = v29;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = *(void (**)(void))(v12 + 32);
    uint64_t v32 = (uint64_t)v40;
    v31();
    v25((char *)v32, 0, 1, v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v32, 1, v11) != 1)
    {
      uint64_t v33 = (uint64_t)v41;
      ((void (*)(char *, uint64_t, uint64_t))v31)(v41, v32, v11);
      if (!*(void *)(a3 + 16)) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v32 = (uint64_t)v40;
    v25(v40, 1, 1, v11);
  }
  uint64_t v33 = (uint64_t)v41;
  UUID.init()();
  sub_10001457C(v32, &qword_100800950);
  if (!*(void *)(a3 + 16))
  {
LABEL_18:
    uint64_t v36 = 0;
    goto LABEL_19;
  }
LABEL_16:
  unint64_t v34 = sub_10001BA38(v33);
  if ((v35 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v36 = *(void *)(*(void *)(a3 + 56) + 8 * v34);
LABEL_19:
  v28((char *)v33, v11);
  return v39 < v36;
}

uint64_t sub_1000EEC00(uint64_t a1)
{
  return sub_1000EEC28(a1, (const char **)&selRef_entryDate, (SEL *)&selRef_setEntryDate_);
}

uint64_t sub_1000EEC14(uint64_t a1)
{
  return sub_1000EEC28(a1, (const char **)&selRef_createdDate, (SEL *)&selRef_setCreatedDate_);
}

uint64_t sub_1000EEC28(uint64_t a1, const char **a2, SEL *a3)
{
  char v35 = a3;
  uint64_t v5 = v3;
  uint64_t v40 = a1;
  uint64_t v41 = type metadata accessor for Calendar.Component();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  id v24 = (char *)&v34 - v23;
  unsigned __int8 v25 = *a2;
  id v36 = v5;
  id v26 = [v5 v25:v22];
  if (v26)
  {
    char v27 = v26;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v28 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v28(v16, v20, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v28(v24, v16, v17);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  Date.init()();
  sub_10001457C((uint64_t)v16, (uint64_t *)&unk_1007FC470);
LABEL_6:
  static Calendar.current.getter();
  uint64_t v29 = v39;
  uint64_t v30 = v41;
  (*(void (**)(char *, void, uint64_t))(v39 + 104))(v7, enum case for Calendar.Component.day(_:), v41);
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v17);
  }
  id v32 = v36;
  [v36 *v35];

  [v32 setIsUploadedToCloud:0];
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v24, v17);
}

uint64_t sub_1000EF078()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000F7ED4();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

uint64_t sub_1000EF370()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100010218((uint64_t *)&unk_100811810);
  sub_1000F7A8C();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

uint64_t sub_1000EF664()
{
  uint64_t v0 = _s10AudioAssetC9AudioDataVMa(0);
  __chkstk_darwin(v0);
  __chkstk_darwin(v1);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000F9378(&qword_1007FDD40, (void (*)(uint64_t))_s10AudioAssetC9AudioDataVMa);
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v2;
}

uint64_t sub_1000EFA24()
{
  uint64_t v0 = _s16StreakEventAssetC12MetadataTypeVMa(0);
  __chkstk_darwin(v0);
  __chkstk_darwin(v1);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000F9378(&qword_1007FDD70, (void (*)(uint64_t))_s16StreakEventAssetC12MetadataTypeVMa);
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v2;
}

uint64_t sub_1000EFDE4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000EFE1C()
{
  return sub_1000F7B6C();
}

void sub_1000EFE24(char *a1@<X8>)
{
  sub_1000E82D0(*(void *)(v1 + 24), a1);
}

void sub_1000EFE40()
{
}

uint64_t sub_1000EFE5C(void (*a1)(__n128))
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  sub_1000F9378((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

char *sub_1000EFF88(uint64_t a1)
{
  return sub_1002A54A0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1000EFF9C(void *a1)
{
  return sub_1002A5C84(0, a1[2], 0, a1);
}

uint64_t sub_1000EFFB0(unint64_t a1)
{
  return sub_1002A5F60(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1000EFFC4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_1000F0040(void *a1)
{
  return sub_1002A5F94(0, a1[2], 0, a1);
}

void *sub_1000F0054(void *a1)
{
  return sub_1002A61E4(0, a1[2], 0, a1);
}

uint64_t sub_1000F0068(unint64_t a1)
{
  return sub_1002A62F4(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1000F007C(void *a1)
{
  return sub_1002A5A10(0, a1[2], 0, a1);
}

double *sub_1000F0090(uint64_t a1)
{
  return sub_1002A6624(0, *(void *)(a1 + 16), 0, (double *)a1);
}

void *sub_1000F00A4(void *a1)
{
  return sub_1002A6FD8(0, a1[2], 0, a1);
}

void *sub_1000F00B8(void *a1)
{
  return sub_1002A6500(0, a1[2], 0, a1);
}

void *sub_1000F00CC(void *a1)
{
  return sub_1002A5B20(0, a1[2], 0, a1);
}

uint64_t sub_1000F00E0(unint64_t a1)
{
  return sub_1002A74DC(0, *(void *)(a1 + 16), 0, a1);
}

void sub_1000F00F4(void **a1)
{
  uint64_t v2 = *(void *)(sub_100010218(&qword_1007FC108) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1000F3FA8(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1000F01A0(v5);
  *a1 = v3;
}

void sub_1000F01A0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v138 = sub_100010218(&qword_1007FC108);
  uint64_t v4 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v129 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v139 = (uint64_t)&v123 - v7;
  __chkstk_darwin(v8);
  uint64_t v135 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v10);
  uint64_t v134 = (uint64_t)&v123 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if (v12 < 0) {
      goto LABEL_141;
    }
    if (v12) {
      sub_1000F0C10(0, v12, 1, a1);
    }
    return;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_149;
  }
  uint64_t v132 = v4;
  Swift::Int v125 = v13;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v131 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    id v124 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = *(void *)&_swiftEmptyArrayStorage[2];
LABEL_107:
      uint64_t v116 = v18;
      if (v20 >= 2)
      {
        uint64_t v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_136;
          }
          if (!v117) {
            goto LABEL_148;
          }
          uint64_t v119 = *(void *)&v116[16 * v118 + 32];
          uint64_t v120 = *(void *)&v116[16 * v20 + 24];
          sub_1000F120C(v117 + *(void *)(v132 + 72) * v119, v117 + *(void *)(v132 + 72) * *(void *)&v116[16 * v20 + 16], v117 + *(void *)(v132 + 72) * v120, v131);
          if (v2) {
            break;
          }
          if (v120 < v119) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v116 = sub_1000F1E40((uint64_t)v116);
          }
          if (v118 >= *((void *)v116 + 2)) {
            goto LABEL_138;
          }
          uint64_t v121 = &v116[16 * v118 + 32];
          *(void *)uint64_t v121 = v119;
          *((void *)v121 + 1) = v120;
          unint64_t v122 = *((void *)v116 + 2);
          if (v20 > v122) {
            goto LABEL_139;
          }
          memmove(&v116[16 * v20 + 16], &v116[16 * v20 + 32], 16 * (v122 - v20));
          *((void *)v116 + 2) = v122 - 1;
          unint64_t v20 = v122 - 1;
        }
        while (v122 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v124[2] = 0.0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    id v124 = (double *)v16;
    unint64_t v131 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  v136 = a1;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    Swift::Int v130 = v19;
    if (v19 + 1 >= v12)
    {
      uint64_t v38 = v19 + 1;
      goto LABEL_58;
    }
    uint64_t v127 = v2;
    uint64_t v23 = *a1;
    uint64_t v24 = *(void *)(v132 + 72);
    uint64_t v25 = v134;
    sub_10001B220(*a1 + v24 * v22, v134, &qword_1007FC108);
    Swift::Int v140 = v12;
    uint64_t v26 = v135;
    sub_10001B220(v23 + v24 * v21, v135, &qword_1007FC108);
    uint64_t v27 = *(int *)(v138 + 48);
    uint64_t v133 = *(void *)(v25 + v27);
    uint64_t v28 = *(void *)(v26 + v27);
    uint64_t v29 = v26;
    Swift::Int v30 = v140;
    sub_10001457C(v29, &qword_1007FC108);
    sub_10001457C(v25, &qword_1007FC108);
    uint64_t v128 = v23;
    uint64_t v141 = v24;
    Swift::Int v137 = v21 + 2;
    if (v21 + 2 >= v30)
    {
      uint64_t v2 = v127;
    }
    else
    {
      v126 = v18;
      uint64_t v31 = v24 * v22;
      uint64_t v32 = v23;
      uint64_t v33 = v24 * (v21 + 2);
      while (1)
      {
        uint64_t v34 = v134;
        int v35 = v133 < v28;
        sub_10001B220(v32 + v33, v134, &qword_1007FC108);
        uint64_t v36 = v135;
        sub_10001B220(v32 + v31, v135, &qword_1007FC108);
        int v37 = *(void *)(v34 + *(int *)(v138 + 48)) >= *(void *)(v36 + *(int *)(v138 + 48));
        sub_10001457C(v36, &qword_1007FC108);
        sub_10001457C(v34, &qword_1007FC108);
        if (v35 == v37) {
          break;
        }
        v32 += v141;
        if (v140 == ++v137)
        {
          Swift::Int v30 = v140;
          Swift::Int v137 = v140;
          a1 = v136;
          uint64_t v18 = v126;
          uint64_t v2 = v127;
          Swift::Int v21 = v130;
          goto LABEL_24;
        }
      }
      a1 = v136;
      uint64_t v18 = v126;
      uint64_t v2 = v127;
      Swift::Int v21 = v130;
      Swift::Int v30 = v140;
    }
LABEL_24:
    if (v133 >= v28) {
      break;
    }
    uint64_t v38 = v137;
    if (v137 < v21) {
      goto LABEL_142;
    }
    if (v21 >= v137) {
      goto LABEL_38;
    }
    v126 = v18;
    uint64_t v127 = v2;
    uint64_t v39 = 0;
    uint64_t v40 = v141;
    uint64_t v41 = v141 * (v137 - 1);
    uint64_t v42 = v137 * v141;
    Swift::Int v43 = v21;
    uint64_t v44 = v21 * v141;
    do
    {
      if (v43 != v38 + v39 - 1)
      {
        uint64_t v45 = v128;
        if (!v128) {
          goto LABEL_147;
        }
        unint64_t v46 = v128 + v44;
        sub_10002C4EC(v128 + v44, v129, &qword_1007FC108);
        if (v44 < v41 || v46 >= v45 + v42)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v44 != v41)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        sub_10002C4EC(v129, v45 + v41, &qword_1007FC108);
        uint64_t v38 = v137;
        uint64_t v40 = v141;
      }
      ++v43;
      --v39;
      v41 -= v40;
      v42 -= v40;
      v44 += v40;
    }
    while (v43 < v38 + v39);
    uint64_t v18 = v126;
    uint64_t v2 = v127;
    Swift::Int v21 = v130;
    Swift::Int v30 = v140;
    if (v38 < v140) {
      goto LABEL_39;
    }
LABEL_58:
    if (v38 < v21) {
      goto LABEL_135;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v137 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_1000F1750(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v64 = *((void *)v18 + 2);
    unint64_t v63 = *((void *)v18 + 3);
    unint64_t v20 = v64 + 1;
    if (v64 >= v63 >> 1) {
      uint64_t v18 = sub_1000F1750((char *)(v63 > 1), v64 + 1, 1, v18);
    }
    uint64_t v65 = v2;
    *((void *)v18 + 2) = v20;
    uint64_t v66 = v18 + 32;
    uint64_t v67 = &v18[16 * v64 + 32];
    Swift::Int v68 = v137;
    *(void *)uint64_t v67 = v21;
    *((void *)v67 + 1) = v68;
    if (v64)
    {
      while (1)
      {
        unint64_t v69 = v20 - 1;
        if (v20 >= 4)
        {
          unint64_t v74 = &v66[16 * v20];
          uint64_t v75 = *((void *)v74 - 8);
          uint64_t v76 = *((void *)v74 - 7);
          BOOL v80 = __OFSUB__(v76, v75);
          uint64_t v77 = v76 - v75;
          if (v80) {
            goto LABEL_124;
          }
          uint64_t v79 = *((void *)v74 - 6);
          uint64_t v78 = *((void *)v74 - 5);
          BOOL v80 = __OFSUB__(v78, v79);
          uint64_t v72 = v78 - v79;
          char v73 = v80;
          if (v80) {
            goto LABEL_125;
          }
          unint64_t v81 = v20 - 2;
          uint64_t v82 = &v66[16 * v20 - 32];
          uint64_t v84 = *(void *)v82;
          uint64_t v83 = *((void *)v82 + 1);
          BOOL v80 = __OFSUB__(v83, v84);
          uint64_t v85 = v83 - v84;
          if (v80) {
            goto LABEL_127;
          }
          BOOL v80 = __OFADD__(v72, v85);
          uint64_t v86 = v72 + v85;
          if (v80) {
            goto LABEL_130;
          }
          if (v86 >= v77)
          {
            uint64_t v104 = &v66[16 * v69];
            uint64_t v106 = *(void *)v104;
            uint64_t v105 = *((void *)v104 + 1);
            BOOL v80 = __OFSUB__(v105, v106);
            uint64_t v107 = v105 - v106;
            if (v80) {
              goto LABEL_134;
            }
            BOOL v97 = v72 < v107;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v98 = *((void *)v18 + 4);
            uint64_t v99 = *((void *)v18 + 5);
            BOOL v80 = __OFSUB__(v99, v98);
            uint64_t v91 = v99 - v98;
            char v92 = v80;
            goto LABEL_89;
          }
          uint64_t v71 = *((void *)v18 + 4);
          uint64_t v70 = *((void *)v18 + 5);
          BOOL v80 = __OFSUB__(v70, v71);
          uint64_t v72 = v70 - v71;
          char v73 = v80;
        }
        if (v73) {
          goto LABEL_126;
        }
        unint64_t v81 = v20 - 2;
        uint64_t v87 = &v66[16 * v20 - 32];
        uint64_t v89 = *(void *)v87;
        uint64_t v88 = *((void *)v87 + 1);
        BOOL v90 = __OFSUB__(v88, v89);
        uint64_t v91 = v88 - v89;
        char v92 = v90;
        if (v90) {
          goto LABEL_129;
        }
        unint64_t v93 = &v66[16 * v69];
        uint64_t v95 = *(void *)v93;
        uint64_t v94 = *((void *)v93 + 1);
        BOOL v80 = __OFSUB__(v94, v95);
        uint64_t v96 = v94 - v95;
        if (v80) {
          goto LABEL_132;
        }
        if (__OFADD__(v91, v96)) {
          goto LABEL_133;
        }
        if (v91 + v96 >= v72)
        {
          BOOL v97 = v72 < v96;
LABEL_95:
          if (v97) {
            unint64_t v69 = v81;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v92) {
          goto LABEL_128;
        }
        uint64_t v100 = &v66[16 * v69];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v80 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v80) {
          goto LABEL_131;
        }
        if (v103 < v91) {
          goto LABEL_14;
        }
LABEL_97:
        unint64_t v108 = v69 - 1;
        if (v69 - 1 >= v20)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        uint64_t v109 = *a1;
        if (!*a1) {
          goto LABEL_146;
        }
        uint64_t v110 = v18;
        uint64_t v111 = &v66[16 * v108];
        uint64_t v112 = *(void *)v111;
        v113 = &v66[16 * v69];
        uint64_t v114 = *((void *)v113 + 1);
        sub_1000F120C(v109 + *(void *)(v132 + 72) * *(void *)v111, v109 + *(void *)(v132 + 72) * *(void *)v113, v109 + *(void *)(v132 + 72) * v114, v131);
        if (v65) {
          goto LABEL_118;
        }
        if (v114 < v112) {
          goto LABEL_121;
        }
        if (v69 > *((void *)v110 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v111 = v112;
        *(void *)&v66[16 * v108 + 8] = v114;
        unint64_t v115 = *((void *)v110 + 2);
        if (v69 >= v115) {
          goto LABEL_123;
        }
        uint64_t v18 = v110;
        unint64_t v20 = v115 - 1;
        memmove(&v66[16 * v69], v113 + 16, 16 * (v115 - 1 - v69));
        *((void *)v110 + 2) = v115 - 1;
        a1 = v136;
        if (v115 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    Swift::Int v19 = v137;
    uint64_t v2 = v65;
    Swift::Int v12 = a1[1];
    if (v137 >= v12) {
      goto LABEL_107;
    }
  }
  uint64_t v38 = v137;
LABEL_38:
  if (v38 >= v30) {
    goto LABEL_58;
  }
LABEL_39:
  if (__OFSUB__(v38, v21)) {
    goto LABEL_140;
  }
  if (v38 - v21 >= v125) {
    goto LABEL_58;
  }
  if (__OFADD__(v21, v125)) {
    goto LABEL_143;
  }
  if (v21 + v125 >= v30) {
    uint64_t v47 = v30;
  }
  else {
    uint64_t v47 = v21 + v125;
  }
  if (v47 >= v21)
  {
    if (v38 != v47)
    {
      v126 = v18;
      uint64_t v127 = v2;
      uint64_t v48 = *(void *)(v132 + 72);
      uint64_t v141 = v48 * (v38 - 1);
      uint64_t v133 = v48;
      uint64_t v49 = v38 * v48;
      uint64_t v128 = v47;
      do
      {
        uint64_t v51 = 0;
        Swift::Int v52 = v21;
        Swift::Int v137 = v38;
        while (1)
        {
          uint64_t v53 = *a1;
          uint64_t v54 = v49;
          uint64_t v55 = v49 + v51 + *a1;
          uint64_t v56 = v134;
          sub_10001B220(v55, v134, &qword_1007FC108);
          uint64_t v57 = v135;
          sub_10001B220(v141 + v51 + v53, v135, &qword_1007FC108);
          uint64_t v58 = *(int *)(v138 + 48);
          Swift::Int v140 = *(void *)(v56 + v58);
          Swift::Int v59 = *(void *)(v57 + v58);
          sub_10001457C(v57, &qword_1007FC108);
          sub_10001457C(v56, &qword_1007FC108);
          if (v140 >= v59) {
            break;
          }
          uint64_t v60 = *a1;
          if (!*a1) {
            goto LABEL_145;
          }
          uint64_t v49 = v54;
          uint64_t v61 = v60 + v141 + v51;
          sub_10002C4EC(v60 + v54 + v51, v139, &qword_1007FC108);
          swift_arrayInitWithTakeFrontToBack();
          sub_10002C4EC(v139, v61, &qword_1007FC108);
          v51 -= v133;
          ++v52;
          a1 = v136;
          Swift::Int v50 = v137;
          if (v137 == v52) {
            goto LABEL_49;
          }
        }
        Swift::Int v50 = v137;
        uint64_t v49 = v54;
LABEL_49:
        uint64_t v38 = v50 + 1;
        v141 += v133;
        v49 += v133;
        Swift::Int v21 = v130;
      }
      while (v38 != v128);
      uint64_t v38 = v128;
      uint64_t v18 = v126;
      uint64_t v2 = v127;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000F0C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v36 = a1;
  uint64_t v42 = sub_100010218(&qword_1007FC108);
  __chkstk_darwin(v42);
  uint64_t v43 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v38 = (uint64_t)&v34 - v9;
  __chkstk_darwin(v10);
  uint64_t v37 = (uint64_t)&v34 - v12;
  uint64_t v41 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    uint64_t v13 = *(void *)(v11 + 72);
    uint64_t v14 = v13 * (v41 - 1);
    uint64_t v39 = v13;
    uint64_t v15 = v13 * v41;
    uint64_t v16 = &qword_1007FC108;
    uint64_t v45 = a4;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v36;
    uint64_t v40 = v15;
    while (1)
    {
      uint64_t v20 = *v45;
      uint64_t v21 = v15 + v17 + *v45;
      uint64_t v22 = v37;
      sub_10001B220(v21, v37, v16);
      uint64_t v23 = v14 + v17 + v20;
      uint64_t v24 = v14;
      uint64_t v25 = v38;
      sub_10001B220(v23, v38, v16);
      uint64_t v26 = *(int *)(v42 + 48);
      uint64_t v44 = *(void *)(v22 + v26);
      uint64_t v27 = v16;
      uint64_t v28 = *(void *)(v25 + v26);
      uint64_t v29 = v25;
      uint64_t v14 = v24;
      sub_10001457C(v29, v27);
      uint64_t v30 = v22;
      uint64_t v15 = v40;
      sub_10001457C(v30, v27);
      BOOL v31 = v44 < v28;
      uint64_t v16 = v27;
      if (!v31)
      {
LABEL_4:
        uint64_t v14 = v24 + v39;
        v15 += v39;
        if (++v41 == v35) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v32 = *v45;
      if (!*v45) {
        break;
      }
      uint64_t v33 = v32 + v24 + v17;
      sub_10002C4EC(v32 + v15 + v17, v43, v27);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v19 = v33;
      uint64_t v16 = v27;
      sub_10002C4EC(v43, v19, v27);
      v17 -= v39;
      if (v41 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1000F0EA8(void **__src, void **a2, unint64_t a3, id *__dst, uint64_t a5)
{
  uint64_t v5 = __dst;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = (char *)a2 - (char *)__src;
  int64_t v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v10 = (char *)a2 - (char *)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v13 = a3 - (void)a2;
  }
  uint64_t v14 = v13 >> 3;
  unint64_t v46 = __src;
  uint64_t v45 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst) {
        memmove(__dst, a2, 8 * v14);
      }
      uint64_t v25 = &v5[v14];
      uint64_t v44 = v25;
      unint64_t v46 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        uint64_t v26 = (void **)(a3 - 8);
        uint64_t v27 = v7;
        uint64_t v38 = v5;
        uint64_t v39 = v8;
        while (1)
        {
          unint64_t v28 = (unint64_t)v25;
          uint64_t v29 = v25 - 1;
          uint64_t v43 = *(v25 - 1);
          uint64_t v30 = *--v27;
          id v42 = v30;
          BOOL v31 = v43;
          id v32 = v30;
          BOOL v33 = sub_1000EE7FC(&v43, &v42, a5);
          if (v41) {
            break;
          }
          BOOL v34 = v33;
          uint64_t v41 = 0;
          uint64_t v35 = v26 + 1;

          if (v34)
          {
            if (v35 != v7 || v26 >= v7) {
              *uint64_t v26 = *v27;
            }
            unint64_t v46 = v27;
            uint64_t v36 = v38;
            uint64_t v25 = (id *)v28;
            if (v27 <= v39) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v44 = v29;
            if ((unint64_t)v35 < v28 || (unint64_t)v26 >= v28 || v35 != (void **)v28) {
              *uint64_t v26 = *v29;
            }
            uint64_t v27 = v7;
            uint64_t v25 = v29;
            uint64_t v36 = v38;
            if (v7 <= v39) {
              goto LABEL_48;
            }
          }
          --v26;
          uint64_t v7 = v27;
          if (v25 <= v36) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst) {
      memmove(__dst, __src, 8 * v11);
    }
    uint64_t v15 = &v5[v11];
    uint64_t v44 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        uint64_t v16 = v8;
        uint64_t v43 = *v7;
        uint64_t v17 = v5;
        id v42 = *v5;
        id v18 = v42;
        uint64_t v19 = v43;
        id v20 = v18;
        BOOL v21 = sub_1000EE7FC(&v43, &v42, a5);
        if (v41) {
          break;
        }
        BOOL v22 = v21;

        if (v22)
        {
          uint64_t v23 = v7 + 1;
          uint64_t v24 = v16;
          if (v16 < v7 || v16 >= v23 || v16 != v7) {
            *uint64_t v16 = *v7;
          }
          uint64_t v5 = v17;
        }
        else
        {
          uint64_t v24 = v16;
          if (v16 != v17) {
            *uint64_t v16 = *v17;
          }
          uint64_t v5 = v17 + 1;
          uint64_t v45 = v17 + 1;
          uint64_t v23 = v7;
        }
        uint64_t v41 = 0;
        uint64_t v8 = v24 + 1;
        unint64_t v46 = v8;
        if (v5 < v15)
        {
          uint64_t v7 = v23;
          if ((unint64_t)v23 < a3) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
LABEL_48:
    sub_1000F191C((void **)&v46, (const void **)&v45, &v44);
    swift_bridgeObjectRelease();
    return 1;
  }
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F120C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_100010218(&qword_1007FC108);
  __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v51 = *(void *)(v13 + 72);
  if (!v51)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v51 == -1) {
    goto LABEL_70;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v51 == -1) {
    goto LABEL_71;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v51;
  unint64_t v54 = a1;
  unint64_t v53 = a4;
  uint64_t v16 = v14 / v51;
  if (v15 >= v14 / v51)
  {
    if (v16 < 0) {
      goto LABEL_72;
    }
    uint64_t v18 = v16 * v51;
    if (a4 < a2 || a2 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v30 = a4 + v18;
    unint64_t v52 = a4 + v18;
    unint64_t v54 = a2;
    if (v18 < 1 || a1 >= a2) {
      goto LABEL_50;
    }
    uint64_t v33 = -v51;
    unint64_t v47 = a4;
    uint64_t v48 = v8;
    unint64_t v49 = a1;
    while (1)
    {
      uint64_t v51 = a3 + v33;
      sub_10001B220(v30 + v33, (uint64_t)v12, &qword_1007FC108);
      unint64_t v34 = a2 + v33;
      uint64_t v35 = (uint64_t)v12;
      uint64_t v36 = v50;
      sub_10001B220(a2 + v33, v50, &qword_1007FC108);
      uint64_t v37 = *(int *)(v8 + 48);
      uint64_t v38 = v33;
      uint64_t v39 = *(void *)(v35 + v37);
      uint64_t v40 = *(void *)(v36 + v37);
      uint64_t v41 = v36;
      uint64_t v12 = (char *)v35;
      sub_10001457C(v41, &qword_1007FC108);
      sub_10001457C(v35, &qword_1007FC108);
      if (v39 < v40) {
        break;
      }
      uint64_t v42 = v51;
      unint64_t v44 = v52;
      v52 += v38;
      uint64_t v33 = v38;
      if (a3 >= v44 && v51 < v44)
      {
        uint64_t v8 = v48;
        unint64_t v43 = v49;
        if (a3 != v44) {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v34 = a2;
        goto LABEL_63;
      }
      uint64_t v8 = v48;
      swift_arrayInitWithTakeFrontToBack();
      unint64_t v34 = a2;
      unint64_t v45 = v47;
      unint64_t v43 = v49;
LABEL_65:
      unint64_t v30 = v52;
      if (v52 > v45)
      {
        a2 = v34;
        a3 = v42;
        if (v34 > v43) {
          continue;
        }
      }
      goto LABEL_50;
    }
    uint64_t v42 = v51;
    if (a3 < a2 || v51 >= a2)
    {
      uint64_t v8 = v48;
      swift_arrayInitWithTakeFrontToBack();
      unint64_t v43 = v49;
      uint64_t v33 = v38;
    }
    else
    {
      uint64_t v8 = v48;
      unint64_t v43 = v49;
      uint64_t v33 = v38;
      if (a3 != a2) {
        swift_arrayInitWithTakeBackToFront();
      }
    }
    v54 += v33;
LABEL_63:
    unint64_t v45 = v47;
    goto LABEL_65;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v51;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v49 = a4 + v17;
    unint64_t v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        unint64_t v20 = a3;
        sub_10001B220(a2, (uint64_t)v12, &qword_1007FC108);
        uint64_t v21 = v50;
        sub_10001B220(a4, v50, &qword_1007FC108);
        uint64_t v22 = *(int *)(v8 + 48);
        uint64_t v23 = *(void *)&v12[v22];
        uint64_t v24 = *(void *)(v21 + v22);
        sub_10001457C(v21, &qword_1007FC108);
        sub_10001457C((uint64_t)v12, &qword_1007FC108);
        unint64_t v25 = v54;
        if (v23 >= v24)
        {
          unint64_t v28 = v53 + v51;
          if (v54 < v53 || v54 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 != v53) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v53 = v28;
          unint64_t v26 = a2;
        }
        else
        {
          unint64_t v26 = a2 + v51;
          if (v54 < a2 || v54 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v54 == a2) {
              unint64_t v25 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        unint64_t v54 = v25 + v51;
        a4 = v53;
        if (v53 >= v49) {
          break;
        }
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_50:
    sub_1000F1D00(&v54, &v53, (uint64_t *)&v52, &qword_1007FC108);
    return 1;
  }
LABEL_72:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000F1750(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010218(&qword_1007FDC70);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000F184C(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_1000F191C(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1000F19D8(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

uint64_t sub_1000F1A7C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000F1AF4(a1, a2, a3, type metadata accessor for SuggestedDateItem.PhotoDateItem);
}

uint64_t sub_1000F1A94(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000F1AF4(a1, a2, a3, _s14DataAggregatorC5PlaceVMa);
}

uint64_t sub_1000F1AAC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000F1AF4(a1, a2, a3, (uint64_t (*)(void))_s30MOSuggestionAssetMapsClustererC7ClusterVMa);
}

uint64_t sub_1000F1AC4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000F1AF4(a1, a2, a3, type metadata accessor for InsightsDataManager.TopAssetCategory);
}

uint64_t sub_1000F1ADC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000F1AF4(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1000F1AF4(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1000F1C38(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_1000F1CF4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1000F1D00(a1, a2, a3, &qword_1007FC158);
}

uint64_t sub_1000F1D00(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = sub_100010218(a4);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1000F1E40(uint64_t a1)
{
  return sub_1000F1750(0, *(void *)(a1 + 16), 0, (char *)a1);
}

double sub_1000F1E54@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000F1ED4(a1, (uint64_t (*)(uint64_t))sub_10001B6A4, (void (*)(uint64_t, uint64_t))sub_1000F2340, (void (*)(void))sub_100548CF4, a2);
}

double sub_1000F1E94@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000F1ED4(a1, sub_10001B6A4, (void (*)(uint64_t, uint64_t))sub_1000F2340, (void (*)(void))sub_100548D0C, a2);
}

double sub_1000F1ED4@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9 = v5;
  swift_bridgeObjectRetain();
  uint64_t v12 = a2(a1);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v9;
    uint64_t v17 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v15 = v17;
    }

    sub_10002102C((_OWORD *)(*(void *)(v15 + 56) + 32 * v12), a5);
    a3(v12, v15);
    *uint64_t v9 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t sub_1000F1FF0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10001B9E8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100549294();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1000F2534(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000F20B8(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10001BA38(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100549440();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1000F26E8(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000F21BC(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_10001BAD0(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unint64_t v6 = v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  uint64_t v11 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100549B0C();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 8 * v6);
  sub_1000F2CA0(v6, v8);
  *uint64_t v3 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1000F2254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10001B5D0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10054B0C4();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1000F30FC(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1000F2340(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v11 = v10;
        String.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        double result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            *uint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000F2534(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              void *v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1000F26E8(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      BOOL v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      Swift::Int v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        sub_1000F9378((unint64_t *)&qword_100811270, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            uint64_t v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1000F29E0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        double result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v9 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (unsigned char *)(v10 + v3);
        uint64_t v12 = (unsigned char *)(v10 + v6);
        if (v3 != v6 || v11 >= v12 + 1) {
          *uint64_t v11 = *v12;
        }
        uint64_t v13 = *(void *)(a2 + 56);
        uint64_t v14 = *(void *)(*(void *)(type metadata accessor for AttributedString() - 8) + 72);
        int64_t v15 = v14 * v3;
        double result = v13 + v14 * v3;
        int64_t v16 = v14 * v6;
        unint64_t v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v15 == v16) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v9 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v9) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
    JUMPOUT(0x1000F2C88);
  }
  *(void *)(a2 + 16) = v24;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1000F2CA0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v9 = (Swift::UInt64 *)(*(void *)(a2 + 48) + 16 * v6);
        Swift::UInt64 v10 = *v9;
        Swift::UInt64 v11 = v9[1];
        Hasher.init(_seed:)();
        if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v12 = v10;
        }
        else {
          Swift::UInt64 v12 = 0;
        }
        Hasher._combine(_:)(v12);
        if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v13 = v11;
        }
        else {
          Swift::UInt64 v13 = 0;
        }
        Hasher._combine(_:)(v13);
        double result = Hasher._finalize()();
        unint64_t v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_17;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_17:
          uint64_t v15 = *(void *)(a2 + 48);
          int64_t v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *int64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (void *)(v18 + 8 * v3);
          uint64_t v20 = (void *)(v18 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
          {
            *uint64_t v19 = *v20;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  uint64_t *v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F2E74(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        double result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          Swift::UInt64 v11 = (unsigned char *)(v10 + v3);
          Swift::UInt64 v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *Swift::UInt64 v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          unint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *unint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *int64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x1000F30E4);
  }
  *(void *)(a2 + 16) = v21;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1000F30FC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::UInt64 v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::UInt64 v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

char *sub_1000F32DC(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v6 = *v4;
  int64_t v7 = *((void *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > *((void *)v6 + 3) >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    unint64_t v6 = sub_1002A54A0(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  int64_t v16 = &v6[16 * a1 + 32];
  double result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = *((void *)v6 + 2);
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    double result = v16 + 16;
    BOOL v21 = &v6[16 * a2 + 32];
    if (v16 + 16 != v21 || result >= &v21[16 * v20]) {
      double result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = *((void *)v6 + 2);
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      *((void *)v6 + 2) = v23;
LABEL_20:
      *(void *)int64_t v16 = a3;
      *((void *)v16 + 1) = a4;
      void *v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  double result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000F3460(uint64_t a1, int64_t a2, char a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  double result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    double result = (char *)sub_1002A5EEC(result, v13, 1, v5);
    uint64_t v5 = result;
  }
  uint64_t v14 = v5 + 4;
  int64_t v15 = (char *)v5 + a1 + 32;
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  size_t v17 = v16 - a2;
  if (__OFSUB__(v16, a2)) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    double result = v15 + 1;
    uint64_t v18 = (char *)v14 + a2;
    if (v15 + 1 != (char *)v14 + a2 || result >= &v18[v17]) {
      double result = (char *)memmove(result, v18, v17);
    }
    uint64_t v19 = v5[2];
    BOOL v20 = __OFADD__(v19, v9);
    uint64_t v21 = v19 + v9;
    if (!v20)
    {
      uint64_t v5[2] = v21;
LABEL_20:
      *int64_t v15 = a3;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  double result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F35C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = a3;
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v26 < v4) {
    goto LABEL_36;
  }
LABEL_4:
  uint64_t v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v10 = v9 - v6;
    if (!__OFSUB__(v9, v6)) {
      goto LABEL_7;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v12 = v27 + v30;
    if (!__OFADD__(v27, v30)) {
      goto LABEL_9;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v10 = v9 - v6;
  if (__OFSUB__(v9, v6)) {
    goto LABEL_40;
  }
LABEL_7:
  uint64_t v30 = v10;
  if (*v3 >> 62) {
    goto LABEL_41;
  }
  uint64_t v11 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v12 = v11 + v10;
  if (__OFADD__(v11, v10)) {
    goto LABEL_43;
  }
LABEL_9:
  unint64_t v13 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v13;
  unint64_t v29 = v7;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v13 & 0x8000000000000000) != 0
    || (v13 & 0x4000000000000000) != 0
    || (uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8, v12 > *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v13 >> 62))
    {
LABEL_14:
      swift_bridgeObjectRetain();
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v13;
      uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_15;
    }
LABEL_44:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v16 = v15 + 32 + 8 * v5;
  sub_10001B284(0, (unint64_t *)&qword_100803F80);
  swift_arrayDestroy();
  uint64_t v17 = v30;
  if (!v30) {
    goto LABEL_26;
  }
  if (!(v13 >> 62))
  {
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v19 = v18 - v4;
    if (!__OFSUB__(v18, v4)) {
      goto LABEL_18;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v17 = v30;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = v30;
  uint64_t v19 = v28 - v4;
  if (__OFSUB__(v28, v4)) {
    goto LABEL_47;
  }
LABEL_18:
  if (v19 < 0)
  {
LABEL_51:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  BOOL v20 = (char *)(v16 + 8 * v9);
  uint64_t v21 = (char *)(v15 + 32 + 8 * v4);
  if (v20 != v21 || v20 >= &v21[8 * v19])
  {
    memmove(v20, v21, 8 * v19);
    uint64_t v17 = v30;
  }
  if (v13 >> 62) {
    goto LABEL_48;
  }
  uint64_t v22 = *(void *)(v15 + 16);
LABEL_24:
  if (__OFADD__(v22, v17))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(void *)(v15 + 16) = v22 + v17;
LABEL_26:
  if (v9 >= 1)
  {
    if (v29)
    {
      unint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v24 = sub_1000CD474(v23);
      swift_bridgeObjectRelease();
      sub_1000F3EB8((uint64_t)(v24 + 4), v24[2], v9);
      swift_release();
      goto LABEL_31;
    }
    if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) == v9)
    {
      swift_arrayInitWithCopy();
      goto LABEL_31;
    }
    goto LABEL_50;
  }
LABEL_31:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1000F399C(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_1002A55B0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = *(void *)(type metadata accessor for Loc(0) - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_33;
  }
  if (v19 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    sub_1000F92B0(a3, v17, type metadata accessor for Loc);
  }
  return sub_10001457C(a3, &qword_1007FDD38);
}

uint64_t sub_1000F3BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      unint64_t *v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = (void *)(v13 + 32 + 8 * v6);
  sub_10001B284(0, (unint64_t *)&unk_10080C360);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *uint64_t v14 = v3;

  return specialized Array._endMutation()();
}

uint64_t sub_1000F3EB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    if (result)
    {
      sub_10001B284(0, (unint64_t *)&qword_100803F80);
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F3F30(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1000F3F44(void *a1)
{
  return sub_1000967D4(0, a1[2], 0, a1);
}

uint64_t sub_1000F3F58(uint64_t a1)
{
  return sub_1000967F4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000F3F6C(uint64_t a1)
{
  return sub_100096978(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000F3F80(void *a1)
{
  return sub_100096B00(0, a1[2], 0, a1);
}

uint64_t sub_1000F3F94(void *a1)
{
  return sub_100096B20(0, a1[2], 0, a1);
}

uint64_t sub_1000F3FA8(void *a1)
{
  return sub_100097110(0, a1[2], 0, a1);
}

uint64_t sub_1000F3FBC(void *a1)
{
  return sub_100097124(0, a1[2], 0, a1);
}

uint64_t sub_1000F3FD0(void *a1)
{
  return sub_100097450(0, a1[2], 0, a1);
}

uint64_t sub_1000F3FE4(uint64_t a1)
{
  return sub_100096248(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000F3FF8(void *a1)
{
  return sub_100097A1C(0, a1[2], 0, a1);
}

void *sub_1000F400C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010218(&qword_1007FDCE0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_1000F423C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v50 = a1;
  uint64_t v9 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  __chkstk_darwin(v15);
  unint64_t v53 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v57 = (char *)&v48 - v18;
  __chkstk_darwin(v19);
  unint64_t v63 = (char *)&v48 - v21;
  uint64_t v49 = a2;
  if (a3 != a2)
  {
    uint64_t v22 = *a4;
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v20 + 32);
    uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    uint64_t v61 = (void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v54 = v22;
    uint64_t v24 = v22 + 8 * a3 - 8;
    unint64_t v52 = v14;
    uint64_t v58 = (void (**)(char *, char *, uint64_t))(v20 + 32);
LABEL_5:
    uint64_t v25 = *(void **)(v54 + 8 * a3);
    uint64_t v26 = v50;
    uint64_t v51 = v24;
    uint64_t v55 = a3;
    while (1)
    {
      char v27 = *(void **)v24;
      id v28 = v25;
      id v64 = v27;
      id v60 = v28;
      id v29 = [v28 id];
      if (!v29) {
        break;
      }
      uint64_t v30 = v29;
      uint64_t v31 = v57;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = *v23;
      (*v23)(v14, v31, v15);
      uint64_t v33 = *v62;
      (*v62)(v14, 0, 1, v15);
      if ((*v56)(v14, 1, v15) == 1) {
        goto LABEL_11;
      }
      v32(v63, v14, v15);
      if (!*(void *)(a5 + 16)) {
        goto LABEL_14;
      }
LABEL_12:
      unint64_t v34 = sub_10001BA38((uint64_t)v63);
      if (v35)
      {
        uint64_t v59 = *(void *)(*(void *)(a5 + 56) + 8 * v34);
        goto LABEL_15;
      }
LABEL_14:
      uint64_t v59 = 0;
LABEL_15:
      uint64_t v36 = *v61;
      (*v61)((uint64_t)v63, v15);
      id v37 = [v64 id];
      if (!v37)
      {
        v33(v11, 1, 1, v15);
LABEL_20:
        uint64_t v41 = (uint64_t)v53;
        UUID.init()();
        sub_10001457C((uint64_t)v11, &qword_100800950);
        if (!*(void *)(a5 + 16)) {
          goto LABEL_23;
        }
        goto LABEL_21;
      }
      uint64_t v38 = v37;
      uint64_t v39 = v57;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v40 = *v58;
      (*v58)(v11, v39, v15);
      v33(v11, 0, 1, v15);
      if ((*v56)(v11, 1, v15) == 1) {
        goto LABEL_20;
      }
      uint64_t v41 = (uint64_t)v53;
      v40(v53, v11, v15);
      if (!*(void *)(a5 + 16)) {
        goto LABEL_23;
      }
LABEL_21:
      unint64_t v42 = sub_10001BA38(v41);
      if (v43)
      {
        uint64_t v44 = *(void *)(*(void *)(a5 + 56) + 8 * v42);
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v44 = 0;
LABEL_24:
      v36(v41, v15);

      uint64_t v23 = v58;
      BOOL v45 = v59 < v44;
      uint64_t v46 = v55;
      uint64_t v14 = v52;
      if (!v45) {
        goto LABEL_4;
      }
      if (!v54)
      {
        __break(1u);
        return;
      }
      unint64_t v47 = *(void **)v24;
      uint64_t v25 = *(void **)(v24 + 8);
      *(void *)uint64_t v24 = v25;
      *(void *)(v24 + 8) = v47;
      v24 -= 8;
      if (v46 == ++v26)
      {
LABEL_4:
        a3 = v46 + 1;
        uint64_t v24 = v51 + 8;
        if (a3 == v49) {
          return;
        }
        goto LABEL_5;
      }
    }
    uint64_t v33 = *v62;
    (*v62)(v14, 1, 1, v15);
LABEL_11:
    UUID.init()();
    sub_10001457C((uint64_t)v14, &qword_100800950);
    if (!*(void *)(a5 + 16)) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
}

uint64_t sub_1000F470C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v6 - 8);
  Swift::Int v8 = (char *)&v189 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v189 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v189 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v189 - v16;
  v219 = (void **)type metadata accessor for UUID();
  uint64_t v18 = (uint64_t)*(v219 - 1);
  __chkstk_darwin(v219);
  uint64_t v217 = (uint64_t)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v206 = (char *)&v189 - v21;
  __chkstk_darwin(v22);
  uint64_t v202 = (uint64_t)&v189 - v23;
  __chkstk_darwin(v24);
  v211 = (char *)&v189 - v25;
  __chkstk_darwin(v26);
  v197 = (char *)&v189 - v27;
  v194 = a1;
  Swift::Int v28 = a1[1];
  uint64_t v216 = a2;
  swift_bridgeObjectRetain_n();
  Swift::Int v29 = _minimumMergeRunLength(_:)(v28);
  if (v29 >= v28)
  {
    if (v28 < 0) {
      goto LABEL_180;
    }
    if (v28)
    {
      uint64_t v34 = v216;
      swift_bridgeObjectRetain();
      sub_1000F423C(0, v28, 1, v194, v34);
    }
    return swift_bridgeObjectRelease_n();
  }
  if (v28 >= 0) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = v28 + 1;
  }
  if (v28 < -1) {
    goto LABEL_188;
  }
  v195 = v17;
  v196 = v14;
  Swift::Int v200 = v28;
  Swift::Int v193 = v29;
  if (v28 < 2)
  {
    uint64_t v36 = (char *)_swiftEmptyArrayStorage;
    uint64_t v222 = (uint64_t)_swiftEmptyArrayStorage;
    v201 = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v33 = v219;
    if (v28 != 1)
    {
      unint64_t v120 = _swiftEmptyArrayStorage[2];
LABEL_144:
      if (v120 >= 2)
      {
        v177 = (char *)*v194;
        v218 = (char *)*v194;
        do
        {
          unint64_t v178 = v120 - 2;
          if (v120 < 2) {
            goto LABEL_174;
          }
          if (!v177) {
            goto LABEL_187;
          }
          uint64_t v179 = v3;
          v180 = v36;
          uint64_t v181 = *(void *)&v36[16 * v178 + 32];
          uint64_t v182 = *(void *)&v36[16 * v120 + 24];
          uint64_t v183 = *(void *)&v36[16 * v120 + 16];
          v219 = (void **)&v177[8 * v181];
          v184 = (void **)&v177[8 * v183];
          unint64_t v185 = (unint64_t)&v177[8 * v182];
          uint64_t v186 = v216;
          swift_bridgeObjectRetain();
          sub_1000F0EA8(v219, v184, v185, v201, v186);
          if (v179) {
            break;
          }
          if (v182 < v181) {
            goto LABEL_176;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v180 = sub_1000F1E40((uint64_t)v180);
          }
          if (v178 >= *((void *)v180 + 2)) {
            goto LABEL_177;
          }
          v187 = &v180[16 * v178 + 32];
          *(void *)v187 = v181;
          *((void *)v187 + 1) = v182;
          unint64_t v188 = *((void *)v180 + 2);
          if (v120 > v188) {
            goto LABEL_178;
          }
          memmove(&v180[16 * v120 + 16], &v180[16 * v120 + 32], 16 * (v188 - v120));
          uint64_t v36 = v180;
          *((void *)v180 + 2) = v188 - 1;
          unint64_t v120 = v188 - 1;
          uint64_t v3 = 0;
          v177 = v218;
        }
        while (v188 > 2);
      }
LABEL_155:
      swift_bridgeObjectRelease();
LABEL_158:
      *(void *)((v222 & 0xFFFFFFFFFFFFFF8) + 0x1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v31 = v30 >> 1;
    type metadata accessor for JournalEntryAssetMO();
    uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v31;
    v201 = (id *)((v32 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v222 = v32;
    uint64_t v33 = v219;
  }
  unint64_t v37 = 0;
  uint64_t v38 = *v194;
  uint64_t v39 = (void (**)(void))(v18 + 32);
  v210 = (unsigned int (**)(uint64_t, uint64_t, void **))(v18 + 48);
  v214 = (void (**)(uint64_t, void **))(v18 + 8);
  v215 = (void (**)(char *, uint64_t, uint64_t, void **))(v18 + 56);
  uint64_t v191 = v38 + 16;
  uint64_t v205 = v38;
  uint64_t v192 = v38 - 8;
  uint64_t v36 = (char *)_swiftEmptyArrayStorage;
  v208 = v11;
  int64_t v40 = v200;
  v212 = (void (**)(void))(v18 + 32);
  v207 = v8;
  while (1)
  {
    int64_t v41 = v37;
    int64_t v42 = v37 + 1;
    v199 = v36;
    uint64_t v203 = v37;
    if ((uint64_t)(v37 + 1) >= v40)
    {
      Swift::Int v77 = v193;
      goto LABEL_54;
    }
    char v43 = v36;
    uint64_t v44 = *(void **)(v205 + 8 * v42);
    unint64_t v45 = v37;
    id v220 = *(id *)(v205 + 8 * v37);
    id v46 = v220;
    v221 = v44;
    id v47 = v44;
    id v48 = v46;
    LODWORD(v198) = sub_1000EE7FC(&v221, &v220, v216);
    if (v3)
    {
      swift_bridgeObjectRelease();

      goto LABEL_158;
    }

    int64_t v42 = v45 + 2;
    int64_t v41 = v45;
    if ((uint64_t)(v45 + 2) >= v200)
    {
      uint64_t v39 = v212;
      uint64_t v36 = v43;
      goto LABEL_45;
    }
    uint64_t v49 = (id *)(v191 + 8 * v45);
    uint64_t v39 = v212;
    while (1)
    {
      int64_t v209 = v42;
      uint64_t v50 = *(v49 - 1);
      id v51 = *v49;
      v218 = v50;
      id v52 = [v51 id];
      if (!v52)
      {
        uint64_t v57 = *v215;
        uint64_t v56 = (uint64_t)v195;
        (*v215)(v195, 1, 1, v33);
LABEL_23:
        uint64_t v58 = (uint64_t)v197;
        UUID.init()();
        sub_10001457C(v56, &qword_100800950);
        goto LABEL_24;
      }
      unint64_t v53 = v52;
      uint64_t v54 = v211;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v55 = *v39;
      uint64_t v56 = (uint64_t)v195;
      ((void (*)(char *, char *, void **))*v39)(v195, v54, v33);
      uint64_t v57 = *v215;
      (*v215)((char *)v56, 0, 1, v33);
      if ((*v210)(v56, 1, v33) == 1) {
        goto LABEL_23;
      }
      uint64_t v58 = (uint64_t)v197;
      v55();
LABEL_24:
      uint64_t v59 = v216;
      uint64_t v60 = *(void *)(v216 + 16);
      v213 = (void **)v51;
      if (v60 && (unint64_t v61 = sub_10001BA38(v58), (v62 & 1) != 0)) {
        v204 = *(void ***)(*(void *)(v59 + 56) + 8 * v61);
      }
      else {
        v204 = 0;
      }
      uint64_t v63 = v3;
      id v64 = *v214;
      uint64_t v65 = v58;
      uint64_t v33 = v219;
      (*v214)(v65, v219);
      id v66 = [v218 id];
      if (v66)
      {
        uint64_t v67 = v66;
        Swift::Int v68 = v211;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v69 = *v212;
        uint64_t v70 = (uint64_t)v196;
        uint64_t v71 = v68;
        uint64_t v39 = v212;
        ((void (*)(char *, char *, void **))*v212)(v196, v71, v33);
        v57((char *)v70, 0, 1, v33);
        if ((*v210)(v70, 1, v33) != 1)
        {
          ((void (*)(uint64_t, uint64_t, void **))v69)(v202, v70, v33);
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)v196;
        v57(v196, 1, 1, v33);
      }
      UUID.init()();
      sub_10001457C(v70, &qword_100800950);
LABEL_33:
      Swift::Int v8 = v207;
      uint64_t v72 = v216;
      uint64_t v3 = v63;
      if (*(void *)(v216 + 16))
      {
        unint64_t v73 = sub_10001BA38(v202);
        unint64_t v74 = v213;
        uint64_t v76 = (v75 & 1) != 0 ? *(void *)(*(void *)(v72 + 56) + 8 * v73) : 0;
        unint64_t v11 = v208;
      }
      else
      {
        uint64_t v76 = 0;
        unint64_t v74 = v213;
      }
      v64(v202, v33);

      if (((v198 ^ ((uint64_t)v204 >= v76)) & 1) == 0) {
        break;
      }
      int64_t v42 = v209 + 1;
      ++v49;
      uint64_t v36 = v199;
      if (v200 == v209 + 1)
      {
        int64_t v42 = v200;
        goto LABEL_44;
      }
    }
    uint64_t v36 = v199;
    int64_t v42 = v209;
LABEL_44:
    int64_t v41 = v203;
LABEL_45:
    Swift::Int v77 = v193;
    if (v198) {
      break;
    }
LABEL_54:
    if (v42 >= v200) {
      goto LABEL_89;
    }
    if (__OFSUB__(v42, v41)) {
      goto LABEL_179;
    }
    if (v42 - v41 >= v77) {
      goto LABEL_89;
    }
    if (__OFADD__(v41, v77)) {
      goto LABEL_181;
    }
    int64_t v83 = v200;
    if (v41 + v77 < v200) {
      int64_t v83 = v41 + v77;
    }
    if (v83 < v41)
    {
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    if (v42 == v83) {
      goto LABEL_89;
    }
    uint64_t v190 = v3;
    uint64_t v84 = (void **)(v192 + 8 * v42);
    uint64_t v85 = v205;
    int64_t v198 = v83;
    while (2)
    {
      uint64_t v87 = *(void **)(v85 + 8 * v42);
      int64_t v88 = v41;
      v204 = v84;
      int64_t v209 = v42;
      while (1)
      {
        uint64_t v89 = *v84;
        BOOL v90 = v87;
        v218 = v89;
        v213 = v90;
        id v91 = [v90 id];
        if (!v91)
        {
          uint64_t v95 = *v215;
          (*v215)(v11, 1, 1, v33);
          uint64_t v97 = (uint64_t)v206;
LABEL_70:
          UUID.init()();
          sub_10001457C((uint64_t)v11, &qword_100800950);
          goto LABEL_71;
        }
        char v92 = v91;
        unint64_t v93 = v211;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v94 = *v39;
        ((void (*)(char *, char *, void **))*v39)(v11, v93, v33);
        uint64_t v95 = *v215;
        (*v215)(v11, 0, 1, v33);
        unsigned int v96 = (*v210)((uint64_t)v11, 1, v33);
        uint64_t v97 = (uint64_t)v206;
        if (v96 == 1) {
          goto LABEL_70;
        }
        ((void (*)(char *, char *, void **))v94)(v206, v11, v33);
LABEL_71:
        uint64_t v98 = v216;
        if (*(void *)(v216 + 16) && (unint64_t v99 = sub_10001BA38(v97), (v100 & 1) != 0)) {
          uint64_t v101 = *(void *)(*(void *)(v98 + 56) + 8 * v99);
        }
        else {
          uint64_t v101 = 0;
        }
        uint64_t v102 = *v214;
        uint64_t v103 = v97;
        uint64_t v104 = v219;
        (*v214)(v103, v219);
        id v105 = [v218 id];
        if (!v105)
        {
          uint64_t v109 = (uint64_t)v207;
          v95(v207, 1, 1, v104);
LABEL_79:
          UUID.init()();
          sub_10001457C(v109, &qword_100800950);
          goto LABEL_80;
        }
        uint64_t v106 = v105;
        uint64_t v107 = v211;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v108 = *v39;
        uint64_t v109 = (uint64_t)v207;
        uint64_t v110 = v107;
        uint64_t v85 = v205;
        ((void (*)(char *, char *, void **))v108)(v207, v110, v104);
        v95((char *)v109, 0, 1, v104);
        if ((*v210)(v109, 1, v104) == 1) {
          goto LABEL_79;
        }
        ((void (*)(uint64_t, uint64_t, void **))v108)(v217, v109, v219);
LABEL_80:
        Swift::Int v8 = (char *)v109;
        uint64_t v111 = v216;
        uint64_t v39 = v212;
        if (*(void *)(v216 + 16) && (unint64_t v112 = sub_10001BA38(v217), (v113 & 1) != 0)) {
          uint64_t v114 = *(void *)(*(void *)(v111 + 56) + 8 * v112);
        }
        else {
          uint64_t v114 = 0;
        }
        v102(v217, v219);

        if (v101 >= v114) {
          break;
        }
        unint64_t v11 = v208;
        int64_t v86 = v209;
        if (!v85) {
          goto LABEL_184;
        }
        unint64_t v115 = *v84;
        uint64_t v87 = v84[1];
        *uint64_t v84 = v87;
        v84[1] = v115;
        --v84;
        ++v88;
        uint64_t v33 = v219;
        if (v86 == v88) {
          goto LABEL_64;
        }
      }
      unint64_t v11 = v208;
      int64_t v86 = v209;
      uint64_t v33 = v219;
LABEL_64:
      int64_t v42 = v86 + 1;
      int64_t v41 = v203;
      uint64_t v84 = v204 + 1;
      if (v42 != v198) {
        continue;
      }
      break;
    }
    int64_t v42 = v198;
    uint64_t v3 = v190;
    uint64_t v36 = v199;
LABEL_89:
    if (v42 < v41) {
      goto LABEL_175;
    }
    uint64_t v116 = v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v209 = v42;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v36 = v116;
    }
    else {
      uint64_t v36 = sub_1000F1750(0, *((void *)v116 + 2) + 1, 1, v116);
    }
    unint64_t v119 = *((void *)v36 + 2);
    unint64_t v118 = *((void *)v36 + 3);
    unint64_t v120 = v119 + 1;
    if (v119 >= v118 >> 1) {
      uint64_t v36 = sub_1000F1750((char *)(v118 > 1), v119 + 1, 1, v36);
    }
    *((void *)v36 + 2) = v120;
    uint64_t v121 = v36 + 32;
    unint64_t v122 = &v36[16 * v119 + 32];
    int64_t v123 = v209;
    *(void *)unint64_t v122 = v203;
    *((void *)v122 + 1) = v123;
    if (v119)
    {
      v218 = v36 + 32;
      while (1)
      {
        unint64_t v124 = v120 - 1;
        if (v120 >= 4)
        {
          uint64_t v129 = &v121[16 * v120];
          uint64_t v130 = *((void *)v129 - 8);
          uint64_t v131 = *((void *)v129 - 7);
          BOOL v135 = __OFSUB__(v131, v130);
          uint64_t v132 = v131 - v130;
          if (v135) {
            goto LABEL_163;
          }
          uint64_t v134 = *((void *)v129 - 6);
          uint64_t v133 = *((void *)v129 - 5);
          BOOL v135 = __OFSUB__(v133, v134);
          uint64_t v127 = v133 - v134;
          char v128 = v135;
          if (v135) {
            goto LABEL_164;
          }
          unint64_t v136 = v120 - 2;
          Swift::Int v137 = &v121[16 * v120 - 32];
          uint64_t v139 = *(void *)v137;
          uint64_t v138 = *((void *)v137 + 1);
          BOOL v135 = __OFSUB__(v138, v139);
          uint64_t v140 = v138 - v139;
          if (v135) {
            goto LABEL_166;
          }
          BOOL v135 = __OFADD__(v127, v140);
          uint64_t v141 = v127 + v140;
          if (v135) {
            goto LABEL_169;
          }
          if (v141 >= v132)
          {
            v159 = &v121[16 * v124];
            uint64_t v161 = *(void *)v159;
            uint64_t v160 = *((void *)v159 + 1);
            BOOL v135 = __OFSUB__(v160, v161);
            uint64_t v162 = v160 - v161;
            if (v135) {
              goto LABEL_173;
            }
            BOOL v152 = v127 < v162;
            goto LABEL_127;
          }
        }
        else
        {
          if (v120 != 3)
          {
            uint64_t v153 = *((void *)v36 + 4);
            uint64_t v154 = *((void *)v36 + 5);
            BOOL v135 = __OFSUB__(v154, v153);
            uint64_t v146 = v154 - v153;
            char v147 = v135;
            goto LABEL_121;
          }
          uint64_t v126 = *((void *)v36 + 4);
          uint64_t v125 = *((void *)v36 + 5);
          BOOL v135 = __OFSUB__(v125, v126);
          uint64_t v127 = v125 - v126;
          char v128 = v135;
        }
        if (v128) {
          goto LABEL_165;
        }
        unint64_t v136 = v120 - 2;
        v142 = &v121[16 * v120 - 32];
        uint64_t v144 = *(void *)v142;
        uint64_t v143 = *((void *)v142 + 1);
        BOOL v145 = __OFSUB__(v143, v144);
        uint64_t v146 = v143 - v144;
        char v147 = v145;
        if (v145) {
          goto LABEL_168;
        }
        v148 = &v121[16 * v124];
        uint64_t v150 = *(void *)v148;
        uint64_t v149 = *((void *)v148 + 1);
        BOOL v135 = __OFSUB__(v149, v150);
        uint64_t v151 = v149 - v150;
        if (v135) {
          goto LABEL_171;
        }
        if (__OFADD__(v146, v151)) {
          goto LABEL_172;
        }
        if (v146 + v151 >= v127)
        {
          BOOL v152 = v127 < v151;
LABEL_127:
          if (v152) {
            unint64_t v124 = v136;
          }
          goto LABEL_129;
        }
LABEL_121:
        if (v147) {
          goto LABEL_167;
        }
        v155 = &v121[16 * v124];
        uint64_t v157 = *(void *)v155;
        uint64_t v156 = *((void *)v155 + 1);
        BOOL v135 = __OFSUB__(v156, v157);
        uint64_t v158 = v156 - v157;
        if (v135) {
          goto LABEL_170;
        }
        if (v158 < v146) {
          goto LABEL_138;
        }
LABEL_129:
        unint64_t v163 = v124 - 1;
        if (v124 - 1 >= v120)
        {
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
          goto LABEL_182;
        }
        if (!v205) {
          goto LABEL_185;
        }
        v164 = v36;
        v165 = v8;
        uint64_t v166 = v3;
        v167 = &v121[16 * v163];
        uint64_t v168 = *(void *)v167;
        unint64_t v169 = v124;
        v170 = &v121[16 * v124];
        uint64_t v171 = *(void *)v170;
        uint64_t v172 = *((void *)v170 + 1);
        v213 = (void **)(v205 + 8 * *(void *)v167);
        uint64_t v203 = v205 + 8 * v172;
        v204 = (void **)(v205 + 8 * v171);
        uint64_t v173 = v216;
        swift_bridgeObjectRetain();
        sub_1000F0EA8(v213, v204, v203, v201, v173);
        if (v166) {
          goto LABEL_155;
        }
        if (v172 < v168) {
          goto LABEL_160;
        }
        v174 = v164;
        if (v169 > *((void *)v164 + 2)) {
          goto LABEL_161;
        }
        *(void *)v167 = v168;
        *(void *)&v218[16 * v163 + 8] = v172;
        unint64_t v175 = *((void *)v164 + 2);
        if (v169 >= v175) {
          goto LABEL_162;
        }
        unint64_t v120 = v175 - 1;
        v176 = v174;
        memmove(v170, v170 + 16, 16 * (v175 - 1 - v169));
        uint64_t v36 = v176;
        uint64_t v121 = v218;
        uint64_t v33 = v219;
        *((void *)v176 + 2) = v175 - 1;
        unint64_t v11 = v208;
        uint64_t v39 = v212;
        uint64_t v3 = 0;
        Swift::Int v8 = v165;
        if (v175 <= 2) {
          goto LABEL_138;
        }
      }
    }
    unint64_t v120 = 1;
LABEL_138:
    int64_t v40 = v200;
    unint64_t v37 = v209;
    if (v209 >= v200) {
      goto LABEL_144;
    }
  }
  if (v42 >= v41)
  {
    if (v41 < v42)
    {
      uint64_t v78 = (uint64_t *)(v192 + 8 * v42);
      int64_t v79 = v42;
      int64_t v80 = v41;
      unint64_t v81 = (uint64_t *)(v205 + 8 * v41);
      while (1)
      {
        if (v80 != --v79)
        {
          if (!v205) {
            goto LABEL_186;
          }
          uint64_t v82 = *v81;
          *unint64_t v81 = *v78;
          *uint64_t v78 = v82;
        }
        ++v80;
        --v78;
        ++v81;
        if (v80 >= v79) {
          goto LABEL_54;
        }
      }
    }
    goto LABEL_54;
  }
LABEL_183:
  __break(1u);
LABEL_184:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_185:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_186:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_187:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_188:
  swift_bridgeObjectRelease_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F578C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1000F3F30(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  swift_bridgeObjectRetain();
  sub_1000F470C(v8, a2);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._endMutation()();
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_1000F5838(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100010218(&qword_1007FDCC8);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  Swift::Int v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    sub_1000F9378(&qword_1007FDCD0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_1000F9378(&qword_1007FDCD8, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      while (1)
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      uint64_t result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000F5AEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100010218(&qword_1007FDCA0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    char v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000F9378(&qword_1007FDCA8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000F9378((unint64_t *)&unk_100811330, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000F5E04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptySetSingleton;
  }
  sub_100010218(&qword_100811260);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v26 = v1;
  uint64_t v27 = a1 + 32;
  do
  {
    int v6 = *(unsigned __int8 *)(v27 + v4++);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v7 = Hasher._finalize()();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        unint64_t v13 = 0xE500000000000000;
        uint64_t v14 = 0x6F746F6870;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            uint64_t v14 = 0x746F68506576696CLL;
            unint64_t v13 = 0xE90000000000006FLL;
            break;
          case 2:
            uint64_t v14 = 0x6F65646976;
            break;
          case 3:
            uint64_t v14 = 0x636973756DLL;
            break;
          case 4:
            unint64_t v13 = 0xE700000000000000;
            uint64_t v14 = 0x74736163646F70;
            break;
          case 5:
            unint64_t v13 = 0xE400000000000000;
            uint64_t v14 = 1802465122;
            break;
          case 6:
            uint64_t v14 = 0x6F69647561;
            break;
          case 7:
            uint64_t v14 = 0x7469736976;
            break;
          case 8:
            uint64_t v14 = 0x6E695069746C756DLL;
            unint64_t v13 = 0xEB0000000070614DLL;
            break;
          case 9:
            unint64_t v13 = 0xEA00000000007061;
            uint64_t v14 = 0x4D636972656E6567;
            break;
          case 0xA:
            unint64_t v13 = 0xE400000000000000;
            uint64_t v14 = 1802398060;
            break;
          case 0xB:
            unint64_t v13 = 0xE700000000000000;
            uint64_t v14 = 0x746361746E6F63;
            break;
          case 0xC:
            uint64_t v14 = 0x4974756F6B726F77;
            unint64_t v13 = 0xEB000000006E6F63;
            break;
          case 0xD:
            uint64_t v14 = 0x5274756F6B726F77;
            unint64_t v13 = 0xEC0000006574756FLL;
            break;
          case 0xE:
            uint64_t v14 = 0x697463656C666572;
            unint64_t v13 = 0xEA00000000006E6FLL;
            break;
          case 0xF:
            uint64_t v14 = 0x4D664F6574617473;
            unint64_t v13 = 0xEB00000000646E69;
            break;
          case 0x10:
            uint64_t v14 = 0x63416E6F69746F6DLL;
            unint64_t v13 = 0xEE00797469766974;
            break;
          case 0x11:
            uint64_t v14 = 0x7261506472696874;
            unint64_t v13 = 0xEF616964654D7974;
            break;
          case 0x12:
            uint64_t v14 = 0x6C6F686563616C70;
            unint64_t v13 = 0xEB00000000726564;
            break;
          case 0x13:
            uint64_t v14 = 0x76456B6165727473;
            unint64_t v13 = 0xEB00000000746E65;
            break;
          case 0x14:
            unint64_t v13 = 0xE700000000000000;
            uint64_t v14 = 0x6E776F6E6B6E75;
            break;
          default:
            break;
        }
        unint64_t v15 = 0xE500000000000000;
        uint64_t v16 = 0x6F746F6870;
        switch(v6)
        {
          case 1:
            unint64_t v15 = 0xE90000000000006FLL;
            if (v14 == 0x746F68506576696CLL) {
              goto LABEL_64;
            }
            goto LABEL_65;
          case 2:
            uint64_t v17 = 1701079414;
            goto LABEL_37;
          case 3:
            if (v14 != 0x636973756DLL) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 4:
            unint64_t v15 = 0xE700000000000000;
            uint64_t v18 = 0x736163646F70;
            goto LABEL_47;
          case 5:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 1802465122) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 6:
            uint64_t v17 = 1768191329;
LABEL_37:
            if (v14 != (v17 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000)) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 7:
            if (v14 != 0x7469736976) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 8:
            uint64_t v19 = 0x6E695069746C756DLL;
            uint64_t v20 = 7364941;
            goto LABEL_60;
          case 9:
            unint64_t v15 = 0xEA00000000007061;
            if (v14 != 0x4D636972656E6567) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 10:
            unint64_t v15 = 0xE400000000000000;
            if (v14 != 1802398060) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 11:
            unint64_t v15 = 0xE700000000000000;
            uint64_t v18 = 0x6361746E6F63;
LABEL_47:
            if (v14 != (v18 & 0xFFFFFFFFFFFFLL | 0x74000000000000)) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 12:
            uint64_t v19 = 0x4974756F6B726F77;
            uint64_t v20 = 7237475;
            goto LABEL_60;
          case 13:
            unint64_t v15 = 0xEC0000006574756FLL;
            if (v14 != 0x5274756F6B726F77) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 14:
            unint64_t v15 = 0xEA00000000006E6FLL;
            if (v14 != 0x697463656C666572) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 15:
            uint64_t v19 = 0x4D664F6574617473;
            uint64_t v20 = 6581865;
            goto LABEL_60;
          case 16:
            unint64_t v15 = 0xEE00797469766974;
            if (v14 != 0x63416E6F69746F6DLL) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 17:
            unint64_t v15 = 0xEF616964654D7974;
            if (v14 != 0x7261506472696874) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 18:
            uint64_t v19 = 0x6C6F686563616C70;
            uint64_t v20 = 7497060;
LABEL_60:
            unint64_t v15 = v20 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v14 != v19) {
              goto LABEL_65;
            }
            goto LABEL_64;
          case 19:
            uint64_t v16 = 0x76456B6165727473;
            unint64_t v15 = 0xEB00000000746E65;
            goto LABEL_63;
          case 20:
            unint64_t v15 = 0xE700000000000000;
            if (v14 != 0x6E776F6E6B6E75) {
              goto LABEL_65;
            }
            goto LABEL_64;
          default:
LABEL_63:
            if (v14 != v16) {
              goto LABEL_65;
            }
LABEL_64:
            if (v13 == v15)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_65:
            char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v21) {
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_70;
            }
            break;
        }
      }
    }
LABEL_70:
    *(void *)(v5 + 8 * v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v22 = *(void *)(v3 + 16);
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
      JUMPOUT(0x1000F6690);
    }
    *(void *)(v3 + 16) = v24;
LABEL_4:
    ;
  }
  while (v4 != v26);
  return (void *)v3;
}

Swift::Int sub_1000F678C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010218(&qword_1007FDC48);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000F68D0(void *a1)
{
  return sub_1000E8FCC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000F68F0()
{
  return sub_1000E9900();
}

void *sub_1000F690C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010218(&qword_1007FDC98);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      Swift::Int result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        Swift::Int result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          Swift::Int result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_1000F6B3C(unint64_t a1)
{
}

uint64_t sub_1000F6B58(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1002A5C84(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F6CD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010218(&qword_1007FDCF8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 8 * v4);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v10 = result & v7;
      unint64_t v11 = (result & (unint64_t)v7) >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * v11);
      uint64_t v13 = 1 << (result & v7);
      uint64_t v14 = *(void *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(void *)(v14 + 8 * v10) != v8)
        {
          unint64_t v10 = (v10 + 1) & v7;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v11) = v13 | v12;
        *(void *)(v14 + 8 * v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v8;
        uint64_t v15 = *(void *)(v3 + 16);
        BOOL v16 = __OFADD__(v15, 1);
        uint64_t v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v17;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1000F6DE0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  _s5AssetCMa();
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1000F70C0(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  a2 += OBJC_IVAR____TtCC7Journal10Journaling5Asset_id;
  while (1)
  {
    id v6 = (a1 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(a1 + 8 * v5 + 32);
    uint64_t v7 = v6;
    char v8 = static UUID.== infix(_:_:)();

    if (v8) {
      return v5;
    }
    uint64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v9 == v4) {
      return 0;
    }
  }
}

unint64_t sub_1000F71D8(unint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000F70C0(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v8)
    {
      unint64_t v24 = *a1;
      if (v24 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        return *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      unint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_54;
      }
      if (*a1 >> 62)
      {
LABEL_55:
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 != v26) {
          goto LABEL_6;
        }
      }
      else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        a2 += OBJC_IVAR____TtCC7Journal10Journaling5Asset_id;
        for (unint64_t i = v6 + 5; ; ++i)
        {
          unint64_t v11 = i - 4;
          unint64_t v12 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_45;
            }
            id v13 = *(id *)(v12 + 8 * i);
          }
          uint64_t v14 = v13;
          unint64_t v9 = static UUID.== infix(_:_:)();

          if ((v9 & 1) == 0) {
            break;
          }
LABEL_32:
          unint64_t v9 = i - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_46;
          }
          if (*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v9 == v23) {
            return v6;
          }
        }
        if (v11 == v6)
        {
LABEL_31:
          if (__OFADD__(v6++, 1)) {
            goto LABEL_47;
          }
          goto LABEL_32;
        }
        unint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v9 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_50;
            }
            if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_51;
            }
            id v16 = *(id *)(v9 + 8 * i);
            goto LABEL_20;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_49;
          }
          id v15 = *(id *)(v9 + 8 * v6 + 32);
          if ((v9 & 0xC000000000000001) == 0) {
            goto LABEL_17;
          }
        }
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v9 = *a1;
LABEL_20:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v9 & 0x8000000000000000) != 0
          || (v9 & 0x4000000000000000) != 0)
        {
          unint64_t v9 = sub_1000EFFC4(v9);
          *a1 = v9;
        }
        uint64_t v18 = *(void **)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x2sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v16;

        specialized Array._endMutation()();
        unint64_t v9 = *a1;
        int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!v19 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
        {
          unint64_t v9 = sub_1000EFFC4(v9);
          *a1 = v9;
        }
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        uint64_t v20 = v9 & 0xFFFFFFFFFFFFFF8;
        if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_53;
        }
        uint64_t v21 = *(void **)(v20 + 8 * i);
        *(void *)(v20 + 8 * i) = v15;

        specialized Array._endMutation()();
        goto LABEL_31;
      }
    }
  }
  return v6;
}

uint64_t sub_1000F7514()
{
  uint64_t v62 = sub_100010218(&qword_1007FC108);
  uint64_t v54 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v1 = (char *)&v52 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v60 = (char *)&v52 - v3;
  __chkstk_darwin(v4);
  uint64_t v67 = (char *)&v52 - v5;
  uint64_t v6 = sub_100010218(&qword_1007FDC60);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v53 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218(&qword_1007FDC68);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (unint64_t *)((char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v52 - v13);
  uint64_t v15 = swift_bridgeObjectRetain();
  id v16 = sub_1000CD084(v15);
  swift_bridgeObjectRelease();
  Swift::Int v68 = v16;
  sub_1000F00F4((void **)&v68);
  uint64_t v17 = v68;
  unint64_t v18 = *((void *)v68 + 2);
  id v64 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  int v19 = (double *)&_swiftEmptyDictionarySingleton;
  uint64_t v63 = (unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48);
  unint64_t v20 = 0;
  unint64_t v61 = v1;
  uint64_t v58 = v11;
  uint64_t v59 = v6;
  uint64_t v56 = v68;
  uint64_t v57 = v14;
  unint64_t v55 = v18;
  while (1)
  {
    if (v20 == v18)
    {
      uint64_t v21 = 1;
      unint64_t v22 = v18;
    }
    else
    {
      if (v20 >= *((void *)v17 + 2)) {
        goto LABEL_22;
      }
      unint64_t v66 = v20 + 1;
      uint64_t v23 = (uint64_t)&v53[*(int *)(v6 + 48)];
      sub_10001B220((uint64_t)v17+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v20, v23, &qword_1007FC108);
      uint64_t v24 = (uint64_t)v11 + *(int *)(v6 + 48);
      *unint64_t v11 = v20;
      sub_10002C4EC(v23, v24, &qword_1007FC108);
      uint64_t v21 = 0;
      unint64_t v22 = v66;
    }
    (*v64)(v11, v21, 1, v6);
    sub_10002C4EC((uint64_t)v11, (uint64_t)v14, &qword_1007FDC68);
    if ((*v63)(v14, 1, v6) == 1)
    {
      swift_release();
      return (uint64_t)v19;
    }
    unint64_t v25 = *v14;
    unint64_t v65 = v22;
    unint64_t v66 = v25;
    uint64_t v26 = (char *)v14 + *(int *)(v6 + 48);
    uint64_t v27 = v62;
    uint64_t v28 = *(int *)(v62 + 48);
    uint64_t v29 = *(void *)&v26[v28];
    uint64_t v30 = type metadata accessor for UUID();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    uint64_t v33 = v60;
    v32(v60, v26, v30);
    *(void *)&v33[v28] = v29;
    uint64_t v34 = *(int *)(v27 + 48);
    uint64_t v35 = (uint64_t)v67;
    v32(v67, v33, v30);
    *(void *)(v35 + v34) = v29;
    uint64_t v36 = *(int *)(v27 + 48);
    uint64_t v37 = (uint64_t)v61;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    v38(v61, v35, v30);
    *(void *)(v37 + v36) = v29;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v68 = v19;
    unint64_t v41 = sub_10001BA38(v37);
    uint64_t v42 = *((void *)v19 + 2);
    BOOL v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    char v45 = v40;
    if (*((void *)v19 + 3) >= v44)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        int v19 = v68;
        if (v40) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100549440();
        int v19 = v68;
        if (v45) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_100545420(v44, isUniquelyReferenced_nonNull_native);
      unint64_t v46 = sub_10001BA38(v37);
      if ((v45 & 1) != (v47 & 1)) {
        goto LABEL_24;
      }
      unint64_t v41 = v46;
      int v19 = v68;
      if (v45)
      {
LABEL_2:
        *(void *)(*((void *)v19 + 7) + 8 * v41) = v66;
        goto LABEL_3;
      }
    }
    *(void *)&v19[(v41 >> 6) + 8] |= 1 << v41;
    v38((char *)(*((void *)v19 + 6) + *(void *)(v31 + 72) * v41), v37, v30);
    *(void *)(*((void *)v19 + 7) + 8 * v41) = v66;
    uint64_t v48 = *((void *)v19 + 2);
    BOOL v49 = __OFADD__(v48, 1);
    uint64_t v50 = v48 + 1;
    if (v49) {
      goto LABEL_23;
    }
    *((void *)v19 + 2) = v50;
LABEL_3:
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v37, v30);
    sub_10001457C((uint64_t)v67, &qword_1007FC108);
    unint64_t v11 = v58;
    uint64_t v6 = v59;
    uint64_t v17 = v56;
    uint64_t v14 = v57;
    unint64_t v18 = v55;
    unint64_t v20 = v65;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000F7A8C()
{
  unint64_t result = qword_1007FDC50;
  if (!qword_1007FDC50)
  {
    sub_100014440((uint64_t *)&unk_100811810);
    sub_1000F9378(&qword_1007FDC58, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FDC50);
  }
  return result;
}

uint64_t sub_1000F7B38()
{
  return sub_1000F7B6C();
}

uint64_t sub_1000F7B40@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EB8F0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000F7B5C()
{
  return sub_1000F7B6C();
}

uint64_t sub_1000F7B64()
{
  return sub_1000F7B6C();
}

uint64_t sub_1000F7B6C()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1000F7BB8()
{
  sub_1000E6E6C(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_1000F7BDC()
{
  return swift_deallocObject();
}

void sub_1000F7C14()
{
}

uint64_t sub_1000F7C30()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1000F7C74()
{
  uint64_t v1 = type metadata accessor for IndexSet();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1000F7D40()
{
  type metadata accessor for IndexSet();
  return sub_1000EBEE8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000F7DB0()
{
  return sub_1000ED624();
}

uint64_t sub_1000F7DCC()
{
  uint64_t v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void sub_1000F7E5C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_1005C437C(v2);
}

uint64_t sub_1000F7EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_1000F7ECC()
{
  return swift_release();
}

unint64_t sub_1000F7ED4()
{
  unint64_t result = qword_1007FDCF0;
  if (!qword_1007FDCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FDCF0);
  }
  return result;
}

uint64_t sub_1000F7F28(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_1002A62F4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(_s30MOSuggestionAssetMapsClustererC7ClusterVMa() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000F8110(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100010218((uint64_t *)&unk_1008112F0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000F9378((unint64_t *)&unk_1008112E0, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000F9378(&qword_1007FDD30, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000F8428(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Transcriber.ReportingOption();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100010218(&qword_1007FDD18);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000F9378(&qword_1007FDD20, (void (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000F9378(&qword_1007FDD28, (void (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000F8740(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionResultAttributeOption();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100010218(&qword_1007FDD00);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000F9378(&qword_1007FDD08, (void (*)(uint64_t))&type metadata accessor for TranscriptionResultAttributeOption);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000F9378(&qword_1007FDD10, (void (*)(uint64_t))&type metadata accessor for TranscriptionResultAttributeOption);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_1000F8A58(unint64_t a1)
{
}

void sub_1000F8A74(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_100010218(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_10001B284(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_10001B284(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void *sub_1000F8DD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100010218(&qword_1007FDD78);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    Swift::Int v15 = (void (**)(char *, uint64_t))(v11 - 8);
    Swift::Int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000F9378(&qword_1007FDD80, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000F9378(&qword_1007FDD88, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        char v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_1000F90F0(unint64_t a1)
{
}

Swift::Int sub_1000F910C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010218((uint64_t *)&unk_100811250);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1000F92B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F9318(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000F9378(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000F93C4(char *a1@<X8>)
{
}

uint64_t sub_1000F93DC()
{
  return sub_1000F7C30() & 1;
}

uint64_t sub_1000F93F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FDDC0);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FDDC0);
  if (qword_1007F7DF0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EDD0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000F94C0(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v70 = a1;
  uint64_t v60 = a2;
  uint64_t v2 = sub_100010218(&qword_1007FDE78);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  uint64_t v66 = v3;
  __chkstk_darwin(v2);
  uint64_t v67 = (void *)((char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v5 - 8);
  uint64_t v71 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v62 = *(void (***)(void, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 initWithEntityName:v11];

  sub_1000FBDC8();
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v13 = swift_allocObject();
  long long v69 = xmmword_1006D6270;
  *(_OWORD *)(v13 + 16) = xmmword_1006D6270;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v14 = sub_10001B2C0();
  *(void *)(v13 + 32) = 0x7079547465737361;
  *(void *)(v13 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE900000000000065;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v14;
  *(void *)(v13 + 64) = v14;
  *(void *)(v13 + 72) = 0x6F69647561;
  *(void *)(v13 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE500000000000000;
  uint64_t v15 = NSPredicate.init(format:_:)();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = v69;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = v14;
  strcpy((char *)(v16 + 32), "isBeingEdited");
  *(_WORD *)(v16 + 46) = -4864;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v14;
  uint64_t v17 = (uint64_t)v12;
  *(void *)(v16 + 72) = 0x6E65646469487369;
  *(void *)(v16 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE800000000000000;
  uint64_t v18 = NSPredicate.init(format:_:)();
  sub_100010218((uint64_t *)&unk_1007FA1C0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1006D6D10;
  *(void *)(v19 + 32) = v15;
  *(void *)(v19 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v18;
  uint64_t v73 = v19;
  specialized Array._endMutation()();
  id v59 = v15;
  uint64_t v20 = v18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v22 = [self andPredicateWithSubpredicates:isa];

  [v12 setPredicate:v22];
  type metadata accessor for JournalEntryAssetMO();
  unint64_t v23 = v72;
  uint64_t v24 = NSManagedObjectContext.fetch<A>(_:)();
  if (v23)
  {
    if (qword_1007F69D8 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100026A54(v25, (uint64_t)qword_1007FDDC0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      BOOL v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      id v58 = v20;
      *(_DWORD *)BOOL v28 = 138412290;
      swift_errorRetain();
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v73 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v30;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to fetch audio that needs metadata calculations: %@", v28, 0xCu);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    char v38 = _swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v31 = v24;
    uint64_t v32 = v62;
    *(void *)&long long v69 = v9;
    v56[1] = 0;
    uint64_t v70 = v7;
    unint64_t v74 = v24;
    uint64_t v33 = qword_1007F69D8;
    swift_bridgeObjectRetain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100026A54(v34, (uint64_t)qword_1007FDDC0);
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    LOBYTE(v36) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v35, (os_log_type_t)v36))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
    uint64_t v7 = (uint64_t)v20;
    uint64_t v20 = (_DWORD *)swift_slowAlloc();
    _DWORD *v20 = 134217984;
    if (v31 >> 62) {
      goto LABEL_37;
    }
    uint64_t v37 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      uint64_t v73 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, "Fetched audio that needs metadata calculations: %ld", (uint8_t *)v20, 0xCu);
      swift_slowDealloc();

      uint64_t v20 = (_DWORD *)v7;
LABEL_15:
      swift_beginAccess();
      unint64_t v36 = v74;
      uint64_t v39 = v67;
      id v57 = (id)v17;
      if (v74 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        id v58 = v20;
        if (!v17)
        {
LABEL_33:
          char v38 = _swiftEmptyArrayStorage;
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v17 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v58 = v20;
        if (!v17) {
          goto LABEL_33;
        }
      }
      if (v17 >= 1) {
        break;
      }
      __break(1u);
LABEL_37:
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v40 = 0;
    unint64_t v72 = v36 & 0xC000000000000001;
    Swift::Int v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 6);
    uint64_t v63 = (void (**)(char *, uint64_t, uint64_t))(v32 + 2);
    id v64 = (void (**)(void, uint64_t, uint64_t))(v32 + 4);
    uint64_t v62 = v32 + 1;
    char v38 = _swiftEmptyArrayStorage;
    uint64_t v61 = v17;
    do
    {
      if (v72) {
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v41 = *(id *)(v36 + 8 * v40 + 32);
      }
      uint64_t v42 = v41;
      id v43 = sub_10017E76C();
      _s10AudioAssetCMa(0);
      if (swift_dynamicCastClass())
      {
        uint64_t v44 = v71;
        sub_1003B2D58(v71);
        uint64_t v45 = (uint64_t)v44;
        uint64_t v46 = v70;
        if ((*v68)(v45, 1, v70) == 1)
        {

          sub_100052EAC(v45);
        }
        else
        {
          unint64_t v47 = v36;
          uint64_t v48 = v69;
          (*v64)(v69, v45, v46);
          id v49 = [v42 objectID];
          uint64_t v50 = (char *)v39 + *(int *)(v65 + 48);
          void *v39 = v49;
          (*v63)(v50, v48, v46);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v38 = (double *)sub_1002A60A4(0, *((void *)v38 + 2) + 1, 1, (unint64_t)v38);
          }
          unint64_t v52 = *((void *)v38 + 2);
          unint64_t v51 = *((void *)v38 + 3);
          uint64_t v53 = v66;
          unint64_t v36 = v47;
          if (v52 >= v51 >> 1)
          {
            uint64_t v55 = sub_1002A60A4(v51 > 1, v52 + 1, 1, (unint64_t)v38);
            uint64_t v53 = v66;
            char v38 = (double *)v55;
          }
          uint64_t v17 = v61;
          *((void *)v38 + 2) = v52 + 1;
          uint64_t v54 = (uint64_t)v38
              + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
              + *(void *)(v53 + 72) * v52;
          uint64_t v39 = v67;
          sub_1000FBE08((uint64_t)v67, v54);

          (*v62)(v69, v46);
        }
      }
      else
      {
      }
      ++v40;
    }
    while (v17 != v40);
LABEL_34:

    swift_bridgeObjectRelease();
  }
  *uint64_t v60 = v38;
}

uint64_t sub_1000F9E7C()
{
  uint64_t v1 = type metadata accessor for URL();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  v0[8] = swift_task_alloc();
  uint64_t v2 = sub_100010218(&qword_1007FDE78);
  v0[9] = v2;
  v0[10] = *(void *)(v2 - 8);
  v0[11] = swift_task_alloc();
  uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_1007FDE80 + dword_1007FDE80);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F9FE8;
  return v5();
}

uint64_t sub_1000F9FE8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FA0E8, 0, 0);
}

uint64_t sub_1000FA0E8()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 104);
  id v2 = [*(id *)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_container) newBackgroundContext];
  *(void *)(v0 + 112) = v2;
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v0 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v3;
  uint64_t v4 = *(void *)(v0 + 104);
  if (v3)
  {
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void **)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(int *)(*(void *)(v0 + 72) + 48);
    *(_DWORD *)(v0 + 208) = v8;
    int v9 = *(_DWORD *)(v5 + 80);
    *(_DWORD *)(v0 + 212) = v9;
    *(void *)(v0 + 128) = *(void *)(v5 + 72);
    *(void *)(v0 + 136) = 0;
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 48);
    id v12 = (char *)v6 + v8;
    sub_1000FBC74(v4 + ((v9 + 32) & ~(unint64_t)v9), (uint64_t)v6);
    *(void *)(v0 + 144) = *v6;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v7, v12, v10);
    uint64_t v17 = (uint64_t (*)(uint64_t))((char *)&dword_100807BE8 + dword_100807BE8);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v13;
    void *v13 = v0;
    v13[1] = sub_1000FA2D4;
    uint64_t v14 = *(void *)(v0 + 64);
    return v17(v14);
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1000FA2D4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1000FA644;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000FA3F4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000FA3F4()
{
  id v1 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[22] = [v1 initWithURL:v3 options:0];

  sub_100010218(&qword_1007FD560);
  uint64_t v5 = static AVPartialAsyncProperty<A>.duration.getter();
  v0[23] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000FA500;
  return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 2, v5);
}

uint64_t sub_1000FA500()
{
  *(void *)(*(void *)v1 + 20sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    id v2 = sub_1000FAF6C;
  }
  else
  {
    id v2 = sub_1000FAA78;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000FA644()
{
  uint64_t v39 = v0;
  if (qword_1007F69D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100026A54(v6, (uint64_t)qword_1007FDDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  id v7 = v1;
  swift_errorRetain();
  id v8 = v7;
  swift_errorRetain();
  int v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  id v12 = *(void **)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 48);
  if (v11)
  {
    uint64_t v36 = *(void *)(v0 + 64);
    uint64_t v17 = swift_slowAlloc();
    log = v9;
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138412802;
    *(void *)(v17 + 4) = v12;
    *uint64_t v18 = v12;

    *(_WORD *)(v17 + 12) = 2080;
    sub_1000FBCDC();
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v17 + 14) = sub_10011EA98(v19, v20, &v38);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v13, v15);
    *(_WORD *)(v17 + 22) = 2112;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v17 + 24) = v22;
    v18[1] = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v10, "failed to save intensity and duration for audio asset %@ at %s: %@", (uint8_t *)v17, 0x20u);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v23 = v36;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v13, v15);

    swift_errorRelease();
    uint64_t v23 = v14;
  }
  v21(v23, v15);
  uint64_t v24 = *(void *)(v0 + 136) + 1;
  if (v24 == *(void *)(v0 + 120))
  {
    uint64_t v25 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    *(void *)(v0 + 136) = v24;
    BOOL v28 = *(void **)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 40);
    uint64_t v31 = *(void *)(v0 + 48);
    uint64_t v32 = (char *)v28 + *(int *)(v0 + 208);
    sub_1000FBC74(*(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 212) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 212))+ *(void *)(v0 + 128) * v24, (uint64_t)v28);
    *(void *)(v0 + 144) = *v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v29, v32, v30);
    uint64_t v37 = (uint64_t (*)(uint64_t))((char *)&dword_100807BE8 + dword_100807BE8);
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v33;
    void *v33 = v0;
    v33[1] = sub_1000FA2D4;
    uint64_t v34 = *(void *)(v0 + 64);
    return v37(v34);
  }
}

uint64_t sub_1000FAA78()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  CMTime.seconds.getter();
  uint64_t v6 = v5;
  id v7 = (void *)swift_task_alloc();
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  v7[5] = v2;
  NSManagedObjectContext.performAndWait<A>(_:)();
  id v8 = *(void **)(v0 + 176);
  if (v1)
  {

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    if (qword_1007F69D8 != -1) {
      swift_once();
    }
    int v9 = *(void **)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 56);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 48);
    uint64_t v14 = type metadata accessor for Logger();
    sub_100026A54(v14, (uint64_t)qword_1007FDDC0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v10, v11, v12);
    id v15 = v9;
    swift_errorRetain();
    id v16 = v15;
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    unint64_t v20 = *(void **)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 56);
    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v23 = *(void *)(v0 + 40);
    uint64_t v24 = *(void *)(v0 + 48);
    if (v19)
    {
      uint64_t v44 = *(void *)(v0 + 64);
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412802;
      *(void *)(v25 + 4) = v20;
      *uint64_t v26 = v20;

      *(_WORD *)(v25 + 12) = 2080;
      sub_1000FBCDC();
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v25 + 14) = sub_10011EA98(v27, v28, &v46);
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v29(v21, v23);
      *(_WORD *)(v25 + 22) = 2112;
      swift_errorRetain();
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v25 + 24) = v30;
      v26[1] = v30;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "failed to save intensity and duration for audio asset %@ at %s: %@", (uint8_t *)v25, 0x20u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      v29(v44, v23);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v32(v21, v23);

      swift_errorRelease();
      v32(v22, v23);
    }
  }
  else
  {
    uint64_t v31 = *(void **)(v0 + 144);
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 40));

    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  uint64_t v33 = *(void *)(v0 + 136) + 1;
  if (v33 == *(void *)(v0 + 120))
  {
    uint64_t v34 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
  else
  {
    *(void *)(v0 + 136) = v33;
    uint64_t v37 = *(void **)(v0 + 88);
    uint64_t v38 = *(void *)(v0 + 64);
    uint64_t v39 = *(void *)(v0 + 40);
    uint64_t v40 = *(void *)(v0 + 48);
    id v41 = (char *)v37 + *(int *)(v0 + 208);
    sub_1000FBC74(*(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 212) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 212))+ *(void *)(v0 + 128) * v33, (uint64_t)v37);
    *(void *)(v0 + 144) = *v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v38, v41, v39);
    uint64_t v45 = (uint64_t (*)(uint64_t))((char *)&dword_100807BE8 + dword_100807BE8);
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v42;
    void *v42 = v0;
    v42[1] = sub_1000FA2D4;
    uint64_t v43 = *(void *)(v0 + 64);
    return v45(v43);
  }
}

uint64_t sub_1000FAF6C()
{
  uint64_t v39 = v0;

  if (qword_1007F69D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100026A54(v6, (uint64_t)qword_1007FDDC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  id v7 = v1;
  swift_errorRetain();
  id v8 = v7;
  swift_errorRetain();
  int v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void **)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v15 = *(void *)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 48);
  if (v11)
  {
    uint64_t v36 = *(void *)(v0 + 64);
    uint64_t v17 = swift_slowAlloc();
    log = v9;
    os_log_type_t v18 = (void *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138412802;
    *(void *)(v17 + 4) = v12;
    *os_log_type_t v18 = v12;

    *(_WORD *)(v17 + 12) = 2080;
    sub_1000FBCDC();
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v17 + 14) = sub_10011EA98(v19, v20, &v38);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v13, v15);
    *(_WORD *)(v17 + 22) = 2112;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v17 + 24) = v22;
    v18[1] = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v10, "failed to save intensity and duration for audio asset %@ at %s: %@", (uint8_t *)v17, 0x20u);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v23 = v36;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v13, v15);

    swift_errorRelease();
    uint64_t v23 = v14;
  }
  v21(v23, v15);
  uint64_t v24 = *(void *)(v0 + 136) + 1;
  if (v24 == *(void *)(v0 + 120))
  {
    uint64_t v25 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    *(void *)(v0 + 136) = v24;
    unint64_t v28 = *(void **)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 40);
    uint64_t v31 = *(void *)(v0 + 48);
    uint64_t v32 = (char *)v28 + *(int *)(v0 + 208);
    sub_1000FBC74(*(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 212) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 212))+ *(void *)(v0 + 128) * v24, (uint64_t)v28);
    *(void *)(v0 + 144) = *v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v29, v32, v30);
    uint64_t v37 = (uint64_t (*)(uint64_t))((char *)&dword_100807BE8 + dword_100807BE8);
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v33;
    void *v33 = v0;
    v33[1] = sub_1000FA2D4;
    uint64_t v34 = *(void *)(v0 + 64);
    return v37(v34);
  }
}

void sub_1000FB3A8(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  id v29 = 0;
  id v7 = [a1 existingObjectWithID:a2 error:&v29];
  id v8 = v29;
  if (!v7)
  {
    id v24 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  int v9 = v7;
  type metadata accessor for JournalEntryAssetMO();
  os_log_type_t v10 = (void *)swift_dynamicCastClass();
  id v11 = v8;
  if (!v10)
  {

    return;
  }
  Class isa = sub_10017E76C();
  _s10AudioAssetCMa(0);
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {

LABEL_22:
    return;
  }
  uint64_t v14 = v13;
  unint64_t v28 = isa;
  sub_10010DE90(*(uint64_t *)&a4, 0, a3, 0);
  sub_10063E584();
  id v15 = [v10 setIsBeingEdited:0];
  *(unsigned char *)(v14 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_isHidden) = 0;
  uint64_t v16 = *(void **)(v14 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_context);
  if (v16)
  {
    __chkstk_darwin(v15);
    id v17 = isa;
    id v18 = v16;
    sub_100010218((uint64_t *)&unk_1007FC460);
    NSManagedObjectContext.performAndWait<A>(_:)();
  }
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_10083D2F8 + OBJC_IVAR____TtC7Journal9DataStack_isProtectedDataAvailable) != 1)
  {
LABEL_11:
    if (qword_1007F69D8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100026A54(v20, (uint64_t)qword_1007FDDC0);
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218240;
      id v29 = *(id *)&a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      id v29 = *(id *)(a3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updated metadata for audio asset with duration: %f and intensity count: %ld", (uint8_t *)v23, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    id v25 = [self defaultCenter];
    if (qword_1007F6E78 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_10083D400;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v25 postNotificationName:v26 object:isa];

    goto LABEL_22;
  }
  id v29 = 0;
  if ([a1 save:&v29])
  {
    id v19 = v29;
    goto LABEL_11;
  }
  id v27 = v29;
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

uint64_t type metadata accessor for AudioAssetMetadataCalculator()
{
  return self;
}

uint64_t sub_1000FB840()
{
  uint64_t v1 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  return _swift_task_switch(sub_1000FB8FC, 0, 0);
}

uint64_t sub_1000FB8FC()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  id v4 = [*(id *)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_container) newBackgroundContext];
  v0[6] = v4;
  uint64_t v5 = swift_allocObject();
  v0[7] = v5;
  *(void *)(v5 + 16) = v4;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v7 = sub_100010218(&qword_1007FDE88);
  *uint64_t v6 = v0;
  v6[1] = sub_1000FBA90;
  uint64_t v8 = v0[5];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v8, sub_1000FBDAC, v5, v7);
}

uint64_t sub_1000FBA90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 32);
  uint64_t v3 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1000FBC04, 0, 0);
}

uint64_t sub_1000FBC04()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000FBC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FDE78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000FBCDC()
{
  unint64_t result = qword_100800940;
  if (!qword_100800940)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100800940);
  }
  return result;
}

void sub_1000FBD34()
{
  sub_1000FB3A8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 40), *(double *)(v0 + 32));
}

char *sub_1000FBD58@<X0>(BOOL *a1@<X8>)
{
  return sub_100180E60(*(char **)(v1 + 16), a1);
}

uint64_t sub_1000FBD74()
{
  return swift_deallocObject();
}

void sub_1000FBDAC(double **a1@<X8>)
{
  sub_1000F94C0(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000FBDC8()
{
  unint64_t result = qword_100800A30;
  if (!qword_100800A30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100800A30);
  }
  return result;
}

uint64_t sub_1000FBE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FDE78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FBE70()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PhotosPickerItemModel()
{
  return self;
}

uint64_t sub_1000FBECC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Journal15ImageStateModel__imageState;
  uint64_t v2 = sub_100010218(&qword_1007FE1C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7Journal15ImageStateModel__itemProvider;
  uint64_t v4 = sub_100010218(&qword_1007FE1C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_1000FBFB8()
{
  return type metadata accessor for ImageStateModel(0);
}

uint64_t type metadata accessor for ImageStateModel(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FDFA0);
}

void sub_1000FBFE0()
{
  sub_1000FC0AC();
  if (v0 <= 0x3F)
  {
    sub_1000FC104();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000FC0AC()
{
  if (!qword_1007FDFB0)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007FDFB0);
    }
  }
}

void sub_1000FC104()
{
  if (!qword_1007FDFB8)
  {
    sub_100014440((uint64_t *)&unk_1007FDFC0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007FDFB8);
    }
  }
}

uint64_t sub_1000FC160@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ImageStateModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000FC1A0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Journal15PhotosViewModel__targetURL;
  uint64_t v2 = sub_100010218(&qword_1007FE1B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000FC244()
{
  return type metadata accessor for PhotosViewModel(0);
}

uint64_t type metadata accessor for PhotosViewModel(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FE0E0);
}

void sub_1000FC26C()
{
  sub_1000FD22C(319, (unint64_t *)&unk_1007FE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ImageStateModel.ImageState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_1000FC374(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_1000FC374(id result, unsigned __int8 a2)
{
  if (a2 == 2) {
    return (id)swift_errorRetain();
  }
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

void destroy for ImageStateModel.ImageState(uint64_t a1)
{
}

void sub_1000FC3A8(id a1, unsigned __int8 a2)
{
  if (a2 == 2)
  {
    swift_errorRelease();
  }
  else if (a2 <= 1u)
  {
  }
}

uint64_t assignWithCopy for ImageStateModel.ImageState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_1000FC374(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1000FC3A8(v5, v6);
  return a1;
}

uint64_t initializeWithTake for ImageStateModel.ImageState(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ImageStateModel.ImageState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_1000FC3A8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageStateModel.ImageState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageStateModel.ImageState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000FC500(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1000FC518(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ImageStateModel.ImageState()
{
  return &type metadata for ImageStateModel.ImageState;
}

uint64_t destroy for PhotoPickerItem(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhotoPickerItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v5 = *(void **)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhotoPickerItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 24);
  unsigned __int8 v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  id v6 = v4;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PhotoPickerItem(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotoPickerItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotoPickerItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotoPickerItem()
{
  return &type metadata for PhotoPickerItem;
}

void *sub_1000FC770()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000FC77C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PhotosViewModel(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t *sub_1000FC7BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v11;
    uint64_t v14 = (char *)a2 + v11;
    *(void *)uint64_t v13 = *(void *)v14;
    v13[8] = v14[8];
    id v15 = (char *)a1 + v12;
    uint64_t v16 = (char *)a2 + v12;
    *(void *)id v15 = *(void *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t sub_1000FC95C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

char *sub_1000FCA2C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

char *sub_1000FCB7C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = *(int *)(a3 + 24);
  id v17 = &a1[v16];
  id v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)id v17 = v19;
  return a1;
}

char *sub_1000FCD34(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = &a1[v10];
  uint64_t v14 = &a2[v10];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  return a1;
}

char *sub_1000FCE84(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  id v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t sub_1000FD038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FD04C);
}

uint64_t sub_1000FD04C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000FD0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FD0D0);
}

uint64_t sub_1000FD0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PhotoMetadata(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FE228);
}

void sub_1000FD164()
{
  sub_1000FD22C(319, (unint64_t *)&qword_1007FAAE0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000FD22C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PhotoPickerItem.ItemType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FD35CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotoPickerItem.ItemType()
{
  return &type metadata for PhotoPickerItem.ItemType;
}

unint64_t sub_1000FD398()
{
  unint64_t result = qword_1007FE268;
  if (!qword_1007FE268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE268);
  }
  return result;
}

unint64_t sub_1000FD3F0(unsigned __int8 a1)
{
  unint64_t result = 0xD00000000000002ALL;
  if (a1 >= 2u) {
    return 0xD000000000000031;
  }
  return result;
}

unint64_t sub_1000FD44C(char a1)
{
  unint64_t result = 0x7974697669746361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
      unint64_t result = 0x7370657473;
      break;
    case 4:
      unint64_t result = 0x6D69547472617473;
      break;
    case 5:
      unint64_t result = 0x656D6954646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000FD530(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010218(&qword_1007FE3A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_100100824();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v16 = *(unsigned char *)(v3 + 16);
    char v15 = 1;
    sub_100100930();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    _s19MotionActivityAssetC18MotionActivityDataVMa(0);
    char v12 = 4;
    type metadata accessor for Date();
    sub_1000FFDF0(&qword_1007F99F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000FD7B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v22 - v7;
  uint64_t v25 = sub_100010218(&qword_1007FE390);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  __chkstk_darwin(v9);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v26 = a1;
  sub_10002E0BC(a1, v12);
  sub_100100824();
  char v13 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v26);
  }
  uint64_t v14 = (uint64_t)v8;
  id v27 = v5;
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  char v34 = 0;
  *(void *)char v11 = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v11 + 1) = v17;
  char v32 = 1;
  sub_100100878();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v11[16] = v33;
  char v31 = 2;
  *((void *)v11 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v11 + 4) = v18;
  char v30 = 3;
  *((void *)v11 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v11 + 6) = v19;
  type metadata accessor for Date();
  char v29 = 4;
  uint64_t v22 = sub_1000FFDF0(&qword_10080E9D0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10002C4EC(v14, (uint64_t)&v11[*(int *)(v9 + 32)], (uint64_t *)&unk_1007FC470);
  char v28 = 5;
  uint64_t v20 = (uint64_t)v27;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(void, uint64_t))(v15 + 8))(0, v25);
  sub_10002C4EC(v20, (uint64_t)&v11[*(int *)(v9 + 36)], (uint64_t *)&unk_1007FC470);
  sub_1001008CC((uint64_t)v11, v16);
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v26);
  return sub_1000E4AD4((uint64_t)v11);
}

uint64_t sub_1000FDC50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10017CD68(*a1, *a2);
}

Swift::Int sub_1000FDC5C()
{
  return sub_1002315A0();
}

uint64_t sub_1000FDC64()
{
  return sub_100231C00();
}

Swift::Int sub_1000FDC6C()
{
  return sub_100231D14();
}

unint64_t sub_1000FDC74@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000FFE38(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000FDCA4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000FD3F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000FDCD0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000FDD30()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1000FDD80()
{
  return sub_1000FD44C(*v0);
}

uint64_t sub_1000FDD88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000FFE84(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000FDDB0(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000FDDBC(uint64_t a1)
{
  unint64_t v2 = sub_100100824();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FDDF8(uint64_t a1)
{
  unint64_t v2 = sub_100100824();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000FDE34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FD7B8(a1, a2);
}

uint64_t sub_1000FDE4C(void *a1)
{
  return sub_1000FD530(a1);
}

uint64_t sub_1000FDE64(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100010218(&qword_1007F9D98);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(v2 + OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))(v7, 1, 1, v8, v10);
    goto LABEL_11;
  }
  swift_retain();
  sub_10003BA1C((uint64_t)v7);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_11:
    sub_10001457C((uint64_t)v7, &qword_1007F9D98);
    return 0;
  }
  sub_1001007BC((uint64_t)v7, (uint64_t)v12, _s19MotionActivityAssetC18MotionActivityDataVMa);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (a2
    && (v13 == a1 ? (BOOL v15 = v14 == a2) : (BOOL v15 = 0), v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1002A5F94(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    if (v19 >= v18 >> 1) {
      uint64_t v16 = sub_1002A5F94((void *)(v18 > 1), v19 + 1, 1, v16);
    }
    uint64_t v16[2] = v19 + 1;
    uint64_t v20 = &v16[2 * v19];
    v20[4] = v13;
    v20[5] = v14;
  }
  uint64_t v22 = v12[5];
  uint64_t v21 = v12[6];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = sub_1002A5F94(0, v16[2] + 1, 1, v16);
  }
  unint64_t v24 = v16[2];
  unint64_t v23 = v16[3];
  if (v24 >= v23 >> 1) {
    uint64_t v16 = sub_1002A5F94((void *)(v23 > 1), v24 + 1, 1, v16);
  }
  uint64_t v16[2] = v24 + 1;
  uint64_t v25 = &v16[2 * v24];
  v25[4] = v22;
  v25[5] = v21;
  uint64_t v17 = sub_10023DA38(8236, 0xE200000000000000, (uint64_t)v16);
  swift_bridgeObjectRelease();
  sub_1000E4AD4((uint64_t)v12);
  return v17;
}

uint64_t sub_1000FE14C()
{
  uint64_t v1 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v1 - 8);
  v31[2] = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  v31[1] = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010218(&qword_1007F8E60);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100010218(&qword_1007F9D98);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = sub_100010218(&qword_1007F8E58);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.autoupdatingCurrent.getter();
  sub_100014398();
  IntegerFormatStyle.init(locale:)();
  if (!*(void *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata)) {
    goto LABEL_5;
  }
  swift_retain();
  sub_10003BA1C((uint64_t)v14);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
  {
    uint64_t v20 = &qword_1007F9D98;
    uint64_t v21 = (uint64_t)v14;
  }
  else
  {
    sub_1001008CC((uint64_t)v14, (uint64_t)v11);
    sub_10001457C((uint64_t)v14, &qword_1007F9D98);
    uint64_t v24 = *((void *)v11 + 5);
    uint64_t v25 = *((void *)v11 + 6);
    swift_bridgeObjectRetain();
    sub_1000E4AD4((uint64_t)v11);
    if (!v25) {
      goto LABEL_5;
    }
    uint64_t v32 = v24;
    uint64_t v33 = v25;
    sub_1000143EC();
    sub_100100984();
    BidirectionalCollection<>.firstMatch<A, B>(of:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = sub_100010218(&qword_1007F8E68);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26) != 1)
    {
      Regex.Match.output.getter();
      uint64_t v28 = v32;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v29._countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
      uint64_t v32 = v28;
      String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
      v30._countAndFlagsBits = 0x2973287065747320;
      v30._object = (void *)0xE800000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
      String.LocalizationValue.init(stringInterpolation:)();
      static Locale.current.getter();
      uint64_t v22 = String.init(localized:table:bundle:locale:comment:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      return v22;
    }
    uint64_t v20 = &qword_1007F8E60;
    uint64_t v21 = (uint64_t)v7;
  }
  sub_10001457C(v21, v20);
LABEL_5:
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return 0;
}

uint64_t sub_1000FE668()
{
  return swift_release();
}

id sub_1000FE678()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s19MotionActivityAssetCMa(0);
  return [super dealloc];
}

uint64_t sub_1000FE6C0()
{
  return _s19MotionActivityAssetCMa(0);
}

uint64_t _s19MotionActivityAssetCMa(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FE298);
}

uint64_t sub_1000FE6E8()
{
  return swift_updateClassMetadata2();
}

void *sub_1000FE72C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    uint64_t v10 = *(int *)(a3 + 32);
    __dst = (void *)(a1 + v10);
    uint64_t v11 = (char *)a2 + v10;
    *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a2[5];
    *(void *)(a1 + 48) = v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v17 = *(int *)(a3 + 36);
    uint64_t v18 = (char *)v4 + v17;
    unint64_t v19 = (char *)a2 + v17;
    if (v14(v19, 1, v12))
    {
      uint64_t v20 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v18, v19, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
    }
  }
  return v4;
}

uint64_t sub_1000FE988(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 36);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v5);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

uint64_t sub_1000FEAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  if (v13(v17, 1, v11))
  {
    uint64_t v18 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v16, v17, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_1000FECC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  int v18 = v11((void *)(a1 + v15), 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t sub_1000FEFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1000FF18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = *(int *)(a3 + 36);
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  int v21 = v14((void *)(a1 + v18), 1, v12);
  int v22 = v14(v20, 1, v12);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v19, v20, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v19, v12);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v19, v20, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
  return a1;
}

uint64_t sub_1000FF440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FF454);
}

uint64_t sub_1000FF454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000FF508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FF51C);
}

uint64_t sub_1000FF51C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _s19MotionActivityAssetC18MotionActivityDataVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FE300);
}

void sub_1000FF5E8()
{
  sub_100033618();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000FF694()
{
  return swift_retain();
}

uint64_t sub_1000FF6A4(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata) = a1;
  return swift_release();
}

uint64_t sub_1000FF6BC(uint64_t a1, uint64_t a2)
{
  return sub_1000FDE64(a1, a2);
}

uint64_t sub_1000FF6E0()
{
  return sub_1000FDE64(0, 0);
}

id sub_1000FF70C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  v43[1] = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  v43[0] = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)v43 - v10;
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100010218(&qword_1007F9D98);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __n128 v20 = __chkstk_darwin(v18);
  int v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56))(v17, 1, 1, v18, v20);
    goto LABEL_6;
  }
  swift_retain();
  sub_10003BA1C((uint64_t)v17);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
LABEL_6:
    sub_10001457C((uint64_t)v17, &qword_1007F9D98);
    return 0;
  }
  sub_1001007BC((uint64_t)v17, (uint64_t)v22, _s19MotionActivityAssetC18MotionActivityDataVMa);
  static UTType.item.getter();
  id v23 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  Class isa = UTType._bridgeToObjectiveC()().super.isa;
  id v25 = [v23 initWithContentType:isa];

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_bridgeObjectRetain();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v27 = v44;
  [v25 setDisplayName:v26];

  sub_1000FE14C();
  if (v28)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v29 = 0;
  }
  [v25 setContentDescription:v29];

  sub_100045944((uint64_t)&v22[*(int *)(v18 + 32)], (uint64_t)v8);
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v30) == 1)
  {
    uint64_t v32 = *(void **)(v1 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_assetMO);
    if (v32 && (id v33 = [v32 entry]) != 0)
    {
      char v34 = v33;
      sub_1002941E4(v27);

      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = 1;
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v27, v35, 1, v30);
    sub_10001457C((uint64_t)v8, (uint64_t *)&unk_1007FC470);
  }
  else
  {
    (*(void (**)(unsigned char *, char *, uint64_t))(v31 + 32))(v27, v8, v30);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v36 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v38 = v37;
  sub_100010218(&qword_1007FC170);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1006D6280;
  *(void *)(v39 + 32) = sub_100044F68(v36, v38, (uint64_t)v27);
  *(void *)(v39 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v40;
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 setAlternateNames:v41];
  swift_bridgeObjectRelease();

  sub_10001457C((uint64_t)v27, (uint64_t *)&unk_1007FC470);
  sub_1000E4AD4((uint64_t)v22);
  return v25;
}

id sub_1000FFD3C()
{
  return sub_1000FF70C();
}

uint64_t sub_1000FFD60()
{
  return sub_1000FFDF0(&qword_1007F9DA0, (void (*)(uint64_t))_s19MotionActivityAssetC18MotionActivityDataVMa);
}

uint64_t sub_1000FFDA8()
{
  return sub_1000FFDF0(&qword_1007FE348, (void (*)(uint64_t))_s19MotionActivityAssetC18MotionActivityDataVMa);
}

uint64_t sub_1000FFDF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000FFE38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007934B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000FFE84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7974697669746361 && a2 == 0xEC00000065707954;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010068B740 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010068B760 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7370657473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656D6954646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

id sub_100100118(char a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(char *, uint64_t), uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v72 = a6;
  unint64_t v73 = a7;
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  uint64_t v84 = a3;
  uint64_t v79 = a8;
  uint64_t v80 = a13;
  uint64_t v78 = a12;
  uint64_t v81 = sub_100010218(&qword_1007F9D88);
  __chkstk_darwin(v81);
  uint64_t v82 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  __chkstk_darwin(v74);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AssetAttachment.AssetType(0);
  __chkstk_darwin(v18);
  __n128 v20 = (uint64_t *)((char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v67 - v26;
  UUID.init()();
  uint64_t v28 = (char *)objc_allocWithZone((Class)_s19MotionActivityAssetCMa(0));
  *(void *)&v28[OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata] = 0;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v27, v21);
  NSString v29 = (char *)sub_1001817C4((uint64_t)v24, 16, a1);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30(v27, v21);
  id v75 = a2;
  int64_t v83 = v29;
  uint64_t v69 = v18;
  if (a2)
  {
    void *v20 = a2;
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = v29;
    id v32 = a2;
    UUID.init()();
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v35 = v34;
    uint64_t v71 = v30;
    v30(v27, v21);
    type metadata accessor for AssetAttachment(0);
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = 0;
    sub_1001007BC((uint64_t)v20, v36 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType, type metadata accessor for AssetAttachment.AssetType);
    uint64_t v37 = (uint64_t *)(v36 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
    uint64_t *v37 = v33;
    v37[1] = v35;
    uint64_t v38 = &v31[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v38 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t v39 = v84;
    uint64_t v30 = v71;
  }
  else
  {
    uint64_t v40 = v29;
    uint64_t v39 = v84;
  }
  uint64_t v41 = a11;
  uint64_t v70 = a9;
  uint64_t v71 = a10;
  if (v39)
  {
    uint64_t v68 = a11;
    void *v20 = v39;
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = v83;
    uint64_t v43 = v39;
    uint64_t v44 = v42;
    id v45 = v43;
    UUID.init()();
    uint64_t v46 = UUID.uuidString.getter();
    uint64_t v48 = v47;
    v30(v27, v21);
    type metadata accessor for AssetAttachment(0);
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = 1;
    sub_1001007BC((uint64_t)v20, v49 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType, type metadata accessor for AssetAttachment.AssetType);
    uint64_t v50 = (uint64_t *)(v49 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
    *uint64_t v50 = v46;
    v50[1] = v48;
    unint64_t v51 = &v44[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v51 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    uint64_t v39 = v84;
    uint64_t v41 = v68;
  }
  if (v73) {
    uint64_t v52 = v72;
  }
  else {
    uint64_t v52 = 0;
  }
  if (v73) {
    unint64_t v53 = v73;
  }
  else {
    unint64_t v53 = 0xE000000000000000;
  }
  unint64_t v54 = v53;
  Swift::Int v55 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1007934B8, *(Swift::String *)&v52);

  swift_bridgeObjectRelease();
  char v56 = v55 == 1;
  if (v55 == 2) {
    char v56 = 2;
  }
  uint64_t v58 = v77;
  uint64_t v57 = v78;
  *(void *)uint64_t v17 = v76;
  *((void *)v17 + 1) = v58;
  v17[16] = v56;
  uint64_t v59 = v70;
  *((void *)v17 + 3) = v79;
  *((void *)v17 + 4) = v59;
  *((void *)v17 + 5) = v71;
  *((void *)v17 + 6) = v41;
  uint64_t v60 = v74;
  sub_10002C4EC(v57, (uint64_t)&v17[*(int *)(v74 + 32)], (uint64_t *)&unk_1007FC470);
  sub_10002C4EC(v80, (uint64_t)&v17[*(int *)(v60 + 36)], (uint64_t *)&unk_1007FC470);
  uint64_t v61 = v82;
  sub_1001007BC((uint64_t)v17, v82, _s19MotionActivityAssetC18MotionActivityDataVMa);
  swift_storeEnumTagMultiPayload();
  sub_100010218(&qword_1007FE388);
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = v62 + *(void *)(*(void *)v62 + 104);
  uint64_t v64 = sub_100010218(&qword_1007F9D98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 1, 1, v64);
  *(_OWORD *)(v62 + *(void *)(*(void *)v62 + 112)) = xmmword_1006D6A80;
  sub_10002C4EC(v61, v62 + *(void *)(*(void *)v62 + 120), &qword_1007F9D88);
  id v65 = v83;
  *(void *)&v83[OBJC_IVAR____TtCC7Journal10Journaling19MotionActivityAsset_metadata] = v62;

  swift_release();
  return v65;
}

uint64_t sub_1001007BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100100824()
{
  unint64_t result = qword_1007FE398;
  if (!qword_1007FE398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE398);
  }
  return result;
}

unint64_t sub_100100878()
{
  unint64_t result = qword_1007FE3A0;
  if (!qword_1007FE3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3A0);
  }
  return result;
}

uint64_t sub_1001008CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s19MotionActivityAssetC18MotionActivityDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100100930()
{
  unint64_t result = qword_1007FE3B0;
  if (!qword_1007FE3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3B0);
  }
  return result;
}

unint64_t sub_100100984()
{
  unint64_t result = qword_1007F8E78;
  if (!qword_1007F8E78)
  {
    sub_100014440(&qword_1007F8E58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007F8E78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetSizeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s19MotionActivityAssetC18MotionActivityDataV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100100B3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *_s19MotionActivityAssetC18MotionActivityDataV10CodingKeysOMa()
{
  return &_s19MotionActivityAssetC18MotionActivityDataV10CodingKeysON;
}

unsigned char *_s19MotionActivityAssetC22MotionActivityTypeEnumOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100100C40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s19MotionActivityAssetC22MotionActivityTypeEnumOMa()
{
  return &_s19MotionActivityAssetC22MotionActivityTypeEnumON;
}

unint64_t sub_100100C7C()
{
  unint64_t result = qword_1007FE3B8;
  if (!qword_1007FE3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3B8);
  }
  return result;
}

unint64_t sub_100100CD4()
{
  unint64_t result = qword_1007FE3C0;
  if (!qword_1007FE3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3C0);
  }
  return result;
}

unint64_t sub_100100D2C()
{
  unint64_t result = qword_1007FE3C8;
  if (!qword_1007FE3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3C8);
  }
  return result;
}

unint64_t sub_100100D84()
{
  unint64_t result = qword_1007FE3D0;
  if (!qword_1007FE3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3D0);
  }
  return result;
}

unint64_t sub_100100DD8()
{
  unint64_t result = qword_1007FE3D8;
  if (!qword_1007FE3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE3D8);
  }
  return result;
}

uint64_t sub_100100E2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FE3E0);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FE3E0);
  if (qword_1007F7DA8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083ECF8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100100EF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001016D4();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  int v8 = (void *)swift_allocObject();
  uint64_t v8[2] = v7;
  v8[3] = &protocol witness table for MainActor;
  v8[4] = v6;
  swift_release();
  sub_100328A60((uint64_t)v4, (uint64_t)&unk_1007FE590, (uint64_t)v8);
  uint64_t result = swift_release();
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset);
  if (v10)
  {
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v12 = (uint64_t (**)())(v10 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_didUpdate);
    uint64_t v13 = *(void *)(v10 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_didUpdate);
    *uint64_t v12 = sub_1001089D8;
    v12[1] = (uint64_t (*)())v11;
    return sub_10001ABB8(v13);
  }
  return result;
}

uint64_t sub_1001010A8()
{
  uint64_t v0 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v11[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unsigned int v4 = (void *)Strong;
    sub_1001016D4();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v9 = static MainActor.shared.getter();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v9;
    v10[3] = &protocol witness table for MainActor;
    v10[4] = v8;
    swift_release();
    sub_100328A60((uint64_t)v2, (uint64_t)&unk_1007FE598, (uint64_t)v10);

    return swift_release();
  }
  return result;
}

id sub_10010125C(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
  id v13 = objc_allocWithZone((Class)UIImageView);
  uint64_t v14 = v4;
  *(void *)&v4[v12] = [v13 init];
  uint64_t v15 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
  *(void *)&v14[v15] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v16 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
  *(void *)&v14[v16] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v17 = OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView;
  *(void *)&v14[v17] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v18 = OBJC_IVAR____TtC7Journal14RouteAssetView_fillLayer;
  *(void *)&v14[v18] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v19 = OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer;
  *(void *)&v14[v19] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v20 = OBJC_IVAR____TtC7Journal14RouteAssetView_labelTextProvider;
  type metadata accessor for RouteAssetView.LabelTextProvider();
  uint64_t v21 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v21[14] = 0;
  v21[15] = 0;
  v21[16] = 0;
  *(void *)&v14[v20] = v21;
  *(void *)&v14[OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset] = 0;
  uint64_t v22 = &v14[OBJC_IVAR____TtC7Journal14RouteAssetView_latestImageRequestID];
  uint64_t v23 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v14[OBJC_IVAR____TtC7Journal14RouteAssetView_previousSizeType] = 6;
  uint64_t v24 = &v14[OBJC_IVAR____TtC7Journal14RouteAssetView_naturalIconFrame];
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  v24[32] = 1;

  uint64_t v25 = (objc_class *)type metadata accessor for RouteAssetView();
  v33.receiver = v14;
  v33.super_class = v25;
  [super initWithFrame:a1, a2, a3, a4];
  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 1, 1, v27);
  uint64_t v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  id v29 = v26;
  swift_retain();
  uint64_t v30 = static MainActor.shared.getter();
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = v30;
  _OWORD v31[3] = &protocol witness table for MainActor;
  void v31[4] = v28;
  swift_release();
  sub_100328A60((uint64_t)v11, (uint64_t)&unk_1007FE5D8, (uint64_t)v31);
  swift_release();

  return v29;
}

void sub_1001016D4()
{
  uint64_t v1 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v46 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v46);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for Date();
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v48 = (char *)&v38 - v14;
  uint64_t v15 = *(void **)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset];
  if (!v15) {
    return;
  }
  uint64_t v42 = v13;
  int v16 = v0[OBJC_IVAR____TtC7Journal14RouteAssetView_previousSizeType];
  uint64_t v47 = OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType;
  uint64_t v44 = v15;
  uint64_t v45 = v12;
  uint64_t v43 = v5;
  if (v16 == 6)
  {
    id v17 = v15;
    goto LABEL_9;
  }
  unsigned __int8 v18 = v0[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType];
  id v40 = v15;
  if ((sub_10017CB6C(v18, v16) & 1) == 0
    || (id v19 = [*(id *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView] image],
        v19,
        !v19))
  {
LABEL_9:
    Date.init()();
    uint64_t v21 = v0[v47];
    uint64_t v41 = v10;
    switch(v21)
    {
      case 5:
        swift_bridgeObjectRelease();
        goto LABEL_15;
      default:
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v22)
        {
LABEL_15:
          if (qword_1007F6A60 != -1) {
            swift_once();
          }
          uint64_t v23 = &qword_10083CF68;
        }
        else
        {
          if (qword_1007F6A58 != -1) {
            swift_once();
          }
          uint64_t v23 = &qword_10083CF60;
        }
        id v40 = (id)*v23;
        UUID.init()();
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
        uint64_t v39 = v9;
        uint64_t v25 = v46;
        v24(v3, v9, v46);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v3, 0, 1, v25);
        uint64_t v26 = (uint64_t)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_latestImageRequestID];
        swift_beginAccess();
        sub_10001ACF4((uint64_t)v3, v26);
        swift_endAccess();
        LODWORD(v47) = v0[v47];
        v24(v6, v9, v25);
        uint64_t v27 = v45;
        uint64_t v29 = v41;
        uint64_t v28 = v42;
        (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v42, v48, v41);
        unint64_t v30 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        unint64_t v31 = (v43 + *(unsigned __int8 *)(v27 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v0;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v32 + v30, v6, v25);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v32 + v31, v28, v29);
        objc_super v33 = self;
        uint64_t v34 = v0;
        id v35 = [v33 currentTraitCollection];
        uint64_t v36 = v40;
        uint64_t v37 = v44;
        sub_10017D574(v47, 0, 1, v40, v35, (uint64_t)sub_100109ED4, v32);

        swift_release();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v39, v25);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v48, v29);
        break;
    }
    return;
  }
  uint64_t v20 = v40;
}

uint64_t sub_100101CCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v32 = a1;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  __chkstk_darwin(v5);
  objc_super v33 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v27 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B284(0, (unint64_t *)&qword_100805AB0);
  uint64_t v31 = static OS_dispatch_queue.main.getter();
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v30, v10);
  uint64_t v15 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v7);
  unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v17 = (v12 + *(unsigned __int8 *)(v8 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  id v19 = v32;
  *(void *)(v18 + 16) = v14;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, v13, v10);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v27, v15);
  aBlock[4] = sub_10010A10C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017D530;
  aBlock[3] = &unk_10079A798;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v19;
  swift_retain();
  char v22 = v33;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1000E4FD0((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010218(&qword_100804DB0);
  sub_100014488((unint64_t *)&qword_1007FBD20, &qword_100804DB0);
  uint64_t v24 = v34;
  uint64_t v23 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v25 = (void *)v31;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
  swift_release();
  return swift_release();
}

void sub_100102190(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v75 = a4;
  uint64_t v80 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v5 - 8);
  uint64_t v77 = v5;
  __chkstk_darwin(v5);
  uint64_t v72 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v71 = (char *)&v70 - v8;
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  uint64_t v73 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v78 = (char *)&v70 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v74 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FEB40);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v70 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v70 - v26;
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v79 = a2;
    if (a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v27, v80, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
      uint64_t v28 = Strong;
      uint64_t v29 = &Strong[OBJC_IVAR____TtC7Journal14RouteAssetView_latestImageRequestID];
      swift_beginAccess();
      sub_10001B220((uint64_t)v29, (uint64_t)v24, &qword_100800950);
      uint64_t v30 = (uint64_t)&v18[*(int *)(v16 + 48)];
      sub_10001B220((uint64_t)v27, (uint64_t)v18, &qword_100800950);
      sub_10001B220((uint64_t)v24, v30, &qword_100800950);
      uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      if (v31((uint64_t)v18, 1, v13) == 1)
      {
        id v32 = v79;
        id v33 = v79;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        if (v31(v30, 1, v13) == 1)
        {
          sub_10001457C((uint64_t)v18, &qword_100800950);
LABEL_27:
          char v51 = v28[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading];
          v28[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading] = 1;
          if ((v51 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
          {
            sub_100491AF4();
            swift_unknownObjectRelease();
          }
          uint64_t v52 = v28;
          sub_1001041A0();
          uint64_t v53 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v54 = swift_allocObject();
          *(void *)(v54 + 16) = v53;
          *(void *)(v54 + 24) = v32;
          uint64_t v55 = v52[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType];
          char v56 = 1;
          uint64_t v58 = v76;
          uint64_t v57 = v77;
          switch(v55)
          {
            case 5:
              break;
            default:
              char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
              break;
          }
          id v59 = v79;
          swift_retain_n();
          id v60 = v59;
          swift_bridgeObjectRelease();
          uint64_t v61 = (uint64_t)v78;
          (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v78, v75, v57);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v61, 0, 1, v57);
          if (v56) {
            goto LABEL_33;
          }
          uint64_t v64 = v73;
          sub_10001B220(v61, v73, (uint64_t *)&unk_1007FC470);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v64, 1, v57) == 1)
          {
            sub_10001457C(v64, (uint64_t *)&unk_1007FC470);
          }
          else
          {
            id v65 = v71;
            (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v71, v64, v57);
            uint64_t v66 = v72;
            static Date.now.getter();
            Date.timeIntervalSince(_:)();
            double v68 = v67;
            uint64_t v69 = *(void (**)(char *, uint64_t))(v58 + 8);
            v69(v66, v57);
            v69(v65, v57);
            if (v68 < 0.1)
            {
LABEL_33:
              swift_beginAccess();
              uint64_t v62 = swift_unknownObjectWeakLoadStrong();
              if (v62)
              {
                uint64_t v63 = (char *)v62;
                sub_100102D94(0);
                [*(id *)&v63[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView] setImage:v60];
              }
              goto LABEL_39;
            }
          }
          static Animation.easeIn(duration:)();
          sub_10001B284(0, (unint64_t *)&qword_100802730);
          static UIView.animate(_:changes:completion:)();
          swift_release();
LABEL_39:
          swift_release();
          swift_release();

          sub_10001457C(v61, (uint64_t *)&unk_1007FC470);
          swift_release();
          return;
        }
      }
      else
      {
        sub_10001B220((uint64_t)v18, (uint64_t)v21, &qword_100800950);
        if (v31(v30, 1, v13) != 1)
        {
          uint64_t v48 = v74;
          (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v74, v30, v13);
          sub_1000E4FD0((unint64_t *)&qword_1007FEB50, (void (*)(uint64_t))&type metadata accessor for UUID);
          id v49 = v79;
          LODWORD(v8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v50 = *(void (**)(char *, uint64_t))(v14 + 8);
          v50(v48, v13);
          sub_10001457C((uint64_t)v24, &qword_100800950);
          sub_10001457C((uint64_t)v27, &qword_100800950);
          v50(v21, v13);
          id v32 = v79;
          sub_10001457C((uint64_t)v18, &qword_100800950);
          if (v80) {
            goto LABEL_27;
          }
LABEL_16:

          return;
        }
        id v41 = v79;
        id v42 = v79;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
        id v32 = v41;
      }
      sub_10001457C((uint64_t)v18, (uint64_t *)&unk_1007FEB40);
      goto LABEL_16;
    }
  }
  if (qword_1007F69E0 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_100026A54(v34, (uint64_t)qword_1007FE3E0);
  swift_retain();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 138412290;
    swift_beginAccess();
    uint64_t v39 = swift_unknownObjectWeakLoadStrong();
    uint64_t v40 = v39;
    if (v39) {
      uint64_t v82 = v39;
    }
    else {
      uint64_t v82 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v38 = v40;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%@.getImage returned nil", v37, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  swift_beginAccess();
  uint64_t v43 = swift_unknownObjectWeakLoadStrong();
  if (v43)
  {
    uint64_t v44 = (void *)v43;
    sub_100102D94(1);
  }
  swift_beginAccess();
  uint64_t v45 = swift_unknownObjectWeakLoadStrong();
  if (v45)
  {
    uint64_t v46 = (void *)v45;
    char v47 = *(unsigned char *)(v45 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
    *(unsigned char *)(v45 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
    if ((v47 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
    {
      sub_100491AF4();
      swift_unknownObjectRelease();
    }
    sub_1001041A0();
  }
}

void sub_100102D1C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (char *)Strong;
    sub_100102D94(0);
    [*(id *)&v4[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView] setImage:a2];
  }
}

id sub_100102D94(char a1)
{
  if (a1)
  {
    id v3 = [self clearColor];
  }
  else
  {
    if (qword_1007F71D8 != -1) {
      swift_once();
    }
    id v3 = (id)qword_10083D7A0;
  }
  uint64_t v4 = v3;
  [v1 setBackgroundColor:v3];

  LOBYTE(v4) = ~a1;
  [*(id *)&v1[OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView] setHidden:(a1 & 1) == 0];
  uint64_t v5 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
  uint64_t v6 = *(void **)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView];
  if (v4)
  {
    uint64_t v11 = qword_1007F71D8;
    id v12 = v6;
    if (v11 != -1) {
      swift_once();
    }
    id v9 = (id)qword_10083D7A0;
    double v10 = 1.0;
  }
  else
  {
    uint64_t v7 = self;
    id v8 = v6;
    id v9 = [v7 clearColor];
    double v10 = 0.0;
  }
  [v6 setBackgroundColor:v9];

  [*(id *)&v1[v5] setAlpha:v10];
  [*(id *)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView] setAlpha:v10];
  [*(id *)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel] setAlpha:v10];
  uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel];

  return [v13 setAlpha:v10];
}

uint64_t sub_100102F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  sub_100010218((uint64_t *)&unk_10080E8F0);
  v4[6] = swift_task_alloc();
  uint64_t v5 = _s17WorkoutRouteAssetC16WorkoutRouteDataVMa(0);
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[10] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[11] = v7;
  v4[12] = v6;
  return _swift_task_switch(sub_1001030A8, v7, v6);
}

uint64_t sub_1001030A8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[13] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    id v3 = *(char **)(Strong + OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset);
    v0[14] = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)&v3[OBJC_IVAR____TtCC7Journal10Journaling17WorkoutRouteAsset_metadata];
      v0[15] = v4;
      if (v4)
      {
        uint64_t v5 = v3;
        swift_retain();
        return _swift_task_switch(sub_100103214, 0, 0);
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[8] + 56))(v0[6], 1, 1, v0[7]);
      uint64_t v6 = v0[6];
      swift_release();

      sub_10001457C(v6, (uint64_t *)&unk_10080E8F0);
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100103214()
{
  sub_10003B6E8(v0[6]);
  swift_release();
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  return _swift_task_switch(sub_100103284, v1, v2);
}

uint64_t sub_100103284()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 64) + 48))(v1, 1, *(void *)(v0 + 56)) == 1)
  {

    uint64_t v2 = *(void **)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 48);
    swift_release();

    sub_10001457C(v3, (uint64_t *)&unk_10080E8F0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 72);
    sub_1001089E4(v1, v6);
    uint64_t v7 = *(void **)(v0 + 104);
    if (*(void *)(v6 + 24))
    {
      id v8 = v7;
      swift_bridgeObjectRetain();
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v10 = *(id *)(v0 + 104);
    }
    else
    {
      id v10 = v7;
      NSString v9 = 0;
    }
    [v10 setAccessibilityLabel:v9];

    id v11 = v10;
    sub_100465328();
    if (v12)
    {
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v13 = 0;
    }
    uint64_t v14 = *(char **)(v0 + 104);
    [v14 setAccessibilityValue:v13];

    *(void *)(v0 + 128) = *(void *)&v14[OBJC_IVAR____TtC7Journal14RouteAssetView_labelTextProvider];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_10010349C;
    uint64_t v16 = *(void *)(v0 + 72);
    return sub_1001078A0(v16);
  }
}

uint64_t sub_10010349C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1001035F8;
  return sub_1001067C4();
}

uint64_t sub_1001035F8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(void *)(v1 + 88);
  return _swift_task_switch(sub_100103718, v3, v2);
}

uint64_t sub_100103718()
{
  uint64_t v2 = (void *)v0[13];
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = v0[9];
  swift_release();

  sub_100108A48(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001037A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 48) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100103840, v6, v5);
}

uint64_t sub_100103840()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong setIsAccessibilityElement:1];
    [v2 setAccessibilityIgnoresInvertColors:1];
    uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
    [*(id *)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView] setContentMode:2];
    uint64_t v4 = OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView;
    [*(id *)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView] setTranslatesAutoresizingMaskIntoConstraints:0];
    [*(id *)&v2[v3] setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v5 = OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView;
    [v2 addSubview:*(void *)&v2[OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView]];
    id v6 = *(id *)&v2[v5];
    sub_1001DCF60(0.0);

    swift_bridgeObjectRelease();
    [v2 addSubview:*(void *)&v2[v3]];
    [*(id *)&v2[v3] addSubview:*(void *)&v2[v4]];
    id v7 = *(id *)&v2[v3];
    sub_1001DCF60(0.0);

    swift_bridgeObjectRelease();
    id v8 = *(id *)&v2[v4];
    sub_1001DCF60(0.0);

    swift_bridgeObjectRelease();
    uint64_t v9 = OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer;
    id v10 = *(void **)&v2[v3];
    id v11 = *(id *)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer];
    [v10 frame];
    [v11 setFrame:];

    uint64_t v12 = *(void **)&v2[v3];
    id v13 = *(id *)&v2[v4];
    [v12 frame];
    [v13 setFrame:];

    id v14 = [*(id *)&v2[v4] layer];
    uint64_t v15 = OBJC_IVAR____TtC7Journal14RouteAssetView_fillLayer;
    [v14 addSublayer:*(void *)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_fillLayer]];

    id v16 = [*(id *)&v2[v4] layer];
    [v16 addSublayer:*(void *)&v2[v9]];

    uint64_t v17 = *(void **)&v2[v15];
    LODWORD(v18) = 0.75;
    [v17 setOpacity:v18];
    uint64_t v19 = qword_1007F71E0;
    id v20 = v17;
    if (v19 != -1) {
      swift_once();
    }
    id v21 = [(id)qword_10083D7A8 CGColor];
    [v20 setFillColor:v21];

    uint64_t v22 = *(void **)&v2[v9];
    [v22 setFillRule:kCAFillRuleEvenOdd];
    uint64_t v23 = self;
    id v24 = v22;
    id v25 = [v23 systemBlackColor];
    id v26 = [v25 CGColor];

    [v24 setFillColor:v26];
    LODWORD(v27) = 1059481190;
    [*(id *)&v2[v9] setOpacity:v27];
    [*(id *)&v2[v4] layoutIfNeeded];
    id v28 = sub_100103D10((uint64_t)v2);
    uint64_t v29 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
    uint64_t v30 = *(void **)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel];
    *(void *)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel] = v28;

    [v2 addSubview:*(void *)&v2[v29]];
    id v31 = sub_100103F44((uint64_t)v2);
    uint64_t v32 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
    id v33 = *(void **)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel];
    *(void *)&v2[OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel] = v31;

    [v2 addSubview:*(void *)&v2[v32]];
    id v34 = *(id *)&v2[v29];
    uint64_t v35 = (void *)UIView.contentCompressionResistancePriority(_:forAxis:)();

    id v36 = *(id *)&v2[v3];
    uint64_t v37 = (void *)UIView.contentCompressionResistancePriority(_:forAxis:)();

    id v38 = *(id *)&v2[v4];
    uint64_t v39 = (void *)UIView.contentCompressionResistancePriority(_:forAxis:)();

    id v40 = *(id *)&v2[v32];
    id v41 = (void *)UIView.contentCompressionResistancePriority(_:forAxis:)();

    sub_100102D94(1);
  }
  id v42 = *(uint64_t (**)(void))(v0 + 8);
  return v42();
}

id sub_100103D10(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  switch(*(unsigned char *)(a1 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType))
  {
    case 5:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    default:
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_7:
        if (qword_1007F7268 != -1) {
          swift_once();
        }
        uint64_t v4 = &qword_10083D830;
      }
      else
      {
        if (qword_1007F72C0 != -1) {
          swift_once();
        }
        uint64_t v4 = &qword_10083D888;
      }
      [v2 setFont:*v4];
      id v5 = [self whiteColor];
      [v2 setTextColor:v5];

      [v2 setTextAlignment:0];
      [v2 setAdjustsFontForContentSizeCategory:1];
      [v2 setLineBreakMode:4];
      return v2;
  }
}

id sub_100103F44(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  switch(*(unsigned char *)(a1 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType))
  {
    case 5:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    default:
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_7:
        if (qword_1007F7218 != -1) {
          swift_once();
        }
        uint64_t v4 = &qword_10083D7E0;
      }
      else
      {
        if (qword_1007F72B0 != -1) {
          swift_once();
        }
        uint64_t v4 = &qword_10083D878;
      }
      [v2 setFont:*v4];
      id v5 = [self tertiaryLabelColor];
      [v2 setTextColor:v5];

      [v2 setAdjustsFontForContentSizeCategory:1];
      [v2 setLineBreakMode:4];
      [v2 setTextAlignment:0];
      return v2;
  }
}

void sub_1001041A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView);
  uint64_t v6 = OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType;
  id v7 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v5) + 0x58);
  uint64_t v8 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType);
  uint64_t v9 = v5;
  v7(9, v8);

  int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_previousSizeType);
  if (v10 == 6 || (sub_10017CB6C(*(unsigned char *)(v1 + v6), v10) & 1) == 0)
  {
    id v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                + OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView), "superview"));

    if (v11)
    {
      id v12 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                  + OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel), "superview"));

      if (v12)
      {
        id v13 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                    + OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel), "superview"));

        if (v13)
        {
          uint64_t v14 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 1, 1, v14);
          uint64_t v15 = swift_allocObject();
          swift_unknownObjectWeakInit();
          type metadata accessor for MainActor();
          swift_retain();
          uint64_t v16 = static MainActor.shared.getter();
          uint64_t v17 = (void *)swift_allocObject();
          void v17[2] = v16;
          v17[3] = &protocol witness table for MainActor;
          v17[4] = v15;
          swift_release();
          sub_100328A60((uint64_t)v4, (uint64_t)&unk_1007FE5C8, (uint64_t)v17);
          swift_release();
        }
      }
    }
  }
}

uint64_t sub_100104400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return _swift_task_switch(sub_100104498, v6, v5);
}

uint64_t sub_100104498()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
    v0[10] = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
    id v4 = *(id *)(Strong + v3);
    UIView.removeAllConstraints()();

    uint64_t v5 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
    v0[11] = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
    id v6 = *(id *)(v2 + v5);
    UIView.removeAllConstraints()();

    id v7 = (void *)swift_task_alloc();
    v0[12] = v7;
    void *v7 = v0;
    v7[1] = sub_1001045D0;
    return sub_1001067C4();
  }
  else
  {
    swift_release();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1001045D0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return _swift_task_switch(sub_1001046F0, v3, v2);
}

uint64_t sub_1001046F0()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_release();
  [*(id *)(v3 + v1) setMaximumContentSizeCategory:UIContentSizeCategoryExtraExtraExtraLarge];
  [*(id *)(v3 + v2) setMaximumContentSizeCategory:UIContentSizeCategoryExtraExtraExtraLarge];
  [*(id *)(v3 + v1) setAdjustsFontForContentSizeCategory:1];
  [*(id *)(v3 + v2) setAdjustsFontForContentSizeCategory:1];
  uint64_t v59 = OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType;
  uint64_t v60 = v3;
  switch(*(unsigned char *)(v3 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType))
  {
    case 2:
      sub_100105B9C();
      break;
    case 3:
      sub_100104CAC();
      break;
    case 4:
      uint64_t v4 = *(void *)(v0 + 88);
      uint64_t v5 = *(void *)(v0 + 72);
      [*(id *)(v5 + *(void *)(v0 + 80)) setHidden:1];
      [*(id *)(v5 + v4) setHidden:1];
      break;
    case 5:
      sub_100106228();
      break;
    default:
      sub_1001053FC();
      break;
  }
  id v6 = *(char **)(v0 + 72);
  uint64_t v7 = OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView;
  id v8 = *(id *)&v6[OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView];
  UIView.removeAllConstraints()();

  uint64_t v58 = OBJC_IVAR____TtC7Journal14RouteAssetView_fillLayer;
  id v9 = *(id *)&v6[OBJC_IVAR____TtC7Journal14RouteAssetView_fillLayer];
  [v6 bounds];
  [v9 setFrame:];

  uint64_t v57 = OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer;
  uint64_t v10 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
  id v11 = *(void **)&v6[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView];
  id v12 = *(id *)&v6[OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer];
  [v11 frame];
  [v12 setFrame:];

  id v13 = *(void **)&v6[v10];
  id v14 = *(id *)&v6[v7];
  [v13 frame];
  [v14 setFrame:];

  id v15 = *(id *)&v6[v7];
  uint64_t v16 = &selRef_drawMapRect_zoomScale_inContext_;
  id v17 = [v15 superview];
  uint64_t v18 = &stru_1007D7000;
  uint64_t v19 = &stru_1007D7000;
  if (v17)
  {
    id v20 = v17;
    [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v21 = [v15 centerXAnchor];
    id v22 = [v20 centerXAnchor];
    id v23 = [v21 constraintEqualToAnchor:v22];

    [v23 setConstant:0.0];
    if (v23)
    {
      id v24 = v23;
      [v24 setActive:1];

      id v20 = v24;
    }
    uint64_t v19 = &stru_1007D7000;
    uint64_t v18 = &stru_1007D7000;
    uint64_t v16 = &selRef_drawMapRect_zoomScale_inContext_;
  }
  else
  {
    id v23 = 0;
  }

  id v25 = *(id *)&v6[v7];
  id v26 = [v25 v16[77]];
  if (v26)
  {
    double v27 = v26;
    [v25 v18[96].name];
    id v28 = [v25 centerYAnchor];
    id v29 = [v27 centerYAnchor];
    id v30 = [v28 v19[68].types:v29];

    [v30 setConstant:0.0];
    if (v30)
    {
      id v31 = v30;
      [v31 setActive:1];

      double v27 = v31;
    }
  }
  else
  {
    id v30 = 0;
  }

  uint64_t v32 = *(unsigned __int8 **)(v0 + 72);
  id v33 = *(id *)&v6[v7];
  sub_1001DCF60(0.0);

  swift_bridgeObjectRelease();
  id v56 = *(id *)&v6[v7];
  [v56 setClipsToBounds:1];
  sub_1001016D4();
  [v32 bounds];
  CGFloat v35 = v34;
  [v32 bounds];
  CGFloat v37 = v36;
  uint64_t v38 = OBJC_IVAR____TtC7Journal14RouteAssetView_previousSizeType;
  int v39 = v32[OBJC_IVAR____TtC7Journal14RouteAssetView_previousSizeType];
  if (v39 == 6)
  {
    [*(id *)(v0 + 72) bounds];
    double Width = CGRectGetWidth(v62);
  }
  else
  {
    double Width = sub_1004A8A88(v39);
  }
  CGFloat v41 = Width;
  int v42 = v32[v38];
  if (v42 == 6)
  {
    [*(id *)(v0 + 72) bounds];
    CGFloat Height = CGRectGetHeight(v63);
  }
  else
  {
    sub_1004A8A88(v42);
    CGFloat Height = v44;
  }
  char v45 = *(unsigned char *)(v60 + v59);
  [*(id *)(v0 + 72) bounds];
  int v50 = v32[v38];
  if (v50 == 6) {
    LOBYTE(v5sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(unsigned char *)(v60 + v59);
  }
  uint64_t v52 = *(void *)(v0 + 80);
  uint64_t v51 = *(void *)(v0 + 88);
  uint64_t v53 = *(char **)(v0 + 72);
  sub_100106D98(v45, v50, v46, v47, v48, v49, v35, v37, v41, Height, 0.3);
  v32[v38] = *(unsigned char *)(v60 + v59);
  [v53 layoutIfNeeded];
  [*(id *)&v53[v52] layoutIfNeeded];
  [*(id *)&v53[v51] layoutIfNeeded];
  [*(id *)&v6[v58] layoutIfNeeded];
  [*(id *)&v6[v57] layoutIfNeeded];
  [v56 layoutIfNeeded];

  uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
  return v54();
}

id sub_100104CAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
  [*(id *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel] setHidden:0];
  uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
  [*(id *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel] setHidden:0];
  if (*(void *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset])
  {
    sub_1004A8A88(3);
    double v5 = (v4 + -16.0) * 0.5 + 8.0 + (v4 + -16.0) * 0.5 + 8.0;
  }
  else
  {
    double v5 = 16.0;
  }
  id v6 = *(id *)&v0[v2];
  id v7 = [v6 superview];
  id v8 = &stru_1007D7000;
  if (v7)
  {
    id v9 = v7;
    [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v10 = [v6 leadingAnchor];
    id v11 = [v9 leadingAnchor];
    id v12 = [v10 constraintEqualToAnchor:v11];

    [v12 setConstant:v5];
    if (v12)
    {
      id v12 = v12;
      id v8 = &stru_1007D7000;
      [v12 setActive:1];

      id v6 = v12;
    }
    else
    {
      id v8 = &stru_1007D7000;
    }
  }
  else
  {
    id v12 = 0;
    id v9 = v6;
  }

  id v13 = &stru_1007D7000;
  id v14 = [*(id *)&v1[v2] bottomAnchor];
  id v15 = [v1 centerYAnchor];
  id v16 = [v14 constraintEqualToAnchor:v15];

  [v16 v8[90].name:1];
  id v17 = *(id *)&v1[v2];
  id v18 = [v17 superview];
  if (v18)
  {
    uint64_t v19 = v18;
    id v20 = v8;
    [v17 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v21 = [v17 trailingAnchor];
    id v22 = [v19 trailingAnchor];
    id v23 = [v21 constraintLessThanOrEqualToAnchor:v22];

    [v23 setConstant:-8.0];
    if (v23)
    {
      id v23 = v23;
      [v23 v20[90].name:1];

      id v17 = v23;
    }

    id v13 = &stru_1007D7000;
  }
  else
  {
    id v23 = 0;
    uint64_t v19 = v17;
  }

  [*(id *)&v1[v2] setTextAlignment:0];
  id v24 = *(id *)&v1[v2];
  id v25 = [v24 superview];
  id v26 = &stru_1007D7000;
  if (v25)
  {
    double v27 = v25;
    [v24 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v28 = [v24 topAnchor];
    id v29 = [v27 topAnchor];
    id v30 = [v28 constraintGreaterThanOrEqualToAnchor:v29];

    [v30 setConstant:8.0];
    if (v30)
    {
      id v30 = v30;
      [v30 setActive:1];

      id v24 = v30;
    }

    id v26 = &stru_1007D7000;
  }
  else
  {
    id v30 = 0;
    double v27 = v24;
  }

  id v31 = *(void **)&v1[v2];
  id v32 = *(id *)&v1[v3];
  id v33 = v31;
  [v32 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v34 = [v32 v26[100].types];
  id v35 = [v33 v13[66].name];
  id v36 = [v34 constraintEqualToAnchor:v35];

  [v36 setConstant:0.0];
  [v36 setActive:1];

  id v37 = *(id *)&v1[v3];
  id v38 = [v37 superview];
  if (v38)
  {
    int v39 = v38;
    [v37 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v40 = [v37 leadingAnchor];
    id v41 = [v39 leadingAnchor];
    id v42 = [v40 constraintEqualToAnchor:v41];

    [v42 setConstant:v5];
    if (v42)
    {
      id v42 = v42;
      [v42 setActive:1];

      id v37 = v42;
    }
    uint64_t v43 = &selRef_drawMapRect_zoomScale_inContext_;
    double v44 = &stru_1007D7000;
  }
  else
  {
    id v42 = 0;
    int v39 = v37;
    uint64_t v43 = &selRef_drawMapRect_zoomScale_inContext_;
    double v44 = &stru_1007D7000;
  }

  id v45 = [*(id *)&v1[v3] v44[100].types];
  id v46 = [v1 v43[91]];
  id v47 = [v45 constraintEqualToAnchor:v46];

  [v47 setActive:1];
  id v48 = *(id *)&v1[v3];
  id v49 = [v48 superview];
  if (v49)
  {
    int v50 = v49;
    [v48 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v51 = [v48 trailingAnchor];
    id v52 = [v50 trailingAnchor];
    id v53 = [v51 constraintLessThanOrEqualToAnchor:v52];

    [v53 setConstant:-8.0];
    if (v53)
    {
      id v53 = v53;
      [v53 setActive:1];

      id v48 = v53;
    }
    uint64_t v54 = &selRef_drawMapRect_zoomScale_inContext_;
  }
  else
  {
    id v53 = 0;
    int v50 = v48;
    uint64_t v54 = &selRef_drawMapRect_zoomScale_inContext_;
  }

  id v55 = *(id *)&v1[v3];
  id v56 = sub_1001DD438(2, 1, 8.0);

  uint64_t v57 = *(void **)&v1[v3];
  uint64_t v58 = v54[133];

  return [v57 v58];
}

id sub_1001053FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
  [*(id *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel] setHidden:0];
  uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
  [*(id *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel] setHidden:0];
  if (*(void *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset])
  {
    int v4 = v0[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType];
    sub_1004A8A88(v1[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType]);
    if (v4 == 5)
    {
      double v6 = -116.0;
    }
    else if (v4 == 2)
    {
      double v6 = -70.0;
    }
    else
    {
      double v6 = -16.0;
    }
    double v7 = (v5 + v6) * 0.5;
  }
  else
  {
    double v7 = 0.0;
  }
  double v8 = v7 + v7 + 8.0 + 12.0;
  id v9 = *(id *)&v1[v2];
  id v10 = [v9 superview];
  id v11 = &stru_1007D7000;
  if (v10)
  {
    id v12 = v10;
    [v9 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v13 = [v9 leadingAnchor];
    id v14 = [v12 leadingAnchor];
    id v15 = [v13 constraintEqualToAnchor:v14];

    [v15 setConstant:v8];
    if (v15)
    {
      id v15 = v15;
      id v11 = &stru_1007D7000;
      [v15 setActive:1];

      id v9 = v15;
      uint64_t v16 = v3;
    }
    else
    {
      uint64_t v16 = v3;
      id v11 = &stru_1007D7000;
    }
  }
  else
  {
    id v15 = 0;
    id v12 = v9;
    uint64_t v16 = v3;
  }

  id v17 = [*(id *)&v1[v2] bottomAnchor];
  id v18 = [v1 centerYAnchor];
  id v19 = [v17 constraintEqualToAnchor:v18];

  [v19 v11[90].name:1];
  id v20 = *(id *)&v1[v2];
  id v21 = [v20 superview];
  if (v21)
  {
    id v22 = v21;
    id v23 = v11;
    [v20 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v24 = [v20 trailingAnchor];
    id v25 = [v22 trailingAnchor];
    id v26 = [v24 constraintLessThanOrEqualToAnchor:v25];

    [v26 setConstant:-8.0];
    if (v26)
    {
      id v26 = v26;
      [v26 v23[90].name:1];

      id v20 = v26;
    }
  }
  else
  {
    id v23 = v11;
    id v26 = 0;
    id v22 = v20;
  }

  [*(id *)&v1[v2] setTextAlignment:0];
  id v27 = *(id *)&v1[v2];
  id v28 = [v27 superview];
  id v29 = &stru_1007D7000;
  if (v28)
  {
    id v30 = v28;
    [v27 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v31 = [v27 topAnchor];
    id v32 = [v30 topAnchor];
    id v33 = [v31 constraintGreaterThanOrEqualToAnchor:v32];

    [v33 setConstant:12.0];
    if (v33)
    {
      id v33 = v33;
      [v33 v23[90].name:1];

      id v27 = v33;
    }

    id v29 = &stru_1007D7000;
  }
  else
  {
    id v33 = 0;
    id v30 = v27;
  }

  id v34 = *(void **)&v1[v2];
  id v35 = *(id *)&v1[v16];
  id v36 = v34;
  [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v37 = [v35 v29[100].types];
  id v38 = [v36 bottomAnchor];
  id v39 = [v37 constraintEqualToAnchor:v38];

  [v39 setConstant:0.0];
  [v39 v23[90].name:1];

  id v40 = *(id *)&v1[v16];
  id v41 = [v40 superview];
  if (v41)
  {
    id v42 = v41;
    [v40 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v43 = [v40 leadingAnchor];
    id v44 = [v42 leadingAnchor];
    id v45 = [v43 constraintEqualToAnchor:v44];

    [v45 setConstant:v8];
    if (v45)
    {
      id v45 = v45;
      [v45 v23[90].name:1];

      id v40 = v45;
    }
    id v46 = &stru_1007D7000;
  }
  else
  {
    id v45 = 0;
    id v42 = v40;
    id v46 = &stru_1007D7000;
  }

  id v47 = [*(id *)&v1[v16] v46[100].types];
  id v48 = [v1 centerYAnchor];
  id v49 = [v47 constraintEqualToAnchor:v48];

  [v49 v23[90].name:1];
  id v50 = *(id *)&v1[v16];
  id v51 = [v50 superview];
  if (v51)
  {
    id v52 = v51;
    [v50 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v53 = [v50 trailingAnchor];
    id v54 = [v52 trailingAnchor];
    id v55 = [v53 constraintLessThanOrEqualToAnchor:v54];

    [v55 setConstant:-12.0];
    if (v55)
    {
      id v55 = v55;
      [v55 v23[90].name:1];

      id v50 = v55;
    }
  }
  else
  {
    id v55 = 0;
    id v52 = v50;
  }

  id v56 = *(id *)&v1[v16];
  id v57 = sub_1001DD438(2, 1, 8.0);

  if (v57)
  {
    LODWORD(v58) = 1132068864;
    [v57 setPriority:v58];
  }
  uint64_t v59 = *(void **)&v1[v16];

  return [v59 setTextAlignment:0];
}

void sub_100105B9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
  [*(id *)(v0 + OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel) setHidden:0];
  uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
  [*(id *)(v0 + OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel) setHidden:0];
  [*(id *)(v0 + v3) setTextAlignment:1];
  [*(id *)(v0 + v2) setTextAlignment:1];
  id v4 = *(id *)(v0 + v2);
  id v5 = [v4 superview];
  if (v5)
  {
    double v6 = v5;
    [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v7 = [v4 topAnchor];
    id v8 = [v6 topAnchor];
    id v9 = [v7 constraintEqualToAnchor:v8];

    [v9 setConstant:12.0];
    if (v9)
    {
      id v9 = v9;
      [v9 setActive:1];

      id v4 = v9;
    }

    id v10 = &stru_1007D7000;
  }
  else
  {
    id v9 = 0;
    double v6 = v4;
    id v10 = &stru_1007D7000;
  }

  id v11 = *(id *)(v1 + v2);
  id v12 = [v11 superview];
  if (v12)
  {
    id v13 = v12;
    [v11 v10[96].name];
    id v14 = [v11 leadingAnchor];
    id v15 = [v13 leadingAnchor];
    id v16 = [v14 constraintEqualToAnchor:v15];

    [v16 setConstant:8.0];
    if (v16)
    {
      id v16 = v16;
      [v16 setActive:1];

      id v11 = v16;
    }
  }
  else
  {
    id v16 = 0;
    id v13 = v11;
  }

  id v17 = *(id *)(v1 + v2);
  id v18 = [v17 superview];
  if (v18)
  {
    id v19 = v18;
    [v17 v10[96].name];
    id v20 = [v17 trailingAnchor];
    id v21 = [v19 trailingAnchor];
    id v22 = [v20 constraintEqualToAnchor:v21];

    [v22 setConstant:-8.0];
    if (v22)
    {
      id v22 = v22;
      [v22 setActive:1];

      id v17 = v22;
    }
  }
  else
  {
    id v22 = 0;
    id v19 = v17;
  }

  if (*(void *)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset))
  {
    sub_1004A8A88(2);
    double v24 = (v23 + -70.0) * 0.5 + (v23 + -70.0) * 0.5 + 12.0 + 5.0;
  }
  else
  {
    double v24 = 17.0;
  }
  id v25 = *(void **)(v1 + v2);
  id v26 = *(id *)(v1 + v3);
  id v27 = v25;
  [v26 v10[96].name];
  id v28 = [v26 topAnchor];
  id v29 = [v27 bottomAnchor];
  id v30 = [v28 constraintGreaterThanOrEqualToAnchor:v29];

  [v30 setConstant:v24];
  [v30 setActive:1];

  LODWORD(v31) = 1132068864;
  [v30 setPriority:v31];

  id v32 = *(id *)(v1 + v3);
  id v33 = sub_1001DD438(0, 1, 12.0);

  id v34 = *(id *)(v1 + v3);
  id v35 = [v34 superview];
  if (v35)
  {
    id v36 = v35;
    id v37 = v10;
    [v34 v10[96].name];
    id v38 = [v34 leadingAnchor];
    id v39 = [v36 leadingAnchor];
    id v40 = [v38 constraintEqualToAnchor:v39];

    [v40 setConstant:12.0];
    if (v40)
    {
      id v40 = v40;
      [v40 setActive:1];

      id v34 = v40;
    }
  }
  else
  {
    id v37 = v10;
    id v40 = 0;
    id v36 = v34;
  }

  id v41 = *(id *)(v1 + v3);
  id v42 = [v41 superview];
  if (v42)
  {
    id v43 = v42;
    [v41 v37[96].name];
    id v44 = [v41 trailingAnchor];
    id v45 = [v43 trailingAnchor];
    id v46 = [v44 constraintEqualToAnchor:v45];

    [v46 setConstant:-12.0];
    if (v46)
    {
      id v47 = v46;
      [v47 setActive:1];

      id v41 = v47;
    }
    else
    {
      id v47 = 0;
    }
  }
  else
  {
    id v47 = 0;
    id v43 = v41;
  }
}

id sub_100106228()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
  [*(id *)(v0 + OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel) setHidden:0];
  uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
  [*(id *)(v0 + OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel) setHidden:0];
  uint64_t v4 = qword_1007F7268;
  id v5 = *(id *)(v0 + v2);
  if (v4 != -1) {
    swift_once();
  }
  [v5 setFont:qword_10083D830];

  [*(id *)(v1 + v2) setFont:qword_10083D830];
  id v6 = *(id *)(v1 + v2);
  id v7 = [v6 superview];
  id v8 = &stru_1007D7000;
  if (v7)
  {
    id v9 = v7;
    [v6 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v10 = [v6 topAnchor];
    id v11 = [v9 topAnchor];
    id v12 = [v10 constraintEqualToAnchor:v11];

    [v12 setConstant:25.0];
    if (v12)
    {
      id v12 = v12;
      [v12 setActive:1];

      id v6 = v12;
    }

    id v8 = &stru_1007D7000;
  }
  else
  {
    id v12 = 0;
    id v9 = v6;
  }

  id v13 = *(id *)(v1 + v2);
  id v14 = [v13 superview];
  if (v14)
  {
    id v15 = v14;
    [v13 v8[96].name];
    id v16 = [v13 leadingAnchor];
    id v17 = [v15 leadingAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17];

    [v18 setConstant:20.0];
    if (v18)
    {
      id v18 = v18;
      [v18 setActive:1];

      id v13 = v18;
    }

    id v8 = &stru_1007D7000;
  }
  else
  {
    id v18 = 0;
    id v15 = v13;
  }

  id v19 = *(id *)(v1 + v2);
  id v20 = [v19 superview];
  if (v20)
  {
    id v21 = v20;
    [v19 v8[96].name];
    id v22 = [v19 trailingAnchor];
    id v23 = [v21 trailingAnchor];
    id v24 = [v22 constraintEqualToAnchor:v23];

    [v24 setConstant:-20.0];
    if (v24)
    {
      id v24 = v24;
      [v24 setActive:1];

      id v19 = v24;
    }

    id v8 = &stru_1007D7000;
  }
  else
  {
    id v24 = 0;
    id v21 = v19;
  }

  [*(id *)(v1 + v2) setTextAlignment:1];
  id v25 = *(id *)(v1 + v3);
  id v26 = sub_1001DD438(0, 1, 25.0);

  id v27 = *(id *)(v1 + v3);
  id v28 = [v27 superview];
  if (v28)
  {
    id v29 = v28;
    [v27 v8[96].name];
    id v30 = [v27 leadingAnchor];
    id v31 = [v29 leadingAnchor];
    id v32 = [v30 constraintEqualToAnchor:v31];

    [v32 setConstant:20.0];
    if (v32)
    {
      id v32 = v32;
      [v32 setActive:1];

      id v27 = v32;
    }

    id v8 = &stru_1007D7000;
  }
  else
  {
    id v32 = 0;
    id v29 = v27;
  }

  id v33 = *(id *)(v1 + v3);
  id v34 = [v33 superview];
  if (v34)
  {
    id v35 = v34;
    [v33 v8[96].name];
    id v36 = [v33 trailingAnchor];
    id v37 = [v35 trailingAnchor];
    id v38 = [v36 constraintEqualToAnchor:v37];

    [v38 setConstant:-20.0];
    if (v38)
    {
      id v38 = v38;
      [v38 setActive:1];

      id v33 = v38;
    }
  }
  else
  {
    id v38 = 0;
    id v35 = v33;
  }

  id v39 = *(void **)(v1 + v3);

  return [v39 setTextAlignment:1];
}

uint64_t sub_1001067C4()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for AttributedString();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  sub_100010218(&qword_1007FE5B8);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[9] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[10] = v4;
  v1[11] = v3;
  return _swift_task_switch(sub_100106908, v4, v3);
}

uint64_t sub_100106908()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel);
  v0[12] = v2;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_labelTextProvider);
  v0[13] = v3;
  id v4 = v2;
  return _swift_task_switch(sub_100106994, v3, 0);
}

uint64_t sub_100106994()
{
  uint64_t v1 = v0[13];
  v0[14] = *(void *)(v1 + 112);
  v0[15] = *(void *)(v1 + 120);
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100106A1C, v2, v3);
}

uint64_t sub_100106A1C()
{
  if (v0[15])
  {
    NSString v1 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v1 = 0;
  }
  uint64_t v3 = (void *)v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[2];
  [v3 setText:v1];

  uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel);
  v0[16] = v5;
  id v6 = v5;
  return _swift_task_switch(sub_100106AE8, v2, 0);
}

uint64_t sub_100106AE8()
{
  v0[17] = *(void *)(v0[13] + 128);
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100106B68, v1, v2);
}

uint64_t sub_100106B68()
{
  uint64_t v1 = (void *)v0[17];
  swift_release();
  if (v1)
  {
    if (*(void *)(v0[17] + 16)
      && (unint64_t v2 = sub_10001B77C(*(unsigned char *)(v0[2] + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType)), (v3 & 1) != 0))
    {
      (*(void (**)(void, unint64_t, void))(v0[4] + 16))(v0[8], *(void *)(v0[17] + 56) + *(void *)(v0[4] + 72) * v2, v0[3]);
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 1;
    }
    uint64_t v6 = v0[7];
    uint64_t v5 = v0[8];
    uint64_t v7 = v0[3];
    uint64_t v8 = v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, v4, 1, v7);
    swift_bridgeObjectRelease();
    sub_10001B220(v5, v6, &qword_1007FE5B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v9 = v0[6];
      uint64_t v11 = v0[4];
      uint64_t v10 = v0[5];
      uint64_t v12 = v0[3];
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v9, v0[7], v12);
      sub_10001B284(0, (unint64_t *)&qword_1007FBCA0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
      uint64_t v1 = NSAttributedString.init(_:)();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v12);
    }
    sub_10001457C(v0[8], &qword_1007FE5B8);
  }
  id v13 = (void *)v0[16];
  [v13 setAttributedText:v1];

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

void sub_100106D98(char a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, double a11)
{
  [*(id *)(v17 + OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView) setContentMode:2];
  uint64_t v25 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset;
  double v26 = 0.0;
  if (*(void *)(v17 + OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset))
  {
    sub_1004A8A88(a1);
    double v28 = -116.0;
    if (a1 != 5) {
      double v28 = -16.0;
    }
    if (a1 == 2) {
      double v28 = -70.0;
    }
    double v29 = (v27 + v28) * 0.5;
    if (*(void *)(v17 + v25))
    {
      sub_1004A8A88(a2);
      if (a2 == 5)
      {
        double v26 = (v30 + -116.0) * 0.5;
      }
      else
      {
        double v31 = (v30 + -16.0) * 0.5;
        double v32 = (v30 + -70.0) * 0.5;
        if (a2 == 2) {
          double v26 = v32;
        }
        else {
          double v26 = v31;
        }
      }
    }
  }
  else
  {
    double v29 = 0.0;
  }
  id v33 = self;
  id v34 = [v33 bezierPathWithOvalInRect:a10 * 0.5 - v26, a10 * 0.5 - v26, v26 + v26, v26 + v26];
  id v35 = [v33 bezierPathWithOvalInRect:a6 * 0.5 - v29, a6 * 0.5 - v29, v29 + v29, v29 + v29];
  CGFloat v51 = a7 + -20.0;
  v57.origin.x = a7;
  v57.origin.y = a8;
  v57.size.width = a9;
  v57.size.height = a10;
  CGFloat v36 = CGRectGetWidth(v57) + 40.0;
  v58.origin.x = a7;
  v58.origin.y = a8;
  v58.size.width = a9;
  v58.size.height = a10;
  CGFloat v37 = CGRectGetHeight(v58) + 40.0;
  v59.origin.x = a3;
  v59.origin.y = a4;
  v59.size.width = a5;
  v59.size.height = a6;
  CGFloat v38 = CGRectGetWidth(v59) + 40.0;
  v60.origin.x = a3;
  v60.origin.y = a4;
  v60.size.width = a5;
  v60.size.height = a6;
  CGFloat v39 = CGRectGetHeight(v60) + 40.0;
  id v40 = [v33 bezierPathWithRect:v51, a8 + -20.0, v36, v37];
  [v34 appendPath:v40];

  id v41 = [v33 bezierPathWithRect:a3 + -20.0, a4 + -20.0, v38, v39];
  [v35 appendPath:v41];

  id v42 = self;
  [v42 begin];
  [v42 setDisableActions:1];
  id v43 = *(void **)(v17 + OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer);
  id v44 = [v34 CGPath];
  [v43 setPath:v44];

  [v42 commit];
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [self animationWithKeyPath:v45];

  id v47 = [v34 CGPath];
  [v46 setFromValue:v47];

  id v48 = [v35 CGPath];
  [v46 setToValue:v48];

  [v46 setDuration:a11];
  id v49 = self;
  id v55 = v46;
  id v50 = [v49 functionWithName:kCAMediaTimingFunctionEaseOut];
  [v55 setTimingFunction:v50];

  [v55 setFillMode:kCAFillModeForwards];
  [v55 setRemovedOnCompletion:0];
  [v43 addAnimation:v55 forKey:0];
}

id sub_100107288(uint64_t a1, double a2)
{
  [*(id *)(a1 + OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel) setAlpha:];
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel);

  return [v4 setAlpha:a2];
}

void sub_1001072F0(char *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
  [*(id *)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView) frame];
  uint64_t v4 = v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_naturalIconFrame;
  *(void *)uint64_t v4 = v5;
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v7;
  *(void *)(v4 + 24) = v8;
  *(unsigned char *)(v4 + 32) = 0;
  if (a1)
  {
    uint64_t v9 = *(void **)(v1 + v3);
    uint64_t v10 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
    uint64_t v11 = *(void **)&a1[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView];
    uint64_t v17 = a1;
    id v12 = v9;
    [v11 frame];
    [v12 setFrame:];

    id v13 = *(void **)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView);
    [*(id *)&a1[v10] frame];
    [v13 setFrame:];
    id v14 = *(void **)&a1[v10];
    id v15 = *(id *)&v17[OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView];
    [v14 frame];
    [v15 setFrame:];

    uint64_t v16 = *(void **)(v1 + OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer);
    [*(id *)&a1[v10] frame];
    [v16 setFrame:];
  }
}

uint64_t sub_10010744C(void *a1)
{
  uint64_t v3 = (double *)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_naturalIconFrame];
  if (v1[OBJC_IVAR____TtC7Journal14RouteAssetView_naturalIconFrame + 32])
  {
    [*(id *)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView] frame];
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    [*(id *)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView] setFrame:v5, v7, v9, v11];
    [*(id *)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView] setFrame:v5, v7, v9, v11];
    double v29 = *(void **)&v1[OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer];
    [v29 frame];
    [v29 setFrame:v5, v7];
    double v28 = 0;
    goto LABEL_7;
  }
  double v9 = v3[2];
  double v11 = v3[3];
  double v5 = *v3;
  double v7 = v3[1];
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v12 = self;
  id v13 = (double *)swift_allocObject();
  *((void *)v13 + 2) = v1;
  v13[3] = v5;
  v13[4] = v7;
  v13[5] = v9;
  v13[6] = v11;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100109D44;
  *(void *)(v14 + 24) = v13;
  v30[4] = sub_10001AC84;
  v30[5] = v14;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 1107296256;
  v30[2] = sub_1003F44E4;
  v30[3] = &unk_10079A720;
  id v15 = _Block_copy(v30);
  uint64_t v16 = a1;
  uint64_t v17 = v1;
  swift_retain();
  swift_release();
  [(id)v12 performWithoutAnimation:v15];
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v12 & 1) == 0)
  {
    uint64_t v19 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
    id v20 = *(void **)&v16[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView];
    id v21 = *(id *)&v17[OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView];
    [v20 frame];
    [v21 setFrame:];

    id v22 = *(void **)&v17[OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView];
    [*(id *)&v16[v19] frame];
    [v22 setFrame:];
    id v23 = *(void **)&v17[OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer];
    [*(id *)&v16[v19] frame];
    double v25 = v24;
    double v27 = v26;
    [v23 frame];
    [v23 setFrame:v25 v27];

    double v28 = sub_100109D44;
LABEL_7:
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((unsigned char *)v3 + 32) = 1;
    return sub_10001ABB8((uint64_t)v28);
  }
  __break(1u);
  return result;
}

id sub_100107770(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
  id v11 = *(id *)(a1 + OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView);
  UIView.removeAllConstraints()();

  uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView);
  UIView.removeAllConstraints()();
  [*(id *)(a1 + v10) setFrame:a2, a3, a4, a5];
  [v12 setFrame:a2, a3, a4, a5];
  id v13 = *(void **)(a1 + OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer);
  [v13 frame];

  return [v13 setFrame:a2, a3];
}

void *sub_10010785C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset);
  id v2 = v1;
  return v1;
}

uint64_t sub_10010788C()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
}

uint64_t sub_1001078A0(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  type metadata accessor for Locale();
  v2[6] = swift_task_alloc();
  sub_100010218(&qword_100805980);
  v2[7] = swift_task_alloc();
  uint64_t v3 = sub_100010218((uint64_t *)&unk_10080E900);
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = sub_100010218(&qword_1007FE5A0);
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v5 = sub_100010218((uint64_t *)&unk_10080E910);
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v6 = sub_100010218(&qword_1007FE5A8);
  v2[17] = v6;
  v2[18] = *(void *)(v6 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = _s17WorkoutRouteAssetC16WorkoutRouteDataVMa(0);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_100107B20, v1, 0);
}

uint64_t sub_100107B20()
{
  uint64_t v1 = *((void *)v0 + 4);
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = *(void *)(v1 + 16);
    unint64_t v3 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  uint64_t v4 = *((void *)v0 + 20);
  uint64_t v5 = *((void *)v0 + 5);
  *(void *)(v5 + 112) = v2;
  *(void *)(v5 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v0 + 23) = sub_1004A8CD8();
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(v4 + 48));
  unint64_t v7 = v6[1];
  if (v7)
  {
    uint64_t v8 = *v6;
    unint64_t v9 = v7;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  *((void *)v0 + 24) = v8;
  *((void *)v0 + 25) = v9;
  uint64_t v10 = *((void *)v0 + 4);
  id v11 = (uint64_t *)(v10 + *(int *)(*((void *)v0 + 20) + 44));
  uint64_t countAndFlagsBits = *v11;
  object = (void *)v11[1];
  sub_100108AA4(v10, *((void *)v0 + 22));
  uint64_t v14 = *((void *)v0 + 22);
  if (object)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v36 = *((void *)v0 + 18);
    uint64_t v34 = *((void *)v0 + 17);
    uint64_t v28 = *((void *)v0 + 19);
    uint64_t v29 = *((void *)v0 + 16);
    uint64_t v35 = *((void *)v0 + 15);
    uint64_t v15 = *((void *)v0 + 13);
    uint64_t v16 = *((void *)v0 + 10);
    uint64_t v32 = *((void *)v0 + 11);
    uint64_t v33 = *((void *)v0 + 14);
    uint64_t v17 = *((void *)v0 + 9);
    uint64_t v30 = *((void *)v0 + 8);
    uint64_t v31 = *((void *)v0 + 12);
    uint64_t v18 = *((void *)v0 + 7);
    uint64_t v19 = self;
    swift_bridgeObjectRetain();
    id v20 = [v19 kilocalories];
    sub_10001B284(0, (unint64_t *)&qword_10080E920);
    Measurement.init(value:unit:)();
    static Measurement<>.FormatStyle.UnitWidth.narrow.getter();
    static MeasurementFormatUnitUsage<>.workout.getter();
    static Locale.autoupdatingCurrent.getter();
    sub_1000DA83C();
    FloatingPointFormatStyle.init(locale:)();
    uint64_t v21 = sub_100010218(&qword_10080E930);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v18, 0, 1, v21);
    static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)();
    sub_10001457C(v18, &qword_100805980);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v30);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v15, v32);
    sub_100014488((unint64_t *)&qword_1007FE5B0, (uint64_t *)&unk_10080E910);
    Measurement<>.formatted<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v29, v33);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v28, v34);
    Swift::String v22 = String.uppercased()();
    uint64_t countAndFlagsBits = v22._countAndFlagsBits;
    object = v22._object;
    swift_bridgeObjectRelease();
  }
  sub_100108A48(v14);
  *((void *)v0 + 26) = countAndFlagsBits;
  *((void *)v0 + 27) = object;
  uint64_t v23 = *((void *)v0 + 4);
  double v24 = *(double *)(v23 + 32);
  int v25 = *(unsigned __int8 *)(v23 + 40);
  sub_100108AA4(v23, *((void *)v0 + 21));
  if (v25 == 1) {
    double v24 = sub_1001080F8(*((void *)v0 + 21));
  }
  v0[28] = v24;
  sub_100108A48(*((void *)v0 + 21));
  if (qword_1007F6968 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_10083CEE0;
  *((void *)v0 + 29) = qword_10083CEE0;
  return _swift_task_switch(sub_100107F04, v26, 0);
}

uint64_t sub_100107F04()
{
  uint64_t v1 = (uint64_t (*)())[*(id *)(*(void *)(v0 + 232) + 112) stringWithDuration:2 durationFormat:*(double *)(v0 + 224)];
  if (v1)
  {
    uint64_t v4 = v1;
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    *(void *)(v0 + 24sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v6;
    *(void *)(v0 + 248) = v8;
    uint64_t v1 = sub_100107FB4;
    uint64_t v2 = v5;
    uint64_t v3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_100107FB4()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = sub_100108B08(v0[24], v0[25], v0[30], v0[31], v0[26], v0[27]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 128) = v2;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

double sub_1001080F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  uint64_t v32 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v33 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)&v32 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = _s17WorkoutRouteAssetC16WorkoutRouteDataVMa(0);
  uint64_t v20 = a1;
  sub_10001B220(a1 + *(int *)(v19 + 28), (uint64_t)v11, (uint64_t *)&unk_1007FC470);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v21(v11, 1, v12) == 1)
  {
    Date.init()();
    sub_10001457C((uint64_t)v11, (uint64_t *)&unk_1007FC470);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  }
  sub_10001B220(v20 + *(int *)(v19 + 32), (uint64_t)v8, (uint64_t *)&unk_1007FC470);
  if (v21(v8, 1, v12) == 1)
  {
    Date.init()();
    sub_10001457C((uint64_t)v8, (uint64_t *)&unk_1007FC470);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v8, v12);
  }
  Swift::String v22 = v32;
  static Calendar.current.getter();
  sub_100010218(&qword_1007FB058);
  uint64_t v23 = type metadata accessor for Calendar.Component();
  uint64_t v24 = *(void *)(v23 - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1006D6280;
  (*(void (**)(unint64_t, void, uint64_t))(v24 + 104))(v26 + v25, enum case for Calendar.Component.second(_:), v23);
  sub_1000F5AEC(v26);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  double v27 = v33;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
  uint64_t v28 = DateComponents.second.getter();
  LOBYTE(v22) = v29;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v35);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v15, v12);
  v30(v18, v12);
  double result = (double)v28;
  if (v22) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1001085C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100108600()
{
  swift_release();
  return sub_10001457C(v0 + OBJC_IVAR____TtC7Journal14RouteAssetView_latestImageRequestID, &qword_100800950);
}

id sub_1001086AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RouteAssetView();
  [super dealloc];
}

uint64_t sub_10010879C()
{
  return type metadata accessor for RouteAssetView();
}

uint64_t type metadata accessor for RouteAssetView()
{
  uint64_t result = qword_1007FE478;
  if (!qword_1007FE478) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001087F0()
{
  sub_10001A7A4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for RouteAssetView.LabelTextProvider()
{
  return self;
}

uint64_t sub_1001088E8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100108924(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100052588;
  return sub_100102F84(a1, v4, v5, v6);
}

uint64_t sub_1001089D8()
{
  return sub_1001010A8();
}

uint64_t sub_1001089E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s17WorkoutRouteAssetC16WorkoutRouteDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100108A48(uint64_t a1)
{
  uint64_t v2 = _s17WorkoutRouteAssetC16WorkoutRouteDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100108AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s17WorkoutRouteAssetC16WorkoutRouteDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_100108B08(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v145 = type metadata accessor for AttributedString();
  uint64_t v135 = *(void *)(v145 - 8);
  __chkstk_darwin(v145 - 8);
  Swift::Int v137 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007FE5B8);
  __chkstk_darwin(v13 - 8);
  unint64_t v136 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v144 = (char *)&v135 - v16;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v150 = a5;
  unint64_t v151 = a6;
  uint64_t v147 = a1;
  unint64_t v148 = a2;
  uint64_t v152 = a3;
  uint64_t v161 = v17;
  if (v17)
  {
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1006D7C30;
    *(void *)(v18 + 56) = &type metadata for String;
    unint64_t v19 = sub_10001B2C0();
    *(void *)(v18 + 32) = a1;
    *(void *)(v18 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a2;
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = v19;
    *(void *)(v18 + 64) = v19;
    *(void *)(v18 + 72) = a3;
    *(void *)(v18 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a4;
    *(void *)(v18 + 136) = &type metadata for String;
    *(void *)(v18 + 144) = v19;
    *(void *)(v18 + 112) = a5;
    *(void *)(v18 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = static String.localizedStringWithFormat(_:_:)();
    uint64_t v21 = a1;
    uint64_t v23 = v22;
    a6 = a2;
  }
  else
  {
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1006D6270;
    *(void *)(v24 + 56) = &type metadata for String;
    unint64_t v25 = sub_10001B2C0();
    *(void *)(v24 + 32) = a5;
    *(void *)(v24 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a6;
    *(void *)(v24 + 96) = &type metadata for String;
    *(void *)(v24 + 104) = v25;
    *(void *)(v24 + 64) = v25;
    *(void *)(v24 + 72) = a3;
    *(void *)(v24 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = a5;
    uint64_t v20 = static String.localizedStringWithFormat(_:_:)();
    uint64_t v23 = v26;
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = &_swiftEmptyDictionarySingleton;
  sub_10059992C(v20, v23, 5u, isUniquelyReferenced_nonNull_native);
  uint64_t v28 = v162;
  swift_bridgeObjectRelease();
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v29 = swift_allocObject();
  long long v159 = xmmword_1006D6270;
  *(_OWORD *)(v29 + 16) = xmmword_1006D6270;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v30 = sub_10001B2C0();
  *(void *)(v29 + 32) = v21;
  *(void *)(v29 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a6;
  *(void *)(v29 + 96) = &type metadata for String;
  *(void *)(v29 + 104) = v30;
  uint64_t v31 = v152;
  *(void *)(v29 + 64) = v30;
  *(void *)(v29 + 72) = v31;
  *(void *)(v29 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = v28;
  sub_10059992C(v32, v34, 2u, v35);
  uint64_t v36 = v162;
  swift_bridgeObjectRelease();
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v37 = swift_allocObject();
  long long v160 = xmmword_1006D6280;
  *(_OWORD *)(v37 + 16) = xmmword_1006D6280;
  *(void *)(v37 + 56) = &type metadata for String;
  *(void *)(v37 + 64) = v30;
  *(void *)(v37 + 32) = v21;
  *(void *)(v37 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a6;
  swift_bridgeObjectRetain();
  uint64_t v38 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = v36;
  sub_10059992C(v38, v40, 3u, v41);
  id v42 = v162;
  swift_bridgeObjectRelease();
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v146 = a4;
  unint64_t v143 = v30;
  if (v161)
  {
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_1006D7C30;
    *(void *)(v43 + 56) = &type metadata for String;
    *(void *)(v43 + 64) = v30;
    unint64_t v44 = v148;
    *(void *)(v43 + 32) = v147;
    *(void *)(v43 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v44;
    *(void *)(v43 + 96) = &type metadata for String;
    *(void *)(v43 + 104) = v30;
    *(void *)(v43 + 72) = v31;
    *(void *)(v43 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a4;
    *(void *)(v43 + 136) = &type metadata for String;
    *(void *)(v43 + 144) = v30;
    *(void *)(v43 + 112) = v150;
    *(void *)(v43 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v151;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v159;
    *(void *)(v45 + 56) = &type metadata for String;
    *(void *)(v45 + 64) = v30;
    *(void *)(v45 + 32) = v150;
    *(void *)(v45 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v151;
    *(void *)(v45 + 96) = &type metadata for String;
    *(void *)(v45 + 104) = v30;
    *(void *)(v45 + 72) = v31;
    *(void *)(v45 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v46 = static String.localizedStringWithFormat(_:_:)();
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = v42;
  sub_10059992C(v46, v48, 1u, v49);
  id v50 = v162;
  swift_bridgeObjectRelease();
  char v51 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = v50;
  sub_10059992C(v46, v48, 0, v51);
  id v52 = v162;
  swift_bridgeObjectRelease();
  char v53 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v162 = v52;
  sub_10059992C(0, 0xE000000000000000, 4u, v53);
  id v54 = v162;
  swift_bridgeObjectRelease();
  int64_t v55 = 0;
  uint64_t v56 = v54[8];
  uint64_t v138 = (char *)(v54 + 8);
  uint64_t v149 = v54;
  uint64_t v57 = 1 << *((unsigned char *)v54 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  unint64_t v59 = v58 & v56;
  int64_t v139 = (unint64_t)(v57 + 63) >> 6;
  NSAttributedStringKey v60 = NSForegroundColorAttributeName;
  NSAttributedStringKey v142 = NSFontAttributeName;
  uint64_t v153 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
  uint64_t v141 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  uint64_t v140 = (void (**)(char *, uint64_t, uint64_t))(v135 + 32);
  uint64_t v61 = &_swiftEmptyDictionarySingleton;
  CGRect v62 = &selRef_drawMapRect_zoomScale_inContext_;
  CGRect v63 = &selRef_archivedDataWithRootObject_requiringSecureCoding_error_;
  *(void *)&long long v159 = NSForegroundColorAttributeName;
  while (1)
  {
    uint64_t v158 = v61;
    if (v59)
    {
      int64_t v154 = v55;
      uint64_t v155 = (v59 - 1) & v59;
      unint64_t v66 = __clz(__rbit64(v59)) | (v55 << 6);
      goto LABEL_31;
    }
    int64_t v67 = v55 + 1;
    if (__OFADD__(v55, 1))
    {
      __break(1u);
      goto LABEL_63;
    }
    if (v67 >= v139) {
      goto LABEL_61;
    }
    unint64_t v68 = *(void *)&v138[8 * v67];
    int64_t v69 = v55 + 1;
    if (!v68)
    {
      int64_t v69 = v55 + 2;
      if (v55 + 2 >= v139) {
        goto LABEL_61;
      }
      unint64_t v68 = *(void *)&v138[8 * v69];
      if (!v68)
      {
        int64_t v69 = v55 + 3;
        if (v55 + 3 >= v139) {
          goto LABEL_61;
        }
        unint64_t v68 = *(void *)&v138[8 * v69];
        if (!v68) {
          break;
        }
      }
    }
LABEL_30:
    int64_t v154 = v69;
    uint64_t v155 = (v68 - 1) & v68;
    unint64_t v66 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_31:
    uint64_t v71 = v149[7];
    uint64_t v161 = *(unsigned __int8 *)(v149[6] + v66);
    uint64_t v72 = (uint64_t *)(v71 + 16 * v66);
    uint64_t v74 = *v72;
    uint64_t v73 = v72[1];
    id v75 = objc_allocWithZone((Class)NSMutableAttributedString);
    swift_bridgeObjectRetain();
    uint64_t v156 = v74;
    uint64_t v157 = v73;
    NSString v76 = String._bridgeToObjectiveC()();
    id v77 = [v75 initWithString:v76];

    id v78 = [self whiteColor];
    id v79 = [v77 string];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v80 = [v77 v62[285]];
    NSString v81 = String._bridgeToObjectiveC()();
    id v82 = [v80 v63[122] v81:1];
    uint64_t v84 = v83;

    [v77 addAttribute:v60 value:v78 range:v82];
    swift_bridgeObjectRelease();
    if (qword_1007F71C8 != -1) {
      swift_once();
    }
    uint64_t v85 = qword_10083D790;
    sub_100010218((uint64_t *)&unk_100806070);
    uint64_t v86 = swift_allocObject();
    *(_OWORD *)(v86 + 16) = v160;
    unint64_t v87 = v143;
    *(void *)(v86 + 56) = &type metadata for String;
    *(void *)(v86 + 64) = v87;
    *(void *)(v86 + 32) = v147;
    *(void *)(v86 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v148;
    swift_bridgeObjectRetain();
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    id v88 = [v77 v62[285]];
    NSString v89 = String._bridgeToObjectiveC()();
    id v90 = [v88 v63[122] v89, 1];
    id v91 = v62;
    uint64_t v93 = v92;

    [v77 addAttribute:v159 value:v85 range:v90];
    swift_bridgeObjectRelease();
    if (qword_1007F71D0 != -1) {
      swift_once();
    }
    uint64_t v94 = qword_10083D798;
    uint64_t v95 = swift_allocObject();
    *(_OWORD *)(v95 + 16) = v160;
    *(void *)(v95 + 56) = &type metadata for String;
    *(void *)(v95 + 64) = v87;
    *(void *)(v95 + 32) = v152;
    *(void *)(v95 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v146;
    swift_bridgeObjectRetain();
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    id v96 = [v77 v91[285]];
    NSString v97 = String._bridgeToObjectiveC()();
    id v98 = [v96 rangeOfString:v97 options:1];
    uint64_t v100 = v99;

    [v77 addAttribute:v159 value:v94 range:v98];
    swift_bridgeObjectRelease();
    if (qword_1007F71B8 != -1) {
      swift_once();
    }
    uint64_t v101 = qword_10083D780;
    uint64_t v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = v160;
    *(void *)(v102 + 56) = &type metadata for String;
    *(void *)(v102 + 64) = v87;
    *(void *)(v102 + 32) = v150;
    *(void *)(v102 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v151;
    swift_bridgeObjectRetain();
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    id v103 = [v77 v91[285]];
    NSString v104 = String._bridgeToObjectiveC()();
    id v105 = [v103 rangeOfString:v104 options:1];
    uint64_t v107 = v106;

    unint64_t v108 = (NSString *)v159;
    [v77 addAttribute:v159 value:v101 range:v105];
    swift_bridgeObjectRelease();
    switch(v161)
    {
      case 5:
        swift_bridgeObjectRelease();
        uint64_t v110 = &selRef_archivedDataWithRootObject_requiringSecureCoding_error_;
        goto LABEL_42;
      default:
        char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v110 = &selRef_archivedDataWithRootObject_requiringSecureCoding_error_;
        if (v109)
        {
LABEL_42:
          uint64_t v111 = &qword_10083D800;
          if (qword_1007F7238 != -1)
          {
            swift_once();
            uint64_t v111 = &qword_10083D800;
          }
        }
        else
        {
          uint64_t v111 = &qword_10083D878;
          if (qword_1007F72B0 != -1)
          {
            swift_once();
            uint64_t v111 = &qword_10083D878;
          }
        }
        unint64_t v112 = (void *)*v111;
        if (v112)
        {
          id v113 = v112;
        }
        else
        {
          id v113 = [objc_allocWithZone((Class)UIFont) init];
          unint64_t v112 = 0;
        }
        id v114 = v112;
        id v115 = [v77 mutableString];
        NSString v116 = String._bridgeToObjectiveC()();
        id v117 = [v115 rangeOfString:v116 options:1];
        uint64_t v119 = v118;

        [v77 v110[123] v142 v113 v117 v119];
        swift_bridgeObjectRelease();
        uint64_t v120 = v145;
        uint64_t v61 = v158;
        NSAttributedStringKey v60 = v108;
        switch(v161)
        {
          case 5:
            swift_bridgeObjectRelease();
            goto LABEL_52;
          default:
            char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v121)
            {
LABEL_52:
              unint64_t v122 = &qword_10083D7F8;
              if (qword_1007F7230 != -1)
              {
                swift_once();
                unint64_t v122 = &qword_10083D7F8;
              }
            }
            else
            {
              unint64_t v122 = &qword_10083D870;
              if (qword_1007F72A8 != -1)
              {
                swift_once();
                unint64_t v122 = &qword_10083D870;
              }
            }
            id v123 = (id)*v122;
            sub_100049B7C(v123);

            id v124 = v77;
            uint64_t v125 = (uint64_t)v144;
            AttributedString.init(_:)();
            uint64_t v126 = *v153;
            (*v153)(v125, 0, 1, v120);
            if ((*v141)(v125, 1, v120) == 1)
            {
              sub_10001457C(v125, &qword_1007FE5B8);
              swift_bridgeObjectRetain();
              unint64_t v127 = sub_10001B77C(v161);
              char v129 = v128;
              swift_bridgeObjectRelease();
              if (v129)
              {
                char v130 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v162 = v61;
                if ((v130 & 1) == 0)
                {
                  sub_1005496D4();
                  uint64_t v61 = v162;
                }
                uint64_t v131 = v136;
                (*(void (**)(char *, unint64_t, uint64_t))(v135 + 32))(v136, *((void *)v61 + 7) + *(void *)(v135 + 72) * v127, v120);
                sub_1000F29E0(v127, (uint64_t)v61);
                swift_bridgeObjectRelease();
                uint64_t v132 = (uint64_t)v131;
                uint64_t v133 = 0;
              }
              else
              {
                uint64_t v133 = 1;
                uint64_t v132 = (uint64_t)v136;
              }
              int64_t v55 = v154;
              v126(v132, v133, 1, v120);
              sub_10001457C(v132, &qword_1007FE5B8);
            }
            else
            {
              uint64_t v64 = (uint64_t)v137;
              (*v140)(v137, v125, v120);
              char v65 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v162 = v61;
              sub_1005997C4(v64, v161, v65);
              uint64_t v61 = v162;

              swift_bridgeObjectRelease();
              int64_t v55 = v154;
            }
            CGRect v62 = &selRef_drawMapRect_zoomScale_inContext_;
            CGRect v63 = &selRef_archivedDataWithRootObject_requiringSecureCoding_error_;
            unint64_t v59 = v155;
            break;
        }
        break;
    }
  }
  uint64_t v70 = v55 + 4;
  if (v55 + 4 < v139)
  {
    unint64_t v68 = *(void *)&v138[8 * v70];
    if (!v68)
    {
      while (1)
      {
        int64_t v69 = v70 + 1;
        if (__OFADD__(v70, 1)) {
          break;
        }
        if (v69 >= v139) {
          goto LABEL_61;
        }
        unint64_t v68 = *(void *)&v138[8 * v69];
        ++v70;
        if (v68) {
          goto LABEL_30;
        }
      }
LABEL_63:
      __break(1u);
      JUMPOUT(0x100109C24);
    }
    int64_t v69 = v55 + 4;
    goto LABEL_30;
  }
LABEL_61:
  swift_release();
  return v61;
}

uint64_t sub_100109C58(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100052588;
  return sub_100104400(a1, v4, v5, v6);
}

uint64_t sub_100109D0C()
{
  return swift_deallocObject();
}

id sub_100109D44()
{
  return sub_100107770(*(void *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_100109D54()
{
  return swift_deallocObject();
}

uint64_t sub_100109D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_100109D74()
{
  return swift_release();
}

uint64_t sub_100109D7C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_100109ED4(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100101CCC(a1, v7, v1 + v4, v8);
}

uint64_t sub_100109FAC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

void sub_10010A10C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  uint64_t v7 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_100102190(v5, v6, v0 + v2, v7);
}

uint64_t sub_10010A1DC()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10010A21C()
{
  sub_100102D1C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10010A224()
{
  uint64_t v1 = OBJC_IVAR____TtC7Journal14RouteAssetView_routeImageView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v2 = OBJC_IVAR____TtC7Journal14RouteAssetView_exerciseNameLabel;
  *(void *)&v0[v2] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v3 = OBJC_IVAR____TtC7Journal14RouteAssetView_workoutDataLabel;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v4 = OBJC_IVAR____TtC7Journal14RouteAssetView_shadowView;
  *(void *)&v0[v4] = [objc_allocWithZone((Class)UIView) init];
  uint64_t v5 = OBJC_IVAR____TtC7Journal14RouteAssetView_fillLayer;
  *(void *)&v0[v5] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v6 = OBJC_IVAR____TtC7Journal14RouteAssetView_cutOutLayer;
  *(void *)&v0[v6] = [objc_allocWithZone((Class)CAShapeLayer) init];
  uint64_t v7 = OBJC_IVAR____TtC7Journal14RouteAssetView_labelTextProvider;
  type metadata accessor for RouteAssetView.LabelTextProvider();
  uint64_t v8 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  v8[14] = 0;
  v8[15] = 0;
  v8[16] = 0;
  *(void *)&v0[v7] = v8;
  *(void *)&v0[OBJC_IVAR____TtC7Journal14RouteAssetView_routeAsset] = 0;
  uint64_t v9 = &v0[OBJC_IVAR____TtC7Journal14RouteAssetView_latestImageRequestID];
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v0[OBJC_IVAR____TtC7Journal14RouteAssetView_previousSizeType] = 6;
  id v11 = &v0[OBJC_IVAR____TtC7Journal14RouteAssetView_naturalIconFrame];
  *(_OWORD *)id v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  unsigned char v11[32] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10010A400(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002C194;
  return sub_1001037A8(a1, v4, v5, v6);
}

uint64_t sub_10010A4BC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FE5E0);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FE5E0);
  if (qword_1007F7D18 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EB48);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10010A584()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = [self weakObjectsHashTable];
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_10010A5F8()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  swift_weakInit();
  swift_weakAssign();
  sub_10010B088();
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  [v2 addObserver:v0 selector:"receivedNotificationWithNotification:" name:UIApplicationWillResignActiveNotification object:0];

  id v3 = [v1 defaultCenter];
  [v3 addObserver:v0 selector:"receivedNotificationWithNotification:" name:UIApplicationWillTerminateNotification object:0];

  id v4 = [v1 defaultCenter];
  swift_retain();
  [v4 addObserver:v0 selector:"receivedNotificationWithNotification:" name:UIApplicationDidBecomeActiveNotification object:0];

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10010A740()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = (void *)Notification.name.getter();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
LABEL_15:

    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v23 = static MainActor.shared.getter();
    uint64_t v24 = (void *)swift_allocObject();
    void v24[2] = v23;
    v24[3] = &protocol witness table for MainActor;
    v24[4] = v1;
    sub_100328A60((uint64_t)v4, (uint64_t)&unk_1007FE768, (uint64_t)v24);
    swift_release();
    uint64_t result = sub_10010CD9C();
    if ((result & 1) != 0 || !*(void *)(v1 + 24)) {
      return result;
    }
    swift_retain();
    sub_100010218((uint64_t *)&unk_1007FC0D0);
    Task.cancel()();
    return swift_release();
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11) {
    goto LABEL_15;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17)
  {
LABEL_19:

    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v4, 1, 1, v26);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v27 = static MainActor.shared.getter();
    uint64_t v28 = (void *)swift_allocObject();
    v28[2] = v27;
    v28[3] = &protocol witness table for MainActor;
    v28[4] = v1;
    sub_100328A60((uint64_t)v4, (uint64_t)&unk_1007FE758, (uint64_t)v28);
    return swift_release();
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v29 & 1) == 0) {
      return result;
    }
  }

  return sub_10010B088();
}

uint64_t sub_10010AAE4()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10010AB90;
  return sub_10010BBE0();
}

uint64_t sub_10010AB90()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10010D298, v1, v0);
}

uint64_t sub_10010ACCC()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10010AD78;
  return sub_10010BBE0();
}

uint64_t sub_10010AD78()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10010AEB4, v1, v0);
}

uint64_t sub_10010AEB4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010B088()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 24))
  {
    swift_retain();
    sub_100010218((uint64_t *)&unk_1007FC0D0);
    Task.cancel()();
    swift_release();
  }
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v7 = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v8[2] = v7;
  v8[3] = &protocol witness table for MainActor;
  v8[4] = v6;
  swift_release();
  *(void *)(v1 + 24) = sub_1005D74B4((uint64_t)v4, (uint64_t)&unk_1007FE740, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10010B228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[18] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[19] = v8;
  v4[20] = v7;
  return _swift_task_switch(sub_10010B388, v8, v7);
}

uint64_t sub_10010B388()
{
  if (static Task<>.isCancelled.getter())
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    swift_beginAccess();
    uint64_t v3 = static Duration.seconds(_:)();
    uint64_t v5 = v4;
    ContinuousClock.init()();
    *(void *)(v0 + 64) = v3;
    *(void *)(v0 + 72) = v5;
    *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0;
    *(void *)(v0 + 48) = 0;
    *(unsigned char *)(v0 + 56) = 1;
    return _swift_task_switch(sub_10010B498, 0, 0);
  }
}

uint64_t sub_10010B498()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = sub_10010D0E0((unint64_t *)&unk_100806060, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10010D0E0(&qword_1007FE748, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[21] = v5;
  v0[22] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[23] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10010B62C;
  uint64_t v8 = v0[14];
  uint64_t v7 = v0[15];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 5, v7, v4);
}

uint64_t sub_10010B62C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 168))(*(void *)(v2 + 112), *(void *)(v2 + 88));
    uint64_t v3 = sub_10010BAA8;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 128);
    uint64_t v6 = *(void *)(v2 + 136);
    uint64_t v8 = *(void *)(v2 + 120);
    (*(void (**)(void, void))(v2 + 168))(*(void *)(v2 + 112), *(void *)(v2 + 88));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = *(void *)(v2 + 160);
    uint64_t v3 = sub_10010B78C;
  }
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10010B78C()
{
  uint64_t Strong = swift_weakLoadStrong();
  v0[25] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[26] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10010B888;
    return sub_10010BBE0();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10010B888()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = *(void *)(v1 + 152);
  return _swift_task_switch(sub_10010B9A8, v3, v2);
}

uint64_t sub_10010B9A8()
{
  swift_release();
  if (static Task<>.isCancelled.getter())
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = static Duration.seconds(_:)();
    uint64_t v5 = v4;
    ContinuousClock.init()();
    *(void *)(v0 + 64) = v3;
    *(void *)(v0 + 72) = v5;
    *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0;
    *(void *)(v0 + 48) = 0;
    *(unsigned char *)(v0 + 56) = 1;
    return _swift_task_switch(sub_10010B498, 0, 0);
  }
}

uint64_t sub_10010BAA8()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  return _swift_task_switch(sub_10010BB1C, v1, v2);
}

uint64_t sub_10010BB1C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010BBE0()
{
  v1[5] = v0;
  type metadata accessor for MainActor();
  v1[6] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[7] = v3;
  v1[8] = v2;
  return _swift_task_switch(sub_10010BC78, v3, v2);
}

uint64_t sub_10010BC78()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 72) = Strong;
  if (!Strong) {
    goto LABEL_32;
  }
  uint64_t v2 = Strong;
  sub_10010C9E4();
  uint64_t v3 = OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_textChanged;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_textChanged) & 1) == 0)
  {
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (*(unsigned char *)(v0 + 112) != 1)
    {
      swift_release();
      if (qword_1007F69E8 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_100026A54(v16, (uint64_t)qword_1007FE5E0);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        uint64_t v9 = "🛟 Autosave: No changes to save";
        goto LABEL_31;
      }
LABEL_33:
      swift_release();

      goto LABEL_34;
    }
  }
  *(void *)(v0 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0;
  uint64_t v4 = sub_100585038();
  if (sub_100038BD0(v4))
  {
    swift_release();
    if (qword_1007F69E8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100026A54(v5, (uint64_t)qword_1007FE5E0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "🛟 Autosave: Skipping autosave, journalEntry.assetsStoredSize >= 500 mb";
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 2u);
      swift_slowDealloc();

LABEL_32:
      swift_release();
LABEL_34:
      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      return v19();
    }
    goto LABEL_33;
  }
  if (*(unsigned char *)(v2 + v3) == 1)
  {
    if (qword_1007F69E8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100026A54(v10, (uint64_t)qword_1007FE5E0);
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "🛟 Autosave: about to write changed text to Core Data", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10010C16C;
    return sub_1005820C0();
  }
  else
  {
    NSManagedObjectContext.performAndWait<A>(_:)();
    if (*(unsigned char *)(v0 + 113) != 1)
    {
      swift_release();
      if (qword_1007F69E8 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100026A54(v18, (uint64_t)qword_1007FE5E0);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        uint64_t v9 = "🛟 Autosave: Skipping autosave, journalEntry.hasChanges == false";
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    uint64_t v20 = (uint64_t (__cdecl *)())((char *)&dword_10080BA68 + dword_10080BA68);
    char v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v17;
    *char v17 = v0;
    v17[1] = sub_10010C488;
    return v20();
  }
}

uint64_t sub_10010C16C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 56);
  return _swift_task_switch(sub_10010C28C, v3, v2);
}

uint64_t sub_10010C28C()
{
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (*(unsigned char *)(v0 + 113) == 1)
  {
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_10080BA68 + dword_10080BA68);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10010C488;
    return v8();
  }
  else
  {
    swift_release();
    if (qword_1007F69E8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100026A54(v3, (uint64_t)qword_1007FE5E0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "🛟 Autosave: Skipping autosave, journalEntry.hasChanges == false", v6, 2u);
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
    }
    os_log_type_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_10010C488()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 56);
  if (v0) {
    os_log_type_t v5 = sub_10010C6FC;
  }
  else {
    os_log_type_t v5 = sub_10010C5C4;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10010C5C4()
{
  swift_release();
  if (qword_1007F69E8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FE5E0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "🛟 Autosave completed successfully!", v4, 2u);
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release();
  }
  os_log_type_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10010C6FC()
{
  uint64_t v14 = v0;
  swift_release();
  if (qword_1007F69E8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FE5E0);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[9];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    v0[2] = v5;
    type metadata accessor for Journaling.EntryViewModel();
    swift_retain();
    uint64_t v8 = String.init<A>(describing:)();
    v0[3] = sub_10011EA98(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "🛟 Autosave: error while saving %s: %@", (uint8_t *)v6, 0x16u);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  char v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10010C9E4()
{
  id v0 = sub_10010A584();
  id v1 = [v0 allObjects];

  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &off_100809000;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(v2 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8 && (unint64_t v9 = *(uint64_t (**)())((char *)v6[398] + v8)) != 0)
      {
        char v10 = *(unsigned char *)(v8 + 16);
        id v11 = v9;
        if ((v10 & 1) != 0
          || (uint64_t v12 = sub_100372EF4()) != 0
          && (uint64_t v14 = v12,
              uint64_t v15 = v13,
              uint64_t v16 = swift_getObjectType(),
              uint64_t v31 = v14,
              LOBYTE(v15) = (*(uint64_t (**)(uint64_t))(*(void *)(v15 + 8) + 8))(v16),
              swift_unknownObjectRelease(),
              (v15 & 1) != 0))
        {
          uint64_t v17 = sub_100372EF4();
          sub_100375FFC(v17, v18, 0);
          swift_unknownObjectRelease();
          uint64_t v19 = v8 + OBJC_IVAR____TtC7Journal29AudioAssetPersistenceStrategy_pickerDelegate;
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v20 = *(void *)(v19 + 8);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(id, uint64_t, uint64_t))(v20 + 24))(v11, ObjectType, v20);
            uint64_t v22 = sub_100372EF4();
            if (v22)
            {
              uint64_t v24 = v22;
              uint64_t v25 = v23;
              uint64_t v26 = swift_getObjectType();
              uint64_t v31 = v24;
              char v27 = (*(uint64_t (**)(uint64_t))(*(void *)(v25 + 8) + 8))(v26);
              swift_unknownObjectRelease();

              swift_unknownObjectRelease();
            }
            else
            {
              swift_unknownObjectRelease();

              char v27 = 0;
            }
            *(unsigned char *)(v8 + 16) = v27 & 1;
            swift_unknownObjectRelease();
            uint64_t v6 = &off_100809000;
          }
          else
          {
            uint64_t v28 = Logger.logObject.getter();
            os_log_type_t v29 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v28, v29))
            {
              uint64_t v30 = swift_slowAlloc();
              uint64_t v31 = swift_slowAlloc();
              *(_DWORD *)uint64_t v30 = 136315138;
              *(void *)(v30 + 4) = sub_10011EA98(0xD000000000000015, 0x800000010068B920, &v31);
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - pickerDelegate is nil", (uint8_t *)v30, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            swift_unknownObjectRelease();

            uint64_t v6 = &off_100809000;
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      ++v5;
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_10010CD9C()
{
  id v0 = sub_10010A584();
  id v1 = [v0 allObjects];

  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v2 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_22:
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v4 = 4;
    uint64_t v5 = 0;
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v6 = *(void *)(v2 + 8 * v4);
    swift_unknownObjectRetain();
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_20;
    }
LABEL_8:
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (swift_conformsToProtocol2()) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0;
    }
    if (!v8 || !sub_100372EF4())
    {
      swift_unknownObjectRelease_n();
      if (v7 == v3) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    uint64_t v10 = v9;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = (*(uint64_t (**)(uint64_t))(*(void *)(v10 + 8) + 8))(ObjectType);
    swift_unknownObjectRelease_n();
    swift_unknownObjectRelease();
    if (v10) {
      break;
    }
    if (v7 == v3) {
      goto LABEL_22;
    }
LABEL_17:
    uint64_t v5 = ++v4 - 4;
    if ((v2 & 0xC000000000000001) == 0) {
      goto LABEL_7;
    }
LABEL_4:
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v7 = v5 + 1;
    if (!__OFADD__(v5, 1)) {
      goto LABEL_8;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (!v3) {
      goto LABEL_22;
    }
  }
  uint64_t v12 = 1;
LABEL_23:
  swift_bridgeObjectRelease_n();
  return v12;
}

uint64_t sub_10010CF68()
{
  swift_release();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t _s15AutosaveManagerCMa()
{
  return self;
}

id sub_10010CFD4@<X0>(unsigned char *a1@<X8>)
{
  return sub_10018B350(v1, a1);
}

uint64_t sub_10010CFF0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10010D02C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002C194;
  return sub_10010B228(a1, v4, v5, v6);
}

uint64_t sub_10010D0E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010D12C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10002C194;
  return sub_10010ACCC();
}

uint64_t sub_10010D1E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100052588;
  return sub_10010AAE4();
}

void *sub_10010D29C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100095B64(0, v1, 0);
    uint64_t v3 = type metadata accessor for TranscriptViewModelSegment(0);
    uint64_t v4 = a1
       + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
    uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 72);
    do
    {
      uint64_t v6 = (uint64_t *)(v4 + *(int *)(v3 + 20));
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        sub_100095B64(v10 > 1, v9 + 1, 1);
      }
      v4 += v5;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      id v11 = &_swiftEmptyArrayStorage[2 * v9];
      v11[4] = v8;
      v11[5] = v7;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10010D3E0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010218(&qword_1007FE8B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_10010F6F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + 16);
    HIBYTE(v11) = 1;
    sub_100010218(&qword_1007FE888);
    sub_10010F804(&qword_1007FE8C0, (void (*)(void))sub_10010F874);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = _s10AudioAssetC9AudioDataVMa(0);
    LOBYTE(v12) = 2;
    type metadata accessor for Date();
    sub_10010F090(&qword_1007F99F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 28));
    HIBYTE(v11) = 3;
    sub_100010218(&qword_1007FE8A0);
    sub_10010F8C8(&qword_1007FE8D0, &qword_1007FE8D8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10010D6A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100010218(&qword_1007FE878);
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s10AudioAssetC9AudioDataVMa(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v20 = a1;
  sub_10002E0BC(a1, v13);
  sub_10010F6F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v20);
  }
  uint64_t v14 = v7;
  LOBYTE(v22) = 0;
  uint64_t v15 = v19;
  *(void *)uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v12[8] = v16 & 1;
  sub_100010218(&qword_1007FE888);
  char v21 = 1;
  sub_10010F804(&qword_1007FE890, (void (*)(void))sub_10010F74C);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *((void *)v12 + 2) = v22;
  type metadata accessor for Date();
  LOBYTE(v22) = 2;
  sub_10010F090(&qword_10080E9D0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10002C4EC((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 24)], (uint64_t *)&unk_1007FC470);
  sub_100010218(&qword_1007FE8A0);
  char v21 = 3;
  sub_10010F8C8(&qword_1007FE8A8, &qword_1007FE8B0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  *(void *)&v12[*(int *)(v10 + 28)] = v22;
  sub_10010F7A0((uint64_t)v12, v18);
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v20);
  return sub_10010F294((uint64_t)v12);
}

unint64_t sub_10010DAE0()
{
  unint64_t result = 0x6E6F697461727564;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7469736E65746E69;
      break;
    case 2:
      unint64_t result = 0x6E6964726F636572;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010DB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001102D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010DBB0(uint64_t a1)
{
  unint64_t v2 = sub_10010F6F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010DBEC(uint64_t a1)
{
  unint64_t v2 = sub_10010F6F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010DC28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010D6A4(a1, a2);
}

uint64_t sub_10010DC40(void *a1)
{
  return sub_10010D3E0(a1);
}

uint64_t sub_10010DC58()
{
  uint64_t v1 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = _s10AudioAssetC9AudioDataVMa(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (double *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(v0 + OBJC_IVAR____TtCC7Journal10Journaling10AudioAsset_metadata))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v3, 1, 1, v4, v6);
    goto LABEL_9;
  }
  swift_retain();
  sub_10003AC18((uint64_t)v3);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
LABEL_9:
    sub_10001457C((uint64_t)v3, &qword_1007F9E38);
    return 0;
  }
  sub_100110060((uint64_t)v3, (uint64_t)v8, _s10AudioAssetC9AudioDataVMa);
  if ((_BYTE)v8[1]) {
    goto LABEL_10;
  }
  double v9 = *v8;
  if (qword_1007F7170 != -1)
  {
    double v15 = *v8;
    swift_once();
    double v9 = v15;
  }
  id v10 = [(id)qword_100810AD8 stringFromTimeInterval:v9 + 0.5];
  if (!v10)
  {
LABEL_10:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_10010F294((uint64_t)v8);
  return v12;
}

void sub_10010DE90(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a1;
  uint64_t v39 = sub_100010218(&qword_1007F9E28);
  __chkstk_darwin(v39);
  char v41 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = _s10AudioAssetC9AudioDataVMa(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v12 - 8);
  uint64_t v40 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v14);
  char v16 = &v35[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  uint64_t v19 = &v35[-v18];
  __chkstk_darwin(v20);
  uint64_t v22 = &v35[-v21];
  __chkstk_darwin(v23);
  char v27 = &v35[-v25];
  if (a2)
  {
    if (!(a3 | a4)) {
      return;
    }
    uint64_t v28 = a4;
    uint64_t v37 = v26;
    uint64_t v38 = v24;
    sub_1003F2894((uint64_t)&v35[-v25]);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v27, 1, v8) == 1)
    {
      sub_10001457C((uint64_t)v27, &qword_1007F9E38);
      uint64_t v42 = 0;
      int v36 = 1;
      uint64_t v29 = a3;
      if (!a3)
      {
LABEL_9:
        sub_1003F2894((uint64_t)v22);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8) == 1)
        {
          sub_10001457C((uint64_t)v22, &qword_1007F9E38);
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v29 = *((void *)v22 + 2);
          swift_bridgeObjectRetain();
          sub_10010F294((uint64_t)v22);
        }
      }
    }
    else
    {
      uint64_t v42 = *(void *)v27;
      int v36 = v27[8];
      sub_10010F294((uint64_t)v27);
      uint64_t v29 = a3;
      if (!a3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v28 = a4;
    uint64_t v37 = v26;
    uint64_t v38 = v24;
    int v36 = 0;
    uint64_t v29 = a3;
    if (!a3) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = v28;
  uint64_t v31 = (uint64_t)v40;
  if (!v28)
  {
    sub_1003F2894((uint64_t)v19);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v19, 1, v8) == 1)
    {
      sub_10001457C((uint64_t)v19, &qword_1007F9E38);
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v30 = *(void *)&v19[*(int *)(v8 + 28)];
      swift_bridgeObjectRetain();
      sub_10010F294((uint64_t)v19);
    }
  }
  swift_bridgeObjectRetain();
  sub_1003F2894((uint64_t)v16);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v8) == 1)
  {
    sub_10001457C((uint64_t)v16, &qword_1007F9E38);
    uint64_t v32 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  }
  else
  {
    sub_10001B220((uint64_t)&v16[*(int *)(v8 + 24)], v31, (uint64_t *)&unk_1007FC470);
    sub_10010F294((uint64_t)v16);
  }
  sub_10001B220(v31, (uint64_t)&v11[*(int *)(v8 + 24)], (uint64_t *)&unk_1007FC470);
  *(void *)uint64_t v11 = v42;
  v11[8] = v36;
  *((void *)v11 + 2) = v29;
  *(void *)&v11[*(int *)(v8 + 28)] = v30;
  uint64_t v33 = v41;
  sub_10010F7A0((uint64_t)v11, (uint64_t)v41);
  swift_storeEnumTagMultiPayload();
  sub_100010218(&qword_1007FE8E0);
  uint64_t v34 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v34 + *(void *)(*(void *)v34 + 104), 1, 1, v38);
  *(_OWORD *)(v34 + *(void *)(*(void *)v34 + 112)) = xmmword_1006D6A80;
  sub_10002C4EC((uint64_t)v33, v34 + *(void *)(*(void *)v34 + 120), &qword_1007F9E28);
  *(void *)(v43 + OBJC_IVAR____TtCC7Journal10Journaling10AudioAsset_metadata) = v34;
  swift_release();
  sub_10010F294((uint64_t)v11);
  sub_10001457C(v31, (uint64_t *)&unk_1007FC470);
}

uint64_t sub_10010E41C()
{
  return swift_release();
}

id sub_10010E42C()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s10AudioAssetCMa(0);
  return [super dealloc];
}

uint64_t sub_10010E474()
{
  return _s10AudioAssetCMa(0);
}

uint64_t _s10AudioAssetCMa(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FE798);
}

uint64_t sub_10010E49C()
{
  return swift_updateClassMetadata2();
}

void *sub_10010E4E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_100010218((uint64_t *)&unk_1007FC470);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(void *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10010E684(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010E754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10010E8A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010EA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10010EBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100010218((uint64_t *)&unk_1007FC470);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010ED60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010ED74);
}

uint64_t sub_10010ED74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10010EE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010EE48);
}

uint64_t sub_10010EE48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _s10AudioAssetC9AudioDataVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FE800);
}

void sub_10010EF14()
{
  sub_100033618();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10010EFB4()
{
  return swift_retain();
}

uint64_t sub_10010EFC4(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling10AudioAsset_metadata) = a1;
  return swift_release();
}

uint64_t sub_10010EFDC()
{
  return sub_10010DC58();
}

uint64_t sub_10010F000()
{
  return sub_10010F090(&qword_1007F9E40, (void (*)(uint64_t))_s10AudioAssetC9AudioDataVMa);
}

uint64_t sub_10010F048()
{
  return sub_10010F090(&qword_1007FDD40, (void (*)(uint64_t))_s10AudioAssetC9AudioDataVMa);
}

uint64_t sub_10010F090(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010F0D8()
{
  uint64_t v0 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v0 - 8);
  objc_super v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F2894((uint64_t)v2);
  uint64_t v3 = _s10AudioAssetC9AudioDataVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    sub_10001457C((uint64_t)v2, &qword_1007F9E38);
    return 0;
  }
  else
  {
    uint64_t v4 = *(void *)&v2[*(int *)(v3 + 28)];
    swift_bridgeObjectRetain();
    sub_10010F294((uint64_t)v2);
    if (v4)
    {
      uint64_t v5 = sub_10010D29C(v4);
      swift_bridgeObjectRelease();
      uint64_t v6 = v5[2];
      if (v6)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = 0;
        uint64_t v7 = (void **)(v5 + 5);
        unint64_t v8 = 0xE000000000000000;
        do
        {
          uint64_t v9 = (uint64_t)*(v7 - 1);
          uint64_t v10 = *v7;
          uint64_t v13 = v4;
          unint64_t v14 = v8;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v11._uint64_t countAndFlagsBits = v9;
          v11._object = v10;
          String.append(_:)(v11);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v4 = v13;
          unint64_t v8 = v14;
          v7 += 2;
          --v6;
        }
        while (v6);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  return v4;
}

uint64_t sub_10010F294(uint64_t a1)
{
  uint64_t v2 = _s10AudioAssetC9AudioDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010F2F0()
{
  uint64_t v0 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F2894((uint64_t)v2);
  uint64_t v3 = _s10AudioAssetC9AudioDataVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    sub_10001457C((uint64_t)v2, &qword_1007F9E38);
    return 0;
  }
  else
  {
    uint64_t v4 = *((void *)v2 + 2);
    swift_bridgeObjectRetain();
    sub_10010F294((uint64_t)v2);
  }
  return v4;
}

uint64_t sub_10010F3D8()
{
  uint64_t v0 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F2894((uint64_t)v2);
  uint64_t v3 = _s10AudioAssetC9AudioDataVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    sub_10001457C((uint64_t)v2, &qword_1007F9E38);
    return 0;
  }
  else
  {
    uint64_t v4 = *(void *)&v2[*(int *)(v3 + 28)];
    swift_bridgeObjectRetain();
    sub_10010F294((uint64_t)v2);
  }
  return v4;
}

uint64_t sub_10010F4C8()
{
  uint64_t v0 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (uint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1003F2894((uint64_t)v2);
  uint64_t v3 = _s10AudioAssetC9AudioDataVMa(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    sub_10001457C((uint64_t)v2, &qword_1007F9E38);
    return 0;
  }
  else
  {
    uint64_t v4 = *v2;
    sub_10010F294((uint64_t)v2);
  }
  return v4;
}

uint64_t sub_10010F5BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003F2894((uint64_t)v4);
  uint64_t v5 = _s10AudioAssetC9AudioDataVMa(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    sub_10001457C((uint64_t)v4, &qword_1007F9E38);
    uint64_t v6 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  else
  {
    sub_10001B220((uint64_t)&v4[*(int *)(v5 + 24)], a1, (uint64_t *)&unk_1007FC470);
    return sub_10010F294((uint64_t)v4);
  }
}

unint64_t sub_10010F6F8()
{
  unint64_t result = qword_1007FE880;
  if (!qword_1007FE880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE880);
  }
  return result;
}

unint64_t sub_10010F74C()
{
  unint64_t result = qword_1007FE898;
  if (!qword_1007FE898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE898);
  }
  return result;
}

uint64_t sub_10010F7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10AudioAssetC9AudioDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010F804(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014440(&qword_1007FE888);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010F874()
{
  unint64_t result = qword_1007FE8C8;
  if (!qword_1007FE8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE8C8);
  }
  return result;
}

uint64_t sub_10010F8C8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014440(&qword_1007FE8A0);
    sub_10010F090(a2, (void (*)(uint64_t))type metadata accessor for TranscriptViewModelSegment);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_10010F95C(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  int v57 = a4;
  uint64_t v56 = a3;
  uint64_t v62 = a2;
  LODWORD(v52) = a1;
  uint64_t v60 = sub_100010218(&qword_1007F9E28);
  __chkstk_darwin(v60);
  uint64_t v61 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v7 - 8);
  int64_t v55 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = _s10AudioAssetC9AudioDataVMa(0);
  __chkstk_darwin(v54);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for AssetAttachment.AssetType(0);
  __chkstk_darwin(v51);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v53 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v50 - v24;
  UUID.init()();
  uint64_t v26 = (char *)objc_allocWithZone((Class)_s10AudioAssetCMa(0));
  *(void *)&v26[OBJC_IVAR____TtCC7Journal10Journaling10AudioAsset_metadata] = 0;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, v25, v19);
  uint64_t v27 = v16;
  uint64_t v28 = (char *)sub_1001817C4((uint64_t)v22, 6, v52);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v25, v19);
  sub_10001B220(v62, (uint64_t)v15, (uint64_t *)&unk_100800A60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v27) == 1)
  {
    uint64_t v30 = v28;
    sub_10001457C((uint64_t)v15, (uint64_t *)&unk_100800A60);
  }
  else
  {
    id v50 = v10;
    uint64_t v31 = (uint64_t)v12;
    uint64_t v32 = v53;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v53, v15, v27);
    uint64_t v52 = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v31, v32, v27);
    type metadata accessor for AssetAttachment.AssetType.FilePathType(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = v28;
    uint64_t v34 = v28;
    UUID.init()();
    uint64_t v35 = v27;
    uint64_t v36 = UUID.uuidString.getter();
    uint64_t v51 = v37;
    v29(v25, v19);
    type metadata accessor for AssetAttachment(0);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0;
    sub_100110060(v31, v38 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType, type metadata accessor for AssetAttachment.AssetType);
    uint64_t v39 = (uint64_t *)(v38 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
    uint64_t v40 = v51;
    uint64_t *v39 = v36;
    v39[1] = v40;
    char v41 = &v34[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v41 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v35);
    uint64_t v28 = v33;
    uint64_t v10 = v50;
  }
  uint64_t v42 = (uint64_t)v55;
  Date.init()();
  sub_10001457C(v62, (uint64_t *)&unk_100800A60);
  uint64_t v43 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
  *(void *)uint64_t v10 = v56;
  v10[8] = v57 & 1;
  *((void *)v10 + 2) = v58;
  uint64_t v44 = v54;
  sub_10002C4EC(v42, (uint64_t)&v10[*(int *)(v54 + 24)], (uint64_t *)&unk_1007FC470);
  *(void *)&v10[*(int *)(v44 + 28)] = v59;
  uint64_t v45 = v61;
  sub_100110060((uint64_t)v10, v61, _s10AudioAssetC9AudioDataVMa);
  swift_storeEnumTagMultiPayload();
  sub_100010218(&qword_1007FE8E0);
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v46 + *(void *)(*(void *)v46 + 104);
  uint64_t v48 = sub_100010218(&qword_1007F9E38);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  *(_OWORD *)(v46 + *(void *)(*(void *)v46 + 112)) = xmmword_1006D6A80;
  sub_10002C4EC(v45, v46 + *(void *)(*(void *)v46 + 120), &qword_1007F9E28);
  *(void *)&v28[OBJC_IVAR____TtCC7Journal10Journaling10AudioAsset_metadata] = v46;

  swift_release();
  return v28;
}

uint64_t sub_100110060(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *_s10AudioAssetC9AudioDataV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100110194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10AudioAssetC9AudioDataV10CodingKeysOMa()
{
  return &_s10AudioAssetC9AudioDataV10CodingKeysON;
}

unint64_t sub_1001101D0()
{
  unint64_t result = qword_1007FE8E8;
  if (!qword_1007FE8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE8E8);
  }
  return result;
}

unint64_t sub_100110228()
{
  unint64_t result = qword_1007FE8F0;
  if (!qword_1007FE8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE8F0);
  }
  return result;
}

unint64_t sub_100110280()
{
  unint64_t result = qword_1007FE8F8;
  if (!qword_1007FE8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE8F8);
  }
  return result;
}

uint64_t sub_1001102D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xEB00000000736569 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6964726F636572 && a2 == 0xED00006574614467 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010068B970)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AppleAccountFeature(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100110564);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleAccountFeature()
{
  return &type metadata for AppleAccountFeature;
}

uint64_t getEnumTagSinglePayload for JournalFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for JournalFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001106F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JournalFeatureFlags()
{
  return &type metadata for JournalFeatureFlags;
}

unint64_t sub_100110734()
{
  unint64_t result = qword_1007FE900;
  if (!qword_1007FE900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE900);
  }
  return result;
}

const char *sub_100110788(char a1)
{
  unint64_t result = "EntrySearch";
  switch(a1)
  {
    case 1:
      unint64_t result = "Insights";
      break;
    case 2:
      unint64_t result = "ShowDateSections";
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = "RichText";
      break;
    case 5:
      unint64_t result = "Chamomile";
      break;
    case 6:
      unint64_t result = "Sorting";
      break;
    case 7:
      unint64_t result = "IntelligentToolbox";
      break;
    case 8:
      unint64_t result = "MindfulMinutes";
      break;
    case 9:
      unint64_t result = "Export";
      break;
    case 10:
      unint64_t result = "AudioTranscription";
      break;
    case 11:
      unint64_t result = "AppStoreRatingPrompt";
      break;
    case 12:
      unint64_t result = "InsightsMentionedWords";
      break;
    case 13:
      unint64_t result = "ThirdPartyMedia";
      break;
    default:
      unint64_t result = "Debug";
      break;
  }
  return result;
}

unint64_t sub_1001108EC()
{
  unint64_t result = qword_1007FE908;
  if (!qword_1007FE908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FE908);
  }
  return result;
}

const char *sub_100110940()
{
  return "Journal";
}

const char *sub_100110954()
{
  return sub_100110788(*v0);
}

Swift::Int sub_100110974()
{
  return Hasher._finalize()();
}

void sub_1001109B8()
{
}

Swift::Int sub_1001109E0()
{
  return Hasher._finalize()();
}

const char *sub_100110A20()
{
  return "AppleAccount";
}

const char *sub_100110A34()
{
  return "AABranding";
}

char *sub_100110A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v15 = (char *)[objc_allocWithZone(v9) initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v16 = &v15[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName];
  *(void *)uint64_t v16 = a1;
  *((void *)v16 + 1) = a2;
  uint64_t v17 = v15;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void **)&v17[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel];
  id v19 = v18;
  if (a4)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  [v18 setText:v20];

  uint64_t v21 = *(void **)&v17[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel];
  id v22 = v21;
  if (a6)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }
  [v21 setText:v23];

  uint64_t v24 = *(void **)&v17[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel];
  id v25 = v24;
  if (a8)
  {
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v26 = 0;
  }
  [v24 setText:v26];

  uint64_t v27 = *(void **)&v17[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleStack];
  [v27 setAxis:1];
  [v27 setDistribution:4];
  id v28 = v27;

  [v28 setAlignment:1];
  return v17;
}

id sub_100110C40(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel;
  id v10 = objc_allocWithZone((Class)UILabel);
  uint64_t v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  uint64_t v12 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel;
  *(void *)&v11[v12] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v13 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel;
  *(void *)&v11[v13] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v14 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleStack;
  *(void *)&v11[v14] = [objc_allocWithZone((Class)UIStackView) init];
  uint64_t v15 = &v11[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *(void *)&v11[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_contentSizeTraitChangeRegistration] = 0;

  v18.receiver = v11;
  v18.super_class = (Class)type metadata accessor for SymbolAndTextFallbackView();
  [super initWithFrame:a1, a2, a3, a4];
  sub_100110DC8();

  return v16;
}

id sub_100110DC8()
{
  swift_getObjectType();
  [*(id *)&v0[OBJC_IVAR____TtC7Journal23CanvasFallbackAssetView_symbolImageView] setContentMode:1];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel];
  int v2 = self;
  id v3 = [v2 secondaryLabelColor];
  [v1 setTextColor:v3];

  if (qword_1007F72A0 != -1) {
    swift_once();
  }
  [v1 setFont:qword_10083D868];
  [v1 setMinimumScaleFactor:0.6];
  [v1 setAdjustsFontForContentSizeCategory:1];
  [v1 setNumberOfLines:2];
  unsigned int v4 = *(void **)&v0[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel];
  id v5 = [v2 secondaryLabelColor];
  [v4 setTextColor:v5];

  if (qword_1007F7290 != -1) {
    swift_once();
  }
  [v4 setFont:qword_10083D858];
  [v4 setAdjustsFontSizeToFitWidth:1];
  [v4 setMinimumScaleFactor:0.6];
  unsigned int v6 = *(void **)&v0[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel];
  id v7 = [v2 tertiaryLabelColor];
  [v6 setTextColor:v7];

  [v6 setFont:qword_10083D858];
  [v6 setAdjustsFontSizeToFitWidth:1];
  [v6 setMinimumScaleFactor:0.6];
  id v8 = [v0 traitCollection];
  id v9 = [v8 preferredContentSizeCategory];

  LOBYTE(v8) = UIContentSizeCategory.isAccessibilityCategory.getter();
  uint64_t v10 = v8 & 1;
  [v1 setAdjustsFontSizeToFitWidth:v10];
  [v4 setAdjustsFontForContentSizeCategory:v10];
  [v6 setAdjustsFontForContentSizeCategory:v10];
  sub_100010218(&qword_1007FBD30);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1006D6280;
  *(void *)(v11 + 32) = type metadata accessor for UITraitPreferredContentSizeCategory();
  *(void *)(v11 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = &protocol witness table for UITraitPreferredContentSizeCategory;
  uint64_t v12 = UIView.registerForTraitChanges<A>(_:handler:)();
  swift_bridgeObjectRelease();
  *(void *)&v0[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_contentSizeTraitChangeRegistration] = v12;
  swift_unknownObjectRelease();
  LODWORD(v13) = 1148846080;
  [v1 setContentCompressionResistancePriority:1 forAxis:v13];
  type metadata accessor for UILayoutPriority(0);
  sub_100113264();
  static _UIKitNumericRawRepresentable.- infix(_:_:)();
  LODWORD(v14) = v17;
  [v4 setContentCompressionResistancePriority:1 forAxis:v14];
  static _UIKitNumericRawRepresentable.- infix(_:_:)();
  LODWORD(v15) = v17;
  return [v6 setContentCompressionResistancePriority:1 forAxis:v15];
}

void sub_1001111C8(void *a1)
{
  id v3 = v1;
  id v5 = [v3 subviews];
  sub_1000108BC();
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
LABEL_131:
    swift_once();
LABEL_12:
    id v12 = (id)qword_10083D0D8;
    if (v2)
    {
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v13 = 0;
    }
    id v48 = [self _systemImageNamed:v13 withConfiguration:v12];

    [(id)v6 setImage:v48];
    if (qword_1007F71F8 != -1) {
      swift_once();
    }
    [(id)v6 setTintColor:qword_10083D7C0];
    id v49 = [(id)v6 superview];
    if (v49)
    {
      id v50 = v49;
      [(id)v6 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v51 = [(id)v6 centerXAnchor];
      id v52 = [v50 centerXAnchor];
      id v53 = [v51 constraintEqualToAnchor:v52];

      [v53 setConstant:0.0];
      if (v53)
      {
        id v54 = v53;
        [v54 setActive:1];
      }
    }
    id v55 = [(id)v6 superview];
    if (v55)
    {
      uint64_t v56 = v55;
      [(id)v6 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v57 = [(id)v6 topAnchor];
      id v58 = [v56 topAnchor];
      id v59 = [v57 constraintGreaterThanOrEqualToAnchor:v58];

      [v59 setConstant:12.0];
      if (v59)
      {
        id v60 = v59;
        [v60 setActive:1];
      }
    }
    uint64_t v61 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel];
    if (qword_1007F72A0 != -1) {
      swift_once();
    }
    [v61 setFont:qword_10083D868];
    [a1 setAlignment:3];
    [a1 addArrangedSubview:v61];
    [a1 addArrangedSubview:*(void *)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel]];
    id v62 = [a1 superview];
    if (v62)
    {
      CGRect v63 = v62;
      [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v64 = [a1 leadingAnchor];
      id v65 = [v63 leadingAnchor];
      id v66 = [v64 constraintEqualToAnchor:v65];

      [v66 setConstant:12.0];
      if (v66)
      {
        id v67 = v66;
        [v67 setActive:1];
      }
    }

    id v68 = [a1 superview];
    if (v68)
    {
      int64_t v69 = v68;
      [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v70 = [a1 trailingAnchor];
      id v71 = [v69 trailingAnchor];
      id v72 = [v70 constraintEqualToAnchor:v71];

      [v72 setConstant:-12.0];
      id v73 = v72;
      [v73 setActive:1];
    }
    id v74 = [a1 topAnchor];
    id v75 = [(id)v6 bottomAnchor];
    id v189 = [v74 constraintEqualToAnchor:v75 constant:20.0];

    [v189 setActive:1];
    goto LABEL_57;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v6 + 8 * i + 32);
    }
    uint64_t v10 = v9;
    [v9 removeFromSuperview];
  }
LABEL_10:
  swift_bridgeObjectRelease();
  switch((char)a1)
  {
    case 1:
      [v3 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
      id v14 = [objc_allocWithZone((Class)UIView) init];
      id v189 = v14;
      if (qword_1007F71E8 != -1)
      {
        swift_once();
        id v14 = v189;
      }
      [v14 setBackgroundColor:qword_10083D7B0];
      [v3 addSubview:v189];
      id v15 = [v189 superview];
      if (v15)
      {
        id v16 = v15;
        [v189 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v17 = [v189 leadingAnchor];
        id v18 = [v16 leadingAnchor];
        id v19 = [v17 constraintEqualToAnchor:v18];

        [v19 setConstant:0.0];
        if (v19)
        {
          id v20 = v19;
          [v20 setActive:1];
        }
      }
      id v21 = [v189 superview];
      if (v21)
      {
        id v22 = v21;
        [v189 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v23 = [v189 topAnchor];
        id v24 = [v22 topAnchor];
        id v25 = [v23 constraintEqualToAnchor:v24];

        [v25 setConstant:0.0];
        if (v25)
        {
          id v26 = v25;
          [v26 setActive:1];
        }
      }

      id v27 = [v189 widthAnchor];
      id v28 = [v3 heightAnchor];
      id v29 = [v27 constraintEqualToAnchor:v28];

      [v29 setActive:1];
      uint64_t v30 = *(void **)&v3[OBJC_IVAR____TtC7Journal23CanvasFallbackAssetView_symbolImageView];
      uint64_t v31 = *(void *)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName + 8];
      uint64_t v32 = qword_1007F6B20;
      swift_bridgeObjectRetain();
      if (v32 != -1) {
        swift_once();
      }
      id v33 = (id)qword_10083D0E0;
      if (v31)
      {
        NSString v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v34 = 0;
      }
      id v77 = [self _systemImageNamed:v34 withConfiguration:v33];

      [v30 setImage:v77];
      if (qword_1007F71F8 != -1) {
        swift_once();
      }
      [v30 setTintColor:qword_10083D7C0];
      [v189 addSubview:v30];
      id v78 = [v30 superview];
      if (v78)
      {
        id v79 = v78;
        [v30 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v80 = [v30 centerXAnchor];
        id v81 = [v79 centerXAnchor];
        id v82 = [v80 constraintEqualToAnchor:v81];

        [v82 setConstant:0.0];
        id v83 = v82;
        [v83 setActive:1];
      }
      id v84 = [v30 superview];
      if (v84)
      {
        uint64_t v85 = v84;
        [v30 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v86 = [v30 centerYAnchor];
        id v87 = [v85 centerYAnchor];
        id v88 = [v86 constraintEqualToAnchor:v87];

        [v88 setConstant:0.0];
        id v89 = v88;
        [v89 setActive:1];
      }
      id v90 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel];
      if (qword_1007F72A0 != -1) {
        swift_once();
      }
      [v90 setFont:qword_10083D868];
      id v91 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleStack];
      [v91 setAlignment:1];
      [v91 addArrangedSubview:v90];
      [v91 addArrangedSubview:*(void *)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel]];
      uint64_t v92 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel];
      id v93 = [v92 text];
      if (v93)
      {

        id v94 = [objc_allocWithZone((Class)UIStackView) init];
        [v94 setAxis:1];
        [v94 setDistribution:4];
        [v94 setAlignment:1];
        [v94 setSpacing:5.0];
        [v94 addArrangedSubview:v91];
        [v94 addArrangedSubview:v92];
        [v3 addSubview:v94];
        [v94 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v95 = [v94 leadingAnchor];
        id v96 = [v189 trailingAnchor];
        id v97 = [v95 constraintEqualToAnchor:v96];

        [v97 setConstant:12.0];
        [v97 setActive:1];

        id v98 = [v94 superview];
        if (v98)
        {
          uint64_t v99 = v98;
          [v94 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v100 = [v94 centerYAnchor];
          id v101 = [v99 centerYAnchor];
          id v102 = [v100 constraintEqualToAnchor:v101];

          [v102 setConstant:0.0];
          id v103 = v102;
          [v103 setActive:1];
        }
        id v104 = [v94 superview];
        if (v104)
        {
          id v188 = v104;
          [v94 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v105 = [v94 trailingAnchor];
          id v106 = [v188 trailingAnchor];
          id v107 = [v105 constraintEqualToAnchor:v106];

          [v107 setConstant:-12.0];
          id v108 = v107;
          [v108 setActive:1];

LABEL_115:
          NSString v76 = v188;
          goto LABEL_116;
        }
      }
      else
      {
        [v3 addSubview:v91];
        [v91 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v160 = [v91 leadingAnchor];
        id v161 = [v189 trailingAnchor];
        id v162 = [v160 constraintEqualToAnchor:v161];

        [v162 setConstant:12.0];
        [v162 setActive:1];

        id v163 = [v91 superview];
        if (v163)
        {
          v164 = v163;
          [v91 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v165 = [v91 centerYAnchor];
          id v166 = [v164 centerYAnchor];
          id v167 = [v165 constraintEqualToAnchor:v166];

          [v167 setConstant:0.0];
          id v168 = v167;
          [v168 setActive:1];
        }
        id v169 = [v91 superview];
        if (v169)
        {
          id v188 = v169;
          [v91 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v170 = [v91 trailingAnchor];
          id v171 = [v188 trailingAnchor];
          id v172 = [v170 constraintEqualToAnchor:v171];

          [v172 setConstant:-12.0];
          id v108 = v172;
          [v108 setActive:1];
          goto LABEL_115;
        }
      }
      break;
    case 3:
      [v3 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
      uint64_t v35 = *(void **)&v3[OBJC_IVAR____TtC7Journal23CanvasFallbackAssetView_symbolImageView];
      [v3 addSubview:v35];
      uint64_t v36 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel];
      [v3 addSubview:v36];
      uint64_t v37 = *(void *)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName + 8];
      uint64_t v38 = qword_1007F6B20;
      swift_bridgeObjectRetain();
      if (v38 != -1) {
        swift_once();
      }
      id v39 = (id)qword_10083D0E0;
      if (v37)
      {
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v40 = 0;
      }
      id v109 = [self _systemImageNamed:v40 withConfiguration:v39];

      [v35 setImage:v109];
      if (qword_1007F71F8 != -1) {
        swift_once();
      }
      [v35 setTintColor:qword_10083D7C0];
      id v110 = [v35 superview];
      if (v110)
      {
        uint64_t v111 = v110;
        [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v112 = [v35 centerXAnchor];
        id v113 = [v111 centerXAnchor];
        id v114 = [v112 constraintEqualToAnchor:v113];

        [v114 setConstant:0.0];
        if (v114)
        {
          id v115 = v114;
          [v115 setActive:1];
        }
      }
      id v116 = [v35 superview];
      if (v116)
      {
        id v117 = v116;
        [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v118 = [v35 topAnchor];
        id v119 = [v117 topAnchor];
        id v120 = [v118 constraintGreaterThanOrEqualToAnchor:v119];

        [v120 setConstant:12.0];
        if (v120)
        {
          id v121 = v120;
          [v121 setActive:1];
        }
      }
      if (qword_1007F7290 != -1) {
        swift_once();
      }
      [v36 setFont:qword_10083D858];
      id v122 = [v36 superview];
      if (v122)
      {
        id v123 = v122;
        [v36 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v124 = [v36 leadingAnchor];
        id v125 = [v123 leadingAnchor];
        id v126 = [v124 constraintEqualToAnchor:v125];

        [v126 setConstant:8.0];
        if (v126)
        {
          id v127 = v126;
          [v127 setActive:1];
        }
      }

      id v128 = [v36 superview];
      if (v128)
      {
        char v129 = v128;
        [v36 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v130 = [v36 trailingAnchor];
        id v131 = [v129 trailingAnchor];
        id v132 = [v130 constraintEqualToAnchor:v131];

        [v132 setConstant:-8.0];
        id v133 = v132;
        [v133 setActive:1];
      }
      goto LABEL_125;
    case 4:
      [v3 setMaximumContentSizeCategory:UIContentSizeCategoryAccessibilityMedium];
      uint64_t v35 = *(void **)&v3[OBJC_IVAR____TtC7Journal23CanvasFallbackAssetView_symbolImageView];
      [v3 addSubview:v35];
      uint64_t v41 = *(void *)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName + 8];
      uint64_t v42 = qword_1007F6B20;
      swift_bridgeObjectRetain();
      if (v42 != -1) {
        swift_once();
      }
      id v43 = (id)qword_10083D0E0;
      if (v41)
      {
        NSString v44 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v44 = 0;
      }
      id v134 = [self _systemImageNamed:v44 withConfiguration:v43];

      [v35 setImage:v134];
      if (qword_1007F71F8 != -1) {
        swift_once();
      }
      [v35 setTintColor:qword_10083D7C0];
      id v135 = [v35 superview];
      if (v135)
      {
        unint64_t v136 = v135;
        [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v137 = [v35 centerXAnchor];
        id v138 = [v136 centerXAnchor];
        id v139 = [v137 constraintEqualToAnchor:v138];

        [v139 setConstant:0.0];
        if (v139)
        {
          id v140 = v139;
          [v140 setActive:1];
        }
      }
      id v141 = [v35 superview];
      if (v141)
      {
        NSAttributedStringKey v142 = v141;
        [v35 setTranslatesAutoresizingMaskIntoConstraints:0];
        id v143 = [v35 topAnchor];
        id v144 = [v142 topAnchor];
        id v145 = [v143 constraintGreaterThanOrEqualToAnchor:v144];

        [v145 setConstant:12.0];
        if (v145)
        {
          id v146 = v145;
          [v146 setActive:1];
        }
      }
      uint64_t v36 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel];
      id v147 = [v36 text];
      if (v147)
      {

        [v3 addSubview:v36];
        id v148 = [v36 superview];
        if (v148)
        {
          uint64_t v149 = v148;
          [v36 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v150 = [v36 leadingAnchor];
          id v151 = [v149 leadingAnchor];
          id v152 = [v150 constraintEqualToAnchor:v151];

          [v152 setConstant:8.0];
          if (v152)
          {
            id v153 = v152;
            [v153 setActive:1];
          }
        }

        id v154 = [v36 superview];
        if (v154)
        {
          uint64_t v155 = v154;
          [v36 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v156 = [v36 trailingAnchor];
          id v157 = [v155 trailingAnchor];
          id v158 = [v156 constraintEqualToAnchor:v157];

          [v158 setConstant:-8.0];
          id v159 = v158;
          [v159 setActive:1];
        }
      }
      else
      {
        uint64_t v36 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel];
        [v3 addSubview:v36];
        id v173 = [v36 superview];
        if (v173)
        {
          v174 = v173;
          [v36 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v175 = [v36 leadingAnchor];
          id v176 = [v174 leadingAnchor];
          id v177 = [v175 constraintEqualToAnchor:v176];

          [v177 setConstant:8.0];
          if (v177)
          {
            id v178 = v177;
            [v178 setActive:1];
          }
        }

        id v179 = [v36 superview];
        if (v179)
        {
          v180 = v179;
          [v36 setTranslatesAutoresizingMaskIntoConstraints:0];
          id v181 = [v36 trailingAnchor];
          id v182 = [v180 trailingAnchor];
          id v183 = [v181 constraintEqualToAnchor:v182];

          [v183 setConstant:-8.0];
          id v184 = v183;
          [v184 setActive:1];
        }
      }
LABEL_125:
      id v185 = [v36 topAnchor];
      id v186 = [v35 bottomAnchor];
      id v187 = [v185 constraintEqualToAnchor:v186 constant:6.0];

      [v187 setActive:1];
      uint64_t v45 = "setTextAlignment:";
      uint64_t v46 = v36;
      uint64_t v47 = 1;
      goto LABEL_126;
    case 5:
      uint64_t v45 = "setMaximumContentSizeCategory:";
      uint64_t v46 = v3;
      uint64_t v47 = 0;
LABEL_126:
      [v46 v45:v47];
      return;
    default:
      [v3 setMaximumContentSizeCategory:0];
      unint64_t v6 = *(void *)&v3[OBJC_IVAR____TtC7Journal23CanvasFallbackAssetView_symbolImageView];
      [v3 addSubview:v6];
      a1 = *(void **)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleStack];
      [v3 addSubview:a1];
      uint64_t v2 = *(void *)&v3[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName + 8];
      uint64_t v11 = qword_1007F6B18;
      swift_bridgeObjectRetain();
      if (v11 == -1) {
        goto LABEL_12;
      }
      goto LABEL_131;
  }
LABEL_57:
  NSString v76 = v189;
LABEL_116:
}

uint64_t sub_1001130F4()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

id sub_100113178()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SymbolAndTextFallbackView();
  return [super dealloc];
}

uint64_t type metadata accessor for SymbolAndTextFallbackView()
{
  return self;
}

unint64_t sub_100113264()
{
  unint64_t result = qword_10080C380;
  if (!qword_10080C380)
  {
    type metadata accessor for UILayoutPriority(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10080C380);
  }
  return result;
}

void sub_1001132BC()
{
  uint64_t v1 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v2 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel;
  *(void *)&v0[v2] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v3 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v4 = OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleStack;
  *(void *)&v0[v4] = [objc_allocWithZone((Class)UIStackView) init];
  id v5 = &v0[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_symbolName];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_contentSizeTraitChangeRegistration] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_1001133BC(char *a1)
{
  id v2 = [a1 traitCollection];
  id v3 = [v2 preferredContentSizeCategory];

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter();
  uint64_t v4 = v2 & 1;
  [*(id *)&a1[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_titleLabel] setAdjustsFontSizeToFitWidth:v4];
  [*(id *)&a1[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_subtitleLabel] setAdjustsFontForContentSizeCategory:v4];
  id v5 = *(void **)&a1[OBJC_IVAR____TtC7Journal25SymbolAndTextFallbackView_captionLabel];

  return [v5 setAdjustsFontForContentSizeCategory:v4];
}

uint64_t sub_100113488()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FE970);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FE970);
  if (qword_1007F7D48 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EBD8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100113550()
{
  [v0 frame];
  if (v1 <= 0.0)
  {
    if ((v0[OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap] & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v0[OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap])
  {
    sub_1001143AC();
    goto LABEL_6;
  }
  sub_100117374();
LABEL_6:
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset];
  if (v2)
  {
    id v3 = *(void **)(v2 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_delegates);
    [v3 addObject:v0];
  }
}

double sub_1001135DC()
{
  [v0 bounds];
  CGFloat Height = CGRectGetHeight(v8);
  double v2 = Height / 50.0 + Height / 50.0;
  [v0 bounds];
  double v3 = CGRectGetHeight(v9);
  [v0 bounds];
  double v4 = v3 - CGRectGetHeight(v10) / 5.0;
  [v0 bounds];
  double v5 = v4 - CGRectGetHeight(v11) / 50.0;
  [v0 bounds];
  CGRectGetWidth(v12);
  [v0 bounds];
  CGRectGetHeight(v13);
  [v0 bounds];
  CGRectGetHeight(v14);

  return AudioRecordingActivityState.hash(into:)(v2, v5);
}

double sub_1001136E0()
{
  [v0 bounds];
  double v1 = CGRectGetWidth(v6) * 0.075;
  [v0 bounds];
  CGFloat v2 = CGRectGetHeight(v7) * 0.75;
  [v0 bounds];
  double v3 = v2 - CGRectGetHeight(v8) * 0.5 * 0.5;
  [v0 bounds];
  CGRectGetWidth(v9);
  [v0 bounds];
  CGRectGetHeight(v10);

  return AudioRecordingActivityState.hash(into:)(v1, v3);
}

void sub_1001137B8()
{
  sub_1000109BC(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_delegate);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001457C(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_latestImageRequestID, &qword_100800950);

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  double v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView);
}

id sub_1001138C0()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset];
  if (v1) {
    [*(id *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_delegates) removeObject:v0];
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MapAssetView();
  return [super dealloc];
}

uint64_t sub_100113A60()
{
  return type metadata accessor for MapAssetView();
}

uint64_t type metadata accessor for MapAssetView()
{
  uint64_t result = qword_1007FEA30;
  if (!qword_1007FEA30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_100113AB4(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC7Journal12MapAssetView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC7Journal12MapAssetView_mapView] = 0;
  uint64_t v9 = OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView;
  id v10 = objc_allocWithZone((Class)UIImageView);
  CGRect v11 = v4;
  *(void *)&v4[v9] = [v10 init];
  uint64_t v12 = OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView;
  id v13 = [self effectWithStyle:6];
  id v14 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v13];

  *(void *)&v11[v12] = v14;
  uint64_t v15 = OBJC_IVAR____TtC7Journal12MapAssetView_labelView;
  *(void *)&v11[v15] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v16 = OBJC_IVAR____TtC7Journal12MapAssetView_placeholderView;
  type metadata accessor for SymbolAndPlatterFallbackView();
  *(void *)&v11[v16] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  *(void *)&v11[OBJC_IVAR____TtC7Journal12MapAssetView_locations] = _swiftEmptyArrayStorage;
  *(void *)&v11[OBJC_IVAR____TtC7Journal12MapAssetView_annotationsDict] = &_swiftEmptyDictionarySingleton;
  v11[OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap] = 0;
  id v17 = &v11[OBJC_IVAR____TtC7Journal12MapAssetView_latestImageRequestID];
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(void *)&v11[OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset] = 0;
  *(void *)&v11[OBJC_IVAR____TtC7Journal12MapAssetView_lastestPOIAnnotation] = 0;
  uint64_t v19 = OBJC_IVAR____TtC7Journal12MapAssetView_clusterAnnotationsDict;
  *(void *)&v11[v19] = sub_100397E14((double *)_swiftEmptyArrayStorage);
  v11[OBJC_IVAR____TtC7Journal12MapAssetView_didSelectLatestPOIAnnotation] = 0;
  *(void *)&v11[OBJC_IVAR____TtC7Journal12MapAssetView_newReplacementAnnotation] = 0;
  id v20 = &v11[OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame];
  *(_OWORD *)id v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  v20[32] = 1;
  *(void *)&v11[OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView] = 0;
  v11[OBJC_IVAR____TtC7Journal12MapAssetView_needsMapLoad] = 0;

  v23.receiver = v11;
  v23.super_class = (Class)type metadata accessor for MapAssetView();
  [super initWithFrame:a1, a2, a3, a4];
  sub_100113FEC();

  return v21;
}

id sub_100113D5C(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_mapView] = 0;
  uint64_t v3 = OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView;
  id v4 = objc_allocWithZone((Class)UIImageView);
  double v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  uint64_t v6 = OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView;
  id v7 = [self effectWithStyle:6];
  id v8 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v7];

  *(void *)&v5[v6] = v8;
  uint64_t v9 = OBJC_IVAR____TtC7Journal12MapAssetView_labelView;
  *(void *)&v5[v9] = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v10 = OBJC_IVAR____TtC7Journal12MapAssetView_placeholderView;
  type metadata accessor for SymbolAndPlatterFallbackView();
  *(void *)&v5[v10] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  *(void *)&v5[OBJC_IVAR____TtC7Journal12MapAssetView_locations] = _swiftEmptyArrayStorage;
  *(void *)&v5[OBJC_IVAR____TtC7Journal12MapAssetView_annotationsDict] = &_swiftEmptyDictionarySingleton;
  v5[OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap] = 0;
  CGRect v11 = &v5[OBJC_IVAR____TtC7Journal12MapAssetView_latestImageRequestID];
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)&v5[OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Journal12MapAssetView_lastestPOIAnnotation] = 0;
  uint64_t v13 = OBJC_IVAR____TtC7Journal12MapAssetView_clusterAnnotationsDict;
  *(void *)&v5[v13] = sub_100397E14((double *)_swiftEmptyArrayStorage);
  v5[OBJC_IVAR____TtC7Journal12MapAssetView_didSelectLatestPOIAnnotation] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Journal12MapAssetView_newReplacementAnnotation] = 0;
  id v14 = &v5[OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame];
  *(_OWORD *)id v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v14[32] = 1;
  *(void *)&v5[OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView] = 0;
  v5[OBJC_IVAR____TtC7Journal12MapAssetView_needsMapLoad] = 0;

  v19.receiver = v5;
  v19.super_class = (Class)type metadata accessor for MapAssetView();
  id v15 = [super initWithCoder:a1];
  id v16 = v15;
  if (v15)
  {
    id v17 = v15;
    sub_100113FEC();
  }
  return v16;
}

void sub_100113FEC()
{
  uint64_t v1 = v0;
  [v0 addSubview:*(void *)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_placeholderView]];
  sub_1001DCF60(0.0);
  swift_bridgeObjectRelease();
  CGFloat v2 = *(void **)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView];
  [v1 addSubview:*(void *)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView]];
  uint64_t v3 = OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView;
  [v1 addSubview:*(void *)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView]];
  id v4 = *(void **)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_labelView];
  [v1 addSubview:v4];
  [v4 setMinimumScaleFactor:0.6];
  [v4 setLineBreakMode:4];
  [v4 setAdjustsFontForContentSizeCategory:1];
  [v2 setContentMode:2];
  [v2 setAlpha:0.0];
  [v2 setClipsToBounds:1];
  [*(id *)&v1[v3] setAlpha:0.0];
  [v4 setAlpha:0.0];
  sub_100010218(&qword_1007FBD30);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1006D6280;
  *(void *)(v5 + 32) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v5 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = &protocol witness table for UITraitUserInterfaceStyle;
  v8[3] = type metadata accessor for MapAssetView();
  v8[0] = v1;
  uint64_t v6 = v1;
  UIView.registerForTraitChanges(_:target:action:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v8);
  id v7 = [self defaultCenter:v8[0]];
  [v7 addObserver:v6 selector:"userInterfaceStyleChanged" name:UIApplicationWillEnterForegroundNotification object:0];
}

void sub_10011428C(void *a1, char a2)
{
  uint64_t v3 = v2;
  v2[OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap] = a2;
  uint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset];
  *(void *)&v3[OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset] = a1;
  id v6 = a1;

  sub_100113550();
  [v3 setIsAccessibilityElement:(a2 & 1) == 0];
  sub_100042B1C(*((unsigned char *)v6 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_type));
  if (v7)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  [v3 setAccessibilityLabel:v8];

  sub_10003DBC4();
  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  [v3 setAccessibilityValue:v10];
}

void sub_1001143AC()
{
  uint64_t v1 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = v5[8];
  __chkstk_darwin(v4);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char *)&v40 - v16;
  uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset);
  if (v18)
  {
    uint64_t v45 = v6;
    uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v48 = v15;
    uint64_t v49 = v14;
    id v46 = v18;
    id v50 = v17;
    Date.init()();
    UUID.init()();
    objc_super v19 = v9;
    id v20 = v9;
    id v21 = (void (*)(char *, char *, uint64_t))v5[2];
    v21(v3, v20, v4);
    NSString v44 = v5;
    id v22 = (void (*)(char *, void, uint64_t, uint64_t))v5[7];
    uint64_t v23 = v4;
    v22(v3, 0, 1, v4);
    uint64_t v24 = v0 + OBJC_IVAR____TtC7Journal12MapAssetView_latestImageRequestID;
    swift_beginAccess();
    sub_10001ACF4((uint64_t)v3, v24);
    swift_endAccess();
    uint64_t v25 = OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType;
    switch(*(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType))
    {
      case 5:
        swift_bridgeObjectRelease();
        goto LABEL_8;
      default:
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v26)
        {
LABEL_8:
          if (qword_1007F6A60 != -1) {
            swift_once();
          }
          id v27 = &qword_10083CF68;
        }
        else
        {
          if (qword_1007F6A58 != -1) {
            swift_once();
          }
          id v27 = &qword_10083CF60;
        }
        id v41 = (id)*v27;
        unsigned int v42 = *(unsigned __int8 *)(v0 + v25);
        uint64_t v28 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v29 = v47;
        id v43 = v19;
        v21(v47, v19, v23);
        uint64_t v31 = v48;
        uint64_t v30 = v49;
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v12, v50, v49);
        uint64_t v32 = v44;
        unint64_t v33 = (*((unsigned __int8 *)v44 + 80) + 24) & ~(unint64_t)*((unsigned __int8 *)v44 + 80);
        unint64_t v34 = (v45 + *(unsigned __int8 *)(v31 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v28;
        ((void (*)(unint64_t, char *, uint64_t))v32[4])(v35 + v33, v29, v23);
        (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v35 + v34, v12, v30);
        uint64_t v36 = self;
        id v37 = v41;
        swift_retain();
        id v38 = [v36 currentTraitCollection];
        id v39 = v46;
        sub_10017D574(v42, 0, 1, v37, v38, (uint64_t)sub_10011AFB4, v35);

        swift_release();
        ((void (*)(char *, uint64_t))v32[1])(v43, v23);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v50, v30);
        swift_release();
        break;
    }
  }
}

uint64_t sub_10011493C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unint64_t v33 = a1;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  unint64_t v34 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v29 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v29);
  uint64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B284(0, (unint64_t *)&qword_100805AB0);
  uint64_t v32 = static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectWeakInit();

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v30, v9);
  uint64_t v15 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v29);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v17 = (v11 + *(unsigned __int8 *)(v7 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  objc_super v19 = v33;
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v18 + v16, v12, v9);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, v28, v15);
  aBlock[4] = sub_10011B1EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017D530;
  aBlock[3] = &unk_10079AC08;
  id v20 = _Block_copy(aBlock);
  id v21 = v19;
  swift_retain();
  id v22 = v34;
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_10011B2C4((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010218(&qword_100804DB0);
  sub_10011AE0C((unint64_t *)&qword_1007FBD20, &qword_100804DB0);
  uint64_t v23 = v35;
  uint64_t v24 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v25 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v38);
  swift_release();
  return swift_release();
}

void sub_100114E28(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a4;
  uint64_t v66 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v5 - 8);
  uint64_t v64 = v5;
  __chkstk_darwin(v5);
  id v58 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v57 = (char *)&v57 - v8;
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  uint64_t v59 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v65 = (char *)&v57 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v60 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FEB40);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v57 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v57 - v26;
  swift_beginAccess();
  uint64_t Strong = (unsigned char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v29 = Strong;
    id v61 = a2;
    if (a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v27, v66, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
      uint64_t v30 = (uint64_t)&v29[OBJC_IVAR____TtC7Journal12MapAssetView_latestImageRequestID];
      swift_beginAccess();
      sub_10001B220(v30, (uint64_t)v24, &qword_100800950);
      uint64_t v31 = (uint64_t)&v18[*(int *)(v16 + 48)];
      sub_10001B220((uint64_t)v27, (uint64_t)v18, &qword_100800950);
      sub_10001B220((uint64_t)v24, v31, &qword_100800950);
      uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      if (v32((uint64_t)v18, 1, v13) == 1)
      {
        id v33 = v61;
        id v34 = v61;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        if (v32(v31, 1, v13) == 1)
        {
          sub_10001457C((uint64_t)v18, &qword_100800950);
          goto LABEL_18;
        }
      }
      else
      {
        sub_10001B220((uint64_t)v18, (uint64_t)v21, &qword_100800950);
        if (v32(v31, 1, v13) != 1)
        {
          unsigned int v42 = v60;
          (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v60, v31, v13);
          sub_10011B2C4((unint64_t *)&qword_1007FEB50, (void (*)(uint64_t))&type metadata accessor for UUID);
          id v43 = v61;
          LODWORD(v66) = dispatch thunk of static Equatable.== infix(_:_:)();
          NSString v44 = *(void (**)(char *, uint64_t))(v14 + 8);
          v44(v42, v13);
          sub_10001457C((uint64_t)v24, &qword_100800950);
          sub_10001457C((uint64_t)v27, &qword_100800950);
          v44(v21, v13);
          id v33 = v61;
          sub_10001457C((uint64_t)v18, &qword_100800950);
          if (v66)
          {
LABEL_18:
            [*(id *)&v29[OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView] setImage:v33];
            swift_allocObject();
            swift_unknownObjectWeakInit();
            char v45 = 1;
            uint64_t v47 = v64;
            uint64_t v46 = (uint64_t)v65;
            uint64_t v48 = v63;
            switch(v29[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType])
            {
              case 5:
                break;
              default:
                char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
                break;
            }
            swift_retain_n();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v62, v47);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v46, 0, 1, v47);
            if (v45) {
              goto LABEL_22;
            }
            uint64_t v49 = v59;
            sub_10001B220(v46, v59, (uint64_t *)&unk_1007FC470);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47) == 1)
            {
              sub_10001457C(v49, (uint64_t *)&unk_1007FC470);
            }
            else
            {
              id v50 = v57;
              (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v57, v49, v47);
              id v51 = v58;
              static Date.now.getter();
              Date.timeIntervalSince(_:)();
              double v53 = v52;
              id v54 = *(void (**)(char *, uint64_t))(v48 + 8);
              v54(v51, v47);
              v54(v50, v47);
              if (v53 < 0.1)
              {
LABEL_22:
                sub_1001157C0();
LABEL_27:
                swift_release();
                swift_release();
                sub_10001457C(v46, (uint64_t *)&unk_1007FC470);
                swift_release();
                sub_100115938();
                if ((v29[OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap] & 1) == 0)
                {
                  int v55 = v29[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading];
                  v29[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading] = 1;
                  if (v55 != 1)
                  {
                    if (swift_unknownObjectWeakLoadStrong())
                    {
                      uint64_t v56 = v29;
                      sub_100491AF4();

                      swift_unknownObjectRelease();
                      return;
                    }
                  }
                }
                goto LABEL_31;
              }
            }
            static Animation.easeIn(duration:)();
            sub_10001B284(0, (unint64_t *)&qword_100802730);
            static UIView.animate(_:changes:completion:)();
            swift_release();
            goto LABEL_27;
          }
LABEL_19:
          sub_100115938();
LABEL_31:

          return;
        }
        id v40 = v61;
        id v41 = v61;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
        id v33 = v40;
      }
      sub_10001457C((uint64_t)v18, (uint64_t *)&unk_1007FEB40);
      goto LABEL_19;
    }
  }
  swift_beginAccess();
  uint64_t v35 = swift_unknownObjectWeakLoadStrong();
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    int v37 = *(unsigned __int8 *)(v35 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
    *(unsigned char *)(v35 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
    if (v37 == 1 || !swift_unknownObjectWeakLoadStrong())
    {
    }
    else
    {
      sub_100491AF4();

      swift_unknownObjectRelease();
    }
  }
  swift_beginAccess();
  uint64_t v38 = swift_unknownObjectWeakLoadStrong();
  if (v38)
  {
    uint64_t v39 = (void *)v38;
    sub_100115938();
  }
}

void sub_1001157C0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = *(id *)(Strong + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView);

    [v2 setAlpha:1.0];
  }
  swift_beginAccess();
  uint64_t v3 = swift_unknownObjectWeakLoadStrong();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = *(id *)(v3 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);

    [v5 setAlpha:1.0];
  }
  swift_beginAccess();
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    id v8 = *(id *)(v6 + OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView);

    [v8 setAlpha:1.0];
  }
  swift_beginAccess();
  uint64_t v9 = swift_unknownObjectWeakLoadStrong();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    id v11 = *(id *)(v9 + OBJC_IVAR____TtC7Journal12MapAssetView_placeholderView);

    [v11 setHidden:1];
  }
}

void sub_100115938()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218(&qword_1007F9F50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = _s10VisitAssetC9VisitDataVMa(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v11 = (char *)&v53 - v10;
  uint64_t v12 = *(char **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset);
  if (!v12 || !*(void *)&v12[OBJC_IVAR____TtCC7Journal10Journaling16MultiPinMapAsset_metadata]) {
    return;
  }
  uint64_t v55 = v9;
  uint64_t v56 = v12;
  swift_retain();
  uint64_t v13 = sub_100039114();
  swift_release();
  if (v13 != 1)
  {
    uint64_t v14 = swift_bridgeObjectRetain();
    sub_10003F810(v14);
    if (v13)
    {
      uint64_t v15 = sub_10009ADC0(v13);
      unint64_t v17 = v16;
      switch(sub_1001E9FC0(v13, *(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType)))
      {
        case 1u:
          swift_bridgeObjectRelease();
          [*(id *)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView) setHidden:0];
          uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);
          [v18 setHidden:0];
          uint64_t v22 = HIBYTE(v17) & 0xF;
          if ((v17 & 0x2000000000000000) == 0) {
            uint64_t v22 = v15 & 0xFFFFFFFFFFFFLL;
          }
          if (!v22) {
            goto LABEL_55;
          }
          goto LABEL_54;
        case 2u:
          swift_bridgeObjectRelease();
          [*(id *)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView) setHidden:0];
          uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);
          [v18 setHidden:0];
          uint64_t v23 = HIBYTE(v17) & 0xF;
          if ((v17 & 0x2000000000000000) == 0) {
            uint64_t v23 = v15 & 0xFFFFFFFFFFFFLL;
          }
          if (v23)
          {
            sub_100116374();
            sub_100116914(v15, v17);
          }
          goto LABEL_55;
        case 3u:
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          [*(id *)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView) setHidden:1];
          uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);
          [v18 setHidden:1];
          goto LABEL_56;
        default:
          [*(id *)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView) setHidden:0];
          uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);
          [v18 setHidden:0];
          if (!*(void *)(v13 + 16))
          {
            swift_bridgeObjectRelease();
            uint64_t v24 = v55;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v4, 1, 1, v5);
            id v21 = 0;
            goto LABEL_37;
          }
          uint64_t v20 = v13 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
          id v21 = *(void **)(v20 + 40);
          uint64_t v54 = v20;
          if (v21)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            sub_10003F820(v20, (uint64_t)v11);
            uint64_t v25 = (uint64_t *)&v11[*(int *)(v5 + 52)];
            unint64_t v26 = v25[1];
            if (v26 >> 60 == 15)
            {
              sub_10003F884((uint64_t)v11);
            }
            else
            {
              uint64_t v53 = *v25;
              sub_100040D64(v53, v26);
              uint64_t v27 = sub_10003F8E0(v53, v26);
              unint64_t v28 = v26;
              uint64_t v29 = (void *)v27;
              sub_100040DBC(v53, v28);
              sub_10003F884((uint64_t)v11);
              if (v29)
              {
                id v30 = [v29 _firstLocalizedCategoryName];

                if (v30)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                  id v21 = v31;
                  swift_bridgeObjectRelease();

                  goto LABEL_35;
                }
              }
            }
            if (!*(void *)(v13 + 16)) {
              goto LABEL_73;
            }
            sub_10003F820(v54, (uint64_t)v7);
            uint64_t v32 = &v7[*(int *)(v5 + 52)];
            unint64_t v33 = *((void *)v32 + 1);
            if (v33 >> 60 == 15)
            {
              sub_10003F884((uint64_t)v7);
            }
            else
            {
              uint64_t v34 = *(void *)v32;
              sub_100040D64(*(void *)v32, *((void *)v32 + 1));
              uint64_t v35 = sub_10003F8E0(v34, v33);
              uint64_t v36 = v34;
              id v21 = (void *)v35;
              sub_100040DBC(v36, v33);
              sub_10003F884((uint64_t)v7);
              if (!v21)
              {
                swift_bridgeObjectRelease();
                goto LABEL_35;
              }
              id v37 = [v21 pointOfInterestCategory];

              if (v37)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();
                id v21 = v38;
                swift_bridgeObjectRelease();

                goto LABEL_35;
              }
            }
            swift_bridgeObjectRelease();
            id v21 = 0;
          }
LABEL_35:
          if (*(void *)(v13 + 16))
          {
            sub_10003F820(v54, (uint64_t)v4);
            uint64_t v24 = v55;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v4, 0, 1, v5);
LABEL_37:
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v5) == 1)
            {
              sub_10001457C((uint64_t)v4, &qword_1007F9F50);
              uint64_t v39 = 0;
              unint64_t v40 = 0;
            }
            else
            {
              uint64_t v39 = *((void *)v4 + 2);
              unint64_t v40 = *((void *)v4 + 3);
              swift_bridgeObjectRetain();
              sub_10003F884((uint64_t)v4);
            }
            if (v21)
            {
              swift_bridgeObjectRelease();
              uint64_t v41 = HIBYTE(v17) & 0xF;
              if ((v17 & 0x2000000000000000) == 0) {
                uint64_t v41 = v15 & 0xFFFFFFFFFFFFLL;
              }
              if (v41 && v40)
              {
                uint64_t v42 = HIBYTE(v40) & 0xF;
                if ((v40 & 0x2000000000000000) == 0) {
                  uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
                }
                if (v42 && (v15 != v39 || v40 != v17) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  sub_100116134();
                  sub_100116A88(v15, v17, v39, v40);
                  swift_bridgeObjectRelease();
                  goto LABEL_55;
                }
              }
              else if (!v41)
              {
                swift_bridgeObjectRelease();
                if (!v40)
                {
LABEL_56:
                  id v43 = *(char **)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_placeholderView);
                  if ([v43 isHidden])
                  {
                  }
                  else
                  {
                    [*(id *)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView) setHidden:1];
                    [v18 setHidden:1];
                    id v44 = [v18 text];
                    if (v44)
                    {
                      char v45 = v44;
                      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v48 = v47;
                    }
                    else
                    {
                      uint64_t v46 = 0;
                      uint64_t v48 = 0;
                    }
                    uint64_t v49 = (uint64_t *)&v43[OBJC_IVAR____TtC7Journal28SymbolAndPlatterFallbackView_platterText];
                    *uint64_t v49 = v46;
                    v49[1] = v48;
                    swift_bridgeObjectRelease();
                    id v50 = *(void **)&v43[OBJC_IVAR____TtC7Journal28SymbolAndPlatterFallbackView_platterLabel];
                    if (v49[1])
                    {
                      swift_bridgeObjectRetain();
                      NSString v51 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      NSString v51 = 0;
                    }
                    [v50 setText:v51];
                  }
                  return;
                }
                uint64_t v52 = HIBYTE(v40) & 0xF;
                if ((v40 & 0x2000000000000000) == 0) {
                  uint64_t v52 = v39 & 0xFFFFFFFFFFFFLL;
                }
                if (v52)
                {
                  sub_100116134();
                  sub_100116930(v39, v40);
                }
LABEL_55:
                swift_bridgeObjectRelease();
                goto LABEL_56;
              }
            }
            swift_bridgeObjectRelease();
LABEL_54:
            sub_100116134();
            sub_100116930(v15, v17);
            goto LABEL_55;
          }
          __break(1u);
LABEL_73:
          __break(1u);
          JUMPOUT(0x100116120);
      }
    }
  }
  uint64_t v19 = v56;
}

id sub_100116134()
{
  uint64_t v1 = OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView;
  id v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView), "superview"));
  double v3 = 0.0;
  if (v2)
  {
    uint64_t v4 = v2;
    [v2 bounds];
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;

    v37.origin.x = v6;
    v37.origin.y = v8;
    v37.size.width = v10;
    v37.size.height = v12;
    double Height = CGRectGetHeight(v37);
    id v14 = [*(id *)(v0 + v1) superview];
    double v15 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
    if (v14)
    {
      uint64_t v19 = v14;
      [v14 bounds];
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      CGFloat v25 = v24;
      CGFloat v27 = v26;

      v38.origin.x = v21;
      v38.origin.y = v23;
      v38.size.width = v25;
      v38.size.height = v27;
      CGRectGetWidth(v38);
      double v18 = Height / 5.0;
      double v16 = AudioRecordingActivityState.hash(into:)(Height / 50.0, Height - Height / 5.0 - Height / 50.0);
      double v3 = v28;
    }
  }
  else
  {
    double v15 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
  }
  [*(id *)(v0 + v1) setFrame:v16, v17, v3, v15];
  id v29 = [*(id *)(v0 + v1) layer];
  [v29 setMask:0];

  id v30 = [*(id *)(v0 + v1) layer];
  [v30 setMasksToBounds:0];

  id v31 = [*(id *)(v0 + v1) layer];
  [v31 setCornerRadius:v18 / 6.0];

  id v32 = [*(id *)(v0 + v1) layer];
  LODWORD(v33) = 1065017672;
  [v32 setOpacity:v33];

  uint64_t v34 = *(void **)(v0 + v1);

  return [v34 setClipsToBounds:1];
}

void sub_100116374()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView;
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView), "superview"));
  double v4 = 0.0;
  if (v3)
  {
    double v5 = v3;
    [v3 bounds];
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    CGFloat v13 = v12;

    v59.origin.x = v7;
    v59.origin.y = v9;
    v59.size.width = v11;
    v59.size.height = v13;
    double Height = CGRectGetHeight(v59);
    id v15 = [*(id *)(v1 + v2) superview];
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
    if (v15)
    {
      uint64_t v19 = v15;
      [v15 bounds];
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      CGFloat v25 = v24;
      CGFloat v27 = v26;

      v60.origin.x = v21;
      v60.origin.y = v23;
      v60.size.width = v25;
      v60.size.height = v27;
      CGRectGetWidth(v60);
      double v17 = AudioRecordingActivityState.hash(into:)(0.0, Height - Height * 0.5 * 1.2);
      double v4 = v28;
    }
  }
  else
  {
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
  }
  [*(id *)(v1 + v2) setFrame:v17, v18, v4, v16];
  id v29 = [*(id *)(v1 + v2) layer];
  [v29 setCornerRadius:0.0];

  id v30 = [*(id *)(v1 + v2) layer];
  LODWORD(v31) = 1.0;
  [v30 setOpacity:v31];

  [*(id *)(v1 + v2) setClipsToBounds:0];
  id v32 = [objc_allocWithZone((Class)CAGradientLayer) init];
  [v32 setStartPoint:0.5 AudioRecordingActivityState.hash(into:)(0.0, v33)];
  [v32 setEndPoint:0.5 AudioRecordingActivityState.hash(into:)(1.0, v34)];
  sub_100010218((uint64_t *)&unk_1007FC0F0);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1006D70D0;
  uint64_t v56 = (char *)v2;
  uint64_t v36 = self;
  id v37 = [v36 clearColor];
  id v38 = [v37 CGColor];

  type metadata accessor for CGColor(0);
  uint64_t v40 = v39;
  *(void *)(v35 + 56) = v39;
  *(void *)(v35 + 32) = v38;
  id v41 = [v36 whiteColor];
  id v42 = [v41 colorWithAlphaComponent:0.85];

  id v43 = [v42 CGColor];
  *(void *)(v35 + 88) = v40;
  *(void *)(v35 + 64) = v43;
  id v44 = [v36 whiteColor];
  id v45 = [v44 colorWithAlphaComponent:1.0];

  id v46 = [v45 CGColor];
  *(void *)(v35 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v40;
  *(void *)(v35 + 96) = v46;
  id v47 = [v36 whiteColor];
  id v48 = [v47 colorWithAlphaComponent:1.0];

  id v49 = [v48 CGColor];
  *(void *)(v35 + 152) = v40;
  *(void *)(v35 + 128) = v49;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v32 setColors:isa];

  sub_100010218((uint64_t *)&unk_1007FA1C0);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_1006D6D30;
  *(void *)(v51 + 32) = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.0];
  *(void *)(v51 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.5];
  *(void *)(v51 + 48) = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.65];
  *(void *)(v51 + 56) = [objc_allocWithZone((Class)NSNumber) initWithDouble:1.0];
  specialized Array._endMutation()();
  sub_10001B284(0, (unint64_t *)&qword_1007FEB30);
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v32 setLocations:v52];

  uint64_t v53 = *(void **)&v56[v1];
  id v54 = v32;
  [v53 bounds];
  [v54 setFrame:];

  id v55 = [*(id *)&v56[v1] layer];
  [v55 setMask:v54];

  id v57 = [*(id *)&v56[v1] layer];
  [v57 setMasksToBounds:1];
}

id sub_100116914(uint64_t a1, uint64_t a2)
{
  return sub_10011694C(a1, a2, (void (*)(void))sub_1001136E0, 2);
}

id sub_100116930(uint64_t a1, uint64_t a2)
{
  return sub_10011694C(a1, a2, (void (*)(void))sub_1001135DC, 1);
}

id sub_10011694C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  double v6 = *(void **)(v4 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);
  a3();
  [v6 setFrame:];
  [v6 setTextAlignment:1];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setText:v7];

  id v8 = [self secondaryLabelColor];
  [v6 setTextColor:v8];

  if (qword_1007F72C0 != -1) {
    swift_once();
  }
  [v6 setFont:qword_10083D888];

  return [v6 setNumberOfLines:a4];
}

uint64_t sub_100116A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v56 = a3;
  uint64_t v53 = a1;
  uint64_t v66 = type metadata accessor for AttributedString.FormattingOptions();
  __chkstk_darwin(v66);
  id v65 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218(&qword_1007FEAE0);
  __chkstk_darwin(v6 - 8);
  uint64_t v64 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  id v61 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for AttributedString.InterpolationOptions();
  uint64_t v57 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  id v54 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v11 - 8);
  Class v52 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007FEAE8);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  double v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = type metadata accessor for AttributedString();
  uint64_t v62 = *(void *)(v18 - 8);
  uint64_t v63 = v18;
  __chkstk_darwin(v18);
  CGRect v60 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  CGRect v59 = (char *)v49 - v21;
  __chkstk_darwin(v22);
  id v50 = (char *)v49 - v23;
  __chkstk_darwin(v24);
  id v67 = (char *)v49 - v25;
  double v26 = *(void **)(v4 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);
  double v27 = sub_1001135DC();
  id v58 = v26;
  [v26 setFrame:v27];
  [v26 setTextAlignment:1];
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  v49[1] = sub_10011AD80();
  swift_bridgeObjectRetain();
  static AttributeContainer.subscript.getter();
  swift_release();
  double v28 = self;
  id v29 = [v28 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v70 = v29;
  uint64_t v30 = v13;
  AttributeContainer.Builder.callAsFunction(_:)();

  double v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  v49[0] = v14 + 8;
  v31(v16, v30);
  AttributedString.init(_:attributes:)();
  uint64_t v68 = swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static AttributeContainer.subscript.getter();
  swift_release();
  id v32 = [v28 preferredFontForTextStyle:UIFontTextStyleFootnote];
  id v70 = v32;
  AttributeContainer.Builder.callAsFunction(_:)();

  v31(v16, v30);
  double v33 = v50;
  AttributedString.init(_:attributes:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v34._uint64_t countAndFlagsBits = 10794;
  v34._object = (void *)0xE200000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v34);
  id v70 = _swiftEmptyArrayStorage;
  sub_10011B2C4(&qword_1007FEAF8, (void (*)(uint64_t))&type metadata accessor for AttributedString.InterpolationOptions);
  sub_100010218(&qword_1007FEB00);
  sub_10011AE0C(&qword_1007FEB08, &qword_1007FEB00);
  uint64_t v36 = v54;
  uint64_t v35 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  id v37 = *(void (**)(char *, uint64_t))(v57 + 8);
  v37(v36, v35);
  v38._uint64_t countAndFlagsBits = 0x20B7C2202A2ALL;
  v38._object = (void *)0xA600000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v38);
  id v70 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  v37(v36, v35);
  v39._uint64_t countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v39);
  String.LocalizationValue.init(stringInterpolation:)();
  uint64_t v40 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v64, 1, 1, v40);
  id v70 = _swiftEmptyArrayStorage;
  sub_10011B2C4(&qword_1007FEB10, (void (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions);
  sub_100010218(&qword_1007FEB18);
  sub_10011AE0C((unint64_t *)&qword_1007FEB20, &qword_1007FEB18);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v41 = v59;
  AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)();
  sub_10001B284(0, (unint64_t *)&qword_1007FBCA0);
  uint64_t v42 = v62;
  uint64_t v43 = v63;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v60, v41, v63);
  id v44 = NSAttributedString.init(_:)();
  id v45 = v58;
  [v58 setAttributedText:v44];

  id v46 = [self secondaryLabelColor];
  [v45 setTextColor:v46];

  id v47 = *(void (**)(char *, uint64_t))(v42 + 8);
  v47(v41, v43);
  v47(v33, v43);
  return ((uint64_t (*)(char *, uint64_t))v47)(v67, v43);
}

id sub_100117374()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC7Journal12MapAssetView_mapView;
  uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_mapView);
  if (v11 {
    || (id v12 = objc_msgSend(objc_allocWithZone((Class)MKMapView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0),
  }
        uint64_t v13 = *(void **)(v0 + v10),
        *(void *)(v0 + v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v12,
        v13,
        (uint64_t v11 = *(void **)(v0 + v10)) != 0))
  {
    uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset);
    if (v14)
    {
      uint64_t v31 = v7;
      uint64_t v32 = v3;
      id v15 = v11;
      id v16 = v14;
      unint64_t v17 = sub_1003F2BE0();
      if (v17 >= 2)
      {
        unint64_t v21 = v17;
        sub_10001B284(0, (unint64_t *)&unk_1007FEAD0);
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        [v15 registerClass:ObjCClassFromMetadata forAnnotationViewWithReuseIdentifier:MKMapViewDefaultClusterAnnotationViewReuseIdentifier];
        [v15 registerClass:ObjCClassFromMetadata forAnnotationViewWithReuseIdentifier:MKMapViewDefaultAnnotationViewReuseIdentifier];
        id result = [v15 _panningGestureRecognizer];
        if (result)
        {
          uint64_t v23 = result;
          [result setMinimumNumberOfTouches:2];

          [v15 setShowsAttribution:0];
          sub_10001B284(0, (unint64_t *)&qword_100805AB0);
          uint64_t v30 = static OS_dispatch_queue.main.getter();
          uint64_t v24 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v25 = (void *)swift_allocObject();
          v25[2] = v24;
          v25[3] = v15;
          v25[4] = v21;
          aBlock[4] = sub_10011AD6C;
          aBlock[5] = v25;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10017D530;
          aBlock[3] = &unk_10079AB70;
          double v26 = _Block_copy(aBlock);
          id v27 = v15;
          swift_release();
          static DispatchQoS.unspecified.getter();
          aBlock[0] = _swiftEmptyArrayStorage;
          sub_10011B2C4((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_100010218(&qword_100804DB0);
          sub_10011AE0C((unint64_t *)&qword_1007FBD20, &qword_100804DB0);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          double v28 = (void *)v30;
          OS_dispatch_queue.async(group:qos:flags:execute:)();

          _Block_release(v26);
          (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v2);
          return (id)(*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v6);
        }
        else
        {
          __break(1u);
        }
        return result;
      }
    }
  }
  char v18 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
  if ((v18 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
  {
    sub_100491AF4();
    swift_unknownObjectRelease();
  }
  uint64_t v19 = *(void **)(v1 + v10);
  if (v19) {
    [v19 setHidden:1];
  }
  [*(id *)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView) setHidden:1];
  [*(id *)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_placeholderView) setHidden:0];
  sub_100115938();
  return (id)sub_1005CAC04(10, 5u);
}

void sub_10011785C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v116 = a3;
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v4 - 8);
  uint64_t v122 = (uint64_t)v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v121 = (uint64_t)v110 - v7;
  uint64_t v8 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v8 - 8);
  uint64_t v120 = (uint64_t)v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v130 = (uint64_t)v110 - v11;
  id v12 = (int *)_s10VisitAssetC9VisitDataVMa(0);
  uint64_t v13 = *((void *)v12 - 1);
  __chkstk_darwin(v12);
  id v15 = (char *)v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v119 = (char *)v110 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)v110 - v19);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v22 = (char *)Strong;
  Class isa = (Class)[a2 annotations];
  if (!isa)
  {
    sub_100010218((uint64_t *)&unk_1007FEAC0);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [a2 removeAnnotations:isa];

  uint64_t v24 = &v22[OBJC_IVAR____TtC7Journal12MapAssetView_locations];
  swift_beginAccess();
  id v117 = v24;
  *(void *)uint64_t v24 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v25 = &v22[OBJC_IVAR____TtC7Journal12MapAssetView_annotationsDict];
  swift_beginAccess();
  *(void *)uint64_t v25 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  double v26 = &v22[OBJC_IVAR____TtC7Journal12MapAssetView_clusterAnnotationsDict];
  swift_beginAccess();
  *(void *)double v26 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  *(void *)&v22[OBJC_IVAR____TtC7Journal12MapAssetView_lastestPOIAnnotation] = 0;
  swift_unknownObjectRelease();
  id v27 = [a2 annotations];
  v110[1] = sub_100010218((uint64_t *)&unk_1007FEAC0);
  unint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v28 >> 62)
  {
LABEL_56:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  id v118 = v22;
  if (!v29)
  {
    uint64_t v30 = *(void *)(v116 + 16);
    if (v30)
    {
      id v115 = v15;
      v110[0] = a2;
      uint64_t v31 = v116 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v32 = *(void *)(v13 + 72);
      swift_bridgeObjectRetain();
      unint64_t v113 = 0x800000010068BD20;
      uint64_t v114 = v32;
      id v112 = v12;
      uint64_t v111 = v20;
      while (1)
      {
        sub_10003F820(v31, (uint64_t)v20);
        uint64_t v56 = (double *)((char *)v20 + v12[10]);
        if (((_BYTE)v56[1] & 1) == 0)
        {
          uint64_t v57 = (double *)((char *)v20 + v12[11]);
          if (((_BYTE)v57[1] & 1) == 0) {
            break;
          }
        }
LABEL_11:
        sub_10003F884((uint64_t)v20);
        v31 += v32;
        if (!--v30)
        {
          swift_bridgeObjectRelease();
          a2 = (void *)v110[0];
          goto LABEL_36;
        }
      }
      double v58 = *v56;
      double v59 = *v57;
      CGRect v60 = v117;
      swift_beginAccess();
      id v61 = *(void **)v60;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)CGRect v60 = v61;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        id v61 = sub_1002A5A10(0, v61[2] + 1, 1, v61);
        *(void *)id v117 = v61;
      }
      uint64_t v63 = (uint64_t)v115;
      uint64_t v64 = (uint64_t)v119;
      unint64_t v66 = v61[2];
      unint64_t v65 = v61[3];
      if (v66 >= v65 >> 1)
      {
        id v61 = sub_1002A5A10((void *)(v65 > 1), v66 + 1, 1, v61);
        *(void *)id v117 = v61;
      }
      v61[2] = v66 + 1;
      id v67 = (double *)&v61[2 * v66];
      v67[4] = v58;
      v67[5] = v59;
      swift_endAccess();
      uint64_t v69 = v20[4];
      uint64_t v68 = (void *)v20[5];
      sub_10003F820((uint64_t)v20, v64);
      if (v68)
      {
        swift_bridgeObjectRetain();
LABEL_33:
        uint64_t v128 = v69;
        sub_10003F884(v64);
        uint64_t v81 = v20[1];
        uint64_t v127 = *v20;
        uint64_t v82 = v20[3];
        uint64_t v126 = v20[2];
        id v83 = v20;
        id v84 = (uint64_t *)((char *)v20 + v12[12]);
        unint64_t v85 = v84[1];
        uint64_t v129 = (uint64_t)v68;
        uint64_t v125 = v82;
        if (v85 >> 60 == 15)
        {
          swift_bridgeObjectRetain();
          uint64_t v33 = v81;
          swift_bridgeObjectRetain();
          Swift::String v34 = 0;
        }
        else
        {
          uint64_t v86 = *v84;
          swift_bridgeObjectRetain();
          uint64_t v33 = v81;
          swift_bridgeObjectRetain();
          sub_100040F10(v86, v85);
          Swift::String v34 = (void *)sub_10003F8F4(v86, v85);
          sub_100040DBC(v86, v85);
        }
        id v124 = (char *)v83 + v12[7];
        uint64_t v35 = (uint64_t)v83 + v12[9];
        v36._uint64_t countAndFlagsBits = Double.description.getter();
        unint64_t v131 = 0xD00000000000001FLL;
        unint64_t v132 = v113;
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v37._uint64_t countAndFlagsBits = 44;
        v37._object = (void *)0xE100000000000000;
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        unint64_t v38 = v131;
        unint64_t v39 = v132;
        uint64_t v40 = Double.description.getter();
        uint64_t v42 = v41;
        unint64_t v131 = v38;
        unint64_t v132 = v39;
        swift_bridgeObjectRetain();
        v43._uint64_t countAndFlagsBits = v40;
        v43._object = v42;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = v130;
        URL.init(string:)();
        swift_bridgeObjectRelease();
        id v123 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v58 longitude:v59];
        uint64_t v45 = v121;
        sub_10001B220((uint64_t)v124, v121, (uint64_t *)&unk_1007FC470);
        uint64_t v46 = v122;
        sub_10001B220(v35, v122, (uint64_t *)&unk_1007FC470);
        uint64_t v47 = v120;
        sub_10001B220(v44, v120, (uint64_t *)&unk_100800A60);
        id v48 = objc_allocWithZone((Class)type metadata accessor for StyledMKPointAnnotation());
        id v124 = v34;
        swift_bridgeObjectRetain();
        uint64_t v49 = v125;
        swift_bridgeObjectRetain();
        uint64_t v50 = v129;
        swift_bridgeObjectRetain();
        uint64_t v51 = v45;
        id v12 = v112;
        id v52 = sub_100192088(v127, v33, v126, v49, v128, v50, v51, v46, v34, v47);
        id v53 = v124;

        [v52 setCoordinate:v58, v59];
        id v54 = v123;
        [v52 setLocation:v123];
        swift_bridgeObjectRelease();
        uint64_t v20 = v111;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_10001457C(v130, (uint64_t *)&unk_100800A60);
        id v55 = v52;
        uint64_t v22 = v118;
        sub_10034830C(v55, (uint64_t)v118);

        uint64_t v32 = v114;
        goto LABEL_11;
      }
      uint64_t v70 = v64 + v12[13];
      unint64_t v71 = *(void *)(v70 + 8);
      if (v71 >> 60 != 15
        && (uint64_t v72 = *(void *)v70,
            sub_100040D64(*(void *)v70, *(void *)(v70 + 8)),
            id v73 = (void *)sub_10003F8E0(v72, v71),
            sub_100040DBC(v72, v71),
            v73)
        && (id v74 = [v73 _firstLocalizedCategoryName],
            v73,
            v74))
      {
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v68 = v75;

        sub_10003F820(v64, v63);
        if (v68) {
          goto LABEL_32;
        }
      }
      else
      {
        sub_10003F820(v64, v63);
      }
      uint64_t v76 = v63 + v12[13];
      unint64_t v77 = *(void *)(v76 + 8);
      if (v77 >> 60 == 15) {
        goto LABEL_27;
      }
      uint64_t v78 = *(void *)v76;
      sub_100040D64(*(void *)v76, *(void *)(v76 + 8));
      uint64_t v68 = (void *)sub_10003F8E0(v78, v77);
      sub_100040DBC(v78, v77);
      if (!v68)
      {
        uint64_t v69 = 0;
        goto LABEL_32;
      }
      id v79 = [v68 pointOfInterestCategory];

      if (!v79)
      {
LABEL_27:
        uint64_t v69 = 0;
        uint64_t v68 = 0;
      }
      else
      {
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v68 = v80;
      }
LABEL_32:
      sub_10003F884(v63);
      goto LABEL_33;
    }
  }
LABEL_36:
  id v87 = objc_allocWithZone((Class)MKPointOfInterestFilter);
  type metadata accessor for MKPointOfInterestCategory(0);
  Class v88 = Array._bridgeToObjectiveC()().super.isa;
  id v89 = [v87 initIncludingCategories:v88];

  [a2 setPointOfInterestFilter:v89];
  sub_1001184E0();
  [a2 setDelegate:v22];
  id v90 = [self clearColor];
  [a2 setBackgroundColor:v90];

  [v22 addSubview:a2];
  sub_1001143AC();
  uint64_t v91 = OBJC_IVAR____TtC7Journal12MapAssetView_newReplacementAnnotation;
  uint64_t v13 = *(void *)&v22[OBJC_IVAR____TtC7Journal12MapAssetView_newReplacementAnnotation];
  if (v13)
  {
    id v12 = (int *)OBJC_IVAR____TtC7Journal12MapAssetView_mapView;
    uint64_t v92 = *(void **)&v22[OBJC_IVAR____TtC7Journal12MapAssetView_mapView];
    if (v92)
    {
      swift_unknownObjectRetain();
      id v93 = [v92 annotations];
      unint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v94 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v95 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v95)
        {
LABEL_40:
          id v15 = (char *)(v94 & 0xC000000000000001);
          uint64_t v96 = 4;
          uint64_t v20 = (uint64_t *)&selRef_drawMapRect_zoomScale_inContext_;
          while (1)
          {
            uint64_t v97 = v96 - 4;
            if (v15)
            {
              a2 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              BOOL v98 = __OFADD__(v97, 1);
              uint64_t v22 = (char *)(v96 - 3);
              if (v98) {
                goto LABEL_55;
              }
            }
            else
            {
              a2 = *(void **)(v94 + 8 * v96);
              swift_unknownObjectRetain();
              BOOL v98 = __OFADD__(v97, 1);
              uint64_t v22 = (char *)(v96 - 3);
              if (v98)
              {
LABEL_55:
                __break(1u);
                goto LABEL_56;
              }
            }
            [a2 coordinate];
            double v100 = v99;
            double v102 = v101;
            [(id)v13 coordinate];
            if (v100 == v104 && v102 == v103) {
              break;
            }
            swift_unknownObjectRelease();
            ++v96;
            if (v22 == (char *)v95)
            {
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v22 = v118;
              goto LABEL_59;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v22 = v118;
          id v106 = *(void **)((char *)v12 + (void)v118);
          if (v106) {
            [v106 selectAnnotation:a2 animated:1];
          }
          *(void *)&v22[v91] = 0;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v95 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v95) {
          goto LABEL_40;
        }
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
LABEL_59:
  uint64_t v107 = swift_unknownObjectWeakLoadStrong();
  if (v107)
  {
    uint64_t v108 = v107;
    sub_1005412A4(*(void **)(v107 + OBJC_IVAR____TtC7Journal25FullScreenMultiPinMapView_shadowView));
    id v109 = (char *)*(id *)(v108 + OBJC_IVAR____TtC7Journal25FullScreenMultiPinMapView_captionView);
    sub_1005412A4(v109);

    swift_unknownObjectRelease();
    uint64_t v22 = v109;
  }
}

void sub_1001184E0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset);
  if (v1)
  {
    if (*(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling16MultiPinMapAsset_metadata))
    {
      uint64_t v2 = v0;
      swift_retain();
      uint64_t v3 = sub_100039114();
      swift_release();
      if (v3 != 1)
      {
        uint64_t v4 = swift_bridgeObjectRetain();
        sub_10003F810(v4);
        if (v3)
        {
          if (*(void *)(v3 + 16))
          {
            swift_beginAccess();
            swift_bridgeObjectRetain();
            uint64_t v5 = sub_1001EA06C(v3);
            id v6 = [self currentTraitCollection];
            uint64_t v7 = (void *)sub_100311520(v5, 0, 5, v6, 1);

            swift_bridgeObjectRelease();
            id v8 = [v7 camera];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            id v9 = *(id *)(v2 + OBJC_IVAR____TtC7Journal12MapAssetView_mapView);
            [v9 setCamera:v8 animated:1];
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }
  }
}

uint64_t sub_1001186A0(double a1, double a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC7Journal12MapAssetView_locations;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)v5 + 16);
  if (v7)
  {
    unint64_t v8 = 0;
    for (uint64_t i = (double *)(*(void *)v5 + 40); *(i - 1) != a1 || *i != a2; i += 2)
    {
      if (v7 == ++v8) {
        return result;
      }
    }
    swift_beginAccess();
    sub_10035FC48(v8);
    return swift_endAccess();
  }
  return result;
}

id sub_100118750(uint64_t a1, double a2)
{
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC7Journal12MapAssetView_mapView);
  if (v4) {
    [v4 setAlpha:a2];
  }
  [*(id *)(a1 + OBJC_IVAR____TtC7Journal12MapAssetView_platterBlurView) setAlpha:a2];
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC7Journal12MapAssetView_labelView);

  return [v5 setAlpha:a2];
}

id sub_1001187D8(uint64_t a1)
{
  return [*(id *)(a1 + OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView) setAlpha:];
}

id sub_1001187F0(uint64_t a1)
{
  return [*(id *)(a1 + OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView) setAlpha:];
}

uint64_t sub_100118808(uint64_t result)
{
  if (!result)
  {
    id v15 = *(void **)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_mapView];
    if (!v15) {
      return result;
    }
    uint64_t v16 = (double *)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame];
    if (v1[OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame + 32])
    {
      [v15 frame];
      double v18 = v17;
      double v20 = v19;
      double v22 = v21;
      double v24 = v23;
    }
    else
    {
      double v22 = v16[2];
      double v24 = v16[3];
      double v18 = *v16;
      double v20 = v16[1];
      id v25 = v15;
    }
    [v15 setFrame:v18, v20, v22, v24];

    uint64_t v14 = 0;
    goto LABEL_11;
  }
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC7Journal12MapAssetView_mapView];
  if (v2)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void **)(result + OBJC_IVAR____TtC7Journal12MapAssetView_mapView);
    if (v4)
    {
      uint64_t v5 = self;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v2;
      *(void *)(v6 + 24) = v1;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = sub_10011AD0C;
      *(void *)(v7 + 24) = v6;
      v27[4] = sub_10001AC84;
      v27[5] = v7;
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 1107296256;
      v27[2] = sub_1003F44E4;
      v27[3] = &unk_10079AB20;
      unint64_t v8 = _Block_copy(v27);
      id v9 = v2;
      id v10 = v3;
      id v11 = v4;
      id v12 = v1;
      swift_retain();
      swift_release();
      [(id)v5 performWithoutAnimation:v8];
      _Block_release(v8);
      LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (v5)
      {
        __break(1u);
        return result;
      }
      id v13 = v9;
      [v11 frame];
      [v13 setFrame:];

      uint64_t v14 = sub_10011AD0C;
LABEL_11:
      double v26 = &v1[OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame];
      *(_OWORD *)double v26 = 0u;
      *((_OWORD *)v26 + 1) = 0u;
      unsigned char v26[32] = 1;
      return sub_10001ABB8((uint64_t)v14);
    }
  }
  return result;
}

id sub_100118AAC(void *a1, uint64_t a2)
{
  UIView.removeAllConstraints()();
  uint64_t v4 = (double *)(a2 + OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame);
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC7Journal12MapAssetView_naturalIconFrame + 32))
  {
    [a1 frame];
  }
  else
  {
    double v7 = v4[2];
    double v8 = v4[3];
    double v5 = *v4;
    double v6 = v4[1];
  }

  return [a1 setFrame:v5, v6, v7, v8];
}

id sub_100118B20()
{
  sub_1005CAC04(10, v0[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType]);
  v0[OBJC_IVAR____TtC7Journal12MapAssetView_needsMapLoad] = 1;

  return [v0 setNeedsLayout];
}

void sub_100118B90()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for MapAssetView();
  [super layoutSubviews];
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC7Journal12MapAssetView_needsMapLoad) == 1)
  {
    *((unsigned char *)v0 + OBJC_IVAR____TtC7Journal12MapAssetView_needsMapLoad) = 0;
    if (*((unsigned char *)v0 + OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap) == 1) {
      sub_100117374();
    }
    else {
      sub_1001143AC();
    }
  }
}

void sub_100118CE0()
{
  objc_super v1 = *(void **)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView];
  [v0 bounds];
  [v1 setFrame:];
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_mapView];
  if (v2)
  {
    id v3 = v2;
    [v0 bounds];
    [v3 setFrame:];
  }
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView];
  if (v4)
  {
    id v5 = v4;
    [v0 bounds];
    [v5 setFrame:];
  }
}

id sub_100118DD0(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for MapAssetView();
  return [super *a3];
}

void sub_100118E8C()
{
  sub_10001A7A4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100118F7C(double a1, double a2, double a3, double a4)
{
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for MapAssetView();
  [super setBounds:a1, a2, a3, a4];
  id v9 = *(void **)&v4[OBJC_IVAR____TtC7Journal12MapAssetView_mapThumbnailView];
  [v4 bounds];
  [v9 setFrame:];
  id v10 = *(void **)&v4[OBJC_IVAR____TtC7Journal12MapAssetView_mapView];
  if (v10)
  {
    id v11 = v10;
    [v4 bounds];
    [v11 setFrame:];
  }
}

void *sub_100119054()
{
  objc_super v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_mapAsset);
  id v2 = v1;
  return v1;
}

void sub_100119084()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal12MapAssetView_useInteractiveMap) == 1) {
    sub_100117374();
  }
  else {
    sub_1001143AC();
  }
}

void sub_1001190A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  double v7 = (char *)&v45 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v13 = __chkstk_darwin(v12).n128_u64[0];
  id v15 = (char *)&v45 - v14;
  uint64_t v16 = OBJC_IVAR____TtC7Journal12MapAssetView_mapView;
  double v17 = *(void **)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_mapView);
  if (!v17) {
    return;
  }
  id v18 = [v17 annotations:v13];
  sub_100010218((uint64_t *)&unk_1007FEAC0);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_didSelectLatestPOIAnnotation))
  {
    swift_bridgeObjectRelease();
    return;
  }
  id v55 = v15;
  uint64_t v48 = OBJC_IVAR____TtC7Journal12MapAssetView_didSelectLatestPOIAnnotation;
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    p_info = (__objc2_class_ro **)(_TtC7Journal15ImageStateModel + 32);
    if (v20) {
      goto LABEL_8;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  p_info = _TtC7Journal15ImageStateModel.info;
  if (!v20) {
    goto LABEL_33;
  }
LABEL_8:
  uint64_t v47 = v11;
  uint64_t v46 = v16;
  uint64_t v57 = v8;
  uint64_t v51 = v4;
  if (v20 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v22 = v1 + OBJC_IVAR____TtC7Journal12MapAssetView_clusterAnnotationsDict;
  double v23 = p_info[316];
  unint64_t v58 = v19 & 0xC000000000000001;
  swift_beginAccess();
  uint64_t v24 = 0;
  uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v49 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v50 = v1;
  id v53 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  id v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  id v52 = v23;
  do
  {
    if (v58)
    {
      id v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      id v25 = *(void **)(v19 + 8 * v24 + 32);
      swift_unknownObjectRetain();
    }
    [v25 coordinate];
    if (*(void *)(*(void *)v22 + 16))
    {
      sub_10001BAD0(v26, v27);
      if (v28)
      {
        swift_unknownObjectRelease();
        goto LABEL_11;
      }
    }
    if (!*(void *)((char *)&v23->flags + v1))
    {
      *(void *)((char *)&v23->flags + v1) = v25;
      goto LABEL_11;
    }
    type metadata accessor for StyledMKPointAnnotation();
    uint64_t v29 = swift_dynamicCastClass();
    if (!v29)
    {
      (*v54)(v7, 1, 1, v57);
LABEL_26:
      swift_unknownObjectRelease();
      sub_10001457C((uint64_t)v7, (uint64_t *)&unk_1007FC470);
      goto LABEL_11;
    }
    uint64_t v30 = v29 + OBJC_IVAR____TtC7Journal23StyledMKPointAnnotation_createdDate;
    swift_beginAccess();
    sub_10001B220(v30, (uint64_t)v7, (uint64_t *)&unk_1007FC470);
    uint64_t v31 = *v56;
    if ((*v56)(v7, 1, v57) == 1) {
      goto LABEL_26;
    }
    uint64_t v32 = *v53;
    uint64_t v33 = v57;
    (*v53)(v55, v7, v57);
    uint64_t v34 = swift_dynamicCastClass();
    if (v34)
    {
      uint64_t v35 = v34 + OBJC_IVAR____TtC7Journal23StyledMKPointAnnotation_createdDate;
      swift_beginAccess();
      uint64_t v36 = v35;
      uint64_t v37 = (uint64_t)v51;
      sub_10001B220(v36, (uint64_t)v51, (uint64_t *)&unk_1007FC470);
      if (v31((char *)v37, 1, v33) != 1)
      {
        unint64_t v38 = v47;
        v32(v47, (char *)v37, v33);
        unint64_t v39 = v55;
        if (static Date.< infix(_:_:)())
        {
          uint64_t v1 = v50;
          *(void *)((char *)&v52->flags + v5sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v25;
          swift_unknownObjectRelease();
          uint64_t v40 = v38;
          id v41 = *v49;
          (*v49)(v40, v33);
          uint64_t v42 = v33;
          double v23 = v52;
          v41(v39, v42);
          goto LABEL_11;
        }
        swift_unknownObjectRelease();
        Swift::String v43 = *v49;
        (*v49)(v38, v33);
        v43(v39, v33);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v37 = (uint64_t)v51;
      (*v54)(v51, 1, 1, v33);
    }
    swift_unknownObjectRelease();
    (*v49)(v55, v33);
    sub_10001457C(v37, (uint64_t *)&unk_1007FC470);
LABEL_29:
    uint64_t v1 = v50;
    double v23 = v52;
LABEL_11:
    ++v24;
  }
  while (v20 != v24);
  swift_bridgeObjectRelease();
  uint64_t v16 = v46;
LABEL_34:
  if (*(void *)(v1 + OBJC_IVAR____TtC7Journal12MapAssetView_lastestPOIAnnotation))
  {
    uint64_t v44 = *(void **)(v1 + v16);
    if (v44) {
      [v44 selectAnnotation:animated:];
    }
  }
  *(unsigned char *)(v1 + v48) = 1;
}

uint64_t sub_100119670(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v8 - 8);
  self;
  uint64_t v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {
    self;
    if (!swift_dynamicCastObjCClass()) {
      return 0;
    }
    id v37 = [a1 dequeueReusableAnnotationViewWithIdentifier:MKMapViewDefaultAnnotationViewReuseIdentifier forAnnotation:a2];
    self;
    unint64_t v38 = (void *)swift_dynamicCastObjCClass();
    if (v38)
    {
      id v39 = v38;
      [v38 setAnnotation:a2];
    }
    else
    {

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v40 = objc_allocWithZone((Class)MKMarkerAnnotationView);
      swift_unknownObjectRetain();
      id v41 = a2;
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v39 = [v40 initWithAnnotation:v41 reuseIdentifier:v42];

      swift_unknownObjectRelease();
      if (v39) {
        [v39 setCanShowCallout:1];
      }
    }
    type metadata accessor for StyledMKPointAnnotation();
    uint64_t v43 = swift_dynamicCastClass();
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = *(void **)(v43 + OBJC_IVAR____TtC7Journal23StyledMKPointAnnotation_styleAttributes);
      if (v45)
      {
        if (v39)
        {
          uint64_t v46 = self;
          swift_unknownObjectRetain();
          id v47 = v45;
          id v48 = v39;
          id v49 = [v46 styleAttributesForMapFeatureAttributes:v47 elevatedGround:1];
          [v48 _setStyleAttributes:v49];

          uint64_t v50 = *(void **)(v44 + OBJC_IVAR____TtC7Journal23StyledMKPointAnnotation_placeName + 8);
          if (v50)
          {
            uint64_t v51 = v47;
            uint64_t v52 = *(void *)(v44 + OBJC_IVAR____TtC7Journal23StyledMKPointAnnotation_placeName);
            id v53 = v48;
            swift_bridgeObjectRetain();
            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
            v54._uint64_t countAndFlagsBits = 0x3A6E69502070614DLL;
            v54._object = (void *)0xE900000000000020;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v54);
            v55._uint64_t countAndFlagsBits = v52;
            v55._object = v50;
            String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v55);
            swift_bridgeObjectRelease();
            v56._uint64_t countAndFlagsBits = 0;
            v56._object = (void *)0xE000000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v56);
            String.LocalizationValue.init(stringInterpolation:)();
            static Locale.current.getter();
            String.init(localized:table:bundle:locale:comment:)();
            NSString v57 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v53 setAccessibilityLabel:v57];

            swift_unknownObjectRelease();
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v58 = *(void *)(v43 + OBJC_IVAR____TtC7Journal23StyledMKPointAnnotation_placeName + 8);
          swift_unknownObjectRetain();
          id v59 = v45;
          if (v58)
          {
            CGRect v60 = v59;
            swift_unknownObjectRelease();

            return 0;
          }
        }
        swift_unknownObjectRelease();
      }
    }
    if (v39)
    {
      id v53 = v39;
LABEL_42:
      id v61 = [v53 _styleAttributes];
      if (!v61
        || (uint64_t v62 = v61,
            [v61 poiType],
            v62,
            (id v63 = [v53 _styleAttributes]) != 0)
        && (uint64_t v64 = v63, v65 = [v63 poiType], v64, v65 == 348))
      {
        unint64_t v66 = self;
        id v67 = v53;
        id v68 = [v66 systemIndigoColor];
        [v67 setMarkerTintColor:v68];
      }
      [v53 setClusteringIdentifier:MKMapViewDefaultClusterAnnotationViewReuseIdentifier];
    }
    return (uint64_t)v39;
  }
  id v10 = [v9 memberAnnotations];
  sub_100010218((uint64_t *)&unk_1007FEAC0);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    p_info = _TtC7Journal15ImageStateModel.info;
    if (v12) {
      goto LABEL_4;
    }
    goto LABEL_51;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  p_info = _TtC7Journal15ImageStateModel.info;
  if (!v12)
  {
LABEL_51:
    swift_bridgeObjectRelease();
LABEL_52:
    swift_getObjectType();
    [a2 coordinate];
    double v70 = v69;
    double v72 = v71;
    id v73 = (void *)((char *)&p_info[317]->flags + v3);
    swift_beginAccess();
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v85 = (void *)*v73;
    void *v73 = 0x8000000000000000;
    sub_10011A23C((uint64_t)a2, isUniquelyReferenced_nonNull_native, &v85, v70, v72);
    void *v73 = v85;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v75 = [a1 dequeueReusableAnnotationViewWithIdentifier:MKMapViewDefaultClusterAnnotationViewReuseIdentifier forAnnotation:a2];
    self;
    id v39 = (id)swift_dynamicCastObjCClass();
    if (v39)
    {
      uint64_t v76 = self;
      id v77 = v75;
      id v78 = [v76 systemIndigoColor];
      [v39 setMarkerTintColor:v78];
    }
    else
    {
    }
    return (uint64_t)v39;
  }
LABEL_4:
  uint64_t v81 = a1;
  uint64_t v82 = a2;
  uint64_t v80 = v3;
  uint64_t v14 = (void *)(v3 + OBJC_IVAR____TtC7Journal12MapAssetView_clusterAnnotationsDict);
  unint64_t v83 = v11;
  unint64_t v84 = v11 & 0xC000000000000001;
  uint64_t v15 = 4;
  while (1)
  {
    uint64_t v16 = v15 - 4;
    if (v84)
    {
      a2 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      a1 = (void *)(v15 - 3);
      if (__OFADD__(v16, 1)) {
        goto LABEL_47;
      }
    }
    else
    {
      a2 = *(void **)(v11 + 8 * v15);
      swift_unknownObjectRetain();
      a1 = (void *)(v15 - 3);
      if (__OFADD__(v16, 1))
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
    }
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17) {
      break;
    }
LABEL_7:
    swift_unknownObjectRelease();
    ++v15;
    if (a1 == (void *)v12)
    {
      swift_bridgeObjectRelease();
      a1 = v81;
      a2 = v82;
      uint64_t v3 = v80;
      p_info = (__objc2_class_ro **)(_TtC7Journal15ImageStateModel + 32);
      goto LABEL_52;
    }
  }
  id v18 = (void *)v17;
  unint64_t v11 = v12;
  swift_unknownObjectRetain();
  [v18 coordinate];
  double v20 = v19;
  double v22 = v21;
  swift_beginAccess();
  swift_unknownObjectRetain();
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v85 = (void *)*v14;
  uint64_t v24 = v85;
  *uint64_t v14 = 0x8000000000000000;
  unint64_t v26 = sub_10001BAD0(v20, v22);
  uint64_t v27 = v24[2];
  BOOL v28 = (v25 & 1) == 0;
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28)) {
    goto LABEL_48;
  }
  uint64_t v3 = v25;
  if (v24[3] >= v29)
  {
    if (v23)
    {
      uint64_t v32 = v85;
      if ((v25 & 1) == 0)
      {
LABEL_21:
        v32[(v26 >> 6) + 8] |= 1 << v26;
        uint64_t v33 = (double *)(v32[6] + 16 * v26);
        double *v33 = v20;
        v33[1] = v22;
        *(void *)(v32[7] + 8 * v26) = v18;
        uint64_t v34 = v32[2];
        BOOL v35 = __OFADD__(v34, 1);
        uint64_t v36 = v34 + 1;
        if (v35) {
          goto LABEL_49;
        }
        v32[2] = v36;
        goto LABEL_6;
      }
    }
    else
    {
      sub_100549B0C();
      uint64_t v32 = v85;
      if ((v3 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_5:
    uint64_t v3 = v32[7];
    swift_unknownObjectRelease();
    *(void *)(v3 + 8 * v26) = v18;
LABEL_6:
    *uint64_t v14 = v32;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_unknownObjectRelease();
    uint64_t v12 = v11;
    unint64_t v11 = v83;
    goto LABEL_7;
  }
  sub_100545D00(v29, v23);
  uint64_t v30 = sub_10001BAD0(v20, v22);
  if ((v3 & 1) == (v31 & 1))
  {
    unint64_t v26 = v30;
    uint64_t v32 = v85;
    if ((v3 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_5;
  }
  type metadata accessor for CLLocationCoordinate2D(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10011A118()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1001190A0();
  }
}

uint64_t sub_10011A23C(uint64_t a1, char a2, void *a3, double a4, double a5)
{
  id v10 = (void *)*a3;
  unint64_t v12 = sub_10001BAD0(a4, a5);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100549B0C();
LABEL_7:
    id v18 = (void *)*a3;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    double v21 = (double *)(v18[6] + 16 * v12);
    double *v21 = a4;
    v21[1] = a5;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_100545D00(result, a2 & 1);
  uint64_t result = sub_10001BAD0(a4, a5);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    id v18 = (void *)*a3;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for CLLocationCoordinate2D(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10011A37C()
{
  id v1 = [v0 snapshotViewAfterScreenUpdates:1];
  uint64_t v2 = OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView];
  *(void *)&v0[OBJC_IVAR____TtC7Journal12MapAssetView_fullScreenSnapshotView] = v1;

  uint64_t v4 = *(void **)&v0[v2];
  if (v4)
  {
    id v18 = v4;
    [v0 addSubview:v18];
    [v0 bounds];
    [v18 setFrame:];
    [v18 setContentMode:1];
    id v5 = [v18 superview];
    if (v5)
    {
      uint64_t v6 = v5;
      [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v7 = [v18 centerYAnchor];
      id v8 = [v6 centerYAnchor];
      id v9 = [v7 constraintEqualToAnchor:v8];

      [v9 setConstant:0.0];
      id v10 = v9;
      [v10 setActive:1];
    }
    id v11 = [v18 superview];
    if (v11)
    {
      unint64_t v12 = v11;
      [v18 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v13 = [v18 centerXAnchor];
      id v14 = [v12 centerXAnchor];
      id v15 = [v13 constraintEqualToAnchor:v14];

      [v15 setConstant:0.0];
      id v16 = v15;
      [v16 setActive:1];

      uint64_t v17 = v12;
    }
    else
    {
      uint64_t v17 = v18;
    }
  }
}

uint64_t sub_10011A604()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v13 = (char *)&v20 - v12;
  char v14 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
  if ((v14 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
  {
    sub_100491AF4();
    swift_unknownObjectRelease();
  }
  sub_10001B284(0, (unint64_t *)&qword_100805AB0);
  id v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  double v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v10, v7);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_10011ACAC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017D530;
  aBlock[3] = &unk_10079AAA8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10011B2C4((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010218(&qword_100804DB0);
  sub_10011AE0C((unint64_t *)&qword_1007FBD20, &qword_100804DB0);
  uint64_t v18 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, v7);
}

void sub_10011AA04()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
  if ((v1 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
  {
    sub_100491AF4();
    swift_unknownObjectRelease();
  }
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1006D6280;
  swift_getErrorValue();
  uint64_t v3 = Error.localizedDescription.getter();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10001B2C0();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v5;
  uint64_t v6 = String.init(format:_:)();
  unint64_t v8 = v7;
  if (qword_1007F69F0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100026A54(v9, (uint64_t)qword_1007FE970);
  swift_bridgeObjectRetain();
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    sub_10011EA98(v6, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10011AC74()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_10011ACAC()
{
}

uint64_t sub_10011ACB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_10011ACC4()
{
  return swift_release();
}

uint64_t sub_10011ACCC()
{
  return swift_deallocObject();
}

id sub_10011AD0C()
{
  return sub_100118AAC(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10011AD14()
{
  return swift_deallocObject();
}

uint64_t sub_10011AD24()
{
  swift_release();

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_10011AD6C()
{
  sub_10011785C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_10011AD80()
{
  unint64_t result = qword_1007FEAF0;
  if (!qword_1007FEAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FEAF0);
  }
  return result;
}

uint64_t sub_10011ADD8()
{
  return 8;
}

uint64_t sub_10011ADE4()
{
  return swift_release();
}

uint64_t sub_10011ADEC(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_10011AE00(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10011AE0C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014440(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011AE5C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_10011AFB4(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_10011493C(a1, v7, v1 + v4, v8);
}

uint64_t sub_10011B08C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

void sub_10011B1EC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  uint64_t v7 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_100114E28(v5, v6, v0 + v2, v7);
}

void sub_10011B2BC()
{
}

uint64_t sub_10011B2C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011B324()
{
  id v37 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10037CC74(1);
  unint64_t v2 = sub_1000CD36C((unint64_t)v1);
  uint64_t result = swift_bridgeObjectRelease();
  if (((unint64_t)v2 & 0x8000000000000000) == 0 && ((unint64_t)v2 & 0x4000000000000000) == 0)
  {
    uint64_t v4 = *((void *)v2 + 2);
    if (v4) {
      goto LABEL_4;
    }
LABEL_30:
    swift_release();
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v6 = (char *)_swiftEmptyArrayStorage;
LABEL_31:
    sub_1000D6534((unint64_t)v34, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_release();
  if (!v4) {
    goto LABEL_30;
  }
LABEL_4:
  if (v4 >= 1)
  {
    BOOL v35 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Journal20CanvasViewController_playedVideoIds);
    swift_beginAccess();
    uint64_t v5 = 0;
    uint64_t v6 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (((unint64_t)v2 & 0xC000000000000001) != 0) {
        uint64_t v9 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v9 = (char *)*(id *)&v2[v5 + 4];
      }
      uint64_t v8 = v9;
      id v10 = *(void **)&v9[OBJC_IVAR____TtC7Journal14VideoAssetView_videoAsset];
      if (v10)
      {
        uint64_t v11 = *v35;
        uint64_t v12 = v10;
        swift_bridgeObjectRetain();
        uint64_t v13 = UUID.uuidString.getter();
        char v15 = sub_100542090(v13, v14, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v15)
        {
          uint64_t v16 = *(void **)&v8[OBJC_IVAR____TtC7Journal14VideoAssetView_playerView];
          if (v16)
          {
            id v17 = v16;
            id v18 = [v17 layer];
            self;
            uint64_t v19 = (void *)swift_dynamicCastObjCClass();
            if (!v19) {

            }
            id v20 = [v19 player];
            if (v20)
            {
              id v21 = [v20 currentItem];

              if (v21)
              {

                if ((sub_100320C64(v8[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType]) & 1) != 0
                  && !UIAccessibilityIsReduceMotionEnabled())
                {
                  uint64_t v22 = self;
                  uint64_t v23 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  uint64_t v24 = swift_allocObject();
                  *(void *)(v24 + 16) = v23;
                  *(void *)(v24 + 24) = 0;
                  aBlock[4] = sub_10011B82C;
                  aBlock[5] = v24;
                  aBlock[0] = _NSConcreteStackBlock;
                  aBlock[1] = 1107296256;
                  aBlock[2] = sub_10017D530;
                  aBlock[3] = &unk_10079AC80;
                  uint64_t v25 = _Block_copy(aBlock);
                  swift_release();
                  [v22 animateWithDuration:0 delay:v25 options:0 animations:0.3 completion:0.0];
                  _Block_release(v25);
                }
              }
            }
          }
        }
        else
        {
          sub_1005DF9A0();
          sub_1005DFB64();
          unint64_t v26 = &v8[OBJC_IVAR____TtC7Journal14VideoAssetView_finishPlayingAction];
          uint64_t v27 = *(void *)&v8[OBJC_IVAR____TtC7Journal14VideoAssetView_finishPlayingAction];
          *unint64_t v26 = 0;
          v26[1] = 0;
          sub_10001ABB8(v27);
          BOOL v28 = v8;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v37 & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v29 = UUID.uuidString.getter();
          uint64_t v31 = v30;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_1002A54A0(0, *((void *)v6 + 2) + 1, 1, v6);
          }
          unint64_t v33 = *((void *)v6 + 2);
          unint64_t v32 = *((void *)v6 + 3);
          if (v33 >= v32 >> 1) {
            uint64_t v6 = sub_1002A54A0((char *)(v32 > 1), v33 + 1, 1, v6);
          }
          *((void *)v6 + 2) = v33 + 1;
          uint64_t v7 = &v6[16 * v33];
          *((void *)v7 + 4) = v29;
          *((void *)v7 + 5) = v31;
        }

        uint64_t v8 = v12;
      }
      ++v5;
    }
    while (v4 != v5);
    swift_release();
    uint64_t v34 = v37;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_10011B7BC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10011B7F4()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10011B82C()
{
  sub_1005E3954(*(double *)(v0 + 24));
}

uint64_t sub_10011B838(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_10011B848()
{
  return swift_release();
}

unint64_t sub_10011B850(char a1)
{
  unint64_t result = 0x6564497465737361;
  switch(a1)
  {
    case 1:
      unint64_t result = 1702125924;
      break;
    case 2:
      unint64_t result = 0x6D614E6563616C70;
      break;
    case 3:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 4:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 5:
      unint64_t result = 1702521203;
      break;
    case 6:
      unint64_t result = 0x7243657261757173;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10011B984(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010218(&qword_1007FEC90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002E0BC(a1, a1[3]);
  sub_10011D4C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = _s10VideoAssetC9VideoDataVMa(0);
    LOBYTE(v14) = 1;
    type metadata accessor for Date();
    sub_10011C810(&qword_1007F99F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    id v10 = (long long *)(v3 + *(int *)(v9 + 36));
    char v11 = *((unsigned char *)v10 + 16);
    long long v14 = *v10;
    char v15 = v11;
    v13[15] = 5;
    type metadata accessor for CGSize(0);
    sub_10011C810(&qword_1007F99F8, type metadata accessor for CGSize);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10011BCF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100010218(&qword_1007FEC80);
  uint64_t v7 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = _s10VideoAssetC9VideoDataVMa(0);
  __chkstk_darwin(v45);
  char v11 = (uint64_t *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (uint64_t)a1;
  sub_10002E0BC(a1, a1[3]);
  sub_10011D4C8();
  uint64_t v44 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)a1);
  }
  uint64_t v13 = (uint64_t)v6;
  uint64_t v14 = v7;
  LOBYTE(v46) = 0;
  uint64_t v15 = v42;
  uint64_t v16 = v43;
  *char v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v11[1] = v17;
  type metadata accessor for Date();
  LOBYTE(v46) = 1;
  sub_10011C810(&qword_10080E9D0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  id v18 = (int *)v45;
  sub_10002C4EC(v13, (uint64_t)v11 + *(int *)(v45 + 20), (uint64_t *)&unk_1007FC470);
  LOBYTE(v46) = 2;
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  id v20 = (uint64_t *)((char *)v11 + v18[6]);
  uint64_t *v20 = v19;
  v20[1] = v21;
  LOBYTE(v46) = 3;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = (char *)v11 + v18[7];
  *(void *)uint64_t v23 = v22;
  v23[8] = v24 & 1;
  LOBYTE(v46) = 4;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v26 = (char *)v11 + v18[8];
  *(void *)unint64_t v26 = v25;
  v26[8] = v27 & 1;
  type metadata accessor for CGSize(0);
  char v48 = 5;
  sub_10011C810(&qword_1007F99E0, type metadata accessor for CGSize);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v28 = v47;
  uint64_t v29 = (char *)v11 + v18[9];
  *(_OWORD *)uint64_t v29 = v46;
  v29[16] = v28;
  LOBYTE(v46) = 6;
  uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v31 = (uint64_t *)((char *)v11 + v18[10]);
  *uint64_t v31 = v30;
  v31[1] = v32;
  LOBYTE(v46) = 7;
  uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v34 = (uint64_t *)((char *)v11 + v18[11]);
  uint64_t *v34 = v33;
  v34[1] = v35;
  LOBYTE(v46) = 8;
  uint64_t v36 = v44;
  uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v39 = v38;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v36, v16);
  id v40 = (uint64_t *)((char *)v11 + *(int *)(v45 + 48));
  *id v40 = v37;
  v40[1] = v39;
  sub_10011D51C((uint64_t)v11, v15);
  _s7Journal19DynamicWaveformViewVwxx_0(v12);
  return sub_10011D580((uint64_t)v11);
}

unint64_t sub_10011C314()
{
  return sub_10011B850(*v0);
}

uint64_t sub_10011C31C(uint64_t a1)
{
  unint64_t v2 = sub_10011D4C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011C358(uint64_t a1)
{
  unint64_t v2 = sub_10011D4C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10011C394@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10011BCF0(a1, a2);
}

uint64_t sub_10011C3AC(void *a1)
{
  return sub_10011B984(a1);
}

id sub_10011C3C4(int a1, uint64_t a2, char a3, uint64_t a4, void *a5, void *a6)
{
  int v12 = a3 & 1;
  id v13 = objc_allocWithZone((Class)type metadata accessor for VideoThumbnailCacheOperation());
  swift_bridgeObjectRetain();
  return sub_100529128(v6, a1, a2, v12, a4, a5, a6);
}

uint64_t sub_10011C454()
{
  return swift_release();
}

id sub_10011C464()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s10VideoAssetCMa(0);
  return [super dealloc];
}

uint64_t sub_10011C4AC()
{
  return _s10VideoAssetCMa(0);
}

uint64_t _s10VideoAssetCMa(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FEB80);
}

uint64_t sub_10011C4D4()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10011C518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011C52C);
}

uint64_t sub_10011C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10011C5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011C600);
}

uint64_t sub_10011C600(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100010218((uint64_t *)&unk_1007FC470);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _s10VideoAssetC9VideoDataVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FEBE8);
}

void sub_10011C6CC()
{
  sub_100033618();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10011C780()
{
  return sub_10011C810(&qword_1007F9E18, (void (*)(uint64_t))_s10VideoAssetC9VideoDataVMa);
}

uint64_t sub_10011C7C8()
{
  return sub_10011C810(&qword_1007FEC40, (void (*)(uint64_t))_s10VideoAssetC9VideoDataVMa);
}

uint64_t sub_10011C810(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011C858()
{
  return swift_retain();
}

uint64_t sub_10011C868(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtCC7Journal10Journaling10VideoAsset_metadata) = a1;
  return swift_release();
}

void *sub_10011C880(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, unsigned __int8 a12, char *a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v125 = a8;
  uint64_t v124 = a7;
  uint64_t v131 = a6;
  uint64_t v122 = a5;
  uint64_t v121 = a4;
  id v133 = a3;
  uint64_t v132 = a2;
  uint64_t v115 = a18;
  sub_10002C4EC(a18, (uint64_t)v136, (uint64_t *)&unk_10080E010);
  double v119 = *(double *)v136;
  double v118 = *(double *)&v136[1];
  double v117 = *(double *)&v136[2];
  double v116 = *(double *)&v136[3];
  uint64_t v114 = a17;
  sub_10002C4EC(a17, (uint64_t)v135, (uint64_t *)&unk_10080E010);
  CGFloat v19 = *(double *)v135;
  CGFloat v20 = *(double *)&v135[1];
  CGFloat v21 = *(double *)&v135[2];
  CGFloat v22 = *(double *)&v135[3];
  uint64_t v113 = a16;
  sub_10002C4EC(a16, (uint64_t)v134, (uint64_t *)&unk_10080E010);
  CGFloat x = v134[0];
  CGFloat y = v134[1];
  CGFloat width = v134[2];
  CGFloat height = v134[3];
  uint64_t v123 = sub_100010218((uint64_t *)&unk_10080F2A0);
  __chkstk_darwin(v123);
  uint64_t v126 = (uint64_t)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v28 - 8);
  uint64_t v130 = (uint64_t)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = _s10VideoAssetC9VideoDataVMa(0);
  __chkstk_darwin(v120);
  id v110 = (uint64_t *)((char *)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v128 = type metadata accessor for AssetAttachment.AssetType(0);
  __chkstk_darwin(v128);
  uint64_t v32 = (char *)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  id v112 = (char *)&v107 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v107 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v45 = (char *)&v107 - v44;
  UUID.init()();
  long long v46 = (char *)objc_allocWithZone((Class)_s10VideoAssetCMa(0));
  *(void *)&v46[OBJC_IVAR____TtCC7Journal10Journaling10VideoAsset_metadata] = 0;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v42, v45, v39);
  uint64_t v47 = (uint64_t)v42;
  uint64_t v48 = v37;
  uint64_t v49 = v36;
  uint64_t v50 = (char *)sub_1001817C4(v47, 2, a1);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v40 + 8);
  uint64_t v127 = v39;
  v51(v45, v39);
  sub_10001B220(v132, (uint64_t)v35, (uint64_t *)&unk_100800A60);
  int v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v49);
  uint64_t v129 = v50;
  uint64_t v111 = v51;
  if (v52 == 1)
  {
    id v53 = v32;
    Swift::String v54 = v50;
    sub_10001457C((uint64_t)v35, (uint64_t *)&unk_100800A60);
  }
  else
  {
    Swift::String v55 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    Swift::String v56 = v112;
    v55(v112, v35, v49);
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v32, v56, v49);
    type metadata accessor for AssetAttachment.AssetType.FilePathType(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    uint64_t v108 = v50;
    UUID.init()();
    uint64_t v109 = v49;
    uint64_t v57 = UUID.uuidString.getter();
    uint64_t v59 = v58;
    v51(v45, v127);
    type metadata accessor for AssetAttachment(0);
    uint64_t v60 = v48;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = 0;
    id v53 = v32;
    sub_10011D460((uint64_t)v32, v61 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType, type metadata accessor for AssetAttachment.AssetType);
    uint64_t v62 = (uint64_t *)(v61 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
    *uint64_t v62 = v57;
    v62[1] = v59;
    id v63 = &v108[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v63 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v112, v109);
    uint64_t v50 = v129;
  }
  uint64_t v64 = v111;
  if (v133)
  {
    id v65 = v133;
    *(void *)id v53 = v133;
    swift_storeEnumTagMultiPayload();
    unint64_t v66 = v50;
    id v67 = v65;
    UUID.init()();
    uint64_t v68 = UUID.uuidString.getter();
    uint64_t v70 = v69;
    v64(v45, v127);
    type metadata accessor for AssetAttachment(0);
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = 0;
    sub_10011D460((uint64_t)v53, v71 + OBJC_IVAR____TtC7Journal15AssetAttachment_assetType, type metadata accessor for AssetAttachment.AssetType);
    double v72 = (uint64_t *)(v71 + OBJC_IVAR____TtC7Journal15AssetAttachment_fileNameID);
    *double v72 = v68;
    v72[1] = v70;
    id v73 = &v66[OBJC_IVAR____TtCC7Journal10Journaling5Asset_sourceAttachments];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v73 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  sub_10001B220(v131, v130, (uint64_t *)&unk_1007FC470);
  sub_10002C4EC(v113, (uint64_t)v139, (uint64_t *)&unk_10080E010);
  if (v139[32] == 1)
  {
    CGFloat x = CGRectZero.origin.x;
    CGFloat y = CGRectZero.origin.y;
    CGFloat width = CGRectZero.size.width;
    CGFloat height = CGRectZero.size.height;
  }
  v140.origin.CGFloat x = x;
  v140.origin.CGFloat y = y;
  v140.size.CGFloat width = width;
  v140.size.CGFloat height = height;
  id v74 = NSStringFromCGRect(v140);
  uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v127 = v75;

  sub_10002C4EC(v114, (uint64_t)v138, (uint64_t *)&unk_10080E010);
  if (v138[32] == 1)
  {
    CGFloat v19 = CGRectZero.origin.x;
    CGFloat v20 = CGRectZero.origin.y;
    CGFloat v21 = CGRectZero.size.width;
    CGFloat v22 = CGRectZero.size.height;
  }
  LODWORD(v114) = a15;
  uint64_t v113 = a14;
  id v112 = a13;
  LODWORD(v111) = a12;
  v141.origin.CGFloat x = v19;
  v141.origin.CGFloat y = v20;
  v141.size.CGFloat width = v21;
  v141.size.CGFloat height = v22;
  uint64_t v76 = NSStringFromCGRect(v141);
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v79 = v78;

  sub_10002C4EC(v115, (uint64_t)v137, (uint64_t *)&unk_10080E010);
  CGFloat v80 = v119;
  CGFloat v81 = v118;
  CGFloat v82 = v117;
  CGFloat v83 = v116;
  if (v137[32] == 1)
  {
    CGFloat v80 = CGRectZero.origin.x;
    CGFloat v81 = CGRectZero.origin.y;
    CGFloat v82 = CGRectZero.size.width;
    CGFloat v83 = CGRectZero.size.height;
  }
  unint64_t v84 = NSStringFromCGRect(*(CGRect *)&v80);
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v87 = v86;

  sub_10001457C(v131, (uint64_t *)&unk_1007FC470);
  sub_10001457C(v132, (uint64_t *)&unk_100800A60);
  uint64_t v88 = (uint64_t)v110;
  uint64_t v89 = v122;
  *id v110 = v121;
  *(void *)(v88 + 8) = v89;
  id v90 = (int *)v120;
  sub_10002C4EC(v130, v88 + *(int *)(v120 + 20), (uint64_t *)&unk_1007FC470);
  uint64_t v91 = (void *)(v88 + v90[6]);
  uint64_t v92 = v125;
  *uint64_t v91 = v124;
  v91[1] = v92;
  uint64_t v93 = v88 + v90[7];
  *(void *)uint64_t v93 = a9;
  *(unsigned char *)(v93 + 8) = a10 & 1;
  uint64_t v94 = v88 + v90[8];
  *(void *)uint64_t v94 = a11;
  *(unsigned char *)(v94 + 8) = v111 & 1;
  uint64_t v95 = v88 + v90[9];
  uint64_t v96 = v113;
  *(void *)uint64_t v95 = v112;
  *(void *)(v95 + 8) = v96;
  *(unsigned char *)(v95 + 16) = v114 & 1;
  uint64_t v97 = (uint64_t *)(v88 + v90[10]);
  uint64_t v98 = v127;
  *uint64_t v97 = v128;
  v97[1] = v98;
  double v99 = (uint64_t *)(v88 + v90[11]);
  uint64_t *v99 = v77;
  v99[1] = v79;
  double v100 = (uint64_t *)(v88 + v90[12]);
  *double v100 = v85;
  v100[1] = v87;
  uint64_t v101 = v126;
  sub_10011D460(v88, v126, _s10VideoAssetC9VideoDataVMa);
  swift_storeEnumTagMultiPayload();
  sub_100010218((uint64_t *)&unk_10080F2D0);
  uint64_t v102 = swift_allocObject();
  uint64_t v103 = v102 + *(void *)(*(void *)v102 + 104);
  uint64_t v104 = sub_100010218(&qword_1007F9E10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v103, 1, 1, v104);
  *(_OWORD *)(v102 + *(void *)(*(void *)v102 + 112)) = xmmword_1006D6A80;
  sub_10002C4EC(v101, v102 + *(void *)(*(void *)v102 + 120), (uint64_t *)&unk_10080F2A0);
  id v105 = v129;
  *(void *)&v129[OBJC_IVAR____TtCC7Journal10Journaling10VideoAsset_metadata] = v102;

  swift_release();
  return v105;
}

uint64_t sub_10011D460(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10011D4C8()
{
  unint64_t result = qword_1007FEC88;
  if (!qword_1007FEC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FEC88);
  }
  return result;
}

uint64_t sub_10011D51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10VideoAssetC9VideoDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011D580(uint64_t a1)
{
  uint64_t v2 = _s10VideoAssetC9VideoDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *_s10VideoAssetC9VideoDataV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011D6A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10VideoAssetC9VideoDataV10CodingKeysOMa()
{
  return &_s10VideoAssetC9VideoDataV10CodingKeysON;
}

unint64_t sub_10011D6E4()
{
  unint64_t result = qword_1007FEC98;
  if (!qword_1007FEC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FEC98);
  }
  return result;
}

unint64_t sub_10011D73C()
{
  unint64_t result = qword_1007FECA0;
  if (!qword_1007FECA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FECA0);
  }
  return result;
}

unint64_t sub_10011D794()
{
  unint64_t result = qword_1007FECA8;
  if (!qword_1007FECA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FECA8);
  }
  return result;
}

uint64_t sub_10011D7E8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FECB0);
  sub_100026A54(v0, (uint64_t)qword_1007FECB0);
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();

  return swift_bridgeObjectRelease();
}

id AssetMetadataDownloadOperation.__allocating_init(recordId:database:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[qword_1007FECC8] = a1;
  *(void *)&v7[qword_1007FECD0] = a2;
  *(void *)&v7[qword_1007FECD8] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return [super init];
}

id AssetMetadataDownloadOperation.init(recordId:database:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[qword_1007FECC8] = a1;
  *(void *)&v3[qword_1007FECD0] = a2;
  *(void *)&v3[qword_1007FECD8] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for AssetMetadataDownloadOperation();
  return [super init];
}

uint64_t type metadata accessor for AssetMetadataDownloadOperation()
{
  uint64_t result = qword_1007FED28;
  if (!qword_1007FED28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AssetMetadataDownloadOperation.main@Sendable ()()
{
  v1[4] = v0;
  sub_100010218((uint64_t *)&unk_100800A60);
  v1[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for URL();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_10011DB04, 0, 0);
}

uint64_t sub_10011DB04()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v1 + qword_1007FECD8);
  uint64_t v3 = swift_task_alloc();
  v0[10] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  unint64_t v5 = sub_10011E62C();
  void *v4 = v0;
  v4[1] = sub_10011DC0C;
  return CKDatabase.configuredWith<A>(configuration:group:body:)(v0 + 2, v2, 0, &unk_1007FECF0, v3, v5);
}

uint64_t sub_10011DC0C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10011E218;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10011DD28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011DD28()
{
  uint64_t v32 = v0;
  id v1 = (id)v0[2];
  if (!CKRecord.subscript.getter()) {
    goto LABEL_10;
  }
  self;
  uint64_t v2 = (void *)swift_dynamicCastObjCClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
LABEL_10:
    if (qword_1007F69F8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100026A54(v19, (uint64_t)qword_1007FECB0);
    id v1 = v1;
    CGFloat v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      CGFloat v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)CGFloat v22 = 136315138;
      id v23 = [v1 debugDescription];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      v0[3] = sub_10011EA98(v24, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "error getting DataConfig.JournalEntryAssetFileAttachment.file :%s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_20:

LABEL_23:
      uint64_t v11 = 0;
      uint64_t v13 = 0;
      id v1 = 0;
      goto LABEL_24;
    }

LABEL_22:
    goto LABEL_23;
  }
  id v3 = [v2 fileURL];
  if (!v3)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[7] + 56))(v0[5], 1, 1, v0[6]);
    goto LABEL_16;
  }
  uint64_t v4 = v3;
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  objc_super v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v9(v8, v5, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
  {
LABEL_16:
    sub_100052EAC(v0[5]);
    if (qword_1007F69F8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100026A54(v27, (uint64_t)qword_1007FECB0);
    CGFloat v20 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v28, "ckAsset.fileURL is nil", v29, 2u);
      swift_slowDealloc();
      swift_unknownObjectRelease();
      goto LABEL_20;
    }
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  uint64_t v10 = v0[12];
  v9(v0[9], v0[5], v0[6]);
  uint64_t v11 = Data.init(contentsOf:options:)();
  uint64_t v13 = v12;
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[6];
  uint64_t v16 = v0[7];
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);

    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  swift_unknownObjectRelease();
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, id))v0[1];
  return v30(v11, v13, v1);
}

uint64_t sub_10011E218()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011E2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return _swift_task_switch(sub_10011E2C4, 0, 0);
}

uint64_t sub_10011E2C4()
{
  id v1 = (void *)v0[17];
  uint64_t v2 = *(void *)(v0[18] + qword_1007FECC8);
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10011E3D0;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001998C8;
  v0[13] = &unk_10079AD58;
  v0[14] = v3;
  [v1 fetchRecordWithID:v2 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10011E3D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_10011E500;
  }
  else {
    uint64_t v2 = sub_10011E4E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011E4E0()
{
  **(void **)(v0 + 128) = *(void *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011E500()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011E56C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002C194;
  v7[17] = a2;
  v7[18] = v6;
  v7[16] = a1;
  return _swift_task_switch(sub_10011E2C4, 0, 0);
}

unint64_t sub_10011E62C()
{
  unint64_t result = qword_1007FECF8;
  if (!qword_1007FECF8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1007FECF8);
  }
  return result;
}

id AssetMetadataDownloadOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void AssetMetadataDownloadOperation.init()()
{
}

void sub_10011E6D0()
{
}

void sub_10011E700()
{
  id v1 = *(void **)(v0 + qword_1007FECD8);
}

id AssetMetadataDownloadOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssetMetadataDownloadOperation();
  [super dealloc];
}

void sub_10011E788(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + qword_1007FECD8);
}

uint64_t sub_10011E7E4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *objc_super v2 = v1;
  v2[1] = sub_10011E874;
  return AssetMetadataDownloadOperation.main@Sendable ()();
}

uint64_t sub_10011E874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  swift_task_dealloc();
  if (!v3)
  {
    uint64_t v10 = *(void **)(v8 + 16);
    void *v10 = a1;
    v10[1] = a2;
    v10[2] = a3;
  }
  uint64_t v11 = *(uint64_t (**)(void))(v9 + 8);
  return v11();
}

uint64_t sub_10011E998()
{
  return swift_slowAlloc();
}

uint64_t sub_10011E9A0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10011E9DC()
{
  return swift_slowDealloc();
}

unsigned char **sub_10011E9E8(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  unsigned char *v4 = a4;
  *unint64_t result = v4 + 1;
  return result;
}

uint64_t sub_10011E9F8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10011EA20(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_10011EA98(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_10011EA98(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10011EBC0(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001B648((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001B648((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_10011EB6C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10011EBB8()
{
  return type metadata accessor for AssetMetadataDownloadOperation();
}

uint64_t sub_10011EBC0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10011ED7C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10011ED7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10011EE14(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10011EF8C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10011EF8C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10011EE14(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1005B33C4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10011EF8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010218(&qword_1007FA338);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10011F0DC()
{
  type metadata accessor for UniformDateBins(319);
  if (v0 <= 0x3F)
  {
    sub_1001204C0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_10011F1B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CalendarBinningUnit(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100010218(&qword_1007FD190);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Calendar.Component();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(v7 + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      uint64_t v16 = *(int *)(v7 + 24);
      uint64_t v17 = (char *)a1 + v16;
      id v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v20 = type metadata accessor for UniformDateBins(0);
    *(uint64_t *)((char *)a1 + *(int *)(v20 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 20));
    *(uint64_t *)((char *)a1 + *(int *)(v20 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 24));
    uint64_t v21 = *(int *)(a3 + 28);
    CGFloat v22 = (char *)a1 + v21;
    id v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for Date();
    unint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    uint64_t v26 = sub_100010218(&qword_1007FC8E0);
    v25(&v22[*(int *)(v26 + 36)], &v23[*(int *)(v26 + 36)], v24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10011F474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalendarBinningUnit(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    uint64_t v6 = a1 + *(int *)(v4 + 20);
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = a1 + *(int *)(v4 + 24);
    uint64_t v9 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = a1 + *(int *)(a2 + 28);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  uint64_t v13 = sub_100010218(&qword_1007FC8E0);
  v12(v10 + *(int *)(v13 + 36), v11);

  return swift_bridgeObjectRelease();
}

char *sub_10011F624(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = *(int *)(v6 + 24);
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v18 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v18 + 20)] = *(void *)&a2[*(int *)(v18 + 20)];
  *(void *)&a1[*(int *)(v18 + 24)] = *(void *)&a2[*(int *)(v18 + 24)];
  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Date();
  id v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  uint64_t v24 = sub_100010218(&qword_1007FC8E0);
  v23(&v20[*(int *)(v24 + 36)], &v21[*(int *)(v24 + 36)], v22);
  *(void *)&a1[*(int *)(a3 + 32)] = *(void *)&a2[*(int *)(a3 + 32)];
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10011F898(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v29 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(a1, a2, v29);
      uint64_t v30 = *(int *)(v6 + 20);
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      uint64_t v33 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
      uint64_t v34 = *(int *)(v6 + 24);
      uint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      uint64_t v37 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
      goto LABEL_7;
    }
    sub_10011FC14((uint64_t)a1);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v20 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  uint64_t v12 = *(int *)(v6 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = *(int *)(v6 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v21 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v21 + 20)] = *(void *)&a2[*(int *)(v21 + 20)];
  *(void *)&a1[*(int *)(v21 + 24)] = *(void *)&a2[*(int *)(v21 + 24)];
  uint64_t v22 = *(int *)(a3 + 28);
  id v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24);
  v26(v23, v24, v25);
  uint64_t v27 = sub_100010218(&qword_1007FC8E0);
  v26(&v23[*(int *)(v27 + 36)], &v24[*(int *)(v27 + 36)], v25);
  *(void *)&a1[*(int *)(a3 + 32)] = *(void *)&a2[*(int *)(a3 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10011FC14(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CalendarBinningUnit(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10011FC70(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    uint64_t v14 = *(int *)(v6 + 24);
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v18 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v18 + 20)] = *(void *)&a2[*(int *)(v18 + 20)];
  *(void *)&a1[*(int *)(v18 + 24)] = *(void *)&a2[*(int *)(v18 + 24)];
  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Date();
  id v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
  v23(v20, v21, v22);
  uint64_t v24 = sub_100010218(&qword_1007FC8E0);
  v23(&v20[*(int *)(v24 + 36)], &v21[*(int *)(v24 + 36)], v22);
  *(void *)&a1[*(int *)(a3 + 32)] = *(void *)&a2[*(int *)(a3 + 32)];
  return a1;
}

char *sub_10011FEE0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v29 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(a1, a2, v29);
      uint64_t v30 = *(int *)(v6 + 20);
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      uint64_t v33 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 40))(v31, v32, v33);
      uint64_t v34 = *(int *)(v6 + 24);
      uint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      uint64_t v37 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
      goto LABEL_7;
    }
    sub_10011FC14((uint64_t)a1);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v20 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  uint64_t v12 = *(int *)(v6 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = *(int *)(v6 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v21 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v21 + 20)] = *(void *)&a2[*(int *)(v21 + 20)];
  *(void *)&a1[*(int *)(v21 + 24)] = *(void *)&a2[*(int *)(v21 + 24)];
  uint64_t v22 = *(int *)(a3 + 28);
  id v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  uint64_t v27 = sub_100010218(&qword_1007FC8E0);
  v26(&v23[*(int *)(v27 + 36)], &v24[*(int *)(v27 + 36)], v25);
  *(void *)&a1[*(int *)(a3 + 32)] = *(void *)&a2[*(int *)(a3 + 32)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100120254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100120268);
}

uint64_t sub_100120268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UniformDateBins(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100010218(&qword_1007FC8E0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100120380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100120394);
}

uint64_t sub_100120394(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UniformDateBins(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_100010218(&qword_1007FC8E0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DateBinDictionary()
{
  return sub_100073C20();
}

void sub_1001204C0()
{
  if (!qword_1007FEEA0)
  {
    type metadata accessor for Date();
    sub_100120524();
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1007FEEA0);
    }
  }
}

unint64_t sub_100120524()
{
  unint64_t result = qword_1007FD120;
  if (!qword_1007FD120)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FD120);
  }
  return result;
}

uint64_t sub_10012057C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100120598(uint64_t a1, uint64_t (*a2)(void, void *, void, void *))
{
  return a2(*(void *)(v2 + *(int *)(a1 + 32)), &type metadata for Int, *(void *)(a1 + 16), &protocol witness table for Int);
}

uint64_t sub_1001205DC()
{
  return Dictionary.index(after:)();
}

uint64_t sub_10012061C(uint64_t a1)
{
  Dictionary.subscript.getter();
  return sub_10066AC8C(v3, a1);
}

uint64_t sub_100120680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001206B0(a1, (uint64_t (*)(void, void *, void, void *))&Dictionary.startIndex.getter, a2);
}

uint64_t sub_100120698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001206B0(a1, (uint64_t (*)(void, void *, void, void *))&Dictionary.endIndex.getter, a2);
}

uint64_t sub_1001206B0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void *, void, void *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100120598(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = v6 & 1;
  return result;
}

void (*sub_1001206E4(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)malloc(0x40uLL);
  *a1 = v5;
  sub_100014440(&qword_1007FC8E0);
  uint64_t v6 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[4] = TupleTypeMetadata2;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  v5[5] = v8;
  uint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v5[6] = (uint64_t)v9;
  uint64_t v10 = sub_1001208A8(v5);
  uint64_t v12 = v11;
  v5[7] = (uint64_t)v10;
  sub_100121250(v13, (uint64_t)v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12, v6);
  return sub_100120830;
}

void sub_100120830(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);

  free((void *)v3);
}

void (*sub_1001208A8(uint64_t *a1))(void *a1)
{
  sub_100014440(&qword_1007FC8E0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v3 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v3;
  uint64_t v4 = malloc(*(void *)(v3 + 64));
  a1[2] = (uint64_t)v4;
  sub_10012061C((uint64_t)v4);
  return sub_1001209AC;
}

void sub_1001209AC(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

void sub_100120A08(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

uint64_t sub_100120A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100120FE0(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for Range, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t sub_100120A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100120FE0(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for ClosedRange, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.<= infix(_:_:));
}

uint64_t sub_100120AA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1001205DC();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_100120AE8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = sub_1001205DC();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t result = sub_1000733B8(v2, v3, v4);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9 & 1;
  return result;
}

uint64_t sub_100120B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = sub_100120598(a1, (uint64_t (*)(void, void *, void, void *))&Dictionary.startIndex.getter);
  uint64_t v8 = v7;
  char v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  uint64_t v12 = a2 + *(int *)(result + 36);
  *(void *)uint64_t v12 = v6;
  *(void *)(v12 + 8) = v8;
  *(unsigned char *)(v12 + 16) = v10 & 1;
  return result;
}

uint64_t sub_100120C80(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_100120CD4(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = j___ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_100120D64()
{
  return swift_getWitnessTable();
}

uint64_t sub_100120D80()
{
  return swift_getWitnessTable();
}

uint64_t sub_100120D9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100120DB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100120DD4(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_100120FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  id v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_100121250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FC8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001212C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FEEA8);
  sub_100026A54(v0, (uint64_t)qword_1007FEEA8);
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();

  return swift_bridgeObjectRelease();
}

id sub_1001213BC(void *a1, char a2, char a3, char a4, void *a5)
{
  if (!a1)
  {
LABEL_16:
    if ((a2 & 1) != 0
      && (id v30 = [self workStyleAttributes]) != 0)
    {
      id v20 = v30;
      if (qword_1007F6A00 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100026A54(v31, (uint64_t)qword_1007FEEA8);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v32, v33)) {
        goto LABEL_30;
      }
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      uint64_t v35 = "[POIClustering] [RENDERING] Work";
    }
    else
    {
      if ((a3 & 1) != 0
        || (a4 & 1) == 0
        || (id v36 = [objc_allocWithZone((Class)GEOPlace) initWithLatitude:4 longitude:0.0 placeType:0.0], v20 = objc_msgSend(self, "styleAttributesForPlace:", v36), v36, !v20))
      {
        if (qword_1007F6A00 != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        sub_100026A54(v53, (uint64_t)qword_1007FEEA8);
        id v54 = a1;
        Swift::String v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = 7104878;
          uint64_t v58 = swift_slowAlloc();
          v72[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 136315394;
          if (a1 && (id v59 = [v54 name]) != 0)
          {
            uint64_t v60 = v59;
            uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v63 = v62;
          }
          else
          {
            unint64_t v63 = 0xE300000000000000;
            uint64_t v61 = 7104878;
          }
          uint64_t v73 = sub_10011EA98(v61, v63, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v58 + 12) = 2080;
          if (a1 && (id v64 = [v54 pointOfInterestCategory]) != 0)
          {
            id v65 = v64;
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v67 = v66;
          }
          else
          {
            unint64_t v67 = 0xE300000000000000;
          }
          uint64_t v73 = sub_10011EA98(v57, v67, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "[POIClustering] [RENDERING] Fallback, mkMapItem.name=%s, mkMapItem.poiCategory=%s", (uint8_t *)v58, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        return 0;
      }
      if (qword_1007F6A00 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100026A54(v37, (uint64_t)qword_1007FEEA8);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v32, v33)) {
        goto LABEL_30;
      }
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      uint64_t v35 = "[POIClustering] [RENDERING] City";
    }
    _os_log_impl((void *)&_mh_execute_header, v32, v33, v35, v34, 2u);
    swift_slowDealloc();
LABEL_30:

    goto LABEL_31;
  }
  id v10 = a1;
  id v11 = [v10 pointOfInterestCategory];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_15;
    }
  }
  id v19 = [v10 _styleAttributes];
  if (!v19)
  {
LABEL_15:

    goto LABEL_16;
  }
  id v20 = v19;
  if (qword_1007F6A00 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100026A54(v21, (uint64_t)qword_1007FEEA8);
  id v22 = v10;
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134218242;
    id v26 = [v22 name];
    if (v26)
    {
      uint64_t v27 = v26;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;
    }
    else
    {
      uint64_t v29 = 0;
    }
    v72[1] = v29;
    sub_100010218(&qword_100803920);
    Optional<A>.hashValue.getter();

    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v25 + 12) = 2080;
    id v68 = [v22 pointOfInterestCategory];
    sub_100010218(&qword_1007FEEC0);
    uint64_t v69 = Optional.debugDescription.getter();
    unint64_t v71 = v70;

    v72[0] = sub_10011EA98(v69, v71, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[POIClustering] [RENDERING] POI mapItemName=%ld, mapItemPOICategory=%s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
LABEL_31:
  [a5 displayScale];
  double v39 = v38;
  id v40 = [objc_allocWithZone((Class)VKIconModifiers) init];
  objc_msgSend(v40, "setNightMode:", objc_msgSend(a5, "userInterfaceStyle") == (id)2);
  id result = [self iconManager];
  if (!result)
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v42 = result;
  float v43 = v39;
  id v44 = v20;
  NSString v45 = String._bridgeToObjectiveC()();
  *(float *)&double v46 = v43;
  id v47 = [v42 imageForStyleAttributes:v44 withStylesheetName:v45 contentScale:7 sizeGroup:v40 modifiers:v46];

  if (!v47)
  {

    return v47;
  }
  id v48 = v47;
  id result = [v48 fillColor];
  if (!result) {
    goto LABEL_56;
  }
  id v49 = result;
  id v47 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v49];

  id v50 = v48;
  id result = [v50 image];
  if (result)
  {
    id v51 = result;
    [v50 contentScale];
    [objc_allocWithZone((Class)UIImage) initWithCGImage:v51 scale:0 orientation:v52];

    return v47;
  }
LABEL_57:
  __break(1u);
  return result;
}

void *_s9IconStyleVwCP(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void _s9IconStyleVwxx(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
}

uint64_t _s9IconStyleVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s9IconStyleVwta(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t _s9IconStyleVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9IconStyleVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s9IconStyleVMa()
{
  return &_s9IconStyleVN;
}

uint64_t type metadata accessor for SuggestionSheetConstants()
{
  return self;
}

uint64_t sub_100121EC8@<X0>(uint64_t *a1@<X8>)
{
  sub_10012BBF0();
  EnvironmentValues.subscript.getter();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = sub_10012BC44((uint64_t)v4);
  *a1 = Strong;
  return result;
}

uint64_t sub_100121F28()
{
  return EnvironmentValues.subscript.setter();
}

id sub_100121F78()
{
  id v0 = [objc_allocWithZone((Class)UICalendarView) init];
  sub_100010218(&qword_1007FF290);
  UIViewRepresentableContext.coordinator.getter();
  [v0 setDelegate:v3];

  UIViewRepresentableContext.coordinator.getter();
  id v1 = [objc_allocWithZone((Class)UICalendarSelectionSingleDate) initWithDelegate:v3];

  [v0 setSelectionBehavior:v1];
  [v0 setPreservesSuperviewLayoutMargins:0];
  [v0 setDirectionalLayoutMargins:20.0, 16.0, 6.0, 16.0];
  return v0;
}

void sub_10012207C(void *a1)
{
  unint64_t v67 = a1;
  uint64_t v66 = type metadata accessor for DateComponents();
  uint64_t v61 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  Swift::String v55 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100010218((uint64_t *)&unk_100815670);
  __chkstk_darwin(v58);
  uint64_t v68 = (uint64_t)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FF070);
  __chkstk_darwin(v4 - 8);
  uint64_t v57 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v56 = (uint64_t)&v55 - v7;
  __chkstk_darwin(v8);
  uint64_t v59 = (uint64_t)&v55 - v9;
  __chkstk_darwin(v10);
  uint64_t v60 = (uint64_t)&v55 - v11;
  uint64_t v12 = type metadata accessor for TimeZone();
  id v64 = *(void (***)(void, void))(v12 - 8);
  id v65 = (void *)v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Calendar();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v63 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Locale();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for InsightsCalendarView.Representation(0);
  __chkstk_darwin(v22);
  os_log_type_t v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010218(&qword_1007FF290);
  UIViewRepresentableContext.coordinator.getter();
  uint64_t v25 = v69;
  sub_10012B95C(v1, (uint64_t)v24, type metadata accessor for InsightsCalendarView.Representation);
  uint64_t v26 = (uint64_t)v25
      + OBJC_IVAR____TtCVV7Journal20InsightsCalendarViewP33_DB82E41FEC15FAA6F37A37FAA16D9E2114Representation11Coordinator_parent;
  swift_beginAccess();
  sub_10012BC98((uint64_t)v24, v26);
  swift_endAccess();

  sub_100666C0C((uint64_t)v21);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  uint64_t v28 = v18;
  uint64_t v29 = v67;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
  [v29 setLocale:isa];

  sub_100666410((uint64_t)v17);
  Class v30 = Calendar._bridgeToObjectiveC()().super.isa;
  uint64_t v31 = v17;
  uint64_t v32 = v66;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v31, v63);
  [v29 setCalendar:v30];

  sub_100666C3C((uint64_t)v14);
  Class v33 = TimeZone._bridgeToObjectiveC()().super.isa;
  ((void (**)(char *, void *))v64)[1](v14, v65);
  [v29 setTimeZone:v33];

  uint64_t v34 = sub_1004BA0F8();
  uint64_t v35 = (objc_class *)[v29 selectionBehavior];
  if (v35)
  {
    Class v36 = v35;
    self;
    uint64_t v37 = (void (**)(void, void))swift_dynamicCastObjCClass();
    if (!v37)
    {
LABEL_17:

      goto LABEL_18;
    }
    id v64 = v37;
    id v65 = v34;
    id v38 = [v37 selectedDate];
    if (v38)
    {
      double v39 = v38;
      uint64_t v40 = v60;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = 0;
      uint64_t v42 = v68;
    }
    else
    {
      uint64_t v41 = 1;
      uint64_t v42 = v68;
      uint64_t v40 = v60;
    }
    uint64_t v43 = v59;
    uint64_t v44 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v40, v41, 1, v32);
    uint64_t v63 = sub_100010218(&qword_1007FF148);
    Binding.wrappedValue.getter();
    uint64_t v45 = v42 + *(int *)(v58 + 48);
    sub_10001B220(v40, v68, (uint64_t *)&unk_1007FF070);
    uint64_t v46 = v68;
    sub_10001B220(v43, v45, (uint64_t *)&unk_1007FF070);
    id v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    if (v47(v46, 1, v32) == 1)
    {
      sub_10001457C(v43, (uint64_t *)&unk_1007FF070);
      sub_10001457C(v40, (uint64_t *)&unk_1007FF070);
      if (v47(v45, 1, v32) == 1)
      {
        sub_10001457C(v68, (uint64_t *)&unk_1007FF070);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v48 = v56;
      sub_10001B220(v46, v56, (uint64_t *)&unk_1007FF070);
      if (v47(v45, 1, v32) != 1)
      {
        uint64_t v49 = v61;
        id v50 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v55, v45, v32);
        sub_10012BB70(&qword_1007FF298, (void (*)(uint64_t))&type metadata accessor for DateComponents);
        LODWORD(v62) = dispatch thunk of static Equatable.== infix(_:_:)();
        id v51 = *(void (**)(char *, uint64_t))(v49 + 8);
        v51(v50, v32);
        sub_10001457C(v59, (uint64_t *)&unk_1007FF070);
        sub_10001457C(v60, (uint64_t *)&unk_1007FF070);
        v51((char *)v48, v32);
        uint64_t v29 = v67;
        sub_10001457C(v68, (uint64_t *)&unk_1007FF070);
        if (v62) {
          goto LABEL_17;
        }
LABEL_13:
        float v52 = v57;
        Binding.wrappedValue.getter();
        if (v47((uint64_t)v52, 1, v32) == 1)
        {
          Class v53 = 0;
        }
        else
        {
          Class v53 = DateComponents._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v61 + 8))(v52, v32);
        }
        [v64 setSelectedDate:v53 animated:1];

        Class v36 = v53;
        goto LABEL_17;
      }
      sub_10001457C(v59, (uint64_t *)&unk_1007FF070);
      sub_10001457C(v60, (uint64_t *)&unk_1007FF070);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v48, v32);
    }
    sub_10001457C(v68, (uint64_t *)&unk_100815670);
    goto LABEL_13;
  }
LABEL_18:
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v29 reloadDecorationsForDateComponents:v54 animated:0];
}

id sub_100122E24()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InsightsCalendarView.Representation.Coordinator(0);
  [super dealloc];
}

uint64_t sub_100122EB8()
{
  return type metadata accessor for InsightsCalendarView.Representation.Coordinator(0);
}

uint64_t type metadata accessor for InsightsCalendarView.Representation.Coordinator(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FF058);
}

void sub_100122EE0()
{
  type metadata accessor for InsightsCalendarView.Representation(319);
  if (v0 <= 0x3F)
  {
    sub_10012635C(319, &qword_1007FF068, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for InsightsCalendarView.Representation(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FF1C0);
}

uint64_t *sub_100122FE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v10 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = type metadata accessor for CalendarBinningUnit(0);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v78 = *(unsigned int (**)(void, void, void))(v7 + 48);
    uint64_t v72 = v7;
    if (v78(a2, 1, v6))
    {
      uint64_t v8 = sub_100010218(&qword_1007FD190);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Calendar.Component();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = *(int *)(v6 + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      uint64_t v16 = *(int *)(v6 + 24);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    uint64_t v20 = type metadata accessor for UniformDateBins(0);
    *(uint64_t *)((char *)a1 + *(int *)(v20 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 20));
    *(uint64_t *)((char *)a1 + *(int *)(v20 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 24));
    uint64_t v21 = sub_100010218((uint64_t *)&unk_1007FF080);
    uint64_t v22 = *(int *)(v21 + 28);
    uint64_t v23 = (char *)a1 + v22;
    os_log_type_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for Date();
    uint64_t v26 = *(void (**)(void, void, void))(*(void *)(v25 - 8) + 16);
    v26(v23, v24, v25);
    uint64_t v74 = sub_100010218(&qword_1007FC8E0);
    v26(&v23[*(int *)(v74 + 36)], &v24[*(int *)(v74 + 36)], v25);
    uint64_t v77 = v21;
    *(uint64_t *)((char *)a1 + *(int *)(v21 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(v21 + 32));
    uint64_t v27 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
    uint64_t v28 = *(int *)(v27 + 20);
    uint64_t v29 = (char *)a1 + v28;
    Class v30 = (char *)a2 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v75 = (int *)v27;
    uint64_t v76 = a1;
    uint64_t v31 = *(int *)(v27 + 24);
    uint64_t v32 = (char *)a1 + v31;
    Class v33 = (char *)a2 + v31;
    swift_bridgeObjectRetain();
    if (v78(v33, 1, v6))
    {
      uint64_t v34 = sub_100010218(&qword_1007FD190);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v35 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v32, v33, v35);
      v26(&v32[*(int *)(v6 + 20)], &v33[*(int *)(v6 + 20)], v25);
      uint64_t v36 = *(int *)(v6 + 24);
      uint64_t v37 = &v32[v36];
      id v38 = &v33[v36];
      uint64_t v39 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v32, 0, 1, v6);
    }
    uint64_t v40 = v6;
    *(void *)&v32[*(int *)(v20 + 20)] = *(void *)&v33[*(int *)(v20 + 20)];
    *(void *)&v32[*(int *)(v20 + 24)] = *(void *)&v33[*(int *)(v20 + 24)];
    uint64_t v41 = *(int *)(v77 + 28);
    uint64_t v42 = &v32[v41];
    uint64_t v43 = &v33[v41];
    v26(&v32[v41], &v33[v41], v25);
    v26(&v42[*(int *)(v74 + 36)], &v43[*(int *)(v74 + 36)], v25);
    *(void *)&v32[*(int *)(v77 + 32)] = *(void *)&v33[*(int *)(v77 + 32)];
    uint64_t v44 = v75[7];
    uint64_t v45 = (char *)v76 + v44;
    uint64_t v46 = (char *)a2 + v44;
    swift_bridgeObjectRetain();
    id v47 = v26;
    if (v78(v46, 1, v40))
    {
      uint64_t v48 = sub_100010218(&qword_1007FD190);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      uint64_t v49 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v45, v46, v49);
      v26(&v45[*(int *)(v40 + 20)], &v46[*(int *)(v40 + 20)], v25);
      uint64_t v50 = *(int *)(v40 + 24);
      id v51 = &v45[v50];
      float v52 = &v46[v50];
      uint64_t v53 = type metadata accessor for Calendar();
      Class v54 = v52;
      id v47 = v26;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v54, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v45, 0, 1, v40);
    }
    *(void *)&v45[*(int *)(v20 + 20)] = *(void *)&v46[*(int *)(v20 + 20)];
    *(void *)&v45[*(int *)(v20 + 24)] = *(void *)&v46[*(int *)(v20 + 24)];
    uint64_t v55 = *(int *)(v77 + 28);
    uint64_t v56 = &v45[v55];
    uint64_t v57 = &v46[v55];
    v47(&v45[v55], &v46[v55], v25);
    v47(&v56[*(int *)(v74 + 36)], &v57[*(int *)(v74 + 36)], v25);
    *(void *)&v45[*(int *)(v77 + 32)] = *(void *)&v46[*(int *)(v77 + 32)];
    uint64_t v10 = v76;
    uint64_t v58 = v75[8];
    uint64_t v59 = (char *)v76 + v58;
    uint64_t v60 = (char *)a2 + v58;
    v59[8] = v60[8];
    *(void *)uint64_t v59 = *(void *)v60;
    uint64_t v61 = v75[9];
    uint64_t v62 = (char *)v76 + v61;
    uint64_t v63 = (char *)a2 + v61;
    swift_bridgeObjectRetain();
    v47(v62, v63, v25);
    uint64_t v64 = *(int *)(a3 + 20);
    id v65 = (char *)v76 + v64;
    uint64_t v66 = (char *)a2 + v64;
    uint64_t v67 = type metadata accessor for DateComponents();
    uint64_t v68 = *(void *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
    {
      uint64_t v69 = sub_100010218((uint64_t *)&unk_1007FF070);
      memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v66, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
    }
    uint64_t v70 = sub_100010218(&qword_1007FF090);
    *(void *)&v65[*(int *)(v70 + 28)] = *(void *)&v66[*(int *)(v70 + 28)];
  }
  swift_retain();
  return v10;
}

uint64_t sub_100123784(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48);
  if (!v4(a1, 1, v3))
  {
    uint64_t v5 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    uint64_t v6 = a1 + *(int *)(v3 + 20);
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = a1 + *(int *)(v3 + 24);
    uint64_t v9 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v11 = a1 + *(int *)(v10 + 28);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  uint64_t v14 = sub_100010218(&qword_1007FC8E0);
  v13(v11 + *(int *)(v14 + 36), v12);
  swift_bridgeObjectRelease();
  uint64_t v15 = (int *)type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v16 = a1 + v15[6];
  Class v30 = v4;
  if (!v4(v16, 1, v3))
  {
    uint64_t v17 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    v13(v16 + *(int *)(v3 + 20), v12);
    uint64_t v18 = v16 + *(int *)(v3 + 24);
    uint64_t v19 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  }
  uint64_t v20 = v16 + *(int *)(v10 + 28);
  v13(v20, v12);
  v13(v20 + *(int *)(v14 + 36), v12);
  swift_bridgeObjectRelease();
  uint64_t v21 = a1 + v15[7];
  if (!v30(v21, 1, v3))
  {
    uint64_t v22 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
    v13(v21 + *(int *)(v3 + 20), v12);
    uint64_t v23 = v21 + *(int *)(v3 + 24);
    uint64_t v24 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  }
  uint64_t v25 = v21 + *(int *)(v10 + 28);
  v13(v25, v12);
  v13(v25 + *(int *)(v14 + 36), v12);
  swift_bridgeObjectRelease();
  v13(a1 + v15[9], v12);
  uint64_t v26 = a1 + *(int *)(a2 + 20);
  uint64_t v27 = type metadata accessor for DateComponents();
  uint64_t v28 = *(void *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  sub_100010218(&qword_1007FF090);

  return swift_release();
}

char *sub_100123C18(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v74(a2, 1, v5))
  {
    uint64_t v7 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = *(int *)(v5 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = *(int *)(v5 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t v17 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v17 + 20)] = *(void *)&a2[*(int *)(v17 + 20)];
  uint64_t v72 = v17;
  *(void *)&a1[*(int *)(v17 + 24)] = *(void *)&a2[*(int *)(v17 + 24)];
  uint64_t v18 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v19 = *(int *)(v18 + 28);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  uint64_t v70 = sub_100010218(&qword_1007FC8E0);
  v23(&v20[*(int *)(v70 + 36)], &v21[*(int *)(v70 + 36)], v22);
  uint64_t v73 = v18;
  *(void *)&a1[*(int *)(v18 + 32)] = *(void *)&a2[*(int *)(v18 + 32)];
  uint64_t v24 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  unint64_t v71 = (int *)v24;
  uint64_t v28 = *(int *)(v24 + 24);
  uint64_t v69 = a1;
  uint64_t v29 = &a1[v28];
  Class v30 = &a2[v28];
  swift_bridgeObjectRetain();
  if (v74(v30, 1, v5))
  {
    uint64_t v31 = sub_100010218(&qword_1007FD190);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v29, v30, v32);
    v23(&v29[*(int *)(v5 + 20)], &v30[*(int *)(v5 + 20)], v22);
    uint64_t v33 = *(int *)(v5 + 24);
    uint64_t v34 = &v29[v33];
    uint64_t v35 = &v30[v33];
    uint64_t v36 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v29, 0, 1, v5);
  }
  *(void *)&v29[*(int *)(v72 + 20)] = *(void *)&v30[*(int *)(v72 + 20)];
  *(void *)&v29[*(int *)(v72 + 24)] = *(void *)&v30[*(int *)(v72 + 24)];
  uint64_t v37 = *(int *)(v73 + 28);
  id v38 = &v29[v37];
  uint64_t v39 = &v30[v37];
  v23(&v29[v37], &v30[v37], v22);
  v23(&v38[*(int *)(v70 + 36)], &v39[*(int *)(v70 + 36)], v22);
  *(void *)&v29[*(int *)(v73 + 32)] = *(void *)&v30[*(int *)(v73 + 32)];
  uint64_t v40 = v71[7];
  uint64_t v41 = v69;
  uint64_t v42 = &v69[v40];
  uint64_t v43 = &a2[v40];
  swift_bridgeObjectRetain();
  if (v74(v43, 1, v5))
  {
    uint64_t v44 = sub_100010218(&qword_1007FD190);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v45 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v42, v43, v45);
    v23(&v42[*(int *)(v5 + 20)], &v43[*(int *)(v5 + 20)], v22);
    uint64_t v46 = *(int *)(v5 + 24);
    id v47 = &v42[v46];
    uint64_t v48 = &v43[v46];
    uint64_t v49 = type metadata accessor for Calendar();
    uint64_t v50 = v48;
    uint64_t v41 = v69;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v50, v49);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v42, 0, 1, v5);
  }
  *(void *)&v42[*(int *)(v72 + 20)] = *(void *)&v43[*(int *)(v72 + 20)];
  *(void *)&v42[*(int *)(v72 + 24)] = *(void *)&v43[*(int *)(v72 + 24)];
  uint64_t v51 = *(int *)(v73 + 28);
  float v52 = &v42[v51];
  uint64_t v53 = &v43[v51];
  v23(&v42[v51], &v43[v51], v22);
  v23(&v52[*(int *)(v70 + 36)], &v53[*(int *)(v70 + 36)], v22);
  *(void *)&v42[*(int *)(v73 + 32)] = *(void *)&v43[*(int *)(v73 + 32)];
  uint64_t v54 = v71[8];
  uint64_t v55 = &v41[v54];
  uint64_t v56 = &a2[v54];
  v55[8] = v56[8];
  *(void *)uint64_t v55 = *(void *)v56;
  uint64_t v57 = v71[9];
  uint64_t v58 = &v41[v57];
  uint64_t v59 = &a2[v57];
  swift_bridgeObjectRetain();
  v23(v58, v59, v22);
  uint64_t v60 = *(int *)(a3 + 20);
  uint64_t v61 = &v41[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v63 = type metadata accessor for DateComponents();
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    uint64_t v65 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  uint64_t v66 = sub_100010218(&qword_1007FF090);
  *(void *)&v61[*(int *)(v66 + 28)] = *(void *)&v62[*(int *)(v66 + 28)];
  swift_retain();
  return v41;
}

char *sub_10012435C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v92 = *(void *)(v5 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  int v7 = v6(a1, 1, v5);
  double v99 = v6;
  int v8 = v6(a2, 1, v5);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(v5 + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      uint64_t v14 = *(int *)(v5 + 24);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_10012B9C4((uint64_t)a1, type metadata accessor for CalendarBinningUnit);
LABEL_6:
    uint64_t v18 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v72 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 24))(a1, a2, v72);
  uint64_t v73 = *(int *)(v5 + 20);
  uint64_t v74 = &a1[v73];
  uint64_t v75 = &a2[v73];
  uint64_t v76 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 24))(v74, v75, v76);
  uint64_t v77 = *(int *)(v5 + 24);
  uint64_t v78 = &a1[v77];
  uint64_t v79 = &a2[v77];
  uint64_t v80 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 24))(v78, v79, v80);
LABEL_7:
  uint64_t v19 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v19 + 20)] = *(void *)&a2[*(int *)(v19 + 20)];
  uint64_t v96 = v19;
  *(void *)&a1[*(int *)(v19 + 24)] = *(void *)&a2[*(int *)(v19 + 24)];
  uint64_t v20 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v21 = *(int *)(v20 + 28);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v91 = *(void *)(v24 - 8);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v91 + 24);
  v25(v22, v23, v24);
  uint64_t v94 = sub_100010218(&qword_1007FC8E0);
  double v100 = v25;
  v25(&v22[*(int *)(v94 + 36)], &v23[*(int *)(v94 + 36)], v24);
  uint64_t v98 = v20;
  *(void *)&a1[*(int *)(v20 + 32)] = *(void *)&a2[*(int *)(v20 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  char v30 = v29[8];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v30;
  uint64_t v95 = (int *)v26;
  uint64_t v31 = *(int *)(v26 + 24);
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  LODWORD(v2sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v99(&a1[v31], 1, v5);
  int v34 = v99(v33, 1, v5);
  uint64_t v97 = a2;
  if (v20)
  {
    if (!v34)
    {
      uint64_t v35 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v32, v33, v35);
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(&v32[*(int *)(v5 + 20)], &v33[*(int *)(v5 + 20)], v24);
      uint64_t v36 = *(int *)(v5 + 24);
      uint64_t v37 = &v32[v36];
      id v38 = &v33[v36];
      uint64_t v39 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v32, 0, 1, v5);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    sub_10012B9C4((uint64_t)v32, type metadata accessor for CalendarBinningUnit);
LABEL_12:
    uint64_t v40 = sub_100010218(&qword_1007FD190);
    memcpy(v32, v33, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v81 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 24))(v32, v33, v81);
  v25(&v32[*(int *)(v5 + 20)], &v33[*(int *)(v5 + 20)], v24);
  uint64_t v82 = *(int *)(v5 + 24);
  CGFloat v83 = &v32[v82];
  unint64_t v84 = &v33[v82];
  uint64_t v85 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 24))(v83, v84, v85);
LABEL_13:
  *(void *)&v32[*(int *)(v96 + 20)] = *(void *)&v33[*(int *)(v96 + 20)];
  *(void *)&v32[*(int *)(v96 + 24)] = *(void *)&v33[*(int *)(v96 + 24)];
  uint64_t v41 = *(int *)(v98 + 28);
  uint64_t v42 = &v32[v41];
  uint64_t v43 = &v33[v41];
  v25(&v32[v41], &v33[v41], v24);
  v25(&v42[*(int *)(v94 + 36)], &v43[*(int *)(v94 + 36)], v24);
  *(void *)&v32[*(int *)(v98 + 32)] = *(void *)&v33[*(int *)(v98 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = v95[7];
  uint64_t v45 = &a1[v44];
  uint64_t v46 = &v97[v44];
  LODWORD(v43) = v99(&a1[v44], 1, v5);
  int v47 = v99(v46, 1, v5);
  if (v43)
  {
    if (!v47)
    {
      uint64_t v48 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v45, v46, v48);
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(&v45[*(int *)(v5 + 20)], &v46[*(int *)(v5 + 20)], v24);
      uint64_t v49 = *(int *)(v5 + 24);
      uint64_t v50 = &v45[v49];
      uint64_t v51 = &v46[v49];
      uint64_t v52 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v45, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    sub_10012B9C4((uint64_t)v45, type metadata accessor for CalendarBinningUnit);
LABEL_18:
    uint64_t v53 = sub_100010218(&qword_1007FD190);
    memcpy(v45, v46, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v86 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 24))(v45, v46, v86);
  v25(&v45[*(int *)(v5 + 20)], &v46[*(int *)(v5 + 20)], v24);
  uint64_t v87 = *(int *)(v5 + 24);
  uint64_t v88 = &v45[v87];
  uint64_t v89 = &v46[v87];
  uint64_t v90 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 24))(v88, v89, v90);
LABEL_19:
  *(void *)&v45[*(int *)(v96 + 20)] = *(void *)&v46[*(int *)(v96 + 20)];
  *(void *)&v45[*(int *)(v96 + 24)] = *(void *)&v46[*(int *)(v96 + 24)];
  uint64_t v54 = *(int *)(v98 + 28);
  uint64_t v55 = &v45[v54];
  uint64_t v56 = &v46[v54];
  v100(&v45[v54], &v46[v54], v24);
  v100(&v55[*(int *)(v94 + 36)], &v56[*(int *)(v94 + 36)], v24);
  *(void *)&v45[*(int *)(v98 + 32)] = *(void *)&v46[*(int *)(v98 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v95[8];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &v97[v57];
  uint64_t v60 = *(void *)v59;
  v58[8] = v59[8];
  *(void *)uint64_t v58 = v60;
  v100(&a1[v95[9]], &v97[v95[9]], v24);
  uint64_t v61 = *(int *)(a3 + 20);
  uint64_t v62 = &a1[v61];
  uint64_t v63 = &v97[v61];
  uint64_t v64 = type metadata accessor for DateComponents();
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  int v67 = v66(v62, 1, v64);
  int v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v65 + 24))(v62, v63, v64);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v64);
    goto LABEL_24;
  }
  if (v68)
  {
LABEL_24:
    uint64_t v69 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v62, v63, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v62, v63, v64);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
LABEL_25:
  uint64_t v70 = sub_100010218(&qword_1007FF090);
  *(void *)&v62[*(int *)(v70 + 28)] = *(void *)&v63[*(int *)(v70 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

char *sub_100124E38(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v71(a2, 1, v5))
  {
    uint64_t v7 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    uint64_t v9 = *(int *)(v5 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    uint64_t v13 = *(int *)(v5 + 24);
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  uint64_t v17 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v17 + 20)] = *(void *)&a2[*(int *)(v17 + 20)];
  *(void *)&a1[*(int *)(v17 + 24)] = *(void *)&a2[*(int *)(v17 + 24)];
  uint64_t v18 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v19 = *(int *)(v18 + 28);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
  v23(v20, v21, v22);
  uint64_t v68 = sub_100010218(&qword_1007FC8E0);
  v23(&v20[*(int *)(v68 + 36)], &v21[*(int *)(v68 + 36)], v22);
  uint64_t v70 = v18;
  *(void *)&a1[*(int *)(v18 + 32)] = *(void *)&a2[*(int *)(v18 + 32)];
  uint64_t v24 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  uint64_t v69 = (int *)v24;
  uint64_t v28 = *(int *)(v24 + 24);
  int v67 = a1;
  uint64_t v29 = &a1[v28];
  char v30 = &a2[v28];
  if (v71(&a2[v28], 1, v5))
  {
    uint64_t v31 = sub_100010218(&qword_1007FD190);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    uint64_t v32 = v5;
  }
  else
  {
    uint64_t v33 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v29, v30, v33);
    v23(&v29[*(int *)(v5 + 20)], &v30[*(int *)(v5 + 20)], v22);
    uint64_t v34 = *(int *)(v5 + 24);
    uint64_t v32 = v5;
    uint64_t v35 = &v29[v34];
    uint64_t v36 = &v30[v34];
    uint64_t v37 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v29, 0, 1, v32);
  }
  *(void *)&v29[*(int *)(v17 + 20)] = *(void *)&v30[*(int *)(v17 + 20)];
  *(void *)&v29[*(int *)(v17 + 24)] = *(void *)&v30[*(int *)(v17 + 24)];
  uint64_t v38 = *(int *)(v70 + 28);
  uint64_t v39 = &v29[v38];
  uint64_t v40 = &v30[v38];
  v23(&v29[v38], &v30[v38], v22);
  v23(&v39[*(int *)(v68 + 36)], &v40[*(int *)(v68 + 36)], v22);
  *(void *)&v29[*(int *)(v70 + 32)] = *(void *)&v30[*(int *)(v70 + 32)];
  uint64_t v41 = v69[7];
  uint64_t v42 = v67;
  uint64_t v43 = &v67[v41];
  uint64_t v44 = &a2[v41];
  if (v71(&a2[v41], 1, v32))
  {
    uint64_t v45 = sub_100010218(&qword_1007FD190);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    uint64_t v46 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v43, v44, v46);
    v23(&v43[*(int *)(v32 + 20)], &v44[*(int *)(v32 + 20)], v22);
    uint64_t v47 = *(int *)(v32 + 24);
    uint64_t v48 = &v43[v47];
    uint64_t v49 = &v44[v47];
    uint64_t v50 = type metadata accessor for Calendar();
    uint64_t v51 = v49;
    uint64_t v42 = v67;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v51, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v43, 0, 1, v32);
  }
  *(void *)&v43[*(int *)(v17 + 20)] = *(void *)&v44[*(int *)(v17 + 20)];
  *(void *)&v43[*(int *)(v17 + 24)] = *(void *)&v44[*(int *)(v17 + 24)];
  uint64_t v52 = *(int *)(v70 + 28);
  uint64_t v53 = &v43[v52];
  uint64_t v54 = &v44[v52];
  v23(&v43[v52], &v44[v52], v22);
  v23(&v53[*(int *)(v68 + 36)], &v54[*(int *)(v68 + 36)], v22);
  *(void *)&v43[*(int *)(v70 + 32)] = *(void *)&v44[*(int *)(v70 + 32)];
  uint64_t v55 = v69[8];
  uint64_t v56 = &v42[v55];
  uint64_t v57 = &a2[v55];
  v56[8] = v57[8];
  *(void *)uint64_t v56 = *(void *)v57;
  v23(&v42[v69[9]], &a2[v69[9]], v22);
  uint64_t v58 = *(int *)(a3 + 20);
  uint64_t v59 = &v42[v58];
  uint64_t v60 = &a2[v58];
  uint64_t v61 = type metadata accessor for DateComponents();
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  }
  uint64_t v64 = sub_100010218(&qword_1007FF090);
  *(void *)&v59[*(int *)(v64 + 28)] = *(void *)&v60[*(int *)(v64 + 28)];
  return v42;
}

char *sub_100125570(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v90 = *(void *)(v5 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48);
  int v7 = v6(a1, 1, v5);
  uint64_t v97 = v6;
  int v8 = v6(a2, 1, v5);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      uint64_t v10 = *(int *)(v5 + 20);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      uint64_t v14 = *(int *)(v5 + 24);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(a1, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_10012B9C4((uint64_t)a1, type metadata accessor for CalendarBinningUnit);
LABEL_6:
    uint64_t v18 = sub_100010218(&qword_1007FD190);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v70 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 40))(a1, a2, v70);
  uint64_t v71 = *(int *)(v5 + 20);
  uint64_t v72 = &a1[v71];
  uint64_t v73 = &a2[v71];
  uint64_t v74 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 40))(v72, v73, v74);
  uint64_t v75 = *(int *)(v5 + 24);
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  uint64_t v78 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 40))(v76, v77, v78);
LABEL_7:
  uint64_t v19 = type metadata accessor for UniformDateBins(0);
  *(void *)&a1[*(int *)(v19 + 20)] = *(void *)&a2[*(int *)(v19 + 20)];
  uint64_t v94 = v19;
  *(void *)&a1[*(int *)(v19 + 24)] = *(void *)&a2[*(int *)(v19 + 24)];
  uint64_t v20 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v21 = *(int *)(v20 + 28);
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v89 = *(void *)(v24 - 8);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v89 + 40);
  v25(v22, v23, v24);
  uint64_t v92 = sub_100010218(&qword_1007FC8E0);
  uint64_t v98 = v25;
  v25(&v22[*(int *)(v92 + 36)], &v23[*(int *)(v92 + 36)], v24);
  uint64_t v96 = v20;
  *(void *)&a1[*(int *)(v20 + 32)] = *(void *)&a2[*(int *)(v20 + 32)];
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v27 = *(int *)(v26 + 20);
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  uint64_t v93 = (int *)v26;
  uint64_t v30 = *(int *)(v26 + 24);
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  LODWORD(v2sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v97(&a1[v30], 1, v5);
  int v33 = v97(v32, 1, v5);
  uint64_t v95 = a2;
  if (v20)
  {
    if (!v33)
    {
      uint64_t v34 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v31, v32, v34);
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v31[*(int *)(v5 + 20)], &v32[*(int *)(v5 + 20)], v24);
      uint64_t v35 = *(int *)(v5 + 24);
      uint64_t v36 = &v31[v35];
      uint64_t v37 = &v32[v35];
      uint64_t v38 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v31, 0, 1, v5);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    sub_10012B9C4((uint64_t)v31, type metadata accessor for CalendarBinningUnit);
LABEL_12:
    uint64_t v39 = sub_100010218(&qword_1007FD190);
    memcpy(v31, v32, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v79 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 40))(v31, v32, v79);
  v25(&v31[*(int *)(v5 + 20)], &v32[*(int *)(v5 + 20)], v24);
  uint64_t v80 = *(int *)(v5 + 24);
  uint64_t v81 = &v31[v80];
  uint64_t v82 = &v32[v80];
  uint64_t v83 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 40))(v81, v82, v83);
LABEL_13:
  *(void *)&v31[*(int *)(v94 + 20)] = *(void *)&v32[*(int *)(v94 + 20)];
  *(void *)&v31[*(int *)(v94 + 24)] = *(void *)&v32[*(int *)(v94 + 24)];
  uint64_t v40 = *(int *)(v96 + 28);
  uint64_t v41 = &v31[v40];
  uint64_t v42 = &v32[v40];
  v25(&v31[v40], &v32[v40], v24);
  v25(&v41[*(int *)(v92 + 36)], &v42[*(int *)(v92 + 36)], v24);
  *(void *)&v31[*(int *)(v96 + 32)] = *(void *)&v32[*(int *)(v96 + 32)];
  swift_bridgeObjectRelease();
  uint64_t v43 = v93[7];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &v95[v43];
  LODWORD(v42) = v97(&a1[v43], 1, v5);
  int v46 = v97(v45, 1, v5);
  if (v42)
  {
    if (!v46)
    {
      uint64_t v47 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v44, v45, v47);
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v44[*(int *)(v5 + 20)], &v45[*(int *)(v5 + 20)], v24);
      uint64_t v48 = *(int *)(v5 + 24);
      uint64_t v49 = &v44[v48];
      uint64_t v50 = &v45[v48];
      uint64_t v51 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v44, 0, 1, v5);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v46)
  {
    sub_10012B9C4((uint64_t)v44, type metadata accessor for CalendarBinningUnit);
LABEL_18:
    uint64_t v52 = sub_100010218(&qword_1007FD190);
    memcpy(v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v84 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 40))(v44, v45, v84);
  v25(&v44[*(int *)(v5 + 20)], &v45[*(int *)(v5 + 20)], v24);
  uint64_t v85 = *(int *)(v5 + 24);
  uint64_t v86 = &v44[v85];
  uint64_t v87 = &v45[v85];
  uint64_t v88 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 40))(v86, v87, v88);
LABEL_19:
  *(void *)&v44[*(int *)(v94 + 20)] = *(void *)&v45[*(int *)(v94 + 20)];
  *(void *)&v44[*(int *)(v94 + 24)] = *(void *)&v45[*(int *)(v94 + 24)];
  uint64_t v53 = *(int *)(v96 + 28);
  uint64_t v54 = &v44[v53];
  uint64_t v55 = &v45[v53];
  v98(&v44[v53], &v45[v53], v24);
  v98(&v54[*(int *)(v92 + 36)], &v55[*(int *)(v92 + 36)], v24);
  *(void *)&v44[*(int *)(v96 + 32)] = *(void *)&v45[*(int *)(v96 + 32)];
  swift_bridgeObjectRelease();
  uint64_t v56 = v93[8];
  uint64_t v57 = &a1[v56];
  uint64_t v58 = &v95[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  v57[8] = v58[8];
  v98(&a1[v93[9]], &v95[v93[9]], v24);
  uint64_t v59 = *(int *)(a3 + 20);
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &v95[v59];
  uint64_t v62 = type metadata accessor for DateComponents();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 40))(v60, v61, v62);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v62);
    goto LABEL_24;
  }
  if (v66)
  {
LABEL_24:
    uint64_t v67 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v60, v61, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v61, v62);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
LABEL_25:
  uint64_t v68 = sub_100010218(&qword_1007FF090);
  *(void *)&v60[*(int *)(v68 + 28)] = *(void *)&v61[*(int *)(v68 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_10012602C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100126040);
}

uint64_t sub_100126040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_100010218(&qword_1007FF090);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10012613C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100126150);
}

uint64_t sub_100126150(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_100010218(&qword_1007FF090);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for InsightsCalendarView(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FF0F0);
}

void sub_100126278()
{
  type metadata accessor for InsightsDataManager.EntrySummaryGroup(319);
  if (v0 <= 0x3F)
  {
    sub_10012635C(319, (unint64_t *)&unk_1007FF100, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10012635C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_100014440((uint64_t *)&unk_1007FF070);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void *sub_1001263C0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v9 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_100010218((uint64_t *)&unk_1007FF130);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    sub_100010218(&qword_1007F9480);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    sub_100010218(&qword_1007FF140);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *uint64_t v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[7];
    uint64_t v89 = a2;
    uint64_t v90 = a1;
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for CalendarBinningUnit(0);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v87 = v22;
    if (v96(v20, 1, v21))
    {
      uint64_t v23 = sub_100010218(&qword_1007FD190);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v24 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v19, v20, v24);
      uint64_t v25 = *(int *)(v21 + 20);
      uint64_t v26 = &v19[v25];
      uint64_t v27 = &v20[v25];
      uint64_t v28 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      uint64_t v29 = *(int *)(v21 + 24);
      uint64_t v30 = &v19[v29];
      uint64_t v31 = &v20[v29];
      uint64_t v32 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v33 = v21;
    uint64_t v34 = type metadata accessor for UniformDateBins(0);
    *(void *)&v19[*(int *)(v34 + 20)] = *(void *)&v20[*(int *)(v34 + 20)];
    uint64_t v93 = v34;
    *(void *)&v19[*(int *)(v34 + 24)] = *(void *)&v20[*(int *)(v34 + 24)];
    uint64_t v35 = sub_100010218((uint64_t *)&unk_1007FF080);
    uint64_t v36 = *(int *)(v35 + 28);
    uint64_t v37 = &v19[v36];
    uint64_t v38 = &v20[v36];
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
    v40(v37, v38, v39);
    uint64_t v91 = sub_100010218(&qword_1007FC8E0);
    v40(&v37[*(int *)(v91 + 36)], &v38[*(int *)(v91 + 36)], v39);
    uint64_t v95 = v35;
    *(void *)&v19[*(int *)(v35 + 32)] = *(void *)&v20[*(int *)(v35 + 32)];
    uint64_t v41 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
    uint64_t v42 = *(int *)(v41 + 20);
    uint64_t v43 = &v19[v42];
    uint64_t v44 = &v20[v42];
    *(void *)uint64_t v43 = *(void *)v44;
    v43[8] = v44[8];
    uint64_t v92 = (int *)v41;
    uint64_t v45 = *(int *)(v41 + 24);
    int v46 = &v19[v45];
    uint64_t v47 = &v20[v45];
    swift_bridgeObjectRetain();
    uint64_t v94 = v19;
    uint64_t v88 = a3;
    if (v96(v47, 1, v33))
    {
      uint64_t v48 = sub_100010218(&qword_1007FD190);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
      uint64_t v49 = v33;
    }
    else
    {
      uint64_t v50 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v46, v47, v50);
      v40(&v46[*(int *)(v33 + 20)], &v47[*(int *)(v33 + 20)], v39);
      uint64_t v51 = *(int *)(v33 + 24);
      uint64_t v49 = v33;
      uint64_t v52 = &v46[v51];
      uint64_t v53 = &v47[v51];
      uint64_t v54 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v46, 0, 1, v33);
    }
    *(void *)&v46[*(int *)(v93 + 20)] = *(void *)&v47[*(int *)(v93 + 20)];
    *(void *)&v46[*(int *)(v93 + 24)] = *(void *)&v47[*(int *)(v93 + 24)];
    uint64_t v55 = *(int *)(v95 + 28);
    uint64_t v56 = &v46[v55];
    uint64_t v57 = &v47[v55];
    v40(&v46[v55], &v47[v55], v39);
    v40(&v56[*(int *)(v91 + 36)], &v57[*(int *)(v91 + 36)], v39);
    *(void *)&v46[*(int *)(v95 + 32)] = *(void *)&v47[*(int *)(v95 + 32)];
    uint64_t v58 = v92[7];
    uint64_t v59 = &v94[v58];
    uint64_t v60 = &v20[v58];
    swift_bridgeObjectRetain();
    if (v96(v60, 1, v49))
    {
      uint64_t v61 = sub_100010218(&qword_1007FD190);
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v62 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v59, v60, v62);
      v40(&v59[*(int *)(v49 + 20)], &v60[*(int *)(v49 + 20)], v39);
      uint64_t v63 = *(int *)(v49 + 24);
      uint64_t v64 = &v59[v63];
      int v65 = &v60[v63];
      uint64_t v66 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v59, 0, 1, v49);
    }
    *(void *)&v59[*(int *)(v93 + 20)] = *(void *)&v60[*(int *)(v93 + 20)];
    *(void *)&v59[*(int *)(v93 + 24)] = *(void *)&v60[*(int *)(v93 + 24)];
    uint64_t v67 = *(int *)(v95 + 28);
    uint64_t v68 = &v59[v67];
    uint64_t v69 = &v60[v67];
    v40(&v59[v67], &v60[v67], v39);
    v40(&v68[*(int *)(v91 + 36)], &v69[*(int *)(v91 + 36)], v39);
    *(void *)&v59[*(int *)(v95 + 32)] = *(void *)&v60[*(int *)(v95 + 32)];
    uint64_t v70 = v92[8];
    uint64_t v71 = &v94[v70];
    uint64_t v72 = &v20[v70];
    v71[8] = v72[8];
    *(void *)uint64_t v71 = *(void *)v72;
    uint64_t v73 = v92[9];
    uint64_t v74 = &v94[v73];
    uint64_t v75 = &v20[v73];
    swift_bridgeObjectRetain();
    v40(v74, v75, v39);
    uint64_t v76 = v88[8];
    uint64_t v9 = v90;
    uint64_t v77 = (void *)((char *)v90 + v76);
    uint64_t v78 = (char *)v89 + v76;
    uint64_t v79 = *(void *)((char *)v89 + v76 + 8);
    void *v77 = *(void *)((char *)v89 + v76);
    v77[1] = v79;
    swift_retain();
    swift_retain();
    uint64_t v80 = *(int *)(sub_100010218(&qword_1007FF148) + 32);
    uint64_t v81 = (char *)v77 + v80;
    uint64_t v82 = &v78[v80];
    uint64_t v83 = type metadata accessor for DateComponents();
    uint64_t v84 = *(void *)(v83 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      uint64_t v85 = sub_100010218((uint64_t *)&unk_1007FF070);
      memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v82, v83);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
  }
  return v9;
}

uint64_t sub_100126D4C(uint64_t a1, int *a2)
{
  sub_100010218((uint64_t *)&unk_1007FF130);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  sub_100010218(&qword_1007F9480);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[6];
  sub_100010218(&qword_1007FF140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v39 = a2;
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10))
  {
    uint64_t v12 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9, v12);
    uint64_t v13 = v9 + *(int *)(v10 + 20);
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    uint64_t v15 = v9 + *(int *)(v10 + 24);
    uint64_t v16 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  }
  uint64_t v17 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v18 = v9 + *(int *)(v17 + 28);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  uint64_t v21 = sub_100010218(&qword_1007FC8E0);
  v20(v18 + *(int *)(v21 + 36), v19);
  swift_bridgeObjectRelease();
  uint64_t v22 = (int *)type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v23 = v9 + v22[6];
  uint64_t v38 = v11;
  if (!v11(v23, 1, v10))
  {
    uint64_t v24 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
    v20(v23 + *(int *)(v10 + 20), v19);
    uint64_t v25 = v23 + *(int *)(v10 + 24);
    uint64_t v26 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  }
  uint64_t v27 = v23 + *(int *)(v17 + 28);
  v20(v27, v19);
  v20(v27 + *(int *)(v21 + 36), v19);
  swift_bridgeObjectRelease();
  uint64_t v28 = v9 + v22[7];
  if (!v38(v28, 1, v10))
  {
    uint64_t v29 = type metadata accessor for Calendar.Component();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
    v20(v28 + *(int *)(v10 + 20), v19);
    uint64_t v30 = v28 + *(int *)(v10 + 24);
    uint64_t v31 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
  }
  uint64_t v32 = v28 + *(int *)(v17 + 28);
  v20(v32, v19);
  v20(v32 + *(int *)(v21 + 36), v19);
  swift_bridgeObjectRelease();
  v20(v9 + v22[9], v19);
  uint64_t v33 = a1 + v39[8];
  swift_release();
  swift_release();
  uint64_t v34 = v33 + *(int *)(sub_100010218(&qword_1007FF148) + 32);
  uint64_t v35 = type metadata accessor for DateComponents();
  uint64_t v40 = *(void *)(v35 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v34, 1, v35);
  if (!result)
  {
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    return v37(v34, v35);
  }
  return result;
}

void *sub_100127358(void *a1, void *a2, int *a3)
{
  sub_100010218((uint64_t *)&unk_1007FF130);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Locale();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_100010218(&qword_1007F9480);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Calendar();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  sub_100010218(&qword_1007FF140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for TimeZone();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v86 = a2;
  uint64_t v87 = a1;
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v84 = v19;
  if (v93(v17, 1, v18))
  {
    uint64_t v20 = sub_100010218(&qword_1007FD190);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v16, v17, v21);
    uint64_t v22 = *(int *)(v18 + 20);
    uint64_t v23 = &v16[v22];
    uint64_t v24 = &v17[v22];
    uint64_t v25 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    uint64_t v26 = *(int *)(v18 + 24);
    uint64_t v27 = &v16[v26];
    uint64_t v28 = &v17[v26];
    uint64_t v29 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v30 = v18;
  uint64_t v31 = type metadata accessor for UniformDateBins(0);
  *(void *)&v16[*(int *)(v31 + 20)] = *(void *)&v17[*(int *)(v31 + 20)];
  uint64_t v90 = v31;
  *(void *)&v16[*(int *)(v31 + 24)] = *(void *)&v17[*(int *)(v31 + 24)];
  uint64_t v32 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v33 = *(int *)(v32 + 28);
  uint64_t v34 = &v16[v33];
  uint64_t v35 = &v17[v33];
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
  v37(v34, v35, v36);
  uint64_t v88 = sub_100010218(&qword_1007FC8E0);
  v37(&v34[*(int *)(v88 + 36)], &v35[*(int *)(v88 + 36)], v36);
  uint64_t v92 = v32;
  *(void *)&v16[*(int *)(v32 + 32)] = *(void *)&v17[*(int *)(v32 + 32)];
  uint64_t v38 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v39 = *(int *)(v38 + 20);
  uint64_t v40 = &v16[v39];
  uint64_t v41 = &v17[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  v40[8] = v41[8];
  uint64_t v89 = (int *)v38;
  uint64_t v42 = *(int *)(v38 + 24);
  uint64_t v43 = &v16[v42];
  uint64_t v44 = &v17[v42];
  swift_bridgeObjectRetain();
  uint64_t v91 = v16;
  uint64_t v85 = a3;
  if (v93(v44, 1, v30))
  {
    uint64_t v45 = sub_100010218(&qword_1007FD190);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    uint64_t v46 = v30;
  }
  else
  {
    uint64_t v47 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v43, v44, v47);
    v37(&v43[*(int *)(v30 + 20)], &v44[*(int *)(v30 + 20)], v36);
    uint64_t v48 = *(int *)(v30 + 24);
    uint64_t v46 = v30;
    uint64_t v49 = &v43[v48];
    uint64_t v50 = &v44[v48];
    uint64_t v51 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(v49, v50, v51);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v43, 0, 1, v30);
  }
  *(void *)&v43[*(int *)(v90 + 20)] = *(void *)&v44[*(int *)(v90 + 20)];
  *(void *)&v43[*(int *)(v90 + 24)] = *(void *)&v44[*(int *)(v90 + 24)];
  uint64_t v52 = *(int *)(v92 + 28);
  uint64_t v53 = &v43[v52];
  uint64_t v54 = &v44[v52];
  v37(&v43[v52], &v44[v52], v36);
  v37(&v53[*(int *)(v88 + 36)], &v54[*(int *)(v88 + 36)], v36);
  *(void *)&v43[*(int *)(v92 + 32)] = *(void *)&v44[*(int *)(v92 + 32)];
  uint64_t v55 = v89[7];
  uint64_t v56 = &v91[v55];
  uint64_t v57 = &v17[v55];
  swift_bridgeObjectRetain();
  if (v93(v57, 1, v46))
  {
    uint64_t v58 = sub_100010218(&qword_1007FD190);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    uint64_t v59 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v56, v57, v59);
    v37(&v56[*(int *)(v46 + 20)], &v57[*(int *)(v46 + 20)], v36);
    uint64_t v60 = *(int *)(v46 + 24);
    uint64_t v61 = &v56[v60];
    uint64_t v62 = &v57[v60];
    uint64_t v63 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v56, 0, 1, v46);
  }
  *(void *)&v56[*(int *)(v90 + 20)] = *(void *)&v57[*(int *)(v90 + 20)];
  *(void *)&v56[*(int *)(v90 + 24)] = *(void *)&v57[*(int *)(v90 + 24)];
  uint64_t v64 = *(int *)(v92 + 28);
  int v65 = &v56[v64];
  uint64_t v66 = &v57[v64];
  v37(&v56[v64], &v57[v64], v36);
  v37(&v65[*(int *)(v88 + 36)], &v66[*(int *)(v88 + 36)], v36);
  *(void *)&v56[*(int *)(v92 + 32)] = *(void *)&v57[*(int *)(v92 + 32)];
  uint64_t v67 = v89[8];
  uint64_t v68 = &v91[v67];
  uint64_t v69 = &v17[v67];
  v68[8] = v69[8];
  *(void *)uint64_t v68 = *(void *)v69;
  uint64_t v70 = v89[9];
  uint64_t v71 = &v91[v70];
  uint64_t v72 = &v17[v70];
  swift_bridgeObjectRetain();
  v37(v71, v72, v36);
  uint64_t v73 = v85[8];
  uint64_t v74 = (void *)((char *)v87 + v73);
  uint64_t v75 = (char *)v86 + v73;
  uint64_t v76 = *(void *)((char *)v86 + v73 + 8);
  void *v74 = *(void *)((char *)v86 + v73);
  v74[1] = v76;
  swift_retain();
  swift_retain();
  uint64_t v77 = *(int *)(sub_100010218(&qword_1007FF148) + 32);
  uint64_t v78 = (char *)v74 + v77;
  uint64_t v79 = &v75[v77];
  uint64_t v80 = type metadata accessor for DateComponents();
  uint64_t v81 = *(void *)(v80 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
  {
    uint64_t v82 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v80);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
  }
  return v87;
}

void *sub_100127C94(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10001457C((uint64_t)a1, (uint64_t *)&unk_1007FF130);
    sub_100010218((uint64_t *)&unk_1007FF130);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_10001457C((uint64_t)a1 + v7, &qword_1007F9480);
    sub_100010218(&qword_1007F9480);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    sub_10001457C((uint64_t)a1 + v11, &qword_1007FF140);
    sub_100010218(&qword_1007FF140);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v108 = a3;
  uint64_t v109 = a2;
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  uint64_t v115 = v20;
  int v22 = v20(v17, 1, v18);
  id v110 = a1;
  if (v21)
  {
    if (!v22)
    {
      uint64_t v23 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v16, v17, v23);
      uint64_t v24 = *(int *)(v18 + 20);
      uint64_t v25 = &v16[v24];
      uint64_t v26 = &v17[v24];
      uint64_t v27 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      uint64_t v28 = *(int *)(v18 + 24);
      uint64_t v29 = &v16[v28];
      uint64_t v30 = &v17[v28];
      uint64_t v31 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v22)
  {
    sub_10012B9C4((uint64_t)v16, type metadata accessor for CalendarBinningUnit);
LABEL_17:
    uint64_t v32 = sub_100010218(&qword_1007FD190);
    memcpy(v16, v17, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_18;
  }
  uint64_t v88 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 24))(v16, v17, v88);
  uint64_t v89 = *(int *)(v18 + 20);
  uint64_t v90 = &v16[v89];
  uint64_t v91 = &v17[v89];
  uint64_t v92 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 24))(v90, v91, v92);
  uint64_t v93 = *(int *)(v18 + 24);
  uint64_t v94 = &v16[v93];
  uint64_t v95 = &v17[v93];
  uint64_t v96 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 24))(v94, v95, v96);
LABEL_18:
  uint64_t v33 = type metadata accessor for UniformDateBins(0);
  *(void *)&v16[*(int *)(v33 + 20)] = *(void *)&v17[*(int *)(v33 + 20)];
  uint64_t v113 = v33;
  *(void *)&v16[*(int *)(v33 + 24)] = *(void *)&v17[*(int *)(v33 + 24)];
  uint64_t v34 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v35 = *(int *)(v34 + 28);
  uint64_t v36 = &v16[v35];
  uint64_t v37 = &v17[v35];
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v107 = *(void *)(v38 - 8);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v107 + 24);
  v39(v36, v37, v38);
  uint64_t v111 = sub_100010218(&qword_1007FC8E0);
  double v116 = v39;
  v39(&v36[*(int *)(v111 + 36)], &v37[*(int *)(v111 + 36)], v38);
  *(void *)&v16[*(int *)(v34 + 32)] = *(void *)&v17[*(int *)(v34 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v41 = *(int *)(v40 + 20);
  uint64_t v42 = &v16[v41];
  uint64_t v43 = &v17[v41];
  char v44 = v43[8];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v44;
  id v112 = (int *)v40;
  uint64_t v45 = *(int *)(v40 + 24);
  uint64_t v46 = &v16[v45];
  uint64_t v47 = &v17[v45];
  LODWORD(v39) = v115(&v16[v45], 1, v18);
  int v48 = v115(v47, 1, v18);
  uint64_t v114 = v17;
  if (v39)
  {
    if (!v48)
    {
      uint64_t v49 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v46, v47, v49);
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(&v46[*(int *)(v18 + 20)], &v47[*(int *)(v18 + 20)], v38);
      uint64_t v50 = *(int *)(v18 + 24);
      uint64_t v51 = &v46[v50];
      uint64_t v52 = &v47[v50];
      uint64_t v53 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v46, 0, 1, v18);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v48)
  {
    sub_10012B9C4((uint64_t)v46, type metadata accessor for CalendarBinningUnit);
LABEL_23:
    uint64_t v54 = sub_100010218(&qword_1007FD190);
    memcpy(v46, v47, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v97 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 24))(v46, v47, v97);
  v116(&v46[*(int *)(v18 + 20)], &v47[*(int *)(v18 + 20)], v38);
  uint64_t v98 = *(int *)(v18 + 24);
  double v99 = &v46[v98];
  double v100 = &v47[v98];
  uint64_t v101 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 24))(v99, v100, v101);
LABEL_24:
  *(void *)&v46[*(int *)(v113 + 20)] = *(void *)&v47[*(int *)(v113 + 20)];
  *(void *)&v46[*(int *)(v113 + 24)] = *(void *)&v47[*(int *)(v113 + 24)];
  uint64_t v55 = *(int *)(v34 + 28);
  uint64_t v56 = &v46[v55];
  uint64_t v57 = &v47[v55];
  v116(&v46[v55], &v47[v55], v38);
  v116(&v56[*(int *)(v111 + 36)], &v57[*(int *)(v111 + 36)], v38);
  *(void *)&v46[*(int *)(v34 + 32)] = *(void *)&v47[*(int *)(v34 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = v112[7];
  uint64_t v59 = &v16[v58];
  uint64_t v60 = &v114[v58];
  LODWORD(v56) = v115(&v16[v58], 1, v18);
  int v61 = v115(v60, 1, v18);
  if (v56)
  {
    if (!v61)
    {
      uint64_t v62 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v59, v60, v62);
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(&v59[*(int *)(v18 + 20)], &v60[*(int *)(v18 + 20)], v38);
      uint64_t v63 = *(int *)(v18 + 24);
      uint64_t v64 = &v59[v63];
      int v65 = &v60[v63];
      uint64_t v66 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v59, 0, 1, v18);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v61)
  {
    sub_10012B9C4((uint64_t)v59, type metadata accessor for CalendarBinningUnit);
LABEL_29:
    uint64_t v67 = sub_100010218(&qword_1007FD190);
    memcpy(v59, v60, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_30;
  }
  uint64_t v102 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 24))(v59, v60, v102);
  v116(&v59[*(int *)(v18 + 20)], &v60[*(int *)(v18 + 20)], v38);
  uint64_t v103 = *(int *)(v18 + 24);
  uint64_t v104 = &v59[v103];
  id v105 = &v60[v103];
  uint64_t v106 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 24))(v104, v105, v106);
LABEL_30:
  *(void *)&v59[*(int *)(v113 + 20)] = *(void *)&v60[*(int *)(v113 + 20)];
  *(void *)&v59[*(int *)(v113 + 24)] = *(void *)&v60[*(int *)(v113 + 24)];
  uint64_t v68 = *(int *)(v34 + 28);
  uint64_t v69 = &v59[v68];
  uint64_t v70 = &v60[v68];
  v116(&v59[v68], &v60[v68], v38);
  v116(&v69[*(int *)(v111 + 36)], &v70[*(int *)(v111 + 36)], v38);
  *(void *)&v59[*(int *)(v34 + 32)] = *(void *)&v60[*(int *)(v34 + 32)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v71 = v112[8];
  uint64_t v72 = &v16[v71];
  uint64_t v73 = &v114[v71];
  uint64_t v74 = *(void *)v73;
  v72[8] = v73[8];
  *(void *)uint64_t v72 = v74;
  v116(&v16[v112[9]], &v114[v112[9]], v38);
  uint64_t v75 = v108[8];
  uint64_t v76 = (char *)v110 + v75;
  uint64_t v77 = (char *)v109 + v75;
  *(void *)((char *)v110 + v75) = *(void *)((char *)v109 + v75);
  swift_retain();
  swift_release();
  *((void *)v76 + 1) = *((void *)v77 + 1);
  swift_retain();
  swift_release();
  uint64_t v78 = *(int *)(sub_100010218(&qword_1007FF148) + 32);
  uint64_t v79 = &v76[v78];
  uint64_t v80 = &v77[v78];
  uint64_t v81 = type metadata accessor for DateComponents();
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  int v84 = v83(v79, 1, v81);
  int v85 = v83(v80, 1, v81);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v82 + 24))(v79, v80, v81);
      return v110;
    }
    (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v81);
    goto LABEL_35;
  }
  if (v85)
  {
LABEL_35:
    uint64_t v86 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v79, v80, *(void *)(*(void *)(v86 - 8) + 64));
    return v110;
  }
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v79, v80, v81);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  return v110;
}

char *sub_1001289A0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100010218((uint64_t *)&unk_1007FF130);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_100010218(&qword_1007F9480);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = sub_100010218(&qword_1007FF140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[7];
  uint64_t v87 = a2;
  uint64_t v88 = a1;
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v86 = a3;
  uint64_t v84 = v22;
  if (v23(v20, 1, v21))
  {
    uint64_t v24 = sub_100010218(&qword_1007FD190);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v19, v20, v25);
    uint64_t v26 = *(int *)(v21 + 20);
    uint64_t v27 = &v19[v26];
    uint64_t v28 = &v20[v26];
    uint64_t v29 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
    uint64_t v30 = *(int *)(v21 + 24);
    uint64_t v31 = &v19[v30];
    uint64_t v32 = &v20[v30];
    uint64_t v33 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v34 = type metadata accessor for UniformDateBins(0);
  *(void *)&v19[*(int *)(v34 + 20)] = *(void *)&v20[*(int *)(v34 + 20)];
  uint64_t v91 = v34;
  *(void *)&v19[*(int *)(v34 + 24)] = *(void *)&v20[*(int *)(v34 + 24)];
  uint64_t v35 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v36 = *(int *)(v35 + 28);
  uint64_t v37 = &v19[v36];
  uint64_t v38 = &v20[v36];
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32);
  v40(v37, v38, v39);
  uint64_t v89 = sub_100010218(&qword_1007FC8E0);
  v40(&v37[*(int *)(v89 + 36)], &v38[*(int *)(v89 + 36)], v39);
  uint64_t v93 = v35;
  *(void *)&v19[*(int *)(v35 + 32)] = *(void *)&v20[*(int *)(v35 + 32)];
  uint64_t v41 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v42 = *(int *)(v41 + 20);
  uint64_t v43 = &v19[v42];
  char v44 = &v20[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  v43[8] = v44[8];
  uint64_t v90 = (int *)v41;
  uint64_t v45 = *(int *)(v41 + 24);
  uint64_t v46 = &v19[v45];
  uint64_t v47 = &v20[v45];
  int v85 = v23;
  uint64_t v92 = v19;
  if (v23(&v20[v45], 1, v21))
  {
    uint64_t v48 = sub_100010218(&qword_1007FD190);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
    uint64_t v49 = v21;
  }
  else
  {
    uint64_t v50 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v46, v47, v50);
    v40(&v46[*(int *)(v21 + 20)], &v47[*(int *)(v21 + 20)], v39);
    uint64_t v51 = *(int *)(v21 + 24);
    uint64_t v49 = v21;
    uint64_t v52 = &v46[v51];
    uint64_t v53 = &v47[v51];
    uint64_t v54 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v46, 0, 1, v49);
  }
  *(void *)&v46[*(int *)(v91 + 20)] = *(void *)&v47[*(int *)(v91 + 20)];
  *(void *)&v46[*(int *)(v91 + 24)] = *(void *)&v47[*(int *)(v91 + 24)];
  uint64_t v55 = *(int *)(v35 + 28);
  uint64_t v56 = &v46[v55];
  uint64_t v57 = &v47[v55];
  v40(&v46[v55], &v47[v55], v39);
  v40(&v56[*(int *)(v89 + 36)], &v57[*(int *)(v89 + 36)], v39);
  *(void *)&v46[*(int *)(v93 + 32)] = *(void *)&v47[*(int *)(v93 + 32)];
  uint64_t v58 = v90[7];
  uint64_t v59 = &v92[v58];
  uint64_t v60 = &v20[v58];
  if (v85(&v20[v58], 1, v49))
  {
    uint64_t v61 = sub_100010218(&qword_1007FD190);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    uint64_t v62 = type metadata accessor for Calendar.Component();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v62 - 8) + 32))(v59, v60, v62);
    v40(&v59[*(int *)(v49 + 20)], &v60[*(int *)(v49 + 20)], v39);
    uint64_t v63 = *(int *)(v49 + 24);
    uint64_t v64 = &v59[v63];
    int v65 = &v60[v63];
    uint64_t v66 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v64, v65, v66);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v59, 0, 1, v49);
  }
  *(void *)&v59[*(int *)(v91 + 20)] = *(void *)&v60[*(int *)(v91 + 20)];
  *(void *)&v59[*(int *)(v91 + 24)] = *(void *)&v60[*(int *)(v91 + 24)];
  uint64_t v67 = *(int *)(v93 + 28);
  uint64_t v68 = &v59[v67];
  uint64_t v69 = &v60[v67];
  v40(&v59[v67], &v60[v67], v39);
  v40(&v68[*(int *)(v89 + 36)], &v69[*(int *)(v89 + 36)], v39);
  *(void *)&v59[*(int *)(v93 + 32)] = *(void *)&v60[*(int *)(v93 + 32)];
  uint64_t v70 = v90[8];
  uint64_t v71 = &v92[v70];
  uint64_t v72 = &v20[v70];
  v71[8] = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  v40(&v92[v90[9]], &v20[v90[9]], v39);
  uint64_t v73 = v86[8];
  uint64_t v74 = &v88[v73];
  uint64_t v75 = &v87[v73];
  uint64_t v76 = *(void *)&v87[v73 + 8];
  *(void *)uint64_t v74 = *(void *)&v87[v73];
  *((void *)v74 + 1) = v76;
  uint64_t v77 = *(int *)(sub_100010218(&qword_1007FF148) + 32);
  uint64_t v78 = &v74[v77];
  uint64_t v79 = &v75[v77];
  uint64_t v80 = type metadata accessor for DateComponents();
  uint64_t v81 = *(void *)(v80 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
  {
    uint64_t v82 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v78, v79, v80);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
  }
  return v88;
}

char *sub_1001292D4(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10001457C((uint64_t)a1, (uint64_t *)&unk_1007FF130);
    uint64_t v6 = sub_100010218((uint64_t *)&unk_1007FF130);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_10001457C((uint64_t)&a1[v8], &qword_1007F9480);
    uint64_t v11 = sub_100010218(&qword_1007F9480);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v13 = a3[6];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    sub_10001457C((uint64_t)&a1[v13], &qword_1007FF140);
    uint64_t v16 = sub_100010218(&qword_1007FF140);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v109 = a3;
  id v110 = a2;
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  double v116 = v23;
  int v25 = v23(v20, 1, v21);
  uint64_t v111 = a1;
  if (v24)
  {
    if (!v25)
    {
      uint64_t v26 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v19, v20, v26);
      uint64_t v27 = *(int *)(v21 + 20);
      uint64_t v28 = &v19[v27];
      uint64_t v29 = &v20[v27];
      uint64_t v30 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
      uint64_t v31 = *(int *)(v21 + 24);
      uint64_t v32 = &v19[v31];
      uint64_t v33 = &v20[v31];
      uint64_t v34 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v25)
  {
    sub_10012B9C4((uint64_t)v19, type metadata accessor for CalendarBinningUnit);
LABEL_16:
    uint64_t v35 = sub_100010218(&qword_1007FD190);
    memcpy(v19, v20, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_17;
  }
  uint64_t v89 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 40))(v19, v20, v89);
  uint64_t v90 = *(int *)(v21 + 20);
  uint64_t v91 = &v19[v90];
  uint64_t v92 = &v20[v90];
  uint64_t v93 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 40))(v91, v92, v93);
  uint64_t v94 = *(int *)(v21 + 24);
  uint64_t v95 = &v19[v94];
  uint64_t v96 = &v20[v94];
  uint64_t v97 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 40))(v95, v96, v97);
LABEL_17:
  uint64_t v36 = type metadata accessor for UniformDateBins(0);
  *(void *)&v19[*(int *)(v36 + 20)] = *(void *)&v20[*(int *)(v36 + 20)];
  uint64_t v114 = v36;
  *(void *)&v19[*(int *)(v36 + 24)] = *(void *)&v20[*(int *)(v36 + 24)];
  uint64_t v37 = sub_100010218((uint64_t *)&unk_1007FF080);
  uint64_t v38 = *(int *)(v37 + 28);
  uint64_t v39 = &v19[v38];
  uint64_t v40 = &v20[v38];
  uint64_t v41 = type metadata accessor for Date();
  uint64_t v108 = *(void *)(v41 - 8);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v108 + 40);
  v42(v39, v40, v41);
  uint64_t v112 = sub_100010218(&qword_1007FC8E0);
  double v117 = v42;
  v42(&v39[*(int *)(v112 + 36)], &v40[*(int *)(v112 + 36)], v41);
  *(void *)&v19[*(int *)(v37 + 32)] = *(void *)&v20[*(int *)(v37 + 32)];
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v45 = &v19[v44];
  uint64_t v46 = &v20[v44];
  *(void *)uint64_t v45 = *(void *)v46;
  v45[8] = v46[8];
  uint64_t v113 = (int *)v43;
  uint64_t v47 = *(int *)(v43 + 24);
  uint64_t v48 = &v19[v47];
  uint64_t v49 = &v20[v47];
  LODWORD(v42) = v116(&v19[v47], 1, v21);
  int v50 = v116(v49, 1, v21);
  uint64_t v115 = v20;
  if (v42)
  {
    if (!v50)
    {
      uint64_t v51 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v48, v49, v51);
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(&v48[*(int *)(v21 + 20)], &v49[*(int *)(v21 + 20)], v41);
      uint64_t v52 = *(int *)(v21 + 24);
      uint64_t v53 = &v48[v52];
      uint64_t v54 = &v49[v52];
      uint64_t v55 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v53, v54, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v48, 0, 1, v21);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v50)
  {
    sub_10012B9C4((uint64_t)v48, type metadata accessor for CalendarBinningUnit);
LABEL_22:
    uint64_t v56 = sub_100010218(&qword_1007FD190);
    memcpy(v48, v49, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_23;
  }
  uint64_t v98 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 40))(v48, v49, v98);
  v117(&v48[*(int *)(v21 + 20)], &v49[*(int *)(v21 + 20)], v41);
  uint64_t v99 = *(int *)(v21 + 24);
  double v100 = &v48[v99];
  uint64_t v101 = &v49[v99];
  uint64_t v102 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 40))(v100, v101, v102);
LABEL_23:
  *(void *)&v48[*(int *)(v114 + 20)] = *(void *)&v49[*(int *)(v114 + 20)];
  *(void *)&v48[*(int *)(v114 + 24)] = *(void *)&v49[*(int *)(v114 + 24)];
  uint64_t v57 = *(int *)(v37 + 28);
  uint64_t v58 = &v48[v57];
  uint64_t v59 = &v49[v57];
  v117(&v48[v57], &v49[v57], v41);
  v117(&v58[*(int *)(v112 + 36)], &v59[*(int *)(v112 + 36)], v41);
  *(void *)&v48[*(int *)(v37 + 32)] = *(void *)&v49[*(int *)(v37 + 32)];
  swift_bridgeObjectRelease();
  uint64_t v60 = v113[7];
  uint64_t v61 = &v19[v60];
  uint64_t v62 = &v115[v60];
  LODWORD(v58) = v116(&v19[v60], 1, v21);
  int v63 = v116(v62, 1, v21);
  if (v58)
  {
    if (!v63)
    {
      uint64_t v64 = type metadata accessor for Calendar.Component();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v61, v62, v64);
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(&v61[*(int *)(v21 + 20)], &v62[*(int *)(v21 + 20)], v41);
      uint64_t v65 = *(int *)(v21 + 24);
      uint64_t v66 = &v61[v65];
      uint64_t v67 = &v62[v65];
      uint64_t v68 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v61, 0, 1, v21);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v63)
  {
    sub_10012B9C4((uint64_t)v61, type metadata accessor for CalendarBinningUnit);
LABEL_28:
    uint64_t v69 = sub_100010218(&qword_1007FD190);
    memcpy(v61, v62, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v103 = type metadata accessor for Calendar.Component();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 40))(v61, v62, v103);
  v117(&v61[*(int *)(v21 + 20)], &v62[*(int *)(v21 + 20)], v41);
  uint64_t v104 = *(int *)(v21 + 24);
  id v105 = &v61[v104];
  uint64_t v106 = &v62[v104];
  uint64_t v107 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 40))(v105, v106, v107);
LABEL_29:
  *(void *)&v61[*(int *)(v114 + 20)] = *(void *)&v62[*(int *)(v114 + 20)];
  *(void *)&v61[*(int *)(v114 + 24)] = *(void *)&v62[*(int *)(v114 + 24)];
  uint64_t v70 = *(int *)(v37 + 28);
  uint64_t v71 = &v61[v70];
  uint64_t v72 = &v62[v70];
  v117(&v61[v70], &v62[v70], v41);
  v117(&v71[*(int *)(v112 + 36)], &v72[*(int *)(v112 + 36)], v41);
  *(void *)&v61[*(int *)(v37 + 32)] = *(void *)&v62[*(int *)(v37 + 32)];
  swift_bridgeObjectRelease();
  uint64_t v73 = v113[8];
  uint64_t v74 = &v19[v73];
  uint64_t v75 = &v115[v73];
  *(void *)uint64_t v74 = *(void *)v75;
  v74[8] = v75[8];
  v117(&v19[v113[9]], &v115[v113[9]], v41);
  uint64_t v76 = v109[8];
  uint64_t v77 = &v111[v76];
  uint64_t v78 = &v110[v76];
  *(void *)&v111[v76] = *(void *)&v110[v76];
  swift_release();
  *((void *)v77 + 1) = *((void *)v78 + 1);
  swift_release();
  uint64_t v79 = *(int *)(sub_100010218(&qword_1007FF148) + 32);
  uint64_t v80 = &v77[v79];
  uint64_t v81 = &v78[v79];
  uint64_t v82 = type metadata accessor for DateComponents();
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  int v85 = v84(v80, 1, v82);
  int v86 = v84(v81, 1, v82);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 40))(v80, v81, v82);
      return v111;
    }
    (*(void (**)(char *, uint64_t))(v83 + 8))(v80, v82);
    goto LABEL_34;
  }
  if (v86)
  {
LABEL_34:
    uint64_t v87 = sub_100010218((uint64_t *)&unk_1007FF070);
    memcpy(v80, v81, *(void *)(*(void *)(v87 - 8) + 64));
    return v111;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v81, v82);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
  return v111;
}

uint64_t sub_100129FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100129FE4);
}

uint64_t sub_100129FE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100010218((uint64_t *)&unk_1007FF150);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100010218(&qword_1008155B0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = sub_100010218(&qword_1007FF160);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_9;
  }
  uint64_t v17 = sub_100010218(&qword_1007FF148);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[8];

  return v18(v20, a2, v19);
}

uint64_t sub_10012A1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A1EC);
}

uint64_t sub_10012A1EC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FF150);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_100010218(&qword_1008155B0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_9:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_100010218(&qword_1007FF160);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_9;
  }
  uint64_t v17 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v10 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_9;
  }
  uint64_t v19 = sub_100010218(&qword_1007FF148);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v21 = v19;
  uint64_t v22 = a1 + a4[8];

  return v20(v22, a2, a2, v21);
}

void sub_10012A3EC()
{
  sub_10012A5D8(319, (unint64_t *)&unk_1007FF1D0, (void (*)(uint64_t))&type metadata accessor for Locale);
  if (v0 <= 0x3F)
  {
    sub_10012A5D8(319, (unint64_t *)&qword_1007F94F8, (void (*)(uint64_t))&type metadata accessor for Calendar);
    if (v1 <= 0x3F)
    {
      sub_10012A5D8(319, (unint64_t *)&unk_1007FF1E0, (void (*)(uint64_t))&type metadata accessor for TimeZone);
      if (v2 <= 0x3F)
      {
        type metadata accessor for InsightsDataManager.EntrySummaryGroup(319);
        if (v3 <= 0x3F)
        {
          sub_10012635C(319, &qword_1007FF068, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_10012A5D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10012A63C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100010218(&qword_1007FF148);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012B95C(v1, (uint64_t)v8, type metadata accessor for InsightsCalendarView.Representation);
  Binding.projectedValue.getter();
  uint64_t v9 = (objc_class *)type metadata accessor for InsightsCalendarView.Representation.Coordinator(0);
  id v10 = objc_allocWithZone(v9);
  sub_10012B95C((uint64_t)v8, (uint64_t)v10+ OBJC_IVAR____TtCVV7Journal20InsightsCalendarViewP33_DB82E41FEC15FAA6F37A37FAA16D9E2114Representation11Coordinator_parent, type metadata accessor for InsightsCalendarView.Representation);
  sub_10001B220((uint64_t)v5, (uint64_t)v10+ OBJC_IVAR____TtCVV7Journal20InsightsCalendarViewP33_DB82E41FEC15FAA6F37A37FAA16D9E2114Representation11Coordinator__selectedDate, &qword_1007FF148);
  v13.receiver = v10;
  v13.super_class = v9;
  [super init];
  sub_10001457C((uint64_t)v5, &qword_1007FF148);
  uint64_t result = sub_10012B9C4((uint64_t)v8, type metadata accessor for InsightsCalendarView.Representation);
  *a1 = v11;
  return result;
}

double sub_10012A7D4(uint64_t a1, char a2, uint64_t a3, char a4, id a5)
{
  double v6 = INFINITY;
  if (a2) {
    *(double *)&a1 = INFINITY;
  }
  if ((a4 & 1) == 0) {
    double v6 = *(double *)&a3;
  }
  [a5 sizeThatFits:*(double *)&a1 v6];
  return result;
}

uint64_t sub_10012A834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012BB70((unint64_t *)&unk_1007FF2A0, (void (*)(uint64_t))type metadata accessor for InsightsCalendarView.Representation);

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10012A8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10012BB70((unint64_t *)&unk_1007FF2A0, (void (*)(uint64_t))type metadata accessor for InsightsCalendarView.Representation);

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10012A95C()
{
}

uint64_t sub_10012A9B4()
{
  return sub_10012BB70(&qword_1007FF220, (void (*)(uint64_t))type metadata accessor for InsightsCalendarView.Representation);
}

uint64_t sub_10012A9FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10012AA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v73 = type metadata accessor for RoundedCornerStyle();
  uint64_t v70 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v68 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v67);
  uint64_t v72 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ColorResource();
  uint64_t v74 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100010218(&qword_1007FF230);
  __chkstk_darwin(v64);
  uint64_t v8 = (uint64_t *)((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100010218(&qword_1008155B0);
  __chkstk_darwin(v9 - 8);
  id v11 = (uint64_t *)((char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FF150);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_100010218(&qword_1007FF148);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for InsightsCalendarView.Representation(0);
  uint64_t v22 = (int *)(v21 - 8);
  __chkstk_darwin(v21);
  int v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100010218(&qword_1007FF238);
  __chkstk_darwin(v62);
  int v63 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100010218((uint64_t *)&unk_1007FF240);
  __chkstk_darwin(v69);
  uint64_t v71 = (uint64_t)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012B95C(a1, (uint64_t)v20, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
  uint64_t v27 = a1 + *(int *)(type metadata accessor for InsightsCalendarView(0) + 20);
  uint64_t v65 = sub_100010218(&qword_1007FF090);
  uint64_t v66 = v27;
  State.projectedValue.getter();
  *uint64_t v14 = swift_getKeyPath();
  sub_100010218((uint64_t *)&unk_1007FF130);
  swift_storeEnumTagMultiPayload();
  *id v11 = swift_getKeyPath();
  sub_100010218(&qword_1007F9480);
  swift_storeEnumTagMultiPayload();
  *(void *)&v24[v22[8]] = swift_getKeyPath();
  sub_100010218(&qword_1007FF140);
  swift_storeEnumTagMultiPayload();
  sub_10002C4EC((uint64_t)v14, (uint64_t)v24, (uint64_t *)&unk_1007FF150);
  sub_10002C4EC((uint64_t)v11, (uint64_t)&v24[v22[7]], &qword_1008155B0);
  sub_10012B8F8((uint64_t)v20, (uint64_t)&v24[v22[9]]);
  uint64_t v28 = (uint64_t)&v24[v22[10]];
  uint64_t v75 = v17;
  sub_10002C4EC((uint64_t)v17, v28, &qword_1007FF148);
  if (qword_1007F7FA8 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_100026A54(v5, (uint64_t)qword_10083F018);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  uint64_t v74 = v5;
  uint64_t v61 = v30;
  v30(v77, v29, v5);
  uint64_t v31 = Color.init(_:)();
  uint64_t v32 = v64;
  uint64_t v33 = (char *)v8 + *(int *)(v64 + 36);
  uint64_t v34 = enum case for BlendMode.normal(_:);
  uint64_t v35 = type metadata accessor for BlendMode();
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 104);
  v36(v33, v34, v35);
  v36((char *)v8 + *(int *)(v32 + 40), enum case for BlendMode.plusLighter(_:), v35);
  *uint64_t v8 = v31;
  sub_100014488((unint64_t *)&unk_100802710, &qword_1007FF230);
  uint64_t v37 = AnyShapeStyle.init<A>(_:)();
  uint64_t v38 = v70;
  uint64_t v39 = v68;
  uint64_t v40 = v73;
  (*(void (**)(char *, void, uint64_t))(v70 + 104))(v68, enum case for RoundedCornerStyle.continuous(_:), v73);
  uint64_t v41 = v72;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(&v72[*(int *)(v67 + 20)], v39, v40);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v41 = _Q0;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  uint64_t v47 = (uint64_t)v63;
  uint64_t v48 = (uint64_t *)&v63[*(int *)(v62 + 36)];
  uint64_t v49 = sub_100010218(&qword_1007FF250);
  sub_10012B95C((uint64_t)v41, (uint64_t)v48 + *(int *)(v49 + 52), (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *uint64_t v48 = v37;
  *(_WORD *)((char *)v48 + *(int *)(v49 + 56)) = 256;
  sub_10012B95C((uint64_t)v24, v47, type metadata accessor for InsightsCalendarView.Representation);
  sub_10012B9C4((uint64_t)v41, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10012B9C4((uint64_t)v24, type metadata accessor for InsightsCalendarView.Representation);
  int v50 = v77;
  uint64_t v51 = v47;
  if (qword_1007F7458 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_10083DA68;
  if (qword_1007F7FB0 != -1) {
    swift_once();
  }
  uint64_t v53 = v74;
  uint64_t v54 = sub_100026A54(v74, (uint64_t)qword_10083F030);
  v61(v50, v54, v53);
  uint64_t v55 = Color.init(_:)();
  if (qword_1007F7460 != -1) {
    swift_once();
  }
  uint64_t v56 = qword_10083DA70;
  uint64_t v57 = v71;
  sub_10001B220(v51, v71, &qword_1007FF238);
  uint64_t v58 = (uint64_t *)(v57 + *(int *)(v69 + 36));
  *uint64_t v58 = v55;
  v58[1] = v52;
  v58[2] = 0;
  v58[3] = v56;
  sub_10001457C(v51, &qword_1007FF238);
  uint64_t v59 = (uint64_t)v75;
  State.projectedValue.getter();
  type metadata accessor for DateComponents();
  type metadata accessor for InsightsEntriesDetailAndToolbarView();
  sub_10012BA24();
  sub_10012BB70(&qword_1007FF270, (void (*)(uint64_t))&type metadata accessor for DateComponents);
  sub_10012BB70(&qword_1007FF278, (void (*)(uint64_t))type metadata accessor for InsightsEntriesDetailAndToolbarView);
  View.navigationDestination<A, B>(item:destination:)();
  sub_10001457C(v59, &qword_1007FF148);
  return sub_10001457C(v57, (uint64_t *)&unk_1007FF240);
}

uint64_t sub_10012B3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = __chkstk_darwin(v8);
  id v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12((char *)&v18 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  uint64_t v13 = (int *)type metadata accessor for InsightsEntriesDetailAndToolbarView();
  uint64_t v14 = a2 + v13[5];
  *(void *)uint64_t v14 = swift_getKeyPath();
  *(unsigned char *)(v14 + 8) = 0;
  uint64_t v15 = (uint64_t *)(a2 + v13[6]);
  *uint64_t v15 = swift_getKeyPath();
  sub_100010218(&qword_1007F9480);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = a2 + v13[7];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v16 = result;
  *(unsigned char *)(v16 + 8) = 0;
  return result;
}

uint64_t sub_10012B574@<X0>(uint64_t a1@<X8>)
{
  sub_10012AA18(v1, a1);
  uint64_t v3 = a1 + *(int *)(sub_100010218(&qword_1007FF228) + 52);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)uint64_t v3 = result;
  *(void *)(v3 + 8) = v5;
  *(unsigned char *)(v3 + 16) = v6 & 1;
  *(void *)(v3 + 24) = v7;
  return result;
}

id sub_10012B60C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = (void *)v1(v2);
  swift_release();

  return v3;
}

uint64_t sub_10012B65C()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t sub_10012B680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012B7E8(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Calendar, (uint64_t (*)(char *))&EnvironmentValues.calendar.setter);
}

uint64_t sub_10012B6AC()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_10012B6D0()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_10012B6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012B7E8(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_10012B720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012B7E8(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_10012B760()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t sub_10012B784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012B7E8(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Calendar, (uint64_t (*)(char *))&EnvironmentValues.calendar.setter);
}

uint64_t sub_10012B7C4()
{
  return EnvironmentValues.timeZone.getter();
}

uint64_t sub_10012B7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  __n128 v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10012B8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012B7E8(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for TimeZone, (uint64_t (*)(char *))&EnvironmentValues.timeZone.setter);
}

uint64_t sub_10012B8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012B95C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012B9C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10012BA24()
{
  unint64_t result = qword_1007FF258;
  if (!qword_1007FF258)
  {
    sub_100014440((uint64_t *)&unk_1007FF240);
    sub_10012BAA0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF258);
  }
  return result;
}

unint64_t sub_10012BAA0()
{
  unint64_t result = qword_1007FF260;
  if (!qword_1007FF260)
  {
    sub_100014440(&qword_1007FF238);
    sub_10012BB70(&qword_1007FF220, (void (*)(uint64_t))type metadata accessor for InsightsCalendarView.Representation);
    sub_100014488(&qword_1007FF268, &qword_1007FF250);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF260);
  }
  return result;
}

uint64_t sub_10012BB70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012BBC0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_10012BBF0()
{
  unint64_t result = qword_1007FF280;
  if (!qword_1007FF280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF280);
  }
  return result;
}

uint64_t sub_10012BC44(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012BC98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InsightsCalendarView.Representation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_10012BCFC()
{
  uint64_t v1 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateComponents.date.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v12 = v0
        + OBJC_IVAR____TtCVV7Journal20InsightsCalendarViewP33_DB82E41FEC15FAA6F37A37FAA16D9E2114Representation11Coordinator_parent;
    swift_beginAccess();
    uint64_t v13 = type metadata accessor for InsightsCalendarView.Representation(0);
    sub_10012B95C(v12 + *(int *)(v13 + 28), (uint64_t)v3, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
    uint64_t v14 = sub_100650BCC((uint64_t)v10);
    if (v16)
    {
      uint64_t v17 = v15;
      sub_10012C4F4(v14, v15, v16);
      sub_10012B9C4((uint64_t)v3, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
      if (v17 >= 1)
      {
        uint64_t v18 = self;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v17;
        aBlock[4] = sub_10012C4D4;
        aBlock[5] = v19;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10012B60C;
        aBlock[3] = &unk_10079AE70;
        uint64_t v20 = _Block_copy(aBlock);
        swift_release();
        id v11 = [v18 decorationWithCustomViewProvider:v20];
        _Block_release(v20);
LABEL_8:
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        return v11;
      }
    }
    else
    {
      sub_10012B9C4((uint64_t)v3, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
    }
    id v11 = 0;
    goto LABEL_8;
  }
  sub_10001457C((uint64_t)v6, (uint64_t *)&unk_1007FC470);
  return 0;
}

uint64_t sub_10012C030(uint64_t a1)
{
  uint64_t v38 = a1;
  uint64_t v1 = type metadata accessor for DateComponents();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v33 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100010218((uint64_t *)&unk_100815670);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010218(&qword_1007FF148);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FF070);
  __chkstk_darwin(v11 - 8);
  uint64_t v36 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v35 = (uint64_t)&v33 - v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v34 = v37
      + OBJC_IVAR____TtCVV7Journal20InsightsCalendarViewP33_DB82E41FEC15FAA6F37A37FAA16D9E2114Representation11Coordinator__selectedDate;
  sub_10001B220(v37+ OBJC_IVAR____TtCVV7Journal20InsightsCalendarViewP33_DB82E41FEC15FAA6F37A37FAA16D9E2114Representation11Coordinator__selectedDate, (uint64_t)v10, &qword_1007FF148);
  uint64_t v37 = v8;
  uint64_t v21 = v2;
  Binding.wrappedValue.getter();
  sub_10001457C((uint64_t)v10, &qword_1007FF148);
  uint64_t v22 = *(int *)(v5 + 56);
  uint64_t v23 = v38;
  uint64_t v24 = (uint64_t)&v7[v22];
  sub_10001B220((uint64_t)v20, (uint64_t)v7, (uint64_t *)&unk_1007FF070);
  sub_10001B220(v23, v24, (uint64_t *)&unk_1007FF070);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v25((uint64_t)v7, 1, v1) != 1)
  {
    sub_10001B220((uint64_t)v7, (uint64_t)v17, (uint64_t *)&unk_1007FF070);
    if (v25(v24, 1, v1) != 1)
    {
      uint64_t v28 = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v33, v24, v1);
      sub_10012BB70(&qword_1007FF298, (void (*)(uint64_t))&type metadata accessor for DateComponents);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
      v30(v28, v1);
      sub_10001457C((uint64_t)v20, (uint64_t *)&unk_1007FF070);
      v30(v17, v1);
      uint64_t result = sub_10001457C((uint64_t)v7, (uint64_t *)&unk_1007FF070);
      if (v29) {
        return result;
      }
      goto LABEL_8;
    }
    sub_10001457C((uint64_t)v20, (uint64_t *)&unk_1007FF070);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v1);
LABEL_6:
    sub_10001457C((uint64_t)v7, (uint64_t *)&unk_100815670);
LABEL_8:
    uint64_t v32 = v35;
    sub_10001B220(v23, v35, (uint64_t *)&unk_1007FF070);
    sub_10001B220(v34, (uint64_t)v10, &qword_1007FF148);
    sub_10001B220(v32, v36, (uint64_t *)&unk_1007FF070);
    Binding.wrappedValue.setter();
    sub_10001457C(v32, (uint64_t *)&unk_1007FF070);
    uint64_t v27 = (uint64_t)v10;
    uint64_t v26 = &qword_1007FF148;
    return sub_10001457C(v27, v26);
  }
  sub_10001457C((uint64_t)v20, (uint64_t *)&unk_1007FF070);
  if (v25(v24, 1, v1) != 1) {
    goto LABEL_6;
  }
  uint64_t v26 = (uint64_t *)&unk_1007FF070;
  uint64_t v27 = (uint64_t)v7;
  return sub_10001457C(v27, v26);
}

uint64_t sub_10012C4C4()
{
  return swift_deallocObject();
}

char *sub_10012C4D4()
{
  return sub_10024A24C();
}

uint64_t sub_10012C4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_10012C4EC()
{
  return swift_release();
}

uint64_t sub_10012C4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10012C538()
{
  return sub_100014488((unint64_t *)&unk_1007FF2B0, &qword_1007FF228);
}

id sub_10012C574()
{
  uint64_t v1 = OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationFade;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationFade);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationFade);
  }
  else
  {
    uint64_t v4 = v0;
    type metadata accessor for GradientView();
    sub_100010218((uint64_t *)&unk_1007FA1C0);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1006D6D10;
    uint64_t v6 = self;
    *(void *)(v5 + 32) = [v6 clearColor];
    *(void *)(v5 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = [v6 blackColor];
    specialized Array._endMutation()();
    static UnitPoint.leading.getter();
    static UnitPoint.trailing.getter();
    id v7 = sub_1005D4D6C();
    uint64_t v8 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v7;
    id v3 = v7;

    uint64_t v2 = 0;
  }
  id v9 = v2;
  return v3;
}

id sub_10012C6A0()
{
  uint64_t v1 = OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationIcon;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationIcon);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationIcon);
  }
  else
  {
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [self systemImageNamed:v4];

    id v6 = [objc_allocWithZone((Class)UIImageView) initWithImage:v5];
    id v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t sub_10012C770()
{
  uint64_t v1 = sub_100010218((uint64_t *)&unk_100804220);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  NSString v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = (void *)sub_10012C900();

  if (v5)
  {
    char v6 = 1;
  }
  else
  {
    id v7 = [v0 textStorage];
    id v8 = [v7 string];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    v13[0] = v9;
    v13[1] = v11;
    Regex.init(_regexString:version:)();
    sub_1000143EC();
    sub_1000D3A90();
    char v6 = BidirectionalCollection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

uint64_t sub_10012C900()
{
  uint64_t v19 = 0;
  id v20 = 0;
  id v1 = [v0 textLayoutManager];
  if (!v1)
  {
    id v8 = 0;
LABEL_6:
    uint64_t v9 = v19;

    sub_10001ABB8((uint64_t)v8);
    return (uint64_t)v9;
  }
  uint64_t v2 = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &v20;
  *(void *)(v3 + 24) = &v19;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_10012E2AC;
  *(void *)(v4 + 24) = v3;
  v18[4] = sub_10012E3FC;
  v18[5] = v4;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_10012DFC8;
  v18[3] = &unk_10079AF60;
  id v5 = _Block_copy(v18);
  swift_retain();
  swift_release();
  id v6 = [v2 enumerateTextLayoutFragmentsFromLocation:0 options:0 usingBlock:v5];

  swift_unknownObjectRelease();
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v2 & 1) == 0)
  {
    if (!v19)
    {
      if (v20)
      {
        id v10 = [v20 rangeInElement];
        if (v10)
        {
          uint64_t v11 = v10;
          id v12 = [v0 textLayoutManager];
          if (v12)
          {
            uint64_t v13 = v12;
            id v14 = [v12 documentRange];

            id v15 = [v14 endLocation];
            if (v15)
            {
              id v16 = objc_msgSend(objc_msgSend(v11, "endLocation"), "compare:", v15);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              if (v16 == (id)-1)
              {
                uint64_t v17 = v19;
                uint64_t v19 = v11;
                uint64_t v11 = v17;
              }
            }
          }
        }
      }
    }
    id v8 = sub_10012E2AC;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

id sub_10012CBE0(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v5[OBJC_IVAR____TtC7Journal16TimelineTextView_isAlwaysTruncated] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationFade] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationIcon] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7Journal16TimelineTextView_truncationFadeLength] = 0x4044000000000000;
  v29.receiver = v5;
  v29.super_class = ObjectType;
  id v12 = [super initWithFrame:a1 textContainer:a2];
  [v12 setScrollEnabled:0];
  [v12 setDelegate:v12];
  [v12 setContentMode:5];
  [v12 setEditable:0];
  [v12 setSelectable:0];
  id v13 = [v12 textLayoutManager];
  if (v13)
  {
    id v14 = v13;
    [v13 setLimitsLayoutForSuspiciousContents:1];
  }
  id v15 = [v12 textContainer];
  [v15 setLineBreakMode:4];

  [v12 setSupportsAdaptiveImageGlyph:0];
  id v16 = sub_10012C574();
  [v16 setHidden:1];

  id v17 = sub_10012C574();
  id v18 = [v17 layer];

  [v18 setCompositingFilter:kCAFilterDestOut];
  id v19 = sub_10012C6A0();
  [v19 setHidden:1];

  id v20 = sub_10012C6A0();
  uint64_t v21 = self;
  id v22 = [v21 configurationWithTextStyle:UIFontTextStyleBody scale:1];
  id v23 = [v21 configurationWithWeight:6];
  id v24 = [v22 configurationByApplyingConfiguration:v23];

  id v25 = [self secondaryLabelColor];
  id v26 = [v21 configurationWithHierarchicalColor:v25];

  id v27 = [v24 configurationByApplyingConfiguration:v26];
  [v20 setPreferredSymbolConfiguration:v27];

  return v12;
}

void sub_10012D0D4()
{
  id v1 = v0;
  id v2 = [v0 textLayoutManager];
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_10012C900();
  if (!v4)
  {

    goto LABEL_6;
  }
  id v5 = (void *)v4;
  sub_10012D570(v4, (uint64_t)v54);
  sub_10012E2C4((uint64_t)v54, (uint64_t)v55);
  if (v56)
  {

LABEL_6:
    id v6 = sub_10012C574();
    [v6 setHidden:1];

    id v7 = sub_10012C6A0();
    [v7 setHidden:1];
    goto LABEL_7;
  }
  CGFloat v8 = *(double *)v55;
  CGFloat v9 = *(double *)&v55[1];
  double v10 = *(double *)&v55[2];
  double v11 = *(double *)&v55[3];
  id v12 = [v3 baseWritingDirectionAtLocation:[v5 endLocation]];
  swift_unknownObjectRelease();
  id v13 = [v3 textViewportLayoutController];
  id v14 = sub_10012C574();
  sub_10001B284(0, (unint64_t *)&qword_1007FF330);
  id v15 = NSString.init(stringLiteral:)();
  [v13 addRenderingSurface:v14 key:v15 group:0 placement:0];

  id v16 = sub_10012C574();
  id v17 = v16;
  if (v12) {
    uint64_t v18 = 4;
  }
  else {
    uint64_t v18 = 3;
  }
  [v16 setSemanticContentAttribute:v18];

  id v19 = sub_10012C574();
  [v19 setHidden:0];

  id v20 = [v3 textViewportLayoutController];
  id v21 = sub_10012C6A0();
  id v22 = NSString.init(stringLiteral:)();
  [v20 addRenderingSurface:v21 key:v22 group:0 placement:0];

  id v23 = sub_10012C6A0();
  [v23 setSemanticContentAttribute:v18];

  id v24 = sub_10012C6A0();
  [v24 setHidden:0];

  id v25 = sub_10012C6A0();
  [v25 sizeThatFits:v10, v11];
  double v27 = v26;
  double v51 = v28;

  double v29 = *(double *)&v1[OBJC_IVAR____TtC7Journal16TimelineTextView_truncationFadeLength];
  double v52 = v27;
  double v30 = v27 + v29;
  id v31 = sub_10012C574();
  double v32 = 0.0;
  if (!v12)
  {
    v57.origin.CGFloat x = v8;
    v57.origin.CGFloat y = v9;
    v57.size.CGFloat width = v10;
    v57.size.CGFloat height = v11;
    double v32 = CGRectGetMaxX(v57) - v30;
  }
  v58.origin.CGFloat x = v8;
  v58.origin.CGFloat y = v9;
  v58.size.CGFloat width = v10;
  v58.size.CGFloat height = v11;
  CGFloat MinY = CGRectGetMinY(v58);
  CGFloat v34 = v8;
  double v35 = MinY;
  v59.origin.CGFloat y = v9;
  CGFloat v36 = v34;
  v59.origin.CGFloat x = v34;
  v59.size.CGFloat width = v10;
  CGFloat y = v59.origin.y;
  v59.size.CGFloat height = v11;
  CGFloat width = v59.size.width;
  CGFloat height = v59.size.height;
  [v31 setFrame:v32, v35, v30, CGRectGetHeight(v59)];

  id v40 = sub_10012C574();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v41 = (void (*)(char *, void))static UIView.Invalidating.subscript.modify();
  double *v42 = v29 / v30;
  v41(v53, 0);

  swift_release();
  swift_release();
  id v7 = sub_10012C6A0();
  CGFloat v43 = v36;
  CGFloat v44 = y;
  CGFloat v45 = y;
  CGFloat v46 = width;
  CGFloat v47 = height;
  CGFloat v48 = height;
  if (v12)
  {
    double MinX = CGRectGetMinX(*(CGRect *)&v43);
    double v50 = v52;
  }
  else
  {
    double v50 = v52;
    double MinX = CGRectGetMaxX(*(CGRect *)&v43) - v52;
  }
  v60.origin.CGFloat x = v36;
  v60.origin.CGFloat y = v44;
  v60.size.CGFloat width = width;
  v60.size.CGFloat height = v47;
  [v7 setFrame:MinX, CGRectGetMidY(v60) + v51 * -0.5, v50];

LABEL_7:
}

uint64_t sub_10012D570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v17 = 0u;
  long long v18 = 0u;
  char v5 = 1;
  char v19 = 1;
  id v6 = (uint64_t (*)(CGFloat, CGFloat, CGFloat, CGFloat, uint64_t, void *))[v2 textLayoutManager];
  id v7 = v6;
  if (!v6)
  {
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_5;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v17;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10012E344;
  *(void *)(v9 + 24) = v8;
  v16[4] = sub_10012E3E4;
  v16[5] = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  uint64_t v16[2] = sub_1005A87A0;
  v16[3] = &unk_10079AFD8;
  double v10 = _Block_copy(v16);
  swift_retain();
  swift_release();
  [v7 enumerateTextSegmentsInRange:a1 type:1 options:1 usingBlock:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v13 = *((void *)&v17 + 1);
    uint64_t v14 = v17;
    uint64_t v15 = *((void *)&v18 + 1);
    id v7 = (uint64_t (*)(CGFloat, CGFloat, CGFloat, CGFloat, uint64_t, void *))v18;
    id v6 = sub_10012E344;
    char v5 = v19;
LABEL_5:
    uint64_t result = sub_10001ABB8((uint64_t)v6);
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v15;
    *(unsigned char *)(a2 + 32) = v5;
    return result;
  }
  __break(1u);
  return result;
}

void sub_10012D750(char a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = OBJC_IVAR____TtC7Journal14CanvasTextView_journalEntry;
  uint64_t v7 = *(void *)&v3[OBJC_IVAR____TtC7Journal14CanvasTextView_journalEntry];
  if (!v7 || (id v8 = *(id *)(v7 + OBJC_IVAR____TtCC7Journal10Journaling14EntryViewModel_text)) == 0)
  {
    id v8 = 0;
    v3[OBJC_IVAR____TtC7Journal16TimelineTextView_isAlwaysTruncated] = 0;
    if (a1) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  id v11 = v8;
  uint64_t v12 = (uint64_t)[v11 length];
  v4[OBJC_IVAR____TtC7Journal16TimelineTextView_isAlwaysTruncated] = v12 > 2000;
  if (v12 >= 2001 && (a3 & 1) == 0)
  {
    id v8 = [v11 attributedSubstringFromRange:0, 2000];

    if (!v8) {
      goto LABEL_10;
    }
    id v11 = v8;
  }
  id v13 = v11;
  id v14 = [v4 traitCollection];
  id v8 = (id)sub_100020C00(v14, v8, 0, 8.0);

  if ((a2 & 1) == 0 && v8)
  {
    id v15 = v8;
    id v8 = sub_1000497EC();
  }
LABEL_10:
  if (a1) {
    goto LABEL_18;
  }
LABEL_13:
  id v16 = [v4 attributedText];
  if (!v16)
  {
    if (!v8) {
      goto LABEL_44;
    }
    goto LABEL_18;
  }
  long long v17 = v16;
  if (v8)
  {
    sub_10001B284(0, (unint64_t *)&qword_1007FBCA0);
    id v18 = v8;
    id v19 = v17;
    char v20 = static NSObject.== infix(_:_:)();

    if (v20) {
      goto LABEL_43;
    }
LABEL_18:
    uint64_t v21 = *(void *)&v4[v6];
    if (!v21) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }

  uint64_t v21 = *(void *)&v4[v6];
  if (!v21) {
    goto LABEL_27;
  }
LABEL_19:
  id v22 = *(void **)(v21 + 32);
  swift_retain();
  signed int v23 = [v22 minimumSupportedAppVersion];
  if (qword_1007F6AA8 != -1) {
    swift_once();
  }
  if (static Journaling.EntryViewModel.currentAppVersion < v23)
  {
    unsigned int v24 = [*(id *)(v21 + 32) minimumSupportedAppVersionMode];
    if (v24 == 1)
    {
      if (qword_1007F75D8 != -1) {
        swift_once();
      }
      id v29 = objc_allocWithZone((Class)NSAttributedString);
      swift_bridgeObjectRetain();
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v31 = [v29 initWithString:v30];

      [v4 setAttributedText:v31];
      if (qword_1007F7280 != -1) {
        swift_once();
      }
      [v4 setFont:qword_10083D848];
      id v32 = [self secondaryLabelColor];
    }
    else
    {
      if ((unsigned __int16)v24 != 2)
      {
        id v33 = objc_allocWithZone((Class)NSAttributedString);
        NSString v34 = String._bridgeToObjectiveC()();
        id v35 = [v33 initWithString:v34];

        CGFloat v36 = &selRef_setAttributedText_;
LABEL_41:
        [v4 *v36 v35];

        swift_release();
        goto LABEL_42;
      }
      if (v8)
      {
        id v25 = [v8 string];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v26 = objc_allocWithZone((Class)NSAttributedString);
        swift_bridgeObjectRetain();
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v28 = [v26 initWithString:v27];
        swift_bridgeObjectRelease();
      }
      else
      {
        id v28 = 0;
      }
      [v4 setAttributedText:v28];

      if (qword_1007F7280 != -1) {
        swift_once();
      }
      [v4 setFont:qword_10083D848];
      id v32 = [self labelColor];
    }
    id v35 = v32;
    CGFloat v36 = &selRef_setTextColor_;
    goto LABEL_41;
  }
  swift_release();
LABEL_27:
  [v4 setAttributedText:v8];
LABEL_42:
  id v18 = v8;
LABEL_43:

LABEL_44:

  sub_1005AAE84();
}

uint64_t sub_10012DC70(uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v12 = 0;
  char v13 = 1;
  id v2 = (uint64_t (*)(void *))[v1 textLayoutManager];
  uint64_t v3 = v2;
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &v11;
  *(void *)(v4 + 24) = &v12;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10012E240;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_10012E258;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10012DFC8;
  aBlock[3] = &unk_10079AEE8;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v7 = [v3 enumerateTextLayoutFragmentsFromLocation:0 options:4 usingBlock:v6];

  swift_unknownObjectRelease();
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v3 = v12;
    id v2 = sub_10012E240;
LABEL_4:
    sub_10001ABB8((uint64_t)v2);
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10012DE3C(void *a1, uint64_t *a2, uint64_t a3)
{
  id v6 = [a1 textLineFragments];
  sub_10001B284(0, (unint64_t *)&qword_1007FF308);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100561030(*a2, v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v15 = v13 >> 1;
  if (v11 == v13 >> 1)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  if (v15 <= v11)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v16 = v15 - v11;
  if (__OFSUB__(v15, v11))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  BOOL v17 = __OFSUB__(*a2, v16);
  uint64_t v18 = *a2 - v16;
  if (!v17)
  {
    id v19 = *(void **)(v9 + 8 * v15 - 8);
    *a2 = v18;
    id v20 = v19;
    [a1 layoutFragmentFrame];
    double MinY = CGRectGetMinY(v23);
    [v20 typographicBounds];
    double MaxY = CGRectGetMaxY(v24);
    swift_unknownObjectRelease();

    *(double *)a3 = ceil(MinY + MaxY);
    *(unsigned char *)(a3 + 8) = 0;
    return *a2 != 0;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10012DF9C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_10012DFC8(uint64_t a1, void *a2)
{
  id v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

void sub_10012E00C()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16TimelineTextView____lazy_storage___truncationIcon);
}

uint64_t type metadata accessor for TimelineTextView()
{
  return self;
}

void sub_10012E0E4(void *a1, void **a2, void **a3)
{
  if ([a1 state] == (id)3)
  {
    id v6 = *a2;
    *a2 = a1;
    id v7 = a1;

    id v8 = [v7 truncatedRanges];
    if (!v8)
    {
LABEL_10:
      uint64_t v11 = *a3;
      *a3 = v8;

      return;
    }
    sub_10001B284(0, (unint64_t *)&unk_1007FF320);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      id v8 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_9;
      }
    }
    else
    {
      id v8 = *(id *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v8)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    if ((v9 & 0xC000000000000001) != 0)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_8;
    }
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v10 = *(id *)(v9 + 32);
LABEL_8:
      id v8 = v10;
      goto LABEL_9;
    }
    __break(1u);
  }
}

uint64_t sub_10012E230()
{
  return swift_deallocObject();
}

uint64_t sub_10012E240(void *a1)
{
  return sub_10012DE3C(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10012E248()
{
  return swift_deallocObject();
}

uint64_t sub_10012E258()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10012E284(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_10012E294()
{
  return swift_release();
}

uint64_t sub_10012E29C()
{
  return swift_deallocObject();
}

void sub_10012E2AC(void *a1)
{
  sub_10012E0E4(a1, *(void ***)(v1 + 16), *(void ***)(v1 + 24));
}

uint64_t sub_10012E2B4()
{
  return swift_deallocObject();
}

uint64_t sub_10012E2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218((uint64_t *)&unk_10080E010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012E334()
{
  return swift_deallocObject();
}

uint64_t sub_10012E344(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, void *a6)
{
  uint64_t v12 = *(void *)(v6 + 16);
  CGFloat MinY = CGRectGetMinY(*(CGRect *)&a1);
  [a6 size];
  uint64_t v15 = v14;
  v18.origin.CGFloat x = a1;
  v18.origin.CGFloat y = a2;
  v18.size.CGFloat width = a3;
  v18.size.CGFloat height = a4;
  CGFloat Height = CGRectGetHeight(v18);
  *(void *)uint64_t v12 = 0;
  *(CGFloat *)(v12 + 8) = MinY;
  *(void *)(v12 + 16) = v15;
  *(CGFloat *)(v12 + 24) = Height;
  *(unsigned char *)(v12 + 32) = 0;
  return 1;
}

uint64_t sub_10012E3D4()
{
  return swift_deallocObject();
}

uint64_t sub_10012E3E4(uint64_t a1, uint64_t a2)
{
  return sub_1005A8774(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t type metadata accessor for JurassicAppleAccount()
{
  return self;
}

id sub_10012E424()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v69 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  uint64_t v67 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v66 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v8 - 8);
  uint64_t v70 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v65 = (char *)&v60 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v60 - v13;
  __chkstk_darwin(v15);
  uint64_t v62 = (char *)&v60 - v16;
  uint64_t v61 = type metadata accessor for UTType();
  uint64_t v17 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  id v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)sub_10012F3A4(v1);
  unint64_t v22 = v21;
  id v68 = v1;
  id v23 = [v1 text];
  int v63 = v14;
  if (v23
    && (uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
        unint64_t v26 = v25,
        v23,
        id v23 = sub_100041F24(v24, v26),
        sub_100040DD0(v24, v26),
        v23))
  {
    id v27 = [v23 string];

    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v23 = v29;
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v22) {
    uint64_t v30 = v20 & 0xFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v30 = 0;
  }
  if (v22) {
    unint64_t v31 = v22;
  }
  else {
    unint64_t v31 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v32 = v30;
  }
  if (v32) {
    goto LABEL_23;
  }
  uint64_t v33 = v28 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  if (v23) {
    unint64_t v34 = (unint64_t)v23;
  }
  else {
    unint64_t v34 = 0xE000000000000000;
  }
  if (!v23) {
    uint64_t v33 = 0;
  }
  swift_bridgeObjectRelease();
  if ((v34 & 0x2000000000000000) != 0 ? HIBYTE(v34) & 0xF : v33)
  {
LABEL_23:
    static UTType.item.getter();
    id v36 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
    Class isa = UTType._bridgeToObjectiveC()().super.isa;
    id v38 = [v36 initWithContentType:isa];

    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v61);
    sub_100042914(v20, v22, v28, (unint64_t)v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v39 = v68;
    Class v40 = (Class)[v68 updatedDate];
    if (v40)
    {
      uint64_t v41 = v64;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = v66;
      CGFloat v43 = v62;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v62, v41, v6);
      CGFloat v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
      v44(v43, 0, 1, v6);
      int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v43, 1, v6);
      CGFloat v46 = v63;
      if (v45 == 1)
      {
        Class v40 = 0;
      }
      else
      {
        CGFloat v47 = v43;
        Class v40 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v6);
      }
    }
    else
    {
      uint64_t v42 = v66;
      CGFloat v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
      v44(v62, 1, 1, v6);
      CGFloat v46 = v63;
      uint64_t v41 = v64;
    }
    [v38 setLastUsedDate:v40];

    Class v48 = (Class)[v39 createdDate];
    if (v48)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v46, v41, v6);
      v44(v46, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v46, 1, v6) == 1)
      {
        Class v48 = 0;
      }
      else
      {
        Class v48 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v6);
      }
    }
    else
    {
      v44(v46, 1, 1, v6);
    }
    [v38 setContentCreationDate:v48];

    Class v49 = (Class)[v39 updatedDate];
    if (v49)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      double v50 = v65;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v65, v41, v6);
      v44(v50, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v50, 1, v6) == 1)
      {
        Class v49 = 0;
      }
      else
      {
        Class v49 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v50, v6);
      }
    }
    else
    {
      v44(v65, 1, 1, v6);
    }
    [v38 setContentModificationDate:v49];

    id v51 = [objc_allocWithZone((Class)NSNumber) initWithBool:sub_10035EE44() != 4];
    [v38 setDisableSearchInSpotlight:v51];

    double v52 = v70;
    sub_1002941E4(v70);
    v44(v52, 0, 1, v6);
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v53 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v55 = v54;
    sub_100010218(&qword_1007FC170);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1006D6280;
    *(void *)(v56 + 32) = sub_100044F68(v53, v55, (uint64_t)v52);
    *(void *)(v56 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v57;
    Class v58 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v38 setAlternateNames:v58];
    swift_bridgeObjectRelease();

    sub_10001457C((uint64_t)v52, (uint64_t *)&unk_1007FC470);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v38;
}

id sub_10012ECCC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v47 - v6;
  uint64_t v8 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v8 - 8);
  Class v49 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v47 - v17;
  id v19 = sub_10017E76C();
  id v20 = sub_10012F478(v19, v0);
  id v21 = v20;
  if (v20)
  {
    Class v48 = v4;
    id v22 = v20;
    id v23 = (objc_class *)[v0 entry];
    Class isa = v23;
    uint64_t v50 = v2;
    if (v23)
    {
      id v25 = [(objc_class *)v23 updatedDate];

      if (v25)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v15, 0, 1, v26);
      }
      else
      {
        uint64_t v26 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v15, 1, 1, v26);
      }
      sub_10002C4EC((uint64_t)v15, (uint64_t)v18, (uint64_t *)&unk_1007FC470);
      type metadata accessor for Date();
      uint64_t v28 = *(void *)(v26 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v18, 1, v26) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v26);
      }
    }
    else
    {
      uint64_t v27 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v18, 1, 1, v27);
    }
    [v22 setLastUsedDate:isa];

    id v29 = v22;
    id v30 = [v29 thumbnailURL];
    if (v30)
    {
      unint64_t v31 = v30;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v12, v7, v1);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v12, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1, v1) != 1)
      {
        sub_10001457C((uint64_t)v12, (uint64_t *)&unk_100800A60);

LABEL_18:
        id v44 = v29;
        id v45 = [objc_allocWithZone((Class)NSNumber) initWithBool:sub_10035EE44() != 4];
        [v44 setDisableSearchInSpotlight:v45];

        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v32 = v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v12, 1, 1, v1);
    }
    sub_10001457C((uint64_t)v12, (uint64_t *)&unk_100800A60);
    id v33 = [v29 thumbnailData];
    if (v33)
    {
      id v35 = v33;
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      sub_100040DD0(v36, v38);
    }
    else
    {
      uint64_t v39 = (uint64_t)v49;
      sub_1005E7E80(0, 1, v34);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v39, 1, v1) == 1)
      {

        sub_10001457C(v39, (uint64_t *)&unk_100800A60);
      }
      else
      {
        Class v40 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v48, v39, v1);
        URL._bridgeToObjectiveC()(v41);
        CGFloat v43 = v42;
        [v29 setThumbnailURL:v42];

        (*(void (**)(char *, uint64_t))(v32 + 8))(v40, v1);
      }
    }
    goto LABEL_18;
  }
LABEL_19:

  return v21;
}

uint64_t sub_10012F2A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FF3D0);
  sub_100026A54(v0, (uint64_t)qword_1007FF3D0);
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();

  return swift_bridgeObjectRelease();
}

id sub_10012F3A4(void *a1)
{
  if (![a1 showTitle]) {
    return 0;
  }
  id v2 = [a1 title];
  if (v2)
  {
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    id v2 = sub_100041F24(v3, v5);
    sub_100040DD0(v3, v5);
    if (v2)
    {
      id v6 = [v2 string];

      id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  return v2;
}

id sub_10012F478(void *a1, void *a2)
{
  uint64_t v4 = sub_100010218((uint64_t *)&unk_100807640);
  __chkstk_darwin(v4 - 8);
  uint64_t v524 = (uint64_t)&v511 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v520 = _s16StateOfMindAssetC15StateOfMindDataVMa(0);
  uint64_t v518 = *(void *)(v520 - 8);
  __chkstk_darwin(v520);
  uint64_t v517 = (uint64_t)&v511 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v521 = _s9LinkAssetC8LinkDataVMa(0);
  uint64_t v519 = *(void *)(v521 - 8);
  __chkstk_darwin(v521);
  uint64_t v514 = (uint64_t)&v511 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010218(&qword_1007F9F68);
  __chkstk_darwin(v8 - 8);
  uint64_t v525 = (uint64_t)&v511 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v573 = type metadata accessor for URL();
  uint64_t v574 = *(void *)(v573 - 8);
  __chkstk_darwin(v573);
  v516 = (char *)&v511 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218(&qword_1007F9EE0);
  __chkstk_darwin(v11 - 8);
  uint64_t v537 = (uint64_t)&v511 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v536 = _s12ContactAssetC11ContactDataVMa(0);
  uint64_t v534 = *(void *)(v536 - 8);
  __chkstk_darwin(v536);
  v529 = (uint64_t *)((char *)&v511 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v533 = _s10AudioAssetC9AudioDataVMa(0);
  uint64_t v531 = *(void *)(v533 - 8);
  __chkstk_darwin(v533);
  uint64_t v523 = (uint64_t)&v511 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100010218(&qword_1007F9E38);
  __chkstk_darwin(v15 - 8);
  uint64_t v535 = (uint64_t)&v511 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100010218(&qword_1007F9DD8);
  __chkstk_darwin(v17 - 8);
  uint64_t v547 = (uint64_t)&v511 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = _s20ThirdPartyMediaAssetC12MetadataTypeVMa(0);
  uint64_t v546 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v540 = (uint64_t)&v511 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v545 = (uint64_t *)((char *)&v511 - v22);
  uint64_t v23 = sub_100010218(&qword_1007F9E90);
  __chkstk_darwin(v23 - 8);
  uint64_t v553 = (uint64_t)&v511 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v552 = _s9BookAssetC8BookDataVMa(0);
  uint64_t v551 = *(void *)(v552 - 8);
  __chkstk_darwin(v552);
  uint64_t v26 = (char *)&v511 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100010218(&qword_1007F9E58);
  __chkstk_darwin(v27 - 8);
  uint64_t v559 = (uint64_t)&v511 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v560 = _s10MusicAssetC9MusicDataVMa(0);
  uint64_t v558 = *(void *)(v560 - 8);
  __chkstk_darwin(v560);
  uint64_t v548 = (uint64_t)&v511 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v554 = (char *)&v511 - v31;
  uint64_t v32 = sub_100010218(&qword_1007F8F98);
  __chkstk_darwin(v32 - 8);
  uint64_t v564 = (uint64_t)&v511 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v565 = _s12PodcastAssetC11PodcastDataVMa(0);
  uint64_t v563 = *(void *)(v565 - 8);
  __chkstk_darwin(v565);
  id v35 = (char *)&v511 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100010218((uint64_t *)&unk_100804090);
  __chkstk_darwin(v36 - 8);
  uint64_t v571 = (uint64_t)&v511 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v572 = _s14LivePhotoAssetC13LivePhotoDataVMa(0);
  uint64_t v570 = *(void *)(v572 - 8);
  __chkstk_darwin(v572);
  v566 = (char *)&v511 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100010218((uint64_t *)&unk_100800A60);
  __chkstk_darwin(v39 - 8);
  v522 = (char *)&v511 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  uint64_t v526 = (uint64_t)&v511 - v42;
  __chkstk_darwin(v43);
  uint64_t v541 = (uint64_t)&v511 - v44;
  __chkstk_darwin(v45);
  uint64_t v549 = (uint64_t)&v511 - v46;
  __chkstk_darwin(v47);
  v555 = (char *)&v511 - v48;
  __chkstk_darwin(v49);
  v569 = (char *)&v511 - v50;
  uint64_t v51 = sub_100010218(&qword_1007F9E10);
  __chkstk_darwin(v51 - 8);
  uint64_t v578 = (uint64_t)&v511 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v579 = _s10VideoAssetC9VideoDataVMa(0);
  uint64_t v577 = *(void *)(v579 - 8);
  __chkstk_darwin(v579);
  uint64_t v575 = (uint64_t)&v511 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100010218((uint64_t *)&unk_100804080);
  __chkstk_darwin(v54 - 8);
  uint64_t v56 = (char *)&v511 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v587 = _s10PhotoAssetC9PhotoDataVMa(0);
  uint64_t v586 = *(void *)(v587 - 8);
  __chkstk_darwin(v587);
  uint64_t v580 = (uint64_t)&v511 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Locale();
  __chkstk_darwin(v58 - 8);
  v582 = (char *)&v511 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v60 - 8);
  v581 = (char *)&v511 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v62 - 8);
  uint64_t v513 = (uint64_t)&v511 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  v515 = (char *)&v511 - v65;
  __chkstk_darwin(v66);
  uint64_t v527 = (uint64_t)&v511 - v67;
  __chkstk_darwin(v68);
  v528 = (char *)&v511 - v69;
  __chkstk_darwin(v70);
  uint64_t v530 = (uint64_t)&v511 - v71;
  __chkstk_darwin(v72);
  v532 = (char *)&v511 - v73;
  __chkstk_darwin(v74);
  uint64_t v538 = (uint64_t)&v511 - v75;
  __chkstk_darwin(v76);
  v539 = (char *)&v511 - v77;
  __chkstk_darwin(v78);
  uint64_t v543 = (uint64_t)&v511 - v79;
  __chkstk_darwin(v80);
  v542 = (char *)&v511 - v81;
  __chkstk_darwin(v82);
  v544 = (char *)&v511 - v83;
  __chkstk_darwin(v84);
  v550 = (char *)&v511 - v85;
  __chkstk_darwin(v86);
  v556 = (char *)&v511 - v87;
  __chkstk_darwin(v88);
  uint64_t v561 = (uint64_t)&v511 - v89;
  __chkstk_darwin(v90);
  v562 = (char *)&v511 - v91;
  __chkstk_darwin(v92);
  uint64_t v567 = (uint64_t)&v511 - v93;
  __chkstk_darwin(v94);
  v568 = (char *)&v511 - v95;
  __chkstk_darwin(v96);
  uint64_t v98 = (char *)&v511 - v97;
  __chkstk_darwin(v99);
  v576 = (char *)&v511 - v100;
  __chkstk_darwin(v101);
  uint64_t v103 = (char *)&v511 - v102;
  uint64_t v584 = type metadata accessor for UTType();
  uint64_t v585 = *(void *)(v584 - 8);
  __chkstk_darwin(v584);
  v583 = (char *)&v511 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  v590 = a1;
  _s5AssetCMa();
  id v105 = a1;
  sub_100010218(&qword_1007FF3E8);
  char v106 = swift_dynamicCast();
  v557 = v35;
  if (v106)
  {
    sub_10001B3BC(v588, (uint64_t)v591);
    uint64_t v107 = v26;
    uint64_t v108 = v19;
    uint64_t v109 = a2;
    unint64_t v110 = v593;
    uint64_t v111 = v594;
    sub_10002E0BC(v591, v593);
    unint64_t v112 = v110;
    a2 = v109;
    uint64_t v19 = v108;
    uint64_t v26 = v107;
    id v113 = (id)(*(uint64_t (**)(unint64_t, uint64_t))(v111 + 8))(v112, v111);
    _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v591);
    if (v113) {
      return v113;
    }
  }
  else
  {
    uint64_t v589 = 0;
    memset(v588, 0, sizeof(v588));
    sub_10001457C((uint64_t)v588, &qword_1007FF3F0);
  }
  _s15ReflectionAssetCMa();
  if (swift_dynamicCastClass())
  {
    id v114 = v105;
    sub_1003F2ABC(v591);
    unint64_t v115 = v593;
    if (v593 >> 60 != 11 && v593 >> 60 != 15)
    {
      uint64_t v116 = v591[0];
      uint64_t v117 = v591[1];
      uint64_t v118 = v592;
      id v119 = sub_100041F24(v592, v593);
      sub_100040F54(v116, v117, v118, v115);
      if (v119)
      {
        id v120 = [v119 string];

        uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v123 = v122;

        uint64_t v124 = v583;
        static UTType.item.getter();
        id v125 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
        Class isa = UTType._bridgeToObjectiveC()().super.isa;
        id v113 = [v125 initWithContentType:isa];

        (*(void (**)(char *, uint64_t))(v585 + 8))(v124, v584);
        sub_100042914(v121, v123, 0, 0);
        swift_bridgeObjectRelease();
        id v127 = [a2 entry];
        if (v127)
        {
          uint64_t v128 = v127;
          sub_1002941E4(v103);

          uint64_t v129 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v103, 0, 1, v129);
        }
        else
        {
          uint64_t v171 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 56))(v103, 1, 1, v171);
        }
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        uint64_t v172 = String.init(localized:table:bundle:locale:comment:)();
        uint64_t v174 = v173;
        sub_100010218(&qword_1007FC170);
        uint64_t v175 = swift_allocObject();
        *(_OWORD *)(v175 + 16) = xmmword_1006D6280;
        *(void *)(v175 + 32) = sub_100044F68(v172, v174, (uint64_t)v103);
        *(void *)(v175 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v176;
        Class v177 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v113 setAlternateNames:v177];

        swift_bridgeObjectRelease();
        sub_10001457C((uint64_t)v103, (uint64_t *)&unk_1007FC470);
        return v113;
      }
    }
    goto LABEL_234;
  }
  _s10PhotoAssetCMa(0);
  if (swift_dynamicCastClass())
  {
    id v130 = v105;
    sub_1003F2F2C((uint64_t)v56);
    uint64_t v131 = v587;
    if ((*(unsigned int (**)(char *, uint64_t, void))(v586 + 48))(v56, 1, v587) == 1)
    {

      sub_10001457C((uint64_t)v56, (uint64_t *)&unk_100804080);
      return 0;
    }
    uint64_t v136 = (uint64_t)v56;
    uint64_t v137 = v580;
    sub_100133FE0(v136, v580, _s10PhotoAssetC9PhotoDataVMa);
    id v138 = (uint64_t *)(v137 + *(int *)(v131 + 24));
    unint64_t v139 = v138[1];
    if (!v139)
    {

      sub_100134048(v137, _s10PhotoAssetC9PhotoDataVMa);
      return 0;
    }
    uint64_t v140 = *v138;
    swift_bridgeObjectRetain();
    CGRect v141 = v583;
    static UTType.image.getter();
    id v142 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
    Class v143 = UTType._bridgeToObjectiveC()().super.isa;
    id v113 = [v142 initWithContentType:v143];

    (*(void (**)(char *, uint64_t))(v585 + 8))(v141, v584);
    sub_100042914(v140, v139, 0, 0);
    swift_bridgeObjectRelease();
    sub_10001B220(v137 + *(int *)(v131 + 20), (uint64_t)v98, (uint64_t *)&unk_1007FC470);
    uint64_t v144 = type metadata accessor for Date();
    uint64_t v145 = *(void *)(v144 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v98, 1, v144) == 1)
    {
      id v146 = [a2 entry];
      if (v146)
      {
        id v147 = v146;
        id v148 = v576;
        sub_1002941E4(v576);

        uint64_t v149 = 0;
      }
      else
      {
        uint64_t v149 = 1;
        id v148 = v576;
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v145 + 56))(v148, v149, 1, v144);
      sub_10001457C((uint64_t)v98, (uint64_t *)&unk_1007FC470);
    }
    else
    {
      id v148 = v576;
      (*(void (**)(unsigned char *, char *, uint64_t))(v145 + 32))(v576, v98, v144);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v145 + 56))(v148, 0, 1, v144);
    }
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v196 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v198 = v197;
    sub_100010218(&qword_1007FC170);
    uint64_t v199 = swift_allocObject();
    *(_OWORD *)(v199 + 16) = xmmword_1006D6280;
    *(void *)(v199 + 32) = sub_100044F68(v196, v198, (uint64_t)v148);
    *(void *)(v199 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v200;
    Class v201 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v113 setAlternateNames:v201];

    swift_bridgeObjectRelease();
    sub_10001457C((uint64_t)v148, (uint64_t *)&unk_1007FC470);
    uint64_t v202 = _s10PhotoAssetC9PhotoDataVMa;
LABEL_56:
    sub_100134048(v137, v202);
    return v113;
  }
  _s10VideoAssetCMa(0);
  if (swift_dynamicCastClass())
  {
    id v132 = v105;
    uint64_t v133 = v578;
    sub_1003F3154(v578);
    uint64_t v134 = v579;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v577 + 48))(v133, 1, v579) == 1)
    {

      id v135 = &qword_1007F9E10;
LABEL_60:
      sub_10001457C(v133, v135);
      return 0;
    }
    uint64_t v137 = v575;
    sub_100133FE0(v133, v575, _s10VideoAssetC9VideoDataVMa);
    id v152 = (uint64_t *)(v137 + *(int *)(v134 + 24));
    unint64_t v153 = v152[1];
    if (v153)
    {
      uint64_t v154 = *v152;
      swift_bridgeObjectRetain();
      uint64_t v155 = v583;
      static UTType.video.getter();
      id v156 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
      Class v157 = UTType._bridgeToObjectiveC()().super.isa;
      id v113 = [v156 initWithContentType:v157];

      (*(void (**)(char *, uint64_t))(v585 + 8))(v155, v584);
      id v158 = v569;
      sub_100513748(0, 1, v569);
      uint64_t v159 = v574;
      uint64_t v160 = v573;
      id v162 = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v574 + 48))(v158, 1, v573) != 1)
      {
        URL._bridgeToObjectiveC()(v161);
        id v162 = v163;
        (*(void (**)(char *, uint64_t))(v159 + 8))(v158, v160);
      }
      [v113 setContentURL:v162];

      sub_100042914(v154, v153, 0, 0);
      swift_bridgeObjectRelease();
      uint64_t v164 = v567;
      sub_10001B220(v137 + *(int *)(v579 + 20), v567, (uint64_t *)&unk_1007FC470);
      uint64_t v165 = type metadata accessor for Date();
      uint64_t v166 = *(void *)(v165 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165) == 1)
      {
        id v167 = [a2 entry];
        id v168 = v568;
        if (v167)
        {
          id v169 = v167;
          sub_1002941E4(v568);

          uint64_t v170 = 0;
        }
        else
        {
          uint64_t v170 = 1;
        }
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v166 + 56))(v168, v170, 1, v165);
        sub_10001457C(v164, (uint64_t *)&unk_1007FC470);
      }
      else
      {
        id v168 = v568;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v166 + 32))(v568, v164, v165);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v166 + 56))(v168, 0, 1, v165);
      }
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v207 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v209 = v208;
      sub_100010218(&qword_1007FC170);
      uint64_t v210 = swift_allocObject();
      *(_OWORD *)(v210 + 16) = xmmword_1006D6280;
      *(void *)(v210 + 32) = sub_100044F68(v207, v209, (uint64_t)v168);
      *(void *)(v210 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v211;
      Class v212 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v113 setAlternateNames:v212];

      swift_bridgeObjectRelease();
      sub_10001457C((uint64_t)v168, (uint64_t *)&unk_1007FC470);
      uint64_t v202 = _s10VideoAssetC9VideoDataVMa;
      goto LABEL_56;
    }
    v194 = _s10VideoAssetC9VideoDataVMa;
    uint64_t v195 = v137;
LABEL_43:
    sub_100134048(v195, v194);

    return 0;
  }
  _s14LivePhotoAssetCMa(0);
  if (swift_dynamicCastClass())
  {
    id v150 = v105;
    uint64_t v133 = v571;
    sub_1003F337C(v571);
    uint64_t v151 = v572;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v570 + 48))(v133, 1, v572) == 1)
    {

      id v135 = (uint64_t *)&unk_100804090;
      goto LABEL_60;
    }
    uint64_t v26 = v566;
    sub_100133FE0(v133, (uint64_t)v566, _s14LivePhotoAssetC13LivePhotoDataVMa);
    id v181 = (uint64_t *)&v26[*(int *)(v151 + 24)];
    unint64_t v182 = v181[1];
    if (!v182)
    {

      sub_100134048((uint64_t)v26, _s14LivePhotoAssetC13LivePhotoDataVMa);
      return 0;
    }
    uint64_t v183 = *v181;
    swift_bridgeObjectRetain();
    id v184 = v583;
    static UTType.livePhoto.getter();
    id v185 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
    Class v186 = UTType._bridgeToObjectiveC()().super.isa;
    id v113 = [v185 initWithContentType:v186];

    (*(void (**)(char *, uint64_t))(v585 + 8))(v184, v584);
    sub_100042914(v183, v182, 0, 0);
    swift_bridgeObjectRelease();
    uint64_t v187 = v561;
    sub_10001B220((uint64_t)&v26[*(int *)(v151 + 20)], v561, (uint64_t *)&unk_1007FC470);
    uint64_t v188 = type metadata accessor for Date();
    uint64_t v189 = *(void *)(v188 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188) == 1)
    {
      id v190 = [a2 entry];
      if (v190)
      {
        uint64_t v191 = v190;
        uint64_t v192 = v562;
        sub_1002941E4(v562);

        uint64_t v193 = 0;
      }
      else
      {
        uint64_t v193 = 1;
        uint64_t v192 = v562;
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v192, v193, 1, v188);
      sub_10001457C(v187, (uint64_t *)&unk_1007FC470);
    }
    else
    {
      uint64_t v192 = v562;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v189 + 32))(v562, v187, v188);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v189 + 56))(v192, 0, 1, v188);
    }
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    uint64_t v220 = String.init(localized:table:bundle:locale:comment:)();
    uint64_t v222 = v221;
    sub_100010218(&qword_1007FC170);
    uint64_t v223 = swift_allocObject();
    *(_OWORD *)(v223 + 16) = xmmword_1006D6280;
    *(void *)(v223 + 32) = sub_100044F68(v220, v222, (uint64_t)v192);
    *(void *)(v223 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v224;
    Class v225 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v113 setAlternateNames:v225];

    swift_bridgeObjectRelease();
    sub_10001457C((uint64_t)v192, (uint64_t *)&unk_1007FC470);
    v226 = _s14LivePhotoAssetC13LivePhotoDataVMa;
LABEL_70:
    sub_100134048((uint64_t)v26, v226);
    return v113;
  }
  _s12PodcastAssetCMa(0);
  uint64_t v178 = swift_dynamicCastClass();
  if (!v178)
  {
    _s10MusicAssetCMa(0);
    uint64_t v203 = swift_dynamicCastClass();
    if (v203)
    {
      if (!*(void *)(v203 + OBJC_IVAR____TtCC7Journal10Journaling10MusicAsset_metadata))
      {
        uint64_t v205 = v559;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v558 + 56))(v559, 1, 1, v560);
        goto LABEL_72;
      }
      id v204 = v105;
      swift_retain();
      uint64_t v205 = v559;
      sub_100039F48(v559);
      swift_release();
      v206 = (int *)v560;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v558 + 48))(v205, 1, v560) == 1)
      {

LABEL_72:
        sub_10001457C(v205, &qword_1007F9E58);
        return 0;
      }
      uint64_t v26 = v554;
      sub_100133FE0(v205, (uint64_t)v554, _s10MusicAssetC9MusicDataVMa);
      v227 = v583;
      static UTType.audio.getter();
      id v228 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
      Class v229 = UTType._bridgeToObjectiveC()().super.isa;
      id v230 = [v228 initWithContentType:v229];

      (*(void (**)(char *, uint64_t))(v585 + 8))(v227, v584);
      uint64_t v231 = *(void *)&v26[v206[7] + 8];
      uint64_t v232 = v548;
      sub_100133F78((uint64_t)v26, v548, _s10MusicAssetC9MusicDataVMa);
      *(void *)&long long v587 = v204;
      if (v231)
      {
        swift_bridgeObjectRetain();
        sub_100134048(v232, _s10MusicAssetC9MusicDataVMa);
        uint64_t v233 = v574;
      }
      else
      {
        uint64_t v262 = *(void *)(v232 + v206[8] + 8);
        swift_bridgeObjectRetain();
        sub_100134048(v232, _s10MusicAssetC9MusicDataVMa);
        uint64_t v233 = v574;
        if (!v262)
        {
          v263 = a2;
          NSString v264 = 0;
          goto LABEL_96;
        }
      }
      v263 = a2;
      NSString v264 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
LABEL_96:
      v265 = v230;
      [v230 setDisplayName:v264];

      sub_100010218((uint64_t *)&unk_10080C370);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1006D6270;
      v267 = &v26[v206[8]];
      uint64_t v269 = *(void *)v267;
      uint64_t v268 = *((void *)v267 + 1);
      *(void *)(inited + 32) = *(void *)v267;
      *(void *)(inited + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v268;
      v270 = &v26[v206[6]];
      uint64_t v272 = *(void *)v270;
      uint64_t v271 = *((void *)v270 + 1);
      *(void *)(inited + 48) = *(void *)v270;
      *(void *)(inited + 56) = v271;
      if (v268)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v273 = sub_1002A54A0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
        unint64_t v275 = *((void *)v273 + 2);
        unint64_t v274 = *((void *)v273 + 3);
        if (v275 >= v274 >> 1) {
          v273 = sub_1002A54A0((char *)(v274 > 1), v275 + 1, 1, v273);
        }
        *((void *)v273 + 2) = v275 + 1;
        v276 = &v273[16 * v275];
        *((void *)v276 + 4) = v269;
        *((void *)v276 + 5) = v268;
        uint64_t v233 = v574;
        uint64_t v26 = v554;
      }
      else
      {
        swift_bridgeObjectRetain();
        v273 = (char *)_swiftEmptyArrayStorage;
      }
      v277 = v263;
      if (v271)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v273 = sub_1002A54A0(0, *((void *)v273 + 2) + 1, 1, v273);
        }
        unint64_t v279 = *((void *)v273 + 2);
        unint64_t v278 = *((void *)v273 + 3);
        if (v279 >= v278 >> 1) {
          v273 = sub_1002A54A0((char *)(v278 > 1), v279 + 1, 1, v273);
        }
        *((void *)v273 + 2) = v279 + 1;
        v280 = &v273[16 * v279];
        *((void *)v280 + 4) = v272;
        *((void *)v280 + 5) = v271;
        uint64_t v26 = v554;
      }
      swift_release();
      v591[0] = (uint64_t)v273;
      sub_100010218(&qword_100800A70);
      sub_1000245BC();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      NSString v281 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v113 = v265;
      [v265 setContentDescription:v281];

      uint64_t v282 = v549;
      sub_10001B220((uint64_t)&v26[*(int *)(v560 + 20)], v549, (uint64_t *)&unk_100800A60);
      uint64_t v283 = v573;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v282, 1, v573) == 1)
      {
        v285 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v284);
        v285 = v286;
        (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v282, v283);
      }
      v287 = v550;
      v288 = (void *)v587;
      [v265 setThumbnailURL:v285];

      id v289 = [v277 entry];
      if (v289)
      {
        v290 = v289;
        sub_1002941E4(v287);

        uint64_t v291 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v291 - 8) + 56))(v287, 0, 1, v291);
      }
      else
      {
        uint64_t v292 = type metadata accessor for Date();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v292 - 8) + 56))(v287, 1, 1, v292);
      }
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v293 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v295 = v294;
      sub_100010218(&qword_1007FC170);
      uint64_t v296 = swift_allocObject();
      *(_OWORD *)(v296 + 16) = xmmword_1006D6280;
      *(void *)(v296 + 32) = sub_100044F68(v293, v295, (uint64_t)v287);
      *(void *)(v296 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v297;
      Class v298 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v265 setAlternateNames:v298];

      swift_bridgeObjectRelease();
      sub_10001457C((uint64_t)v287, (uint64_t *)&unk_1007FC470);
      v226 = _s10MusicAssetC9MusicDataVMa;
      goto LABEL_70;
    }
    _s9BookAssetCMa(0);
    uint64_t v218 = swift_dynamicCastClass();
    if (v218)
    {
      if (*(void *)(v218 + OBJC_IVAR____TtCC7Journal10Journaling9BookAsset_metadata))
      {
        id v219 = v105;
        swift_retain();
        uint64_t v133 = v553;
        sub_10003A5B0(v553);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v551 + 48))(v133, 1, v552) != 1)
        {
          sub_100133FE0(v133, (uint64_t)v26, _s9BookAssetC8BookDataVMa);
          v258 = v583;
          static UTType.audio.getter();
          id v259 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
          Class v260 = UTType._bridgeToObjectiveC()().super.isa;
          id v113 = [v259 initWithContentType:v260];

          (*(void (**)(char *, uint64_t))(v585 + 8))(v258, v584);
          if (*((void *)v26 + 3))
          {
            swift_bridgeObjectRetain();
            NSString v261 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v261 = 0;
          }
          v325 = v544;
          [v113 setDisplayName:v261];

          if (*((void *)v26 + 5))
          {
            swift_bridgeObjectRetain();
            NSString v326 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v326 = 0;
          }
          [v113 setContentDescription:v326];

          id v327 = [a2 entry];
          if (v327)
          {
            v328 = v327;
            sub_1002941E4(v325);

            uint64_t v329 = type metadata accessor for Date();
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v329 - 8) + 56))(v325, 0, 1, v329);
          }
          else
          {
            uint64_t v330 = type metadata accessor for Date();
            (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v330 - 8) + 56))(v325, 1, 1, v330);
          }
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          uint64_t v331 = String.init(localized:table:bundle:locale:comment:)();
          uint64_t v333 = v332;
          sub_100010218(&qword_1007FC170);
          uint64_t v334 = swift_allocObject();
          *(_OWORD *)(v334 + 16) = xmmword_1006D6280;
          *(void *)(v334 + 32) = sub_100044F68(v331, v333, (uint64_t)v325);
          *(void *)(v334 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v335;
          Class v336 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v113 setAlternateNames:v336];

          swift_bridgeObjectRelease();
          sub_10001457C((uint64_t)v325, (uint64_t *)&unk_1007FC470);
          v226 = _s9BookAssetC8BookDataVMa;
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v133 = v553;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v551 + 56))(v553, 1, 1, v552);
      }
      id v135 = &qword_1007F9E90;
      goto LABEL_60;
    }
    _s20ThirdPartyMediaAssetCMa(0);
    uint64_t v256 = swift_dynamicCastClass();
    if (v256)
    {
      if (!*(void *)(v256 + OBJC_IVAR____TtCC7Journal10Journaling20ThirdPartyMediaAsset_metadata))
      {
        uint64_t v133 = v547;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v546 + 56))(v547, 1, 1, v19);
        goto LABEL_126;
      }
      id v257 = v105;
      swift_retain();
      uint64_t v133 = v547;
      sub_10003A8E4(v547);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v546 + 48))(v133, 1, v19) == 1)
      {

LABEL_126:
        id v135 = &qword_1007F9DD8;
        goto LABEL_60;
      }
      uint64_t v317 = v19;
      v318 = v545;
      sub_100133FE0(v133, (uint64_t)v545, _s20ThirdPartyMediaAssetC12MetadataTypeVMa);
      v319 = v583;
      static UTType.audio.getter();
      id v320 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
      Class v321 = UTType._bridgeToObjectiveC()().super.isa;
      id v322 = [v320 initWithContentType:v321];

      (*(void (**)(char *, uint64_t))(v585 + 8))(v319, v584);
      uint64_t v323 = v318[2];
      uint64_t v324 = v540;
      sub_100133F78((uint64_t)v318, v540, _s20ThirdPartyMediaAssetC12MetadataTypeVMa);
      id v512 = a2;
      if (v323)
      {
        swift_bridgeObjectRetain();
        sub_100134048(v324, _s20ThirdPartyMediaAssetC12MetadataTypeVMa);
      }
      else
      {
        uint64_t v341 = *(void *)(v324 + 32);
        swift_bridgeObjectRetain();
        sub_100134048(v324, _s20ThirdPartyMediaAssetC12MetadataTypeVMa);
        if (!v341)
        {
          NSString v342 = 0;
          v318 = v545;
          goto LABEL_145;
        }
        v318 = v545;
      }
      NSString v342 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
LABEL_145:
      *(void *)&long long v587 = v322;
      [v322 setDisplayName:v342];

      sub_100010218((uint64_t *)&unk_10080C370);
      uint64_t v343 = swift_initStackObject();
      *(_OWORD *)(v343 + 16) = xmmword_1006D6270;
      uint64_t v345 = v318[3];
      uint64_t v344 = v318[4];
      *(void *)(v343 + 32) = v345;
      *(void *)(v343 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v344;
      uint64_t v347 = v318[5];
      uint64_t v346 = v318[6];
      *(void *)(v343 + 48) = v347;
      *(void *)(v343 + 56) = v346;
      if (v344)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v348 = sub_1002A54A0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
        unint64_t v350 = *((void *)v348 + 2);
        unint64_t v349 = *((void *)v348 + 3);
        if (v350 >= v349 >> 1) {
          v348 = sub_1002A54A0((char *)(v349 > 1), v350 + 1, 1, v348);
        }
        *((void *)v348 + 2) = v350 + 1;
        v351 = &v348[16 * v350];
        *((void *)v351 + 4) = v345;
        *((void *)v351 + 5) = v344;
      }
      else
      {
        swift_bridgeObjectRetain();
        v348 = (char *)_swiftEmptyArrayStorage;
      }
      if (v346)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v348 = sub_1002A54A0(0, *((void *)v348 + 2) + 1, 1, v348);
        }
        unint64_t v353 = *((void *)v348 + 2);
        unint64_t v352 = *((void *)v348 + 3);
        if (v353 >= v352 >> 1) {
          v348 = sub_1002A54A0((char *)(v352 > 1), v353 + 1, 1, v348);
        }
        *((void *)v348 + 2) = v353 + 1;
        v354 = &v348[16 * v353];
        *((void *)v354 + 4) = v347;
        *((void *)v354 + 5) = v346;
      }
      uint64_t v355 = v574;
      uint64_t v356 = v573;
      v357 = (char *)v545;
      swift_release();
      v591[0] = (uint64_t)v348;
      sub_100010218(&qword_100800A70);
      sub_1000245BC();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      NSString v358 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v113 = (id)v587;
      [(id)v587 setContentDescription:v358];

      uint64_t v359 = v541;
      sub_10001B220((uint64_t)&v357[*(int *)(v317 + 32)], v541, (uint64_t *)&unk_100800A60);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v355 + 48))(v359, 1, v356) == 1)
      {
        v361 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v360);
        v361 = v362;
        (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v359, v356);
      }
      [v113 setThumbnailURL:v361];

      uint64_t v363 = sub_10035B6C4(*v357);
      uint64_t v365 = v364;
      uint64_t v366 = v543;
      sub_10001B220((uint64_t)&v357[*(int *)(v317 + 40)], v543, (uint64_t *)&unk_1007FC470);
      uint64_t v367 = type metadata accessor for Date();
      uint64_t v368 = *(void *)(v367 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v368 + 48))(v366, 1, v367) == 1)
      {
        id v369 = [v512 entry];
        if (v369)
        {
          v370 = v369;
          sub_1002941E4(v542);

          uint64_t v371 = 0;
        }
        else
        {
          uint64_t v371 = 1;
        }
        v372 = v542;
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v368 + 56))(v542, v371, 1, v367);
        sub_10001457C(v543, (uint64_t *)&unk_1007FC470);
        id v113 = (id)v587;
        v357 = (char *)v545;
      }
      else
      {
        v372 = v542;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v368 + 32))(v542, v543, v367);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v368 + 56))(v372, 0, 1, v367);
      }
      sub_100010218(&qword_1007FC170);
      uint64_t v386 = swift_allocObject();
      *(_OWORD *)(v386 + 16) = xmmword_1006D6280;
      *(void *)(v386 + 32) = sub_100044F68(v363, v365, (uint64_t)v372);
      *(void *)(v386 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v387;
      Class v388 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v113 setAlternateNames:v388];
      swift_bridgeObjectRelease();

      sub_10001457C((uint64_t)v372, (uint64_t *)&unk_1007FC470);
      sub_100134048((uint64_t)v357, _s20ThirdPartyMediaAssetC12MetadataTypeVMa);
      return v113;
    }
    _s10AudioAssetCMa(0);
    uint64_t v299 = swift_dynamicCastClass();
    if (v299)
    {
      uint64_t v300 = v299;
      v301 = v105;
      uint64_t v302 = sub_10010F0D8();
      if (v303)
      {
        uint64_t v304 = v302;
        unint64_t v305 = v303;
        uint64_t v306 = HIBYTE(v303) & 0xF;
        if ((v303 & 0x2000000000000000) == 0) {
          uint64_t v306 = v302 & 0xFFFFFFFFFFFFLL;
        }
        if (!v306)
        {
          swift_bridgeObjectRelease();

          return 0;
        }
        v307 = v583;
        static UTType.audio.getter();
        id v308 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
        Class v309 = UTType._bridgeToObjectiveC()().super.isa;
        id v310 = [v308 initWithContentType:v309];

        (*(void (**)(char *, uint64_t))(v585 + 8))(v307, v584);
        id v113 = v310;
        sub_100042914(0, 0, v304, v305);
        swift_bridgeObjectRelease();
        if (*(void *)(v300 + OBJC_IVAR____TtCC7Journal10Journaling10AudioAsset_metadata))
        {
          swift_retain();
          uint64_t v311 = v535;
          sub_10003AC18(v535);
          swift_release();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v531 + 48))(v311, 1, v533))
          {
            uint64_t v413 = v535;
            uint64_t v414 = v523;
            sub_100133F78(v535, v523, _s10AudioAssetC9AudioDataVMa);
            sub_10001457C(v413, &qword_1007F9E38);
            uint64_t v415 = v538;
            sub_10001B220(v414 + *(int *)(v533 + 24), v538, (uint64_t *)&unk_1007FC470);
            sub_100134048(v414, _s10AudioAssetC9AudioDataVMa);
            uint64_t v416 = type metadata accessor for Date();
            uint64_t v417 = *(void *)(v416 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v417 + 48))(v415, 1, v416) != 1)
            {
              v418 = v539;
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v417 + 32))(v539, v538, v416);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v417 + 56))(v418, 0, 1, v416);
LABEL_176:
              String.LocalizationValue.init(stringLiteral:)();
              static Locale.current.getter();
              uint64_t v392 = String.init(localized:table:bundle:locale:comment:)();
              uint64_t v394 = v393;
              sub_100010218(&qword_1007FC170);
              uint64_t v395 = swift_allocObject();
              *(_OWORD *)(v395 + 16) = xmmword_1006D6280;
              v396 = v539;
              *(void *)(v395 + 32) = sub_100044F68(v392, v394, (uint64_t)v539);
              *(void *)(v395 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v397;
              Class v398 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v310 setAlternateNames:v398];

              swift_bridgeObjectRelease();
              sub_10001457C((uint64_t)v396, (uint64_t *)&unk_1007FC470);
              return v113;
            }
LABEL_123:
            id v313 = [a2 entry];
            if (v313)
            {
              v314 = v313;
              v315 = v539;
              sub_1002941E4(v539);

              uint64_t v316 = type metadata accessor for Date();
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v316 - 8) + 56))(v315, 0, 1, v316);
            }
            else
            {
              uint64_t v391 = type metadata accessor for Date();
              (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v391 - 8) + 56))(v539, 1, 1, v391);
            }
            sub_10001457C(v538, (uint64_t *)&unk_1007FC470);
            goto LABEL_176;
          }
          sub_10001457C(v535, &qword_1007F9E38);
        }
        uint64_t v312 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v312 - 8) + 56))(v538, 1, 1, v312);
        goto LABEL_123;
      }
LABEL_200:

      return 0;
    }
    v337 = a2;
    _s12ContactAssetCMa(0);
    uint64_t v338 = swift_dynamicCastClass();
    if (v338)
    {
      if (!*(void *)(v338 + OBJC_IVAR____TtCC7Journal10Journaling12ContactAsset_metadata))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v534 + 56))(v537, 1, 1, v536);
        goto LABEL_172;
      }
      id v339 = v105;
      swift_retain();
      uint64_t v340 = v537;
      sub_10003C084(v537);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v534 + 48))(v340, 1, v536) == 1)
      {

LABEL_172:
        v389 = &qword_1007F9EE0;
        v390 = &v569;
LABEL_173:
        sub_10001457C((uint64_t)*(v390 - 32), v389);
        return 0;
      }
      v399 = v529;
      sub_100133FE0(v537, (uint64_t)v529, _s12ContactAssetC11ContactDataVMa);
      v400 = v583;
      static UTType.contact.getter();
      id v401 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
      Class v402 = UTType._bridgeToObjectiveC()().super.isa;
      id v113 = [v401 initWithContentType:v402];

      (*(void (**)(char *, uint64_t))(v585 + 8))(v400, v584);
      sub_100010218(&qword_1007FC170);
      uint64_t v403 = swift_allocObject();
      long long v587 = xmmword_1006D6280;
      *(_OWORD *)(v403 + 16) = xmmword_1006D6280;
      uint64_t v404 = v399[1];
      *(void *)(v403 + 32) = *v399;
      *(void *)(v403 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v404;
      swift_bridgeObjectRetain();
      Class v405 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v113 setAuthorNames:v405];

      swift_bridgeObjectRetain();
      NSString v406 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v113 setDisplayName:v406];

      uint64_t v407 = v530;
      sub_10001B220((uint64_t)v399 + *(int *)(v536 + 20), v530, (uint64_t *)&unk_1007FC470);
      uint64_t v408 = type metadata accessor for Date();
      uint64_t v409 = *(void *)(v408 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v409 + 48))(v407, 1, v408) == 1)
      {
        id v410 = [v337 entry];
        if (v410)
        {
          v411 = v410;
          sub_1002941E4(v532);

          uint64_t v412 = 0;
        }
        else
        {
          uint64_t v412 = 1;
        }
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v409 + 56))(v532, v412, 1, v408);
        sub_10001457C(v530, (uint64_t *)&unk_1007FC470);
      }
      else
      {
        v421 = v532;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v409 + 32))(v532, v530, v408);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v409 + 56))(v421, 0, 1, v408);
      }
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v435 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v437 = v436;
      uint64_t v438 = swift_allocObject();
      *(_OWORD *)(v438 + 16) = v587;
      v439 = v532;
      *(void *)(v438 + 32) = sub_100044F68(v435, v437, (uint64_t)v532);
      *(void *)(v438 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v440;
      Class v441 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v113 setAlternateNames:v441];

      swift_bridgeObjectRelease();
      sub_10001457C((uint64_t)v439, (uint64_t *)&unk_1007FC470);
      v442 = _s12ContactAssetC11ContactDataVMa;
      v443 = &v561;
LABEL_204:
      sub_100134048(*(v443 - 32), v442);
      return v113;
    }
    _s9LinkAssetCMa(0);
    uint64_t v373 = swift_dynamicCastClass();
    if (!v373)
    {
      _s16StateOfMindAssetCMa(0);
      uint64_t v419 = swift_dynamicCastClass();
      if (!v419)
      {
        if (qword_1007F6A08 != -1) {
          swift_once();
        }
        uint64_t v430 = type metadata accessor for Logger();
        sub_100026A54(v430, (uint64_t)qword_1007FF3D0);
        id v114 = v105;
        v301 = Logger.logObject.getter();
        os_log_type_t v431 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v301, v431))
        {

LABEL_234:
          return 0;
        }
        v432 = (uint8_t *)swift_slowAlloc();
        v433 = (void *)swift_slowAlloc();
        *(_DWORD *)v432 = 138412290;
        v591[0] = (uint64_t)v114;
        id v434 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v433 = v114;

        _os_log_impl((void *)&_mh_execute_header, v301, v431, "JournalEntryAssetMO.getSearchableItemAttributeSet asset type not indexed: %@", v432, 0xCu);
        sub_100010218((uint64_t *)&unk_1007FC430);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        goto LABEL_200;
      }
      if (*(void *)(v419 + OBJC_IVAR____TtCC7Journal10Journaling16StateOfMindAsset_metadata))
      {
        id v132 = v105;
        swift_retain();
        uint64_t v420 = v524;
        sub_100039278(v524);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v518 + 48))(v420, 1, v520) != 1)
        {
          sub_100133FE0(v524, v517, _s16StateOfMindAssetC15StateOfMindDataVMa);
          uint64_t v484 = sub_10008AF84();
          unint64_t v486 = v485;
          swift_bridgeObjectRelease();
          uint64_t v487 = HIBYTE(v486) & 0xF;
          if ((v486 & 0x2000000000000000) == 0) {
            uint64_t v487 = v484 & 0xFFFFFFFFFFFFLL;
          }
          if (!v487)
          {
            v194 = _s16StateOfMindAssetC15StateOfMindDataVMa;
            uint64_t v195 = v517;
            goto LABEL_43;
          }
          v488 = v583;
          static UTType.item.getter();
          id v489 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
          Class v490 = UTType._bridgeToObjectiveC()().super.isa;
          id v491 = [v489 initWithContentType:v490];

          (*(void (**)(char *, uint64_t))(v585 + 8))(v488, v584);
          uint64_t v492 = v517;
          sub_10008AF84();
          NSString v493 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v491 setDisplayName:v493];

          sub_10008B130();
          NSString v494 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v113 = v491;
          [v491 setContentDescription:v494];

          uint64_t v495 = v492 + *(int *)(v520 + 20);
          uint64_t v496 = v513;
          sub_10001B220(v495, v513, (uint64_t *)&unk_1007FC470);
          uint64_t v497 = type metadata accessor for Date();
          uint64_t v498 = *(void *)(v497 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v498 + 48))(v496, 1, v497) == 1)
          {
            id v499 = [a2 entry];
            if (v499)
            {
              v500 = v499;
              sub_1002941E4(v515);

              uint64_t v501 = 0;
            }
            else
            {
              uint64_t v501 = 1;
            }
            (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v498 + 56))(v515, v501, 1, v497);
            sub_10001457C(v513, (uint64_t *)&unk_1007FC470);
          }
          else
          {
            v503 = v515;
            (*(void (**)(unsigned char *, uint64_t, uint64_t))(v498 + 32))(v515, v513, v497);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v498 + 56))(v503, 0, 1, v497);
          }
          String.LocalizationValue.init(stringLiteral:)();
          static Locale.current.getter();
          uint64_t v504 = String.init(localized:table:bundle:locale:comment:)();
          uint64_t v506 = v505;
          sub_100010218(&qword_1007FC170);
          uint64_t v507 = swift_allocObject();
          *(_OWORD *)(v507 + 16) = xmmword_1006D6280;
          v508 = v515;
          *(void *)(v507 + 32) = sub_100044F68(v504, v506, (uint64_t)v515);
          *(void *)(v507 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v509;
          Class v510 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v113 setAlternateNames:v510];

          swift_bridgeObjectRelease();
          sub_10001457C((uint64_t)v508, (uint64_t *)&unk_1007FC470);
          v442 = _s16StateOfMindAssetC15StateOfMindDataVMa;
          v443 = &v549;
          goto LABEL_204;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v518 + 56))(v524, 1, 1, v520);
      }
      v389 = (uint64_t *)&unk_100807640;
      v390 = &v556;
      goto LABEL_173;
    }
    uint64_t v374 = v373;
    v301 = v105;
    id v375 = sub_1000D05AC();
    if (!v375) {
      goto LABEL_200;
    }
    v376 = v375;
    v377 = v583;
    static UTType.item.getter();
    id v378 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
    Class v379 = UTType._bridgeToObjectiveC()().super.isa;
    id v380 = [v378 initWithContentType:v379];

    (*(void (**)(char *, uint64_t))(v585 + 8))(v377, v584);
    id v381 = [v376 title];
    if (v381)
    {
      v382 = v381;
      uint64_t v383 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v385 = v384;
    }
    else
    {
      uint64_t v383 = 0;
      unint64_t v385 = 0;
    }
    id v422 = [v376 appleSummary];
    if (v422 || (id v422 = [v376 summary]) != 0)
    {
      uint64_t v423 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v425 = v424;
    }
    else
    {
      uint64_t v423 = 0;
      unint64_t v425 = 0;
    }
    sub_100042914(v383, v385, v423, v425);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v426 = [v376 imageMetadata];
    if (v426)
    {
      v427 = v426;
      id v428 = [v426 URL];

      if (v428)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v429 = 0;
      }
      else
      {
        uint64_t v429 = 1;
      }
      uint64_t v444 = v574;
      v445 = v522;
      uint64_t v446 = v573;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v574 + 56))(v522, v429, 1, v573);
      uint64_t v447 = (uint64_t)v445;
      uint64_t v448 = v526;
      sub_10002C4EC(v447, v526, (uint64_t *)&unk_100800A60);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v444 + 48))(v448, 1, v446) != 1)
      {
        uint64_t v456 = v574;
        v457 = v516;
        uint64_t v458 = v573;
        (*(void (**)(char *, uint64_t, uint64_t))(v574 + 32))(v516, v526, v573);
        URL._bridgeToObjectiveC()(v459);
        v461 = v460;
        [v380 setThumbnailURL:v460];

        (*(void (**)(char *, uint64_t))(v456 + 8))(v457, v458);
        goto LABEL_211;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v574 + 56))(v526, 1, 1, v573);
    }
    sub_10001457C(v526, (uint64_t *)&unk_100800A60);
    id v449 = [v376 image];
    if (v449)
    {
      v450 = v449;
      id v451 = [v449 data];

      if (v451)
      {
        uint64_t v452 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v454 = v453;

        Class v455 = Data._bridgeToObjectiveC()().super.isa;
        [v380 setThumbnailData:v455];

        sub_100040DD0(v452, v454);
      }
    }
LABEL_211:
    if (sub_1000D1B70() == 6)
    {
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      uint64_t v462 = String.init(localized:table:bundle:locale:comment:)();
    }
    else
    {
      uint64_t v462 = sub_1005FB970();
    }
    uint64_t v464 = v462;
    uint64_t v465 = v463;
    if (*(void *)(v374 + OBJC_IVAR____TtCC7Journal10Journaling9LinkAsset_metadata))
    {
      swift_retain();
      uint64_t v466 = v525;
      sub_10003BD50(v525);
      swift_release();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v519 + 48))(v466, 1, v521))
      {
        uint64_t v478 = v525;
        uint64_t v479 = v514;
        sub_100133F78(v525, v514, _s9LinkAssetC8LinkDataVMa);
        sub_10001457C(v478, &qword_1007F9F68);
        uint64_t v480 = v527;
        sub_10001B220(v479 + *(int *)(v521 + 24), v527, (uint64_t *)&unk_1007FC470);
        sub_100134048(v479, _s9LinkAssetC8LinkDataVMa);
        uint64_t v481 = type metadata accessor for Date();
        uint64_t v482 = *(void *)(v481 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v482 + 48))(v480, 1, v481) != 1)
        {
          v483 = v528;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v482 + 32))(v528, v527, v481);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v482 + 56))(v483, 0, 1, v481);
LABEL_222:
          sub_100010218(&qword_1007FC170);
          uint64_t v473 = swift_allocObject();
          *(_OWORD *)(v473 + 16) = xmmword_1006D6280;
          uint64_t v474 = v464;
          v475 = v528;
          *(void *)(v473 + 32) = sub_100044F68(v474, v465, (uint64_t)v528);
          *(void *)(v473 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v476;
          Class v477 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v113 = v380;
          [v380 setAlternateNames:v477];
          swift_bridgeObjectRelease();

          sub_10001457C((uint64_t)v475, (uint64_t *)&unk_1007FC470);
          return v113;
        }
LABEL_218:
        id v468 = [v337 entry];
        if (v468)
        {
          v469 = v468;
          v470 = v528;
          sub_1002941E4(v528);

          uint64_t v471 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v471 - 8) + 56))(v470, 0, 1, v471);
        }
        else
        {
          uint64_t v472 = type metadata accessor for Date();
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v472 - 8) + 56))(v528, 1, 1, v472);
        }
        sub_10001457C(v527, (uint64_t *)&unk_1007FC470);
        goto LABEL_222;
      }
      sub_10001457C(v525, &qword_1007F9F68);
    }
    uint64_t v467 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v467 - 8) + 56))(v527, 1, 1, v467);
    goto LABEL_218;
  }
  if (!*(void *)(v178 + OBJC_IVAR____TtCC7Journal10Journaling12PodcastAsset_metadata))
  {
    uint64_t v133 = v564;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v563 + 56))(v564, 1, 1, v565);
    goto LABEL_59;
  }
  id v179 = v105;
  swift_retain();
  uint64_t v133 = v564;
  sub_10003A27C(v564);
  swift_release();
  uint64_t v180 = v565;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v563 + 48))(v133, 1, v565) == 1)
  {

LABEL_59:
    id v135 = &qword_1007F8F98;
    goto LABEL_60;
  }
  v213 = v557;
  sub_100133FE0(v133, (uint64_t)v557, _s12PodcastAssetC11PodcastDataVMa);
  v214 = v583;
  static UTType.audiovisualContent.getter();
  id v215 = objc_allocWithZone((Class)CSSearchableItemAttributeSet);
  Class v216 = UTType._bridgeToObjectiveC()().super.isa;
  id v113 = [v215 initWithContentType:v216];

  (*(void (**)(char *, uint64_t))(v585 + 8))(v214, v584);
  if (v213[3])
  {
    swift_bridgeObjectRetain();
    NSString v217 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v217 = 0;
  }
  uint64_t v234 = v574;
  uint64_t v235 = v573;
  uint64_t v236 = (uint64_t)v555;
  [v113 setDisplayName:v217];

  sub_10001B220((uint64_t)v213 + *(int *)(v180 + 28), v236, (uint64_t *)&unk_100800A60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v234 + 48))(v236, 1, v235) == 1)
  {
    v238 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v237);
    v238 = v239;
    (*(void (**)(uint64_t, uint64_t))(v234 + 8))(v236, v235);
  }
  [v113 setThumbnailURL:v238];

  uint64_t v240 = v213[5];
  if (v240)
  {
    uint64_t v241 = v213[4];
    swift_bridgeObjectRetain();
    NSString v242 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v113 setContentDescription:v242];

    sub_100010218(&qword_1007FC170);
    uint64_t v243 = swift_allocObject();
    *(_OWORD *)(v243 + 16) = xmmword_1006D6280;
    *(void *)(v243 + 32) = v241;
    *(void *)(v243 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v240;
    swift_bridgeObjectRetain();
    Class v244 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v113 setAuthorNames:v244];
  }
  else
  {
    [v113 setContentDescription:0];
  }
  id v245 = [a2 entry];
  if (v245)
  {
    v246 = v245;
    v247 = v556;
    sub_1002941E4(v556);

    uint64_t v248 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v247, 0, 1, v248);
  }
  else
  {
    uint64_t v249 = type metadata accessor for Date();
    v247 = v556;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v249 - 8) + 56))(v556, 1, 1, v249);
  }
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v250 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v252 = v251;
  sub_100010218(&qword_1007FC170);
  uint64_t v253 = swift_allocObject();
  *(_OWORD *)(v253 + 16) = xmmword_1006D6280;
  *(void *)(v253 + 32) = sub_100044F68(v250, v252, (uint64_t)v247);
  *(void *)(v253 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v254;
  Class v255 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v113 setAlternateNames:v255];

  swift_bridgeObjectRelease();
  sub_10001457C((uint64_t)v247, (uint64_t *)&unk_1007FC470);
  sub_100134048((uint64_t)v213, _s12PodcastAssetC11PodcastDataVMa);
  return v113;
}

uint64_t sub_100133F78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100133FE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100134048(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001340A8()
{
  return sub_1001365A4(&qword_1007FF3F8, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t type metadata accessor for JournalEntity()
{
  uint64_t result = qword_1007FF508;
  if (!qword_1007FF508) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10013413C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v1 = sub_100010218(&qword_1007FF578);
  __chkstk_darwin(v1 - 8);
  uint64_t v50 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100010218(&qword_1007FF580);
  __chkstk_darwin(v3 - 8);
  uint64_t v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttributedString.InterpolationOptions();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010218(&qword_1007FE5B8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v12 - 8);
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for LocalizedStringResource();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v45 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v44 = (char *)&v41 - v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v41 - v20;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  unint64_t v22 = 0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
  type metadata accessor for JournalEntity();
  EntityProperty.wrappedValue.getter();
  if (v54) {
    uint64_t v24 = v53;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v54) {
    unint64_t v22 = v54;
  }
  unint64_t v25 = v22;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  uint64_t v43 = v21;
  uint64_t v27 = v41;
  LocalizedStringResource.init(stringInterpolation:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
  uint64_t v29 = v42;
  EntityProperty.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v29) == 1)
  {
    AttributedString.init(stringLiteral:)();
    sub_10001457C((uint64_t)v9, &qword_1007FE5B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v52, v9, v29);
  }
  uint64_t v53 = _swiftEmptyArrayStorage;
  sub_1001365A4(&qword_1007FEAF8, (void (*)(uint64_t))&type metadata accessor for AttributedString.InterpolationOptions);
  sub_100010218(&qword_1007FEB00);
  sub_100014488(&qword_1007FEB08, &qword_1007FEB00);
  uint64_t v30 = v46;
  uint64_t v31 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v32 = v52;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v29);
  v33._uint64_t countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v33);
  uint64_t v34 = v44;
  LocalizedStringResource.init(stringInterpolation:)();
  id v35 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v36 = v43;
  v35(v45, v43, v14);
  uint64_t v37 = v49;
  v35(v49, v34, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v37, 0, 1, v14);
  uint64_t v38 = type metadata accessor for DisplayRepresentation.Image();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v50, 1, 1, v38);
  DisplayRepresentation.init(title:subtitle:image:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  v39(v34, v14);
  return ((uint64_t (*)(char *, uint64_t))v39)(v36, v14);
}

uint64_t sub_100134794@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v41 = a6;
  id v42 = a7;
  uint64_t v40 = a5;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v36 = a2;
  uint64_t v43 = a1;
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  uint64_t v39 = (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v33 = (uint64_t)&v32 - v12;
  uint64_t v13 = sub_100010218(&qword_1007FE5B8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = (int *)type metadata accessor for JournalEntity();
  uint64_t v20 = v19[5];
  sub_100010218(&qword_1007FF550);
  *(void *)(a8 + v2sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = EntityProperty<>.init()();
  uint64_t v21 = v19[6];
  sub_100010218(&qword_1007FF558);
  *(void *)(a8 + v21) = EntityProperty<>.init()();
  uint64_t v22 = v19[7];
  uint64_t v35 = v22;
  sub_100010218(&qword_1007FF560);
  *(void *)(a8 + v22) = EntityProperty<>.init()();
  uint64_t v23 = v19[8];
  sub_100010218(&qword_1007FF568);
  *(void *)(a8 + v23) = EntityProperty<>.init()();
  uint64_t v24 = v19[9];
  uint64_t v34 = v24;
  sub_100010218(&qword_1007FF570);
  *(void *)(a8 + v24) = EntityProperty<>.init()();
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(a8, v43, v25);
  id v44 = v36;
  uint64_t v45 = v37;
  EntityProperty.wrappedValue.setter();
  uint64_t v27 = v38;
  sub_10001B220(v38, (uint64_t)v18, &qword_1007FE5B8);
  sub_10001B220((uint64_t)v18, (uint64_t)v15, &qword_1007FE5B8);
  EntityProperty.wrappedValue.setter();
  sub_10001457C((uint64_t)v18, &qword_1007FE5B8);
  uint64_t v28 = v40;
  uint64_t v29 = v33;
  sub_10001B220(v40, v33, (uint64_t *)&unk_1007FC470);
  sub_10001B220(v29, v39, (uint64_t *)&unk_1007FC470);
  EntityProperty.wrappedValue.setter();
  sub_10001457C(v29, (uint64_t *)&unk_1007FC470);
  id v44 = v41;
  EntityProperty.wrappedValue.setter();
  id v44 = v42;
  id v30 = v42;
  EntityProperty.wrappedValue.setter();

  sub_10001457C(v28, (uint64_t *)&unk_1007FC470);
  sub_10001457C(v27, &qword_1007FE5B8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v43, v25);
}

uint64_t sub_100134AE4()
{
  return sub_1001365A4((unint64_t *)&qword_100811270, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_100134B2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

unint64_t sub_100134B98()
{
  unint64_t result = qword_1007FF400;
  if (!qword_1007FF400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF400);
  }
  return result;
}

uint64_t sub_100134BEC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100010218(&qword_1007F9BE8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  unint64_t v7 = sub_1002B8584((uint64_t)v5);
  sub_10001457C((uint64_t)v5, &qword_1007F9BE8);
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_14:
    *a1 = v14;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = a1;
    uint64_t v16 = v1;
    uint64_t v10 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(v7 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      id v13 = [v11 managedObjectContext:v15, v16];
      if (!v13) {
        id v13 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
      }
      ++v10;
      type metadata accessor for Journaling.EntryViewModel();
      swift_allocObject();
      sub_10057F170(v12, 0, 0, v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v8 != v10);
    uint64_t v14 = v17;
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v15;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

unint64_t sub_100134E4C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_10057AD94(a1);
  if (v2) {
    return result;
  }
  unint64_t v5 = result;
  if (!(result >> 62))
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_4;
    }
LABEL_14:
    unint64_t result = swift_bridgeObjectRelease();
    *a2 = _swiftEmptyArrayStorage;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_14;
  }
LABEL_4:
  unint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v5 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      id v10 = [v8 managedObjectContext];
      if (!v10) {
        id v10 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
      }
      ++v7;
      type metadata accessor for Journaling.EntryViewModel();
      swift_allocObject();
      sub_10057F170(v9, 0, 0, v10);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v7);
    unint64_t result = swift_bridgeObjectRelease();
    *a2 = _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_10013501C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  id v8 = *(id *)(qword_10083D2F8 + 16);
  uint64_t v9 = (void *)sub_10056A2E0(a1, a2, a3);

  if (v9)
  {
    id v10 = (uint64_t *)(a4 + 16);
    id v11 = v9;
    id v12 = [v11 managedObjectContext];
    if (!v12) {
      id v12 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
    }
    type metadata accessor for Journaling.EntryViewModel();
    swift_allocObject();
    uint64_t v13 = sub_10057F170(v11, 0, 0, v12);
    sub_100010218((uint64_t *)&unk_1007FA1C0);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1006D6D00;
    *(void *)(v14 + 32) = v13;
    uint64_t v15 = v14;
    specialized Array._endMutation()();

    swift_beginAccess();
    uint64_t *v10 = v15;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001351A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  id v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1007FF5A0 + dword_1007FF5A0);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10013525C;
  return v8(a2, a3);
}

uint64_t sub_10013525C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

unint64_t sub_100135370()
{
  unint64_t result = qword_1007FF410;
  if (!qword_1007FF410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF410);
  }
  return result;
}

unint64_t sub_1001353C8()
{
  unint64_t result = qword_1007FF418[0];
  if (!qword_1007FF418[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1007FF418);
  }
  return result;
}

uint64_t sub_10013541C(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_1007FF598 + dword_1007FF598);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001354C4;
  return v5(a1);
}

uint64_t sub_1001354C4(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_1001355C4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1007FF590 + dword_1007FF590);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100138364;
  return v4();
}

unint64_t sub_10013566C()
{
  unint64_t result = qword_1007FF430;
  if (!qword_1007FF430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF430);
  }
  return result;
}

uint64_t sub_1001356C0()
{
  return sub_1001365A4(&qword_1007FF438, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

unint64_t sub_10013570C()
{
  unint64_t result = qword_1007FF440;
  if (!qword_1007FF440)
  {
    sub_100014440(qword_1007FF448);
    sub_1001365A4(&qword_1007FF438, (void (*)(uint64_t))type metadata accessor for JournalEntity);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF440);
  }
  return result;
}

uint64_t sub_1001357B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_100134B98();
  *uint64_t v5 = v2;
  v5[1] = sub_10002C194;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100135864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002C194;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

uint64_t sub_100135920()
{
  return sub_1001365A4(&qword_1007FF460, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

void *sub_100135968()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  uint64_t v0 = *(char **)(qword_10083D2F8 + 16);
  id v1 = *(id *)&v0[OBJC_IVAR____TtC7Journal13CoreDataStack_contextMain];
  uint64_t v2 = v0;
  uint64_t v3 = UUID.uuidString.getter();
  uint64_t v5 = (void *)sub_10056A2E0(v3, v4, v1);

  swift_bridgeObjectRelease();
  if (v5)
  {
    id v6 = [v5 managedObjectContext];
    if (!v6) {
      id v6 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:2];
    }
    type metadata accessor for Journaling.EntryViewModel();
    swift_allocObject();
    uint64_t v5 = (void *)sub_10057F170(v5, 0, 0, v6);
  }

  return v5;
}

uint64_t sub_100135A90()
{
  return sub_1001365A4(&qword_1007FF468, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t sub_100135AD8()
{
  return sub_1001365A4(&qword_1007FF470, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t sub_100135B20()
{
  return sub_1001365A4(&qword_1007FF478, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

void *sub_100135B6C()
{
  return &protocol witness table for UUID;
}

uint64_t sub_100135B78()
{
  return sub_1001365A4(&qword_1007FF480, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t sub_100135BC0()
{
  return sub_1001365A4(&qword_1007FF488, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t sub_100135C08()
{
  return sub_1001365A4(&qword_1007FF490, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t sub_100135C50(uint64_t a1)
{
  uint64_t v2 = sub_1001365A4(&qword_1007FF588, (void (*)(uint64_t))type metadata accessor for JournalEntity);

  return static AssistantSchemaEntity.typeDisplayRepresentation.getter(a1, v2);
}

uint64_t sub_100135CCC()
{
  return sub_100014488(&qword_1007FF498, &qword_1007FF4A0);
}

uint64_t sub_100135D08(uint64_t a1)
{
  uint64_t v2 = sub_1001365A4(&qword_1007FF3F8, (void (*)(uint64_t))type metadata accessor for JournalEntity);

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100135D84()
{
  return sub_1001365A4(&qword_1007FF4A8, (void (*)(uint64_t))type metadata accessor for JournalEntity);
}

uint64_t sub_100135DD0(uint64_t a1)
{
  uint64_t v2 = sub_1001365A4(&qword_1007FF490, (void (*)(uint64_t))type metadata accessor for JournalEntity);

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

ValueMetadata *type metadata accessor for EntryEntityQuery()
{
  return &type metadata for EntryEntityQuery;
}

uint64_t *sub_100135E5C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100135F78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10013601C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1001360EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1001361E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013628C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_release();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_release();
  return a1;
}

uint64_t sub_100136360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100136374);
}

uint64_t sub_100136374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100136434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100136448);
}

uint64_t sub_100136448(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100136504()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001365A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001365EC()
{
  v0[3] = *(void *)(type metadata accessor for JournalEntity() - 8);
  v0[4] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v0[5] = v1;
  v0[6] = *(void *)(v1 - 8);
  v0[7] = swift_task_alloc();
  return _swift_task_switch(sub_100136700, 0, 0);
}

uint64_t sub_100136700()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  id v4 = [*(id *)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_container) newBackgroundContext];
  v0[8] = v4;
  uint64_t v5 = swift_allocObject();
  v0[9] = v5;
  *(void *)(v5 + 16) = v4;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[10] = v6;
  uint64_t v7 = sub_100010218(&qword_100802680);
  *uint64_t v6 = v0;
  v6[1] = sub_100136894;
  uint64_t v8 = v0[7];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v8, sub_100136F68, v5, v7);
}

uint64_t sub_100136894()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  uint64_t v3 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100136A08, 0, 0);
}

uint64_t sub_100136A08()
{
  unint64_t v1 = v0[2];
  v0[11] = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v0[12] = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[12] = v2;
    if (v2)
    {
LABEL_3:
      v0[13] = _swiftEmptyArrayStorage;
      uint64_t v3 = v0[11];
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v4 = *(void *)(v3 + 32);
        swift_retain();
      }
      v0[14] = v4;
      v0[15] = 1;
      uint64_t v5 = (void *)swift_task_alloc();
      v0[16] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100136B94;
      uint64_t v6 = v0[4];
      return sub_1004567B4(v6);
    }
  }
  uint64_t v9 = (void *)v0[8];
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(_swiftEmptyArrayStorage);
}

uint64_t sub_100136B94()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100136EA4;
  }
  else
  {
    uint64_t v2 = sub_100136CBC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100136CBC()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = v0[13];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_1002A6390(0, *(void *)(v2 + 16) + 1, 1, v0[13]);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_1002A6390(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[12];
  uint64_t v8 = v0[3];
  uint64_t v7 = v0[4];
  *(void *)(v2 + 16) = v4 + 1;
  sub_100136F84(v7, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v4);
  swift_release();
  if (v5 == v6)
  {
    uint64_t v9 = (void *)v0[8];
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(unint64_t))v0[1];
    return v10(v2);
  }
  else
  {
    uint64_t v12 = v0[15];
    v0[13] = v2;
    uint64_t v13 = v0[11];
    if ((v13 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v14 = result;
    }
    else
    {
      uint64_t v14 = *(void *)(v13 + 8 * v12 + 32);
      uint64_t result = swift_retain();
    }
    v0[14] = v14;
    v0[15] = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = (void *)swift_task_alloc();
      v0[16] = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_100136B94;
      uint64_t v16 = v0[4];
      return sub_1004567B4(v16);
    }
  }
  return result;
}

uint64_t sub_100136EA4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100136F30()
{
  return swift_deallocObject();
}

uint64_t sub_100136F68@<X0>(void *a1@<X8>)
{
  return sub_100134BEC(a1);
}

uint64_t sub_100136F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JournalEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100136FE8(uint64_t a1)
{
  v1[3] = a1;
  v1[4] = *(void *)(type metadata accessor for JournalEntity() - 8);
  v1[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100137100, 0, 0);
}

uint64_t sub_100137100()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  id v5 = [*(id *)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_container) newBackgroundContext];
  v0[9] = v5;
  uint64_t v6 = swift_allocObject();
  v0[10] = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  swift_bridgeObjectRetain();
  v5;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  uint64_t v8 = sub_100010218(&qword_100802680);
  void *v7 = v0;
  v7[1] = sub_1001372A8;
  uint64_t v9 = v0[8];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v9, sub_100137A14, v6, v8);
}

uint64_t sub_1001372A8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  uint64_t v4 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    id v5 = sub_1001378D8;
  }
  else {
    id v5 = sub_10013743C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10013743C()
{
  unint64_t v1 = v0[2];
  v0[13] = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v0[14] = v8;
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v0[14] = v2;
    if (v2)
    {
LABEL_3:
      v0[15] = _swiftEmptyArrayStorage;
      uint64_t v3 = v0[13];
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v4 = *(void *)(v3 + 32);
        swift_retain();
      }
      v0[16] = v4;
      v0[17] = 1;
      id v5 = (void *)swift_task_alloc();
      v0[18] = v5;
      *id v5 = v0;
      v5[1] = sub_1001375C8;
      uint64_t v6 = v0[5];
      return sub_1004567B4(v6);
    }
  }
  uint64_t v9 = (void *)v0[9];
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(_swiftEmptyArrayStorage);
}

uint64_t sub_1001375C8()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100137950;
  }
  else
  {
    uint64_t v2 = sub_1001376F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001376F0()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = v0[15];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_1002A6390(0, *(void *)(v2 + 16) + 1, 1, v0[15]);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_1002A6390(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[14];
  uint64_t v8 = v0[4];
  uint64_t v7 = v0[5];
  *(void *)(v2 + 16) = v4 + 1;
  sub_100136F84(v7, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v4);
  swift_release();
  if (v5 == v6)
  {
    uint64_t v9 = (void *)v0[9];
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(unint64_t))v0[1];
    return v10(v2);
  }
  else
  {
    uint64_t v12 = v0[17];
    v0[15] = v2;
    uint64_t v13 = v0[13];
    if ((v13 & 0xC000000000000001) != 0)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v14 = result;
    }
    else
    {
      uint64_t v14 = *(void *)(v13 + 8 * v12 + 32);
      uint64_t result = swift_retain();
    }
    v0[16] = v14;
    v0[17] = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = (void *)swift_task_alloc();
      v0[18] = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_1001375C8;
      uint64_t v16 = v0[5];
      return sub_1004567B4(v16);
    }
  }
  return result;
}

uint64_t sub_1001378D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100137950()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001379D4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t sub_100137A14@<X0>(void *a1@<X8>)
{
  return sub_100134E4C(*(void *)(v1 + 16), a1);
}

uint64_t sub_100137A30(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  v2[7] = *(void *)(type metadata accessor for JournalEntity() - 8);
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100137B48, 0, 0);
}

uint64_t sub_100137B48()
{
  if (qword_1007F6D38 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  id v6 = [*(id *)(*(void *)(qword_10083D2F8 + 16) + OBJC_IVAR____TtC7Journal13CoreDataStack_container) newBackgroundContext];
  v0[12] = v6;
  uint64_t v7 = swift_allocObject();
  v0[13] = v7;
  *(void *)(v7 + 16) = _swiftEmptyArrayStorage;
  uint64_t v8 = (void *)swift_allocObject();
  v0[14] = v8;
  uint64_t v8[2] = v5;
  v8[3] = v4;
  void v8[4] = v6;
  v8[5] = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  swift_bridgeObjectRetain();
  v6;
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100137D10;
  uint64_t v10 = v0[11];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v10, sub_100138344, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_100137D10()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t v3 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100137E84, 0, 0);
}

uint64_t sub_100137E84()
{
  uint64_t v1 = v0[13];
  swift_beginAccess();
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v8 = (void *)v0[12];
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void *))v0[1];
    return v9(_swiftEmptyArrayStorage);
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = *(void *)(v2 + 32);
    swift_retain();
  }
  v0[16] = v5;
  swift_bridgeObjectRelease();
  id v6 = (void *)swift_task_alloc();
  v0[17] = v6;
  *id v6 = v0;
  v6[1] = sub_100138030;
  uint64_t v7 = v0[8];
  return sub_1004567B4(v7);
}

uint64_t sub_100138030()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10013822C;
  }
  else {
    unint64_t v2 = sub_100138144;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100138144()
{
  uint64_t v1 = (void *)v0[12];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  sub_100010218(&qword_1007FF5A8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1006D6280;
  sub_100136F84(v2, v5 + v4);

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(uint64_t))v0[1];
  return v6(v5);
}

uint64_t sub_10013822C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001382C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1001382FC()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

void sub_100138344()
{
  sub_10013501C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100138368()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FF5B0);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FF5B0);
  if (qword_1007F7D48 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EBD8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100138430(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 96) = a2;
  *(void *)(v4 + 104) = v3;
  *(unsigned char *)(v4 + 144) = a3;
  *(void *)(v4 + 88) = a1;
  uint64_t v5 = type metadata accessor for URL();
  *(void *)(v4 + 112) = v5;
  *(void *)(v4 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(v5 - 8);
  *(void *)(v4 + 128) = swift_task_alloc();
  *(void *)(v4 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100138508, 0, 0);
}

uint64_t sub_100138508()
{
  uint64_t v86 = v0;
  URL.path(percentEncoded:)(1);
  id v1 = objc_allocWithZone((Class)UIImage);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithContentsOfFile:v2];

  if (v3)
  {
    if (qword_1007F6F08 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_1003941CC(*(double *)&qword_10083D480);
    uint64_t v5 = UIImageHEICRepresentation(v4);
    if (v5)
    {
      id v6 = v5;
      os_log_type_t type = v4;
      char v7 = *(unsigned char *)(v0 + 144);
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      if (sub_100041A58(v7) == 0x746F68506576696CLL && v11 == 0xE90000000000006FLL)
      {
        sub_100040D64(v8, v10);
        swift_bridgeObjectRelease();
      }
      else
      {
        char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_100040D64(v8, v10);
        swift_bridgeObjectRelease();
        if ((v41 & 1) == 0)
        {
          sub_100040DD0(v8, v10);
          uint64_t v43 = v8;
          unint64_t v45 = v10;
          goto LABEL_41;
        }
      }
      sub_1001392E4(*(void *)(v0 + 88));
      if (v42)
      {
        uint64_t v43 = sub_1001397D0();
        unint64_t v45 = v44;
        swift_bridgeObjectRelease();
        sub_100040DD0(v8, v10);
        if (v45 >> 60 == 15)
        {
          if (qword_1007F6A10 != -1) {
            swift_once();
          }
          uint64_t v46 = *(void **)(v0 + 104);
          uint64_t v47 = type metadata accessor for Logger();
          sub_100026A54(v47, (uint64_t)qword_1007FF5B0);
          id v48 = v46;
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.error.getter();
          BOOL v50 = os_log_type_enabled(v31, v49);
          uint64_t v51 = *(void **)(v0 + 104);
          if (!v50)
          {
            sub_100040DD0(v8, v10);

            goto LABEL_42;
          }
          os_log_t loga = v31;
          uint64_t v52 = (uint8_t *)swift_slowAlloc();
          uint64_t v79 = (void *)swift_slowAlloc();
          uint64_t v82 = v3;
          *(_DWORD *)uint64_t v52 = 138412290;
          *(void *)(v0 + 72) = v51;
          id v53 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v79 = v51;

          unint64_t v54 = "%@._resizeImageAttachment unable to add content identifier to resized image";
          uint64_t v31 = loga;
          goto LABEL_29;
        }
        if (qword_1007F6A10 != -1) {
          swift_once();
        }
        uint64_t v60 = *(void **)(v0 + 104);
        uint64_t v61 = type metadata accessor for Logger();
        sub_100026A54(v61, (uint64_t)qword_1007FF5B0);
        id v62 = v60;
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        BOOL v65 = os_log_type_enabled(v63, v64);
        uint64_t v66 = *(void **)(v0 + 104);
        if (v65)
        {
          uint64_t v73 = v63;
          unint64_t v77 = v45;
          uint64_t v67 = (uint8_t *)swift_slowAlloc();
          uint64_t v68 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 138412290;
          *(void *)(v0 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v66;
          id v83 = v3;
          id v69 = v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v68 = v66;

          id v3 = v83;
          uint64_t v63 = v73;
          _os_log_impl((void *)&_mh_execute_header, v73, v64, "%@._resizeImageAttachment added content identifier property to image for LivePhoto", v67, 0xCu);
          sub_100010218((uint64_t *)&unk_1007FC430);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v45 = v77;
          swift_slowDealloc();
        }
        else
        {
        }
        sub_100040DD0(v8, v10);

LABEL_41:
        Data.write(to:options:)();
        sub_100040DD0(v43, v45);

        uint64_t v70 = 1;
        goto LABEL_44;
      }
      sub_100040DD0(v8, v10);
      if (qword_1007F6A10 != -1) {
        swift_once();
      }
      uint64_t v55 = *(void **)(v0 + 104);
      uint64_t v56 = type metadata accessor for Logger();
      sub_100026A54(v56, (uint64_t)qword_1007FF5B0);
      id v57 = v55;
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      BOOL v58 = os_log_type_enabled(v31, v49);
      uint64_t v37 = *(void **)(v0 + 104);
      if (v58)
      {
        uint64_t v76 = v31;
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 138412290;
        uint64_t v82 = v3;
        *(void *)(v0 + 64) = v37;
        id v59 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v75 = v37;

        unint64_t v54 = "%@._resizeImageAttachment unable to get content identifier from original image";
        uint64_t v31 = v76;
LABEL_29:
        _os_log_impl((void *)&_mh_execute_header, v31, v49, v54, v52, 0xCu);
        sub_100010218((uint64_t *)&unk_1007FC430);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100040DD0(v8, v10);
        goto LABEL_30;
      }
      sub_100040DD0(v8, v10);
    }
    else
    {
      if (qword_1007F6A10 != -1) {
        swift_once();
      }
      uint64_t v32 = *(void **)(v0 + 104);
      uint64_t v33 = type metadata accessor for Logger();
      sub_100026A54(v33, (uint64_t)qword_1007FF5B0);
      id v34 = v32;
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      BOOL v36 = os_log_type_enabled(v31, v35);
      uint64_t v37 = *(void **)(v0 + 104);
      if (v36)
      {
        os_log_type_t type = v4;
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 138412290;
        *(void *)(v0 + 32) = v37;
        uint64_t v82 = v3;
        id v40 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v39 = v37;

        _os_log_impl((void *)&_mh_execute_header, v31, v35, "%@._resizeImageAttachment unable to create data from resized image", v38, 0xCu);
        sub_100010218((uint64_t *)&unk_1007FC430);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_30:

        goto LABEL_42;
      }
    }
    goto LABEL_42;
  }
  if (qword_1007F6A10 != -1) {
    swift_once();
  }
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void **)(v0 + 104);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = type metadata accessor for Logger();
  sub_100026A54(v17, (uint64_t)qword_1007FF5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v16, v13);
  id v18 = v15;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void *)(v0 + 136);
  uint64_t v24 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v25 = *(void **)(v0 + 104);
  if (v21)
  {
    uint64_t v78 = *(void *)(v0 + 136);
    uint64_t v26 = swift_slowAlloc();
    uint64_t v74 = v24;
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 138412546;
    *(void *)(v0 + 16) = v25;
    log = v19;
    id v28 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v25;

    *(_WORD *)(v26 + 12) = 2080;
    sub_1000FBCDC();
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_10011EA98(v29, v30, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v78, v74);
    uint64_t v31 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v20, "%@._resizeImageAttachment unable to create image from url %s", (uint8_t *)v26, 0x16u);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_42:

    goto LABEL_43;
  }

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
LABEL_43:
  uint64_t v70 = 0;
LABEL_44:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v71 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v71(v70);
}

uint64_t sub_1001392E4(uint64_t a1)
{
  NSString v2 = v1;
  unint64_t v3 = (unint64_t)sub_10013A058(a1);
  if (v3)
  {
    unint64_t v4 = v3;
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = (id)kCGImagePropertyMakerAppleDictionary;
      uint64_t v6 = __CocoaDictionary.lookup(_:)();

      swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_12;
    }
    if (*(void *)(v3 + 16))
    {
      uint64_t v15 = (id)kCGImagePropertyMakerAppleDictionary;
      unint64_t v16 = sub_10001BB40((uint64_t)v15);
      if (v17)
      {
        uint64_t v6 = *(void *)(*(void *)(v4 + 56) + 8 * v16);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
LABEL_12:
        *(void *)&long long v30 = v6;
        sub_100010218(&qword_1007FF5E8);
        if (swift_dynamicCast())
        {
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (*(void *)(v29 + 16) && (unint64_t v20 = sub_10001B5D0(v18, v19), (v21 & 1) != 0))
          {
            sub_10001B648(*(void *)(v29 + 56) + 32 * v20, (uint64_t)&v30);
          }
          else
          {
            long long v30 = 0u;
            long long v31 = 0u;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((void *)&v31 + 1))
          {
            if (swift_dynamicCast()) {
              return v29;
            }
          }
          else
          {
            sub_10001B418((uint64_t)&v30);
          }
          if (qword_1007F6A10 != -1) {
            swift_once();
          }
          uint64_t v26 = type metadata accessor for Logger();
          sub_100026A54(v26, (uint64_t)qword_1007FF5B0);
          id v8 = v2;
          unint64_t v9 = Logger.logObject.getter();
          os_log_type_t v10 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v9, v10))
          {
            uint64_t v11 = (uint8_t *)swift_slowAlloc();
            uint64_t v27 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v11 = 138412290;
            *(void *)&long long v30 = v8;
            id v28 = v8;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v27 = v8;

            uint64_t v14 = "%@.getImageContentIdentifier can't find Asset Identifier (AVAppleMakerNote_AssetIdentifier) in kCGImag"
                  "ePropertyMakerAppleDictionary";
            goto LABEL_26;
          }
          goto LABEL_32;
        }
LABEL_22:
        if (qword_1007F6A10 != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        sub_100026A54(v23, (uint64_t)qword_1007FF5B0);
        id v8 = v2;
        unint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          uint64_t v24 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 138412290;
          *(void *)&long long v30 = v8;
          id v25 = v8;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v24 = v8;

          uint64_t v14 = "%@.getImageContentIdentifier can't find kCGImagePropertyMakerAppleDictionary in properties";
          goto LABEL_26;
        }
LABEL_32:

        return 0;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (qword_1007F6A10 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100026A54(v7, (uint64_t)qword_1007FF5B0);
  id v8 = v1;
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v9, v10)) {
    goto LABEL_32;
  }
  uint64_t v11 = (uint8_t *)swift_slowAlloc();
  uint64_t v12 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v11 = 138412290;
  *(void *)&long long v30 = v8;
  id v13 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v12 = v8;

  uint64_t v14 = "%@.getImageContentIdentifier can't get image properties";
LABEL_26:
  _os_log_impl((void *)&_mh_execute_header, v9, v10, v14, v11, 0xCu);
  sub_100010218((uint64_t *)&unk_1007FC430);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

uint64_t sub_1001397D0()
{
  id v1 = v0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v3 = CGImageSourceCreateWithData(isa, 0);

  if (!v3)
  {
    if (qword_1007F6A10 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100026A54(v8, (uint64_t)qword_1007FF5B0);
    id v9 = v1;
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v10))
    {

      return 0;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    id v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v10, "%@.addImageContentIdentfier can't create image source from data", v11, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_20:

    return 0;
  }
  CFStringRef v4 = (id)CGImageSourceGetType((CGImageSourceRef)v3);
  if (!v4)
  {
    if (qword_1007F6A10 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100026A54(v21, (uint64_t)qword_1007FF5B0);
    id v22 = v1;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)id v25 = 138412290;
      id v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v22;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%@.addImageContentIdentfier can't get type from image source", v25, 0xCu);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_20;
  }
  uint64_t v5 = (__CFString *)v4;
  CFDictionaryRef v6 = CGImageSourceCopyPropertiesAtIndex((CGImageSourceRef)v3, 0, 0);
  if (v6)
  {
    CFDictionaryRef v7 = v6;
    sub_10001B284(0, (unint64_t *)&qword_1007FF330);
    sub_10013A648();
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  if (qword_1007F6A10 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100026A54(v14, (uint64_t)qword_1007FF5B0);
  id v15 = v1;
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 138412290;
    uint64_t v29 = v5;
    id v20 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@.addImageContentIdentfier can't get imageProperties from image source", v18, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

void *sub_10013A058(uint64_t a1)
{
  NSString v2 = v1;
  CFStringRef v4 = (NSString *)type metadata accessor for URL();
  uint64_t v5 = (uint64_t)*(v4 - 1);
  __chkstk_darwin(v4);
  CFDictionaryRef v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v39 - v9;
  URL._bridgeToObjectiveC()(&v39);
  CFURLRef v12 = v11;
  id v13 = CGImageSourceCreateWithURL(v11, 0);

  if (!v13)
  {
    if (qword_1007F6A10 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100026A54(v28, (uint64_t)qword_1007FF5B0);
    (*(void (**)(char *, uint64_t, NSString *))(v5 + 16))(v7, a1, v4);
    id v29 = v2;
    baseURL = (NSURL *)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(&baseURL->super, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v39._urlString = v4;
      uint64_t v32 = v31;
      uint64_t v33 = (void *)swift_slowAlloc();
      v39._clients = (void *)swift_slowAlloc();
      v39._reserved = v29;
      clients = v39._clients;
      *(_DWORD *)uint64_t v32 = 138412546;
      v39._baseURL = baseURL;
      id v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v29;

      *(_WORD *)(v32 + 12) = 2080;
      sub_1000FBCDC();
      urlString = v39._urlString;
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      v39._reserved = (void *)sub_10011EA98(v36, v37, (uint64_t *)&clients);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, NSString *))(v5 + 8))(v7, urlString);
      baseURL = v39._baseURL;
      _os_log_impl((void *)&_mh_execute_header, &v39._baseURL->super, v30, "%@.getImageProperties can't create image source from URL: %s", (uint8_t *)v32, 0x16u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, NSString *))(v5 + 8))(v7, v4);
    }
    goto LABEL_15;
  }
  CFDictionaryRef v14 = CGImageSourceCopyPropertiesAtIndex(v13, 0, 0);
  if (!v14
    || (CFDictionaryRef v15 = v14,
        clients = 0,
        sub_10001B284(0, (unint64_t *)&qword_1007FF330),
        sub_10013A648(),
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(),
        v15,
        (unint64_t v16 = clients) == 0))
  {
    if (qword_1007F6A10 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100026A54(v17, (uint64_t)qword_1007FF5B0);
    (*(void (**)(char *, uint64_t, NSString *))(v5 + 16))(v10, a1, v4);
    id v18 = v2;
    baseURL = (NSURL *)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    int v21 = v20;
    if (os_log_type_enabled(&baseURL->super, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      v39.super.CFDataRef isa = (Class)swift_slowAlloc();
      v39._clients = (void *)swift_slowAlloc();
      v39._reserved = v18;
      clients = v39._clients;
      *(_DWORD *)uint64_t v22 = 138412546;
      v39._baseURL = baseURL;
      id v23 = v18;
      LODWORD(v39._urlString) = v21;
      id v24 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)v39.super.CFDataRef isa = v18;

      *(_WORD *)(v22 + 12) = 2080;
      sub_1000FBCDC();
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      v39._reserved = (void *)sub_10011EA98(v25, v26, (uint64_t *)&clients);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, NSString *))(v5 + 8))(v10, v4);
      id v27 = v39._baseURL;
      _os_log_impl((void *)&_mh_execute_header, &v39._baseURL->super, (os_log_type_t)v39._urlString, "%@.getImageProperties can't get image properties from source from URL: %s", (uint8_t *)v22, 0x16u);
      sub_100010218((uint64_t *)&unk_1007FC430);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return 0;
    }

    (*(void (**)(char *, NSString *))(v5 + 8))(v10, v4);
LABEL_15:

    return 0;
  }

  return v16;
}

unint64_t sub_10013A648()
{
  unint64_t result = qword_1007FF5D0;
  if (!qword_1007FF5D0)
  {
    sub_10001B284(255, (unint64_t *)&qword_1007FF330);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF5D0);
  }
  return result;
}

double *sub_10013A6B0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100010218(&qword_10080A410);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TranscriptViewModelSegment(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v30 = (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v28 = (uint64_t)&v24 - v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v16 = *(void *)(type metadata accessor for TranscriptionSegment() - 8);
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v11;
  id v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v29 = *(void *)(v16 + 72);
  uint64_t v24 = a3;
  swift_bridgeObjectRetain();
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v26 = v10;
  uint64_t v27 = a2;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v9, 1, v10) == 1)
    {
      sub_10001457C((uint64_t)v9, &qword_10080A410);
    }
    else
    {
      uint64_t v20 = v28;
      sub_100140AF0((uint64_t)v9, v28, type metadata accessor for TranscriptViewModelSegment);
      sub_100140AF0(v20, v30, type metadata accessor for TranscriptViewModelSegment);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = (double *)sub_1002A59A8(0, *((void *)v19 + 2) + 1, 1, (unint64_t)v19);
      }
      unint64_t v22 = *((void *)v19 + 2);
      unint64_t v21 = *((void *)v19 + 3);
      if (v22 >= v21 >> 1) {
        uint64_t v19 = (double *)sub_1002A59A8(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      }
      *((void *)v19 + 2) = v22 + 1;
      sub_100140AF0(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, type metadata accessor for TranscriptViewModelSegment);
      uint64_t v10 = v26;
    }
    v17 += v29;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_10013A9E0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FF5F0);
  uint64_t v1 = sub_100026A54(v0, (uint64_t)qword_1007FF5F0);
  if (qword_1007F7DF0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100026A54(v0, (uint64_t)qword_10083EDD0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

NSString sub_10013AAA8()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  NSString result = String._bridgeToObjectiveC()();
  static NSAttributedStringKey.audio_transcriptText = (uint64_t)result;
  return result;
}

uint64_t *NSAttributedStringKey.audio_transcriptText.unsafeMutableAddressor()
{
  if (qword_1007F6A20 != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey.audio_transcriptText;
}

id static NSAttributedStringKey.audio_transcriptText.getter()
{
  if (qword_1007F6A20 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSAttributedStringKey.audio_transcriptText;

  return v0;
}

uint64_t sub_10013ABB4()
{
  _StringGuts.grow(_:)(18);
  v0._uint64_t countAndFlagsBits = 540697705;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  sub_1001409B8((unint64_t *)&qword_100801100, (void (*)(uint64_t))&type metadata accessor for UUID);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x746E656D6765730ALL;
  v2._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v2);
  type metadata accessor for TranscriptViewModelSegment(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_10013ACD8()
{
  if (*v0) {
    return 0x746E656D676573;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10013AD08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10014110C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10013AD30(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10013AD3C(uint64_t a1)
{
  unint64_t v2 = sub_100140964();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013AD78(uint64_t a1)
{
  unint64_t v2 = sub_100140964();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013ADB4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Journal18TranscriptMetadata_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100140F64(v0 + OBJC_IVAR____TtC7Journal18TranscriptMetadata_segment);

  return swift_deallocClassInstance();
}

uint64_t sub_10013AE64()
{
  return type metadata accessor for TranscriptMetadata(0);
}

uint64_t type metadata accessor for TranscriptMetadata(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FF630);
}

uint64_t sub_10013AE8C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TranscriptViewModelSegment(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10013AF58(void *a1)
{
  uint64_t v3 = sub_100010218(&qword_1007FF9C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002E0BC(a1, a1[3]);
  sub_100140964();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_1001409B8(&qword_1007FDC58, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    type metadata accessor for TranscriptViewModelSegment(0);
    sub_1001409B8(&qword_1007FE8D8, (void (*)(uint64_t))type metadata accessor for TranscriptViewModelSegment);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t *sub_10013B160(void *a1)
{
  uint64_t v4 = *v1;
  uint64_t v20 = v2;
  uint64_t v21 = v4;
  uint64_t v5 = type metadata accessor for TranscriptViewModelSegment(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v17 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100010218(&qword_1007FF9B0);
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E0BC(a1, a1[3]);
  sub_100140964();
  uint64_t v12 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v20 = v9;
    v15[1] = v5;
    char v23 = 0;
    sub_1001409B8((unint64_t *)&unk_100811820, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v13 = *(void (**)(void))(v16 + 32);
    v15[0] = (char *)v1 + OBJC_IVAR____TtC7Journal18TranscriptMetadata_id;
    v13();
    char v22 = 1;
    sub_1001409B8(&qword_1007FE8B0, (void (*)(uint64_t))type metadata accessor for TranscriptViewModelSegment);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
    sub_100140AF0((uint64_t)v7, (uint64_t)v1 + OBJC_IVAR____TtC7Journal18TranscriptMetadata_segment, type metadata accessor for TranscriptViewModelSegment);
  }
  _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)a1);
  return v1;
}

uint64_t *sub_10013B544@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_10013B160(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10013B59C(void *a1)
{
  return sub_10013AF58(a1);
}

uint64_t sub_10013B5C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7Journal18TranscriptMetadata_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10013B638()
{
  return sub_10013ABB4();
}

uint64_t sub_10013B65C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_10001B220(v1 + 16, a1, &qword_1007FFA68);
}

uint64_t sub_10013B728@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return sub_10001B220(v3 + 16, a2, &qword_1007FFA68);
}

uint64_t sub_10013B7F4(uint64_t a1)
{
  sub_10001B220(a1, (uint64_t)v2, &qword_1007FFA68);
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10001457C((uint64_t)v2, &qword_1007FFA68);
}

uint64_t sub_10013B8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  sub_100141490(a2, v3);
  return swift_endAccess();
}

uint64_t sub_10013B948()
{
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10013B9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013BA34()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10013BAEC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013BB54()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10013BBF8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013BC34()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10013BCD8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 88) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013BD14()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10013BDB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 96);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10013BE64()
{
  return swift_release();
}

uint64_t sub_10013BF44()
{
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1000C8A14(v2);
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1000C8A14(v3);
  return v1;
}

id sub_10013C088()
{
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 104);

  return v1;
}

id sub_10013C138@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 104);
  *a2 = v4;

  return v4;
}

uint64_t sub_10013C1F0(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t sub_10013C2CC()
{
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t sub_10013C36C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 120);
  return result;
}

uint64_t sub_10013C414()
{
  return swift_release();
}

uint64_t sub_10013C4E4(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 64) = 0xE000000000000000;
  *(void *)(v1 + 72) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 96) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 104) = [objc_allocWithZone((Class)NLTokenizer) initWithUnit:1];
  type metadata accessor for SiriTranscriptionMethod();
  uint64_t v4 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v4 + 112) = 0;
  uint64_t v5 = v4 + OBJC_IVAR____TtC7Journal23SiriTranscriptionMethod_transcriptionContinuation;
  uint64_t v6 = sub_100010218(&qword_1007FF9C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)(v2 + 112) = v4;
  *(unsigned char *)(v2 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  type metadata accessor for CancellableTaskQueue();
  swift_allocObject();
  *(void *)(v2 + 128) = sub_10021A510(0xD00000000000002CLL, 0x800000010068C790);
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  swift_allocObject();
  *(void *)(v2 + 136) = sub_10021A510(0xD000000000000027, 0x800000010068C7C0);
  ObservationRegistrar.init()();
  sub_10001B220(a1, (uint64_t)&v11, &qword_1007F9470);
  if (v12)
  {
    sub_10001B3BC(&v11, (uint64_t)v13);
    uint64_t v7 = v14;
    uint64_t v8 = v15;
    sub_10002E0BC(v13, v14);
    (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(void *)&long long v11 = v2;
    sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10013CD84(2, 0);
    sub_10001457C(a1, &qword_1007F9470);
    _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)v13);
  }
  else
  {
    sub_10001457C(a1, &qword_1007F9470);
    sub_10001457C((uint64_t)&v11, &qword_1007F9470);
  }
  return v2;
}

uint64_t sub_10013C80C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = a2;
  return _swift_task_switch(sub_10013C82C, 0, 0);
}

uint64_t sub_10013C82C()
{
  unint64_t v1 = sub_100659610(v0[18]);
  v0[20] = 0;
  v0[21] = v1;
  v0[22] = v2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[23] = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    v0[24] = static MainActor.shared.getter();
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10013CAF4, v5, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10013CAF4()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  swift_release();
  swift_getKeyPath();
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v0[2] = v1;
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_getKeyPath();
  v0[7] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  sub_10001B220(v1 + 16, (uint64_t)(v0 + 2), &qword_1007FFA68);
  if (v0[5])
  {
    sub_100141410((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    sub_10001457C((uint64_t)(v0 + 2), &qword_1007FFA68);
    uint64_t v5 = v0[10];
    uint64_t v6 = v0[11];
    sub_10002E0BC(v0 + 7, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    _s7Journal19DynamicWaveformViewVwxx_0((uint64_t)(v0 + 7));
  }
  else
  {
    sub_10001457C((uint64_t)(v0 + 2), &qword_1007FFA68);
  }
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10013CD24, 0, 0);
}

uint64_t sub_10013CD24()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013CD84(char a1, char a2)
{
  if (a1 == 2)
  {
    if ((a2 & 1) == 0)
    {
      swift_getKeyPath();
      sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v2 = swift_bridgeObjectRetain();
      char v3 = 2;
      goto LABEL_7;
    }
  }
  else if (a1 == 1 && (a2 & 1) == 0)
  {
    swift_getKeyPath();
    sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    uint64_t v2 = swift_bridgeObjectRetain();
    char v3 = 1;
LABEL_7:
    sub_10013CF74(v2, v3);
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = sub_10013BF44();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  sub_10021A74C((uint64_t)&unk_1007FFA60, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_10013CF74(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (!a2)
  {
    if (qword_1007F6A18 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100026A54(v6, (uint64_t)qword_1007FF5F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Trying to post-process temporary segments. That's probably not a good idea, but OK.", v9, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  swift_getKeyPath();
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  long long v11 = *(void **)(v3 + 104);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = v10;
  *(unsigned char *)(v12 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a2;
  id v13 = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10021A74C((uint64_t)&unk_1007FFA50, v12);
  swift_release();

  return swift_release();
}

uint64_t sub_10013D184(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 104) = a4;
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 48) = a1;
  return _swift_task_switch(sub_10013D1AC, 0, 0);
}

uint64_t sub_10013D1AC()
{
  unint64_t v2 = v0[6];
  uint64_t v1 = (uint64_t **)v0[7];
  uint64_t v3 = NLLanguageEnglish;
  uint64_t v4 = sub_100659D28(v2, v1, (char *)NLLanguageEnglish);
  v0[9] = v4;
  v0[10] = 0;

  if (v4[2].isa && (swift_beginAccess(), uint64_t Strong = swift_weakLoadStrong(), (v0[11] = Strong) != 0))
  {
    type metadata accessor for MainActor();
    v0[12] = static MainActor.shared.getter();
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10013D500, v7, v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10013D500()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v1;
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(v0 + 104);
  swift_task_dealloc();
  sub_10013CD84(v4, 1);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10013D7A8, 0, 0);
}

uint64_t sub_10013D7A8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013D808(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100010218(&qword_1007FF9D8);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AttributedString.Runs();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  sub_100010218(&qword_1007FE5B8);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AttributedString();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for EARResultType();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Transcriber.MultisegmentResult();
  v2[24] = v7;
  v2[25] = *(void *)(v7 - 8);
  v2[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TranscriptionUpdate(0);
  v2[27] = v8;
  v2[28] = *(void *)(v8 - 8);
  v2[29] = swift_task_alloc();
  sub_100010218(&qword_1007FF9E0);
  v2[30] = swift_task_alloc();
  uint64_t v9 = sub_100010218(&qword_1007FF9E8);
  v2[31] = v9;
  v2[32] = *(void *)(v9 - 8);
  v2[33] = swift_task_alloc();
  sub_100010218((uint64_t *)&unk_100800A60);
  v2[34] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for URL();
  v2[35] = v10;
  v2[36] = *(void *)(v10 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  uint64_t v11 = sub_100010218(&qword_1007FF9F0);
  v2[39] = v11;
  unsigned char v2[40] = *(void *)(v11 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  sub_100010218(&qword_1007FEAE0);
  v2[44] = swift_task_alloc();
  v2[45] = type metadata accessor for MainActor();
  v2[46] = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[47] = v13;
  v2[48] = v12;
  return _swift_task_switch(sub_10013DCD8, v13, v12);
}

uint64_t sub_10013DCD8()
{
  if (qword_1007F7E00 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10013DDE8;
  uint64_t v4 = *(void *)(v0 + 352);
  return sub_100590A80(v4);
}

uint64_t sub_10013DDE8(char a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 352);
  *(unsigned char *)(*v1 + 556) = a1;
  swift_task_dealloc();
  sub_10001457C(v3, &qword_1007FEAE0);
  uint64_t v4 = *(void *)(v2 + 384);
  uint64_t v5 = *(void *)(v2 + 376);
  return _swift_task_switch(sub_10013DF3C, v5, v4);
}

uint64_t sub_10013DF3C()
{
  uint64_t v37 = v0;
  if (*(unsigned char *)(v0 + 556) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 288);
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v34 = *(void *)(v0 + 72);
    uint64_t v35 = *(void *)(v0 + 280);
    uint64_t v33 = *(void *)(v0 + 272);
    swift_getKeyPath();
    uint64_t v3 = swift_task_alloc();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 40sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = OBJC_IVAR____TtC7Journal24TranscriptionCoordinator___observationRegistrar;
    *(void *)(v0 + 16) = v2;
    *(void *)(v0 + 408) = sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    swift_getKeyPath();
    uint64_t v4 = swift_task_alloc();
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 24) = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    swift_getKeyPath();
    uint64_t v5 = swift_task_alloc();
    *(void *)(v5 + 16) = v2;
    *(void *)(v5 + 24) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 32) = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    sub_10001B220(v34, v33, (uint64_t *)&unk_100800A60);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v33, 1, v35) == 1)
    {
      sub_10001457C(*(void *)(v0 + 272), (uint64_t *)&unk_100800A60);
      if (qword_1007F6A18 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100026A54(v6, (uint64_t)qword_1007FF5F0);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Transcribing from live recording", v9, 2u);
        swift_slowDealloc();
      }

      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 44sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v10;
      void *v10 = v0;
      v10[1] = sub_10013E970;
      uint64_t v11 = *(void *)(v0 + 328);
      return sub_1002E1D30(v11);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 288) + 32))(*(void *)(v0 + 304), *(void *)(v0 + 272), *(void *)(v0 + 280));
      if (qword_1007F6A18 != -1) {
        swift_once();
      }
      uint64_t v15 = *(void *)(v0 + 296);
      uint64_t v16 = *(void *)(v0 + 304);
      uint64_t v17 = *(void *)(v0 + 280);
      uint64_t v18 = *(void *)(v0 + 288);
      uint64_t v19 = type metadata accessor for Logger();
      sub_100026A54(v19, (uint64_t)qword_1007FF5F0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v17);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = *(void *)(v0 + 288);
      uint64_t v24 = *(void *)(v0 + 296);
      uint64_t v25 = *(void *)(v0 + 280);
      if (v22)
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        sub_1001409B8((unint64_t *)&qword_100800940, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 64) = sub_10011EA98(v27, v28, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
        v29(v24, v25);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Transcribing from existing file %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
        v29(*(void *)(v0 + 296), *(void *)(v0 + 280));
      }

      *(void *)(v0 + 416) = v29;
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v30;
      void *v30 = v0;
      v30[1] = sub_10013E658;
      uint64_t v31 = *(void *)(v0 + 336);
      uint64_t v32 = *(void *)(v0 + 304);
      return sub_1002E2CE8(v31, v32);
    }
  }
  else
  {
    swift_release();
    sub_100140A38();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_10013E658()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 384);
  uint64_t v4 = *(void *)(v2 + 376);
  if (v0) {
    uint64_t v5 = sub_10013F6D0;
  }
  else {
    uint64_t v5 = sub_10013E794;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10013E794()
{
  (*(void (**)(void, void))(v0 + 416))(*(void *)(v0 + 304), *(void *)(v0 + 280));
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(*(void *)(v0 + 320) + 32))(*(void *)(v0 + 344), *(void *)(v0 + 336), *(void *)(v0 + 312));
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = 1;
  *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  AsyncStream.makeAsyncIterator()();
  *(_DWORD *)(v0 + 544) = enum case for EARResultType.partial(_:);
  *(_DWORD *)(v0 + 548) = enum case for EARResultType.final(_:);
  *(_DWORD *)(v0 + 552) = enum case for EARResultType.finalAndTerminal(_:);
  *(void *)(v0 + 456) = v1;
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 464) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10013EC70;
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 248);
  return AsyncStream.Iterator.next(isolation:)(v6, v4, &protocol witness table for MainActor, v7);
}

uint64_t sub_10013E970()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 448) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 384);
  uint64_t v4 = *(void *)(v2 + 376);
  if (v0) {
    uint64_t v5 = sub_10013F834;
  }
  else {
    uint64_t v5 = sub_10013EAAC;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10013EAAC()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 80);
  (*(void (**)(void, void, void))(*(void *)(v0 + 320) + 32))(*(void *)(v0 + 344), *(void *)(v0 + 328), *(void *)(v0 + 312));
  swift_getKeyPath();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = 1;
  *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  AsyncStream.makeAsyncIterator()();
  *(_DWORD *)(v0 + 544) = enum case for EARResultType.partial(_:);
  *(_DWORD *)(v0 + 548) = enum case for EARResultType.final(_:);
  *(_DWORD *)(v0 + 552) = enum case for EARResultType.finalAndTerminal(_:);
  *(void *)(v0 + 456) = v1;
  uint64_t v4 = static MainActor.shared.getter();
  *(void *)(v0 + 464) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10013EC70;
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 248);
  return AsyncStream.Iterator.next(isolation:)(v6, v4, &protocol witness table for MainActor, v7);
}

uint64_t sub_10013EC70()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 384);
  uint64_t v3 = *(void *)(v1 + 376);
  return _swift_task_switch(sub_10013EDB4, v3, v2);
}

uint64_t sub_10013EDB4()
{
  uint64_t v1 = *(void *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 48))(v1, 1, *(void *)(v0 + 216)) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 48sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10013F430;
    return sub_100140308();
  }
  else
  {
    sub_100140AF0(v1, *(void *)(v0 + 232), type metadata accessor for TranscriptionUpdate);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v4 = *(_DWORD *)(v0 + 552);
      int v5 = *(_DWORD *)(v0 + 548);
      int v6 = *(_DWORD *)(v0 + 544);
      uint64_t v7 = *(void *)(v0 + 184);
      uint64_t v8 = *(void *)(v0 + 168);
      uint64_t v9 = *(void *)(v0 + 176);
      (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 32))(*(void *)(v0 + 208), *(void *)(v0 + 232), *(void *)(v0 + 192));
      Transcriber.MultisegmentResult.earResultType.getter();
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8);
      uint64_t v11 = *(void *)(v0 + 208);
      if (v10 == v6 || v10 == v5 || v10 == v4)
      {
        Transcriber.MultisegmentResult.resultsFinalToTime.getter();
        Transcriber.MultisegmentResult.range.getter();
        CMTimeRange.end.getter();
        if (static CMTime.>= infix(_:_:)())
        {
          uint64_t v14 = Transcriber.MultisegmentResult.transcriptions.getter();
          if (*(void *)(v14 + 16))
          {
            (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 152) + 16))(*(void *)(v0 + 136), v14+ ((*(unsigned __int8 *)(*(void *)(v0 + 152) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 152) + 80)), *(void *)(v0 + 144));
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v15 = 1;
          }
          uint64_t v26 = *(void *)(v0 + 144);
          uint64_t v27 = *(void *)(v0 + 152);
          uint64_t v28 = *(void *)(v0 + 136);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v28, v15, 1, v26);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) == 1)
          {
            uint64_t v29 = *(void *)(v0 + 136);
            (*(void (**)(void, void))(*(void *)(v0 + 200) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 192));
            sub_10001457C(v29, &qword_1007FE5B8);
            uint64_t v18 = *(void *)(v0 + 456);
          }
          else
          {
            uint64_t v45 = *(void *)(v0 + 456);
            uint64_t v48 = *(void *)(v0 + 192);
            uint64_t v50 = *(void *)(v0 + 208);
            uint64_t v31 = *(void *)(v0 + 152);
            uint64_t v30 = *(void *)(v0 + 160);
            uint64_t v46 = *(void *)(v0 + 144);
            uint64_t v47 = *(void *)(v0 + 200);
            uint64_t v32 = *(void *)(v0 + 120);
            uint64_t v33 = *(void *)(v0 + 128);
            uint64_t v35 = *(char **)(v0 + 104);
            uint64_t v34 = *(void *)(v0 + 112);
            uint64_t v36 = *(void *)(v0 + 96);
            uint64_t v44 = *(void *)(v0 + 88);
            uint64_t v37 = *(void *)(v0 + 80);
            (*(void (**)(uint64_t, void))(v31 + 32))(v30, *(void *)(v0 + 136));
            AttributedString.runs.getter();
            type metadata accessor for TimeRangeAttribute();
            sub_1001409B8(&qword_1007FFA00, (void (*)(uint64_t))&type metadata accessor for TimeRangeAttribute);
            AttributedString.Runs.subscript.getter();
            (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
            uint64_t v38 = swift_task_alloc();
            *(void *)(v38 + 16) = v30;
            *(void *)(v38 + 24) = v37;
            uint64_t v18 = v45;
            sub_100140B7C(v35, (void (*)(unsigned char *, char *))sub_100140B74, v38);
            (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v44);
            swift_task_dealloc();
            swift_getKeyPath();
            uint64_t v39 = swift_task_alloc();
            *(void *)(v39 + 16) = v37;
            *(void *)(v39 + 24) = _swiftEmptyArrayStorage;
            *(void *)(v0 + 56) = v37;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
            swift_release();
            swift_task_dealloc();
            sub_10013CD84(0, 0);
            (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v46);
            (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v50, v48);
          }
        }
        else
        {
          uint64_t v18 = *(void *)(v0 + 456);
          uint64_t v20 = *(void *)(v0 + 200);
          uint64_t v19 = *(void *)(v0 + 208);
          uint64_t v49 = *(void *)(v0 + 192);
          uint64_t v21 = *(void *)(v0 + 80);
          uint64_t v22 = Transcriber.MultisegmentResult.segments.getter();
          uint64_t v23 = swift_task_alloc();
          *(void *)(v23 + 16) = v19;
          uint64_t v24 = sub_10013A6B0((void (*)(uint64_t))sub_100140B58, v23, v22);
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_getKeyPath();
          uint64_t v25 = swift_task_alloc();
          *(void *)(v25 + 16) = v21;
          *(void *)(v25 + 24) = v24;
          *(void *)(v0 + 48) = v21;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
          swift_release();
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          sub_10013CD84(0, 0);
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v49);
        }
        *(void *)(v0 + 456) = v18;
      }
      else
      {
        uint64_t v16 = *(void *)(v0 + 192);
        uint64_t v17 = *(void *)(v0 + 200);
        (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v11, v16);
      }
    }
    uint64_t v40 = static MainActor.shared.getter();
    *(void *)(v0 + 464) = v40;
    char v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v41;
    *char v41 = v0;
    v41[1] = sub_10013EC70;
    uint64_t v42 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 248);
    return AsyncStream.Iterator.next(isolation:)(v42, v40, &protocol witness table for MainActor, v43);
  }
}

uint64_t sub_10013F430()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 384);
  uint64_t v4 = *(void *)(v2 + 376);
  if (v0) {
    int v5 = sub_10013F974;
  }
  else {
    int v5 = sub_10013F56C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10013F56C()
{
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[40];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10013F6D0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[52];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[35];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10013F834()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10013F974()
{
  uint64_t v1 = v0[43];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[40];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10013FAD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AttributedString.CharacterView();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TranscriptionSegment.text.getter();
  AttributedString.characters.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1001409B8(&qword_1007FFA40, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  uint64_t v7 = String.init<A>(_:)();
  uint64_t v9 = v8;
  Transcriber.MultisegmentResult.range.getter();
  CMTime.seconds.getter();
  uint64_t v11 = v10;
  Transcriber.MultisegmentResult.range.getter();
  CMTime.seconds.getter();
  uint64_t v13 = v12;
  UUID.init()();
  uint64_t v14 = (int *)type metadata accessor for TranscriptViewModelSegment(0);
  uint64_t v15 = (uint64_t *)(a1 + v14[5]);
  *uint64_t v15 = v7;
  v15[1] = v9;
  *(void *)(a1 + v14[6]) = v11;
  *(void *)(a1 + v14[7]) = v13;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v14 - 1) + 56))(a1, 0, 1, v14);
}

uint64_t sub_10013FD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a3;
  uint64_t v39 = a2;
  uint64_t v6 = (int *)type metadata accessor for TranscriptViewModelSegment(0);
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6);
  uint64_t v43 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - v10;
  uint64_t v42 = type metadata accessor for CharacterSet();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AttributedString.CharacterView();
  __chkstk_darwin(v14);
  uint64_t v15 = type metadata accessor for AttributedSubstring();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for AttributedString();
  uint64_t v44 = *(void *)(v16 - 8);
  uint64_t v45 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_10002C4EC(a1, (uint64_t)v48, &qword_1007FFA30);
  if ((v49 & 1) == 0)
  {
    uint64_t v38 = v7;
    long long v50 = v48[0];
    long long v51 = v48[1];
    long long v52 = v48[2];
    CMTime.seconds.getter();
    double v21 = v20;
    CMTimeRange.end.getter();
    CMTime.seconds.getter();
    double v23 = v22 - v21;
    sub_100010218(&qword_1007F8EA0);
    sub_100014488((unint64_t *)&qword_1007FFA38, &qword_1007F8EA0);
    AttributedString.subscript.getter();
    AttributedString.init(_:)();
    AttributedString.characters.getter();
    sub_1001409B8(&qword_1007FFA40, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
    uint64_t v46 = String.init<A>(_:)();
    uint64_t v47 = v24;
    static CharacterSet.whitespacesAndNewlines.getter();
    sub_100014344();
    uint64_t v25 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v42);
    swift_bridgeObjectRelease();
    UUID.init()();
    uint64_t v28 = (uint64_t *)&v11[v6[5]];
    *uint64_t v28 = v25;
    v28[1] = v27;
    *(double *)&v11[v6[6]] = v21;
    *(double *)&v11[v6[7]] = v23;
    uint64_t v29 = v43;
    sub_100140F00((uint64_t)v11, v43);
    swift_getKeyPath();
    uint64_t v46 = a4;
    sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v46 = a4;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v30 = (unint64_t *)(a4 + 72);
    swift_beginAccess();
    unint64_t v31 = *(void *)(a4 + 72);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 72) = v31;
    uint64_t v37 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v31 = sub_1002A59A8(0, *(void *)(v31 + 16) + 1, 1, v31);
      unint64_t *v30 = v31;
    }
    unint64_t v34 = *(void *)(v31 + 16);
    unint64_t v33 = *(void *)(v31 + 24);
    uint64_t v35 = v38;
    if (v34 >= v33 >> 1)
    {
      unint64_t v31 = sub_1002A59A8(v33 > 1, v34 + 1, 1, v31);
      unint64_t *v30 = v31;
    }
    *(void *)(v31 + 16) = v34 + 1;
    sub_100140AF0(v29, v31+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v34, type metadata accessor for TranscriptViewModelSegment);
    swift_endAccess();
    uint64_t v46 = a4;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    sub_10013CD84(1, 0);
    sub_100140F64((uint64_t)v11);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v37, v45);
  }
  return result;
}

uint64_t sub_100140308()
{
  v1[3] = v0;
  type metadata accessor for MainActor();
  v1[4] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[5] = v3;
  v1[6] = v2;
  return _swift_task_switch(sub_1001403A0, v3, v2);
}

uint64_t sub_1001403A0()
{
  uint64_t v1 = v0[3];
  swift_getKeyPath();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 0;
  v0[2] = v1;
  sub_1001409B8(&qword_1007FF9D0, (void (*)(uint64_t))type metadata accessor for TranscriptionCoordinator);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001404F8;
  return sub_1002E2414();
}

uint64_t sub_1001404F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v5 = sub_100140698;
  }
  else {
    uint64_t v5 = sub_100140634;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100140634()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100140698()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001406FC()
{
  sub_10001457C(v0 + 16, &qword_1007FFA68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Journal24TranscriptionCoordinator___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1001407B8()
{
  sub_1001406FC();

  return swift_deallocClassInstance();
}

uint64_t sub_100140810()
{
  return type metadata accessor for TranscriptionCoordinator(0);
}

uint64_t type metadata accessor for TranscriptionCoordinator(uint64_t a1)
{
  return sub_10003352C(a1, (uint64_t *)&unk_1007FF6F8);
}

uint64_t sub_100140838()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10014091C()
{
  return sub_1001409B8((unint64_t *)&qword_100811270, (void (*)(uint64_t))&type metadata accessor for UUID);
}

unint64_t sub_100140964()
{
  unint64_t result = qword_1007FF9B8;
  if (!qword_1007FF9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF9B8);
  }
  return result;
}

uint64_t sub_1001409B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100140A08()
{
  return sub_1001411E8();
}

void sub_100140A28()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(unsigned char *)(v0 + 24);
}

unint64_t sub_100140A38()
{
  unint64_t result = qword_1007FF9F8;
  if (!qword_1007FF9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FF9F8);
  }
  return result;
}

uint64_t sub_100140A94()
{
  return sub_100141260();
}

uint64_t sub_100140AB4()
{
  return sub_100141224();
}

uint64_t sub_100140AD4()
{
  return sub_10013BAEC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100140AF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100140B58@<X0>(uint64_t a1@<X8>)
{
  return sub_10013FAD4(a1);
}

uint64_t sub_100140B74(uint64_t a1, uint64_t a2)
{
  return sub_10013FD08(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100140B7C(char *a1, void (*a2)(unsigned char *, char *), uint64_t a3)
{
  double v22 = a2;
  uint64_t v23 = a3;
  uint64_t v25 = a1;
  uint64_t v3 = sub_100010218(&qword_1007FFA08);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218(&qword_1007FFA10);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218(&qword_1007FF9D8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010218(&qword_1007FFA18);
  uint64_t v21 = *(void *)(v13 - 8);
  __n128 v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v10 + 16))(v12, v25, v9, v14);
  sub_100014488(&qword_1007FFA20, &qword_1007FF9D8);
  dispatch thunk of Sequence.makeIterator()();
  sub_100014488(&qword_1007FFA28, &qword_1007FFA18);
  uint64_t v25 = v16;
  uint64_t v17 = v3;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  while (v18(v8, 1, v17) != 1)
  {
    sub_10002C4EC((uint64_t)v8, (uint64_t)v5, &qword_1007FFA08);
    sub_10002C4EC((uint64_t)v5, (uint64_t)v24, &qword_1007FFA30);
    v22(v24, &v5[*(int *)(v17 + 48)]);
    sub_10001457C((uint64_t)v5, &qword_1007FFA08);
    dispatch thunk of IteratorProtocol.next()();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v13);
}

uint64_t sub_100140F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptViewModelSegment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100140F64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptViewModelSegment(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100140FC0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100141000()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100141048()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100052588;
  *(unsigned char *)(v4 + 104) = v3;
  *(void *)(v4 + 64) = v2;
  *(_OWORD *)(v4 + 48) = v5;
  return _swift_task_switch(sub_10013D1AC, 0, 0);
}

uint64_t sub_10014110C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D676573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001411E8()
{
  *(void *)(*(void *)(v0 + 16) + 96) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100141224()
{
  *(void *)(*(void *)(v0 + 16) + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100141260()
{
  *(void *)(*(void *)(v0 + 16) + 88) = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_10014129C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v2 = *(void **)(v0 + 24);
  char v3 = *(void **)(v1 + 104);
  *(void *)(v1 + 104) = v2;
  id v4 = v2;
}

uint64_t sub_1001412D4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100141314()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10002C194;
  *(_OWORD *)(v2 + 144) = v3;
  return _swift_task_switch(sub_10013C82C, 0, 0);
}

uint64_t sub_1001413C8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 56) = v0[3];
  *(void *)(v1 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100141410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100141474()
{
  return sub_10013B8E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100141490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010218(&qword_1007FFA68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for TranscriptMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001415C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptMetadata.CodingKeys()
{
  return &type metadata for TranscriptMetadata.CodingKeys;
}

unint64_t sub_100141600()
{
  unint64_t result = qword_1007FFA70;
  if (!qword_1007FFA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FFA70);
  }
  return result;
}

unint64_t sub_100141658()
{
  unint64_t result = qword_1007FFA78;
  if (!qword_1007FFA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1007FFA78);
  }
  return result;
}

unint64_t sub_1001416B0()
{
  unint64_t result = qword_1007FFA80;
  if (!qword_1007FFA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1007FFA80);
  }
  return result;
}

void sub_100141704()
{
}

uint64_t sub_10014171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = sub_10002C194;
  return sub_1000E99A4(a5);
}

char *sub_1001417B8(unint64_t a1, SEL *a2)
{
  unint64_t v34 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v33 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v27 = (char *)v25 - v11;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    v25[1] = v3;
    unint64_t v31 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    unint64_t v32 = a1 & 0xC000000000000001;
    uint64_t v29 = (void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
    uint64_t v14 = 4;
    unint64_t v26 = a1;
    while (1)
    {
      id v15 = v32 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v14);
      uint64_t v16 = v15;
      uint64_t v3 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      id v17 = [v15 *v34];
      if (v17)
      {
        uint64_t v18 = v17;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = 1;
      }
      (*v31)(v7, v19, 1, v8);

      if ((*v30)(v7, 1, v8) == 1)
      {
        sub_10001457C((uint64_t)v7, (uint64_t *)&unk_1007FC470);
      }
      else
      {
        uint64_t v20 = *v29;
        uint64_t v21 = v27;
        (*v29)(v27, v7, v8);
        v20(v33, v21, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (char *)sub_1002A5C50(0, *((void *)v13 + 2) + 1, 1, (unint64_t)v13);
        }
        unint64_t v23 = *((void *)v13 + 2);
        unint64_t v22 = *((void *)v13 + 3);
        if (v23 >= v22 >> 1) {
          uint64_t v13 = (char *)sub_1002A5C50(v22 > 1, v23 + 1, 1, (unint64_t)v13);
        }
        *((void *)v13 + 2) = v23 + 1;
        v20(&v13[((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v23], v33, v8);
        a1 = v26;
      }
      ++v14;
      if (v3 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

void *sub_100141B38(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100095E20(0, v1, 0);
    uint64_t v3 = (uint64_t *)(a1 + 48);
    do
    {
      unsigned int v4 = (void *)*(v3 - 2);
      uint64_t v5 = (void *)*(v3 - 1);
      uint64_t v6 = *v3;
      sub_10001DFB8(v4);
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      id v9 = v5;
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        sub_100095E20(v7 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[5 * v8];
      v10[4] = v4;
      v10[5] = 0;
      *((unsigned char *)v10 + 48) = 1;
      v10[7] = v6;
      v10[8] = v9;
      v3 += 3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100141C3C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InsightsDataManager.TopAssetCategory(0);
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  uint64_t v31 = v1;
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_100095E40(0, v6, 0);
  unint64_t v7 = v39;
  uint64_t result = sub_100650E60(a1);
  uint64_t v10 = result;
  uint64_t v11 = 0;
  int v13 = v12 & 1;
  uint64_t v14 = a1 + 64;
  uint64_t v33 = v9;
  int64_t v34 = v6;
  uint64_t v30 = a1 + 96;
  uint64_t v35 = a1 + 64;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v17 = (unint64_t)v10 >> 6;
    if ((*(void *)(v14 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(a1 + 36) != v9) {
      goto LABEL_29;
    }
    uint64_t v38 = v9;
    int v32 = v13;
    char v18 = *(unsigned char *)(*(void *)(a1 + 48) + v10);
    uint64_t v19 = a1;
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    UUID.init()();
    uint64_t v21 = v37;
    v5[*(int *)(v37 + 20)] = v18;
    *(void *)&v5[*(int *)(v21 + 24)] = v20;
    uint64_t v39 = v7;
    unint64_t v23 = v7[2];
    unint64_t v22 = v7[3];
    if (v23 >= v22 >> 1)
    {
      sub_100095E40(v22 > 1, v23 + 1, 1);
      unint64_t v7 = v39;
    }
    v7[2] = v23 + 1;
    uint64_t result = sub_10015DC8C((uint64_t)v5, (uint64_t)v7+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v23, type metadata accessor for InsightsDataManager.TopAssetCategory);
    int64_t v15 = 1 << *(unsigned char *)(v19 + 32);
    if (v10 >= v15) {
      goto LABEL_30;
    }
    uint64_t v14 = v35;
    uint64_t v24 = *(void *)(v35 + 8 * v17);
    if ((v24 & (1 << v10)) == 0) {
      goto LABEL_31;
    }
    a1 = v19;
    if (*(_DWORD *)(v19 + 36) != v38) {
      goto LABEL_32;
    }
    unint64_t v25 = v24 & (-2 << (v10 & 0x3F));
    if (v25)
    {
      int64_t v15 = __clz(__rbit64(v25)) | v10 & 0xFFFFFFFFFFFFFFC0;
      int64_t v16 = v34;
    }
    else
    {
      unint64_t v26 = v17 + 1;
      unint64_t v27 = (unint64_t)(v15 + 63) >> 6;
      int64_t v16 = v34;
      if (v17 + 1 < v27)
      {
        unint64_t v28 = *(void *)(v35 + 8 * v26);
        if (!v28)
        {
          unint64_t v26 = v17 + 2;
          if (v17 + 2 >= v27) {
            goto LABEL_4;
          }
          unint64_t v28 = *(void *)(v35 + 8 * v26);
          if (!v28)
          {
            unint64_t v26 = v17 + 3;
            if (v17 + 3 >= v27) {
              goto LABEL_4;
            }
            unint64_t v28 = *(void *)(v35 + 8 * v26);
            if (!v28)
            {
              while (v27 - 4 != v17)
              {
                unint64_t v28 = *(void *)(v30 + 8 * v17++);
                if (v28)
                {
                  uint64_t result = sub_1000733B8(v10, v38, v32 & 1);
                  uint64_t v14 = v35;
                  unint64_t v26 = v17 + 3;
                  goto LABEL_17;
                }
              }
              uint64_t result = sub_1000733B8(v10, v38, v32 & 1);
              uint64_t v14 = v35;
              goto LABEL_4;
            }
          }
        }
LABEL_17:
        int64_t v15 = __clz(__rbit64(v28)) + (v26 << 6);
      }
    }
LABEL_4:
    int v13 = 0;
    ++v11;
    uint64_t v9 = v33;
    uint64_t v10 = v15;
    if (v11 == v16) {
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100141F84(uint64_t a1)
{
  uint64_t v65 = sub_100010218(&qword_1007FC8B8);
  __chkstk_darwin(v65);
  uint64_t v64 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v63 = (uint64_t)&v56 - v5;
  __chkstk_darwin(v6);
  uint64_t v72 = (uint64_t)&v56 - v7;
  __chkstk_darwin(v8);
  uint64_t v62 = (uint64_t)&v56 - v9;
  __chkstk_darwin(v10);
  uint64_t v61 = (char *)&v56 - v11;
  uint64_t v12 = sub_100010218(&qword_1007FC1E8);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *(int *)(sub_100010218((uint64_t *)&unk_1007FF080) + 32);
  uint64_t v15 = *(void *)(a1 + v58);
  uint64_t v16 = sub_100650E60(v15);
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v21 = 1 << *(unsigned char *)(v15 + 32);
  unsigned int v22 = *(_DWORD *)(v15 + 36);
  uint64_t v71 = a1;
  uint64_t v23 = sub_100650F04(v16, v17, v19 & 1, v21, v22, 0);
  sub_1000733B8(v16, v18, v20);
  uint64_t v24 = _swiftEmptyArrayStorage;
  if (!v23) {
    return (uint64_t)v24;
  }
  uint64_t v73 = _swiftEmptyArrayStorage;
  sub_100095E7C(0, v23 & ~(v23 >> 63), 0);
  uint64_t result = sub_100650E60(v15);
  if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v56 = v1;
    if ((result & 0x8000000000000000) == 0 && result < 1 << *(unsigned char *)(v15 + 32))
    {
      id v57 = v14;
      while ((*(void *)(v15 + 8 * ((unint64_t)result >> 6) + 64) & (1 << result)) != 0)
      {
        if (v26 != *(_DWORD *)(v15 + 36)) {
          goto LABEL_22;
        }
        uint64_t v68 = 1 << result;
        unint64_t v69 = (unint64_t)result >> 6;
        uint64_t v66 = v23;
        uint64_t v67 = v26;
        uint64_t v27 = v65;
        uint64_t v28 = *(void *)(v15 + 56);
        uint64_t v29 = *(void *)(*(void *)(v15 + 48) + 8 * result);
        uint64_t v30 = (uint64_t)v61;
        uint64_t v31 = &v61[*(int *)(v65 + 48)];
        uint64_t v70 = result;
        int v32 = (uint64_t *)(v28 + 32 * result);
        uint64_t v34 = *v32;
        uint64_t v33 = v32[1];
        uint64_t v35 = v32[2];
        uint64_t v36 = v32[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10066AC8C(v29, v30);
        *(void *)uint64_t v31 = v34;
        *((void *)v31 + 1) = v33;
        *((void *)v31 + 2) = v35;
        *((void *)v31 + 3) = v36;
        uint64_t v37 = v62;
        sub_10001B220(v30, v62, &qword_1007FC8E0);
        uint64_t v38 = (void *)(v37 + *(int *)(v27 + 48));
        void *v38 = v34;
        v38[1] = v33;
        v38[2] = v35;
        v38[3] = v36;
        sub_10002C4EC(v37, v72, &qword_1007FC8B8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v39 = v30;
        uint64_t v40 = (uint64_t)v57;
        sub_10001457C(v39, &qword_1007FC8B8);
        uint64_t v41 = *(int *)(v60 + 48);
        uint64_t v42 = *(int *)(v27 + 48);
        uint64_t v43 = v63;
        uint64_t v44 = (_OWORD *)(v63 + v42);
        uint64_t v45 = v72 + v42;
        sub_10001B220(v72, v63, &qword_1007FC8E0);
        long long v46 = *(_OWORD *)(v45 + 16);
        *uint64_t v44 = *(_OWORD *)v45;
        v44[1] = v46;
        sub_100010218(&qword_1007FC8E0);
        Date.timeIntervalSince(_:)();
        static Date.+ infix(_:_:)();
        sub_10001457C(v43, &qword_1007FC8E0);
        uint64_t v47 = *(int *)(v27 + 48);
        uint64_t v48 = v72;
        uint64_t v49 = v64;
        uint64_t v50 = v64 + v47;
        uint64_t result = sub_10001B220(v72, v64, &qword_1007FC8E0);
        uint64_t v51 = *(void *)(v45 + 8);
        *(void *)uint64_t v50 = *(void *)v45;
        *(void *)(v50 + 8) = v51;
        *(_OWORD *)(v50 + 16) = *(_OWORD *)(v45 + 16);
        if (v51 < 0) {
          goto LABEL_23;
        }
        long long v52 = (void *)(v40 + v41);
        *long long v52 = 0;
        v52[1] = v51;
        sub_10001457C(v49, &qword_1007FC8E0);
        sub_10001457C(v48, &qword_1007FC8B8);
        uint64_t v24 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100095E7C(0, v24[2] + 1, 1);
          uint64_t v24 = v73;
        }
        uint64_t v53 = v70;
        unint64_t v55 = v24[2];
        unint64_t v54 = v24[3];
        if (v55 >= v54 >> 1)
        {
          sub_100095E7C(v54 > 1, v55 + 1, 1);
          uint64_t v24 = v73;
        }
        void v24[2] = v55 + 1;
        uint64_t result = sub_10002C4EC(v40, (uint64_t)v24+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v55, &qword_1007FC1E8);
        uint64_t v15 = *(void *)(v71 + v58);
        if (v53 >= -(-1 << *(unsigned char *)(v15 + 32))) {
          goto LABEL_24;
        }
        if ((*(void *)(v15 + 64 + 8 * v69) & v68) == 0) {
          goto LABEL_25;
        }
        if (v67 != *(_DWORD *)(v15 + 36)) {
          goto LABEL_26;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v23 = v66 - 1;
        if (v66 == 1) {
          return (uint64_t)v24;
        }
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v26 = *(unsigned int *)(v15 + 36);
          if (result < 1 << *(unsigned char *)(v15 + 32)) {
            continue;
          }
        }
        goto LABEL_27;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001424C8(uint64_t a1)
{
  uint64_t v47 = sub_100010218(&qword_1007FC8B8);
  __chkstk_darwin(v47);
  uint64_t v48 = (uint64_t)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v46 = (uint64_t)v42 - v5;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)v42 - v7;
  uint64_t v44 = *(int *)(sub_100010218((uint64_t *)&unk_1007FF080) + 32);
  uint64_t v8 = *(void *)(a1 + v44);
  uint64_t v9 = sub_100650E60(v8);
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  unsigned int v15 = *(_DWORD *)(v8 + 36);
  uint64_t v53 = a1;
  uint64_t v16 = sub_100650F04(v9, v10, v12 & 1, v14, v15, 0);
  sub_1000733B8(v9, v11, v13);
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (!v16) {
    return (uint64_t)v17;
  }
  id v57 = _swiftEmptyArrayStorage;
  sub_100095B64(0, v16 & ~(v16 >> 63), 0);
  uint64_t result = sub_100650E60(v8);
  if ((v16 & 0x8000000000000000) == 0)
  {
    unint64_t v20 = result;
    v42[1] = v1;
    if ((result & 0x8000000000000000) == 0 && result < 1 << *(unsigned char *)(v8 + 32))
    {
      uint64_t v43 = v48 + 8;
      while ((*(void *)(v8 + 8 * (v20 >> 6) + 64) & (1 << v20)) != 0)
      {
        if (v19 != *(_DWORD *)(v8 + 36)) {
          goto LABEL_22;
        }
        uint64_t v51 = 1 << v20;
        unint64_t v52 = v20 >> 6;
        uint64_t v49 = v16;
        uint64_t v50 = v19;
        uint64_t v21 = v47;
        uint64_t v22 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
        uint64_t v23 = (uint64_t)v45;
        uint64_t v24 = &v45[*(int *)(v47 + 48)];
        unint64_t v25 = (uint64_t *)(*(void *)(v8 + 56) + 32 * v20);
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        uint64_t v28 = v25[2];
        uint64_t v29 = v25[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10066AC8C(v22, v23);
        *(void *)uint64_t v24 = v26;
        *((void *)v24 + 1) = v27;
        *((void *)v24 + 2) = v28;
        *((void *)v24 + 3) = v29;
        uint64_t v30 = v46;
        sub_10001B220(v23, v46, &qword_1007FC8E0);
        uint64_t v31 = (void *)(v30 + *(int *)(v21 + 48));
        *uint64_t v31 = v26;
        v31[1] = v27;
        v31[2] = v28;
        _OWORD v31[3] = v29;
        uint64_t v32 = v48;
        sub_10002C4EC(v30, v48, &qword_1007FC8B8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10001457C(v23, &qword_1007FC8B8);
        uint64_t v33 = *(void *)(v43 + *(int *)(v21 + 48));
        type metadata accessor for Date();
        sub_10015D970((unint64_t *)&qword_1007FC490, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v56 = v34;
        v35._uint64_t countAndFlagsBits = 8250;
        v35._object = (void *)0xE200000000000000;
        String.append(_:)(v35);
        uint64_t v54 = v33;
        v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        uint64_t v37 = v55;
        uint64_t v38 = v56;
        sub_10001457C(v32, &qword_1007FC8B8);
        uint64_t v17 = v57;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100095B64(0, v17[2] + 1, 1);
          uint64_t v17 = v57;
        }
        unint64_t v40 = v17[2];
        unint64_t v39 = v17[3];
        if (v40 >= v39 >> 1)
        {
          uint64_t result = sub_100095B64(v39 > 1, v40 + 1, 1);
          uint64_t v17 = v57;
        }
        void v17[2] = v40 + 1;
        uint64_t v41 = &v17[2 * v40];
        v41[4] = v37;
        v41[5] = v38;
        uint64_t v8 = *(void *)(v53 + v44);
        if ((uint64_t)v20 >= -(-1 << *(unsigned char *)(v8 + 32))) {
          goto LABEL_23;
        }
        if ((*(void *)(v8 + 64 + 8 * v52) & v51) == 0) {
          goto LABEL_24;
        }
        if (v50 != *(_DWORD *)(v8 + 36)) {
          goto LABEL_25;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v16 = v49 - 1;
        if (v49 == 1) {
          return (uint64_t)v17;
        }
        unint64_t v20 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v19 = *(unsigned int *)(v8 + 36);
          if (result < 1 << *(unsigned char *)(v8 + 32)) {
            continue;
          }
        }
        goto LABEL_21;
      }
      __break(1u);
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100142910(uint64_t a1)
{
  uint64_t v47 = sub_100010218(&qword_1007FC8B8);
  __chkstk_darwin(v47);
  uint64_t v46 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)&v42 - v5;
  __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v42 - v7;
  uint64_t v43 = *(int *)(sub_100010218((uint64_t *)&unk_1007FF080) + 32);
  uint64_t v8 = *(void *)(a1 + v43);
  uint64_t v9 = sub_100650E60(v8);
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  unsigned int v15 = *(_DWORD *)(v8 + 36);
  uint64_t v52 = a1;
  uint64_t v16 = sub_100650F04(v9, v10, v12 & 1, v14, v15, 0);
  sub_1000733B8(v9, v11, v13);
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (!v16) {
    return (uint64_t)v17;
  }
  uint64_t v56 = _swiftEmptyArrayStorage;
  sub_100095B64(0, v16 & ~(v16 >> 63), 0);
  uint64_t result = sub_100650E60(v8);
  if ((v16 & 0x8000000000000000) == 0)
  {
    unint64_t v20 = result;
    uint64_t v42 = v1;
    if ((result & 0x8000000000000000) == 0 && result < 1 << *(unsigned char *)(v8 + 32))
    {
      uint64_t v21 = v47;
      while ((*(void *)(v8 + 8 * (v20 >> 6) + 64) & (1 << v20)) != 0)
      {
        if (v19 != *(_DWORD *)(v8 + 36)) {
          goto LABEL_22;
        }
        uint64_t v50 = 1 << v20;
        unint64_t v51 = v20 >> 6;
        uint64_t v48 = v16;
        uint64_t v49 = v19;
        uint64_t v22 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
        uint64_t v23 = (uint64_t)v44;
        uint64_t v24 = &v44[*(int *)(v21 + 48)];
        unint64_t v25 = (uint64_t *)(*(void *)(v8 + 56) + 32 * v20);
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        uint64_t v28 = v25[2];
        uint64_t v29 = v25[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10066AC8C(v22, v23);
        *(void *)uint64_t v24 = v26;
        *((void *)v24 + 1) = v27;
        *((void *)v24 + 2) = v28;
        *((void *)v24 + 3) = v29;
        uint64_t v30 = v45;
        sub_10001B220(v23, v45, &qword_1007FC8E0);
        uint64_t v31 = (void *)(v30 + *(int *)(v21 + 48));
        *uint64_t v31 = v26;
        v31[1] = v27;
        v31[2] = v28;
        _OWORD v31[3] = v29;
        uint64_t v32 = v46;
        sub_10002C4EC(v30, v46, &qword_1007FC8B8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10001457C(v23, &qword_1007FC8B8);
        uint64_t v33 = *(void *)(v32 + *(int *)(v21 + 48));
        type metadata accessor for Date();
        sub_10015D970((unint64_t *)&qword_1007FC490, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v55 = v34;
        v35._uint64_t countAndFlagsBits = 8250;
        v35._object = (void *)0xE200000000000000;
        String.append(_:)(v35);
        uint64_t v53 = v33;
        v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        uint64_t v37 = v54;
        uint64_t v38 = v55;
        sub_10001457C(v32, &qword_1007FC8B8);
        uint64_t v17 = v56;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100095B64(0, v17[2] + 1, 1);
          uint64_t v17 = v56;
        }
        unint64_t v40 = v17[2];
        unint64_t v39 = v17[3];
        if (v40 >= v39 >> 1)
        {
          uint64_t result = sub_100095B64(v39 > 1, v40 + 1, 1);
          uint64_t v17 = v56;
        }
        void v17[2] = v40 + 1;
        uint64_t v41 = &v17[2 * v40];
        v41[4] = v37;
        v41[5] = v38;
        uint64_t v8 = *(void *)(v52 + v43);
        if ((uint64_t)v20 >= -(-1 << *(unsigned char *)(v8 + 32))) {
          goto LABEL_23;
        }
        if ((*(void *)(v8 + 64 + 8 * v51) & v50) == 0) {
          goto LABEL_24;
        }
        if (v49 != *(_DWORD *)(v8 + 36)) {
          goto LABEL_25;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v16 = v48 - 1;
        if (v48 == 1) {
          return (uint64_t)v17;
        }
        unint64_t v20 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v19 = *(unsigned int *)(v8 + 36);
          if (result < 1 << *(unsigned char *)(v8 + 32)) {
            continue;
          }
        }
        goto LABEL_21;
      }
      __break(1u);
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100142D48()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100035380(v0, qword_1007FFA90);
  sub_100026A54(v0, (uint64_t)qword_1007FFA90);
  id v1 = [self mainBundle];
  id v2 = [v1 bundleIdentifier];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100142E44()
{
  id v1 = v0;
  uint64_t v30 = *(char **)v0;
  uint64_t v2 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010218(&qword_1007FFAB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100010218(&qword_1007FFAC0);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  uint64_t v10 = *(void *)(v33 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - v13;
  swift_getKeyPath();
  unsigned int v15 = &v0[OBJC_IVAR____TtC7Journal19InsightsDataManager___observationRegistrar];
  Swift::String v35 = v1;
  uint64_t v31 = sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  uint64_t v32 = v15;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (!*(void *)&v1[OBJC_IVAR____TtC7Journal19InsightsDataManager__updateTask])
  {
    *uint64_t v8 = 1;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for AsyncStream.Continuation.BufferingPolicy.bufferingNewest<A>(_:), v5);
    id v17 = sub_100469534();
    __chkstk_darwin(v17);
    uint64_t v18 = v30;
    *(&v29 - 2) = v19;
    *(&v29 - 1) = v18;
    unint64_t v20 = v14;
    uint64_t v29 = v14;
    AsyncStream.init(_:bufferingPolicy:_:)();

    TaskPriority.init(rawValue:)();
    uint64_t v21 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v4, 0, 1, v21);
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    uint64_t v23 = v33;
    uint64_t v24 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v11, v20, v34);
    unint64_t v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 0;
    *(void *)(v26 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v26 + v25, v11, v24);
    *(void *)(v26 + ((v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v22;
    uint64_t v27 = sub_100146A8C((uint64_t)v4, (uint64_t)&unk_1007FFAD0, v26);
    sub_10001457C((uint64_t)v4, &qword_1007FA1D0);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    *(&v29 - 2) = v1;
    *(&v29 - 1) = (char *)v27;
    Swift::String v35 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v29, v24);
  }
  return result;
}

uint64_t sub_1001432F0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  uint64_t v5 = sub_100010218(&qword_1007FFC18);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v14 = (v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v13, v8, v5);
  *(void *)(v15 + v14) = a2;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  id v16 = a2;
  sub_1002B8F78((uint64_t)v11, (uint64_t)&unk_1007FFC28, v15);
  sub_10001457C((uint64_t)v11, &qword_1007FA1D0);
  return AsyncStream.Continuation.onTermination.setter();
}

uint64_t sub_100143520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v7 = sub_100010218(&qword_1007FFC30);
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001435E8, 0, 0);
}

uint64_t sub_1001435E8()
{
  if (qword_1007F6A28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FFA90);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Requesting automatic update at launch", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[3].i64[0];
  uint64_t v5 = v0[3].i64[1];
  uint64_t v8 = v0[2].i64[0];
  uint64_t v7 = v0[2].i64[1];
  int8x16_t v12 = v0[1];

  AsyncStream.Continuation.yield<A>()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v9 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[0] = (uint64_t)v9;
  v9[1] = vextq_s8(v12, v12, 8uLL);
  v9[2].i64[0] = v8;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[4].i64[1] = (uint64_t)v10;
  void *v10 = v0;
  v10[1] = sub_1001437C4;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_1001437C4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001438DC, 0, 0);
}

uint64_t sub_1001438DC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10014393C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v5[2] = a2;
  v5[3] = a3;
  uint64_t v6 = sub_100010218(&qword_1007FFC18);
  v5[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[7] = v7;
  v5[8] = *(void *)(v7 + 64);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_100143A0C, 0, 0);
}

uint64_t sub_100143A0C()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v15 = v0[5];
  uint64_t v5 = (void *)v0[3];
  uint64_t v16 = v0[4];
  uint64_t v18 = *(void (**)(uint64_t))(v4 + 16);
  v18(v1);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 40) & ~v6;
  uint64_t v8 = (char *)swift_allocObject();
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = v5;
  id v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  v17(&v8[v7], v1, v3);
  *(void *)&v8[(v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8] = v15;
  id v9 = v5;
  sub_100144394((uint64_t)&unk_1007FFC50, (uint64_t)v8);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v1, v16, v3);
  uint64_t v10 = (v6 + 32) & ~v6;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  v17((char *)(v11 + v10), v1, v3);
  sub_100144394((uint64_t)&unk_1007FFC60, v11);
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v1, v16, v3);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  v17((char *)(v12 + v10), v1, v3);
  sub_100144394((uint64_t)&unk_1007FFC70, v12);
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100143C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  uint64_t v5 = sub_100010218(&qword_1007FFC30);
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Notification();
  unsigned char v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  sub_100010218(&qword_100806050);
  v4[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[12] = v7;
  v4[13] = *(void *)(v7 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100143DF0, 0, 0);
}

uint64_t sub_100143DF0()
{
  id v1 = [self defaultCenter];
  sub_10001B284(0, (unint64_t *)&unk_100806100);
  uint64_t v2 = (void *)static NSManagedObjectContext.didMergeChangesObjectIDsNotification.getter();
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  uint64_t v3 = sub_10015D970(&qword_1007FBB50, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  void *v4 = v0;
  v4[1] = sub_100143F48;
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  return dispatch thunk of AsyncIteratorProtocol.next()(v5, v6, v3);
}

uint64_t sub_100143F48()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100144310;
  }
  else {
    uint64_t v2 = sub_10014405C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10014405C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[10];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    if (sub_10015AC68(v6))
    {
      if (qword_1007F6A28 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100026A54(v7, (uint64_t)qword_1007FFA90);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting automatic update from DB changes", v10, 2u);
        swift_slowDealloc();
      }
      uint64_t v12 = v0[6];
      uint64_t v11 = v0[7];
      uint64_t v13 = v0[5];

      AsyncStream.Continuation.yield<A>()();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    uint64_t v14 = sub_10015D970(&qword_1007FBB50, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[15] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100143F48;
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[12];
    return dispatch thunk of AsyncIteratorProtocol.next()(v16, v17, v14);
  }
}

uint64_t sub_100144310()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 128);
  sub_100010218((uint64_t *)&unk_1007FC0D0);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_100144394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  sub_10002C4EC((uint64_t)v11, (uint64_t)v8, &qword_1007FA1D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
  {
    sub_10001457C((uint64_t)v8, &qword_1007FA1D0);
    if (*(void *)(a2 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v12);
    if (*(void *)(a2 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
  uint64_t v16 = 0;
LABEL_6:
  uint64_t v17 = *v3;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  uint64_t v19 = (void *)(v16 | v14);
  if (v16 | v14)
  {
    v22[0] = 0;
    v22[1] = 0;
    uint64_t v19 = v22;
    v22[2] = v14;
    v22[3] = v16;
  }
  v21[1] = 1;
  v21[2] = v19;
  v21[3] = v17;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1001445DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a3;
  uint64_t v4 = sub_100010218(&qword_1007FFC30);
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  sub_100010218(&qword_100806050);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_10014472C, 0, 0);
}

uint64_t sub_10014472C()
{
  id v1 = [self defaultCenter];
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  uint64_t v2 = sub_10015D970(&qword_1007FBB50, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10014485C;
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_10014485C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100144C00;
  }
  else {
    uint64_t v2 = sub_100144970;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100144970()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for Notification();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    if (qword_1007F6A28 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100026A54(v5, (uint64_t)qword_1007FFA90);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Requesting automatic update from time change", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[6];
    uint64_t v9 = v0[7];
    uint64_t v11 = v0[4];
    uint64_t v12 = v0[5];

    AsyncStream.Continuation.yield<A>()();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    sub_10001457C(v9, &qword_100806050);
    uint64_t v13 = sub_10015D970(&qword_1007FBB50, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[11] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10014485C;
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[8];
    return dispatch thunk of AsyncIteratorProtocol.next()(v15, v16, v13);
  }
}

uint64_t sub_100144C00()
{
  *(void *)(v0 + 16) = *(void *)(v0 + 96);
  sub_100010218((uint64_t *)&unk_1007FC0D0);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_100144C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a3;
  uint64_t v4 = sub_100010218(&qword_1007FFC30);
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  sub_100010218(&qword_100806050);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100144DD4, 0, 0);
}

uint64_t sub_100144DD4()
{
  id v1 = [self defaultCenter];
  NSNotificationCenter.notifications(named:object:)();

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  uint64_t v2 = sub_10015D970(&qword_1007FBB50, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100144F04;
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  return dispatch thunk of AsyncIteratorProtocol.next()(v4, v5, v2);
}

uint64_t sub_100144F04()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10015F110;
  }
  else {
    uint64_t v2 = sub_100145018;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100145018()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for Notification();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    if (qword_1007F6A28 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100026A54(v5, (uint64_t)qword_1007FFA90);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Requesting automatic update from unlock", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[6];
    uint64_t v9 = v0[7];
    uint64_t v11 = v0[4];
    uint64_t v12 = v0[5];

    AsyncStream.Continuation.yield<A>()();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    sub_10001457C(v9, &qword_100806050);
    uint64_t v13 = sub_10015D970(&qword_1007FBB50, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[11] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100144F04;
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[8];
    return dispatch thunk of AsyncIteratorProtocol.next()(v15, v16, v13);
  }
}

uint64_t sub_1001452A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = sub_100010218(&qword_1007FFAD8);
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001453C8, 0, 0);
}

uint64_t sub_1001453C8()
{
  sub_100010218(&qword_1007FFAC0);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001454BC;
  uint64_t v2 = *(void *)(v0 + 80);
  return AsyncStream.Iterator.next(isolation:)(v0 + 144, 0, 0, v2);
}

uint64_t sub_1001454BC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001455B8, 0, 0);
}

uint64_t sub_1001455B8()
{
  if ((*(unsigned char *)(v0 + 144) & 1) != 0 || (uint64_t Strong = swift_weakLoadStrong(), (*(void *)(v0 + 112) = Strong) == 0))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001456C4;
    return sub_100145B40();
  }
}

uint64_t sub_1001456C4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001457C0, 0, 0);
}

uint64_t sub_1001457C0()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100812A68 + dword_100812A68);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100145888;
  return v3(5000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_100145888()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);
  if (v0) {
    uint64_t v3 = sub_100145AA4;
  }
  else {
    uint64_t v3 = sub_1001459F0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001459F0()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001454BC;
  uint64_t v2 = *(void *)(v0 + 80);
  return AsyncStream.Iterator.next(isolation:)(v0 + 144, 0, 0, v2);
}

uint64_t sub_100145AA4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100145B40()
{
  v1[465] = v0;
  v1[471] = type metadata accessor for InsightsDataManager.Streaks(0);
  v1[472] = swift_task_alloc();
  v1[473] = swift_task_alloc();
  v1[474] = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  v1[475] = swift_task_alloc();
  v1[476] = swift_task_alloc();
  v1[477] = swift_task_alloc();
  sub_100010218((uint64_t *)&unk_1007FC470);
  v1[478] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Date();
  v1[479] = v2;
  v1[480] = *(void *)(v2 - 8);
  v1[481] = swift_task_alloc();
  v1[482] = swift_task_alloc();
  v1[483] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[484] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[485] = v4;
  v1[486] = v3;
  return _swift_task_switch(sub_100145D10, v4, v3);
}

uint64_t sub_100145D10()
{
  uint64_t v1 = v0[483];
  uint64_t v19 = v0[481];
  uint64_t v2 = v0[480];
  uint64_t v3 = v0[479];
  uint64_t v4 = v0[478];
  uint64_t v5 = v0[465];
  static Date.now.getter();
  swift_getKeyPath();
  v0[487] = OBJC_IVAR____TtC7Journal19InsightsDataManager___observationRegistrar;
  v0[459] = v5;
  v0[488] = sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = v5 + OBJC_IVAR____TtC7Journal19InsightsDataManager__referenceDate;
  swift_beginAccess();
  sub_10001B220(v6, v4, (uint64_t *)&unk_1007FC470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v19, v1, v3);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3);
  uint64_t v8 = v0[482];
  uint64_t v9 = v0[480];
  uint64_t v10 = v0[479];
  uint64_t v11 = v0[478];
  if (v7 == 1)
  {
    (*(void (**)(void, void, void))(v9 + 32))(v0[482], v0[481], v0[479]);
    sub_10001457C(v11, (uint64_t *)&unk_1007FC470);
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[481], v0[479]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v11, v10);
  }
  uint64_t v12 = v0[482];
  uint64_t v13 = v0[465];
  uint64_t v14 = swift_task_alloc();
  v0[489] = v14;
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v12;
  swift_asyncLet_begin();
  uint64_t v15 = swift_task_alloc();
  v0[490] = v15;
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v12;
  swift_asyncLet_begin();
  uint64_t v16 = swift_task_alloc();
  v0[491] = v16;
  *(void *)(v16 + 16) = v13;
  *(void *)(v16 + 24) = v12;
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  uint64_t v17 = v0[477];
  return _swift_asyncLet_get(v0 + 162, v17, sub_10014604C, v0 + 430);
}

uint64_t sub_10014604C()
{
  return _swift_task_switch(sub_100146068, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_100146068()
{
  uint64_t v1 = v0[482];
  uint64_t v2 = v0[476];
  uint64_t v3 = v0[465];
  sub_1001545E0(v0[477], v2, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[492] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 322, v0 + 411, sub_100146168, v0 + 448);
}

uint64_t sub_100146168()
{
  uint64_t v1 = *(void *)(v0 + 3808);
  uint64_t v2 = *(void *)(v0 + 3800);
  *(void *)(v0 + 3944) = *(void *)(v0 + 3288);
  *(_OWORD *)(v0 + 3952) = *(_OWORD *)(v0 + 3296);
  *(void *)(v0 + 3968) = *(void *)(v0 + 3312);
  sub_1001545E0(v1, v2, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
  swift_bridgeObjectRetain();
  uint64_t v3 = *(void *)(v0 + 3784);
  return _swift_asyncLet_get(v0 + 1936, v3, sub_10014621C, v0 + 3536);
}

uint64_t sub_10014621C()
{
  sub_1001545E0(*(void *)(v0 + 3784), *(void *)(v0 + 3776), type metadata accessor for InsightsDataManager.Streaks);
  return _swift_asyncLet_get(v0 + 16, v0 + 3256, sub_1001462B4, v0 + 3680);
}

uint64_t sub_1001462B4()
{
  v0[497] = v0[407];
  v0[498] = v0[408];
  v0[499] = v0[409];
  v0[500] = v0[410];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return _swift_asyncLet_get(v0 + 82, v0 + 453, sub_100146368, v0 + 466);
}

uint64_t sub_100146368()
{
  return _swift_task_switch(sub_100146384, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_100146384()
{
  uint64_t v14 = *(void *)(v0 + 3992);
  uint64_t v15 = *(void *)(v0 + 4000);
  uint64_t v12 = *(void *)(v0 + 3976);
  uint64_t v13 = *(void *)(v0 + 3984);
  uint64_t v1 = *(void *)(v0 + 3968);
  uint64_t v2 = *(void *)(v0 + 3960);
  long long v17 = *(_OWORD *)(v0 + 3944);
  uint64_t v10 = *(void *)(v0 + 3800);
  uint64_t v11 = *(void *)(v0 + 3776);
  uint64_t v3 = *(void *)(v0 + 3720);
  uint64_t v16 = *(void *)(v0 + 3624);
  swift_getKeyPath();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v17;
  *(void *)(v4 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  *(void *)(v4 + 48) = v1;
  *(void *)(v0 + 3576) = v3;
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_getKeyPath();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v10;
  *(void *)(v0 + 3528) = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1001546C4(v10, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
  swift_getKeyPath();
  uint64_t v6 = swift_task_alloc();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v11;
  *(void *)(v0 + 348sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_1001546C4(v11, type metadata accessor for InsightsDataManager.Streaks);
  swift_getKeyPath();
  int v7 = (void *)swift_task_alloc();
  v7[2] = v3;
  v7[3] = v12;
  v7[4] = v13;
  v7[5] = v14;
  v7[6] = v15;
  *(void *)(v0 + 3384) = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_getKeyPath();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v16;
  *(void *)(v0 + 3432) = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return _swift_asyncLet_finish(v0 + 16, v0 + 3256, sub_100146714, v0 + 3632);
}

uint64_t sub_100146714()
{
  return _swift_task_switch(sub_100146730, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_100146730()
{
  uint64_t v1 = *(void *)(v0 + 3808);
  swift_task_dealloc();
  sub_1001546C4(v1, type metadata accessor for InsightsDataManager.EntrySummaryGroup);
  return _swift_asyncLet_finish(v0 + 656, v0 + 3624, sub_1001467D0, v0 + 3392);
}

uint64_t sub_1001467D0()
{
  return _swift_task_switch(sub_1001467EC, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_1001467EC()
{
  return _swift_asyncLet_finish(v0 + 2576, v0 + 3288, sub_10014680C, v0 + 3488);
}

uint64_t sub_10014680C()
{
  return _swift_task_switch(sub_100146828, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_100146828()
{
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 3784);
  return _swift_asyncLet_finish(v0 + 1936, v1, sub_10014689C, v0 + 3344);
}

uint64_t sub_10014689C()
{
  return _swift_task_switch(sub_1001468B8, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_1001468B8()
{
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 3816);
  return _swift_asyncLet_finish(v0 + 1296, v1, sub_10014692C, v0 + 3216);
}

uint64_t sub_10014692C()
{
  return _swift_task_switch(sub_100146948, *(void *)(v0 + 3880), *(void *)(v0 + 3888));
}

uint64_t sub_100146948()
{
  uint64_t v1 = v0[483];
  uint64_t v2 = v0[482];
  uint64_t v3 = v0[480];
  uint64_t v4 = v0[479];
  uint64_t v5 = v0[465];
  swift_release();
  swift_task_dealloc();
  sub_100146EC4(v1, v5);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v1, v4);
  v6(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100146A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100010218(&qword_1007FA1D0);
  __chkstk_darwin(v5 - 8);
  int v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B220(a1, (uint64_t)v7, &qword_1007FA1D0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001457C((uint64_t)v7, &qword_1007FA1D0);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    void v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_100146C5C()
{
  uint64_t v0 = type metadata accessor for NSManagedObjectContext.NotificationKey();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v23 - v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - v7;
  sub_100010218(&qword_1007FC170);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1006D7C30;
  uint64_t v10 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v10(v8, enum case for NSManagedObjectContext.NotificationKey.insertedObjectIDs(_:), v0);
  uint64_t v11 = NSManagedObjectContext.NotificationKey.rawValue.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v8, v0);
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v13;
  v10(v5, enum case for NSManagedObjectContext.NotificationKey.updatedObjectIDs(_:), v0);
  uint64_t v15 = NSManagedObjectContext.NotificationKey.rawValue.getter();
  uint64_t v17 = v16;
  v14(v5, v0);
  *(void *)(v9 + 48) = v15;
  *(void *)(v9 + 56) = v17;
  uint64_t v18 = v24;
  v10(v24, enum case for NSManagedObjectContext.NotificationKey.deletedObjectIDs(_:), v0);
  uint64_t v19 = NSManagedObjectContext.NotificationKey.rawValue.getter();
  uint64_t v21 = v20;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v18, v0);
  *(void *)(v9 + 64) = v19;
  *(void *)(v9 + 72) = v21;
  off_1007FFAA8 = (_UNKNOWN *)v9;
  return result;
}

uint64_t sub_100146E70()
{
  uint64_t v0 = (void *)sub_100388AC4((uint64_t)&off_100793520);
  sub_100010218(&qword_100803920);
  uint64_t result = swift_arrayDestroy();
  off_1007FFAB0 = v0;
  return result;
}

uint64_t sub_100146EC4(uint64_t a1, uint64_t a2)
{
  uint64_t Update = type metadata accessor for InsightsDataManager.LastUpdate(0);
  uint64_t v4 = Update - 8;
  __chkstk_darwin(Update);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Date.now.getter();
  Date.timeIntervalSince(_:)();
  uint64_t v12 = v11;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v6, v10, v7);
  uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC7Journal19InsightsDataManager_options);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1001597B8((uint64_t)&off_100793560, v13);
  *(void *)&v6[*(int *)(v4 + 28)] = v12;
  *(void *)&v6[*(int *)(v4 + 32)] = v14;
  swift_getKeyPath();
  uint64_t v21 = a2;
  uint64_t v22 = v6;
  uint64_t v23 = a2;
  sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_1001546C4((uint64_t)v6, type metadata accessor for InsightsDataManager.LastUpdate);
  sub_100652608();
  if (qword_1007F6A28 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100026A54(v15, (uint64_t)qword_1007FFA90);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134217984;
    uint64_t v23 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Insights update took %g seconds", v18, 0xCu);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1001471F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v3[9] = type metadata accessor for UniformDateBins(0);
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Calendar();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001472E4, 0, 0);
}

uint64_t sub_1001472E4()
{
  *(void *)(v0 + 112) = type metadata accessor for MainActor();
  *(void *)(v0 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10014737C, v2, v1);
}

uint64_t sub_10014737C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  *(void *)(v0 + 128) = *(void *)(v1 + OBJC_IVAR____TtC7Journal19InsightsDataManager_options);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100147404, 0, 0);
}

uint64_t sub_100147404()
{
  char v1 = sub_10015A88C((uint64_t)&off_100793588, v0[16]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v3 = v0[9];
    uint64_t v2 = v0[10];
    uint64_t v4 = v0[6];
    uint64_t v5 = type metadata accessor for CalendarBinningUnit(0);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    v6(v2, 1, 1, v5);
    *(void *)(v2 + *(int *)(v3 + 20)) = 0;
    *(void *)(v2 + *(int *)(v3 + 24)) = 1;
    sub_1004689C8(v2, v4);
    uint64_t v7 = (int *)type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
    uint64_t v8 = v4 + v7[5];
    *(void *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 1;
    uint64_t v9 = v4 + v7[6];
    v6(v2, 1, 1, v5);
    *(void *)(v2 + *(int *)(v3 + 20)) = 0;
    *(void *)(v2 + *(int *)(v3 + 24)) = 1;
    sub_1004689C8(v2, v9);
    uint64_t v10 = v4 + v7[7];
    v6(v2, 1, 1, v5);
    *(void *)(v2 + *(int *)(v3 + 20)) = 0;
    *(void *)(v2 + *(int *)(v3 + 24)) = 1;
    sub_1004689C8(v2, v10);
    uint64_t v11 = v4 + v7[8];
    *(void *)uint64_t v11 = 0;
    *(unsigned char *)(v11 + 8) = 1;
    static Date.distantFuture.getter();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    v0[17] = static MainActor.shared.getter();
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100147650, v15, v14);
  }
}

uint64_t sub_100147650()
{
  swift_release();
  *(void *)(v0 + 144) = sub_100469534();
  return _swift_task_switch(sub_1001476C4, 0, 0);
}

uint64_t sub_1001476C4()
{
  *(void *)(v0 + 152) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100147750, v2, v1);
}

uint64_t sub_100147750()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[7];
  swift_release();
  swift_getKeyPath();
  v0[5] = v4;
  sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v4 + OBJC_IVAR____TtC7Journal19InsightsDataManager__calendar;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[20] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1001478CC;
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[13];
  uint64_t v9 = v0[8];
  uint64_t v10 = v0[6];
  return sub_100147A6C(v10, v7, v8, v9);
}

uint64_t sub_1001478CC()
{
  uint64_t v1 = *(void **)(*v0 + 144);
  uint64_t v2 = *(void *)(*v0 + 104);
  uint64_t v3 = *(void *)(*v0 + 96);
  uint64_t v4 = *(void *)(*v0 + 88);
  uint64_t v5 = *v0;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_100147A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = sub_100010218((uint64_t *)&unk_1007FF080);
  unsigned char v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Calendar();
  v4[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[13] = v7;
  v4[14] = *(void *)(v7 + 64);
  v4[15] = swift_task_alloc();
  v4[16] = sub_100010218(&qword_1007FFBD8);
  v4[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v4[18] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[19] = v9;
  v4[20] = *(void *)(v9 + 64);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = sub_100010218(&qword_1007FFBE0);
  v4[24] = swift_task_alloc();
  v4[25] = sub_100010218(&qword_1007FFBE8);
  v4[26] = swift_task_alloc();
  v4[27] = sub_100010218(&qword_1007FFBF0);
  v4[28] = swift_task_alloc();
  v4[29] = type metadata accessor for UniformDateBins(0);
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_100147D3C, 0, 0);
}

uint64_t sub_100147D3C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v27 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v29 = *(void *)(v0 + 120);
  uint64_t v25 = *(void *)(v0 + 144);
  uint64_t v26 = *(void *)(v0 + 104);
  uint64_t v28 = *(void *)(v0 + 96);
  uint64_t v34 = *(void *)(v0 + 88);
  uint64_t v32 = *(void *)(v0 + 80);
  uint64_t v33 = *(void *)(v0 + 72);
  uint64_t v23 = *(void *)(v0 + 48);
  uint64_t v24 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v31 = *(void **)(v0 + 32);
  uint64_t v4 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v2, 1, 1, v4);
  *(void *)(v2 + *(int *)(v1 + 20)) = 0;
  *(void *)(v2 + *(int *)(v1 + 24)) = 1;
  sub_1004689C8(v2, v3);
  uint64_t v6 = (int *)type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v7 = v3 + v6[5];
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v6[6];
  *(_DWORD *)(v0 + 288) = v8;
  uint64_t v9 = v3 + v8;
  v5(v2, 1, 1, v4);
  *(void *)(v2 + *(int *)(v1 + 20)) = 0;
  *(void *)(v2 + *(int *)(v1 + 24)) = 1;
  sub_1004689C8(v2, v9);
  uint64_t v10 = v6[7];
  *(_DWORD *)(v0 + 292) = v10;
  uint64_t v11 = v3 + v10;
  v5(v2, 1, 1, v4);
  *(void *)(v2 + *(int *)(v1 + 20)) = 0;
  *(void *)(v2 + *(int *)(v1 + 24)) = 1;
  sub_1004689C8(v2, v11);
  uint64_t v12 = v3 + v6[8];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  *(_DWORD *)(v0 + 296) = v6[9];
  static Date.distantFuture.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v27, v23, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v29, v24, v28);
  unint64_t v13 = (*(unsigned __int8 *)(v35 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v14 = (v30 + *(unsigned __int8 *)(v26 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v0 + 248) = v15;
  *(void *)(v15 + 16) = v31;
  uint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 32);
  *(void *)(v0 + 256) = v16;
  *(void *)(v0 + 264) = (v35 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v16(v15 + v13, v27, v25);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v15 + v14, v29, v28);
  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v34, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v33);
  id v17 = v31;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1001480BC;
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 88);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v19, v21, sub_10015DB10, v15, v20);
}

uint64_t sub_1001480BC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 28sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[10] + 8))(v2[11], v2[9]);
  swift_release();
  if (v0) {
    uint64_t v3 = sub_1001485BC;
  }
  else {
    uint64_t v3 = sub_100148240;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100148240()
{
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v24 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v27 = *(void *)(v0 + 184);
  uint64_t v30 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v31 = *(void *)(v0 + 144);
  uint64_t v6 = *(int **)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v29 = v7 + *(int *)(v0 + 296);
  uint64_t v28 = v7 + *(int *)(v0 + 292);
  uint64_t v25 = v7 + *(int *)(v0 + 288);
  uint64_t v8 = v5 + v6[12];
  uint64_t v9 = v5 + v6[16];
  uint64_t v10 = v5 + v6[20];
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v26 = *(void *)(v0 + 64);
  sub_10002C4EC(v5, v1, &qword_1007FFBF0);
  sub_10002C4EC(v8, v2, &qword_1007FFBE8);
  sub_10002C4EC(v9, v3, &qword_1007FFBE0);
  v22(v4, v10, v31);
  uint64_t v12 = v1 + *(int *)(v21 + 28);
  uint64_t v23 = v1;
  unint64_t v13 = sub_10015961C(*(void *)(v1 + *(int *)(v21 + 32)));
  sub_10001457C(v7, (uint64_t *)&unk_1007FF080);
  sub_1001545E0(v1, v7, type metadata accessor for UniformDateBins);
  sub_10001B220(v12, v7 + *(int *)(v11 + 28), &qword_1007FC8E0);
  *(void *)(v7 + *(int *)(v11 + 32)) = v13;
  uint64_t v14 = v2 + *(int *)(v24 + 28);
  uint64_t v15 = sub_100159344(*(void *)(v2 + *(int *)(v24 + 32)));
  sub_10001457C(v25, (uint64_t *)&unk_1007FF080);
  sub_1001545E0(v2, v25, type metadata accessor for UniformDateBins);
  sub_10001B220(v14, v25 + *(int *)(v11 + 28), &qword_1007FC8E0);
  *(void *)(v25 + *(int *)(v11 + 32)) = v15;
  uint64_t v16 = swift_task_alloc();
  *(void *)(v16 + 16) = v2;
  uint64_t v17 = v3 + *(int *)(v27 + 28);
  uint64_t v18 = sub_100159064((void (*)(_OWORD *__return_ptr, char *))sub_10015DBE4, v16, *(void *)(v3 + *(int *)(v27 + 32)));
  sub_1001545E0(v3, v26, type metadata accessor for UniformDateBins);
  sub_10001B220(v17, v26 + *(int *)(v11 + 28), &qword_1007FC8E0);
  *(void *)(v26 + *(int *)(v11 + 32)) = v18;
  swift_task_dealloc();
  sub_10001457C(v3, &qword_1007FFBE0);
  sub_10001457C(v23, &qword_1007FFBF0);
  sub_10001457C(v2, &qword_1007FFBE8);
  sub_100041190(v26, v28, (uint64_t *)&unk_1007FF080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 40))(v29, v4, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1001485BC()
{
  if (qword_1007F6A28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FFA90);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch entries by entry date: %@", v4, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100148830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100148854, 0, 0);
}

uint64_t sub_100148854()
{
  *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = type metadata accessor for MainActor();
  *(void *)(v0 + 48) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001488EC, v2, v1);
}

uint64_t sub_1001488EC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  *(void *)(v0 + 56) = *(void *)(v1 + OBJC_IVAR____TtC7Journal19InsightsDataManager_options);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100148974, 0, 0);
}

uint64_t sub_100148974()
{
  char v1 = sub_100542088(3, v0[7]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v0[8] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100148D3C, v3, v2);
  }
  else
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    v6(v4, 1, 1, v5);
    uint64_t v7 = (int *)type metadata accessor for StreakSummary();
    v6(v4 + v7[5], 1, 1, v5);
    v6(v4 + v7[6], 1, 1, v5);
    *(void *)(v4 + v7[7]) = 0;
    uint64_t v8 = (int *)type metadata accessor for InsightsDataManager.Streaks(0);
    uint64_t v9 = v4 + v8[5];
    v6(v9, 1, 1, v5);
    v6(v9 + v7[5], 1, 1, v5);
    v6(v9 + v7[6], 1, 1, v5);
    *(void *)(v9 + v7[7]) = 0;
    uint64_t v10 = v4 + v8[6];
    v6(v10, 1, 1, v5);
    v6(v10 + v7[5], 1, 1, v5);
    v6(v10 + v7[6], 1, 1, v5);
    *(void *)(v10 + v7[7]) = 0;
    uint64_t v11 = v4 + v8[7];
    v6(v11, 1, 1, v5);
    v6(v11 + v7[5], 1, 1, v5);
    v6(v11 + v7[6], 1, 1, v5);
    *(void *)(v11 + v7[7]) = 0;
    uint64_t v12 = v4 + v8[8];
    v6(v12, 1, 1, v5);
    v6(v12 + v7[5], 1, 1, v5);
    v6(v12 + v7[6], 1, 1, v5);
    *(void *)(v12 + v7[7]) = 0;
    uint64_t v13 = v4 + v8[9];
    v6(v13, 1, 1, v5);
    v6(v13 + v7[5], 1, 1, v5);
    v6(v13 + v7[6], 1, 1, v5);
    *(void *)(v13 + v7[7]) = 0;
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100148D3C()
{
  swift_release();
  id v1 = sub_100469534();
  v0[9] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100148DF0;
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  return sub_100148F00(v4, (uint64_t)v1, v3);
}

uint64_t sub_100148DF0()
{
  id v1 = *(void **)(*v0 + 72);
  uint64_t v4 = *v0;
  swift_task_dealloc();

  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_100148F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Calendar();
  v3[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[13] = v6;
  v3[14] = *(void *)(v6 + 64);
  v3[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v3[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[17] = v8;
  v3[18] = *(void *)(v8 + 64);
  v3[19] = swift_task_alloc();
  sub_100010218(&qword_1007FFBB0);
  v3[20] = swift_task_alloc();
  sub_100010218(&qword_1007FFBB8);
  v3[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DateComponents();
  v3[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[23] = v10;
  v3[24] = *(void *)(v10 + 64);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  return _swift_task_switch(sub_100149178, 0, 0);
}

uint64_t sub_100149178()
{
  if (qword_1007F7EC8 != -1) {
    swift_once();
  }
  uint64_t v40 = v0[28];
  uint64_t v25 = v0[27];
  uint64_t v44 = v0[26];
  uint64_t v45 = v0[25];
  uint64_t v32 = v0[24];
  uint64_t v29 = v0[23];
  uint64_t v1 = v0[21];
  uint64_t v39 = v0[22];
  uint64_t v2 = v0[20];
  uint64_t v43 = v0[19];
  uint64_t v30 = v0[18];
  uint64_t v28 = v0[17];
  uint64_t v41 = v0[15];
  uint64_t v42 = v0[16];
  uint64_t v3 = v0[13];
  uint64_t v31 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v36 = v0[11];
  uint64_t v37 = v3;
  uint64_t v34 = v0[10];
  uint64_t v35 = v0[9];
  uint64_t v27 = v0[8];
  uint64_t v33 = (void *)v0[7];
  uint64_t v26 = sub_100026A54(v4, (uint64_t)qword_10083EE28);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v38 = v4;
  v5(v1, 1, 1, v4);
  uint64_t v6 = type metadata accessor for TimeZone();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v2, 1, 1, v6);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  v5(v1, 1, 1, v4);
  v7(v2, 1, 1, v6);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  type metadata accessor for InsightsDataManager.Streaks(0);
  uint64_t v24 = swift_allocBox();
  v0[29] = v24;
  v0[30] = v8;
  sub_100468EA0(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v43, v27, v42);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v41, v26, v4);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v9(v44, v40, v39);
  v9(v45, v25, v39);
  unint64_t v10 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v11 = (v30 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (*(unsigned __int8 *)(v37 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v13 = (v31 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v15 = (v14 + v13 + 8) & ~v14;
  uint64_t v16 = (v32 + v14 + v15) & ~v14;
  uint64_t v17 = swift_allocObject();
  v0[31] = v17;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))(v17 + v10, v43, v42);
  *(void *)(v17 + v11) = v33;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v37 + 32))(v17 + v12, v41, v38);
  *(void *)(v17 + v13) = v24;
  uint64_t v18 = v17 + v15;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  v19(v18, v44, v39);
  v19(v17 + v16, v45, v39);
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v36, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v35);
  id v20 = v33;
  swift_retain();
  uint64_t v21 = (void *)swift_task_alloc();
  v0[32] = v21;
  void *v21 = v0;
  v21[1] = sub_100149694;
  uint64_t v22 = v0[11];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v21, v22, sub_10015D6C4, v17, (char *)&type metadata for () + 8);
}

uint64_t sub_100149694()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    uint64_t v5 = sub_100149980;
  }
  else {
    uint64_t v5 = sub_100149828;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100149828()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[22];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[23] + 8);
  v3(v0[27], v2);
  v3(v1, v2);
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[6];
  swift_beginAccess();
  sub_1001545E0(v4, v5, type metadata accessor for InsightsDataManager.Streaks);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100149980()
{
  if (qword_1007F6A28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FFA90);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch events for streaks: %@", v4, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v7 = v0[28];
  uint64_t v8 = v0[22];
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0[23] + 8);
  v9(v0[27], v8);
  v9(v7, v8);
  uint64_t v10 = v0[30];
  uint64_t v11 = v0[6];
  swift_beginAccess();
  sub_1001545E0(v10, v11, type metadata accessor for InsightsDataManager.Streaks);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100149C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Calendar();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_100149D20, 0, 0);
}

uint64_t sub_100149D20()
{
  *(void *)(v0 + 96) = type metadata accessor for MainActor();
  *(void *)(v0 + 104) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100149DB8, v2, v1);
}

uint64_t sub_100149DB8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  *(void *)(v0 + 112) = *(void *)(v1 + OBJC_IVAR____TtC7Journal19InsightsDataManager_options);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100149E40, 0, 0);
}

uint64_t sub_100149E40()
{
  char v1 = sub_100542088(2, v0[14]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v0[15] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100149F3C, v3, v2);
  }
  else
  {
    uint64_t v4 = (void *)v0[6];
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = _swiftEmptyArrayStorage;
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100149F3C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  id v2 = [*(id *)(v1 + 16) newBackgroundContext];
  *(void *)(v0 + 128) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setName:v3];

  id v4 = [self mergeByPropertyStoreTrumpMergePolicy];
  [v2 setMergePolicy:v4];

  [v2 setAutomaticallyMergesChangesFromParent:1];
  return _swift_task_switch(sub_10014A048, 0, 0);
}

uint64_t sub_10014A048()
{
  *(void *)(v0 + 136) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10014A0D4, v2, v1);
}

uint64_t sub_10014A0D4()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[7];
  swift_release();
  swift_getKeyPath();
  v0[5] = v4;
  sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v4 + OBJC_IVAR____TtC7Journal19InsightsDataManager__calendar;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1007FFB98 + dword_1007FFB98);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[18] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10014A264;
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[8];
  return v11(v7, v8, v9);
}

uint64_t sub_10014A264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void **)(*(void *)v4 + 128);
  uint64_t v7 = *(void *)(*(void *)v4 + 88);
  uint64_t v8 = *(void *)(*(void *)v4 + 80);
  uint64_t v9 = *(void *)(*(void *)v4 + 72);
  v5[19] = a1;
  v5[20] = a2;
  v5[21] = a3;
  v5[22] = a4;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  return _swift_task_switch(sub_10014A3E0, 0, 0);
}

uint64_t sub_10014A3E0()
{
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 48);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v0 + 152);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10014A458(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10014A478, 0, 0);
}

uint64_t sub_10014A478()
{
  *(void *)(v0 + 32) = type metadata accessor for MainActor();
  *(void *)(v0 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10014A510, v2, v1);
}

uint64_t sub_10014A510()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  *(void *)(v0 + 48) = *(void *)(v1 + OBJC_IVAR____TtC7Journal19InsightsDataManager_options);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10014A598, 0, 0);
}

uint64_t sub_10014A598()
{
  char v1 = sub_100542088(4, *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  if (v1)
  {
    *(void *)(v0 + 56) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10014A688, v3, v2);
  }
  else
  {
    **(void **)(v0 + 16) = _swiftEmptyArrayStorage;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_10014A688()
{
  swift_release();
  id v1 = sub_100469534();
  *(void *)(v0 + 64) = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t))((char *)&dword_1007FFB50 + dword_1007FFB50);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10014A744;
  return v4((uint64_t)v1);
}

uint64_t sub_10014A744(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = a1;
  swift_task_dealloc();

  return _swift_task_switch(sub_10014A860, 0, 0);
}

uint64_t sub_10014A860()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014A884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned char v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  uint64_t v5 = type metadata accessor for Calendar();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_10014A948, 0, 0);
}

uint64_t sub_10014A948()
{
  *(void *)(v0 + 104) = type metadata accessor for MainActor();
  *(void *)(v0 + 112) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10014A9E0, v2, v1);
}

uint64_t sub_10014A9E0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  *(void *)(v0 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)(v1 + OBJC_IVAR____TtC7Journal19InsightsDataManager_options);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10014AA68, 0, 0);
}

uint64_t sub_10014AA68()
{
  char v1 = sub_100542088(1, v0[15]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v0[16] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10014AB64, v3, v2);
  }
  else
  {
    uint64_t v4 = (void *)v0[6];
    void *v4 = _swiftEmptyArrayStorage;
    v4[1] = _swiftEmptyArrayStorage;
    v4[2] = 0;
    v4[3] = _swiftEmptyArrayStorage;
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10014AB64()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  swift_release();
  swift_getKeyPath();
  v0[5] = v4;
  sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = v4 + OBJC_IVAR____TtC7Journal19InsightsDataManager__calendar;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1007FFB38 + dword_1007FFB38);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[17] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10014ACF0;
  uint64_t v7 = v0[12];
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  return v11(v9, v7, v8);
}

uint64_t sub_10014ACF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 96);
  uint64_t v7 = *(void *)(*(void *)v4 + 88);
  uint64_t v8 = *(void *)(*(void *)v4 + 80);
  v5[18] = a1;
  v5[19] = a2;
  v5[20] = a3;
  v5[21] = a4;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  return _swift_task_switch(sub_10014AE54, 0, 0);
}

uint64_t sub_10014AE54()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 48);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v0 + 144);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10014AECC(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  if (__OFADD__(*v4, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v3 = v4;
  uint64_t v7 = a3;
  uint64_t v5 = a1;
  ++*v4;
  uint64_t v6 = _s4YearVMa(0);
  IndexSet.insert(_:)(a2);
  uint64_t v10 = *(int *)(v6 + 24);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)((char *)v4 + v10);
  uint64_t v29 = v13;
  *(void *)((char *)v3 + v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0x8000000000000000;
  unint64_t v8 = sub_10001BAFC(v7);
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = (v14 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v9 = v14;
  if (*(void *)(v13 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    sub_10054678C(v17, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = v29;
    unint64_t v18 = sub_10001BAFC(v7);
    if ((v9 & 1) != (v19 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v8 = v18;
  }
  while (1)
  {
    *(void *)((char *)v3 + v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v13;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)((char *)v3 + v10);
    if ((v9 & 1) == 0) {
      sub_10059A788(v8, v7, 0, *(void **)((char *)v3 + v10));
    }
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v22 = *(void *)(v21 + 8 * v8);
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23) {
      break;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    sub_10054A058();
    uint64_t v13 = v29;
  }
  *(void *)(v21 + 8 * v8) = v24;
  uint64_t v25 = *(void *)(v5 + *(int *)(type metadata accessor for InsightsDataManager.EntrySummary(0) + 28));
  uint64_t v26 = *(int *)(v6 + 28);
  swift_bridgeObjectRetain();
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *(void *)((char *)v3 + v26);
  *(void *)((char *)v3 + v26) = 0x8000000000000000;
  sub_10015A990(v25, (uint64_t)sub_10015AC54, 0, v27, &v29);
  *(void *)((char *)v3 + v26) = v29;

  return swift_bridgeObjectRelease();
}

void sub_10014B0B4(void *a1@<X0>, void (*a2)(void, void, void)@<X1>, void (**a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  NSString v264 = a2;
  uint64_t v268 = a3;
  uint64_t v223 = a4;
  uint64_t v230 = _s4YearVMa(0);
  uint64_t v237 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  Class v229 = (void *)((char *)v212 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v254 = _s5MonthVMa(0);
  uint64_t v240 = *(void *)(v254 - 8);
  __chkstk_darwin(v254);
  uint64_t v232 = (void *)((char *)v212 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v257 = type metadata accessor for DateComponents();
  uint64_t v221 = *(void *)(v257 - 8);
  __chkstk_darwin(v257);
  uint64_t v256 = (char *)v212 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010218(&qword_1007FD190);
  __chkstk_darwin(v8 - 8);
  uint64_t v239 = (uint64_t)v212 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v242 = (uint64_t)v212 - v11;
  __chkstk_darwin(v12);
  uint64_t v245 = (uint64_t)v212 - v13;
  uint64_t v258 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v220 = *(void *)(v258 - 8);
  __chkstk_darwin(v258);
  uint64_t v231 = (uint64_t)v212 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v243 = (char *)v212 - v16;
  __chkstk_darwin(v17);
  uint64_t v233 = (uint64_t)v212 - v18;
  uint64_t v19 = sub_100010218(&qword_1007FFC00);
  __chkstk_darwin(v19 - 8);
  v247 = (char *)v212 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = type metadata accessor for InsightsDataManager.EntrySummary(0);
  uint64_t v219 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  uint64_t v261 = (uint64_t)v212 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = sub_100010218(&qword_1007FFBE0);
  __chkstk_darwin(v238);
  uint64_t v275 = (uint64_t)v212 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v241 = sub_100010218(&qword_1007FFBE8);
  __chkstk_darwin(v241);
  uint64_t v269 = (uint64_t)v212 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v255 = type metadata accessor for UniformDateBins(0);
  __chkstk_darwin(v255);
  v266 = (void (*)(uint64_t, uint64_t))((char *)v212 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v249 = (void *)type metadata accessor for Calendar();
  uint64_t v271 = *(v249 - 1);
  __chkstk_darwin(v249);
  id v259 = (void (**)(uint64_t, uint64_t))((char *)v212 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  uint64_t v236 = (void (**)(uint64_t, uint64_t))((char *)v212 - v27);
  uint64_t v260 = type metadata accessor for Calendar.Component();
  uint64_t v263 = *(void *)(v260 - 8);
  __chkstk_darwin(v260);
  uint64_t v253 = (char *)v212 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v270 = (uint64_t)v212 - v30;
  uint64_t v244 = sub_100010218(&qword_1007FFBF0);
  __chkstk_darwin(v244);
  uint64_t v262 = (uint64_t)v212 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = sub_100010218(&qword_1007FD188);
  __chkstk_darwin(v226);
  v227 = (char *)v212 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v224 = (char *)v212 - v34;
  uint64_t v225 = sub_100010218(&qword_1007FC8E0);
  __chkstk_darwin(v225);
  uint64_t v251 = (uint64_t)v212 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  uint64_t v252 = (char *)v212 - v37;
  __chkstk_darwin(v38);
  uint64_t v248 = (uint64_t)v212 - v39;
  uint64_t v40 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v40 - 8);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v212 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = type metadata accessor for Date();
  uint64_t v250 = *(void *)(v235 - 8);
  __chkstk_darwin(v235);
  uint64_t v44 = (uint64_t)v212 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  uint64_t v234 = (char *)v212 - v46;
  id v47 = [objc_allocWithZone((Class)NSExpressionDescription) init];
  uint64_t v48 = (uint64_t)"%K = %@ AND %K != nil";
  NSString v49 = String._bridgeToObjectiveC()();
  [v47 setName:v49];

  sub_10001B284(0, &qword_1007FFC08);
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v50 = swift_allocObject();
  long long v267 = xmmword_1006D6280;
  *(_OWORD *)(v50 + 16) = xmmword_1006D6280;
  *(void *)(v50 + 56) = &type metadata for String;
  *(void *)(v50 + 64) = sub_10001B2C0();
  *(void *)(v50 + 32) = 0x7461447972746E65;
  *(void *)(v50 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE900000000000065;
  unint64_t v51 = NSExpression.init(format:_:)();
  [v47 setExpression:v51];

  [v47 setExpressionResultType:900];
  id v52 = [objc_allocWithZone((Class)NSFetchRequest) init];
  uint64_t v228 = type metadata accessor for JournalEntryMO();
  id v53 = [(id)swift_getObjCClassFromMetadata() entity];
  [v52 setEntity:v53];

  if (qword_1007F7070 != -1) {
    swift_once();
  }
  [v52 setPredicate:static NSPredicate.allJournalEntries];
  [v52 setResultType:2];
  sub_100010218((uint64_t *)&unk_1007FC0F0);
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = v267;
  *(void *)(v54 + 56) = sub_10001B284(0, &qword_1007FFC10);
  *(void *)(v54 + 32) = v47;
  id v55 = v47;
  uint64_t v56 = (uint64_t)&type metadata for Any;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v52 setPropertiesToFetch:isa];

  sub_10001B284(0, &qword_1007FF5E0);
  uint64_t v58 = v265;
  unint64_t v59 = NSManagedObjectContext.fetch<A>(_:)();
  if (v58)
  {

    return;
  }
  unint64_t v60 = v59;
  id v213 = v55;
  uint64_t v218 = 0;
  id v214 = v52;
  id v216 = a1;
  if (v59 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v69) {
      goto LABEL_7;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    long long v273 = 0u;
    long long v274 = 0u;
    uint64_t v64 = v235;
    uint64_t v65 = v250;
    goto LABEL_18;
  }
  if (!*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_17;
  }
LABEL_7:
  if ((v60 & 0xC000000000000001) != 0) {
    goto LABEL_92;
  }
  if (!*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_94;
  }
  for (id i = *(id *)(v60 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v62 = i;
    swift_bridgeObjectRelease();
    *(void *)&v272[0] = 0xD000000000000011;
    *((void *)&v272[0] + 1) = v48 | 0x8000000000000000;
    id v63 = [v62 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();

    if (v63)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v272, 0, sizeof(v272));
    }
    uint64_t v64 = v235;
    uint64_t v65 = v250;
    sub_10002C4EC((uint64_t)v272, (uint64_t)&v273, &qword_1007FAD50);
    if (*((void *)&v274 + 1))
    {
      int v66 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(isUniquelyReferenced_nonNull_native, v66 ^ 1u, 1, v64);
      int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(isUniquelyReferenced_nonNull_native, 1, v64);
      uint64_t v68 = v264;
      if (v67 != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v44, isUniquelyReferenced_nonNull_native, v64);
        goto LABEL_20;
      }
    }
    else
    {
LABEL_18:
      sub_10001457C((uint64_t)&v273, &qword_1007FAD50);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(isUniquelyReferenced_nonNull_native, 1, 1, v64);
      uint64_t v68 = v264;
    }
    static Date.distantFuture.getter();
    sub_10001457C(isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1007FC470);
LABEL_20:
    uint64_t isUniquelyReferenced_nonNull_native = sub_10015D970((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
    char v70 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    uint64_t v48 = v65 + 16;
    uint64_t v71 = v72;
    uint64_t v73 = v234;
    if (v70)
    {
      uint64_t v74 = v234;
      uint64_t v75 = (uint64_t)v68;
    }
    else
    {
      uint64_t v74 = v234;
      uint64_t v75 = v44;
    }
    v71(v74, v75, v64);
    uint64_t v76 = v64;
    uint64_t v77 = v250 + 8;
    NSString v217 = *(void (**)(uint64_t, uint64_t))(v250 + 8);
    v217(v44, v64);
    if (dispatch thunk of static Comparable.<= infix(_:_:)()) {
      break;
    }
LABEL_91:
    __break(1u);
LABEL_92:
    ;
  }
  uint64_t v78 = v73;
  uint64_t v79 = v226;
  uint64_t v80 = v224;
  uint64_t v81 = &v224[*(int *)(v226 + 48)];
  v71(v224, (uint64_t)v78, v76);
  uint64_t v265 = (uint64_t)v81;
  v71(v81, (uint64_t)v68, v76);
  uint64_t v82 = v227;
  id v83 = &v227[*(int *)(v79 + 48)];
  v71(v227, (uint64_t)v80, v76);
  v71(v83, (uint64_t)v81, v76);
  uint64_t v84 = v77;
  uint64_t v86 = v250 + 32;
  uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v250 + 32);
  uint64_t v87 = v76;
  v85(v252, v82, v76);
  uint64_t v88 = v76;
  uint64_t v89 = (void (*)(char *, uint64_t))v217;
  v217((uint64_t)v83, v88);
  uint64_t v90 = &v82[*(int *)(v79 + 48)];
  v85(v82, v80, v87);
  v85(v90, (char *)v265, v87);
  uint64_t v91 = (unsigned int (**)(void, void, void))v252;
  uint64_t v92 = &v252[*(int *)(v225 + 36)];
  uint64_t v250 = v86;
  v212[0] = v85;
  v85(v92, v90, v87);
  v212[1] = v84;
  v89(v82, v87);
  uint64_t v93 = (uint64_t)v91;
  uint64_t v94 = v248;
  sub_10002C4EC((uint64_t)v91, v248, &qword_1007FC8E0);
  uint64_t v95 = *(char **)(v263 + 104);
  uint64_t v226 = v263 + 104;
  v227 = v95;
  uint64_t v96 = v270;
  uint64_t v97 = v263;
  uint64_t v98 = v260;
  ((void (*)(uint64_t, void, uint64_t))v95)(v270, enum case for Calendar.Component.day(_:), v260);
  sub_10001B220(v94, v93, &qword_1007FC8E0);
  uint64_t v99 = v271 + 16;
  uint64_t v100 = *(void (**)(char *, void (**)(uint64_t, uint64_t), void *))(v271 + 16);
  uint64_t v101 = v236;
  uint64_t v102 = v249;
  v100((char *)v236, v268, v249);
  NSString v264 = *(void (**)(void, void, void))(v97 + 16);
  uint64_t v265 = v97 + 16;
  uint64_t v103 = (uint64_t)v253;
  v264(v253, v96, v98);
  uint64_t v104 = v251;
  sub_10001B220(v93, v251, &qword_1007FC8E0);
  uint64_t v105 = (uint64_t)v259;
  v100((char *)v259, v101, v102);
  uint64_t v215 = v99;
  char v106 = v266;
  sub_10066B1E8(v103, v104, v105, (uint64_t)v266);
  sub_1004689EC((uint64_t)v106, v262);
  uint64_t v222 = *(void (**)(void, void *))(v271 + 8);
  v271 += 8;
  v222(v101, v102);
  uint64_t v107 = (unsigned int (**)(void, void, void))v252;
  sub_10001457C((uint64_t)v252, &qword_1007FC8E0);
  uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v263 + 8);
  uint64_t v224 = (char *)(v263 + 8);
  uint64_t v225 = (uint64_t)v108;
  uint64_t v109 = v270;
  v108(v270, v98);
  ((void (*)(uint64_t, void, uint64_t))v227)(v109, enum case for Calendar.Component.month(_:), v98);
  sub_10001B220(v248, (uint64_t)v107, &qword_1007FC8E0);
  unint64_t v110 = v100;
  v100((char *)v101, v268, v102);
  uint64_t v111 = (uint64_t)v253;
  v264(v253, v109, v98);
  uint64_t v112 = v251;
  sub_10001B220((uint64_t)v107, v251, &qword_1007FC8E0);
  uint64_t v113 = (uint64_t)v259;
  v110((char *)v259, v101, v102);
  id v114 = v266;
  sub_10066B1E8(v111, v112, v113, (uint64_t)v266);
  sub_1004689E0((uint64_t)v114, v269);
  v222(v101, v102);
  sub_10001457C((uint64_t)v107, &qword_1007FC8E0);
  uint64_t v115 = v270;
  ((void (*)(uint64_t, uint64_t))v225)(v270, v98);
  ((void (*)(uint64_t, void, uint64_t))v227)(v115, enum case for Calendar.Component.year(_:), v98);
  sub_10001B220(v248, (uint64_t)v107, &qword_1007FC8E0);
  v110((char *)v101, v268, v102);
  uint64_t v116 = (uint64_t)v253;
  v264(v253, v115, v98);
  sub_10001B220((uint64_t)v107, v112, &qword_1007FC8E0);
  uint64_t v117 = (uint64_t)v259;
  v110((char *)v259, v101, v102);
  uint64_t v118 = v266;
  sub_10066B1E8(v116, v112, v117, (uint64_t)v266);
  uint64_t v119 = v275;
  sub_1004689D4((uint64_t)v118, v275);
  v222(v101, v102);
  sub_10001457C((uint64_t)v107, &qword_1007FC8E0);
  ((void (*)(uint64_t, uint64_t))v225)(v270, v98);
  id v120 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v121 = String._bridgeToObjectiveC()();
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)[v120 initWithEntityName:v121];

  [(id)isUniquelyReferenced_nonNull_native setPredicate:static NSPredicate.allJournalEntries];
  sub_100010218((uint64_t *)&unk_1007FA1C0);
  uint64_t v122 = swift_allocObject();
  *(_OWORD *)(v122 + 16) = xmmword_1006D6D00;
  sub_10001B284(0, (unint64_t *)&qword_10080F990);
  swift_getKeyPath();
  *(void *)(v122 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  *(void *)&long long v273 = v122;
  specialized Array._endMutation()();
  Class v123 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(id)isUniquelyReferenced_nonNull_native setSortDescriptors:v123];

  Class v124 = Array._bridgeToObjectiveC()().super.isa;
  [(id)isUniquelyReferenced_nonNull_native setRelationshipKeyPathsForPrefetching:v124];

  [(id)isUniquelyReferenced_nonNull_native setFetchBatchSize:400];
  uint64_t v125 = v218;
  unint64_t v126 = NSManagedObjectContext.fetch<A>(_:)();
  if (v125)
  {

    sub_10001457C(v119, &qword_1007FFBE0);
    sub_10001457C(v269, &qword_1007FFBE8);
    sub_10001457C(v262, &qword_1007FFBF0);
    sub_10001457C(v248, &qword_1007FC8E0);
    v217((uint64_t)v234, v235);
    return;
  }
  uint64_t v56 = v126;
  v227 = (char *)isUniquelyReferenced_nonNull_native;
  uint64_t v218 = 0;
  if (!(v126 >> 62))
  {
    uint64_t v127 = *(void *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_28;
  }
LABEL_94:
  swift_bridgeObjectRetain();
  uint64_t v127 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v128 = v258;
  uint64_t v129 = v275;
  uint64_t v44 = (uint64_t)v247;
  uint64_t v130 = v246;
  uint64_t v131 = 0;
  if (!v127)
  {
LABEL_81:
    swift_bridgeObjectRelease();
    [v216 reset];

    sub_10001457C(v248, &qword_1007FC8E0);
    uint64_t v208 = (int *)sub_100010218(&qword_1007FFBD8);
    uint64_t v209 = v223 + v208[12];
    uint64_t v210 = v223 + v208[16];
    uint64_t v211 = v223 + v208[20];
    sub_10002C4EC(v262, v223, &qword_1007FFBF0);
    sub_10002C4EC(v269, v209, &qword_1007FFBE8);
    sub_10002C4EC(v129, v210, &qword_1007FFBE0);
    ((void (*)(uint64_t, char *, uint64_t))v212[0])(v211, v234, v235);
    sub_10001ABB8((uint64_t)v131);
    return;
  }
  uint64_t v253 = (char *)(v56 & 0xC000000000000001);
  uint64_t v252 = (char *)(v219 + 48);
  uint64_t v268 = (void (**)(uint64_t, uint64_t))(v220 + 48);
  uint64_t v236 = (void (**)(uint64_t, uint64_t))(v221 + 8);
  uint64_t v48 = 4;
  uint64_t v228 = v56;
  uint64_t v251 = v127;
  while (2)
  {
    uint64_t v132 = v48 - 4;
    if (v253)
    {
      id v133 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v134 = v48 - 3;
      if (__OFADD__(v132, 1)) {
        goto LABEL_82;
      }
    }
    else
    {
      id v133 = *(id *)(v56 + 8 * v48);
      uint64_t v134 = v48 - 3;
      if (__OFADD__(v132, 1))
      {
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
    }
    uint64_t isUniquelyReferenced_nonNull_native = v128;
    uint64_t v271 = v134;
    id v135 = v133;
    sub_10014D374(v44);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v252)(v44, 1, v130) == 1)
    {

      sub_10001457C(v44, &qword_1007FFC00);
      uint64_t v128 = isUniquelyReferenced_nonNull_native;
      goto LABEL_31;
    }
    uint64_t v249 = v135;
    uint64_t v136 = v261;
    sub_10015DC8C(v44, v261, type metadata accessor for InsightsDataManager.EntrySummary);
    id v259 = (void (**)(uint64_t, uint64_t))(v136 + *(int *)(v130 + 24));
    uint64_t v137 = v262;
    uint64_t v138 = v245;
    sub_10001B220(v262, v245, &qword_1007FD190);
    uint64_t v139 = isUniquelyReferenced_nonNull_native;
    v266 = *v268;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v266)(v138, 1, isUniquelyReferenced_nonNull_native) == 1)
    {
      sub_10001457C(v138, &qword_1007FD190);
      uint64_t v44 = 0;
      goto LABEL_43;
    }
    uint64_t v140 = v233;
    sub_10015DC8C(v138, v233, type metadata accessor for CalendarBinningUnit);
    sub_100010218(&qword_1007FB058);
    unint64_t v141 = (*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80);
    uint64_t v142 = swift_allocObject();
    *(_OWORD *)(v142 + 16) = v267;
    v264(v142 + v141, v140, v260);
    sub_1000F5AEC(v142);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v256;
    Calendar.dateComponents(_:from:to:)();
    swift_bridgeObjectRelease();
    uint64_t v143 = DateComponents.value(for:)();
    LOBYTE(v142) = v144;
    (*v236)(isUniquelyReferenced_nonNull_native, v257);
    if ((v142 & 1) == 0)
    {
      sub_1001546C4(v140, type metadata accessor for CalendarBinningUnit);
      uint64_t v137 = v262;
      uint64_t v145 = *(void *)(v262 + *(int *)(v255 + 20));
      uint64_t v44 = v143 - v145;
      if (__OFSUB__(v143, v145)) {
        goto LABEL_88;
      }
      uint64_t v139 = v258;
LABEL_43:
      uint64_t v146 = *(int *)(v244 + 32);
      sub_10001ABB8((uint64_t)v131);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v273 = *(void *)(v137 + v146);
      uint64_t v147 = v273;
      *(void *)(v137 + v146) = 0x8000000000000000;
      uint64_t v270 = v44;
      unint64_t v149 = sub_10001BAFC(v44);
      uint64_t v150 = *(void *)(v147 + 16);
      BOOL v151 = (v148 & 1) == 0;
      uint64_t v152 = v150 + v151;
      if (__OFADD__(v150, v151)) {
        goto LABEL_83;
      }
      char v153 = v148;
      if (*(void *)(v147 + 24) >= v152)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10054A058();
          uint64_t v147 = v273;
        }
      }
      else
      {
        sub_10054678C(v152, isUniquelyReferenced_nonNull_native);
        uint64_t v147 = v273;
        unint64_t v154 = sub_10001BAFC(v270);
        if ((v153 & 1) != (v155 & 1)) {
          goto LABEL_98;
        }
        unint64_t v149 = v154;
      }
      *(void *)(v137 + v146) = v147;
      swift_bridgeObjectRelease();
      id v156 = *(void **)(v137 + v146);
      swift_bridgeObjectRetain();
      if ((v153 & 1) == 0) {
        sub_10059A788(v149, v270, 0, v156);
      }
      uint64_t v44 = v156[7];
      swift_bridgeObjectRelease();
      uint64_t v157 = *(void *)(v44 + 8 * v149);
      BOOL v158 = __OFADD__(v157, 1);
      uint64_t v159 = v157 + 1;
      uint64_t v160 = (uint64_t)v243;
      id v161 = v264;
      uint64_t isUniquelyReferenced_nonNull_native = v265;
      if (v158) {
        goto LABEL_84;
      }
      *(void *)(v44 + 8 * v149) = v159;
      uint64_t v44 = v269;
      uint64_t v162 = v242;
      sub_10001B220(v269, v242, &qword_1007FD190);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v266)(v162, 1, v139) == 1)
      {
        sub_10001457C(v162, &qword_1007FD190);
        id v163 = 0;
      }
      else
      {
        sub_10015DC8C(v162, v160, type metadata accessor for CalendarBinningUnit);
        sub_100010218(&qword_1007FB058);
        unint64_t v164 = (*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80);
        uint64_t v165 = swift_allocObject();
        *(_OWORD *)(v165 + 16) = v267;
        v161(v165 + v164, v160, v260);
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1000F5AEC(v165);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        uint64_t v166 = v256;
        Calendar.dateComponents(_:from:to:)();
        swift_bridgeObjectRelease();
        uint64_t v167 = DateComponents.value(for:)();
        LOBYTE(v165) = v168;
        (*v236)((uint64_t)v166, v257);
        if (v165) {
          goto LABEL_96;
        }
        sub_1001546C4(v160, type metadata accessor for CalendarBinningUnit);
        uint64_t v44 = v269;
        uint64_t v169 = *(void *)(v269 + *(int *)(v255 + 20));
        id v163 = (void (*)(uint64_t, uint64_t))(v167 - v169);
        if (__OFSUB__(v167, v169)) {
          goto LABEL_89;
        }
      }
      uint64_t v170 = *(int *)(v241 + 32);
      int v171 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v273 = *(void *)(v44 + v170);
      uint64_t v172 = v273;
      *(void *)(v44 + v17sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0x8000000000000000;
      uint64_t v44 = sub_10001BAFC((uint64_t)v163);
      uint64_t v174 = *(void *)(v172 + 16);
      BOOL v175 = (v173 & 1) == 0;
      uint64_t v176 = v174 + v175;
      if (__OFADD__(v174, v175)) {
        goto LABEL_85;
      }
      char v177 = v173;
      if (*(void *)(v172 + 24) >= v176)
      {
        if ((v171 & 1) == 0)
        {
          sub_10054A21C();
          uint64_t v172 = v273;
        }
      }
      else
      {
        sub_100546A68(v176, v171);
        uint64_t v172 = v273;
        unint64_t v178 = sub_10001BAFC((uint64_t)v163);
        if ((v177 & 1) != (v179 & 1)) {
          goto LABEL_98;
        }
        uint64_t v44 = v178;
      }
      uint64_t v180 = v275;
      uint64_t v181 = v269;
      *(void *)(v269 + v17sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v172;
      swift_bridgeObjectRelease();
      unint64_t v182 = *(void **)(v181 + v170);
      if (v177)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v183 = (uint64_t)v232;
        *uint64_t v232 = 0;
        swift_bridgeObjectRetain();
        IndexSet.init()();
        sub_10059A7EC(v44, (uint64_t)v163, v183, v182);
      }
      uint64_t isUniquelyReferenced_nonNull_native = v182[7];
      swift_bridgeObjectRelease();
      id v184 = (void *)(isUniquelyReferenced_nonNull_native + *(void *)(v240 + 72) * v44);
      if (__OFADD__(*v184, 1)) {
        goto LABEL_86;
      }
      ++*v184;
      IndexSet.insert(_:)(v270);
      uint64_t v185 = v239;
      sub_10001B220(v180, v239, &qword_1007FD190);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v266)(v185, 1, v139) == 1)
      {
        sub_10001457C(v185, &qword_1007FD190);
        uint64_t isUniquelyReferenced_nonNull_native = 0;
      }
      else
      {
        v266 = v163;
        uint64_t v186 = v231;
        sub_10015DC8C(v185, v231, type metadata accessor for CalendarBinningUnit);
        sub_100010218(&qword_1007FB058);
        unint64_t v187 = (*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80);
        uint64_t v188 = swift_allocObject();
        *(_OWORD *)(v188 + 16) = v267;
        v264(v188 + v187, v186, v260);
        sub_1000F5AEC(v188);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        uint64_t v189 = v256;
        Calendar.dateComponents(_:from:to:)();
        swift_bridgeObjectRelease();
        uint64_t v190 = DateComponents.value(for:)();
        uint64_t v44 = v191;
        (*v236)((uint64_t)v189, v257);
        if (v44) {
          goto LABEL_97;
        }
        sub_1001546C4(v186, type metadata accessor for CalendarBinningUnit);
        uint64_t v192 = *(void *)(v180 + *(int *)(v255 + 20));
        uint64_t isUniquelyReferenced_nonNull_native = v190 - v192;
        if (__OFSUB__(v190, v192)) {
          goto LABEL_90;
        }
        id v163 = v266;
      }
      uint64_t v193 = *(int *)(v238 + 32);
      int v194 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v273 = *(void *)(v180 + v193);
      uint64_t v195 = v273;
      *(void *)(v180 + v193) = 0x8000000000000000;
      uint64_t v44 = sub_10001BAFC(isUniquelyReferenced_nonNull_native);
      uint64_t v197 = *(void *)(v195 + 16);
      BOOL v198 = (v196 & 1) == 0;
      uint64_t v199 = v197 + v198;
      if (__OFADD__(v197, v198)) {
        goto LABEL_87;
      }
      char v200 = v196;
      if (*(void *)(v195 + 24) >= v199)
      {
        if ((v194 & 1) == 0)
        {
          sub_10054A1E8();
          uint64_t v195 = v273;
        }
      }
      else
      {
        sub_100546A34(v199, v194);
        uint64_t v195 = v273;
        unint64_t v201 = sub_10001BAFC(isUniquelyReferenced_nonNull_native);
        if ((v200 & 1) != (v202 & 1)) {
          goto LABEL_98;
        }
        uint64_t v44 = v201;
      }
      uint64_t v203 = v275;
      *(void *)(v275 + v193) = v195;
      swift_bridgeObjectRelease();
      id v204 = *(void **)(v203 + v193);
      if (v200)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v205 = (uint64_t)v229;
        *Class v229 = 0;
        uint64_t v206 = v230;
        swift_bridgeObjectRetain();
        IndexSet.init()();
        *(void *)(v205 + *(int *)(v206 + 24)) = &_swiftEmptyDictionarySingleton;
        *(void *)(v205 + *(int *)(v206 + 28)) = &_swiftEmptyDictionarySingleton;
        sub_10059A7D0(v44, isUniquelyReferenced_nonNull_native, v205, v204);
      }
      uint64_t v128 = v258;
      uint64_t isUniquelyReferenced_nonNull_native = v204[7];
      swift_bridgeObjectRelease();
      uint64_t v207 = v261;
      sub_10014AECC(v261, v270, (uint64_t)v163);

      sub_1001546C4(v207, type metadata accessor for InsightsDataManager.EntrySummary);
      uint64_t v131 = sub_10000D2A4;
      uint64_t v129 = v275;
      uint64_t v44 = (uint64_t)v247;
      uint64_t v130 = v246;
      uint64_t v56 = v228;
LABEL_31:
      ++v48;
      if (v271 == v251) {
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_10014D35C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150ED0(a1, (SEL *)&selRef_entryDate, a2);
}

void sub_10014D368(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10014D374@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v4 - 8);
  uint64_t v85 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v75 - v7;
  uint64_t v86 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  id v83 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v75 - v12;
  __chkstk_darwin(v14);
  uint64_t v84 = (char *)&v75 - v15;
  uint64_t v16 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v24 = __chkstk_darwin(v23).n128_u64[0];
  uint64_t v87 = (char *)&v75 - v25;
  id v26 = [v2 id:v24];
  if (!v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    goto LABEL_42;
  }
  uint64_t v27 = v26;
  uint64_t v82 = v9;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v28(v18, v22, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
LABEL_42:
    int v67 = &qword_100800950;
    uint64_t v68 = (uint64_t)v18;
LABEL_43:
    sub_10001457C(v68, v67);
LABEL_46:
    uint64_t v69 = type metadata accessor for InsightsDataManager.EntrySummary(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(a1, 1, 1, v69);
  }
  uint64_t v81 = a1;
  v28(v87, v18, v19);
  id v29 = [v2 createdDate];
  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v8, 1, 1, v86);
    goto LABEL_45;
  }
  uint64_t v30 = v29;
  uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))v28;
  uint64_t v78 = v20 + 32;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = v82;
  uint64_t v32 = (unsigned int (*)(char *, uint64_t, uint64_t))(v82 + 32);
  unint64_t v33 = *(void *)(v82 + 32);
  uint64_t v34 = v86;
  ((void (*)(char *, char *, uint64_t))v33)(v8, v13, v86);
  unint64_t v80 = *(void *)(v31 + 56);
  ((void (*)(char *, void, uint64_t, uint64_t))v80)(v8, 0, 1, v34);
  uint64_t v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v79(v8, 1, v34) == 1)
  {
LABEL_45:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v87, v19);
    sub_10001457C((uint64_t)v8, (uint64_t *)&unk_1007FC470);
    a1 = v81;
    goto LABEL_46;
  }
  ((void (*)(char *, char *, uint64_t))v33)(v84, v8, v34);
  id v35 = [v2 entryDate];
  uint64_t v36 = v34;
  if (!v35)
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v80)(v85, 1, 1, v34);
    a1 = v81;
    goto LABEL_48;
  }
  uint64_t v37 = v35;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = v85;
  ((void (*)(char *, char *, uint64_t))v33)(v85, v13, v36);
  ((void (*)(char *, void, uint64_t, uint64_t))v80)(v38, 0, 1, v36);
  unsigned int v39 = v79(v38, 1, v36);
  a1 = v81;
  if (v39 == 1)
  {
LABEL_48:
    (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v36);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v87, v19);
    int v67 = (uint64_t *)&unk_1007FC470;
    uint64_t v68 = (uint64_t)v85;
    goto LABEL_43;
  }
  uint64_t v79 = v32;
  ((void (*)(char *, char *, uint64_t))v33)(v83, v85, v36);
  unint64_t v40 = (unint64_t)sub_1000E7370();
  unint64_t v80 = v40;
  if (v40 >> 62) {
    goto LABEL_55;
  }
  uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v76 = (void (*)(uint64_t, char *, uint64_t))v33;
    uint64_t v42 = 0;
    if (!v41) {
      break;
    }
    unint64_t v33 = v80;
    uint64_t v85 = (char *)(v80 & 0xC000000000000001);
    uint64_t v43 = &_swiftEmptyDictionarySingleton;
    uint64_t v44 = 4;
    uint64_t v82 = v41;
    while (1)
    {
      id v45 = v85 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v33 + 8 * v44);
      uint64_t v46 = v45;
      uint64_t v47 = v44 - 3;
      if (__OFADD__(v44 - 4, 1)) {
        break;
      }
      id v48 = [v45 assetType];
      if (v48)
      {
        NSString v49 = v48;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        char v50 = sub_100044D84();
        unsigned __int8 v51 = 1;
        unint64_t v33 = v80;
        switch(v50)
        {
          case 2:
            break;
          case 3:
          case 4:
          case 5:
          case 17:
            unsigned __int8 v51 = 3;
            break;
          case 6:
            unsigned __int8 v51 = 2;
            break;
          case 7:
          case 8:
          case 9:
            unsigned __int8 v51 = 4;
            break;
          case 10:
          case 18:
          case 19:
          case 20:
          case 21:
            goto LABEL_11;
          case 11:
            unsigned __int8 v51 = 5;
            break;
          case 12:
          case 13:
          case 16:
            unsigned __int8 v51 = 6;
            break;
          case 14:
            unsigned __int8 v51 = 7;
            break;
          case 15:
            unsigned __int8 v51 = 8;
            break;
          default:
            unsigned __int8 v51 = 0;
            break;
        }
        sub_10001ABB8((uint64_t)v42);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v88 = v43;
        unint64_t v54 = sub_10001BB90(v51);
        uint64_t v55 = v43[2];
        BOOL v56 = (v53 & 1) == 0;
        uint64_t v57 = v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_52;
        }
        char v58 = v53;
        if (v43[3] >= v57)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100549EC8();
          }
        }
        else
        {
          sub_10054639C(v57, isUniquelyReferenced_nonNull_native);
          unint64_t v59 = sub_10001BB90(v51);
          if ((v58 & 1) != (v60 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x10014DCA0);
          }
          unint64_t v54 = v59;
        }
        uint64_t v43 = v88;
        swift_bridgeObjectRelease();
        if (v58)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          v43[(v54 >> 6) + 8] |= 1 << v54;
          *(unsigned char *)(v43[6] + v54) = v51;
          *(void *)(v43[7] + 8 * v54) = 0;
          uint64_t v61 = v43[2];
          uint64_t v62 = v61 + 1;
          unint64_t v33 = __OFADD__(v61, 1);
          swift_bridgeObjectRetain();
          if (v33) {
            goto LABEL_54;
          }
          void v43[2] = v62;
          unint64_t v33 = v80;
        }
        uint64_t v63 = v43[7];
        swift_bridgeObjectRelease();
        uint64_t v64 = *(void *)(v63 + 8 * v54);
        BOOL v65 = __OFADD__(v64, 1);
        uint64_t v66 = v64 + 1;
        if (v65) {
          goto LABEL_53;
        }
        *(void *)(v63 + 8 * v54) = v66;
        uint64_t v42 = sub_10000D2A4;
      }
LABEL_11:

      ++v44;
      if (v47 == v82) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v43 = &_swiftEmptyDictionarySingleton;
LABEL_50:
  swift_bridgeObjectRelease();
  uint64_t v71 = v81;
  v77(v81, v87, v19);
  uint64_t v72 = (int *)type metadata accessor for InsightsDataManager.EntrySummary(0);
  uint64_t v73 = v86;
  uint64_t v74 = v76;
  v76(v71 + v72[5], v84, v86);
  v74(v71 + v72[6], v83, v73);
  *(void *)(v71 + v72[7]) = v43;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v72 - 1) + 56))(v71, 0, 1, v72);
  return sub_10001ABB8((uint64_t)v42);
}

uint64_t sub_10014DCF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = _s4YearVMa(0);
  uint64_t v7 = IndexSet.count.getter();
  uint64_t v8 = *a1;
  uint64_t v9 = *(uint64_t *)((char *)a1 + *(int *)(v6 + 24));
  void v13[2] = a2;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10031739C((void (*)(void *))sub_10015DC0C, (uint64_t)v13, v9);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_100141C3C(*(uint64_t *)((char *)a1 + *(int *)(v6 + 28)));
  swift_bridgeObjectRetain();
  sub_10015496C(&v14, type metadata accessor for InsightsDataManager.TopAssetCategory, (uint64_t (*)(uint64_t))sub_1000F3FD0, (uint64_t (*)(void *))sub_100154A9C);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = v14;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = (uint64_t)v10;
  a3[3] = v12;
  return result;
}

uint64_t sub_10014DE2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100010218(&qword_1007FC8E0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = *(int *)(sub_100010218(&qword_1007FC1E8) + 48);
  sub_10066AC8C(v8, (uint64_t)v6);
  Date.timeIntervalSince(_:)();
  static Date.+ infix(_:_:)();
  uint64_t result = sub_10001457C((uint64_t)v6, &qword_1007FC8E0);
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = (void *)(a2 + v9);
    *uint64_t v11 = 0;
    v11[1] = v7;
  }
  return result;
}

void sub_10014DF30(void (*a1)(char *, uint64_t, uint64_t, uint64_t), void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v98 = a6;
  uint64_t v97 = a5;
  uint64_t v91 = a4;
  id v110 = a3;
  uint64_t v96 = type metadata accessor for Calendar.Component();
  uint64_t v111 = *(char **)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v95 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v104 = (char *)&v83 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(char ***)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v89 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v107 = (char *)&v83 - v20;
  __chkstk_darwin(v21);
  uint64_t v90 = (char *)&v83 - v22;
  id v23 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 initWithEntityName:v24];

  if (qword_1007F7070 != -1) {
    goto LABEL_51;
  }
  while (1)
  {
    [v25 setPredicate:static NSPredicate.allJournalEntries];
    sub_100010218((uint64_t *)&unk_1007FC0F0);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1006D6280;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 32) = 1954047348;
    *(void *)(v26 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE400000000000000;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v25 setPropertiesToFetch:isa];

    [v25 setFetchBatchSize:100];
    type metadata accessor for JournalEntryMO();
    unint64_t v28 = NSManagedObjectContext.fetch<A>(_:)();
    if (v7)
    {
      id v29 = v25;
      if (qword_1007F6A28 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100026A54(v30, (uint64_t)qword_1007FFA90);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v33 = 138412290;
        swift_errorRetain();
        uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v112 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v34 = v35;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to fetch entries for word counts: %@", v33, 0xCu);
        sub_100010218((uint64_t *)&unk_1007FC430);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      return;
    }
    unint64_t v36 = v28;
    uint64_t v85 = a1;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v38 = v85;
    if (!v37) {
      break;
    }
    if (v37 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v83 = 0;
    id v84 = v25;
    unsigned int v39 = v91 + 2;
    unint64_t v103 = v36 & 0xC000000000000001;
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v102 = v39;
    swift_beginAccess();
    uint64_t v7 = 0;
    uint64_t v108 = v17 + 4;
    uint64_t v109 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 7);
    char v106 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 6);
    unsigned int v88 = enum case for Calendar.Component.month(_:);
    uint64_t v94 = v111 + 104;
    uint64_t v93 = (void (**)(char *, uint64_t))(v111 + 8);
    uint64_t v92 = (void (**)(void *, uint64_t))(v17 + 1);
    unsigned int v87 = enum case for Calendar.Component.year(_:);
    uint64_t v17 = &selRef_archivedDataWithRootObject_requiringSecureCoding_error_;
    uint64_t v101 = (char *)v13;
    uint64_t v86 = a2;
    unint64_t v99 = v36;
    uint64_t v100 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v37;
    while (1)
    {
      unint64_t v40 = v103
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v36 + 8 * (void)v7 + 32);
      uint64_t v41 = v40;
      id v42 = [v40 title];
      if (v42
        && (uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
            unint64_t v45 = v44,
            v42,
            id v42 = sub_100041F24(v43, v45),
            sub_100040DD0(v43, v45),
            v42))
      {
        id v46 = [v42 string];

        id v42 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;
      }
      else
      {
        unint64_t v48 = 0xE000000000000000;
      }
      uint64_t v113 = 0;
      NSString v49 = String._bridgeToObjectiveC()();
      uint64_t v50 = (uint64_t)v110;
      [v110 v17[258] v49];

      NSString v51 = String._bridgeToObjectiveC()();
      [a2 v17[258] v51];

      __chkstk_darwin(v52);
      *(&v83 - 6) = (uint64_t)a2;
      *(&v83 - 5) = v50;
      *(&v83 - 4) = (uint64_t)&v113;
      *(&v83 - 3) = (uint64_t)v42;
      *(&v83 - 2) = v48;
      NLTokenizer.enumerateTokens(in:using:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = (uint64_t)v113;
      id v53 = [v41 text];
      uint64_t v111 = v41;
      if (!v53) {
        goto LABEL_25;
      }
      uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v56 = v55;

      id v53 = sub_100041F24(v54, v56);
      sub_100040DD0(v54, v56);
      if (v53)
      {
        id v57 = [v53 string];

        id v53 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v59 = v58;
      }
      else
      {
LABEL_25:
        unint64_t v59 = 0xE000000000000000;
      }
      uint64_t v113 = 0;
      NSString v60 = String._bridgeToObjectiveC()();
      id v25 = v110;
      [v110 v17[258]:v60];

      NSString v61 = String._bridgeToObjectiveC()();
      [a2 v17[258] v61];

      a1 = (void (*)(char *, uint64_t, uint64_t, uint64_t))&v83;
      __chkstk_darwin(v62);
      *(&v83 - 6) = (uint64_t)a2;
      *(&v83 - 5) = (uint64_t)v25;
      *(&v83 - 4) = (uint64_t)&v113;
      *(&v83 - 3) = (uint64_t)v53;
      *(&v83 - 2) = v59;
      NLTokenizer.enumerateTokens(in:using:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = &v113[v13];
      if (__OFADD__(v13, v113)) {
        break;
      }
      if (__OFADD__(*v102, v63)) {
        goto LABEL_48;
      }
      *v102 += v63;
      id v64 = [v111 entryDate];
      if (!v64)
      {
        a1 = *v109;
        uint64_t v68 = (uint64_t)v104;
        (*v109)(v104, 1, 1, v16);
        id v25 = v101;
        goto LABEL_32;
      }
      BOOL v65 = v64;
      uint64_t v105 = v7;
      uint64_t v7 = v17;
      uint64_t v66 = v107;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = v108;
      int v67 = *v108;
      uint64_t v68 = (uint64_t)v104;
      ((void (*)(char *, char *, uint64_t))*v108)(v104, v66, v16);
      a1 = *v109;
      (*v109)((char *)v68, 0, 1, v16);
      if ((*v106)(v68, 1, v16) == 1)
      {
        id v25 = v101;
        uint64_t v17 = v7;
        uint64_t v7 = v105;
LABEL_32:
        sub_10001457C(v68, (uint64_t *)&unk_1007FC470);
        goto LABEL_38;
      }
      a2 = v90;
      ((void (*)(char *, uint64_t, uint64_t))v67)(v90, v68, v16);
      uint64_t v69 = v95;
      uint64_t v70 = v96;
      (*(void (**)(char *, void, uint64_t))v94)(v95, v88, v96);
      char v71 = Calendar.isDate(_:equalTo:toGranularity:)();
      (*v93)(v69, v70);
      uint64_t v13 = v16;
      (*v92)(a2, v16);
      if (v71)
      {
        uint64_t v72 = v91[3];
        BOOL v73 = __OFADD__(v72, v63);
        uint64_t v74 = &v63[v72];
        id v25 = v101;
        if (v73) {
          goto LABEL_49;
        }
        uint64_t v17 = v7;
        v91[3] = v74;
        a2 = v86;
      }
      else
      {
        id v25 = v101;
        a2 = v86;
        uint64_t v17 = v7;
      }
      uint64_t v7 = v105;
LABEL_38:
      id v75 = [v111 entryDate];
      if (!v75)
      {
        a1((char *)v25, 1, 1, v16);
LABEL_13:

        sub_10001457C((uint64_t)v25, (uint64_t *)&unk_1007FC470);
        a1 = v100;
        goto LABEL_14;
      }
      uint64_t v76 = v75;
      uint64_t v77 = v107;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v78 = *v108;
      ((void (*)(id, char *, uint64_t))*v108)(v25, v77, v16);
      a1((char *)v25, 0, 1, v16);
      if ((*v106)((uint64_t)v25, 1, v16) == 1) {
        goto LABEL_13;
      }
      uint64_t v13 = (uint64_t)v89;
      ((void (*)(char *, id, uint64_t))v78)(v89, v25, v16);
      uint64_t v79 = v95;
      id v25 = (id)v96;
      (*(void (**)(char *, void, uint64_t))v94)(v95, v87, v96);
      char v80 = Calendar.isDate(_:equalTo:toGranularity:)();

      (*v93)(v79, (uint64_t)v25);
      (*v92)((void *)v13, v16);
      a1 = v100;
      if (v80)
      {
        uint64_t v81 = v91[4];
        BOOL v73 = __OFADD__(v81, v63);
        uint64_t v82 = &v63[v81];
        if (v73) {
          goto LABEL_50;
        }
        v91[4] = v82;
      }
LABEL_14:
      uint64_t v7 = (char **)((char *)v7 + 1);
      unint64_t v36 = v99;
      if ((char *)a1 == (char *)v7)
      {
        swift_bridgeObjectRelease();
        id v25 = v84;
        uint64_t v38 = v85;
        goto LABEL_46;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_46:
  [v38 reset];
}

void sub_10014ECD8(uint64_t a1, char *a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v225 = a6;
  uint64_t v224 = a5;
  uint64_t v240 = a3;
  uint64_t v237 = a2;
  uint64_t v238 = (char *)a1;
  uint64_t v241 = type metadata accessor for StreakSummary();
  __chkstk_darwin(v241);
  uint64_t v8 = (char *)&v196 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v207 = sub_100010218(&qword_1007F9F78);
  __chkstk_darwin(v207);
  uint64_t v206 = (uint64_t *)((char *)&v196 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v205 = sub_100010218(&qword_1007F9F88);
  uint64_t v200 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  uint64_t v208 = (char *)&v196 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v11 - 8);
  uint64_t v223 = (uint64_t)&v196 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v227 = (char *)&v196 - v14;
  __chkstk_darwin(v15);
  uint64_t v232 = (char *)&v196 - v16;
  __chkstk_darwin(v17);
  uint64_t v222 = (uint64_t)&v196 - v18;
  __chkstk_darwin(v19);
  uint64_t v226 = (char *)&v196 - v20;
  __chkstk_darwin(v21);
  Class v229 = (char *)&v196 - v22;
  __chkstk_darwin(v23);
  id v25 = (char *)&v196 - v24;
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(char **)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v221 = (char *)&v196 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v220 = (char *)&v196 - v30;
  __chkstk_darwin(v31);
  uint64_t v239 = (char *)&v196 - v32;
  __chkstk_darwin(v33);
  unint64_t v201 = (char *)&v196 - v34;
  __chkstk_darwin(v35);
  uint64_t v233 = (char *)&v196 - v36;
  __chkstk_darwin(v37);
  uint64_t v228 = (char *)&v196 - v38;
  uint64_t v203 = type metadata accessor for InsightsDataManager.Streaks(0);
  uint64_t v230 = a4;
  uint64_t v202 = swift_projectBox();
  id v39 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v40 = String._bridgeToObjectiveC()();
  id v235 = [v39 initWithEntityName:v40];

  uint64_t v236 = (unsigned int (*)(char *, char *, uint64_t))sub_100010218((uint64_t *)&unk_1007FA1C0);
  uint64_t v41 = swift_allocObject();
  long long v214 = xmmword_1006D6D20;
  *(_OWORD *)(v41 + 16) = xmmword_1006D6D20;
  if (qword_1007F7048 != -1) {
    swift_once();
  }
  uint64_t v234 = v25;
  uint64_t v209 = v27;
  uint64_t v243 = v26;
  id v204 = v8;
  id v42 = (void *)static NSPredicate.isNotDraftEntry;
  *(void *)(v41 + 32) = static NSPredicate.isNotDraftEntry;
  uint64_t v43 = qword_1007F7050;
  id v44 = v42;
  if (v43 != -1) {
    swift_once();
  }
  unint64_t v45 = (void *)static NSPredicate.isNotTipEntry;
  *(void *)(v41 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = static NSPredicate.isNotTipEntry;
  uint64_t v46 = sub_10001B284(0, (unint64_t *)&qword_100800A30);
  uint64_t v218 = (unsigned int (**)(char *, uint64_t, uint64_t))sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v47 = swift_allocObject();
  long long v216 = xmmword_1006D7C30;
  *(_OWORD *)(v47 + 16) = xmmword_1006D7C30;
  *(void *)(v47 + 56) = &type metadata for String;
  unint64_t v48 = sub_10001B2C0();
  *(void *)(v47 + 64) = v48;
  *(void *)(v47 + 32) = 0x4464657461657263;
  *(void *)(v47 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xEB00000000657461;
  id v49 = v45;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v213 = sub_10001B284(0, &qword_1007F9BF0);
  *(void *)(v47 + 96) = v213;
  uint64_t v51 = sub_10015D058((unint64_t *)&qword_1007F9BF8, &qword_1007F9BF0);
  *(void *)(v47 + 72) = isa;
  *(void *)(v47 + 136) = &type metadata for String;
  *(void *)(v47 + 144) = v48;
  NSString v217 = (objc_class *)v48;
  uint64_t v212 = v51;
  *(void *)(v47 + 104) = v51;
  *(void *)(v47 + 112) = 0x4464657461657263;
  *(void *)(v47 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xEB00000000657461;
  uint64_t v211 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))0x800000010068C8B0;
  *(void *)(v41 + 48) = NSPredicate.init(format:_:)();
  uint64_t v242 = (char *)v41;
  specialized Array._endMutation()();
  uint64_t v219 = (void (*)(char *, char *, uint64_t))v46;
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v53 = self;
  id v54 = [v53 andPredicateWithSubpredicates:v52];

  id v55 = v235;
  [v235 setPredicate:v54];

  uint64_t v56 = swift_allocObject();
  long long v210 = xmmword_1006D6D00;
  *(_OWORD *)(v56 + 16) = xmmword_1006D6D00;
  sub_10001B284(0, (unint64_t *)&qword_10080F990);
  swift_getKeyPath();
  *(void *)(v56 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t v242 = (char *)v56;
  specialized Array._endMutation()();
  Class v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v55 setSortDescriptors:v57];

  uint64_t v58 = sub_100010218((uint64_t *)&unk_1007FC0F0);
  uint64_t v59 = swift_allocObject();
  long long v215 = xmmword_1006D6280;
  *(_OWORD *)(v59 + 16) = xmmword_1006D6280;
  *(void *)(v59 + 56) = &type metadata for String;
  *(void *)(v59 + 32) = 0x4464657461657263;
  *(void *)(v59 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xEB00000000657461;
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v55 setPropertiesToFetch:v60];

  NSString v61 = (void *)type metadata accessor for JournalEntryMO();
  uint64_t v62 = v231;
  unint64_t v63 = NSManagedObjectContext.fetch<A>(_:)();
  if (v62) {
    goto LABEL_9;
  }
  char v196 = sub_1001417B8(v63, (SEL *)&selRef_createdDate);
  uint64_t v198 = 0;
  swift_bridgeObjectRelease();
  id v64 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v65 = String._bridgeToObjectiveC()();
  id v199 = [v64 initWithEntityName:v65];

  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = v214;
  int v67 = (void *)static NSPredicate.isNotDraftEntry;
  uint64_t v68 = (void *)static NSPredicate.isNotTipEntry;
  *(void *)(v66 + 32) = static NSPredicate.isNotDraftEntry;
  *(void *)(v66 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v68;
  uint64_t v69 = swift_allocObject();
  uint64_t v231 = v58;
  uint64_t v70 = (NSDate *)v69;
  *(_OWORD *)(v69 + 16) = v216;
  *(void *)(v69 + 56) = &type metadata for String;
  *(void *)&long long v214 = (char *)&type metadata for Any + 8;
  char v71 = v217;
  *(void *)(v69 + 64) = v217;
  *(void *)(v69 + 32) = 0x4464657461647075;
  id v197 = v61;
  *(void *)(v69 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xEB00000000657461;
  id v72 = v67;
  id v73 = v68;
  v74.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v75 = v212;
  v70[12].super.Class isa = (Class)v213;
  v70[13].super.Class isa = (Class)v75;
  v70[9].super.Class isa = v74.super.isa;
  v70[17].super.Class isa = (Class)&type metadata for String;
  v70[18].super.Class isa = v71;
  v70[14].super.Class isa = (Class)0x4464657461647075;
  v70[15].super.Class isa = (Class)0xEB00000000657461;
  *(void *)(v66 + 48) = NSPredicate.init(format:_:)();
  uint64_t v242 = (char *)v66;
  specialized Array._endMutation()();
  Class v76 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v77 = [v53 andPredicateWithSubpredicates:v76];

  id v78 = v199;
  [v199 setPredicate:v77];

  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = v210;
  swift_getKeyPath();
  *(void *)(v79 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t v242 = (char *)v79;
  specialized Array._endMutation()();
  Class v80 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v78 setSortDescriptors:v80];

  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = v215;
  *(void *)(v81 + 56) = &type metadata for String;
  *(void *)(v81 + 32) = 0x4464657461647075;
  *(void *)(v81 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xEB00000000657461;
  Class v82 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v78 setPropertiesToFetch:v82];

  uint64_t v83 = v198;
  unint64_t v84 = NSManagedObjectContext.fetch<A>(_:)();
  if (v83)
  {

    swift_bridgeObjectRelease();
    id v55 = v78;
LABEL_9:

    return;
  }
  uint64_t v85 = sub_1001417B8(v84, (SEL *)&selRef_updatedDate);
  swift_bridgeObjectRelease();
  id v86 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v87 = String._bridgeToObjectiveC()();
  id v88 = [v86 initWithEntityName:v87];

  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = v216;
  uint64_t v90 = v217;
  *(void *)(v89 + 56) = &type metadata for String;
  *(void *)(v89 + 64) = v90;
  *(void *)(v89 + 32) = 0x7079547465737361;
  *(void *)(v89 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE900000000000065;
  *(void *)(v89 + 96) = &type metadata for String;
  *(void *)(v89 + 104) = v90;
  *(void *)(v89 + 72) = 0x76456B6165727473;
  *(void *)(v89 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xEB00000000746E65;
  *(void *)(v89 + 136) = &type metadata for String;
  *(void *)(v89 + 144) = v90;
  strcpy((char *)(v89 + 112), "assetMetaData");
  *(_WORD *)(v89 + 126) = -4864;
  uint64_t v91 = NSPredicate.init(format:_:)();
  [v88 setPredicate:v91];

  uint64_t v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = v215;
  *(void *)(v92 + 56) = &type metadata for String;
  strcpy((char *)(v92 + 32), "assetMetaData");
  *(_WORD *)(v92 + 46) = -4864;
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v88 setPropertiesToFetch:v93];

  type metadata accessor for JournalEntryAssetMO();
  unint64_t v94 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v95 = v94;
  *(void *)&long long v210 = v85;
  uint64_t v198 = 0;
  if (v94 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v96 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v97 = v243;
  uint64_t v98 = v209;
  id v197 = v88;
  if (v96)
  {
    if (v96 < 1)
    {
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v99 = 0;
    uint64_t v219 = (void (*)(char *, char *, uint64_t))(v95 & 0xC000000000000001);
    *(void *)&long long v214 = v200 + 56;
    *(void *)&long long v215 = v209 + 16;
    uint64_t v218 = (unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 56);
    NSString v217 = (objc_class *)(v209 + 48);
    uint64_t v100 = _swiftEmptyArrayStorage;
    *(void *)&long long v216 = v209 + 32;
    long long v213 = xmmword_1006D6A80;
    uint64_t v101 = (uint64_t)v208;
    uint64_t v236 = (unsigned int (*)(char *, char *, uint64_t))v95;
    uint64_t v231 = v96;
    do
    {
      if (v219) {
        id v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v102 = *(id *)(v95 + 8 * v99 + 32);
      }
      unint64_t v103 = v102;
      uint64_t v104 = (char *)objc_allocWithZone((Class)_s16StreakEventAssetCMa(0));
      *(void *)&v104[OBJC_IVAR____TtCC7Journal10Journaling16StreakEventAsset_metadata] = 0;
      id v105 = v103;
      char v106 = (char *)sub_100180EC8(v105);
      uint64_t v107 = v106;
      uint64_t v108 = OBJC_IVAR____TtCC7Journal10Journaling16StreakEventAsset_metadata;
      if (*(void *)&v106[OBJC_IVAR____TtCC7Journal10Journaling16StreakEventAsset_metadata]) {
        goto LABEL_25;
      }
      uint64_t v109 = *(void **)&v106[OBJC_IVAR____TtCC7Journal10Journaling5Asset_assetMO];
      if (v109)
      {
        id v110 = [v109 assetMetaData];
        if (v110)
        {
          uint64_t v111 = v110;
          uint64_t v112 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v114 = v113;

          uint64_t v115 = v206;
          uint64_t *v206 = v112;
          v115[1] = v114;
          uint64_t v98 = v209;
          uint64_t v97 = v243;
          swift_storeEnumTagMultiPayload();
          sub_100010218(&qword_1007FFBC0);
          uint64_t v116 = swift_allocObject();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v214)(v116 + *(void *)(*(void *)v116 + 104), 1, 1, v205);
          *(_OWORD *)(v116 + *(void *)(*(void *)v116 + 112)) = v213;
          uint64_t v117 = (uint64_t)v115;
          uint64_t v101 = (uint64_t)v208;
          sub_10002C4EC(v117, v116 + *(void *)(*(void *)v116 + 120), &qword_1007F9F78);
          *(void *)&v107[v108] = v116;
          swift_release();
        }
      }
      if (*(void *)&v107[v108])
      {
LABEL_25:
        swift_retain();
        sub_10003C6EC(v101);

        swift_release();
      }
      else
      {
        uint64_t v126 = _s16StreakEventAssetC12MetadataTypeVMa(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v101, 1, 1, v126);
      }
      uint64_t v118 = _s16StreakEventAssetC12MetadataTypeVMa(0);
      int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 48))(v101, 1, v118);
      uint64_t v120 = (uint64_t)v234;
      if (v119 == 1)
      {
        sub_10001457C(v101, &qword_1007F9F88);
        uint64_t v121 = 1;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))v215)(v234, v101 + *(int *)(v118 + 20), v97);
        sub_1001546C4(v101, _s16StreakEventAssetC12MetadataTypeVMa);
        uint64_t v121 = 0;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v218)(v120, v121, 1, v97);

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v217)(v120, 1, v97) == 1)
      {
        sub_10001457C(v120, (uint64_t *)&unk_1007FC470);
      }
      else
      {
        uint64_t v122 = *(void (**)(uint64_t, char *, uint64_t))v216;
        Class v123 = v228;
        (*(void (**)(char *, uint64_t, uint64_t))v216)(v228, v120, v97);
        v122((uint64_t)v233, v123, v97);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v100 = (void *)sub_1002A5C50(0, v100[2] + 1, 1, (unint64_t)v100);
        }
        unint64_t v125 = v100[2];
        unint64_t v124 = v100[3];
        if (v125 >= v124 >> 1) {
          uint64_t v100 = (void *)sub_1002A5C50(v124 > 1, v125 + 1, 1, (unint64_t)v100);
        }
        v100[2] = v125 + 1;
        v122((uint64_t)v100+ ((v98[80] + 32) & ~(unint64_t)v98[80])+ *((void *)v98 + 9) * v125, v233, v97);
      }
      ++v99;
      unint64_t v95 = (unint64_t)v236;
    }
    while (v231 != v99);
  }
  else
  {
    uint64_t v100 = _swiftEmptyArrayStorage;
  }
  uint64_t v127 = swift_bridgeObjectRelease_n();
  __chkstk_darwin(v127);
  *(&v196 - 2) = v238;
  uint64_t v128 = v198;
  sub_1001CB420((uint64_t (*)(char *))sub_10015D8DC, (uint64_t)(&v196 - 4), (uint64_t)v100);
  uint64_t v130 = v129;
  uint64_t v131 = (int *)v241;
  *(void *)&long long v213 = swift_allocBox();
  uint64_t v133 = v132;
  uint64_t v134 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v98 + 7);
  v134(v132, 1, 1, v97);
  v134(v133 + v131[5], 1, 1, v97);
  v134(v133 + v131[6], 1, 1, v97);
  uint64_t v135 = v131[7];
  uint64_t v233 = (char *)v133;
  *(void *)(v133 + v135) = 0;
  uint64_t v212 = swift_allocBox();
  uint64_t v137 = v136;
  v134(v136, 1, 1, v97);
  v134(v137 + v131[5], 1, 1, v97);
  uint64_t v138 = v137 + v131[6];
  uint64_t v211 = v134;
  uint64_t v234 = v98 + 56;
  v134(v138, 1, 1, v97);
  uint64_t v139 = v131[7];
  uint64_t v231 = v137;
  *(void *)(v137 + v139) = 0;
  uint64_t v140 = v196;
  uint64_t v242 = v196;
  swift_bridgeObjectRetain();
  uint64_t v141 = v210;
  uint64_t v142 = swift_bridgeObjectRetain();
  sub_1000C8D80(v142);
  uint64_t v143 = swift_bridgeObjectRetain();
  sub_1000C8D80(v143);
  swift_bridgeObjectRetain();
  sub_10015496C((uint64_t *)&v242, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(uint64_t))sub_1000F3F44, (uint64_t (*)(void *))sub_100156030);
  if (v128)
  {
LABEL_62:
    swift_release();
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
  uint64_t v208 = v242;
  if (qword_1007F6A28 != -1) {
    swift_once();
  }
  uint64_t v144 = type metadata accessor for Logger();
  sub_100026A54(v144, (uint64_t)qword_1007FFA90);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v145 = Logger.logObject.getter();
  os_log_type_t v146 = static os_log_type_t.info.getter();
  BOOL v147 = os_log_type_enabled(v145, v146);
  uint64_t v198 = 0;
  if (v147)
  {
    uint64_t v148 = swift_slowAlloc();
    *(_DWORD *)uint64_t v148 = 134218496;
    uint64_t v149 = *((void *)v140 + 2);
    swift_bridgeObjectRelease();
    uint64_t v242 = (char *)v149;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v148 + 12) = 2048;
    uint64_t v150 = *(void *)(v141 + 16);
    swift_bridgeObjectRelease();
    uint64_t v242 = (char *)v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v148 + 22) = 2048;
    uint64_t v151 = *(void *)(v130 + 16);
    swift_bridgeObjectRelease();
    uint64_t v242 = (char *)v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v145, v146, "Creating streaks from %ld created, %ld updated, %ld event dates", (uint8_t *)v148, 0x20u);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v152 = v243;
  char v153 = v229;
  unint64_t v154 = v211;
  [v237 reset];
  uint64_t v155 = *((void *)v208 + 2);
  if (v155)
  {
    id v156 = v209;
    uint64_t v237 = &v208[(v156[80] + 32) & ~(unint64_t)v156[80]];
    swift_beginAccess();
    swift_beginAccess();
    BOOL v158 = (void (*)(char *, uint64_t, uint64_t))*((void *)v156 + 2);
    v156 += 16;
    uint64_t v157 = v158;
    *(void *)&long long v210 = *((void *)v156 + 7);
    uint64_t v159 = (unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 32);
    NSString v217 = (objc_class *)(v156 + 16);
    *(void *)&long long v216 = v156 - 8;
    uint64_t v228 = v156;
    uint64_t v218 = (unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 32);
    uint64_t v219 = (void (*)(char *, char *, uint64_t))v158;
    v158(v153, (uint64_t)v237, v152);
    while (1)
    {
      v154((uint64_t)v153, 0, 1, v152);
      uint64_t v167 = *v159;
      if ((*v159)(v153, 1, v152) == 1) {
        break;
      }
      *(void *)&long long v215 = v155;
      uint64_t v168 = (uint64_t)v239;
      uint64_t v236 = *(unsigned int (**)(char *, char *, uint64_t))v217;
      v236(v239, v153, v152);
      uint64_t v169 = v240;
      uint64_t v170 = v230;
      sub_100150F94(v168, v213, v240, v230);
      sub_100151E84(v168, v212, (uint64_t)v169, v170);
      uint64_t v171 = v222;
      sub_10001B220((uint64_t)v233, v222, (uint64_t *)&unk_1007FC470);
      uint64_t v172 = v220;
      v157(v220, v168, v152);
      *(void *)&long long v214 = v167;
      if (v167((char *)v171, 1, v152) == 1)
      {
        char v173 = v172;
        uint64_t v174 = (uint64_t)v226;
        v236(v226, v173, v152);
        sub_10001457C(v171, (uint64_t *)&unk_1007FC470);
      }
      else
      {
        (*(void (**)(char *, uint64_t))v216)(v172, v152);
        uint64_t v174 = (uint64_t)v226;
        v236(v226, (char *)v171, v152);
      }
      unint64_t v154 = v211;
      v211(v174, 0, 1, v152);
      uint64_t v175 = (uint64_t)v233;
      sub_100041190(v174, (uint64_t)v233, (uint64_t *)&unk_1007FC470);
      uint64_t v176 = v241;
      uint64_t v177 = v175 + *(int *)(v241 + 20);
      sub_10001457C(v177, (uint64_t *)&unk_1007FC470);
      unint64_t v178 = v239;
      char v179 = v219;
      v219((char *)v177, v239, v243);
      v154(v177, 0, 1, v243);
      uint64_t v180 = (uint64_t)v232;
      Calendar.date(byAdding:to:wrappingComponents:)();
      uint64_t v181 = *(int *)(v176 + 24);
      uint64_t v152 = v243;
      sub_100041190(v180, v175 + v181, (uint64_t *)&unk_1007FC470);
      uint64_t v182 = v223;
      sub_10001B220(v231, v223, (uint64_t *)&unk_1007FC470);
      uint64_t v183 = v221;
      v179(v221, v178, v152);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v214)(v182, 1, v152) == 1)
      {
        uint64_t v160 = v183;
        uint64_t v161 = (uint64_t)v227;
        v236(v227, v160, v152);
        sub_10001457C(v182, (uint64_t *)&unk_1007FC470);
      }
      else
      {
        (*(void (**)(char *, uint64_t))v216)(v183, v152);
        uint64_t v161 = (uint64_t)v227;
        v236(v227, (char *)v182, v152);
      }
      v154(v161, 0, 1, v152);
      uint64_t v162 = v231;
      sub_100041190(v161, v231, (uint64_t *)&unk_1007FC470);
      uint64_t v163 = v162 + *(int *)(v241 + 20);
      sub_10001457C(v163, (uint64_t *)&unk_1007FC470);
      unint64_t v164 = v239;
      uint64_t v165 = (void (*)(char *, uint64_t, uint64_t))v219;
      v219((char *)v163, v239, v152);
      v154(v163, 0, 1, v152);
      uint64_t v166 = (uint64_t)v232;
      Calendar.date(byAdding:to:wrappingComponents:)();
      (*(void (**)(char *, uint64_t))v216)(v164, v152);
      sub_100041190(v166, v162 + *(int *)(v241 + 24), (uint64_t *)&unk_1007FC470);
      uint64_t v157 = v165;
      v237 += v210;
      uint64_t v155 = v215 - 1;
      char v153 = v229;
      uint64_t v159 = v218;
      if ((void)v215 == 1) {
        goto LABEL_54;
      }
      v157(v229, (uint64_t)v237, v152);
    }
  }
  else
  {
LABEL_54:
    v154((uint64_t)v153, 1, 1, v152);
  }
  swift_release();
  uint64_t v184 = (uint64_t)v201;
  static Date.distantFuture.getter();
  uint64_t v185 = v240;
  uint64_t v186 = v230;
  sub_100150F94(v184, v213, v240, v230);
  unint64_t v187 = (void (*)(uint64_t, uint64_t))*((void *)v209 + 1);
  v187(v184, v152);
  static Date.distantFuture.getter();
  sub_100151E84(v184, v212, (uint64_t)v185, v186);
  v187(v184, v152);
  uint64_t v188 = v202;
  swift_beginAccess();
  uint64_t v189 = (uint64_t)v204;
  sub_1001545E0(v188, (uint64_t)v204, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  uint64_t v190 = (uint64_t)v238;
  LOBYTE(v187) = sub_10062888C((uint64_t)v238);
  sub_1001546C4(v189, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  uint64_t v191 = (int *)v203;
  if ((v187 & 1) == 0)
  {
    swift_beginAccess();
    sub_1001545E0(v188, v189, (uint64_t (*)(void))type metadata accessor for StreakSummary);
    swift_beginAccess();
    sub_10015D90C(v189, v188 + v191[6]);
    sub_1001546C4(v188, (uint64_t (*)(void))type metadata accessor for StreakSummary);
    v154(v188, 1, 1, v152);
    uint64_t v192 = v241;
    v154(v188 + *(int *)(v241 + 20), 1, 1, v152);
    v154(v188 + *(int *)(v192 + 24), 1, 1, v152);
    *(void *)(v188 + *(int *)(v192 + 28)) = 0;
  }
  swift_beginAccess();
  sub_1001545E0(v188 + v191[5], v189, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  char v193 = sub_10062888C(v190);

  sub_1001546C4(v189, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  if ((v193 & 1) == 0)
  {
    swift_beginAccess();
    sub_1001545E0(v188 + v191[5], v189, (uint64_t (*)(void))type metadata accessor for StreakSummary);
    swift_beginAccess();
    sub_10015D90C(v189, v188 + v191[7]);
    uint64_t v194 = v188 + v191[5];
    sub_1001546C4(v194, (uint64_t (*)(void))type metadata accessor for StreakSummary);
    v154(v194, 1, 1, v152);
    uint64_t v195 = v241;
    v154(v194 + *(int *)(v241 + 20), 1, 1, v152);
    v154(v194 + *(int *)(v195 + 24), 1, 1, v152);
    *(void *)(v194 + *(int *)(v195 + 28)) = 0;
  }
  swift_release();
  swift_release();
}

void sub_100150D9C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B220(a1, (uint64_t)v10, (uint64_t *)&unk_1007FC470);
  uint64_t v11 = *a2;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  [v11 *a5];
}

uint64_t sub_100150ED0@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

uint64_t sub_100150F94(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  uint64_t v120 = a1;
  uint64_t v121 = a4;
  uint64_t v114 = a3;
  uint64_t v4 = type metadata accessor for StreakSummary();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v105 = *(void *)(v7 - 8);
  uint64_t v106 = v7;
  __chkstk_darwin(v7);
  uint64_t v104 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DateComponents();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  uint64_t v113 = v10;
  __chkstk_darwin(v9);
  uint64_t v115 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v12 - 8);
  uint64_t v117 = (uint64_t)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v96 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v96 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v110 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v111 = (char *)&v96 - v24;
  __chkstk_darwin(v25);
  uint64_t v107 = (char *)&v96 - v26;
  __chkstk_darwin(v27);
  uint64_t v116 = (char *)&v96 - v28;
  __chkstk_darwin(v29);
  uint64_t v118 = (char *)&v96 - v30;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v96 - v32;
  uint64_t v34 = swift_projectBox();
  uint64_t v109 = type metadata accessor for InsightsDataManager.Streaks(0);
  uint64_t v108 = swift_projectBox();
  swift_beginAccess();
  int v119 = (int *)v4;
  uint64_t v35 = *(int *)(v4 + 24);
  uint64_t v121 = v34;
  sub_10001B220(v34 + v35, (uint64_t)v19, (uint64_t *)&unk_1007FC470);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v36(v19, 1, v20) == 1) {
    return sub_10001457C((uint64_t)v19, (uint64_t *)&unk_1007FC470);
  }
  unint64_t v103 = v6;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v38(v33, v19, v20);
  uint64_t v39 = v20;
  if ((static Date.< infix(_:_:)() & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v33, v20);
  }
  uint64_t v120 = v21;
  uint64_t v40 = v121;
  swift_beginAccess();
  sub_10001B220(v40, (uint64_t)v16, (uint64_t *)&unk_1007FC470);
  unsigned int v41 = v36(v16, 1, v39);
  id v102 = v33;
  if (v41 == 1)
  {
    sub_10001457C((uint64_t)v16, (uint64_t *)&unk_1007FC470);
    uint64_t v42 = (uint64_t)v103;
    uint64_t v43 = v119;
    uint64_t v44 = v120;
LABEL_21:
    uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
    v92(v42, 1, 1, v39);
    v92(v42 + v43[5], 1, 1, v39);
    v92(v42 + v43[6], 1, 1, v39);
    *(void *)(v42 + v43[7]) = 0;
    swift_beginAccess();
    sub_10015D90C(v42, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v102, v39);
  }
  unint64_t v45 = v118;
  v38(v118, v16, v39);
  swift_beginAccess();
  uint64_t v43 = v119;
  uint64_t v46 = v117;
  sub_10001B220(v40 + v119[5], v117, (uint64_t *)&unk_1007FC470);
  if (v36((char *)v46, 1, v39) == 1)
  {
    uint64_t v44 = v120;
    (*(void (**)(char *, uint64_t))(v120 + 8))(v45, v39);
    sub_10001457C(v46, (uint64_t *)&unk_1007FC470);
    uint64_t v42 = (uint64_t)v103;
    goto LABEL_21;
  }
  uint64_t v47 = v116;
  v38(v116, (char *)v46, v39);
  sub_100010218(&qword_1007FB058);
  uint64_t v48 = type metadata accessor for Calendar.Component();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v45;
  uint64_t v51 = *(void *)(v49 + 72);
  uint64_t v52 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v117 = v39;
  uint64_t v53 = (v52 + 32) & ~v52;
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_1006D6270;
  uint64_t v55 = v54 + v53;
  uint64_t v56 = *(void (**)(uint64_t, void, uint64_t))(v49 + 104);
  v56(v55, enum case for Calendar.Component.day(_:), v48);
  v56(v55 + v51, enum case for Calendar.Component.second(_:), v48);
  Class v57 = (char *)sub_1000F5AEC(v54);
  swift_setDeallocating();
  uint64_t v58 = v47;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v59 = v115;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  uint64_t v60 = DateComponents.day.getter();
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v113 + 8))(v59, v112);
    uint64_t v44 = v120;
    uint64_t v89 = *(void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v39 = v117;
    v89(v47, v117);
    v89(v50, v39);
    uint64_t v42 = (uint64_t)v103;
LABEL_20:
    uint64_t v40 = v121;
    goto LABEL_21;
  }
  uint64_t v62 = v60;
  uint64_t v63 = v117;
  uint64_t v64 = DateComponents.second.getter();
  uint64_t v42 = (uint64_t)v103;
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v113 + 8))(v59, v112);
    uint64_t v44 = v120;
    uint64_t v90 = *(void (**)(char *, uint64_t))(v120 + 8);
    uint64_t v91 = v58;
    uint64_t v39 = v63;
    v90(v91, v63);
LABEL_19:
    v90(v118, v63);
    goto LABEL_20;
  }
  BOOL v66 = v64 != 0;
  BOOL v67 = __OFADD__(v62, v66);
  uint64_t v68 = v62 + v66;
  if (v67)
  {
    __break(1u);
    goto LABEL_27;
  }
  Class v57 = v111;
  if (v68 < 2)
  {
    uint64_t v39 = v63;
    (*(void (**)(char *, uint64_t))(v113 + 8))(v59, v112);
    uint64_t v44 = v120;
    uint64_t v90 = *(void (**)(char *, uint64_t))(v120 + 8);
    v90(v116, v63);
    goto LABEL_19;
  }
  uint64_t v101 = v68;
  if (qword_1007F6A28 != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v69 = type metadata accessor for Logger();
  sub_100026A54(v69, (uint64_t)qword_1007FFA90);
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
  char v71 = v107;
  uint64_t v72 = v63;
  v70(v107, v118, v63);
  v70(v57, v116, v63);
  id v73 = v110;
  v70(v110, v102, v72);
  NSDate v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  int v76 = v75;
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v77 = swift_slowAlloc();
    int v98 = v76;
    uint64_t v78 = v77;
    uint64_t v99 = swift_slowAlloc();
    v122[0] = v99;
    *(_DWORD *)uint64_t v78 = 134218754;
    uint64_t v123 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v78 + 12) = 2080;
    uint64_t v114 = (void (*)(char *, uint64_t))(v78 + 14);
    uint64_t v79 = v104;
    static FormatStyle<>.iso8601.getter();
    uint64_t v100 = sub_10015D970(&qword_1007FFBC8, (void (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle);
    uint64_t v80 = v106;
    os_log_t v97 = v74;
    Date.formatted<A>(_:)();
    uint64_t v105 = *(void *)(v105 + 8);
    ((void (*)(char *, uint64_t))v105)(v79, v80);
    uint64_t v123 = sub_10011EA98(v123, v124, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v114 = *(void (**)(char *, uint64_t))(v120 + 8);
    v114(v71, v72);
    *(_WORD *)(v78 + 22) = 2080;
    uint64_t v107 = (char *)(v78 + 24);
    static FormatStyle<>.iso8601.getter();
    uint64_t v81 = v111;
    Date.formatted<A>(_:)();
    ((void (*)(char *, uint64_t))v105)(v79, v80);
    uint64_t v123 = sub_10011EA98(v123, v124, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v114(v81, v72);
    *(_WORD *)(v78 + 32) = 2080;
    uint64_t v111 = (char *)(v78 + 34);
    static FormatStyle<>.iso8601.getter();
    Class v82 = v110;
    Date.formatted<A>(_:)();
    ((void (*)(char *, uint64_t))v105)(v79, v80);
    uint64_t v123 = sub_10011EA98(v123, v124, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v83 = v101;
    swift_bridgeObjectRelease();
    unint64_t v84 = v114;
    v114(v82, v72);
    os_log_t v85 = v97;
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "Ending %ld day streak from %s to %s after %s", (uint8_t *)v78, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v112);
    v84(v116, v72);
    v84(v118, v72);
    uint64_t v43 = v119;
    uint64_t v86 = v121;
    uint64_t v88 = v108;
    uint64_t v87 = v109;
  }
  else
  {

    Class v93 = *(void (**)(char *, uint64_t))(v120 + 8);
    v93(v73, v72);
    v93(v57, v72);
    v93(v71, v72);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v112);
    v93(v116, v72);
    uint64_t v114 = v93;
    v93(v118, v72);
    uint64_t v86 = v121;
    uint64_t v88 = v108;
    uint64_t v87 = v109;
    uint64_t v83 = v101;
  }
  swift_beginAccess();
  *(void *)(v86 + v43[7]) = v83;
  swift_beginAccess();
  sub_1001545E0(v88, v42, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  swift_beginAccess();
  sub_10015D90C(v42, v88 + *(int *)(v87 + 24));
  swift_beginAccess();
  sub_1001545E0(v86, v42, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  swift_beginAccess();
  sub_10015D90C(v42, v88);
  swift_beginAccess();
  uint64_t v94 = *(void *)(v86 + v43[7]);
  swift_beginAccess();
  if (v94 >= *(void *)(v88 + *(int *)(v87 + 32) + v43[7]))
  {
    swift_beginAccess();
    sub_1001545E0(v86, v42, (uint64_t (*)(void))type metadata accessor for StreakSummary);
    swift_beginAccess();
    sub_10015D90C(v42, v88 + *(int *)(v87 + 32));
  }
  unint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56);
  v95(v42, 1, 1, v72);
  v95(v42 + v43[5], 1, 1, v72);
  v95(v42 + v43[6], 1, 1, v72);
  *(void *)(v42 + v43[7]) = 0;
  swift_beginAccess();
  sub_10015D90C(v42, v86);
  return ((uint64_t (*)(char *, uint64_t))v114)(v102, v72);
}

uint64_t sub_100151E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v122 = a1;
  uint64_t v123 = a4;
  uint64_t v116 = a3;
  uint64_t v4 = type metadata accessor for StreakSummary();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v107 = *(void *)(v7 - 8);
  uint64_t v108 = v7;
  __chkstk_darwin(v7);
  uint64_t v106 = (char *)v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DateComponents();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v114 = v9;
  uint64_t v115 = v10;
  __chkstk_darwin(v9);
  uint64_t v117 = (char *)v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v12 - 8);
  uint64_t v119 = (uint64_t)v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v99 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v99 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v113 = (char *)v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v112 = (char *)v99 - v24;
  __chkstk_darwin(v25);
  uint64_t v111 = (char *)v99 - v26;
  __chkstk_darwin(v27);
  uint64_t v118 = (char *)v99 - v28;
  __chkstk_darwin(v29);
  uint64_t v120 = (char *)v99 - v30;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)v99 - v32;
  uint64_t v34 = swift_projectBox();
  uint64_t v110 = type metadata accessor for InsightsDataManager.Streaks(0);
  uint64_t v109 = swift_projectBox();
  swift_beginAccess();
  uint64_t v121 = (int *)v4;
  uint64_t v35 = *(int *)(v4 + 24);
  uint64_t v123 = v34;
  sub_10001B220(v34 + v35, (uint64_t)v19, (uint64_t *)&unk_1007FC470);
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v36(v19, 1, v20) == 1) {
    return sub_10001457C((uint64_t)v19, (uint64_t *)&unk_1007FC470);
  }
  uint64_t v105 = v6;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v38(v33, v19, v20);
  uint64_t v39 = v20;
  if ((static Date.< infix(_:_:)() & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v33, v20);
  }
  uint64_t v122 = v21;
  uint64_t v40 = v123;
  swift_beginAccess();
  sub_10001B220(v40, (uint64_t)v16, (uint64_t *)&unk_1007FC470);
  unsigned int v41 = v36(v16, 1, v39);
  uint64_t v104 = v33;
  if (v41 == 1)
  {
    sub_10001457C((uint64_t)v16, (uint64_t *)&unk_1007FC470);
    uint64_t v42 = (uint64_t)v105;
    uint64_t v44 = v121;
    uint64_t v43 = v122;
LABEL_19:
    Class v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    v93(v42, 1, 1, v39);
    v93(v42 + v44[5], 1, 1, v39);
    v93(v42 + v44[6], 1, 1, v39);
    *(void *)(v42 + v44[7]) = 0;
    swift_beginAccess();
    sub_10015D90C(v42, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v104, v39);
  }
  unint64_t v45 = v120;
  v38(v120, v16, v39);
  swift_beginAccess();
  uint64_t v44 = v121;
  uint64_t v46 = v119;
  sub_10001B220(v40 + v121[5], v119, (uint64_t *)&unk_1007FC470);
  if (v36((char *)v46, 1, v39) == 1)
  {
    uint64_t v43 = v122;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v45, v39);
    sub_10001457C(v46, (uint64_t *)&unk_1007FC470);
    uint64_t v42 = (uint64_t)v105;
    goto LABEL_19;
  }
  uint64_t v47 = v118;
  v38(v118, (char *)v46, v39);
  sub_100010218(&qword_1007FB058);
  uint64_t v48 = type metadata accessor for Calendar.Component();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(void *)(v49 + 72);
  unint64_t v51 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_1006D6270;
  unint64_t v53 = v52 + v51;
  uint64_t v54 = v39;
  uint64_t v55 = *(void (**)(unint64_t, void, uint64_t))(v49 + 104);
  v55(v53, enum case for Calendar.Component.weekOfYear(_:), v48);
  unint64_t v56 = v53 + v50;
  Class v57 = v120;
  v55(v56, enum case for Calendar.Component.second(_:), v48);
  uint64_t v58 = (char *)sub_1000F5AEC(v52);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v59 = v117;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  uint64_t v60 = DateComponents.weekOfYear.getter();
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v59, v114);
    uint64_t v43 = v122;
    uint64_t v90 = *(void (**)(char *, uint64_t))(v122 + 8);
    v90(v47, v54);
    v90(v57, v54);
    uint64_t v39 = v54;
    uint64_t v42 = (uint64_t)v105;
    uint64_t v40 = v123;
    goto LABEL_19;
  }
  uint64_t v62 = v60;
  uint64_t v103 = v54;
  uint64_t v63 = DateComponents.second.getter();
  uint64_t v42 = (uint64_t)v105;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v59, v114);
    uint64_t v43 = v122;
    uint64_t v91 = *(void (**)(char *, uint64_t))(v122 + 8);
    uint64_t v39 = v103;
    v91(v47, v103);
    v91(v120, v39);
    uint64_t v40 = v123;
    goto LABEL_19;
  }
  BOOL v65 = v63 != 0;
  BOOL v66 = __OFADD__(v62, v65);
  uint64_t v67 = v62 + v65;
  uint64_t v39 = v103;
  uint64_t v40 = v123;
  if (v66)
  {
    __break(1u);
LABEL_25:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v58 = v112;
  Class v57 = v113;
  if (v67 < 2)
  {
    (*(void (**)(char *, uint64_t))(v115 + 8))(v59, v114);
    uint64_t v43 = v122;
    uint64_t v92 = *(void (**)(char *, uint64_t))(v122 + 8);
    v92(v118, v39);
    v92(v120, v39);
    goto LABEL_19;
  }
  uint64_t v119 = v67;
  if (qword_1007F6A28 != -1) {
    goto LABEL_25;
  }
LABEL_14:
  uint64_t v68 = type metadata accessor for Logger();
  sub_100026A54(v68, (uint64_t)qword_1007FFA90);
  uint64_t v69 = v122;
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
  v70(v111, v120, v39);
  v70(v58, v118, v39);
  v70(v57, v104, v39);
  char v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  int v73 = v72;
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v74 = swift_slowAlloc();
    int v101 = v73;
    uint64_t v75 = v74;
    uint64_t v102 = swift_slowAlloc();
    v124[0] = v102;
    *(_DWORD *)uint64_t v75 = 134218754;
    uint64_t v125 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v75 + 12) = 2080;
    v99[1] = v75 + 14;
    int v76 = v106;
    static FormatStyle<>.iso8601.getter();
    uint64_t v116 = sub_10015D970(&qword_1007FFBC8, (void (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle);
    uint64_t v77 = v108;
    os_log_t v100 = v71;
    uint64_t v78 = v111;
    Date.formatted<A>(_:)();
    uint64_t v107 = *(void *)(v107 + 8);
    ((void (*)(char *, uint64_t))v107)(v76, v77);
    uint64_t v125 = sub_10011EA98(v125, v126, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v79 = *(void (**)(char *, uint64_t))(v69 + 8);
    v79(v78, v39);
    *(_WORD *)(v75 + 22) = 2080;
    uint64_t v111 = (char *)(v75 + 24);
    static FormatStyle<>.iso8601.getter();
    uint64_t v80 = v112;
    Date.formatted<A>(_:)();
    ((void (*)(char *, uint64_t))v107)(v76, v77);
    uint64_t v125 = sub_10011EA98(v125, v126, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v79(v80, v103);
    *(_WORD *)(v75 + 32) = 2080;
    uint64_t v112 = (char *)(v75 + 34);
    static FormatStyle<>.iso8601.getter();
    uint64_t v81 = v113;
    Date.formatted<A>(_:)();
    ((void (*)(char *, uint64_t))v107)(v76, v77);
    uint64_t v125 = sub_10011EA98(v125, v126, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v82 = v119;
    swift_bridgeObjectRelease();
    uint64_t v83 = v81;
    uint64_t v84 = v103;
    v79(v83, v103);
    os_log_t v85 = v100;
    _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "Ending %ld week streak from %s to %s after %s", (uint8_t *)v75, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
    v79(v118, v84);
    uint64_t v86 = v84;
    uint64_t v87 = (uint64_t (*)(char *, uint64_t))v79;
    v79(v120, v86);
    uint64_t v44 = v121;
    uint64_t v89 = v109;
    uint64_t v88 = (int *)v110;
  }
  else
  {

    uint64_t v94 = *(void (**)(char *, uint64_t))(v69 + 8);
    v94(v57, v39);
    v94(v58, v39);
    v94(v111, v39);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
    v94(v118, v39);
    uint64_t v87 = (uint64_t (*)(char *, uint64_t))v94;
    v94(v120, v39);
    uint64_t v89 = v109;
    uint64_t v88 = (int *)v110;
    uint64_t v82 = v119;
  }
  uint64_t v95 = v123;
  swift_beginAccess();
  *(void *)(v95 + v44[7]) = v82;
  swift_beginAccess();
  sub_1001545E0(v89 + v88[5], v42, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  swift_beginAccess();
  sub_10015D90C(v42, v89 + v88[7]);
  swift_beginAccess();
  sub_1001545E0(v95, v42, (uint64_t (*)(void))type metadata accessor for StreakSummary);
  swift_beginAccess();
  sub_10015D90C(v42, v89 + v88[5]);
  swift_beginAccess();
  uint64_t v96 = *(void *)(v95 + v44[7]);
  swift_beginAccess();
  if (v96 >= *(void *)(v89 + v88[9] + v44[7]))
  {
    swift_beginAccess();
    sub_1001545E0(v95, v42, (uint64_t (*)(void))type metadata accessor for StreakSummary);
    swift_beginAccess();
    sub_10015D90C(v42, v89 + v88[9]);
  }
  os_log_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
  uint64_t v98 = v103;
  v97(v42, 1, 1, v103);
  v97(v42 + v44[5], 1, 1, v98);
  v97(v42 + v44[6], 1, 1, v98);
  *(void *)(v42 + v44[7]) = 0;
  swift_beginAccess();
  sub_10015D90C(v42, v95);
  return v87(v104, v98);
}

uint64_t sub_100152D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100010218(&qword_1007FC8B8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = (uint64_t *)(a1 + *(int *)(v5 + 56));
  sub_10001B220(a1, (uint64_t)&v19 - v9, &qword_1007FC8E0);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  uint64_t v16 = &v7[*(int *)(v5 + 56)];
  sub_10002C4EC((uint64_t)v10, (uint64_t)v7, &qword_1007FC8E0);
  *(void *)uint64_t v16 = v12;
  *((void *)v16 + 1) = v13;
  *((void *)v16 + 2) = v14;
  *((void *)v16 + 3) = v15;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16))(a2, v7, v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_10001457C((uint64_t)v7, &qword_1007FC8B8);
}

void sub_100152EE8(id *a1, uint64_t (*a2)@<X0>(uint64_t *@<X8>))
{
  uint64_t v125 = a1;
  unint64_t v124 = a2;
  uint64_t v2 = sub_100010218(&qword_1007F9F50);
  __chkstk_darwin(v2 - 8);
  uint64_t v109 = (char *)v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = _s10VisitAssetC9VisitDataVMa(0);
  uint64_t v118 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v117 = (uint64_t)v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v101 - v6;
  id v8 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithEntityName:v9];

  sub_10001B284(0, (unint64_t *)&qword_100800A30);
  sub_100010218((uint64_t *)&unk_100806070);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1006D70D0;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v12 = sub_10001B2C0();
  *(void *)(v11 + 32) = 0xD000000000000012;
  *(void *)(v11 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0x800000010068C870;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v12;
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 72) = 0xD000000000000018;
  *(void *)(v11 + 8sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0x800000010068C890;
  *(void *)(v11 + 136) = &type metadata for String;
  *(void *)(v11 + 144) = v12;
  *(void *)(v11 + 112) = 0x7079547465737361;
  *(void *)(v11 + 12sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE900000000000065;
  *(void *)(v11 + 176) = sub_100010218(&qword_100800A70);
  *(void *)(v11 + 184) = sub_100014488(&qword_1007FFB90, &qword_100800A70);
  *(void *)(v11 + 152) = &off_1007935E0;
  uint64_t v13 = NSPredicate.init(format:_:)();
  [v10 setPredicate:v13];

  [v10 setFetchBatchSize:200];
  sub_100010218((uint64_t *)&unk_1007FC0F0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1006D6270;
  *(void *)(v14 + 32) = 0x7079547465737361;
  *(void *)(v14 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = 0xE900000000000065;
  *(void *)(v14 + 88) = &type metadata for String;
  *(void *)(v14 + 56) = &type metadata for String;
  strcpy((char *)(v14 + 64), "assetMetaData");
  *(_WORD *)(v14 + 78) = -4864;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setPropertiesToFetch:isa];

  type metadata accessor for JournalEntryAssetMO();
  id v16 = v126;
  unint64_t v17 = NSManagedObjectContext.fetch<A>(_:)();
  if (v16)
  {

    return;
  }
  uint64_t v18 = v124;
  v101[2] = 0;
  id v102 = v10;
  uint64_t v116 = v7;
  unint64_t v113 = v17;
  if (v17 >> 62)
  {
LABEL_66:
    swift_bridgeObjectRetain();
    uint64_t v19 = (uint64_t (*)@<X0>(uint64_t *@<X8>))_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(uint64_t (**)@<X0>(uint64_t *@<X8>))((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v20 = (uint64_t)v109;
  uint64_t v22 = v117;
  uint64_t v21 = v118;
  uint64_t v23 = (uint64_t)v116;
  uint64_t v24 = v18;
  if (!v19)
  {

    swift_bridgeObjectRelease();
    os_log_t v100 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
LABEL_61:
    sub_10001ABB8((uint64_t)v100);
    sub_10001ABB8((uint64_t)v98);
    sub_10001ABB8((uint64_t)v99);
    sub_10001ABB8((uint64_t)v19);
    return;
  }
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  uint64_t v107 = 0;
  uint64_t v106 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v18 = 0;
  uint64_t v25 = 0;
  unint64_t v124 = 0;
  uint64_t v125 = (id *)((char *)v24 + 16);
  unint64_t v115 = v113 & 0xC000000000000001;
  unint64_t v111 = v113 + 32;
  uint64_t v112 = v113 & 0xFFFFFFFFFFFFFF8;
  uint64_t v108 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
  uint64_t v103 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56);
  uint64_t v114 = v19;
  while (1)
  {
    if (v115)
    {
      id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v27 = __OFADD__(v25, 1);
      uint64_t v25 = (uint64_t (*)@<X0>(uint64_t *@<X8>))((char *)v25 + 1);
      if (v27) {
        goto LABEL_62;
      }
    }
    else
    {
      if ((unint64_t)v25 >= *(void *)(v112 + 16)) {
        goto LABEL_65;
      }
      id v26 = *(id *)(v111 + 8 * (void)v25);
      BOOL v27 = __OFADD__(v25, 1);
      uint64_t v25 = (uint64_t (*)@<X0>(uint64_t *@<X8>))((char *)v25 + 1);
      if (v27)
      {
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
    }
    id v126 = v26;
    id v28 = [v26 assetType];
    if (v28)
    {
      uint64_t v29 = v28;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    int v30 = sub_100044D84();
    if (v30 == 21) {
      goto LABEL_29;
    }
    uint64_t v120 = v25;
    id v31 = v126;
    if (v30 == 8)
    {
      id v57 = [v126 assetMetaData];
      if (v57)
      {
        uint64_t v58 = v57;
        uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;

        uint64_t v62 = (void *)sub_10003FBA4();
        sub_100040DD0(v59, v61);
        if (v62 != (void *)1)
        {
          if (!v62) {
            uint64_t v62 = _swiftEmptyArrayStorage;
          }
          uint64_t v63 = v62[2];
          if (v63)
          {
            unint64_t v64 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
            v101[1] = v62;
            uint64_t v65 = (uint64_t)v62 + v64;
            uint64_t v119 = *(void *)(v21 + 72);
            do
            {
              sub_1001545E0(v65, v22, _s10VisitAssetC9VisitDataVMa);
              uint64_t v66 = sub_1006416B8(v22);
              if (v67)
              {
                uint64_t v68 = (void *)v66;
                uint64_t v69 = v67;
                uint64_t v70 = swift_allocObject();
                *(void *)(v70 + 16) = v69;
                sub_10001DFB8(v68);
                id v121 = v69;
                sub_10001ABB8((uint64_t)v122);
                uint64_t v122 = (id (*)())[v126 objectID];
                char v71 = v125;
                swift_beginAccess();
                uint64_t v72 = swift_allocObject();
                *(void *)(v72 + 16) = sub_10015F10C;
                *(void *)(v72 + 24) = v70;
                sub_10001ABB8((uint64_t)v124);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v127 = *v71;
                uint64_t v74 = v127;
                id *v71 = (id)0x8000000000000000;
                unint64_t v76 = sub_10001BBFC(v68);
                uint64_t v77 = v74[2];
                BOOL v78 = (v75 & 1) == 0;
                uint64_t v79 = v77 + v78;
                if (__OFADD__(v77, v78)) {
                  goto LABEL_63;
                }
                uint64_t v18 = v75;
                if (v74[3] >= v79)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_10054A4B8();
                    uint64_t v74 = v127;
                  }
                }
                else
                {
                  sub_100546E04(v79, isUniquelyReferenced_nonNull_native);
                  uint64_t v74 = v127;
                  unint64_t v80 = sub_10001BBFC(v68);
                  if ((v18 & 1) != (v81 & 1)) {
                    goto LABEL_69;
                  }
                  unint64_t v76 = v80;
                }
                uint64_t v82 = v125;
                *uint64_t v125 = v74;
                swift_bridgeObjectRelease();
                uint64_t v83 = *v82;
                uint64_t v84 = swift_bridgeObjectRetain();
                if ((v18 & 1) == 0)
                {
                  uint64_t v85 = (*(uint64_t (**)(uint64_t))(v72 + 16))(v84);
                  v83[(v76 >> 6) + 8] |= 1 << v76;
                  *(void *)(v83[6] + 8 * v76) = v68;
                  uint64_t v86 = (uint64_t *)(v83[7] + 16 * v76);
                  uint64_t *v86 = v85;
                  v86[1] = v87;
                  uint64_t v88 = v83[2];
                  BOOL v27 = __OFADD__(v88, 1);
                  uint64_t v89 = v88 + 1;
                  if (v27) {
                    goto LABEL_64;
                  }
                  v83[2] = v89;
                  sub_10001DFB8(v68);
                }
                swift_bridgeObjectRelease();
                sub_10054C390(&v127, v122);
                swift_endAccess();

                sub_10001DFA8(v68);
                sub_10001DFA8(v68);

                uint64_t v22 = v117;
                sub_1001546C4(v117, _s10VisitAssetC9VisitDataVMa);
                uint64_t v123 = v72;
                unint64_t v124 = sub_10015D1A0;
                uint64_t v122 = sub_10015F10C;
                uint64_t v18 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v70;
                uint64_t v21 = v118;
                uint64_t v23 = (uint64_t)v116;
                uint64_t v25 = v120;
              }
              else
              {
                sub_1001546C4(v22, _s10VisitAssetC9VisitDataVMa);
              }
              v65 += v119;
              --v63;
            }
            while (v63);
          }

          swift_bridgeObjectRelease();
          uint64_t v20 = (uint64_t)v109;
          goto LABEL_8;
        }
LABEL_29:

        goto LABEL_8;
      }
LABEL_7:

      goto LABEL_8;
    }
    if (v30 != 7) {
      goto LABEL_7;
    }
    id v32 = [v126 assetMetaData];
    if (!v32)
    {
      (*v103)(v20, 1, 1, v110);
LABEL_31:

      sub_10001457C(v20, &qword_1007F9F50);
      goto LABEL_8;
    }
    uint64_t v33 = v32;
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    sub_100040778(v20);
    uint64_t v37 = v34;
    id v31 = v126;
    sub_100040DD0(v37, v36);
    if ((*v108)(v20, 1, v110) == 1) {
      goto LABEL_31;
    }
    sub_10015DC8C(v20, v23, _s10VisitAssetC9VisitDataVMa);
    uint64_t v38 = sub_1006416B8(v23);
    if (!v39)
    {
      sub_1001546C4(v23, _s10VisitAssetC9VisitDataVMa);

      goto LABEL_8;
    }
    uint64_t v40 = (void *)v38;
    unsigned int v41 = v39;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v41;
    sub_10001DFB8(v40);
    id v121 = v41;
    sub_10001ABB8((uint64_t)v105);
    id v43 = [v31 objectID];
    uint64_t v44 = v125;
    swift_beginAccess();
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = sub_10015D1A4;
    *(void *)(v45 + 24) = v42;
    uint64_t v46 = v42;
    sub_10001ABB8((uint64_t)v107);
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v127 = *v44;
    uint64_t v48 = v127;
    *uint64_t v44 = (id)0x8000000000000000;
    unint64_t v50 = sub_10001BBFC(v40);
    uint64_t v51 = v48[2];
    BOOL v52 = (v49 & 1) == 0;
    uint64_t v53 = v51 + v52;
    if (__OFADD__(v51, v52)) {
      break;
    }
    char v54 = v49;
    if (v48[3] >= v53)
    {
      if ((v47 & 1) == 0)
      {
        sub_10054A4B8();
        uint64_t v48 = v127;
      }
    }
    else
    {
      sub_100546E04(v53, v47);
      uint64_t v48 = v127;
      unint64_t v55 = sub_10001BBFC(v40);
      if ((v54 & 1) != (v56 & 1)) {
        goto LABEL_69;
      }
      unint64_t v50 = v55;
    }
    uint64_t v90 = v125;
    *uint64_t v125 = v48;
    swift_bridgeObjectRelease();
    uint64_t v91 = *v90;
    uint64_t v92 = swift_bridgeObjectRetain();
    if ((v54 & 1) == 0)
    {
      uint64_t v93 = (*(uint64_t (**)(uint64_t))(v45 + 16))(v92);
      v91[(v50 >> 6) + 8] |= 1 << v50;
      *(void *)(v91[6] + 8 * v5sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v40;
      uint64_t v94 = (uint64_t *)(v91[7] + 16 * v50);
      *uint64_t v94 = v93;
      v94[1] = v95;
      uint64_t v96 = v91[2];
      BOOL v27 = __OFADD__(v96, 1);
      uint64_t v97 = v96 + 1;
      if (v27) {
        goto LABEL_68;
      }
      v91[2] = v97;
      sub_10001DFB8(v40);
    }
    swift_bridgeObjectRelease();
    sub_10054C390(&v127, v43);
    swift_endAccess();

    sub_10001DFA8(v40);
    sub_10001DFA8(v40);

    uint64_t v23 = (uint64_t)v116;
    sub_1001546C4((uint64_t)v116, _s10VisitAssetC9VisitDataVMa);
    uint64_t v107 = sub_10015D1A0;
    uint64_t v105 = sub_10015D1A4;
    uint64_t v104 = v46;
    uint64_t v106 = v45;
    uint64_t v20 = (uint64_t)v109;
    uint64_t v22 = v117;
    uint64_t v21 = v118;
    uint64_t v25 = v120;
LABEL_8:
    if (v25 == v114)
    {

      swift_bridgeObjectRelease();
      uint64_t v19 = v124;
      uint64_t v98 = v107;
      uint64_t v99 = v122;
      os_log_t v100 = v105;
      goto LABEL_61;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

id sub_100153BC8(void *a1)
{
  id v1 = a1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    sub_1000F8A58((unint64_t)_swiftEmptyArrayStorage);
  }
  return v1;
}

uint64_t sub_100153C30()
{
  uint64_t v1 = sub_100010218((uint64_t *)&unk_1007FF080);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v9 = v0;
  sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v0 + OBJC_IVAR____TtC7Journal19InsightsDataManager__byEntryDate;
  swift_beginAccess();
  sub_10001B220(v4, (uint64_t)v3, (uint64_t *)&unk_1007FF080);
  uint64_t v5 = sub_1001424C8((uint64_t)v3);
  sub_10001457C((uint64_t)v3, (uint64_t *)&unk_1007FF080);
  uint64_t v8 = v5;
  swift_bridgeObjectRetain();
  sub_100154A30(&v8);
  swift_bridgeObjectRelease();
  sub_100010218(&qword_100800A70);
  sub_100014488((unint64_t *)&qword_1007F9100, &qword_100800A70);
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)();
  swift_release();
  return v6;
}

uint64_t sub_100153E0C()
{
  uint64_t v1 = sub_100010218((uint64_t *)&unk_1007FF080);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v10 = v0;
  sub_10015D970((unint64_t *)&qword_1007FA9D8, (void (*)(uint64_t))type metadata accessor for InsightsDataManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v0 + OBJC_IVAR____TtC7Journal19InsightsDataManager__byEntryDate;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  sub_10001B220(v4 + *(int *)(v5 + 24), (uint64_t)v3, (uint64_t *)&unk_1007FF080);
  uint64_t v6 = sub_100142910((uint64_t)v3);
  sub_10001457C((uint64_t)v3, (uint64_t *)&unk_1007FF080);
  uint64_t v9 = v6;
  swift_bridgeObjectRetain();
  sub_100154A30(&v9);
  swift_bridgeObjectRelease();
  sub_100010218(&qword_100800A70);
  sub_100014488((unint64_t *)&qword_1007F9100, &qword_100800A70);
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
  swift_release();
  return v7;
}

uint64_t sub_100153FFC(uint64_t a1)
{
  return sub_1001432F0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100154004()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10015403C()
{
  uint64_t v1 = sub_100010218(&qword_1007FFAC0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100154128(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100010218(&qword_1007FFAC0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10002C194;
  return sub_1001452A8(a1, v6, v7, v8, v9);
}

uint64_t sub_100154250()
{
  return sub_10046AE1C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100154274(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100052588;
  return sub_1001471F0(a1, v5, v4);
}

uint64_t sub_100154320(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_100052588;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_100148854, 0, 0);
}

uint64_t sub_1001543D4(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100052588;
  return sub_100149C5C(a1, v5, v4);
}

uint64_t sub_100154480(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = sub_100052588;
  return _swift_task_switch(sub_10014A478, 0, 0);
}

uint64_t sub_10015452C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100052588;
  return sub_10014A884(a1, v4, v5, v6);
}

uint64_t sub_1001545E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100154650()
{
  return sub_100154758(sub_10046A004);
}

uint64_t sub_100154684()
{
  return sub_10046A1F0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001546A8()
{
  return sub_10046A570(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001546C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10015472C()
{
  return sub_100154758(sub_10046A8D0);
}

uint64_t sub_100154758(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10015478C()
{
  return sub_10046AB98(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001547A8(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100154874;
  return v4();
}

uint64_t sub_100154874()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10015496C(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(a2(0) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

Swift::Int sub_100154A30(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000F3FE4(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_100156BF0(v5);
  *a1 = v2;
  return result;
}

void sub_100154A9C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v135 = type metadata accessor for InsightsDataManager.TopAssetCategory(0);
  uint64_t v4 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  uint64_t v125 = (uint64_t)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v136 = (uint64_t)&v120 - v7;
  __chkstk_darwin(v8);
  uint64_t v132 = (uint64_t)&v120 - v9;
  __chkstk_darwin(v10);
  uint64_t v133 = (uint64_t)&v120 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if (v12 < 0) {
      goto LABEL_138;
    }
    if (v12) {
      sub_1001572DC(0, v12, 1, a1);
    }
    return;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_146;
  }
  Swift::Int v121 = v13;
  uint64_t v129 = v4;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)_swiftEmptyArrayStorage;
    unint64_t v127 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v120 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
LABEL_104:
      unint64_t v113 = v18;
      if (v20 >= 2)
      {
        uint64_t v114 = *a1;
        do
        {
          unint64_t v115 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_133;
          }
          if (!v114) {
            goto LABEL_145;
          }
          uint64_t v116 = *(void *)&v113[16 * v115 + 32];
          uint64_t v117 = *(void *)&v113[16 * v20 + 24];
          sub_100157C7C(v114 + *(void *)(v129 + 72) * v116, v114 + *(void *)(v129 + 72) * *(void *)&v113[16 * v20 + 16], v114 + *(void *)(v129 + 72) * v117, v127);
          if (v2) {
            break;
          }
          if (v117 < v116) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v113 = sub_1000F1E40((uint64_t)v113);
          }
          if (v115 >= *((void *)v113 + 2)) {
            goto LABEL_135;
          }
          uint64_t v118 = &v113[16 * v115 + 32];
          *(void *)uint64_t v118 = v116;
          *((void *)v118 + 1) = v117;
          unint64_t v119 = *((void *)v113 + 2);
          if (v20 > v119) {
            goto LABEL_136;
          }
          memmove(&v113[16 * v20 + 16], &v113[16 * v20 + 32], 16 * (v119 - v20));
          *((void *)v113 + 2) = v119 - 1;
          unint64_t v20 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v120[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v120 = (void *)v16;
    unint64_t v127 = v16 + ((v17 + 32) & ~v17);
  }
  Swift::Int v19 = 0;
  uint64_t v18 = (char *)_swiftEmptyArrayStorage;
  uint64_t v128 = a1;
  while (1)
  {
    Swift::Int v21 = v19;
    Swift::Int v22 = v19 + 1;
    Swift::Int v126 = v19;
    if (v19 + 1 >= v12)
    {
      Swift::Int v30 = v19 + 1;
    }
    else
    {
      uint64_t v23 = *a1;
      uint64_t v24 = *(void *)(v129 + 72);
      uint64_t v25 = *a1 + v24 * v22;
      uint64_t v138 = v24;
      sub_1001545E0(v25, v133, type metadata accessor for InsightsDataManager.TopAssetCategory);
      Swift::Int v137 = v12;
      uint64_t v26 = v132;
      sub_1001545E0(v23 + v24 * v21, v132, type metadata accessor for InsightsDataManager.TopAssetCategory);
      uint64_t v27 = *(int *)(v135 + 24);
      uint64_t v28 = v133;
      Swift::Int v134 = *(void *)(v133 + v27);
      Swift::Int v131 = *(void *)(v26 + v27);
      uint64_t v29 = v26;
      Swift::Int v12 = v137;
      sub_1001546C4(v29, type metadata accessor for InsightsDataManager.TopAssetCategory);
      sub_1001546C4(v28, type metadata accessor for InsightsDataManager.TopAssetCategory);
      Swift::Int v30 = v21 + 2;
      uint64_t v130 = v23;
      if (v21 + 2 < v12)
      {
        uint64_t v122 = v18;
        uint64_t v123 = v2;
        uint64_t v31 = v138 * v22;
        uint64_t v32 = v23;
        Swift::Int v33 = v138 * v30;
        while (1)
        {
          Swift::Int v34 = v30;
          uint64_t v35 = v133;
          int v36 = v131 < v134;
          sub_1001545E0(v32 + v33, v133, type metadata accessor for InsightsDataManager.TopAssetCategory);
          uint64_t v37 = v132;
          sub_1001545E0(v32 + v31, v132, type metadata accessor for InsightsDataManager.TopAssetCategory);
          int v38 = *(void *)(v37 + *(int *)(v135 + 24)) >= *(void *)(v35 + *(int *)(v135 + 24));
          sub_1001546C4(v37, type metadata accessor for InsightsDataManager.TopAssetCategory);
          sub_1001546C4(v35, type metadata accessor for InsightsDataManager.TopAssetCategory);
          if (v36 == v38) {
            break;
          }
          ++v30;
          v32 += v138;
          if (v137 == v34 + 1)
          {
            Swift::Int v12 = v137;
            Swift::Int v30 = v137;
            a1 = v128;
            uint64_t v18 = v122;
            uint64_t v2 = v123;
            goto LABEL_23;
          }
        }
        a1 = v128;
        uint64_t v18 = v122;
        uint64_t v2 = v123;
        Swift::Int v12 = v137;
LABEL_23:
        uint64_t v23 = v130;
      }
      Swift::Int v21 = v126;
      if (v131 < v134)
      {
        if (v30 < v126) {
          goto LABEL_139;
        }
        if (v126 < v30)
        {
          uint64_t v122 = v18;
          uint64_t v123 = v2;
          uint64_t v39 = 0;
          uint64_t v40 = v138;
          uint64_t v41 = v138 * (v30 - 1);
          Swift::Int v42 = v30 * v138;
          Swift::Int v43 = v126;
          uint64_t v44 = v126 * v138;
          do
          {
            if (v43 != v30 + v39 - 1)
            {
              if (!v23) {
                goto LABEL_144;
              }
              sub_10015DC8C(v23 + v44, v125, type metadata accessor for InsightsDataManager.TopAssetCategory);
              if (v44 < v41 || v23 + v44 >= (unint64_t)(v23 + v42))
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v44 != v41)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_10015DC8C(v125, v23 + v41, type metadata accessor for InsightsDataManager.TopAssetCategory);
              uint64_t v23 = v130;
              uint64_t v40 = v138;
            }
            ++v43;
            --v39;
            v41 -= v40;
            v42 -= v40;
            v44 += v40;
          }
          while (v43 < v30 + v39);
          uint64_t v18 = v122;
          uint64_t v2 = v123;
          a1 = v128;
          Swift::Int v21 = v126;
          Swift::Int v12 = v137;
        }
      }
    }
    if (v30 < v12)
    {
      if (__OFSUB__(v30, v21)) {
        goto LABEL_137;
      }
      if (v30 - v21 < v121) {
        break;
      }
    }
LABEL_56:
    if (v30 < v21) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v134 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_1000F1750(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v63 = *((void *)v18 + 2);
    unint64_t v62 = *((void *)v18 + 3);
    unint64_t v20 = v63 + 1;
    if (v63 >= v62 >> 1) {
      uint64_t v18 = sub_1000F1750((char *)(v62 > 1), v63 + 1, 1, v18);
    }
    *((void *)v18 + 2) = v20;
    unint64_t v64 = v18 + 32;
    uint64_t v65 = &v18[16 * v63 + 32];
    Swift::Int v66 = v134;
    *(void *)uint64_t v65 = v21;
    *((void *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        unint64_t v67 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v72 = &v64[16 * v20];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          BOOL v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_121;
          }
          uint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          BOOL v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          char v71 = v78;
          if (v78) {
            goto LABEL_122;
          }
          unint64_t v79 = v20 - 2;
          unint64_t v80 = &v64[16 * v20 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          BOOL v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_124;
          }
          BOOL v78 = __OFADD__(v70, v83);
          uint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_127;
          }
          if (v84 >= v75)
          {
            id v102 = &v64[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_131;
            }
            BOOL v95 = v70 < v105;
            goto LABEL_93;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v96 = *((void *)v18 + 4);
            uint64_t v97 = *((void *)v18 + 5);
            BOOL v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            char v90 = v78;
            goto LABEL_87;
          }
          uint64_t v69 = *((void *)v18 + 4);
          uint64_t v68 = *((void *)v18 + 5);
          BOOL v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          char v71 = v78;
        }
        if (v71) {
          goto LABEL_123;
        }
        unint64_t v79 = v20 - 2;
        uint64_t v85 = &v64[16 * v20 - 32];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        char v90 = v88;
        if (v88) {
          goto LABEL_126;
        }
        uint64_t v91 = &v64[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_129;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_130;
        }
        if (v89 + v94 >= v70)
        {
          BOOL v95 = v70 < v94;
LABEL_93:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_95;
        }
LABEL_87:
        if (v90) {
          goto LABEL_125;
        }
        uint64_t v98 = &v64[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_128;
        }
        if (v101 < v89) {
          goto LABEL_14;
        }
LABEL_95:
        unint64_t v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!*v128) {
          goto LABEL_143;
        }
        uint64_t v107 = v18;
        uint64_t v108 = &v64[16 * v106];
        uint64_t v109 = *(void *)v108;
        uint64_t v110 = &v64[16 * v67];
        uint64_t v111 = *((void *)v110 + 1);
        sub_100157C7C(*v128 + *(void *)(v129 + 72) * *(void *)v108, *v128 + *(void *)(v129 + 72) * *(void *)v110, *v128 + *(void *)(v129 + 72) * v111, v127);
        if (v2) {
          goto LABEL_115;
        }
        if (v111 < v109) {
          goto LABEL_118;
        }
        if (v67 > *((void *)v107 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v108 = v109;
        *(void *)&v64[16 * v106 + 8] = v111;
        unint64_t v112 = *((void *)v107 + 2);
        if (v67 >= v112) {
          goto LABEL_120;
        }
        uint64_t v18 = v107;
        unint64_t v20 = v112 - 1;
        memmove(&v64[16 * v67], v110 + 16, 16 * (v112 - 1 - v67));
        *((void *)v107 + 2) = v112 - 1;
        if (v112 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    a1 = v128;
    Swift::Int v12 = v128[1];
    Swift::Int v19 = v134;
    if (v134 >= v12) {
      goto LABEL_104;
    }
  }
  if (__OFADD__(v21, v121)) {
    goto LABEL_140;
  }
  if (v21 + v121 >= v12) {
    Swift::Int v45 = v12;
  }
  else {
    Swift::Int v45 = v21 + v121;
  }
  if (v45 >= v21)
  {
    if (v30 != v45)
    {
      uint64_t v122 = v18;
      uint64_t v123 = v2;
      uint64_t v46 = *(void *)(v129 + 72);
      uint64_t v47 = v46 * (v30 - 1);
      uint64_t v130 = v46;
      Swift::Int v48 = v30 * v46;
      Swift::Int v124 = v45;
      do
      {
        uint64_t v50 = 0;
        Swift::Int v134 = v30;
        Swift::Int v131 = v48;
        while (1)
        {
          Swift::Int v137 = v21;
          uint64_t v51 = *a1;
          uint64_t v52 = v48 + v50 + *a1;
          uint64_t v53 = v133;
          sub_1001545E0(v52, v133, type metadata accessor for InsightsDataManager.TopAssetCategory);
          uint64_t v54 = v47;
          uint64_t v55 = v47 + v50 + v51;
          uint64_t v56 = v132;
          sub_1001545E0(v55, v132, type metadata accessor for InsightsDataManager.TopAssetCategory);
          uint64_t v57 = *(int *)(v135 + 24);
          uint64_t v138 = *(void *)(v53 + v57);
          uint64_t v58 = *(void *)(v56 + v57);
          sub_1001546C4(v56, type metadata accessor for InsightsDataManager.TopAssetCategory);
          sub_1001546C4(v53, type metadata accessor for InsightsDataManager.TopAssetCategory);
          if (v58 >= v138) {
            break;
          }
          uint64_t v59 = *a1;
          if (!*a1) {
            goto LABEL_142;
          }
          Swift::Int v48 = v131;
          uint64_t v47 = v54;
          uint64_t v60 = v59 + v54 + v50;
          sub_10015DC8C(v59 + v131 + v50, v136, type metadata accessor for InsightsDataManager.TopAssetCategory);
          swift_arrayInitWithTakeFrontToBack();
          sub_10015DC8C(v136, v60, type metadata accessor for InsightsDataManager.TopAssetCategory);
          v50 -= v130;
          Swift::Int v21 = v137 + 1;
          Swift::Int v49 = v134;
          if (v134 == v137 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v49 = v134;
        uint64_t v47 = v54;
        Swift::Int v48 = v131;
LABEL_49:
        Swift::Int v30 = v49 + 1;
        v47 += v130;
        v48 += v130;
        Swift::Int v21 = v126;
      }
      while (v30 != v124);
      Swift::Int v30 = v124;
      uint64_t v18 = v122;
      uint64_t v2 = v123;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_10015554C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::Int v134 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v149 = (char *)&v129 - v8;
  __chkstk_darwin(v9);
  uint64_t v144 = (char *)&v129 - v10;
  __chkstk_darwin(v11);
  uint64_t v145 = (char *)&v129 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_138;
    }
    if (v13) {
      sub_1001575A0(0, v13, 1, a1);
    }
    return;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_146;
  }
  uint64_t v147 = v4;
  Swift::Int v130 = v14;
  Swift::Int v137 = (void *)v5;
  if (v13 < 2)
  {
    Swift::Int v19 = (char *)_swiftEmptyArrayStorage;
    unint64_t v136 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v129 = _swiftEmptyArrayStorage;
    if (v13 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v21 >= 2)
      {
        uint64_t v123 = *a1;
        do
        {
          unint64_t v124 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_133;
          }
          if (!v123) {
            goto LABEL_145;
          }
          uint64_t v125 = *(void *)&v19[16 * v124 + 32];
          uint64_t v126 = *(void *)&v19[16 * v21 + 24];
          sub_1001581E0(v123 + v137[9] * v125, v123 + v137[9] * *(void *)&v19[16 * v21 + 16], v123 + v137[9] * v126, v136);
          if (v2) {
            break;
          }
          if (v126 < v125) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::Int v19 = sub_1000F1E40((uint64_t)v19);
          }
          if (v124 >= *((void *)v19 + 2)) {
            goto LABEL_135;
          }
          unint64_t v127 = &v19[16 * v124 + 32];
          *(void *)unint64_t v127 = v125;
          *((void *)v127 + 1) = v126;
          unint64_t v128 = *((void *)v19 + 2);
          if (v21 > v128) {
            goto LABEL_136;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v128 - v21));
          *((void *)v19 + 2) = v128 - 1;
          unint64_t v21 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v129[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v129 = (void *)v17;
    unint64_t v136 = v17 + v18;
  }
  unint64_t v20 = 0;
  uint64_t v142 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v143 = v5 + 16;
  uint64_t v152 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  Swift::Int v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v148 = a1;
  while (1)
  {
    Swift::Int v22 = v20 + 1;
    uint64_t v135 = v20;
    if ((uint64_t)(v20 + 1) >= v13)
    {
      Swift::Int v33 = (void (*)(void, void, void))v20;
      Swift::Int v35 = (Swift::Int)(v20 + 1);
      a1 = v148;
    }
    else
    {
      uint64_t v23 = v147;
      Swift::Int v24 = *v148;
      uint64_t v25 = v137[9];
      uint64_t v26 = *v148 + v25 * (void)v22;
      uint64_t v151 = v25;
      Swift::Int v140 = v24;
      uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v137[2];
      v27(v145, v26, v147);
      Swift::Int v150 = v13;
      uint64_t v28 = v144;
      v27(v144, v24 + v25 * (void)v135, v23);
      uint64_t v29 = v145;
      LODWORD(v146) = static Date.> infix(_:_:)();
      Swift::Int v30 = (void (*)(char *, uint64_t))v137[1];
      uint64_t v31 = v28;
      Swift::Int v13 = v150;
      v30(v31, v23);
      uint64_t v32 = v23;
      Swift::Int v33 = (void (*)(void, void, void))v135;
      v30(v29, v32);
      uint64_t v34 = v151;
      Swift::Int v35 = (Swift::Int)v33 + 2;
      if ((uint64_t)v33 + 2 < v13)
      {
        Swift::Int v131 = v19;
        uint64_t v132 = v2;
        uint64_t v141 = v151 * (void)v22;
        Swift::Int v36 = v140;
        Swift::Int v37 = v151 * v35;
        while (1)
        {
          Swift::Int v38 = v35;
          uint64_t v39 = v145;
          uint64_t v40 = v147;
          v27(v145, v36 + v37, v147);
          uint64_t v41 = v144;
          v27(v144, v36 + v141, v40);
          int v42 = static Date.> infix(_:_:)();
          v30(v41, v40);
          v30(v39, v40);
          if ((v146 ^ v42)) {
            break;
          }
          Swift::Int v35 = v38 + 1;
          uint64_t v34 = v151;
          v36 += v151;
          if (v150 == v38 + 1)
          {
            Swift::Int v13 = v150;
            Swift::Int v35 = v150;
            Swift::Int v19 = v131;
            uint64_t v2 = v132;
            Swift::Int v33 = (void (*)(void, void, void))v135;
            goto LABEL_23;
          }
        }
        Swift::Int v19 = v131;
        uint64_t v2 = v132;
        Swift::Int v35 = v38;
        Swift::Int v33 = (void (*)(void, void, void))v135;
        Swift::Int v13 = v150;
        uint64_t v34 = v151;
      }
LABEL_23:
      a1 = v148;
      if (v146)
      {
        if (v35 < (uint64_t)v33) {
          goto LABEL_139;
        }
        if ((uint64_t)v33 < v35)
        {
          Swift::Int v131 = v19;
          uint64_t v132 = v2;
          uint64_t v43 = 0;
          uint64_t v44 = v34 * (v35 - 1);
          Swift::Int v45 = (Swift::Int)v33;
          Swift::Int v46 = v35 * v34;
          Swift::Int v47 = v45;
          uint64_t v48 = v45 * v34;
          Swift::Int v49 = v140;
          do
          {
            if (v47 != v35 + v43 - 1)
            {
              if (!v49) {
                goto LABEL_144;
              }
              Swift::Int v51 = v49 + v44;
              os_log_type_t v146 = (char *)*v152;
              ((void (*)(char *, Swift::Int, uint64_t))v146)(v134, v49 + v48, v147);
              if (v48 < v44 || v49 + v48 >= (unint64_t)(v49 + v46))
              {
                uint64_t v50 = v147;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v50 = v147;
                if (v48 != v44) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              ((void (*)(Swift::Int, char *, uint64_t))v146)(v51, v134, v50);
              a1 = v148;
              Swift::Int v49 = v140;
              uint64_t v34 = v151;
            }
            ++v47;
            --v43;
            v44 -= v34;
            v46 -= v34;
            v48 += v34;
          }
          while (v47 < v35 + v43);
          Swift::Int v19 = v131;
          uint64_t v2 = v132;
          Swift::Int v33 = (void (*)(void, void, void))v135;
          Swift::Int v13 = v150;
        }
      }
    }
    if (v35 < v13)
    {
      if (__OFSUB__(v35, v33)) {
        goto LABEL_137;
      }
      if (v35 - (uint64_t)v33 < v130) {
        break;
      }
    }
LABEL_55:
    if (v35 < (uint64_t)v33) {
      goto LABEL_132;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v146 = (char *)v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      Swift::Int v19 = sub_1000F1750(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v72 = *((void *)v19 + 2);
    unint64_t v71 = *((void *)v19 + 3);
    unint64_t v21 = v72 + 1;
    if (v72 >= v71 >> 1) {
      Swift::Int v19 = sub_1000F1750((char *)(v71 > 1), v72 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v73 = v19 + 32;
    uint64_t v74 = &v19[16 * v72 + 32];
    uint64_t v75 = v146;
    *(void *)uint64_t v74 = v33;
    *((void *)v74 + 1) = v75;
    if (v72)
    {
      while (1)
      {
        unint64_t v76 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v81 = &v73[16 * v21];
          uint64_t v82 = *((void *)v81 - 8);
          uint64_t v83 = *((void *)v81 - 7);
          BOOL v87 = __OFSUB__(v83, v82);
          uint64_t v84 = v83 - v82;
          if (v87) {
            goto LABEL_121;
          }
          uint64_t v86 = *((void *)v81 - 6);
          uint64_t v85 = *((void *)v81 - 5);
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v79 = v85 - v86;
          char v80 = v87;
          if (v87) {
            goto LABEL_122;
          }
          unint64_t v88 = v21 - 2;
          uint64_t v89 = &v73[16 * v21 - 32];
          uint64_t v91 = *(void *)v89;
          uint64_t v90 = *((void *)v89 + 1);
          BOOL v87 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          if (v87) {
            goto LABEL_124;
          }
          BOOL v87 = __OFADD__(v79, v92);
          uint64_t v93 = v79 + v92;
          if (v87) {
            goto LABEL_127;
          }
          if (v93 >= v84)
          {
            uint64_t v111 = &v73[16 * v76];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v87 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v87) {
              goto LABEL_131;
            }
            BOOL v104 = v79 < v114;
            goto LABEL_92;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v105 = *((void *)v19 + 4);
            uint64_t v106 = *((void *)v19 + 5);
            BOOL v87 = __OFSUB__(v106, v105);
            uint64_t v98 = v106 - v105;
            char v99 = v87;
            goto LABEL_86;
          }
          uint64_t v78 = *((void *)v19 + 4);
          uint64_t v77 = *((void *)v19 + 5);
          BOOL v87 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          char v80 = v87;
        }
        if (v80) {
          goto LABEL_123;
        }
        unint64_t v88 = v21 - 2;
        uint64_t v94 = &v73[16 * v21 - 32];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v97 = __OFSUB__(v95, v96);
        uint64_t v98 = v95 - v96;
        char v99 = v97;
        if (v97) {
          goto LABEL_126;
        }
        uint64_t v100 = &v73[16 * v76];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v87 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v87) {
          goto LABEL_129;
        }
        if (__OFADD__(v98, v103)) {
          goto LABEL_130;
        }
        if (v98 + v103 >= v79)
        {
          BOOL v104 = v79 < v103;
LABEL_92:
          if (v104) {
            unint64_t v76 = v88;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v99) {
          goto LABEL_125;
        }
        uint64_t v107 = &v73[16 * v76];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v87 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v87) {
          goto LABEL_128;
        }
        if (v110 < v98) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v115 = v76 - 1;
        if (v76 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        uint64_t v116 = *a1;
        if (!*a1) {
          goto LABEL_143;
        }
        uint64_t v117 = v19;
        uint64_t v118 = &v73[16 * v115];
        uint64_t v119 = *(void *)v118;
        uint64_t v120 = &v73[16 * v76];
        uint64_t v121 = *((void *)v120 + 1);
        sub_1001581E0(v116 + v137[9] * *(void *)v118, v116 + v137[9] * *(void *)v120, v116 + v137[9] * v121, v136);
        if (v2) {
          goto LABEL_115;
        }
        if (v121 < v119) {
          goto LABEL_118;
        }
        if (v76 > *((void *)v117 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v118 = v119;
        *(void *)&v73[16 * v115 + 8] = v121;
        unint64_t v122 = *((void *)v117 + 2);
        if (v76 >= v122) {
          goto LABEL_120;
        }
        Swift::Int v19 = v117;
        unint64_t v21 = v122 - 1;
        memmove(&v73[16 * v76], v120 + 16, 16 * (v122 - 1 - v76));
        *((void *)v117 + 2) = v122 - 1;
        a1 = v148;
        if (v122 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_14:
    Swift::Int v13 = a1[1];
    unint64_t v20 = v146;
    if ((uint64_t)v146 >= v13) {
      goto LABEL_104;
    }
  }
  if (__OFADD__(v33, v130)) {
    goto LABEL_140;
  }
  if ((uint64_t)v33 + v130 >= v13) {
    Swift::Int v52 = v13;
  }
  else {
    Swift::Int v52 = (Swift::Int)v33 + v130;
  }
  if (v52 >= (uint64_t)v33)
  {
    if (v35 != v52)
    {
      Swift::Int v131 = v19;
      uint64_t v132 = v2;
      uint64_t v53 = v137[9];
      uint64_t v138 = (void (*)(char *, uint64_t, uint64_t))v137[2];
      uint64_t v139 = v53;
      uint64_t v54 = v53 * (v35 - 1);
      Swift::Int v55 = v35 * v53;
      uint64_t v56 = v147;
      Swift::Int v133 = v52;
      do
      {
        uint64_t v58 = 0;
        os_log_type_t v146 = (char *)v35;
        Swift::Int v140 = v55;
        uint64_t v141 = v54;
        while (1)
        {
          uint64_t v59 = *a1;
          Swift::Int v150 = v55 + v58;
          uint64_t v151 = (uint64_t)v33;
          Swift::Int v60 = v55 + v58 + v59;
          unint64_t v61 = v145;
          unint64_t v62 = v138;
          v138(v145, v60, v56);
          uint64_t v63 = v54 + v58 + v59;
          unint64_t v64 = a1;
          uint64_t v65 = v144;
          v62(v144, v63, v56);
          LOBYTE(v62) = static Date.> infix(_:_:)();
          Swift::Int v66 = *v142;
          (*v142)(v65, v56);
          v66(v61, v56);
          if ((v62 & 1) == 0) {
            break;
          }
          uint64_t v67 = *v64;
          if (!*v64) {
            goto LABEL_142;
          }
          Swift::Int v55 = v140;
          uint64_t v54 = v141;
          uint64_t v68 = (char *)(v67 + v141 + v58);
          uint64_t v69 = *v152;
          uint64_t v56 = v147;
          (*v152)(v149, v67 + v140 + v58, v147);
          swift_arrayInitWithTakeFrontToBack();
          v69(v68, (uint64_t)v149, v56);
          v58 -= v139;
          Swift::Int v33 = (void (*)(void, void, void))(v151 + 1);
          uint64_t v57 = v146;
          a1 = v148;
          if (v146 == (char *)(v151 + 1)) {
            goto LABEL_48;
          }
        }
        uint64_t v57 = v146;
        uint64_t v56 = v147;
        a1 = v64;
        Swift::Int v55 = v140;
        uint64_t v54 = v141;
LABEL_48:
        Swift::Int v35 = (Swift::Int)(v57 + 1);
        v54 += v139;
        v55 += v139;
        Swift::Int v33 = (void (*)(void, void, void))v135;
      }
      while (v35 != v133);
      Swift::Int v35 = v133;
      Swift::Int v19 = v131;
      uint64_t v2 = v132;
    }
    goto LABEL_55;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100156030(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v136 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v151 = (char *)&v131 - v8;
  __chkstk_darwin(v9);
  os_log_type_t v146 = (char *)&v131 - v10;
  __chkstk_darwin(v11);
  uint64_t v147 = (char *)&v131 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_140;
    }
    if (v13) {
      sub_10015788C(0, v13, 1, a1);
    }
    return;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_148;
  }
  uint64_t v149 = v4;
  Swift::Int v150 = a1;
  Swift::Int v133 = v14;
  if (v13 < 2)
  {
    Swift::Int v19 = (char *)_swiftEmptyArrayStorage;
    unint64_t v138 = (unint64_t)_swiftEmptyArrayStorage
         + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
    uint64_t v132 = _swiftEmptyArrayStorage;
    if (v13 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v21 >= 2)
      {
        uint64_t v125 = *v150;
        do
        {
          unint64_t v126 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_135;
          }
          if (!v125) {
            goto LABEL_147;
          }
          uint64_t v127 = *(void *)&v19[16 * v126 + 32];
          uint64_t v128 = *(void *)&v19[16 * v21 + 24];
          sub_100158794(v125 + v5[9] * v127, v125 + v5[9] * *(void *)&v19[16 * v21 + 16], v125 + v5[9] * v128, v138);
          if (v2) {
            break;
          }
          if (v128 < v127) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::Int v19 = sub_1000F1E40((uint64_t)v19);
          }
          if (v126 >= *((void *)v19 + 2)) {
            goto LABEL_137;
          }
          uint64_t v129 = &v19[16 * v126 + 32];
          *(void *)uint64_t v129 = v127;
          *((void *)v129 + 1) = v128;
          unint64_t v130 = *((void *)v19 + 2);
          if (v21 > v130) {
            goto LABEL_138;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v130 - v21));
          *((void *)v19 + 2) = v130 - 1;
          unint64_t v21 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v132[2] = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    uint64_t v132 = (void *)v17;
    unint64_t v138 = v17 + v18;
  }
  Swift::Int v20 = 0;
  uint64_t v144 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t v145 = v5 + 2;
  unint64_t v154 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
  Swift::Int v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v139 = v5;
  while (1)
  {
    Swift::Int v22 = v20;
    Swift::Int v23 = v20 + 1;
    Swift::Int v137 = v20;
    if (v20 + 1 >= v13) {
      goto LABEL_37;
    }
    uint64_t v24 = v149;
    uint64_t v25 = *v150;
    uint64_t v141 = v25;
    Swift::Int v142 = v20 + 1;
    Swift::Int v153 = v139[9];
    Swift::Int v26 = v153;
    uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v139[2];
    v27(v147, v25 + v153 * v23, v149);
    uint64_t v28 = v25 + v26 * v22;
    uint64_t v29 = v146;
    v27(v146, v28, v24);
    uint64_t v30 = sub_10015D970((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v31 = v147;
    Swift::Int v148 = v30;
    LODWORD(v152) = dispatch thunk of static Comparable.< infix(_:_:)();
    Swift::Int v32 = v13;
    Swift::Int v33 = (void (*)(char *, uint64_t))v139[1];
    uint64_t v34 = v29;
    Swift::Int v22 = v137;
    v33(v34, v24);
    v33(v31, v24);
    Swift::Int v35 = v153;
    Swift::Int v23 = v22 + 2;
    Swift::Int v143 = v32;
    if (v22 + 2 >= v32)
    {
      Swift::Int v13 = v143;
      if ((v152 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      Swift::Int v134 = v19;
      uint64_t v131 = v2;
      v142 *= v153;
      uint64_t v36 = v141;
      Swift::Int v37 = v153 * v23;
      while (1)
      {
        Swift::Int v38 = v23;
        uint64_t v39 = v147;
        uint64_t v40 = v149;
        v27(v147, v36 + v37, v149);
        uint64_t v41 = v146;
        v27(v146, v36 + v142, v40);
        int v42 = dispatch thunk of static Comparable.< infix(_:_:)();
        v33(v41, v40);
        v33(v39, v40);
        if ((v152 ^ v42)) {
          break;
        }
        Swift::Int v23 = v38 + 1;
        Swift::Int v35 = v153;
        v36 += v153;
        if (v143 == v38 + 1)
        {
          Swift::Int v13 = v143;
          Swift::Int v23 = v143;
          uint64_t v2 = v131;
          Swift::Int v19 = v134;
          Swift::Int v22 = v137;
          if (v152) {
            goto LABEL_25;
          }
          goto LABEL_37;
        }
      }
      uint64_t v2 = v131;
      Swift::Int v19 = v134;
      Swift::Int v23 = v38;
      Swift::Int v22 = v137;
      Swift::Int v13 = v143;
      Swift::Int v35 = v153;
      if ((v152 & 1) == 0) {
        goto LABEL_37;
      }
    }
LABEL_25:
    if (v23 < v22) {
      goto LABEL_141;
    }
    if (v22 >= v23)
    {
LABEL_37:
      Swift::Int v47 = v150;
      goto LABEL_38;
    }
    Swift::Int v134 = v19;
    uint64_t v43 = 0;
    uint64_t v44 = v35 * (v23 - 1);
    Swift::Int v45 = v23 * v35;
    uint64_t v46 = v22 * v35;
    Swift::Int v47 = v150;
    Swift::Int v148 = v23;
    do
    {
      if (v22 != v23 + v43 - 1)
      {
        uint64_t v49 = v141;
        if (!v141) {
          goto LABEL_146;
        }
        uint64_t v50 = v2;
        unint64_t v51 = v141 + v46;
        Swift::Int v52 = (char *)(v141 + v44);
        uint64_t v152 = *v154;
        v152(v136, v141 + v46, v149);
        if (v46 < v44 || v51 >= v49 + v45)
        {
          uint64_t v48 = v149;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v48 = v149;
          if (v46 != v44) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v152(v52, (uint64_t)v136, v48);
        uint64_t v2 = v50;
        Swift::Int v47 = v150;
        Swift::Int v23 = v148;
        Swift::Int v35 = v153;
      }
      ++v22;
      --v43;
      v44 -= v35;
      v45 -= v35;
      v46 += v35;
    }
    while (v22 < v23 + v43);
    Swift::Int v19 = v134;
    Swift::Int v22 = v137;
    Swift::Int v13 = v143;
LABEL_38:
    uint64_t v53 = v149;
    if (v23 >= v13) {
      goto LABEL_57;
    }
    if (__OFSUB__(v23, v22)) {
      goto LABEL_139;
    }
    if (v23 - v22 >= v133) {
      goto LABEL_57;
    }
    if (__OFADD__(v22, v133)) {
      goto LABEL_142;
    }
    Swift::Int v54 = v22 + v133 >= v13 ? v13 : v22 + v133;
    if (v54 < v22) {
      break;
    }
    if (v23 != v54)
    {
      Swift::Int v134 = v19;
      uint64_t v131 = v2;
      uint64_t v55 = v139[9];
      Swift::Int v140 = (void (*)(char *, uint64_t, uint64_t))v139[2];
      uint64_t v141 = v55;
      uint64_t v56 = v55 * (v23 - 1);
      Swift::Int v57 = v23 * v55;
      Swift::Int v135 = v54;
      do
      {
        uint64_t v59 = 0;
        Swift::Int v148 = v23;
        Swift::Int v142 = v57;
        Swift::Int v143 = v56;
        while (1)
        {
          uint64_t v60 = *v47;
          uint64_t v152 = (void (*)(char *, uint64_t, uint64_t))(v57 + v59);
          Swift::Int v153 = v22;
          Swift::Int v61 = v57 + v59 + v60;
          unint64_t v62 = v147;
          uint64_t v63 = v47;
          unint64_t v64 = v140;
          v140(v147, v61, v53);
          uint64_t v65 = v56 + v59 + v60;
          Swift::Int v66 = v146;
          v64(v146, v65, v53);
          sub_10015D970((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
          LOBYTE(v6sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v67 = *v144;
          (*v144)(v66, v53);
          v67(v62, v53);
          if ((v60 & 1) == 0) {
            break;
          }
          uint64_t v68 = *v63;
          if (!*v63) {
            goto LABEL_144;
          }
          Swift::Int v57 = v142;
          uint64_t v56 = v143;
          uint64_t v69 = (char *)(v68 + v143 + v59);
          uint64_t v70 = *v154;
          uint64_t v71 = v149;
          (*v154)(v151, v68 + v142 + v59, v149);
          uint64_t v53 = v71;
          swift_arrayInitWithTakeFrontToBack();
          v70(v69, (uint64_t)v151, v71);
          v59 -= v141;
          Swift::Int v22 = v153 + 1;
          Swift::Int v58 = v148;
          Swift::Int v47 = v150;
          if (v148 == v153 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v58 = v148;
        uint64_t v53 = v149;
        Swift::Int v47 = v63;
        Swift::Int v57 = v142;
        uint64_t v56 = v143;
LABEL_49:
        Swift::Int v23 = v58 + 1;
        v56 += v141;
        v57 += v141;
        Swift::Int v22 = v137;
      }
      while (v23 != v135);
      Swift::Int v23 = v135;
      uint64_t v2 = v131;
      Swift::Int v19 = v134;
    }
LABEL_57:
    if (v23 < v22) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v148 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      Swift::Int v19 = sub_1000F1750(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v74 = *((void *)v19 + 2);
    unint64_t v73 = *((void *)v19 + 3);
    unint64_t v21 = v74 + 1;
    if (v74 >= v73 >> 1) {
      Swift::Int v19 = sub_1000F1750((char *)(v73 > 1), v74 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v75 = v19 + 32;
    unint64_t v76 = &v19[16 * v74 + 32];
    Swift::Int v77 = v148;
    *(void *)unint64_t v76 = v22;
    *((void *)v76 + 1) = v77;
    if (v74)
    {
      while (1)
      {
        unint64_t v78 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v83 = &v75[16 * v21];
          uint64_t v84 = *((void *)v83 - 8);
          uint64_t v85 = *((void *)v83 - 7);
          BOOL v89 = __OFSUB__(v85, v84);
          uint64_t v86 = v85 - v84;
          if (v89) {
            goto LABEL_123;
          }
          uint64_t v88 = *((void *)v83 - 6);
          uint64_t v87 = *((void *)v83 - 5);
          BOOL v89 = __OFSUB__(v87, v88);
          uint64_t v81 = v87 - v88;
          char v82 = v89;
          if (v89) {
            goto LABEL_124;
          }
          unint64_t v90 = v21 - 2;
          uint64_t v91 = &v75[16 * v21 - 32];
          uint64_t v93 = *(void *)v91;
          uint64_t v92 = *((void *)v91 + 1);
          BOOL v89 = __OFSUB__(v92, v93);
          uint64_t v94 = v92 - v93;
          if (v89) {
            goto LABEL_126;
          }
          BOOL v89 = __OFADD__(v81, v94);
          uint64_t v95 = v81 + v94;
          if (v89) {
            goto LABEL_129;
          }
          if (v95 >= v86)
          {
            uint64_t v113 = &v75[16 * v78];
            uint64_t v115 = *(void *)v113;
            uint64_t v114 = *((void *)v113 + 1);
            BOOL v89 = __OFSUB__(v114, v115);
            uint64_t v116 = v114 - v115;
            if (v89) {
              goto LABEL_133;
            }
            BOOL v106 = v81 < v116;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v107 = *((void *)v19 + 4);
            uint64_t v108 = *((void *)v19 + 5);
            BOOL v89 = __OFSUB__(v108, v107);
            uint64_t v100 = v108 - v107;
            char v101 = v89;
            goto LABEL_88;
          }
          uint64_t v80 = *((void *)v19 + 4);
          uint64_t v79 = *((void *)v19 + 5);
          BOOL v89 = __OFSUB__(v79, v80);
          uint64_t v81 = v79 - v80;
          char v82 = v89;
        }
        if (v82) {
          goto LABEL_125;
        }
        unint64_t v90 = v21 - 2;
        uint64_t v96 = &v75[16 * v21 - 32];
        uint64_t v98 = *(void *)v96;
        uint64_t v97 = *((void *)v96 + 1);
        BOOL v99 = __OFSUB__(v97, v98);
        uint64_t v100 = v97 - v98;
        char v101 = v99;
        if (v99) {
          goto LABEL_128;
        }
        uint64_t v102 = &v75[16 * v78];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        BOOL v89 = __OFSUB__(v103, v104);
        uint64_t v105 = v103 - v104;
        if (v89) {
          goto LABEL_131;
        }
        if (__OFADD__(v100, v105)) {
          goto LABEL_132;
        }
        if (v100 + v105 >= v81)
        {
          BOOL v106 = v81 < v105;
LABEL_94:
          if (v106) {
            unint64_t v78 = v90;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v101) {
          goto LABEL_127;
        }
        uint64_t v109 = &v75[16 * v78];
        uint64_t v111 = *(void *)v109;
        uint64_t v110 = *((void *)v109 + 1);
        BOOL v89 = __OFSUB__(v110, v111);
        uint64_t v112 = v110 - v111;
        if (v89) {
          goto LABEL_130;
        }
        if (v112 < v100) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v117 = v78 - 1;
        if (v78 - 1 >= v21)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v150) {
          goto LABEL_145;
        }
        uint64_t v118 = v19;
        uint64_t v119 = &v75[16 * v117];
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = &v75[16 * v78];
        uint64_t v122 = *((void *)v121 + 1);
        sub_100158794(*v150 + v139[9] * *(void *)v119, *v150 + v139[9] * *(void *)v121, *v150 + v139[9] * v122, v138);
        if (v2) {
          goto LABEL_117;
        }
        if (v122 < v120) {
          goto LABEL_120;
        }
        if (v78 > *((void *)v118 + 2)) {
          goto LABEL_121;
        }
        uint64_t v123 = v118;
        *(void *)uint64_t v119 = v120;
        *(void *)&v75[16 * v117 + 8] = v122;
        unint64_t v124 = *((void *)v118 + 2);
        if (v78 >= v124) {
          goto LABEL_122;
        }
        Swift::Int v19 = v123;
        unint64_t v21 = v124 - 1;
        memmove(&v75[16 * v78], v121 + 16, 16 * (v124 - 1 - v78));
        *((void *)v19 + 2) = v124 - 1;
        if (v124 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_14:
    Swift::Int v13 = v150[1];
    Swift::Int v20 = v148;
    uint64_t v5 = v139;
    if (v148 >= v13) {
      goto LABEL_106;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int sub_100156BF0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_100157BAC(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_100158DC8((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1000F1E40((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    Swift::Int v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    unint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      Swift::Int v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1000F1750(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1000F1750((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    int v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          Swift::Int v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        unint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        unint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_100158DC8((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        int v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      Swift::Int v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        Swift::Int v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)Swift::Int v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001572DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a1;
  uint64_t v40 = type metadata accessor for InsightsDataManager.TopAssetCategory(0);
  __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v36 = (uint64_t)&v31 - v9;
  __chkstk_darwin(v10);
  uint64_t v35 = (uint64_t)&v31 - v12;
  uint64_t v39 = a3;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v13 = *(void *)(v11 + 72);
    uint64_t v14 = v13 * (v39 - 1);
    uint64_t v37 = v13;
    uint64_t v15 = v13 * v39;
    uint64_t v34 = a4;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v33;
    uint64_t v38 = v15;
    while (1)
    {
      uint64_t v18 = *a4;
      uint64_t v19 = v15 + v16 + *a4;
      uint64_t v20 = v35;
      sub_1001545E0(v19, v35, type metadata accessor for InsightsDataManager.TopAssetCategory);
      uint64_t v21 = v14 + v16 + v18;
      uint64_t v22 = v14;
      uint64_t v23 = v36;
      sub_1001545E0(v21, v36, type metadata accessor for InsightsDataManager.TopAssetCategory);
      uint64_t v24 = *(int *)(v40 + 24);
      uint64_t v42 = *(void *)(v20 + v24);
      uint64_t v25 = *(void *)(v23 + v24);
      uint64_t v26 = v23;
      uint64_t v14 = v22;
      sub_1001546C4(v26, type metadata accessor for InsightsDataManager.TopAssetCategory);
      uint64_t v27 = v20;
      uint64_t v15 = v38;
      sub_1001546C4(v27, type metadata accessor for InsightsDataManager.TopAssetCategory);
      BOOL v28 = v25 < v42;
      a4 = v34;
      if (!v28)
      {
LABEL_4:
        uint64_t v14 = v22 + v37;
        v15 += v37;
        if (++v39 == v32) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v29 = *v34;
      if (!*v34) {
        break;
      }
      uint64_t v30 = v29 + v22 + v16;
      sub_10015DC8C(v29 + v15 + v16, v41, type metadata accessor for InsightsDataManager.TopAssetCategory);
      swift_arrayInitWithTakeFrontToBack();
      sub_10015DC8C(v41, v30, type metadata accessor for InsightsDataManager.TopAssetCategory);
      v16 -= v37;
      if (v39 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

void sub_1001575A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a1;
  uint64_t v7 = type metadata accessor for Date();
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v31 - v10;
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v38 = (char *)&v31 - v14;
  uint64_t v41 = a3;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v34 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v35 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v36 = a4;
    uint64_t v37 = v15;
    uint64_t v42 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v46 = v17 * (v41 - 1);
    uint64_t v40 = v17;
    uint64_t v45 = v17 * v41;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v44 = v33;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v45 + v18 + *a4;
      uint64_t v21 = v38;
      uint64_t v22 = v35;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v35)(v38, v20, v7, v13);
      uint64_t v23 = v7;
      uint64_t v24 = v39;
      v22(v39, v46 + v18 + v19, v23);
      LOBYTE(v19) = static Date.> infix(_:_:)();
      uint64_t v25 = *v34;
      uint64_t v26 = v24;
      uint64_t v7 = v23;
      (*v34)(v26, v23);
      uint64_t v27 = v21;
      a4 = v36;
      v25(v27, v23);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v46 += v40;
        v45 += v40;
        if (++v41 == v32) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v28 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v29 = (char *)(v28 + v46 + v18);
      uint64_t v30 = *v42;
      (*v42)(v43, v28 + v45 + v18, v23);
      swift_arrayInitWithTakeFrontToBack();
      v30(v29, (uint64_t)v43, v23);
      v18 -= v40;
      if (v41 == ++v44) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

void sub_10015788C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = type metadata accessor for Date();
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v37 = (char *)&v29 - v10;
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v32 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v33 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v34 = a4;
    uint64_t v35 = v15;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      uint64_t v21 = v36;
      uint64_t v22 = v33;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v36, v20, v7, v13);
      uint64_t v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      sub_10015D970((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
      LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      v24(v25, v7);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = (char *)(v26 + v44 + v18);
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      v28(v27, (uint64_t)v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_100157BAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100157C7C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for InsightsDataManager.TopAssetCategory(0);
  __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v50 = (char *)&v44 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_68;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_69;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v54 = a1;
  unint64_t v53 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v31 = a4 + v18;
      unint64_t v52 = a4 + v18;
      unint64_t v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v33 = -v13;
        unint64_t v48 = a4;
        unint64_t v45 = a1;
        uint64_t v46 = v8;
        uint64_t v34 = (uint64_t)v50;
        do
        {
          unint64_t v49 = a3 + v33;
          sub_1001545E0(v31 + v33, v34, type metadata accessor for InsightsDataManager.TopAssetCategory);
          unint64_t v35 = a2 + v33;
          uint64_t v36 = v51;
          sub_1001545E0(a2 + v33, v51, type metadata accessor for InsightsDataManager.TopAssetCategory);
          uint64_t v37 = *(int *)(v8 + 24);
          uint64_t v38 = *(void *)(v34 + v37);
          uint64_t v39 = *(void *)(v36 + v37);
          sub_1001546C4(v36, type metadata accessor for InsightsDataManager.TopAssetCategory);
          sub_1001546C4(v34, type metadata accessor for InsightsDataManager.TopAssetCategory);
          if (v39 >= v38)
          {
            unint64_t v42 = v52;
            v52 += v33;
            unint64_t v40 = v49;
            if (a3 < v42 || v49 >= v42)
            {
              uint64_t v8 = v46;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v35 = a2;
              unint64_t v41 = v48;
            }
            else
            {
              uint64_t v8 = v46;
              unint64_t v41 = v48;
              if (a3 != v42) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v35 = a2;
            }
          }
          else
          {
            unint64_t v40 = v49;
            if (a3 < a2 || v49 >= a2)
            {
              uint64_t v8 = v46;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v41 = v48;
            }
            else
            {
              uint64_t v8 = v46;
              unint64_t v41 = v48;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v54 += v33;
          }
          unint64_t v31 = v52;
          if (v52 <= v41) {
            break;
          }
          a2 = v35;
          a3 = v40;
        }
        while (v35 > v45);
      }
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v49 = a4 + v17;
    unint64_t v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      unint64_t v47 = a3;
      uint64_t v20 = (uint64_t)v50;
      do
      {
        sub_1001545E0(a2, v20, type metadata accessor for InsightsDataManager.TopAssetCategory);
        uint64_t v21 = v51;
        sub_1001545E0(a4, v51, type metadata accessor for InsightsDataManager.TopAssetCategory);
        uint64_t v22 = *(int *)(v8 + 24);
        uint64_t v23 = *(void *)(v20 + v22);
        uint64_t v24 = *(void *)(v21 + v22);
        sub_1001546C4(v21, type metadata accessor for InsightsDataManager.TopAssetCategory);
        sub_1001546C4(v20, type metadata accessor for InsightsDataManager.TopAssetCategory);
        unint64_t v25 = v54;
        if (v24 >= v23)
        {
          unint64_t v29 = v53 + v13;
          if (v54 < v53 || v54 >= v29)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v28 = v47;
          }
          else
          {
            unint64_t v28 = v47;
            if (v54 != v53) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v53 = v29;
          unint64_t v26 = a2;
        }
        else
        {
          unint64_t v26 = a2 + v13;
          if (v54 < a2 || v54 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v28 = v47;
          }
          else
          {
            unint64_t v28 = v47;
            if (v54 == a2) {
              unint64_t v25 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        unint64_t v54 = v25 + v13;
        a4 = v53;
        if (v53 >= v49) {
          break;
        }
        a2 = v26;
      }
      while (v26 < v28);
    }
LABEL_66:
    sub_1000F1AC4(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001581E0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v61 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v60 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v51 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_71;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_72;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v64 = a1;
  unint64_t v63 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v34 = a4 + v18;
      unint64_t v62 = a4 + v18;
      unint64_t v64 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
        uint64_t v58 = v8 + 16;
        unint64_t v54 = (void (**)(char *, uint64_t))(v8 + 8);
        BOOL v55 = v36;
        uint64_t v37 = -v13;
        unint64_t v52 = a4;
        uint64_t v53 = -v13;
        unint64_t v56 = (void (*)(void, void, void))a1;
        uint64_t v38 = v61;
        do
        {
          unint64_t v57 = a3 + v37;
          unint64_t v39 = a3;
          unint64_t v40 = v59;
          unint64_t v41 = v55;
          v55(v59, v34 + v37, v38);
          unint64_t v42 = a2 + v37;
          uint64_t v43 = v60;
          v41(v60, v42, v38);
          LOBYTE(v41) = static Date.> infix(_:_:)();
          uint64_t v44 = *v54;
          (*v54)(v43, v38);
          v44(v40, v38);
          if (v41)
          {
            uint64_t v37 = v53;
            a3 = v57;
            if (v39 < a2 || v57 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v46 = v52;
              unint64_t v47 = v56;
            }
            else
            {
              BOOL v45 = v39 == a2;
              unint64_t v46 = v52;
              unint64_t v47 = v56;
              if (!v45) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v64 += v37;
          }
          else
          {
            unint64_t v48 = v62;
            v62 += v53;
            a3 = v57;
            BOOL v49 = v39 < v48 || v57 >= v48;
            uint64_t v37 = v53;
            if (v49)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = a2;
              unint64_t v46 = v52;
              unint64_t v47 = v56;
            }
            else
            {
              unint64_t v47 = v56;
              if (v39 != v48) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v42 = a2;
              unint64_t v46 = v52;
            }
          }
          unint64_t v34 = v62;
          if (v62 <= v46) {
            break;
          }
          a2 = v42;
        }
        while (v42 > (unint64_t)v47);
      }
      goto LABEL_69;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v57 = a4 + v17;
    unint64_t v62 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v20 = *(void (**)(void, void, void))(v8 + 16);
      uint64_t v58 = v8 + 16;
      BOOL v55 = (void (*)(char *, unint64_t, uint64_t))(v8 + 8);
      unint64_t v56 = v20;
      do
      {
        uint64_t v21 = v13;
        unint64_t v22 = a3;
        uint64_t v23 = v59;
        unint64_t v24 = a4;
        uint64_t v25 = v61;
        unint64_t v26 = (void (*)(char *, unint64_t, uint64_t))v56;
        v56(v59, a2, v61);
        uint64_t v27 = v60;
        v26(v60, v24, v25);
        LOBYTE(v24) = static Date.> infix(_:_:)();
        unint64_t v28 = *(void (**)(char *, uint64_t))v55;
        (*(void (**)(char *, uint64_t))v55)(v27, v25);
        v28(v23, v25);
        unint64_t v29 = v64;
        if (v24)
        {
          uint64_t v13 = v21;
          unint64_t v30 = a2 + v21;
          if (v64 < a2 || v64 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v64 == a2) {
              unint64_t v29 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v13 = v21;
          unint64_t v32 = v63 + v21;
          if (v64 < v63 || v64 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v64 != v63) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v63 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v64 = v29 + v13;
        a4 = v63;
        if (v63 >= v57) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
LABEL_69:
    sub_1000F1ADC(&v64, &v63, (uint64_t *)&v62);
    return 1;
  }
LABEL_73:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100158794(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v56 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  BOOL v55 = (char *)v49 - v12;
  uint64_t v57 = *(void *)(v13 + 72);
  if (!v57)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v57 == -1) {
    goto LABEL_68;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v57 == -1) {
    goto LABEL_69;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v57;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v16 = v14 / v57;
  if (v15 >= v14 / v57)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v57;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v19 = v9;
      }
      else
      {
        uint64_t v19 = v9;
        if (a4 != a2) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v34 = a4 + v18;
      unint64_t v58 = a4 + v18;
      unint64_t v60 = a2;
      unint64_t v52 = a1;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v36 = -v57;
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
        uint64_t v37 = v19 + 16;
        v49[1] = v37 - 8;
        uint64_t v50 = v38;
        unint64_t v53 = -v57;
        uint64_t v54 = v37;
        unint64_t v51 = a4;
        unint64_t v39 = v55;
        unint64_t v40 = (void (**)(char *, uint64_t))(v37 - 8);
        do
        {
          uint64_t v57 = a3 + v36;
          unint64_t v41 = v50;
          v50(v39, v34 + v36, v8);
          unint64_t v42 = a2 + v36;
          unint64_t v43 = a3;
          uint64_t v44 = v56;
          v41(v56, v42, v8);
          sub_10015D970((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
          LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
          BOOL v45 = *v40;
          (*v40)(v44, v8);
          v45(v39, v8);
          if (v41)
          {
            a3 = v57;
            if (v43 < a2 || v57 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v46 = v51;
            }
            else
            {
              unint64_t v46 = v51;
              if (v43 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            unint64_t v36 = v53;
            v60 += v53;
          }
          else
          {
            a3 = v57;
            unint64_t v47 = v58;
            v58 += v53;
            if (v43 < v47 || v57 >= v47)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = a2;
              unint64_t v36 = v53;
              unint64_t v46 = v51;
            }
            else
            {
              unint64_t v46 = v51;
              if (v43 != v47) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v42 = a2;
              unint64_t v36 = v53;
            }
          }
          unint64_t v34 = v58;
          if (v58 <= v46) {
            break;
          }
          a2 = v42;
        }
        while (v42 > v52);
      }
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v57;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v53 = a4 + v17;
    unint64_t v58 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v54 = v9 + 16;
      unint64_t v22 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v23 = a3;
        unint64_t v24 = v55;
        v21(v55, a2, v8);
        unint64_t v25 = a4;
        unint64_t v26 = v56;
        v21(v56, v25, v8);
        sub_10015D970((unint64_t *)&qword_1007FD120, (void (*)(uint64_t))&type metadata accessor for Date);
        char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v28 = *v22;
        (*v22)(v26, v8);
        v28(v24, v8);
        unint64_t v29 = v60;
        if (v27)
        {
          unint64_t v30 = a2 + v57;
          if (v60 < a2 || v60 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v60 == a2) {
              unint64_t v29 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v32 = v59 + v57;
          if (v60 < v59 || v60 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v59 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v60 = v29 + v57;
        a4 = v59;
        if (v59 >= v53) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
LABEL_66:
    sub_1000F1ADC(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100158DC8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  char v27 = __src;
  unint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      unint64_t v25 = v17;
      char v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        uint64_t v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            unint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            uint64_t v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            char v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    int64_t v14 = &v4[16 * v10];
    unint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          unint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      char v27 = v7;
    }
LABEL_50:
    sub_1000F1C38((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100159064(void (*a1)(_OWORD *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  void (*v32)(_OWORD *__return_ptr, char *);
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;

  unint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v5 = _s4YearVMa(0);
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010218(&qword_1007FFBF8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v9 = (void *)result;
  int64_t v10 = 0;
  unint64_t v35 = a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v12 = a3 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v12 - 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v29 = v12;
  int64_t v30 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = result + 64;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v10 << 6))
  {
    uint64_t v23 = *(void *)(*(void *)(v35 + 48) + 8 * i);
    sub_1001545E0(*(void *)(v35 + 56) + *(void *)(v31 + 72) * i, (uint64_t)v7, _s4YearVMa);
    v32(v34, v7);
    if (v3)
    {
      swift_release();
      sub_1001546C4((uint64_t)v7, _s4YearVMa);
      return (uint64_t)v9;
    }
    uint64_t result = sub_1001546C4((uint64_t)v7, _s4YearVMa);
    *(void *)(v17 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v9[6] + 8 * i) = v23;
    unint64_t v24 = (_OWORD *)(v9[7] + 32 * i);
    long long v25 = v34[1];
    _OWORD *v24 = v34[0];
    v24[1] = v25;
    uint64_t v26 = v9[2];
    BOOL v20 = __OFADD__(v26, 1);
    uint64_t v27 = v26 + 1;
    if (v20)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v9[2] = v27;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v20 = __OFADD__(v10++, 1);
    if (v20) {
      goto LABEL_27;
    }
    if (v10 >= v30) {
      return (uint64_t)v9;
    }
    unint64_t v21 = *(void *)(v29 + 8 * v10);
    if (!v21) {
      break;
    }
LABEL_15:
    unint64_t v16 = (v21 - 1) & v21;
  }
  int64_t v22 = v10 + 1;
  if (v10 + 1 >= v30) {
    return (uint64_t)v9;
  }
  unint64_t v21 = *(void *)(v29 + 8 * v22);
  if (v21) {
    goto LABEL_14;
  }
  int64_t v22 = v10 + 2;
  if (v10 + 2 >= v30) {
    return (uint64_t)v9;
  }
  unint64_t v21 = *(void *)(v29 + 8 * v22);
  if (v21) {
    goto LABEL_14;
  }
  int64_t v22 = v10 + 3;
  if (v10 + 3 >= v30) {
    return (uint64_t)v9;
  }
  unint64_t v21 = *(void *)(v29 + 8 * v22);
  if (v21)
  {
LABEL_14:
    int64_t v10 = v22;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v30) {
      return (uint64_t)v9;
    }
    unint64_t v21 = *(void *)(v29 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100159344(uint64_t a1)
{
  uint64_t v2 = _s5MonthVMa(0);
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010218(&qword_1007FFBF8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = (void *)result;
  int64_t v7 = 0;
  uint64_t v31 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v26 = (unint64_t)(v9 + 63) >> 6;
  int64x2_t v28 = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = result + 64;
  if ((v10 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v12 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v7 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v31 + 48) + 8 * i);
    sub_1001545E0(*(void *)(v31 + 56) + *(void *)(v29 + 72) * i, (uint64_t)v4, _s5MonthVMa);
    uint64_t v18 = IndexSet.count.getter();
    uint64_t v19 = *v4;
    uint64_t result = sub_1001546C4((uint64_t)v4, _s5MonthVMa);
    *(void *)(v27 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v6[6] + 8 * i) = v17;
    uint64_t v20 = v6[7] + 32 * i;
    *(void *)uint64_t v20 = v18;
    *(void *)(v20 + 8) = v19;
    *(int64x2_t *)(v20 + 16) = v28;
    uint64_t v21 = v6[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v6[2] = v23;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v26) {
      return (uint64_t)v6;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v7;
    if (!v15)
    {
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v26) {
        return (uint64_t)v6;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v7);
      if (!v15)
      {
        int64_t v7 = v14 + 2;
        if (v14 + 2 >= v26) {
          return (uint64_t)v6;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v7);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26) {
    return (uint64_t)v6;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    int64_t v7 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v26) {
      return (uint64_t)v6;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10015961C(uint64_t a1)
{
  sub_100010218(&qword_1007FFBF8);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  int64x2_t v9 = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    *(void *)((char *)result + ((i >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << i;
    *(void *)(result[6] + 8 * i) = v15;
    uint64_t v17 = result[7] + 32 * i;
    *(void *)uint64_t v17 = 1;
    *(void *)(v17 + 8) = v16;
    *(int64x2_t *)(v17 + 16) = v9;
    uint64_t v18 = result[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    result[2] = v20;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v8) {
      return result;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v8) {
        return result;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v8) {
          return result;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v8) {
    return result;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v8) {
      return result;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1001597B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v21[0] = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 56;
    do
    {
      Swift::UInt v7 = *(unsigned __int8 *)(a1 + 32 + v5++);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int v8 = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v10 = v8 & ~v9;
      if ((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
      {
        uint64_t v11 = *(void *)(v2 + 48);
        if (*(unsigned __int8 *)(v11 + v10) == v7)
        {
LABEL_9:
          v21[1] = v5;
          unint64_t v12 = (unint64_t)(63 - v9) >> 6;
          size_t v13 = 8 * v12;
          uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
          if (v12 < 0x81
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            uint64_t v16 = &v20[-v15];
            memcpy(&v20[-v15], (const void *)(v2 + 56), v13);
            Swift::Int v17 = sub_100159ED8((Swift::Int)v16, v12, v2, v10, v21);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v18 = (void *)swift_slowAlloc();
            memcpy(v18, (const void *)(v2 + 56), v13);
            Swift::Int v17 = sub_100159ED8((Swift::Int)v18, v12, v2, v10, v21);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return (void *)v17;
        }
        while (1)
        {
          unint64_t v10 = (v10 + 1) & ~v9;
          if (((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v11 + v10) == v7) {
            goto LABEL_9;
          }
        }
      }
    }
    while (v5 != v4);
  }
  return (void *)v2;
}

uint64_t sub_100159A4C()
{
  return sub_100469500(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t *sub_100159A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_100082D3C();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        int64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      unint64_t v32 = sub_10015A088((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_100082D3C();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      unint64_t v32 = sub_10015A088((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_100082D3C();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_100159ED8(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (unint64_t *)result;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v10 = *a5;
  unint64_t v9 = a5[1];
  unint64_t v11 = *(void *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_2:
    swift_retain();
    return sub_10015A380(v6, a2, v8, a3);
  }
  else
  {
    uint64_t v13 = a3 + 56;
    while ((v9 & 0x8000000000000000) == 0)
    {
      if (v9 >= v11) {
        goto LABEL_20;
      }
      Swift::UInt v14 = *(unsigned __int8 *)(v10 + v9 + 32);
      a5[1] = v9 + 1;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v14);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      uint64_t v18 = 1 << v16;
      if (((1 << v16) & *(void *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        uint64_t v19 = *(void *)(a3 + 48);
        if (*(unsigned __int8 *)(v19 + v16) == v14)
        {
LABEL_15:
          uint64_t v22 = v17;
          unint64_t v23 = v6[v17];
          v6[v22] = v23 & ~v18;
          if ((v18 & v23) != 0)
          {
            if (__OFSUB__(v8--, 1)) {
              goto LABEL_21;
            }
            if (!v8) {
              return (Swift::Int)&_swiftEmptySetSingleton;
            }
          }
        }
        else
        {
          for (unint64_t i = v16 + 1; ; unint64_t i = v21 + 1)
          {
            unint64_t v21 = i & ~v15;
            if (((*(void *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
              break;
            }
            if (*(unsigned __int8 *)(v19 + v21) == v14)
            {
              uint64_t v17 = v21 >> 6;
              uint64_t v18 = 1 << v21;
              goto LABEL_15;
            }
          }
        }
      }
      uint64_t v10 = *a5;
      unint64_t v9 = a5[1];
      unint64_t v11 = *(void *)(*a5 + 16);
      if (v9 == v11) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

unint64_t *sub_10015A088(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_10015A5F4(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        int64x2_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          unint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_10015A380(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    int64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100010218(&qword_100811340);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  int64_t v9 = (unsigned char *)result;
  int64x2_t v28 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v28[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v28[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(unsigned char *)(*((void *)v9 + 6) + v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v28[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v28[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10015A5F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100010218((uint64_t *)&unk_100811250);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    int64x2_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *int64x2_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10015A88C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = a1 + 32;
      uint64_t v6 = a2 + 56;
      do
      {
        if (*(void *)(a2 + 16))
        {
          Swift::UInt v7 = *(unsigned __int8 *)(v5 + v4);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v7);
          Swift::Int v8 = Hasher._finalize()();
          uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v10 = v8 & ~v9;
          if ((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
          {
            uint64_t v11 = *(void *)(a2 + 48);
            if (*(unsigned __int8 *)(v11 + v10) == v7) {
              return 0;
            }
            uint64_t v12 = ~v9;
            while (1)
            {
              unint64_t v10 = (v10 + 1) & v12;
              if (((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
                break;
              }
              if (*(unsigned __int8 *)(v11 + v10) == v7) {
                return 0;
              }
            }
          }
        }
        ++v4;
      }
      while (v4 != v2);
    }
  }
  return 1;
}

unint64_t sub_10015A990(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  unsigned __int8 v7 = sub_10055A034();
  if (v7 == 9) {
    goto LABEL_14;
  }
  unsigned __int8 v9 = v7;
  uint64_t v10 = v8;
  uint64_t v11 = (void *)*a5;
  unint64_t result = sub_10001BB90(v7);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  BOOL v16 = __OFADD__(v14, v15);
  uint64_t v17 = v14 + v15;
  if (v16) {
    goto LABEL_25;
  }
  char v18 = v13;
  if (v11[3] < v17)
  {
    sub_10054639C(v17, a4 & 1);
    unint64_t result = sub_10001BB90(v9);
    if ((v18 & 1) == (v19 & 1)) {
      goto LABEL_7;
    }
LABEL_5:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((a4 & 1) == 0)
  {
    unint64_t v23 = result;
    sub_100549EC8();
    unint64_t result = v23;
    uint64_t v20 = (void *)*a5;
    if (v18) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v20 = (void *)*a5;
  if (v18)
  {
LABEL_8:
    unint64_t v21 = (void *)(v20[7] + 8 * result);
    uint64_t v22 = *v21 + v10;
    if (!__OFADD__(*v21, v10)) {
      goto LABEL_13;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_12:
  v20[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(v20[6] + result) = v9;
  *(void *)(v20[7] + 8 * result) = v10;
  uint64_t v24 = v20[2];
  unint64_t v21 = v20 + 2;
  uint64_t v22 = v24 + 1;
  if (!__OFADD__(v24, 1))
  {
LABEL_13:
    void *v21 = v22;
    unsigned __int8 v25 = sub_10055A034();
    if (v25 == 9)
    {
LABEL_14:
      swift_release();
      swift_bridgeObjectRelease();
      sub_100082D3C();
      return swift_release();
    }
    unsigned __int8 v9 = v25;
    uint64_t v10 = v26;
    char v18 = 1;
    while (1)
    {
      uint64_t v31 = (void *)*a5;
      unint64_t result = sub_10001BB90(v9);
      uint64_t v33 = v31[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v16 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v16) {
        goto LABEL_25;
      }
      a4 = v32;
      if (v31[3] < v35)
      {
        sub_10054639C(v35, 1);
        unint64_t result = sub_10001BB90(v9);
        if ((a4 & 1) != (v36 & 1)) {
          goto LABEL_5;
        }
      }
      uint64_t v37 = (void *)*a5;
      if (a4)
      {
        uint64_t v27 = (void *)(v37[7] + 8 * result);
        uint64_t v29 = *v27 + v10;
        if (__OFADD__(*v27, v10)) {
          goto LABEL_24;
        }
      }
      else
      {
        v37[(result >> 6) + 8] |= 1 << result;
        *(unsigned char *)(v37[6] + result) = v9;
        *(void *)(v37[7] + 8 * result) = v10;
        uint64_t v28 = v37[2];
        uint64_t v27 = v37 + 2;
        uint64_t v29 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          break;
        }
      }
      *uint64_t v27 = v29;
      unsigned __int8 v9 = sub_10055A034();
      uint64_t v10 = v30;
      if (v9 == 9) {
        goto LABEL_14;
      }
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10015AC54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(unsigned char *)a2 = *(unsigned char *)result;
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_10015AC68(uint64_t a1)
{
  if (qword_1007F6A30 != -1) {
LABEL_81:
  }
    swift_once();
  uint64_t v2 = (char *)off_1007FFAA8;
  uint64_t v3 = *((void *)off_1007FFAA8 + 2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (char *)off_1007FFAA8 + 32;
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  unint64_t v51 = v2 + 32;
  uint64_t v48 = a1;
  BOOL v49 = v2;
  uint64_t v47 = v3;
  while (1)
  {
    if (v5 >= *((void *)v2 + 2))
    {
      __break(1u);
      goto LABEL_81;
    }
    uint64_t v6 = &v4[16 * v5];
    uint64_t v7 = *(void *)v6;
    uint64_t v8 = *((void *)v6 + 1);
    swift_bridgeObjectRetain();
    uint64_t v9 = Notification.userInfo.getter();
    if (v9) {
      break;
    }
    swift_bridgeObjectRelease();
    long long v55 = 0u;
    long long v56 = 0u;
LABEL_5:
    sub_10001457C((uint64_t)&v55, &qword_1007FAD50);
LABEL_6:
    if (++v5 == v3)
    {
      uint64_t v46 = 0;
      goto LABEL_77;
    }
  }
  uint64_t v10 = v9;
  v54[9] = v7;
  v54[10] = v8;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_10001B738((uint64_t)v54), (v12 & 1) != 0))
  {
    sub_10001B648(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v55);
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10001DF0C((uint64_t)v54);
  if (!*((void *)&v56 + 1)) {
    goto LABEL_5;
  }
  sub_100010218(&qword_1007F9C00);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_6;
  }
  if ((v54[0] & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001B284(0, (unint64_t *)&qword_100800A40);
    sub_10015D058((unint64_t *)&qword_1007FD600, (unint64_t *)&qword_100800A40);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v15 = v57;
    uint64_t v14 = v58;
    uint64_t v16 = v59;
    uint64_t v17 = v60;
    unint64_t v18 = v61;
  }
  else
  {
    uint64_t v19 = -1 << *(unsigned char *)(v54[0] + 32);
    uint64_t v14 = v54[0] + 56;
    uint64_t v20 = ~v19;
    uint64_t v21 = -v19;
    if (v21 < 64) {
      uint64_t v22 = ~(-1 << v21);
    }
    else {
      uint64_t v22 = -1;
    }
    unint64_t v18 = v22 & *(void *)(v54[0] + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v16 = v20;
    uint64_t v17 = 0;
    uint64_t v15 = result;
  }
  int64_t v52 = (unint64_t)(v16 + 64) >> 6;
  uint64_t v50 = v14;
  while (2)
  {
    if (v15 < 0)
    {
      uint64_t v26 = __CocoaSet.Iterator.next()();
      if (!v26) {
        goto LABEL_72;
      }
      *(void *)&long long v55 = v26;
      sub_10001B284(0, (unint64_t *)&qword_100800A40);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v27 = (id)v54[0];
      swift_unknownObjectRelease();
      uint64_t v25 = v17;
      uint64_t v23 = v18;
      if (!v27) {
        goto LABEL_72;
      }
    }
    else
    {
      if (v18)
      {
        uint64_t v23 = (v18 - 1) & v18;
        unint64_t v24 = __clz(__rbit64(v18)) | (v17 << 6);
        uint64_t v25 = v17;
      }
      else
      {
        int64_t v28 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
          return result;
        }
        if (v28 >= v52) {
          goto LABEL_72;
        }
        unint64_t v29 = *(void *)(v14 + 8 * v28);
        uint64_t v25 = v17 + 1;
        if (!v29)
        {
          uint64_t v25 = v17 + 2;
          if (v17 + 2 >= v52) {
            goto LABEL_72;
          }
          unint64_t v29 = *(void *)(v14 + 8 * v25);
          if (!v29)
          {
            uint64_t v25 = v17 + 3;
            if (v17 + 3 >= v52) {
              goto LABEL_72;
            }
            unint64_t v29 = *(void *)(v14 + 8 * v25);
            if (!v29)
            {
              uint64_t v25 = v17 + 4;
              if (v17 + 4 >= v52) {
                goto LABEL_72;
              }
              unint64_t v29 = *(void *)(v14 + 8 * v25);
              if (!v29)
              {
                uint64_t v25 = v17 + 5;
                if (v17 + 5 >= v52) {
                  goto LABEL_72;
                }
                unint64_t v29 = *(void *)(v14 + 8 * v25);
                if (!v29)
                {
                  uint64_t v25 = v17 + 6;
                  if (v17 + 6 >= v52) {
                    goto LABEL_72;
                  }
                  unint64_t v29 = *(void *)(v14 + 8 * v25);
                  if (!v29)
                  {
                    uint64_t v30 = v17 + 7;
                    while (v52 != v30)
                    {
                      unint64_t v29 = *(void *)(v14 + 8 * v30++);
                      if (v29)
                      {
                        uint64_t v25 = v30 - 1;
                        goto LABEL_47;
                      }
                    }
LABEL_72:
                    sub_100082D3C();
                    swift_bridgeObjectRelease();
                    a1 = v48;
                    uint64_t v2 = v49;
                    uint64_t v3 = v47;
                    goto LABEL_6;
                  }
                }
              }
            }
          }
        }
LABEL_47:
        uint64_t v23 = (v29 - 1) & v29;
        unint64_t v24 = __clz(__rbit64(v29)) + (v25 << 6);
      }
      id v27 = *(id *)(*(void *)(v15 + 48) + 8 * v24);
      if (!v27) {
        goto LABEL_72;
      }
    }
    unint64_t v53 = v23;
    if (qword_1007F6A38 != -1) {
      swift_once();
    }
    uint64_t v31 = off_1007FFAB0;
    id v32 = [v27 entity];
    id v33 = [v32 name];

    if (v33)
    {
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      if (!v31[2])
      {
LABEL_22:

LABEL_23:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v17 = v25;
        unint64_t v18 = v53;
        continue;
      }
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v36 = 0;
      if (!v31[2]) {
        goto LABEL_22;
      }
    }
    break;
  }
  Hasher.init(_seed:)();
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v37 = Hasher._finalize()();
  uint64_t v38 = -1 << *((unsigned char *)v31 + 32);
  unint64_t v39 = v37 & ~v38;
  uint64_t v40 = (char *)(v31 + 7);
  if (((*(void *)((char *)v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v39) & 1) == 0)
  {

    uint64_t v4 = v51;
    goto LABEL_23;
  }
  uint64_t v41 = ~v38;
  uint64_t v42 = v31[6];
  while (2)
  {
    unint64_t v43 = (void *)(v42 + 16 * v39);
    uint64_t v44 = v43[1];
    if (v44)
    {
      if (v36)
      {
        BOOL v45 = *v43 == v34 && v44 == v36;
        if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {

          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
      }
      goto LABEL_61;
    }
    if (v36)
    {
LABEL_61:
      unint64_t v39 = (v39 + 1) & v41;
      if (((*(void *)&v40[(v39 >> 3) & 0xFFFFFFFFFFFFFF8] >> v39) & 1) == 0)
      {

        uint64_t v14 = v50;
        uint64_t v4 = v51;
        goto LABEL_23;
      }
      continue;
    }
    break;
  }

LABEL_76:
  sub_100082D3C();
  swift_bridgeObjectRelease();
  uint64_t v46 = 1;
LABEL_77:
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t sub_10015B2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = *(void *)(v6 + 64);
  v3[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Calendar();
  v3[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[16] = v8;
  v3[17] = *(void *)(v8 + 64);
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_10015B448, 0, 0);
}

uint64_t sub_10015B448()
{
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v25 = v0[17];
  uint64_t v4 = v0[11];
  uint64_t v23 = v0[12];
  uint64_t v24 = v0[14];
  uint64_t v27 = v0[9];
  uint64_t v28 = v0[8];
  uint64_t v29 = v0[10];
  uint64_t v21 = v0[6];
  uint64_t v22 = v0[7];
  uint64_t v26 = (void *)v0[5];
  uint64_t v19 = (void *)swift_allocObject();
  v0[19] = v19;
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = 0;
  v19[5] = _swiftEmptyArrayStorage;
  id v20 = [objc_allocWithZone((Class)NLTokenizer) initWithUnit:0];
  v0[20] = v20;
  sub_100010218(&qword_1007FFBA0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1006D6280;
  *(void *)(v5 + 32) = NLTagSchemeScript;
  id v6 = objc_allocWithZone((Class)NLTagger);
  type metadata accessor for NLTagScheme(0);
  uint64_t v7 = NLTagSchemeScript;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithTagSchemes:isa];
  v0[21] = v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v21, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v24, v22, v4);
  unint64_t v10 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v11 = (v25 + *(unsigned __int8 *)(v23 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  char v12 = (char *)swift_allocObject();
  v0[22] = v12;
  *((void *)v12 + 2) = v26;
  *((void *)v12 + 3) = v20;
  *((void *)v12 + 4) = v9;
  *((void *)v12 + 5) = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v12[v10], v1, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(&v12[v11], v24, v4);
  (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v29, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v28);
  id v13 = v26;
  id v14 = v20;
  id v15 = v9;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[23] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10015B774;
  uint64_t v17 = v0[10];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v16, v17, sub_10015D3A8, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_10015B774()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 72);
  uint64_t v3 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10015B8E8, 0, 0);
}

uint64_t sub_10015B8E8()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 152);

  swift_beginAccess();
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[5];
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v7(v3, v4, v5, v6);
}

uint64_t sub_10015B9C8(uint64_t a1)
{
  v1[9] = a1;
  uint64_t v2 = type metadata accessor for String.StandardComparator();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[14] = v3;
  v1[15] = *(void *)(v3 - 8);
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_10015BAF4, 0, 0);
}

uint64_t sub_10015BAF4()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v4 = (void *)v0[9];
  uint64_t v5 = swift_allocObject();
  v0[17] = v5;
  *(void *)(v5 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v6 = swift_allocObject();
  v0[18] = v6;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  id v7 = v4;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10015BC48;
  uint64_t v9 = v0[16];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v8, v9, sub_10015CFF8, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_10015BC48()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 16sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
  swift_release();
  if (v0) {
    uint64_t v3 = sub_10015C0CC;
  }
  else {
    uint64_t v3 = sub_10015BDCC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10015BDCC()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[13];
  uint64_t v10 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  swift_beginAccess();
  v0[5] = *(void *)(v1 + 16);
  sub_100010218(&qword_1007FFB58);
  sub_100010218(&qword_1007FFB60);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1006D6270;
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  SortDescriptor.init<A>(_:order:)();
  swift_getKeyPath();
  static String.StandardComparator.localizedStandard.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v2, v4);
  SortDescriptor.init(_:comparator:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v0[6] = v5;
  sub_100010218(&qword_1007FFB68);
  sub_100010218(&qword_1007FFB70);
  sub_100014488(&qword_1007FFB78, &qword_1007FFB68);
  sub_100014488(&qword_1007FFB80, &qword_1007FFB70);
  sub_100014488(&qword_1007FFB88, &qword_1007FFB60);
  uint64_t v6 = Sequence.sorted<A, B>(using:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v7 = sub_100141B38(v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void *))v0[1];
  return v8(v7);
}

uint64_t sub_10015C0CC()
{
  if (qword_1007F6A28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100026A54(v1, (uint64_t)qword_1007FFA90);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch events for streaks: %@", v4, 0xCu);
    sub_100010218((uint64_t *)&unk_1007FC430);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[13];
  uint64_t v16 = v0[12];
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  swift_beginAccess();
  v0[5] = *(void *)(v7 + 16);
  sub_100010218(&qword_1007FFB58);
  sub_100010218(&qword_1007FFB60);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1006D6270;
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  SortDescriptor.init<A>(_:order:)();
  swift_getKeyPath();
  static String.StandardComparator.localizedStandard.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v16, v8, v9);
  SortDescriptor.init(_:comparator:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v0[6] = v11;
  sub_100010218(&qword_1007FFB68);
  sub_100010218(&qword_1007FFB70);
  sub_100014488(&qword_1007FFB78, &qword_1007FFB68);
  sub_100014488(&qword_1007FFB80, &qword_1007FFB70);
  sub_100014488(&qword_1007FFB88, &qword_1007FFB60);
  uint64_t v12 = Sequence.sorted<A, B>(using:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v13 = sub_100141B38(v12);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v14 = (uint64_t (*)(void *))v0[1];
  return v14(v13);
}

uint64_t sub_10015C554(uint64_t a1)
{
  v1[4] = a1;
  sub_100010218(&qword_1007FFB40);
  v1[5] = swift_task_alloc();
  v1[6] = sub_100010218(&qword_1007FC8D0);
  v1[7] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for InsightsDataManager.TopAssetCategory(0);
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  sub_100010218(&qword_1007FFB48);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = sub_100010218(&qword_1007FC8B8);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = sub_100010218((uint64_t *)&unk_1007FF080);
  v1[17] = swift_task_alloc();
  v1[18] = sub_100010218(&qword_1007FC8C8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  return _swift_task_switch(sub_10015C774, 0, 0);
}

uint64_t sub_10015C774()
{
  uint64_t v86 = v0;
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[4];
  uint64_t v66 = type metadata accessor for InsightsDataManager.EntrySummaryGroup(0);
  uint64_t v67 = v6 + *(int *)(v66 + 28);
  sub_10001B220(v67, v3, (uint64_t *)&unk_1007FF080);
  sub_10001B220(v3, v1, (uint64_t *)&unk_1007FF080);
  uint64_t v71 = v5;
  uint64_t v7 = sub_100650E60(*(void *)(v3 + *(int *)(v5 + 32)));
  uint64_t v9 = v8;
  char v11 = v10;
  sub_10001457C(v3, (uint64_t *)&unk_1007FF080);
  uint64_t v12 = v1 + *(int *)(v4 + 36);
  *(void *)uint64_t v12 = v7;
  *(void *)(v12 + 8) = v9;
  *(unsigned char *)(v12 + 16) = v11 & 1;
  uint64_t result = sub_10002C4EC(v1, v2, &qword_1007FC8C8);
  uint64_t v69 = v2;
  uint64_t v14 = v2 + *(int *)(v4 + 36);
  if (*(unsigned char *)(v14 + 16)) {
    goto LABEL_34;
  }
  uint64_t v15 = 0;
  uint64_t v16 = *(int *)(v71 + 32);
  uint64_t v17 = v0[9];
  uint64_t v80 = v0[8];
  unint64_t v83 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  unint64_t v18 = (uint64_t *)&_swiftEmptyDictionarySingleton;
  uint64_t v77 = v17;
  uint64_t v81 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v75 = v14;
  uint64_t v76 = v0[13];
  uint64_t v68 = v16;
  while (1)
  {
    uint64_t v19 = *(void *)(v69 + v16);
    if (*(_DWORD *)(v19 + 36) != *(_DWORD *)(v14 + 8))
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }
    uint64_t v20 = *(void *)v14;
    uint64_t v21 = 1 << *(unsigned char *)(v19 + 32);
    uint64_t v70 = v15;
    if (*(void *)v14 == v21) {
      break;
    }
    if (v20 < 0 || v20 >= v21) {
      goto LABEL_47;
    }
    if (((*(void *)(v19 + 8 * ((unint64_t)v20 >> 6) + 64) >> v20) & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v22 = v0[14];
    uint64_t v23 = (void *)(v22 + *(int *)(v76 + 48));
    uint64_t v78 = v0[20];
    uint64_t v72 = *(void *)(*(void *)(v19 + 48) + 8 * v20);
    uint64_t v73 = v0[15];
    uint64_t v24 = v0[17];
    uint64_t v25 = (uint64_t *)(*(void *)(v19 + 56) + 32 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v29 = v25[2];
    uint64_t v28 = v25[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10066AC8C(v72, v22);
    void *v23 = v27;
    v23[1] = v26;
    v23[2] = v29;
    v23[3] = v28;
    sub_10001B220(v22, v73, &qword_1007FC8E0);
    uint64_t v30 = (void *)(v73 + *(int *)(v76 + 48));
    void *v30 = v27;
    v30[1] = v26;
    v30[2] = v29;
    v30[3] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001457C(v22, &qword_1007FC8B8);
    sub_10001B220(v78, v24, (uint64_t *)&unk_1007FF080);
    uint64_t result = *(void *)v75;
    if ((*(void *)v75 & 0x8000000000000000) != 0) {
      goto LABEL_49;
    }
    uint64_t v31 = *(void *)(v24 + *(int *)(v71 + 32));
    if (result >= -(-1 << *(unsigned char *)(v31 + 32))) {
      goto LABEL_49;
    }
    if (((*(void *)(v31 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
      goto LABEL_50;
    }
    if (*(_DWORD *)(v31 + 36) != *(_DWORD *)(v75 + 8)) {
      goto LABEL_51;
    }
    uint64_t v32 = v0[17];
    uint64_t v33 = _HashTable.occupiedBucket(after:)();
    uint64_t v34 = *(unsigned int *)(v31 + 36);
    *(void *)uint64_t v75 = v33;
    *(void *)(v75 + 8) = v34;
    *(unsigned char *)(v75 + 16) = 0;
    sub_10001457C(v32, (uint64_t *)&unk_1007FF080);
    uint64_t v35 = (uint64_t *)v30[3];
    uint64_t v74 = v30[1];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85[0] = (uint64_t)v18;
    unint64_t v37 = v35[2];
    uint64_t v79 = v35;
    swift_bridgeObjectRetain();
    unint64_t v38 = 0;
    while (1)
    {
      if (v38 == v37)
      {
        uint64_t v43 = 1;
        unint64_t v38 = v37;
      }
      else
      {
        if (v38 >= v37) {
          goto LABEL_40;
        }
        sub_1001545E0((uint64_t)v79+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v38, v0[12], type metadata accessor for InsightsDataManager.TopAssetCategory);
        uint64_t v43 = 0;
        ++v38;
      }
      uint64_t v44 = v0[11];
      uint64_t v45 = v0[12];
      uint64_t v46 = v0[8];
      (*v83)(v45, v43, 1, v46);
      sub_10002C4EC(v45, v44, &qword_1007FFB48);
      if ((*v81)(v44, 1, v46) == 1) {
        break;
      }
      uint64_t v47 = v0[10];
      sub_10015DC8C(v0[11], v47, type metadata accessor for InsightsDataManager.TopAssetCategory);
      unsigned __int8 v48 = *(unsigned char *)(v47 + *(int *)(v80 + 20));
      uint64_t v49 = *(void *)(v47 + *(int *)(v80 + 24));
      sub_1001546C4(v47, type metadata accessor for InsightsDataManager.TopAssetCategory);
      uint64_t v35 = v18;
      unint64_t v51 = sub_10001BB90(v48);
      uint64_t v52 = v18[2];
      BOOL v53 = (v50 & 1) == 0;
      uint64_t v54 = v52 + v53;
      if (__OFADD__(v52, v53))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      char v55 = v50;
      if (v18[3] >= v54)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v50 & 1) == 0) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v35 = v85;
          sub_100549EC8();
          unint64_t v18 = (uint64_t *)v85[0];
          if ((v55 & 1) == 0) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        sub_10054639C(v54, isUniquelyReferenced_nonNull_native & 1);
        unint64_t v18 = (uint64_t *)v85[0];
        uint64_t v35 = (uint64_t *)v85[0];
        unint64_t v56 = sub_10001BB90(v48);
        if ((v55 & 1) != (v57 & 1)) {
          goto LABEL_35;
        }
        unint64_t v51 = v56;
        if ((v55 & 1) == 0)
        {
LABEL_13:
          v18[(v51 >> 6) + 8] |= 1 << v51;
          *(unsigned char *)(v18[6] + v51) = v48;
          *(void *)(v18[7] + 8 * v51) = v49;
          unint64_t v39 = v18 + 2;
          uint64_t v40 = v18[2];
          BOOL v41 = __OFADD__(v40, 1);
          uint64_t v42 = v40 + 1;
          if (v41) {
            goto LABEL_41;
          }
          goto LABEL_14;
        }
      }
      unint64_t v39 = (uint64_t *)(v18[7] + 8 * v51);
      uint64_t v42 = *v39 + v49;
      if (__OFADD__(*v39, v49)) {
        goto LABEL_42;
      }
LABEL_14:
      uint64_t *v39 = v42;
      char isUniquelyReferenced_nonNull_native = 1;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = v70 + v74;
    if (__OFADD__(v70, v74)) {
      goto LABEL_52;
    }
    uint64_t result = sub_10001457C(v0[15], &qword_1007FC8E0);
    uint64_t v14 = v75;
    uint64_t v16 = v68;
    if (*(unsigned char *)(v75 + 16))
    {
LABEL_34:
      __break(1u);
LABEL_35:
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
  }
  sub_10001457C(v0[20], &qword_1007FC8C8);
  uint64_t v58 = swift_bridgeObjectRetain();
  v85[0] = sub_100141C3C(v58);
  swift_bridgeObjectRetain();
  sub_10015496C(v85, type metadata accessor for InsightsDataManager.TopAssetCategory, (uint64_t (*)(uint64_t))sub_1000F3FD0, (uint64_t (*)(void *))sub_100154A9C);
  uint64_t v60 = v0[6];
  uint64_t v59 = v0[7];
  uint64_t v61 = v0[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = (uint64_t *)v85[0];
  sub_10001B220(v67, v61, (uint64_t *)&unk_1007FF080);
  sub_10001B220(v61, v59, (uint64_t *)&unk_1007FF080);
  unint64_t v62 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v59 + *(int *)(v60 + 44));
  *unint64_t v62 = sub_100152D90;
  v62[1] = 0;
  sub_10001457C(v61, &qword_1007FFB40);
  v85[0] = sub_1000B42C0(v59);
  sub_10015496C(v85, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(uint64_t))sub_1000F3F44, (uint64_t (*)(void *))sub_10015554C);
LABEL_43:
  uint64_t v84 = v35;
  uint64_t v63 = v0[4];
  uint64_t v82 = v85[0];
  sub_10001457C(v0[7], &qword_1007FC8D0);
  uint64_t v64 = sub_100141F84(v63 + *(int *)(v66 + 24));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v65 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v0[1];
  return v65(v84, v82, v70, v64);
}

uint64_t sub_10015CF80()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10015CFB8()
{
  swift_release();

  return swift_deallocObject();
}

void sub_10015CFF8()
{
  sub_100152EE8(*(id **)(v0 + 16), *(uint64_t (**)@<X0>(uint64_t *@<X8>))(v0 + 24));
}

uint64_t sub_10015D014()
{
  return sub_10015D058((unint64_t *)&qword_1007FD600, (unint64_t *)&qword_100800A40);
}

uint64_t sub_10015D058(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001B284(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015D09C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if ((*(void *)a1 & 0xC000000000000001) != 0) {
    uint64_t result = __CocoaSet.count.getter();
  }
  else {
    uint64_t result = *(void *)(*(void *)a1 + 16);
  }
  *a2 = result;
  return result;
}

const char *sub_10015D0E4()
{
  return "poiCategory";
}

id sub_10015D0F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 poiCategory];
  *a2 = result;
  return result;
}

uint64_t sub_10015D12C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10015D158()
{
  return swift_deallocObject();
}

uint64_t sub_10015D190()
{
  return swift_deallocObject();
}

id sub_10015D1A4()
{
  return sub_100153BC8(*(void **)(v0 + 16));
}

uint64_t sub_10015D1C0()
{
  return swift_deallocObject();
}

uint64_t sub_10015D1D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10015D200()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10015D238()
{
  uint64_t v1 = type metadata accessor for Calendar();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v3, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v0 + v7, v5);

  return swift_deallocObject();
}

void sub_10015D3A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Calendar() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  sub_10014DF30(*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), v0 + v2, v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_10015D484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002650F8(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48));
}

uint64_t sub_10015D494()
{
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v15 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v12 = (*(void *)(v1 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = type metadata accessor for Calendar();
  uint64_t v2 = *(void *)(v14 - 8);
  unint64_t v3 = (v12 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for DateComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7 + 8) & ~v7;
  uint64_t v9 = (*(void *)(v6 + 64) + v7 + v8) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v13, v15);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v14);
  swift_release();
  char v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v0 + v8, v5);
  v10(v0 + v9, v5);

  return swift_deallocObject();
}

void sub_10015D6C4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for Calendar() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for DateComponents() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  sub_10014ECD8(v0 + v2, *(char **)(v0 + v3), (void (*)(char *, uint64_t))(v0 + v5), *(void *)(v0 + v6), v0 + ((v6 + v8 + 8) & ~v8), v0 + ((*(void *)(v7 + 64) + v8 + ((v6 + v8 + 8) & ~v8)) & ~v8));
}

const char *sub_10015D844()
{
  return "createdDate";
}

uint64_t sub_10015D850@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150ED0(a1, (SEL *)&selRef_createdDate, a2);
}

void sub_10015D870(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_10015D890()
{
  return "updatedDate";
}

uint64_t sub_10015D89C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150ED0(a1, (SEL *)&selRef_updatedDate, a2);
}

void sub_10015D8BC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10015D8DC()
{
  return static Date.< infix(_:_:)() & 1;
}

uint64_t sub_10015D90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StreakSummary();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015D970(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10015D9B8()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Calendar();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

void sub_10015DB10(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Calendar() - 8);
  sub_10014B0B4(*(void **)(v1 + 16), (void (*)(void, void, void))(v1 + v4), (void (**)(uint64_t, uint64_t))(v1+ ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))), a1);
}

uint64_t sub_10015DBE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10014DCF8(a1, *(void *)(v2 + 16), a2);
}

uint64_t _s4YearVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FFCE0);
}

uint64_t sub_10015DC0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014DE2C(a1, a2);
}

uint64_t _s5MonthVMa(uint64_t a1)
{
  return sub_10003352C(a1, qword_1007FFD78);
}

uint64_t sub_10015DC4C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100150ED0(a1, (SEL *)&selRef_entryDate, a2);
}

void sub_10015DC6C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10015DC8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10015DCF4()
{
  uint64_t v1 = sub_100010218(&qword_1007FFC18);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10015DDE8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100010218(&qword_1007FFC18) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = sub_10002C194;
  return sub_100143520(a1, v7, v8, v9, v10, v11);
}

void sub_10015DF20()
{
}

uint64_t sub_10015DF44(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100052588;
  return sub_10014393C(a1, a2, v6, v7, v8);
}

uint64_t sub_10015E008()
{
  uint64_t v1 = sub_100010218(&qword_1007FFC18);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10015E0EC()
{
  uint64_t v2 = *(void *)(sub_100010218(&qword_1007FFC18) - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100052588;
  return sub_100143C44(v3, v4, v5, v6);
}

uint64_t sub_10015E214()
{
  uint64_t v2 = *(void *)(sub_100010218(&qword_1007FFC18) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100052588;
  return sub_1001445DC(v3, v4, v5);
}

uint64_t sub_10015E2FC()
{
  uint64_t v1 = sub_100010218(&qword_1007FFC18);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_10015E3CC()
{
  uint64_t v2 = *(void *)(sub_100010218(&qword_1007FFC18) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100052588;
  return sub_100144C84(v3, v4, v5);
}

uint64_t sub_10015E4B0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10015E4E8()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100052588;
  uint64_t v4 = (uint64_t (*)(int *))((char *)&dword_1007FFC78 + dword_1007FFC78);
  return v4(v2);
}

uint64_t *sub_10015E594(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10015E690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10015E720(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10015E7CC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10015E890(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v1sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = *(void *)((char *)a2 + v10);
  return a1;
}

void *sub_10015E930(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10015E9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015E9F8);
}

uint64_t sub_10015E9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10015EABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015EAD0);
}

uint64_t sub_10015EAD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexSet();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10015EB90()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10015EC3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10015ED08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for IndexSet();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_10015ED70(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_10015EDEC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *sub_10015EE68(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10015EEE4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10015EF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015EF74);
}

uint64_t sub_10015EF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for IndexSet();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10015EFE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015EFF8);
}

uint64_t sub_10015EFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_10015F06C()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10015F114(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a1;
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v31 = sub_100043220(*(unsigned char *)(v2 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_type));
  unint64_t v37 = v31;
  uint64_t v38 = v12;
  uint64_t v36 = v12;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 0x636965682ELL;
  v13._object = (void *)0xE500000000000000;
  String.append(_:)(v13);
  unint64_t v14 = v37;
  uint64_t v15 = v38;
  uint64_t v32 = a2;
  sub_100478818((uint64_t)v11);
  uint64_t v33 = v15;
  unint64_t v34 = v14;
  unint64_t v37 = v14;
  uint64_t v38 = v15;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  sub_100014344();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v16 = [self defaultManager];
  URL.path.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v9) = [v16 fileExistsAtPath:v17];

  if ((v9 & 1) == 0)
  {
    double v18 = *(double *)(v32 + *(int *)(type metadata accessor for ExportOptions() + 48));
    id v19 = [self configurationWithPointSize:v18];
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [self _systemImageNamed:v20 withConfiguration:v19];

    if (v21)
    {
      id v22 = [self quaternaryLabelColor];
      uint64_t v23 = (UIImage *)[v21 imageWithTintColor:v22];

      if (v23)
      {
        uint64_t v24 = UIImageHEICRepresentation(v23);
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v28 = v27;

          Data.write(to:options:)();
          sub_100040DD0(v26, v28);
          return v34;
        }
      }
    }

    return v34;
  }
  swift_bridgeObjectRelease();
  return v34;
}

void sub_10015F4FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s10PhotoAssetC9PhotoDataVMa(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010218((uint64_t *)&unk_100804080);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView);
  [v9 setAlpha:0.0];
  [*(id *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView) setHidden:0];
  uint64_t v10 = OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset;
  uint64_t v11 = *(char **)(v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset);
  if (!v11) {
    goto LABEL_5;
  }
  NSString v12 = *(NSString *)&v11[OBJC_IVAR____TtCC7Journal10Journaling10PhotoAsset_metadata];
  if (!v12) {
    goto LABEL_6;
  }
  Swift::String v13 = v11;
  swift_retain();
  sub_1000395AC((uint64_t)v8);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_10001457C((uint64_t)v8, (uint64_t *)&unk_100804080);

LABEL_5:
    NSString v12 = 0;
    goto LABEL_6;
  }
  sub_1001618E0((uint64_t)v8, (uint64_t)v5);
  sub_10001457C((uint64_t)v8, (uint64_t *)&unk_100804080);
  uint64_t v18 = *(void *)&v5[*(int *)(v2 + 24) + 8];
  swift_bridgeObjectRetain();
  sub_100161944((uint64_t)v5);

  if (!v18) {
    goto LABEL_5;
  }
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  [v9 setAccessibilityValue:v12];

  sub_10015FF78();
  uint64_t v14 = *(void *)(v1 + v10);
  if (v14)
  {
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v16 = (void (**)())(v14 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_didUpdate);
    uint64_t v17 = *(void *)(v14 + OBJC_IVAR____TtCC7Journal10Journaling5Asset_didUpdate);
    *id v16 = sub_1001618D8;
    v16[1] = (void (*)())v15;
    sub_10001ABB8(v17);
  }
}

void sub_10015F790()
{
  uint64_t v0 = _s10PhotoAssetC9PhotoDataVMa(0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100010218((uint64_t *)&unk_100804080);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_12;
  }
  uint64_t v8 = (void *)Strong;
  id v9 = *(id *)(Strong + OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView);

  swift_beginAccess();
  uint64_t v10 = swift_unknownObjectWeakLoadStrong();
  NSString v11 = (NSString)v10;
  if (v10)
  {
    NSString v12 = *(void **)(v10 + OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset);
    Swift::String v13 = v12;

    if (v12)
    {
      NSString v11 = *(NSString *)&v13[OBJC_IVAR____TtCC7Journal10Journaling10PhotoAsset_metadata];
      if (!v11)
      {

        goto LABEL_11;
      }
      swift_retain();
      sub_1000395AC((uint64_t)v6);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0))
      {
        sub_10001457C((uint64_t)v6, (uint64_t *)&unk_100804080);
      }
      else
      {
        sub_1001618E0((uint64_t)v6, (uint64_t)v3);
        sub_10001457C((uint64_t)v6, (uint64_t *)&unk_100804080);
        uint64_t v14 = *(void *)&v3[*(int *)(v0 + 24) + 8];
        swift_bridgeObjectRetain();
        sub_100161944((uint64_t)v3);

        if (v14)
        {
          NSString v11 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    NSString v11 = 0;
  }
LABEL_11:
  [v9 setAccessibilityValue:v11];

LABEL_12:
  swift_beginAccess();
  uint64_t v15 = swift_unknownObjectWeakLoadStrong();
  if (v15)
  {
    id v16 = (void *)v15;
    sub_10015FF78();
  }
}

id sub_10015FB48(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView;
  id v4 = objc_allocWithZone((Class)UIImageView);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  *(void *)&v5[OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset] = 0;
  uint64_t v6 = &v5[OBJC_IVAR____TtC7Journal14PhotoAssetView_latestImageRequestID];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for PhotoAssetView();
  [super initWithCoder:a1];
  id v9 = v8;
  if (v8)
  {
    id v10 = v8;
    sub_10015FC78();
  }
  return v9;
}

void sub_10015FC78()
{
  [v0 addSubview:*(void *)&v0[OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView]];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView];
  [v0 addSubview:v1];
  [v1 setAlpha:0.0];
  [v1 setHidden:0];
  [v1 setContentMode:2];
  [v1 setIsAccessibilityElement:1];
  UIAccessibilityTraits v2 = UIAccessibilityTraitImage;
  unint64_t v3 = (unint64_t)[v1 accessibilityTraits];
  if ((v2 & ~v3) != 0) {
    UIAccessibilityTraits v4 = v2;
  }
  else {
    UIAccessibilityTraits v4 = 0;
  }
  [v1 setAccessibilityTraits:v4 | v3];
  [v1 setAccessibilityIgnoresInvertColors:1];
  if (qword_1007F7AB8 != -1) {
    swift_once();
  }
  NSString v5 = String._bridgeToObjectiveC()();
  [v1 setAccessibilityLabel:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v0 setAccessibilityIdentifier:v6];
}

id sub_10015FE3C(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for PhotoAssetView();
  return [super a3];
}

void sub_10015FE8C(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7)
{
  v16.receiver = a1;
  v16.super_class = (Class)type metadata accessor for PhotoAssetView();
  objc_super v12 = *a7;
  Swift::String v13 = (char *)v16.receiver;
  [super v12:a2, a3, a4, a5];
  id v14 = *(id *)&v13[OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView];
  [v13 bounds];
  [v14 setFrame:];

  uint64_t v15 = *(void **)&v13[OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView];
  [v13 bounds];
  [v15 setFrame:];
}

void sub_10015FF78()
{
  uint64_t v1 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = &v43[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  __chkstk_darwin(v7);
  id v9 = &v43[-v8];
  uint64_t v10 = type metadata accessor for Date();
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v15 = *(char **)(v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset);
  if (!v15) {
    return;
  }
  uint64_t v47 = &v43[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = v14;
  uint64_t v51 = v4;
  BOOL v53 = &v43[-v12];
  uint64_t v49 = v13;
  unint64_t v16 = *(void *)&v15[OBJC_IVAR____TtCC7Journal10Journaling5Asset_attachments];
  id v52 = v15;
  if (v16 >> 62)
  {
    uint64_t v40 = v15;
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v41)
    {
LABEL_4:
      uint64_t v19 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType);
      uint64_t v20 = OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType;
      uint64_t v50 = v10;
      switch(v19)
      {
        case 5:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        default:
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v21)
          {
LABEL_10:
            if (qword_1007F6A60 != -1) {
              swift_once();
            }
            id v22 = &qword_10083CF68;
          }
          else
          {
            if (qword_1007F6A58 != -1) {
              swift_once();
            }
            id v22 = &qword_10083CF60;
          }
          id v46 = (id)*v22;
          Date.init()();
          UUID.init()();
          uint64_t v23 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16);
          uint64_t v45 = v9;
          uint64_t v24 = v51;
          v23(v3, v9, v51);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v24);
          uint64_t v25 = v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_latestImageRequestID;
          swift_beginAccess();
          sub_10001ACF4((uint64_t)v3, v25);
          swift_endAccess();
          unsigned int v44 = *(unsigned __int8 *)(v0 + v20);
          uint64_t v26 = swift_allocObject();
          swift_unknownObjectWeakInit();
          unint64_t v27 = v47;
          unint64_t v28 = v9;
          uint64_t v29 = v51;
          v23(v47, v28, v51);
          uint64_t v30 = v48;
          uint64_t v31 = v49;
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(v49 + 16))(v48, v53, v50);
          unint64_t v32 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
          unint64_t v33 = (v6 + *(unsigned __int8 *)(v31 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = v26;
          (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v34 + v32, v27, v29);
          uint64_t v35 = v30;
          uint64_t v36 = v50;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 32))(v34 + v33, v35, v50);
          unint64_t v37 = self;
          swift_retain();
          id v38 = [v37 currentTraitCollection];
          unint64_t v39 = v46;
          sub_10017D574(v44, 0, 1, v46, v38, (uint64_t)sub_100161AF8, v34);

          swift_release();
          (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v45, v29);
          (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v53, v36);
          swift_release();
          break;
      }
      return;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v18 = v15;
    if (v17) {
      goto LABEL_4;
    }
  }
  id v42 = v52;
}

uint64_t sub_100160598(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  unint64_t v33 = a1;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v29 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v29);
  unint64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B284(0, (unint64_t *)&qword_100805AB0);
  uint64_t v32 = static OS_dispatch_queue.main.getter();
  uint64_t v13 = swift_allocObject();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectWeakInit();

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v30, v9);
  uint64_t v15 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v29);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v17 = (v11 + *(unsigned __int8 *)(v7 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v33;
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v18 + v16, v12, v9);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, v28, v15);
  aBlock[4] = sub_100161D30;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10017D530;
  aBlock[3] = &unk_10079B4E8;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v19;
  swift_retain();
  id v22 = v34;
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_1000E4FD0((unint64_t *)&qword_1007FBD10, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010218(&qword_100804DB0);
  sub_10001B1BC();
  uint64_t v24 = v35;
  uint64_t v23 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v25 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v38);
  swift_release();
  return swift_release();
}

void sub_100160A6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a4;
  uint64_t v65 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5);
  char v57 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v56 = (char *)&v56 - v8;
  uint64_t v9 = sub_100010218((uint64_t *)&unk_1007FC470);
  __chkstk_darwin(v9 - 8);
  uint64_t v58 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v64 = (char *)&v56 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v59 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100010218((uint64_t *)&unk_1007FEB40);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100010218(&qword_100800950);
  __chkstk_darwin(v19 - 8);
  id v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v56 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v56 - v26;
  swift_beginAccess();
  uint64_t Strong = (unsigned char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v29 = Strong;
    id v60 = a2;
    if (a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v27, v65, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
      uint64_t v30 = (uint64_t)&v29[OBJC_IVAR____TtC7Journal14PhotoAssetView_latestImageRequestID];
      swift_beginAccess();
      sub_10001B220(v30, (uint64_t)v24, &qword_100800950);
      uint64_t v31 = (uint64_t)&v18[*(int *)(v16 + 48)];
      sub_10001B220((uint64_t)v27, (uint64_t)v18, &qword_100800950);
      sub_10001B220((uint64_t)v24, v31, &qword_100800950);
      uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      if (v32((uint64_t)v18, 1, v13) == 1)
      {
        id v33 = v60;
        id v34 = v60;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        if (v32(v31, 1, v13) == 1)
        {
          sub_10001457C((uint64_t)v18, &qword_100800950);
LABEL_16:
          sub_1001614A8();
          uint64_t v43 = OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView;
          [*(id *)&v29[OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView] setImage:v33];
          char v44 = v29[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading];
          v29[OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading] = 1;
          if ((v44 & 1) == 0 && swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v45 = v29;
            sub_100491AF4();

            swift_unknownObjectRelease();
          }
          [*(id *)&v29[v43] setContentMode:2];
          swift_allocObject();
          swift_unknownObjectWeakInit();
          char v46 = 1;
          uint64_t v48 = v63;
          uint64_t v47 = (uint64_t)v64;
          uint64_t v49 = v62;
          switch(v29[OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType])
          {
            case 5:
              break;
            default:
              char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
              break;
          }
          swift_retain_n();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v61, v48);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v47, 0, 1, v48);
          if ((v46 & 1) == 0)
          {
            uint64_t v50 = v58;
            sub_10001B220(v47, v58, (uint64_t *)&unk_1007FC470);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v50, 1, v48) == 1)
            {
              sub_10001457C(v50, (uint64_t *)&unk_1007FC470);
LABEL_27:
              static Animation.easeIn(duration:)();
              sub_10001B284(0, (unint64_t *)&qword_100802730);
              static UIView.animate(_:changes:completion:)();
              swift_release();
              goto LABEL_28;
            }
            uint64_t v51 = v56;
            (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v56, v50, v48);
            id v52 = v57;
            static Date.now.getter();
            Date.timeIntervalSince(_:)();
            double v54 = v53;
            char v55 = *(void (**)(char *, uint64_t))(v49 + 8);
            v55(v52, v48);
            v55(v51, v48);
            if (v54 >= 0.1) {
              goto LABEL_27;
            }
          }
          sub_1001613CC();
LABEL_28:
          swift_release();
          swift_release();

          sub_10001457C(v47, (uint64_t *)&unk_1007FC470);
          swift_release();
          return;
        }
      }
      else
      {
        sub_10001B220((uint64_t)v18, (uint64_t)v21, &qword_100800950);
        if (v32(v31, 1, v13) != 1)
        {
          uint64_t v40 = v59;
          (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v59, v31, v13);
          sub_1000E4FD0((unint64_t *)&qword_1007FEB50, (void (*)(uint64_t))&type metadata accessor for UUID);
          id v41 = v60;
          LODWORD(v65) = dispatch thunk of static Equatable.== infix(_:_:)();
          id v42 = *(void (**)(char *, uint64_t))(v14 + 8);
          v42(v40, v13);
          sub_10001457C((uint64_t)v24, &qword_100800950);
          sub_10001457C((uint64_t)v27, &qword_100800950);
          v42(v21, v13);
          id v33 = v60;
          sub_10001457C((uint64_t)v18, &qword_100800950);
          if (v65) {
            goto LABEL_16;
          }
LABEL_20:

          return;
        }
        id v38 = v60;
        id v39 = v60;
        sub_10001457C((uint64_t)v24, &qword_100800950);
        sub_10001457C((uint64_t)v27, &qword_100800950);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
        id v33 = v38;
      }
      sub_10001457C((uint64_t)v18, (uint64_t *)&unk_1007FEB40);
      goto LABEL_20;
    }
  }
  swift_beginAccess();
  uint64_t v35 = swift_unknownObjectWeakLoadStrong();
  if (v35)
  {
    uint64_t v36 = (void *)v35;
    int v37 = *(unsigned __int8 *)(v35 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading);
    *(unsigned char *)(v35 + OBJC_IVAR____TtC7Journal16JournalAssetView_isAssetFinishedLoading) = 1;
    if (v37 == 1 || !swift_unknownObjectWeakLoadStrong())
    {
    }
    else
    {
      sub_100491AF4();

      swift_unknownObjectRelease();
    }
  }
}

void sub_1001613CC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = *(id *)(Strong + OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView);

    [v2 setAlpha:1.0];
  }
  swift_beginAccess();
  uint64_t v3 = swift_unknownObjectWeakLoadStrong();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = *(id *)(v3 + OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView);

    [v5 setHidden:1];
  }
}

void sub_1001614A8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset);
  if (v1)
  {
    unsigned __int8 v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType);
    id v3 = v1;
    sub_10048DD9C(v2, (uint64_t)v3, v9);
    sub_10012E2C4((uint64_t)v9, (uint64_t)v10);
    if (v11)
    {
      id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView), "layer"));
      if (qword_1007F6BC8 != -1) {
        swift_once();
      }
      double v5 = *(double *)&qword_10083D1A8;
      double v6 = unk_10083D1B0;
      double v8 = *((double *)&xmmword_10083D1B8 + 1);
      double v7 = *(double *)&xmmword_10083D1B8;
    }
    else
    {
      double v5 = *(double *)v10;
      double v6 = *(double *)&v10[1];
      double v7 = *(double *)&v10[2];
      double v8 = *(double *)&v10[3];
      id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + OBJC_IVAR____TtC7Journal14PhotoAssetView_assetImageView), "layer"));
    }
    [v4 setContentsRect:v5, v6, v7, v8];
  }
}

void sub_1001615EC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_fallbackView);
  unsigned __int8 v2 = *(void (**)(void, uint64_t))((swift_isaMask & *v1) + 0x58);
  uint64_t v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Journal16JournalAssetView_sizeType);
  id v4 = v1;
  v2(0, v3);

  sub_10015FF78();
}

void *sub_100161698()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_photoAsset);
  id v2 = v1;
  return v1;
}

uint64_t sub_1001616C8()
{
  return sub_10001457C(v0 + OBJC_IVAR____TtC7Journal14PhotoAssetView_latestImageRequestID, &qword_100800950);
}

id sub_100161714()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PhotoAssetView();
  return [super dealloc];
}

uint64_t sub_1001617A4()
{
  return type metadata accessor for PhotoAssetView();
}

uint64_t type metadata accessor for PhotoAssetView()
{
  uint64_t result = qword_1007FFDF0;
  if (!qword_1007FFDF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001617F8()
{
  sub_10001A7A4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1001618A0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_1001618D8()
{
}

uint64_t sub_1001618E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s10PhotoAssetC9PhotoDataVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100161944(uint64_t a1)
{
  uint64_t v2 = _s10PhotoAssetC9PhotoDataVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001619A0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t sub_100161AF8(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100160598(a1, v7, v1 + v4, v8);
}

uint64_t sub_100161BD0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

void sub_100161D30()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  uint64_t v7 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  sub_100160A6C(v5, v6, v0 + v2, v7);
}

uint64_t sub_100161E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000BB144(0xD000000000000029, 0x800000010068AAA0, (SEL *)&selRef_setURL_forKey_, 0) = v2;
  return swift_retain();
}

uint64_t sub_100161E10()
{
  return swift_release();
}

void sub_100161E18()
{
}

char *sub_100161E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9 = OBJC_IVAR____TtC7Journal29FullScreenUnsupportedItemView_assetShadowView;
  id v10 = objc_allocWithZone((Class)UIView);
  char v11 = v6;
  *(void *)&v6[v9] = [v10 init];
  uint64_t v12 = OBJC_IVAR____TtC7Journal29FullScreenUnsupportedItemView_assetView;
  *(void *)&v11[OBJC_IVAR____TtC7Journal29FullScreenUnsupportedItemView_assetView] = 0;
  uint64_t v13 = v11;
  if (a5)
  {
    uint64_t v14 = self;
    id v15 = a5;
    id v16 = [v14 secondaryLabelColor];
    id v17 = [v14 clearColor];
    id v18 = objc_allocWithZone((Class)type metadata accessor for UnsupportedAssetView());
    uint64_t v19 = sub_1002BCDB8(v15, v16, v17, 60.0);
    uint64_t v13 = *(char **)&v11[v12];
    *(void *)&v11[v12] = v19;
  }
  v97.receiver = v11;
  v97.super_class = (Class)type metadata accessor for FullScreenUnsupportedItemView();
  id v20 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v21 = v20;
  uint64_t v94 = a6;
  uint64_t v95 = a5;
  if (a6) {
    [v20 setBackgroundColor:a6];
  }
  else {
    id v22 = v20;
  }
  id v23 = [objc_allocWithZone((Class)UIView) initWithFrame:0.0, 0.0, 0.0, 0.0];
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  sub_1005412A4(v23);
  [v21 addSubview:v23];
  id v24 = v21;
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v25 = [v23 centerYAnchor];
  id v26 = [v24 centerYAnchor];
  id v27 = [v25 constraintEqualToAnchor:v26];

  [v27 setActive:1];
  id v28 = v24;
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v29 = [v23 leadingAnchor];
  id v30 = [v28 leadingAnchor];
  id v31 = [v29 constraintEqualToAnchor:v30 constant:8.0];

  [v31 setActive:1];
  uint64_t v32 = (char *)v28;
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v33 = [v23 trailingAnchor];
  id v34 = [v32 trailingAnchor];
  id v35 = [v33 constraintEqualToAnchor:v34 constant:-8.0];

  [v35 setActive:1];
  [v32 frame];
  double Width = CGRectGetWidth(v98);
  [v23 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v37 = [v23 heightAnchor];
  id v38 = [v37 constraintEqualToConstant:Width];

  [v38 setActive:1];
  id v39 = [objc_allocWithZone((Class)UILabel) init];
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v39 setText:v40];

  [v39 setTextAlignment:1];
  [v39 setNumberOfLines:0];
  id v96 = self;
  id v41 = [v96 labelColor];
  [v39 setTextColor:v41];

  if (qword_1007F7288 != -1) {
    swift_once();
  }
  [v39 setFont:qword_10083D850];
  [v39 setAdjustsFontForContentSizeCategory:1];
  [v23 addSubview:v39];
  [v39 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v42 = [v39 leadingAnchor];
  id v43 = [v23 leadingAnchor];
  id v44 = [v42 constraintEqualToAnchor:v43 constant:8.0];

  [v44 setActive:1];
  [v39 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v45 = [v39 trailingAnchor];
  id v46 = [v23 trailingAnchor];
  id v47 = [v45 constraintEqualToAnchor:v46 constant:-8.0];

  [v47 setActive:1];
  id v48 = [v39 centerYAnchor];
  id v49 = [v23 centerYAnchor];
  id v50 = [v48 constraintEqualToAnchor:v49 constant:-60.0];

  [v50 setActive:1];
  uint64_t v51 = *(void **)&v32[OBJC_IVAR____TtC7Journal29FullScreenUnsupportedItemView_assetView];
  if (v51)
  {
    id v52 = v51;
    [v23 addSubview:v52];
    [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v53 = [v52 centerXAnchor];
    id v54 = [v23 centerXAnchor];
    id v55 = [v53 constraintEqualToAnchor:v54];

    [v55 setActive:1];
    id v56 = [v52 bottomAnchor];
    id v57 = [v39 topAnchor];
    id v58 = [v56 constraintEqualToAnchor:v57 constant:-20.0];

    [v58 setActive:1];
    [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v59 = [v52 heightAnchor];
    id v60 = [v59 constraintEqualToConstant:60.0];

    [v60 setActive:1];
    [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v61 = [v52 widthAnchor];
    id v62 = [v61 constraintEqualToConstant:60.0];
  }
  else
  {
    [v32 frame];
    id v52 = [objc_allocWithZone((Class)UIImageView) initWithFrame:v63, v64, v65, v66];
    if (qword_1007F7C90 != -1) {
      swift_once();
    }
    uint64_t v67 = (void *)qword_10083E978;
    if (qword_10083E978)
    {
      sub_100010218((uint64_t *)&unk_1007FA1C0);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_1006D6D00;
      *(void *)(v68 + 32) = [v96 secondaryLabelColor];
      specialized Array._endMutation()();
      sub_100088B50();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v70 = [self configurationWithPaletteColors:isa];

      id v71 = [v67 imageWithConfiguration:v70];
    }
    else
    {
      id v71 = 0;
    }
    [v52 setImage:v71];

    [v52 setContentMode:1];
    [v23 addSubview:v52];
    [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v72 = [v52 centerXAnchor];
    id v73 = [v23 centerXAnchor];
    id v74 = [v72 constraintEqualToAnchor:v73];

    [v74 setActive:1];
    id v75 = [v52 bottomAnchor];
    id v76 = [v39 topAnchor];
    id v77 = [v75 constraintEqualToAnchor:v76 constant:-20.0];

    [v77 setActive:1];
    [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v78 = [v52 heightAnchor];
    id v79 = [v78 constraintEqualToConstant:60.0];

    [v79 setActive:1];
    [v52 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v61 = [v52 widthAnchor];
    id v62 = [v61 constraintEqualToConstant:60.0];
  }
  id v80 = v62;

  [v80 setActive:1];
  id v81 = [objc_allocWithZone((Class)UILabel) init];
  NSString v82 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v81 setText:v82];

  if (qword_1007F7280 != -1) {
    swift_once();
  }
  [v81 setFont:qword_10083D848];
  [v81 setTextAlignment:1];
  [v81 setNumberOfLines:0];
  id v83 = [v96 secondaryLabelColor];
  [v81 setTextColor:v83];

  [v81 setAdjustsFontForContentSizeCategory:1];
  [v81 sizeToFit];
  [v23 addSubview:v81];
  [v81 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v84 = [v81 leadingAnchor];
  id v85 = [v23 leadingAnchor];
  id v86 = [v84 constraintEqualToAnchor:v85 constant:60.0];

  [v86 setActive:1];
  [v81 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v87 = [v81 trailingAnchor];
  id v88 = [v23 trailingAnchor];
  id v89 = [v87 constraintEqualToAnchor:v88 constant:-60.0];

  [v89 setActive:1];
  id v90 = [v81 topAnchor];
  id v91 = [v39 bottomAnchor];
  id v92 = [v90 constraintEqualToAnchor:v91];

  [v92 setActive:1];
  return v32;
}